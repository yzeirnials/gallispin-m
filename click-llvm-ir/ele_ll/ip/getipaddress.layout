
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110ba95c58 prev 0x56110ba8d3f8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110ba95d50 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56110ba95de0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56110ba95e58 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56110ba95f18 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56110ba95fe0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56110ba96158 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56110ba96090 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56110ba96200 <col:24>
| `-OptimizeNoneAttr 0x56110ba96258 <col:34>
|-CXXMethodDecl 0x56110ba962a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56110ba96558 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56110ba96350 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56110ba963c8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56110ba96448 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56110ba96610 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56110ba96648 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56110ba966b0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56110ba96738 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56110ba96a58 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56110ba967f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56110ba96868 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56110ba968e0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56110ba96960 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56110ba96b70 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56110ba9e4e8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56110ba9e4e8
| `-ParmVarDecl 0x56110ba9e5f8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56110ba9e698 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56110ba9e698
| `-ParmVarDecl 0x56110ba9e7a8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56110bb6b7b0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110ba88c70 prev 0x56110ba889f0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56110ba88d68 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56110ba88df8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56110ba88e58 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56110ba88f48 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56110ba89048 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56110ba89218 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56110ba890c8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56110ba89140 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56110ba893a8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56110ba892e0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56110ba89450 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56110ba89588 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56110ba894c0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56110ba89728 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56110ba89668 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56110ba898c8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56110ba89808 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56110ba89970 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56110ba89a70 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56110ba89b50 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba89a50 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56110ba89a30 <col:26> 'int' 1
| `-EnumConstantDecl 0x56110ba89b00 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56110ba89b68 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110ba89ae0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56110ba89ac0 <col:44> 'int' 2
|-CXXMethodDecl 0x56110ba89cb0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56110ba89b98 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56110ba89c18 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56110ba89e08 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56110ba89d78 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56110ba8a048 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56110ba89ec8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56110ba89f40 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56110ba8a0f8 <col:20>
| `-OptimizeNoneAttr 0x56110ba8a150 <col:30>
|-CXXMethodDecl 0x56110ba8a258 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56110ba8a190 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56110ba8a300 <col:20>
| `-OptimizeNoneAttr 0x56110ba8a358 <col:30>
|-CXXMethodDecl 0x56110ba8a3a8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56110ba8a470 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56110ba8a588 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56110ba8a610 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56110ba8a698 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56110ba8a720 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x56110ba8a7a8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56110ba8a838 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56110ba8a8f8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56110ba8a980 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x56110ba8aa08 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x56110ba8aa90 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56110ba8ab18 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56110ba8aba0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56110ba8ac30 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56110ba8acf0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56110ba8ad80 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56110ba8aed0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56110ba8ae38 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56110ba8b060 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56110ba8af90 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56110ba8b310 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56110ba8b118 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56110ba8b198 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56110ba8b218 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56110ba8b3c8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56110ba8b4d0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56110ba8b760 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba8b4b0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56110ba8b490 <col:33> 'int' 0
| |-EnumConstantDecl 0x56110ba8b560 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56110ba8b778 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba8b540 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56110ba8b520 <col:32> 'int' 20
| |-EnumConstantDecl 0x56110ba8b5f0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56110ba8b790 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba8b5d0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56110ba8b5b0 <col:38> 'int' 90
| |-EnumConstantDecl 0x56110ba8b680 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56110ba8b7a8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba8b660 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56110ba8b640 <col:35> 'int' 100
| `-EnumConstantDecl 0x56110ba8b710 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56110ba8b7c0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110ba8b6f0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56110ba8b6d0 <col:32> 'int' 2000
|-CXXMethodDecl 0x56110ba8b800 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56110ba8bc40 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56110ba8bab0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56110ba8bb28 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56110ba8bd10 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56110ba8be90 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56110ba8bdc0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56110ba8c098 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56110ba8bf48 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56110ba8bfc0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56110ba8c198 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56110ba8c238 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56110ba8c300 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56110ba8c390 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56110ba8c5c0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba8c370 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56110ba8c350 <col:36> 'int' EnumConstant 0x56110ba8c300 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56110ba8c3e0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56110ba8c430 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56110ba8c480 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56110ba8c4d0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56110ba8c520 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56110ba8c570 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56110ba8c6a8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56110ba8c5e8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56110ba8c770 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56110ba8c830 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56110ba8c8f0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56110ba8c9b0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56110ba8cac8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56110ba8cb90 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56110ba8cd10 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56110ba8cc40 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56110ba8ce38 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56110ba8d038 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56110ba8cee8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56110ba8cf68 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56110ba9a988 <col:54, line:127:5>
|   |-ParenExpr 0x56110ba9a838 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56110ba9a808 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba9a4f8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56110ba9a4d0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56110ba9a4b8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56110ba9a4a0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56110ba9a470 <col:31> 'Router *' lvalue ->_router 0x56110ba98350
|   |   |         `-CXXThisExpr 0x56110ba9a460 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56110ba9a558 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba9a538 <col:48> 'int' 0
|   |   `-CallExpr 0x56110ba9a768 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56110ba9a750 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba9a730 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba9a7a8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba9a5c8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56110ba9a7c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba9a5e8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56110ba9a7d8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba9a620 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56110ba9a7f0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba9a718 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba9a700 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba9a6b8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56110ba9a8d0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56110ba9a868 <col:9> 'Router *' lvalue ->_router 0x56110ba98350
|   | | `-CXXThisExpr 0x56110ba9a858 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56110ba9a8b8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56110ba9a898 <col:19> 'Router *' lvalue ParmVar 0x56110ba8cee8 'r' 'Router *'
|   `-BinaryOperator 0x56110ba9a968 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56110ba9a900 <col:9> 'int' lvalue ->_eindex 0x56110ba983b8
|     | `-CXXThisExpr 0x56110ba9a8f0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56110ba9a950 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56110ba9a930 <col:19> 'int' lvalue ParmVar 0x56110ba8cf68 'eindex' 'int'
|-CXXMethodDecl 0x56110ba8d1c0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56110ba8d0f8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56110ba8d290 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56110ba8d358 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56110ba8d3f8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56110ba8d648 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56110ba8d4c0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56110ba8d540 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56110ba8d6f8 <col:20>
| `-OptimizeNoneAttr 0x56110ba8d750 <col:30>
|-CXXMethodDecl 0x56110ba8d858 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56110ba8d790 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56110ba8d900 <col:20>
| `-OptimizeNoneAttr 0x56110ba8d958 <col:30>
|-CXXMethodDecl 0x56110ba8da28 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56110ba8d998 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56110ba8dad0 <col:20>
| `-OptimizeNoneAttr 0x56110ba8db28 <col:30>
|-CXXMethodDecl 0x56110ba8dcb8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56110ba8db60 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56110ba8dbe0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56110ba8de48 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56110ba8dd80 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56110ba8df98 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56110ba8df08 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56110ba8e0e8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56110ba8e058 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56110ba8e238 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56110ba8e1a8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56110ba8e4f8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56110ba8e2f0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56110ba8e370 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56110ba8e418 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56110ba8e5d0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56110ba8e690 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56110ba8e960 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56110ba8e810 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56110ba8e888 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56110ba8ea88 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56110ba8ec60 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56110ba8eb40 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56110ba8ebc0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56110ba8ee48 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56110ba8ed28 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56110ba8eda8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56110ba8f1b8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56110ba8ef08 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56110ba8ef80 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56110ba8f000 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56110ba99f70 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56110ba99f50 <col:106> 'int' 0
| `-ParmVarDecl 0x56110ba8f078 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56110ba99fa8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56110ba99f88 <col:126> 'int' 0
|-CXXMethodDecl 0x56110ba8f558 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56110ba8f288 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56110ba8f320 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56110ba8f3a0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56110ba8f418 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56110ba99fe0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56110ba99fc0 <col:114> 'int' 0
|-CXXMethodDecl 0x56110ba8f8e8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56110ba8f630 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56110ba8f6a8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56110ba8f728 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56110ba99ff8 <col:96> 'int' 0
| `-ParmVarDecl 0x56110ba8f7a0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56110ba9a038 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56110ba9a018 <col:116> 'int' 0
|-CXXMethodDecl 0x56110ba8fc68 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56110ba8f9b8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56110ba8fa30 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56110ba8fab0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56110ba9a070 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56110ba9a050 <col:109> 'int' 0
| `-ParmVarDecl 0x56110ba8fb28 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56110ba9a0a8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56110ba9a088 <col:129> 'int' 0
|-CXXMethodDecl 0x56110ba8ffe8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56110ba8fd38 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56110ba8fdb0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56110ba8fe30 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56110ba8fea8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56110ba9a0e0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56110ba9a0c0 <col:117> 'int' 0
|-CXXMethodDecl 0x56110ba90378 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56110ba900c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba90138 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56110ba901b8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56110ba9a0f8 <col:99> 'int' 0
| `-ParmVarDecl 0x56110ba90230 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56110ba9a138 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56110ba9a118 <col:119> 'int' 0
|-CXXMethodDecl 0x56110ba90798 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56110ba90448 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56110ba904c8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56110ba90540 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56110ba905c0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56110ba9a170 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56110ba9a150 <col:108> 'int' 0
| `-ParmVarDecl 0x56110ba90640 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56110ba9a1a8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56110ba9a188 <col:141> 'int' 0
|-CXXMethodDecl 0x56110ba90bb8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56110ba90870 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56110ba908f0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56110ba90968 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56110ba909e8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56110ba90a68 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56110ba9a1c0 <col:121> 'int' 0
|-CXXMethodDecl 0x56110ba90fe8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56110ba90c98 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56110ba90d18 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56110ba90d90 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56110ba90e10 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56110ba9a1e0 <col:98> 'int' 0
| `-ParmVarDecl 0x56110ba90e90 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56110ba9a200 <col:123> 'int' 0
|-CXXMethodDecl 0x56110ba912b0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56110ba910c0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56110ba91140 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56110ba911c0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56110ba9a220 <col:80> 'int' 0
|-EnumDecl 0x56110ba91368 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56110ba91470 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56110ba91700 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba91450 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56110ba91430 <col:42> 'int' 1
| |-EnumConstantDecl 0x56110ba91500 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56110ba91718 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba914e0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56110ba914c0 <col:40> 'int' 2
| |-EnumConstantDecl 0x56110ba91590 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56110ba91730 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba91570 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56110ba91550 <col:44> 'int' 4
| |-EnumConstantDecl 0x56110ba91620 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56110ba91748 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba91600 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56110ba915e0 <col:36> 'int' 7
| `-EnumConstantDecl 0x56110ba916b0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56110ba91760 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110ba91690 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56110ba91670 <col:34> 'int' 6
|-CXXMethodDecl 0x56110ba91a18 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56110ba91788 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56110ba91828 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56110ba918a8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56110ba91920 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56110ba9a2d8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56110ba9a2c0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56110ba9a2a8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56110ba9a288 <col:98, col:105> 'String' (CXXTemporary 0x56110ba9a288)
|           `-CXXTemporaryObjectExpr 0x56110ba9a250 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56110ba91cb8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56110ba91ae8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56110ba91b60 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56110ba91bd8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56110ba9a388 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56110ba9a370 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56110ba9a358 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56110ba9a338 <col:94, col:101> 'String' (CXXTemporary 0x56110ba9a338)
| |         `-CXXTemporaryObjectExpr 0x56110ba9a300 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56110ba9ab70 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56110ba9aae8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56110ba9aab8 <col:9> '<bound member function type>' ->add_task_handlers 0x56110ba91a18
|     | `-CXXThisExpr 0x56110ba9aaa8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56110ba9ab28 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56110ba9aa28 <col:27> 'Task *' lvalue ParmVar 0x56110ba91ae8 'task' 'Task *'
|     |-ImplicitCastExpr 0x56110ba9ab40 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56110ba9aa48 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56110ba91b60 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56110ba9ab58 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56110ba9aa68 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56110ba916b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56110ba9aa88 <col:62> 'const String' lvalue ParmVar 0x56110ba91bd8 'prefix' 'const String &'
|-CXXMethodDecl 0x56110ba91ec8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56110ba91d80 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56110ba91df8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56110ba9a438 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56110ba9a420 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56110ba9a408 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56110ba9a3e8 <col:70, col:77> 'String' (CXXTemporary 0x56110ba9a3e8)
| |         `-CXXTemporaryObjectExpr 0x56110ba9a3b0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56110ba9ad48 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56110ba9acc0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56110ba9ac90 <col:9> '<bound member function type>' ->add_task_handlers 0x56110ba91a18
|     | `-CXXThisExpr 0x56110ba9ac80 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56110ba9ad00 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56110ba9ac00 <col:27> 'Task *' lvalue ParmVar 0x56110ba91d80 'task' 'Task *'
|     |-ImplicitCastExpr 0x56110ba9ad18 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56110ba9ac20 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56110ba9ad30 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56110ba9ac40 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56110ba916b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56110ba9ac60 <col:57> 'const String' lvalue ParmVar 0x56110ba91df8 'prefix' 'const String &'
|-CXXMethodDecl 0x56110ba921a8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56110ba91f90 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba92010 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba92088 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56110ba92458 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56110ba92278 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba922f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba92378 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56110ba92748 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56110ba92528 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba925a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba92620 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56110ba929f8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56110ba92818 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba92898 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba92918 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56110ba92ca8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56110ba92ac8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba92b48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba92bc8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56110ba92f58 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56110ba92d78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba92df8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba92e70 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56110ba93208 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56110ba93028 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba930a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba93128 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56110ba93518 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56110ba93330 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba933b0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba93430 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56110ba937f8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56110ba935e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba93668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba93710 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56110ba93ad8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56110ba938c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba93948 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba939f0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56110ba93d40 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56110ba93ba8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56110ba93c28 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56110ba93ca0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56110ba93fe8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56110ba93e10 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56110ba93e90 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56110ba93f08 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56110ba94298 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56110ba940b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba94138 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba941b8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56110ba94548 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56110ba94368 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba943e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba94460 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56110ba947f8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56110ba94618 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba94698 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba94710 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56110ba94ac8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56110ba948c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba94948 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56110ba949e8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56110ba94df8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56110ba94b98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56110ba94c18 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56110ba94c90 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56110ba94d08 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56110ba9a450 <col:93> 'bool' false
|-CXXMethodDecl 0x56110ba94fe0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56110ba94ec8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56110ba94f48 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56110ba951b8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56110ba950a0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56110ba95120 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56110ba95498 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56110ba95278 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56110ba952f0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56110ba95370 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56110ba953e8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56110ba95788 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56110ba95568 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56110ba955e0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56110ba95660 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56110ba956d8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56110ba959c0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56110ba95860 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56110ba958e0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56110ba95ba8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56110ba95a88 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56110ba95b08 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56110ba95c58 prev 0x56110ba8d3f8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56110ba95d50 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56110ba95de0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56110ba95e58 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56110ba95f18 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56110ba95fe0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56110ba96158 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56110ba96090 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56110ba96200 <col:24>
| | `-OptimizeNoneAttr 0x56110ba96258 <col:34>
| |-CXXMethodDecl 0x56110ba962a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56110ba96558 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56110ba96350 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56110ba963c8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56110ba96448 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56110ba96610 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56110ba96648 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56110ba966b0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56110ba96738 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56110ba96a58 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56110ba967f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56110ba96868 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56110ba968e0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56110ba96960 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56110ba96b70 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56110ba9e4e8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56110ba9e4e8
| | `-ParmVarDecl 0x56110ba9e5f8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56110ba9e698 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56110ba9e698
| | `-ParmVarDecl 0x56110ba9e7a8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56110bb6b7b0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56110ba96be8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56110ba96c88 <col:38> "" ""
|-CXXMethodDecl 0x56110ba96d18 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56110ba96db8 <col:44> "" ""
|-AccessSpecDecl 0x56110ba96e28 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56110ba96e50 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56110ba96f50 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56110ba96fa0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110ba96f30 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56110ba96f10 <col:27> 'int' 4
|-FieldDecl 0x56110ba97058 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56110ba97208 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56110ba972c0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56110ba98350 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56110ba983b8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56110ba98508 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56110ba98448 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56110ba986b8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56110ba985c8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56110ba98898 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56110ba98778 <col:20> col:23 'int'
| `-ParmVarDecl 0x56110ba987f8 <col:25> col:28 'int'
|-CXXMethodDecl 0x56110ba98b40 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56110ba98960 <col:23> col:26 'int'
| |-ParmVarDecl 0x56110ba989e0 <col:28> col:31 'int'
| `-ParmVarDecl 0x56110ba98a58 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56110ba98bf8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56110ba98cc0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56110ba98d10 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56110ba98d60 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56110ba98f40 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56110ba98df0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56110ba98e68 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56110ba991e8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56110ba99008 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56110ba99088 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56110ba99100 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56110ba99408 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56110ba992b8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56110ba99338 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56110ba99740 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56110ba994c8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56110ba99548 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56110ba995c0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56110ba99640 <col:57> col:60 'int'
|-CXXMethodDecl 0x56110ba99928 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56110ba99810 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56110ba99890 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56110ba99a78 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56110ba999e8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56110ba99df8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56110ba99b38 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56110ba99bb8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56110ba99c30 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56110ba99cb0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56110ba99f10 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class GetIPAddress
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
       112 |   int _anno
           | [sizeof=120, dsize=116, align=8,
           |  nvsize=116, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110baa1658 <../elements/ip/getipaddress.hh:34:1, line:56:1> line:34:7 class GetIPAddress definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56110baa17b8 <col:1, col:7> col:7 implicit referenced class GetIPAddress
|-EnumDecl 0x56110baa1848 <line:36:5, line:39:5> line:36:5
| |-EnumConstantDecl 0x56110baa1968 <line:37:2, col:19> col:2 offset_ip_src 'GetIPAddress::(anonymous enum at ../elements/ip/getipaddress.hh:36:5)'
| | `-ConstantExpr 0x56110baa1948 <col:18, col:19> 'int' Int: -1
| |   `-UnaryOperator 0x56110baa1930 <col:18, col:19> 'int' prefix '-'
| |     `-IntegerLiteral 0x56110baa1910 <col:19> 'int' 1
| `-EnumConstantDecl 0x56110baa1a10 <line:38:2, col:19> col:2 offset_ip_dst 'GetIPAddress::(anonymous enum at ../elements/ip/getipaddress.hh:36:5)'
|   `-ConstantExpr 0x56110baa19f0 <col:18, col:19> 'int' Int: -2
|     `-UnaryOperator 0x56110baa19d8 <col:18, col:19> 'int' prefix '-'
|       `-IntegerLiteral 0x56110baa19b8 <col:19> 'int' 2
|-FieldDecl 0x56110baa1a78 <line:41:5, col:9> col:9 _offset 'int'
|-FieldDecl 0x56110baa1ae0 <line:42:5, col:9> col:9 _anno 'int'
|-AccessSpecDecl 0x56110baa1b30 <line:44:2, col:8> col:2 public
|-CXXConstructorDecl 0x56110baa1bc0 <line:46:3, col:16> col:3 GetIPAddress 'void ()'
|-CXXDestructorDecl 0x56110baa1cb0 <line:47:3, col:17> col:3 ~GetIPAddress 'void ()' noexcept-unevaluated 0x56110baa1cb0
| `-Overrides: [ 0x56110ba88f48 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x56110baa1de0 <line:49:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x56110ba8a3a8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56110baa2728 <col:34, col:59>
|   `-ReturnStmt 0x56110baa2718 <col:36, col:43>
|     `-ImplicitCastExpr 0x56110baa2700 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56110baa26d8 <col:43> 'const char [13]' lvalue "GetIPAddress"
|-CXXMethodDecl 0x56110baa1ea8 <line:50:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x56110ba8a470 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56110baa2788 <col:34, col:54>
|   `-ReturnStmt 0x56110baa2778 <col:36, col:43>
|     `-ImplicitCastExpr 0x56110baa2760 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56110baa2740 <col:43> 'const char []' lvalue Var 0x56110ba8a720 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x56110baa2180 <line:52:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56110ba8bc40 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56110baa2030 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x56110baa20a8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x56110baa22d0 <line:54:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x56110ba89588 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x56110baa2240 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x56110baa23a8 <line:34:7> col:7 implicit GetIPAddress 'void (const GetIPAddress &)' inline default_delete noexcept-unevaluated 0x56110baa23a8
| `-ParmVarDecl 0x56110baa24b8 <col:7> col:7 'const GetIPAddress &'
`-CXXMethodDecl 0x56110baa2558 <col:7> col:7 implicit operator= 'GetIPAddress &(const GetIPAddress &)' inline default_delete noexcept-unevaluated 0x56110baa2558
  `-ParmVarDecl 0x56110baa2668 <col:7> col:7 'const GetIPAddress &'

Layout: <CGRecordLayout
  LLVMType:%class.GetIPAddress = type { %class.Element.base, i32, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.GetIPAddress.base = type { %class.Element.base, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110b85bb00 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56110b85bc18 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56110b85bcb8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56110b85bd18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56110b85bd78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56110b85be28 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110b85c130 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110b85c248 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56110b85c2f0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56110b85c358 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56110b85c3e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56110b862480 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56110b8628b8 <col:12>
|-CXXConstructorDecl 0x56110b862588 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56110b862698 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56110b85c2f0 'data' 'const char *'
| | `-ImplicitCastExpr 0x56110b864e40 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56110b864e10 <col:12> 'const char *const' lvalue .data 0x56110b85c2f0
| |     `-DeclRefExpr 0x56110b864df0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b862698 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56110b85c358 'length' 'int'
| | `-ImplicitCastExpr 0x56110b864ed0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56110b864ea0 <col:12> 'const int' lvalue .length 0x56110b85c358
| |     `-DeclRefExpr 0x56110b864e80 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b862698 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56110b85c3e8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56110b864f60 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56110b864f30 <col:12> 'String::memo_t *const' lvalue .memo 0x56110b85c3e8
| |     `-DeclRefExpr 0x56110b864f10 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b862698 '' 'const String::rep_t &'
| `-CompoundStmt 0x56110b864fb8 <col:12>
|-CXXConstructorDecl 0x56110b862738 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56110b862738
| `-ParmVarDecl 0x56110b862848 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56110b867da0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56110b8737b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56110b8738c8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56110b873de0 <col:12>
|   |-BinaryOperator 0x56110b873bf8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56110b873bb0 <col:12> 'const char *' lvalue ->data 0x56110b85c2f0
|   | | `-CXXThisExpr 0x56110b873ba0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56110b873be0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56110b873b70 <col:12> 'const char *const' lvalue .data 0x56110b85c2f0
|   |     `-DeclRefExpr 0x56110b873b50 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b8738c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56110b873cc0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56110b873c78 <col:12> 'int' lvalue ->length 0x56110b85c358
|   | | `-CXXThisExpr 0x56110b873c68 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56110b873ca8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56110b873c38 <col:12> 'const int' lvalue .length 0x56110b85c358
|   |     `-DeclRefExpr 0x56110b873c18 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b8738c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56110b873d88 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56110b873d40 <col:12> 'String::memo_t *' lvalue ->memo 0x56110b85c3e8
|   | | `-CXXThisExpr 0x56110b873d30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56110b873d70 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56110b873d00 <col:12> 'String::memo_t *const' lvalue .memo 0x56110b85c3e8
|   |     `-DeclRefExpr 0x56110b873ce0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b8738c8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56110b873dd0 <col:12>
|     `-UnaryOperator 0x56110b873db8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56110b873da8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56110b873938 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56110b873938
  `-ParmVarDecl 0x56110b873a48 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110b853070 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56110b853188 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56110b853218 <col:16, col:22> col:16 public
|-TypedefDecl 0x56110b853258 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56110b527fd0 'const char *'
|   `-QualType 0x56110b527521 'const char' const
|     `-BuiltinType 0x56110b527520 'char'
|-TypedefDecl 0x56110b8532e0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56110b8532b0 'String::const_iterator' sugar
|   |-Typedef 0x56110b853258 'const_iterator'
|   `-PointerType 0x56110b527fd0 'const char *'
|     `-QualType 0x56110b527521 'const char' const
|       `-BuiltinType 0x56110b527520 'char'
|-TypedefDecl 0x56110b853450 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56110b8533c0 'int (String::*)() const'
|   |-RecordType 0x56110b853100 'String'
|   | `-CXXRecord 0x56110b853070 'String'
|   `-ParenType 0x56110b853360 'int () const' sugar
|     `-FunctionProtoType 0x56110b827f00 'int () const' const cdecl
|       `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110b8534b8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56110b67c8c0 'int64_t' sugar
|   |-Typedef 0x56110b590390 'int64_t'
|   `-TypedefType 0x56110b569630 '__int64_t' sugar
|     |-Typedef 0x56110b569208 '__int64_t'
|     `-BuiltinType 0x56110b5275a0 'long'
|-TypedefDecl 0x56110b853520 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56110b67c7e0 'uint64_t' sugar
|   |-Typedef 0x56110b590530 'uint64_t'
|   `-TypedefType 0x56110b5696c0 '__uint64_t' sugar
|     |-Typedef 0x56110b569278 '__uint64_t'
|     `-BuiltinType 0x56110b527640 'unsigned long'
|-TypedefDecl 0x56110b8535b0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56110b853580 'String::intmax_t' sugar
|   |-Typedef 0x56110b8534b8 'intmax_t'
|   `-TypedefType 0x56110b67c8c0 'int64_t' sugar
|     |-Typedef 0x56110b590390 'int64_t'
|     `-TypedefType 0x56110b569630 '__int64_t' sugar
|       |-Typedef 0x56110b569208 '__int64_t'
|       `-BuiltinType 0x56110b5275a0 'long'
|-TypedefDecl 0x56110b853640 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56110b853610 'String::uintmax_t' sugar
|   |-Typedef 0x56110b853520 'uintmax_t'
|   `-TypedefType 0x56110b67c7e0 'uint64_t' sugar
|     |-Typedef 0x56110b590530 'uint64_t'
|     `-TypedefType 0x56110b5696c0 '__uint64_t' sugar
|       |-Typedef 0x56110b569278 '__uint64_t'
|       `-BuiltinType 0x56110b527640 'unsigned long'
|-CXXConstructorDecl 0x56110b853700 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56110b8538a8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56110b8537e8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56110b853a58 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56110b853998 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56110b853bb0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56110b853b20 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56110b853dc8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56110b853c78 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56110b853cf8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56110b853fe8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56110b853e98 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56110b853f18 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56110b854208 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56110b8540b8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56110b854138 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56110b854428 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56110b8542d8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56110b854358 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56110b8545b8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56110b8544f0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56110b854738 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56110b854678 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56110b8548c8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56110b854800 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56110b854a20 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56110b854990 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56110b854b78 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56110b854ae8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56110b854cd0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56110b854c40 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56110b854e58 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56110b854d98 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56110b854fe8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56110b854f20 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56110b855178 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56110b8550b0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56110b855308 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56110b855240 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56110b855400 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56110b855528 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56110b8556a8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56110b8555e0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56110b8557f8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56110b855768 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56110b8558b0 <col:63> "" ""
|-CXXMethodDecl 0x56110b8559f8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56110b855938 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56110b855c08 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56110b855ab8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56110b855b38 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56110b855e28 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56110b855cd0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56110b855d50 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56110b856108 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56110b855ee8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56110b855f68 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56110b861f50 <col:55> 'int' 10
| `-ParmVarDecl 0x56110b855fe0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56110b861f70 <col:76> 'bool' true
|-CXXMethodDecl 0x56110b8563e8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56110b8561d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56110b856250 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56110b861f80 <col:56> 'int' 10
| `-ParmVarDecl 0x56110b8562c8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56110b861fa0 <col:77> 'bool' true
|-CXXMethodDecl 0x56110b8564f0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56110b8565b8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56110b856680 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56110b856720 <col:20>
| `-OptimizeNoneAttr 0x56110b856778 <col:30>
|-CXXConversionDecl 0x56110b856868 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56110b856938 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56110b8569f8 <line:85:5, col:29> col:17 used operator! 'bool () const' inline
|-CXXMethodDecl 0x56110b856ae8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56110b856ba8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56110b856d28 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56110b856c60 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56110b856e78 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56110b856de8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56110b856f68 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56110b857028 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56110b857278 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56110b8570e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56110b857160 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56110b8574d8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56110b857340 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56110b8573c0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56110b8575a8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56110b8577b8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56110b857660 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56110b8576e0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56110b8579d8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56110b857880 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56110b857900 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56110b857b68 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56110b857aa0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56110b857c58 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56110b857dc8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56110b857d08 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56110b857fd8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56110b857e88 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56110b857f08 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56110b8581f0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56110b858098 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56110b858110 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56110b858380 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56110b8582b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56110b8585a0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56110b858440 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56110b8584c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56110b8586f0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56110b858660 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56110b8588c8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56110b8587b0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56110b858830 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56110b858a18 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56110b858988 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56110b858c30 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56110b858ad0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56110b858b50 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56110b861fb0 <col:39> 'int' 0
|-CXXMethodDecl 0x56110b858e50 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56110b858cf0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56110b858d70 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56110b861fd0 <col:48> 'int' 0
|-CXXMethodDecl 0x56110b859030 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56110b858f10 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56110b858f90 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56110b861ff0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56110b859100 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56110b8591c0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56110b859280 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56110b859340 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56110b859400 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56110b8595a8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56110b8594b0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56110b859728 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56110b859660 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56110b859900 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56110b8597e8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56110b859a78 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56110b8599b8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56110b859bc0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56110b859b30 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56110b859d10 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56110b859c80 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56110b859ee8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56110b859dd0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56110b859e50 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56110b85a0c8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56110b859fb0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56110b85a030 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56110b85a218 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56110b85a188 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56110b85a428 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56110b85a2d8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56110b85a358 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56110b85a588 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56110b85a4f0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56110b85a6e0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56110b85a648 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56110b85a788 <col:57> "" ""
|-CXXMethodDecl 0x56110b85a898 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56110b85a808 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56110b85a9e8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56110b85a958 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56110b85ab68 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56110b85aaa0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56110b85ac30 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56110b85acf0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56110b85adb0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56110b85ae50 <col:49> "" ""
|-CXXMethodDecl 0x56110b85aee0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56110b85afa0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56110b85b090 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56110b85b158 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56110b85b218 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56110b85b2d8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56110b85b3d0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56110b85b498 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56110b85b560 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56110b85b738 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56110b85b618 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56110b85b698 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56110b85b960 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56110b85b800 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56110b85b880 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56110b85ba70 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56110b85bad8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56110b85bb00 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56110b85bc18 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56110b85bcb8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56110b85bd18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56110b85bd78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56110b85be28 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56110b85be90 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56110b85c0c8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56110b85c118 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110b85c0a8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56110b85bfb8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56110b85bf60 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56110b85bfa0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56110b85bf80 <col:32> 'int' 8
|-CXXRecordDecl 0x56110b85c130 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56110b85c248 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56110b85c2f0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56110b85c358 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56110b85c3e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56110b862480 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56110b8628b8 <col:12>
| |-CXXConstructorDecl 0x56110b862588 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56110b862698 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56110b85c2f0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56110b864e40 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56110b864e10 <col:12> 'const char *const' lvalue .data 0x56110b85c2f0
| | |     `-DeclRefExpr 0x56110b864df0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b862698 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56110b85c358 'length' 'int'
| | | `-ImplicitCastExpr 0x56110b864ed0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56110b864ea0 <col:12> 'const int' lvalue .length 0x56110b85c358
| | |     `-DeclRefExpr 0x56110b864e80 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b862698 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56110b85c3e8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56110b864f60 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56110b864f30 <col:12> 'String::memo_t *const' lvalue .memo 0x56110b85c3e8
| | |     `-DeclRefExpr 0x56110b864f10 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b862698 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56110b864fb8 <col:12>
| |-CXXConstructorDecl 0x56110b862738 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56110b862738
| | `-ParmVarDecl 0x56110b862848 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56110b867da0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56110b8737b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56110b8738c8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56110b873de0 <col:12>
| |   |-BinaryOperator 0x56110b873bf8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56110b873bb0 <col:12> 'const char *' lvalue ->data 0x56110b85c2f0
| |   | | `-CXXThisExpr 0x56110b873ba0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56110b873be0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56110b873b70 <col:12> 'const char *const' lvalue .data 0x56110b85c2f0
| |   |     `-DeclRefExpr 0x56110b873b50 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b8738c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56110b873cc0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56110b873c78 <col:12> 'int' lvalue ->length 0x56110b85c358
| |   | | `-CXXThisExpr 0x56110b873c68 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56110b873ca8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56110b873c38 <col:12> 'const int' lvalue .length 0x56110b85c358
| |   |     `-DeclRefExpr 0x56110b873c18 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b8738c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56110b873d88 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56110b873d40 <col:12> 'String::memo_t *' lvalue ->memo 0x56110b85c3e8
| |   | | `-CXXThisExpr 0x56110b873d30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56110b873d70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56110b873d00 <col:12> 'String::memo_t *const' lvalue .memo 0x56110b85c3e8
| |   |     `-DeclRefExpr 0x56110b873ce0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56110b8738c8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56110b873dd0 <col:12>
| |     `-UnaryOperator 0x56110b873db8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56110b873da8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56110b873938 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56110b873938
|   `-ParmVarDecl 0x56110b873a48 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56110b85c460 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56110b85c6a8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56110b85c4c8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56110b85c548 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56110b85c5c0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56110b862440 <col:79, line:261:5>
|   |-BinaryOperator 0x56110b8620b8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56110b862050 <col:2, col:5> 'const char *' lvalue .data 0x56110b85c2f0
|   | | `-MemberExpr 0x56110b862020 <col:2> 'String::rep_t' lvalue ->_r 0x56110b85c460
|   | |   `-CXXThisExpr 0x56110b862010 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56110b8620a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56110b862080 <col:12> 'const char *' lvalue ParmVar 0x56110b85c4c8 'data' 'const char *'
|   |-BinaryOperator 0x56110b862180 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56110b862118 <col:2, col:5> 'int' lvalue .length 0x56110b85c358
|   | | `-MemberExpr 0x56110b8620e8 <col:2> 'String::rep_t' lvalue ->_r 0x56110b85c460
|   | |   `-CXXThisExpr 0x56110b8620d8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56110b862168 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56110b862148 <col:14> 'int' lvalue ParmVar 0x56110b85c548 'length' 'int'
|   `-IfStmt 0x56110b862428 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56110b8622a0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56110b862288 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56110b862268 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56110b862248 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56110b8621e0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56110b85c3e8
|     |       | `-MemberExpr 0x56110b8621b0 <col:7> 'String::rep_t' lvalue ->_r 0x56110b85c460
|     |       |   `-CXXThisExpr 0x56110b8621a0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56110b862230 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56110b862210 <col:17> 'String::memo_t *' lvalue ParmVar 0x56110b85c5c0 'memo' 'String::memo_t *'
|     `-CallExpr 0x56110b862400 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56110b8623e8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56110b8622f0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56110b84b0d8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56110b862358 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56110b85bcb8
|         `-ImplicitCastExpr 0x56110b862340 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56110b862320 <col:27> 'String::memo_t *' lvalue ParmVar 0x56110b85c5c0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56110b85c958 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56110b85c778 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56110b85c7f8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56110b85c870 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56110b85c460 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56110b8628c8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56110b862a58 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56110b8629c0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56110b862930 <col:2> '<bound member function type>' ->assign_memo 0x56110b85c6a8
|     | `-ImplicitCastExpr 0x56110b8629f8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56110b862920 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56110b862a10 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56110b862960 <col:14> 'const char *' lvalue ParmVar 0x56110b85c778 'data' 'const char *'
|     |-ImplicitCastExpr 0x56110b862a28 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56110b862980 <col:20> 'int' lvalue ParmVar 0x56110b85c7f8 'length' 'int'
|     `-ImplicitCastExpr 0x56110b862a40 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56110b8629a0 <col:28> 'String::memo_t *' lvalue ParmVar 0x56110b85c870 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56110b85cae8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56110b85ca28 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56110b862cb0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56110b862c30 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56110b862a80 <col:2> '<bound member function type>' ->assign_memo 0x56110b85c6a8
|     | `-CXXThisExpr 0x56110b862a70 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56110b862c68 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56110b862b00 <col:14, col:19> 'const char *' lvalue .data 0x56110b85c2f0
|     |   `-MemberExpr 0x56110b862ad0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56110b85c460
|     |     `-DeclRefExpr 0x56110b862ab0 <col:14> 'const String' lvalue ParmVar 0x56110b85ca28 'x' 'const String &'
|     |-ImplicitCastExpr 0x56110b862c80 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56110b862b80 <col:25, col:30> 'int' lvalue .length 0x56110b85c358
|     |   `-MemberExpr 0x56110b862b50 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56110b85c460
|     |     `-DeclRefExpr 0x56110b862b30 <col:25> 'const String' lvalue ParmVar 0x56110b85ca28 'x' 'const String &'
|     `-ImplicitCastExpr 0x56110b862c98 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56110b862c00 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56110b85c3e8
|         `-MemberExpr 0x56110b862bd0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56110b85c460
|           `-DeclRefExpr 0x56110b862bb0 <col:38> 'const String' lvalue ParmVar 0x56110b85ca28 'x' 'const String &'
|-CXXMethodDecl 0x56110b85cbb0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56110b863670 <col:31, line:278:5>
|   `-IfStmt 0x56110b863658 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56110b862d50 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56110b862d38 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56110b862d08 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56110b85c3e8
|     |     `-MemberExpr 0x56110b862cd8 <col:6> 'String::rep_t' lvalue ->_r 0x56110b85c460
|     |       `-CXXThisExpr 0x56110b862cc8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56110b863630 <col:15, line:277:2>
|       |-ParenExpr 0x56110b863200 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56110b8631d0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56110b862e60 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56110b862e48 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56110b862e30 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56110b862df0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56110b85bcb8
|       |   |       `-ImplicitCastExpr 0x56110b862dd8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56110b862da8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56110b85c3e8
|       |   |           `-MemberExpr 0x56110b862d78 <col:27> 'String::rep_t' lvalue ->_r 0x56110b85c460
|       |   |             `-CXXThisExpr 0x56110b862d68 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56110b862ec0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56110b862ea0 <col:54> 'int' 0
|       |   `-CallExpr 0x56110b863130 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56110b863118 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56110b863098 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56110b863170 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56110b862fa8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56110b863188 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56110b862fd8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56110b8631a0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56110b863010 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56110b8631b8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56110b863080 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56110b863068 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56110b863030 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56110b863550 <line:274:6, line:275:22>
|       | |-CallExpr 0x56110b863410 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56110b8633f8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56110b863370 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56110b84c520 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56110b863340 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56110b85bcb8
|       | |   `-ImplicitCastExpr 0x56110b863328 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56110b8632f8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56110b85c3e8
|       | |       `-MemberExpr 0x56110b8632c8 <col:40> 'String::rep_t' lvalue ->_r 0x56110b85c460
|       | |         `-CXXThisExpr 0x56110b8632b8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56110b863510 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56110b8634f8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56110b863438 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56110b861390 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56110b863538 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56110b863498 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56110b85c3e8
|       |       `-MemberExpr 0x56110b863468 <col:15> 'String::rep_t' lvalue ->_r 0x56110b85c460
|       |         `-CXXThisExpr 0x56110b863458 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56110b863610 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56110b8635a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56110b85c3e8
|         | `-MemberExpr 0x56110b863578 <col:6> 'String::rep_t' lvalue ->_r 0x56110b85c460
|         |   `-CXXThisExpr 0x56110b863568 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56110b8635f8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56110b8635d8 <col:16> 'int' 0
|-CXXMethodDecl 0x56110b85ce48 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56110b85cc68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56110b85cce8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56110b85cd60 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56110b85cf20 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56110b85d170 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56110b85cfd8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56110b85d058 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56110b85d0d0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56110b85d358 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56110b85d240 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56110b85d2c0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56110b85d458 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56110b863748 <col:41, line:286:5>
|   `-ReturnStmt 0x56110b863738 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56110b863708 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56110b8636d0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56110b8636b8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56110b863698 <col:46> 'int' 1
|-CXXMethodDecl 0x56110b85d6f8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56110b85d510 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56110b85d590 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56110b85d610 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56110b861390 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56110b85d7c0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56110b861460 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56110b861630 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56110b861518 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56110b861598 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56110b8616f0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56110b8617b8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56110b8618b8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56110b861930 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56110b8619a8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56110b861a10 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56110b861b10 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56110b861b60 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110b861af0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56110b861ad0 <col:22> 'int' 14
|-CXXMethodDecl 0x56110b861d78 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56110b861b90 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56110b861c10 <col:38> col:41 'int'
| `-ParmVarDecl 0x56110b861c90 <col:43> col:46 'int'
|-FriendDecl 0x56110b861e80 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56110b861f10 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56110bad0ca0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56110bad0e78 prev 0x56110bad0ca0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56110bad0f08 <col:46, col:52> col:46 public
|-TypedefDecl 0x56110bad0f30 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bad2890 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56110bad2840 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56110bad2820 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56110bad1148 'type'
|     `-SubstTemplateTypeParmType 0x56110bad1110 'String' sugar
|       |-TemplateTypeParmType 0x56110b817920 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b8178d0 'T'
|       `-RecordType 0x56110b853100 'String'
|         `-CXXRecord 0x56110b853070 'String'
|-TypedefDecl 0x56110bad2948 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56110bad2910 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56110bad28f0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56110bad2890 'type'
|     `-ElaboratedType 0x56110bad2840 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56110bad2820 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56110bad1148 'type'
|         `-SubstTemplateTypeParmType 0x56110bad1110 'String' sugar
|           |-TemplateTypeParmType 0x56110b817920 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56110b8178d0 'T'
|           `-RecordType 0x56110b853100 'String'
|             `-CXXRecord 0x56110b853070 'String'
|-CXXMethodDecl 0x56110bad2ac8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56110bad29d8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56110bad2bb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56110bad2c98 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56110bad2c98
|-CXXMethodDecl 0x56110bad2f68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56110bad2e70 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56110bad31a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56110bad3020 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56110bad3098 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56110bad3378 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56110bad3268 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56110bad32e0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56110bad34d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56110bad35a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56110bad7878 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56110bad3668 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56110bad7760 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56110bad7ad8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56110bad7948 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56110bad79c0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56110bad7c98 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56110bad7ba8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56110bad7e58 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56110bad7d60 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56110bad7f10 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56110bad7fc0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56110bad81f8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56110bad8070 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56110bad80e8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56110bad8498 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56110bad83a0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56110bad8560 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56110bad85b0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56110bad8600 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56110ba8b8b0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56110bacf708 prev 0x56110ba8b8b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56110bad0c10 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56110bad0bc0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56110bad0ba0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56110bad0a50 'type'
|     `-SubstTemplateTypeParmType 0x56110bad08e0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56110b7ed4b0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56110b7ed458 'F'
|       `-RecordType 0x56110bad0540 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56110bad0460 'typed_array_memory'
|-FieldDecl 0x56110bad8650 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56110bad86a0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56110bad86d8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56110bacf7a0 'String' sugar
|   |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56110b824be8 'T'
|   `-RecordType 0x56110b853100 'String'
|     `-CXXRecord 0x56110b853070 'String'
|-TypedefDecl 0x56110bad8768 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56110bad8730 'String &'
|   `-SubstTemplateTypeParmType 0x56110bacf7a0 'String' sugar
|     |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56110b824be8 'T'
|     `-RecordType 0x56110b853100 'String'
|       `-CXXRecord 0x56110b853070 'String'
|-TypedefDecl 0x56110bad87f8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56110bad87c0 'const String &'
|   `-QualType 0x56110bacf7a1 'const String' const
|     `-SubstTemplateTypeParmType 0x56110bacf7a0 'String' sugar
|       |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b824be8 'T'
|       `-RecordType 0x56110b853100 'String'
|         `-CXXRecord 0x56110b853070 'String'
|-TypedefDecl 0x56110bad8888 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56110bad8850 'String *'
|   `-SubstTemplateTypeParmType 0x56110bacf7a0 'String' sugar
|     |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56110b824be8 'T'
|     `-RecordType 0x56110b853100 'String'
|       `-CXXRecord 0x56110b853070 'String'
|-TypedefDecl 0x56110bad8918 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56110bad88e0 'const String *'
|   `-QualType 0x56110bacf7a1 'const String' const
|     `-SubstTemplateTypeParmType 0x56110bacf7a0 'String' sugar
|       |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b824be8 'T'
|       `-RecordType 0x56110b853100 'String'
|         `-CXXRecord 0x56110b853070 'String'
|-TypedefDecl 0x56110bad9570 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56110bad9520 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56110bad9500 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56110bad9438 'type'
|     `-LValueReferenceType 0x56110bad9400 'const String &'
|       `-QualType 0x56110bad91a1 'const String' const
|         `-SubstTemplateTypeParmType 0x56110bad91a0 'String' sugar
|           |-TemplateTypeParmType 0x56110b7f7400 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56110b7f73a8 'T'
|           `-RecordType 0x56110b853100 'String'
|             `-CXXRecord 0x56110b853070 'String'
|-TypedefDecl 0x56110bad95d8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56110bad87c0 'const String &'
|   `-QualType 0x56110bacf7a1 'const String' const
|     `-SubstTemplateTypeParmType 0x56110bacf7a0 'String' sugar
|       |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b824be8 'T'
|       `-RecordType 0x56110b853100 'String'
|         `-CXXRecord 0x56110b853070 'String'
|-TypedefDecl 0x56110bad9630 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bad9698 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56110bad8850 'String *'
|   `-SubstTemplateTypeParmType 0x56110bacf7a0 'String' sugar
|     |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56110b824be8 'T'
|     `-RecordType 0x56110b853100 'String'
|       `-CXXRecord 0x56110b853070 'String'
|-TypedefDecl 0x56110bad9700 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56110bad88e0 'const String *'
|   `-QualType 0x56110bacf7a1 'const String' const
|     `-SubstTemplateTypeParmType 0x56110bacf7a0 'String' sugar
|       |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b824be8 'T'
|       `-RecordType 0x56110b853100 'String'
|         `-CXXRecord 0x56110b853070 'String'
|-EnumDecl 0x56110bad9758 <line:134:5> col:5
| `-EnumConstantDecl 0x56110bad9850 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56110bad9830 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56110b8262c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56110b8262a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56110b826280 <col:40> 'int' 1
|-CXXConstructorDecl 0x56110bad98d8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56110bad9b68 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56110bad9990 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56110bad9a30 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56110bad9df8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56110bad9ce0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56110bada0b8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56110bad9fa0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56110bada3d0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56110bada2b0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56110bada6e0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56110bada5c0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56110bada9d0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56110bada818 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56110bada890 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56110badaaf8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56110badaba8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110badac00 <col:30> Inherited
|-CXXMethodDecl 0x56110badac48 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56110badacf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110badad50 <col:30> Inherited
|-CXXMethodDecl 0x56110badae18 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56110badaec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110badaf20 <col:30> Inherited
|-CXXMethodDecl 0x56110badaf68 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56110badb018 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110badb070 <col:30> Inherited
|-CXXMethodDecl 0x56110badb0b8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56110badb168 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110badb1c0 <col:30> Inherited
|-CXXMethodDecl 0x56110badb208 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56110badb2b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110badb310 <col:30> Inherited
|-CXXMethodDecl 0x56110badb338 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56110badb3e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56110badb498 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56110badb658 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56110badb548 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56110badb5c0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56110badb7a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56110badb718 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110badb958 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56110badb860 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56110badba10 <col:20>
| `-OptimizeNoneAttr 0x56110badba68 <col:30>
|-CXXMethodDecl 0x56110badbb88 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56110badba90 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56110badbc40 <col:20>
| `-OptimizeNoneAttr 0x56110badbc98 <col:30>
|-CXXMethodDecl 0x56110badbd50 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56110badbcc0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110badbe98 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56110badbe08 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110badbfc8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56110badc0c8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56110badc198 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56110badc268 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56110badc3a8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56110badc318 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110badc4f0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56110badc460 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110badc638 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56110badc5a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56110badc6f0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56110badc7f0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56110badc760 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56110badc8a8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56110badc968 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56110badca68 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56110badcbe8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56110badcb28 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56110badd3a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56110badcca0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56110badd308 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56110badd208 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56110badd488 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56110badd5d8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56110badd548 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56110badd690 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56110badd8d8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56110badd750 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56110badd7c8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56110badda68 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56110badd9a8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56110baddc78 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56110baddb30 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56110baddba8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56110baddd38 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56110baddf98 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56110baddea0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56110bade068 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56110bade068

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110bb58d38 prev 0x56110ba092d8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56110bb58e30 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56110bb58ec0 <col:22, col:28> col:22 public
|-EnumDecl 0x56110bb58ee8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56110bb59008 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56110bb58fe8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56110bb58fd0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56110bb58fb0 <col:14> 'int' 999
| |-EnumConstantDecl 0x56110bb590b0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56110bb59090 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56110bb59078 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56110bb59058 <col:14> 'int' 1
| |-EnumConstantDecl 0x56110bb59140 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56110bb59120 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56110bb59100 <col:17> 'int' 0
| |-EnumConstantDecl 0x56110bb591d0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56110bb591b0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56110bb59190 <col:13> 'int' 1
| |-EnumConstantDecl 0x56110bb59260 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56110bb59240 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56110bb59220 <col:16> 'int' 2
| |-EnumConstantDecl 0x56110bb592f0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56110bb592d0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56110bb592b0 <col:13> 'int' 3
| |-EnumConstantDecl 0x56110bb59380 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56110bb59360 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56110bb59340 <col:15> 'int' 4
| |-EnumConstantDecl 0x56110bb59410 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56110bb593f0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56110bb593d0 <col:14> 'int' 5
| |-EnumConstantDecl 0x56110bb594a0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56110bb59480 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56110bb59460 <col:12> 'int' 6
| `-EnumConstantDecl 0x56110bb59530 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56110bb59510 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56110bb594f0 <col:13> 'int' 7
|-VarDecl 0x56110bb595a0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56110bb59628 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56110bb596b0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56110bb59738 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56110bb597c0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56110bb59848 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56110bb598d0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56110bb59958 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56110bb599e0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56110bb59a68 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56110bb59af0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56110bb59bf0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56110bb5ef18 '_nerrors' 'int'
| | `-IntegerLiteral 0x56110bb5f6a8 <line:128:13> 'int' 0
| `-CompoundStmt 0x56110bb5f718 <col:16, line:129:5>
|-CXXDestructorDecl 0x56110bb59ce0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56110bb5f728 <col:29, line:132:5>
|-CXXMethodDecl 0x56110bb59e98 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56110bb59dd0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56110bb59f60 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56110bb5a048 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56110bb5f780 <col:44, line:161:5>
|   `-ReturnStmt 0x56110bb5f770 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56110bb5f758 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56110bb5f738 <col:9> 'ErrorHandler *' lvalue Var 0x56110bb5ef78 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56110bb5a188 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56110bb5a0f8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56110bb5a250 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56110bb5f7e0 <col:43, line:173:5>
|   `-ReturnStmt 0x56110bb5f7d0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56110bb5f7b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56110bb5f798 <col:9> 'ErrorHandler *' lvalue Var 0x56110bb5eff0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56110bb5a308 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56110bb5a388 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56110bb5a498 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56110bb5a408 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5a5e8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56110bb5a558 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5a740 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56110bb5a6a8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5a898 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x56110bb5a800 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5a9f0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56110bb5a958 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5ac00 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56110bb5aaa8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56110bb5ab28 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5add8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56110bb5acc0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56110bb5ad40 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5aff8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56110bb5ae98 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56110bb5af18 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5b1d8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56110bb5b0b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56110bb5b138 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5b3b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56110bb5b298 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56110bb5b318 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5b540 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56110bb5b478 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56110bb5b710 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56110bb5b5f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56110bb5b670 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56110bb5fa38 <col:57, line:234:5>
|   `-ReturnStmt 0x56110bb5fa28 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56110bb5fa10 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56110bb5f9b8 <col:9, col:41> 'int'
|         |-MemberExpr 0x56110bb5f988 <col:9> '<bound member function type>' ->xmessage 0x56110bb5b540
|         | `-CXXThisExpr 0x56110bb5f978 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56110bb5f9f8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56110bb5f9e0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56110bb5f958 <col:18, col:40> 'String' (CXXTemporary 0x56110bb5f958)
|               `-CallExpr 0x56110bb5f920 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56110bb5f908 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56110bb5f880 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56110bb5d708 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56110bb5f8a0 <col:31> 'const String' lvalue ParmVar 0x56110bb5b670 'str' 'const String &'
|                 `-DeclRefExpr 0x56110bb5f8c0 <col:36> 'const String' lvalue ParmVar 0x56110bb5b5f8 'anno' 'const String &'
|-CXXMethodDecl 0x56110bb5b9f0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56110bb5b7d0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56110bb5b850 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56110bb5b8c8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56110bb5fcc8 <col:68, line:243:5>
|   `-ReturnStmt 0x56110bb5fcb8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56110bb5fca0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56110bb5fc40 <col:9, col:41> 'int'
|         |-MemberExpr 0x56110bb5fc10 <col:9> '<bound member function type>' ->xmessage 0x56110bb5b710
|         | `-CXXThisExpr 0x56110bb5fc00 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56110bb5fad8 <col:18> 'const String' lvalue ParmVar 0x56110bb5b7d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56110bb5fc88 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56110bb5fc70 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56110bb5fbe0 <col:24, col:40> 'String' (CXXTemporary 0x56110bb5fbe0)
|               `-CXXMemberCallExpr 0x56110bb5fb78 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56110bb5fb08 <col:24> '<bound member function type>' ->vformat 0x56110bb5cbd0
|                 | `-CXXThisExpr 0x56110bb5faf8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56110bb5fba8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56110bb5fb38 <col:32> 'const char *' lvalue ParmVar 0x56110bb5b850 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56110bb5fbc0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56110bb5fb58 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56110bb5b8c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56110bb5bc90 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56110bb5bab8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56110bb5bb30 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56110bb5bba8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56110bb60008 <col:23, line:254:5>
|   `-ReturnStmt 0x56110bb5fff8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56110bb5ffe0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56110bb5ff80 <col:9, col:71> 'int'
|         |-MemberExpr 0x56110bb5ff50 <col:9> '<bound member function type>' ->xmessage 0x56110bb5b710
|         | `-CXXThisExpr 0x56110bb5ff40 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56110bb5ffc8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56110bb5ffb0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56110bb5ff00 <col:18, col:65> 'String' (CXXTemporary 0x56110bb5ff00)
|         |     `-CallExpr 0x56110bb5fe98 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56110bb5fe80 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56110bb5fd68 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56110bb5d708 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56110bb5fd88 <col:31> 'const String' lvalue ParmVar 0x56110bb5bb30 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56110bb5fee0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56110bb5fec8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56110bb5fe60 <col:37, col:64> 'String' (CXXTemporary 0x56110bb5fe60)
|         |             `-CallExpr 0x56110bb5fe30 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56110bb5fe18 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56110bb5fda8 <col:37> 'String (const String &)' lvalue CXXMethod 0x56110bb5dd58 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56110bb5fdc8 <col:56> 'const String' lvalue ParmVar 0x56110bb5bab8 'landmark' 'const String &'
|         `-DeclRefExpr 0x56110bb5ff20 <col:68> 'const String' lvalue ParmVar 0x56110bb5bba8 'str' 'const String &'
|-CXXMethodDecl 0x56110bb5c010 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56110bb5bd58 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56110bb5bdd0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56110bb5be50 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56110bb5bec8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56110bb602c0 <col:34, line:267:5>
|   `-ReturnStmt 0x56110bb602b0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56110bb60298 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56110bb60230 <col:9, col:51> 'int'
|         |-MemberExpr 0x56110bb60200 <col:9> '<bound member function type>' ->xmessage 0x56110bb5bc90
|         | `-CXXThisExpr 0x56110bb601f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56110bb600a8 <col:18> 'const String' lvalue ParmVar 0x56110bb5bd58 'landmark' 'const String &'
|         |-DeclRefExpr 0x56110bb600c8 <col:28> 'const String' lvalue ParmVar 0x56110bb5bdd0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56110bb60280 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56110bb60268 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56110bb601d0 <col:34, col:50> 'String' (CXXTemporary 0x56110bb601d0)
|               `-CXXMemberCallExpr 0x56110bb60168 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56110bb600f8 <col:34> '<bound member function type>' ->vformat 0x56110bb5cbd0
|                 | `-CXXThisExpr 0x56110bb600e8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56110bb60198 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56110bb60128 <col:42> 'const char *' lvalue ParmVar 0x56110bb5be50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56110bb601b0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56110bb60148 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56110bb5bec8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56110bb5c120 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56110bb60340 <col:25, line:288:5>
|   `-ReturnStmt 0x56110bb60330 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56110bb60318 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56110bb602e8 <col:9> 'const int' lvalue ->_nerrors 0x56110bb5ef18
|         `-CXXThisExpr 0x56110bb602d8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56110bb5c330 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56110bb5c1d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56110bb5c258 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5c618 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56110bb5c3f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56110bb5c478 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56110bb5c4f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56110bb5c7b0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56110bb5c6e8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5c9f8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56110bb5c870 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56110bb5c8e8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56110bb605a0 <col:58, line:357:5>
|   `-ReturnStmt 0x56110bb60590 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56110bb60578 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56110bb60548 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56110bb60530 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56110bb60510 <col:9, col:29> 'String' (CXXTemporary 0x56110bb60510)
|             `-CallExpr 0x56110bb604a0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56110bb60488 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56110bb60408 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56110bb5c618 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56110bb603a8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56110bb604d8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56110bb603c8 <col:21> 'const char *' lvalue ParmVar 0x56110bb5c870 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56110bb604f0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56110bb603e8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56110bb5c8e8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56110bb5cbd0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56110bb5cac0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56110bb5cb38 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56110bb5cd28 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56110bb5cc98 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56110bb5ce70 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56110bb5cde0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56110bb5d110 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56110bb5cf28 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56110bb5cfa8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56110bb5d020 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56110bb5d270 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56110bb5d1e0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56110bb606b8 <col:37, line:441:5>
|   `-IfStmt 0x56110bb606a0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56110bb60628 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56110bb605f8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56110bb605b8 <col:6> 'int' lvalue ParmVar 0x56110bb5d1e0 'level' 'int'
|     | `-ImplicitCastExpr 0x56110bb60610 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56110bb605d8 <col:15> 'ErrorHandler::Level' EnumConstant 0x56110bb592f0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56110bb60688 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56110bb60658 <col:8> 'int' lvalue ->_nerrors 0x56110bb5ef18
|         `-CXXThisExpr 0x56110bb60648 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56110bb5d338 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56110bb60750 <col:26, line:448:5>
|   `-BinaryOperator 0x56110bb60730 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56110bb606e0 <col:2> 'int' lvalue ->_nerrors 0x56110bb5ef18
|     | `-CXXThisExpr 0x56110bb606d0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56110bb60710 <col:13> 'int' 0
|-CXXMethodDecl 0x56110bb5d500 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56110bb5d3f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56110bb5d468 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56110bb5d708 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56110bb5d5c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56110bb5d638 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56110bb5d9b8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56110bb5d7c8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56110bb5d848 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56110bb5d8c8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56110bb5da70 <col:59> 0 0
|-CXXMethodDecl 0x56110bb5dc08 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56110bb5dae8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56110bb5db68 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56110bb60dc0 <col:70, line:534:5>
|   |-DeclStmt 0x56110bb608c0 <line:528:2, col:20>
|   | |-VarDecl 0x56110bb60778 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56110bb607e0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56110bb60818 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56110bb60880 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56110bb60990 <line:529:2, col:23>
|   | `-VarDecl 0x56110bb608f0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56110bb60978 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56110bb60958 <col:18> 'const char *' lvalue ParmVar 0x56110bb5dae8 'begin' 'const char *'
|   |-DoStmt 0x56110bb60d58 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56110bb60c88 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56110bb60c70 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56110bb60c50 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56110bb609a8 <col:6> 'const char *' lvalue Var 0x56110bb608f0 'x' 'const char *'
|   | |     `-CallExpr 0x56110bb60ba0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56110bb60b88 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56110bb60b40 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56110bb5f3f0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56110bb60c08 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56110bb60bf0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56110bb60a60 <col:20, col:27> 'String' (CXXTemporary 0x56110bb60a60)
|   | |       |     `-CXXTemporaryObjectExpr 0x56110bb60a28 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56110bb60c20 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56110bb60a80 <col:30> 'const char *' lvalue Var 0x56110bb608f0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56110bb60c38 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56110bb60aa0 <col:33> 'const char *' lvalue ParmVar 0x56110bb5db68 'end' 'const char *'
|   | |       |-UnaryOperator 0x56110bb60ae0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56110bb60ac0 <col:39> 'String' lvalue Var 0x56110bb60778 'name' 'String'
|   | |       |-UnaryOperator 0x56110bb60b18 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56110bb60af8 <col:46> 'String' lvalue Var 0x56110bb60818 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56110bb60b30 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56110bb60d40 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56110bb60d28 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56110bb60d08 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56110bb60cd8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|   |         `-ImplicitCastExpr 0x56110bb60cc0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56110bb60ca0 <col:11> 'String' lvalue Var 0x56110bb60778 'name' 'String'
|   `-ReturnStmt 0x56110bb60db0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56110bb60d98 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56110bb60d78 <col:9> 'const char *' lvalue Var 0x56110bb608f0 'x' 'const char *'
|-CXXMethodDecl 0x56110bb5dd58 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56110bb5dcc8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56110bb613c8 <col:55, line:550:5>
|   `-IfStmt 0x56110bb613a0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56110bb61000 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56110bb60fe8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56110bb60fd0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56110bb60fb0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56110bb60f80 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|     | |       `-DeclRefExpr 0x56110bb60e20 <col:6> 'const String' lvalue ParmVar 0x56110bb5dcc8 'x' 'const String &'
|     | `-BinaryOperator 0x56110bb60f60 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56110bb60f30 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56110bb60ee0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56110bb60ec8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56110bb60e80 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56110b8700a0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56110bb60e40 <col:11> 'const String' lvalue ParmVar 0x56110bb5dcc8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56110bb60e60 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56110bb60f48 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56110bb60f18 <col:19> 'char' 123
|     |-ReturnStmt 0x56110bb61070 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56110bb61040 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56110bb61020 <col:13> 'const String' lvalue ParmVar 0x56110bb5dcc8 'x' 'const String &'
|     `-IfStmt 0x56110bb61378 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56110bb61108 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56110bb610f0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56110bb610d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56110bb610a0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|       |       `-DeclRefExpr 0x56110bb61080 <col:11> 'const String' lvalue ParmVar 0x56110bb5dcc8 'x' 'const String &'
|       |-ReturnStmt 0x56110bb61290 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56110bb61278 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56110bb61248 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56110bb61230 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56110bb61210 <col:13, col:29> 'String' (CXXTemporary 0x56110bb61210)
|       |         `-CallExpr 0x56110bb611c0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56110bb611a8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56110bb61120 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56110bb5d500 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56110bb611f0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56110bb61140 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56110bb61160 <col:28> 'const String' lvalue ParmVar 0x56110bb5dcc8 'x' 'const String &'
|       `-ReturnStmt 0x56110bb61368 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56110bb61350 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56110bb61320 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56110bb61308 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56110bb612e8 <col:13, col:20> 'String' (CXXTemporary 0x56110bb612e8)
|                 `-CXXTemporaryObjectExpr 0x56110bb612b0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56110bb5df20 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56110bb5de10 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56110bb5de88 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56110bb5f698 <col:71> 'bool' false
|-CXXRecordDecl 0x56110bb5dfd0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56110bb5e2c8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56110bb5e260 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56110bb5e200 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56110bb5e1c0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56110b853100 'String'
|       | `-CXXRecord 0x56110b853070 'String'
|       |-BuiltinType 0x56110b527580 'int'
|       `-DecayedType 0x56110ba0a320 '__va_list_tag *' sugar
|         |-TypedefType 0x56110ba0a2f0 'va_list' sugar
|         | |-Typedef 0x56110b744fa0 'va_list'
|         | `-TypedefType 0x56110b744f50 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56110b67cb78 '__gnuc_va_list'
|         |   `-TypedefType 0x56110b67cae0 '__builtin_va_list' sugar
|         |     |-Typedef 0x56110b568d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56110b568ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56110b5282d0 '__va_list_tag'
|         |         `-CXXRecord 0x56110b528238 '__va_list_tag'
|         `-PointerType 0x56110b74a840 '__va_list_tag *'
|           `-RecordType 0x56110b5282d0 '__va_list_tag'
|             `-CXXRecord 0x56110b528238 '__va_list_tag'
|-EnumDecl 0x56110bb5e320 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56110bb5e420 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56110bb5e9c0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb5e400 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56110bb5e3e0 <col:16> 'int' 1
| |-EnumConstantDecl 0x56110bb5e4b0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56110bb5e9d8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb5e490 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56110bb5e470 <col:21> 'int' 2
| |-EnumConstantDecl 0x56110bb5e540 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56110bb5e9f0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb5e520 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56110bb5e500 <col:22> 'int' 4
| |-EnumConstantDecl 0x56110bb5e5d0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56110bb5ea08 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb5e5b0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56110bb5e590 <col:17> 'int' 8
| |-EnumConstantDecl 0x56110bb5e660 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56110bb5ea20 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb5e640 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56110bb5e620 <col:22> 'int' 16
| |-EnumConstantDecl 0x56110bb5e6f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56110bb5ea38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb5e6d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56110bb5e6b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56110bb5e7c0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56110bb5ea50 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb5e760 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56110bb5e740 <col:17> 'int' 64
| |-EnumConstantDecl 0x56110bb5e850 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56110bb5ea68 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb5e830 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56110bb5e810 <col:14> 'int' 128
| |-EnumConstantDecl 0x56110bb5e8e0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56110bb5ea80 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb5e8c0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56110bb5e8a0 <col:16> 'int' 256
| `-EnumConstantDecl 0x56110bb5e970 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56110bb5ea98 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110bb5e950 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56110bb5e930 <col:12> 'int' 1024
|-CXXMethodDecl 0x56110bb5eca8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56110bb5eac0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56110bb5eb60 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56110bb5ee30 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56110bb5ed68 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56110bb5eed8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56110bb5ef18 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56110bb5ef78 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56110bb5eff0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56110bb5f3f0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56110bb5f068 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56110bb5f0e8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56110bb5f168 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56110bb5f1e0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56110bb5f258 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56110bb5f2d0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56110bb5f518 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56110bb5f518
| `-ParmVarDecl 0x56110bb5f628 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56110bb61728 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56110bb61728
  `-ParmVarDecl 0x56110bb61838 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110ba09368 prev 0x56110ba4e358 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110ba09460 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56110ba094f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56110ba09628 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56110ba09528 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56110ba0aa50 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56110ba0aa30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56110ba0a5c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56110ba0aae0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56110ba0aaa0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56110ba09528 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56110ba0a630 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56110ba0ab60 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56110ba0ab20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56110ba0a690 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56110ba0aba0 <col:54> 'bool' false
| `-CompoundStmt 0x56110ba0aca8 <col:61, line:38:5>
|   `-BinaryOperator 0x56110ba0ac88 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56110ba0ac20 <col:9> 'const Element *' lvalue ->_context 0x56110ba0a568
|     | `-CXXThisExpr 0x56110ba0ac10 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56110ba0ac70 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56110ba0ac50 <col:20> 'int' 0
|-CXXConstructorDecl 0x56110ba09838 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56110ba096e8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56110ba09760 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56110ba0aa88 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56110ba0aa68 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56110ba0a568 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56110ba0ad00 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56110ba0acc0 <col:20> 'const Element *' lvalue ParmVar 0x56110ba096e8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56110ba0a5c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56110ba0ad80 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56110ba0ad40 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56110ba09760 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56110ba0a630 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56110ba0ae00 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56110ba0adc0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56110ba0a690 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56110ba0ae40 <col:73> 'bool' false
| `-CompoundStmt 0x56110ba0aeb8 <col:80, line:46:5>
|-CXXMethodDecl 0x56110ba09968 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56110ba0af30 <col:36, line:51:5>
|   `-ReturnStmt 0x56110ba0af20 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56110ba0af08 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56110ba0aed8 <col:16> 'const Element *const' lvalue ->_context 0x56110ba0a568
|         `-CXXThisExpr 0x56110ba0aec8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56110ba09a58 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56110ba0afb0 <col:32, line:57:5>
|   `-ReturnStmt 0x56110ba0afa0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56110ba0af88 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56110ba0af58 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56110ba0a5c8
|         `-CXXThisExpr 0x56110ba0af48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56110ba09b18 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56110ba09ca0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56110ba09bd0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56110ba09df0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56110ba09d60 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56110ba09f40 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56110ba09eb0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56110ba0a148 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56110ba09ff8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56110ba0a070 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56110ba0a478 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56110ba0a208 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56110ba0a288 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56110ba0a350 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56110ba0a530 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56110ba0a568 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56110ba0a5c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56110ba0a630 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56110ba0a690 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56110ba0a6e0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56110ba0a6e0
| `-ParmVarDecl 0x56110ba0a7f8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56110ba0a898 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56110ba0a898
| `-ParmVarDecl 0x56110ba0a9a8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x56110bb6c458 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56110bb164e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56110bb166b8 prev 0x56110bb164e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56110bb16748 <col:46, col:52> col:46 public
|-TypedefDecl 0x56110bb16770 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb18340 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56110bb182f0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56110bb16c20 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56110bb16b20 'type'
|     `-TemplateSpecializationType 0x56110bb16ab0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56110bb16990 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56110bb16970 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56110bb16950 <col:24> 'unsigned long' 4
|       `-RecordType 0x56110bb16a90 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56110bb169b0 'char_array'
|-TypedefDecl 0x56110bb183f8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56110bb183c0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56110bb183a0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56110bb18340 'type'
|     `-ElaboratedType 0x56110bb182f0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56110bb16c20 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56110bb16b20 'type'
|         `-TemplateSpecializationType 0x56110bb16ab0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56110bb16990 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56110bb16970 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56110bb16950 <col:24> 'unsigned long' 4
|           `-RecordType 0x56110bb16a90 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56110bb169b0 'char_array'
|-CXXMethodDecl 0x56110bb18578 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56110bb18488 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56110bb18668 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56110bb18748 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56110bb18a18 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56110bb18920 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56110bb18c58 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56110bb18ad0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56110bb18b48 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56110bb18e28 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56110bb18d18 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56110bb18d90 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56110bb18f88 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56110bb19058 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56110bb192a8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56110bb19118 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56110bb19190 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56110bb19508 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56110bb19378 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56110bb193f0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56110bb196c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56110bb195d8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56110bb19888 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56110bb19790 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56110bb19940 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56110bb199f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56110bb19c28 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56110bb19aa0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56110bb19b18 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56110bb212b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56110bb211c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56110bb21380 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56110bb213d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56110bb21420 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56110bb14ee8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56110bb150f8 prev 0x56110bb14ee8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56110bb16450 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56110bb16400 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56110bb163e0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56110bb16290 'type'
|     `-SubstTemplateTypeParmType 0x56110bb160b0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56110b7ecd30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b7eccd8 'T'
|       `-RecordType 0x56110bb15c00 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56110bb15b18 'sized_array_memory'
|-FieldDecl 0x56110bb21470 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56110bb214c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56110bb214f8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56110bb15190 'int' sugar
|   |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56110b824be8 'T'
|   `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb21588 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56110bb21550 'int &'
|   `-SubstTemplateTypeParmType 0x56110bb15190 'int' sugar
|     |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56110b824be8 'T'
|     `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb21648 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56110bb21610 'const int &'
|   `-QualType 0x56110bb15191 'const int' const
|     `-SubstTemplateTypeParmType 0x56110bb15190 'int' sugar
|       |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b824be8 'T'
|       `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb216d8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56110bb216a0 'int *'
|   `-SubstTemplateTypeParmType 0x56110bb15190 'int' sugar
|     |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56110b824be8 'T'
|     `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb21768 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56110bb21730 'const int *'
|   `-QualType 0x56110bb15191 'const int' const
|     `-SubstTemplateTypeParmType 0x56110bb15190 'int' sugar
|       |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b824be8 'T'
|       `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb22350 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56110bb22300 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56110bb222e0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56110bb22270 'type'
|     `-SubstTemplateTypeParmType 0x56110bb22030 'int' sugar
|       |-TemplateTypeParmType 0x56110b7f7b30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b7f7ae0 'T'
|       `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb223b8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56110bb21610 'const int &'
|   `-QualType 0x56110bb15191 'const int' const
|     `-SubstTemplateTypeParmType 0x56110bb15190 'int' sugar
|       |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b824be8 'T'
|       `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb22410 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb22478 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56110bb216a0 'int *'
|   `-SubstTemplateTypeParmType 0x56110bb15190 'int' sugar
|     |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56110b824be8 'T'
|     `-BuiltinType 0x56110b527580 'int'
|-TypedefDecl 0x56110bb224e0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56110bb21730 'const int *'
|   `-QualType 0x56110bb15191 'const int' const
|     `-SubstTemplateTypeParmType 0x56110bb15190 'int' sugar
|       |-TemplateTypeParmType 0x56110b824c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56110b824be8 'T'
|       `-BuiltinType 0x56110b527580 'int'
|-EnumDecl 0x56110bb22538 <line:134:5> col:5
| `-EnumConstantDecl 0x56110bb22630 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56110bb22610 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56110b8262c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56110b8262a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56110b826280 <col:40> 'int' 1
|-CXXConstructorDecl 0x56110bb226b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56110bb22908 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56110bb22770 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56110bb22810 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56110bb22bc8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56110bb22ab0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56110bb22e88 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56110bb22d70 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56110bb231d0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56110bb230b0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56110bb234e0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56110bb233c0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56110bb237d0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56110bb23618 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56110bb23690 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56110bb238f8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56110bb239d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110bb23a30 <col:30> Inherited
|-CXXMethodDecl 0x56110bb23a78 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56110bb23b28 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110bb23b80 <col:30> Inherited
|-CXXMethodDecl 0x56110bb23c48 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56110bb23cf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110bb23d50 <col:30> Inherited
|-CXXMethodDecl 0x56110bb23d98 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56110bb23e48 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110bb23ea0 <col:30> Inherited
|-CXXMethodDecl 0x56110bb23ee8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56110bb23f98 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110bb23ff0 <col:30> Inherited
|-CXXMethodDecl 0x56110bb24038 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56110bb240e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56110bb24140 <col:30> Inherited
|-CXXMethodDecl 0x56110bb24168 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56110bb24218 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56110bb242c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56110bb24488 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56110bb24378 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56110bb243f0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56110bb245d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56110bb24548 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110bb24788 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56110bb24690 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56110bb24840 <col:20>
| `-OptimizeNoneAttr 0x56110bb24898 <col:30>
|-CXXMethodDecl 0x56110bb249b8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56110bb248c0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56110bb24a70 <col:20>
| `-OptimizeNoneAttr 0x56110bb24ac8 <col:30>
|-CXXMethodDecl 0x56110bb24b80 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56110bb24af0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110bb24cc8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56110bb24c38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110bb24df8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56110bb24f28 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56110bb24ff8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56110bb250c8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56110bb25208 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56110bb25178 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110bb25350 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56110bb252c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56110bb25498 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56110bb25408 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56110bb25550 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56110bb25650 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56110bb255c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56110bb25708 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56110bb257c8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56110bb258c8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56110bb25a48 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56110bb25988 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56110bb26208 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56110bb25b00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56110bb26168 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56110bb26068 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56110bb262e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56110bb26438 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56110bb263a8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56110bb264f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56110bb26738 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56110bb265b0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56110bb26628 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56110bb268f8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56110bb26808 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56110bb26b48 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56110bb269c0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56110bb26a38 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56110bb26c08 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56110bb26e68 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56110bb26d70 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56110bb26f38 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110bb13058 prev 0x56110baf9858 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56110bb13150 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56110bb13240 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56110bb38d50 <col:16, line:828:9>
|-CXXDestructorDecl 0x56110bb13330 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56110bb38d60 <col:25, line:830:9>
|-CXXMethodDecl 0x56110bb13430 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56110bb134e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56110bb13588 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56110bb13588
| `-ParmVarDecl 0x56110bb13698 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56110bb13e58 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56110bb13e58
  `-ParmVarDecl 0x56110bb13f68 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110ba0fcd8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56110baf97c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56110baf9858 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56110baf9910 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56110baf9a18 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56110baf9948 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56110bb284f8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56110bb284d8 <col:31> 'int' 0
|-CXXConstructorDecl 0x56110baf9d38 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56110baf9bb0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56110baf9c28 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56110bb28530 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56110bb28510 <col:59> 'int' 0
|-CXXConstructorDecl 0x56110baf9f10 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56110baf9e00 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56110baf9e78 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56110bb28568 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56110bb28548 <col:55> 'int' 0
|-CXXConstructorDecl 0x56110bafa2c8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56110bafa0b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56110bafa128 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56110bafa1a0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56110bb285a0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56110bb28580 <col:31> 'int' 0
|-CXXConstructorDecl 0x56110bafa488 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56110bafa3c8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56110bafa580 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56110bafa768 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56110bafa670 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56110bafa858 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56110bb28950 <col:24, line:291:5>
|   `-ReturnStmt 0x56110bb28940 <line:290:9, col:79>
|     `-BinaryOperator 0x56110bb28920 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56110bb287f8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56110bb28750 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56110bb28730 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56110bb28628 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56110bb28610 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56110bb285f8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56110bb285c8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56110bb14e80
|       | |   |       `-CXXThisExpr 0x56110bb285b8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56110bb28718 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56110bb28700 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56110bb286c8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56110bb28698 <col:28, col:35> '<bound member function type>' ->size 0x56110badb338
|       | |           `-ImplicitCastExpr 0x56110bb286e8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56110bb28680 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56110bb28650 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56110bb14e80
|       | |                 `-CXXThisExpr 0x56110bb28640 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56110bb287e0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56110bb287c8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56110bb287b0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56110bb28780 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56110bb27080
|       |         `-CXXThisExpr 0x56110bb28770 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56110bb28900 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56110bb288e8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56110bb288d0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56110bb28890 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56110bb28878 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56110bb28828 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56110bb27130
|         |     |   `-CXXThisExpr 0x56110bb28818 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56110bb28858 <col:73> 'int' 0
|         `-IntegerLiteral 0x56110bb288b0 <col:79> 'int' 0
|-CXXMethodDecl 0x56110bafa918 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56110bb28b28 <col:32, line:296:5>
|   `-ReturnStmt 0x56110bb28b18 <line:295:9, col:49>
|     `-BinaryOperator 0x56110bb28af8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56110bb289d8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56110bb289c0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56110bb289a8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56110bb28978 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56110bb27080
|       |       `-CXXThisExpr 0x56110bb28968 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56110bb28ad8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56110bb28ac0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56110bb28aa8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56110bb28a68 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56110bb28a50 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56110bb28a00 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56110bb27130
|         |     |   `-CXXThisExpr 0x56110bb289f0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56110bb28a30 <col:43> 'int' 0
|         `-IntegerLiteral 0x56110bb28a88 <col:49> 'int' 0
|-CXXMethodDecl 0x56110bafaa08 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56110bb28d38 <col:19, line:306:5>
|   |-IfStmt 0x56110bb28c58 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56110bb28b98 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56110bb28b80 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56110bb28b50 <col:13> 'Vector<String> *' lvalue ->_conf 0x56110bb14e80
|   | |     `-CXXThisExpr 0x56110bb28b40 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56110bb28c38 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56110bb28c08 <col:13, col:20> '<bound member function type>' ->clear 0x56110baddd38
|   |     `-ImplicitCastExpr 0x56110bb28bf0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56110bb28bc0 <col:13> 'Vector<String> *' lvalue ->_conf 0x56110bb14e80
|   |         `-CXXThisExpr 0x56110bb28bb0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56110bb28ce0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56110bb28cb0 <col:9, col:16> '<bound member function type>' .clear 0x56110bb26c08
|   |   `-MemberExpr 0x56110bb28c80 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56110bb27020
|   |     `-CXXThisExpr 0x56110bb28c70 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56110bb28d28 <line:305:9, col:17>
|     `-UnaryOperator 0x56110bb28d10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56110bb28d00 <col:17> 'Args *' this
|-CXXMethodDecl 0x56110bafac88 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56110bafab90 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x56110bafae08 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x56110bafad40 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x56110bafb188 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x56110bafaeb0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x56110bafb0e8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x56110bafaf58 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x56110bafafd0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56110bb29058 <col:67, line:327:5>
|     |-WhileStmt 0x56110bb29008 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56110bb28e20 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56110bb28da0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56110ba46828 0x56110b88fe08 0x56110b88fae0 0x56110b8802b0 0x56110b87ff60 0x56110b87f850 0x56110b8521c0 0x56110b7df470
|     | | |-DeclRefExpr 0x56110bb28d60 <col:16> 'Iter' lvalue ParmVar 0x56110bafaf58 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56110bb28d80 <col:25> 'Iter' lvalue ParmVar 0x56110bafafd0 'end' 'Iter'
|     | `-CompoundStmt 0x56110bb28fe8 <col:30, line:325:9>
|     |   |-CallExpr 0x56110bb28f88 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56110bb28e68 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56110bb28f58 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56110bb28ee8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|     |   |   `-DeclRefExpr 0x56110bb28ec8 <col:24> 'Iter' lvalue ParmVar 0x56110bafaf58 'begin' 'Iter'
|     |   `-UnaryOperator 0x56110bb28fd0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56110bb28fb0 <col:15> 'Iter' lvalue ParmVar 0x56110bafaf58 'begin' 'Iter'
|     `-ReturnStmt 0x56110bb29048 <line:326:9, col:17>
|       `-UnaryOperator 0x56110bb29030 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb29020 <col:17> 'Args *' this
|-CXXMethodDecl 0x56110bafb290 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x56110bafb200 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x56110bafb3d8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x56110bafb348 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x56110bafb4a0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56110bb2aaa0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56110bb2aa40 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56110bb29088 <col:9> '<bound member function type>' ->reset_from 0x56110bb274a8
|   | | `-CXXThisExpr 0x56110bb29078 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56110bb2aa20 <col:20> 'int' 0
|   `-ReturnStmt 0x56110bb2aa90 <line:352:9, col:17>
|     `-UnaryOperator 0x56110bb2aa78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56110bb2aa68 <col:17> 'Args *' this
|-VarDecl 0x56110bafb558 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x56110bafb5c0 <col:38> 'int' 1
|-VarDecl 0x56110bafb650 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x56110bafb6b8 <col:39> 'int' 2
|-VarDecl 0x56110bafb748 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x56110bafb7b0 <col:39> 'int' 4
|-VarDecl 0x56110bafb840 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x56110bafb8a8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x56110bafbc28 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x56110bafb920 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56110bafbb88 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56110bafb9d0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56110bafba78 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x56110bb2abf8 <col:43, line:371:5>
| |   `-ReturnStmt 0x56110bb2abe8 <line:370:9, col:34>
| |     `-CallExpr 0x56110bb2abb0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56110bb2aad0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56110bb2ab50 <col:21> 'const char *' lvalue ParmVar 0x56110bafb9d0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x56110bb2ab70 <col:30> 'int' 0
| |       `-DeclRefExpr 0x56110bb2ab90 <col:33> 'T' lvalue ParmVar 0x56110bafba78 'x' 'T &'
| `-CXXMethodDecl 0x56110bb6daa8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x56110bb6d8c8 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x56110bb6d998 <col:37, col:40> col:40 x 'String &'
|-FunctionTemplateDecl 0x56110bafbf58 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x56110bafbc90 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56110bafbeb8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56110bafbd40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafbde8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2ad48 <col:45, line:375:5>
|     `-ReturnStmt 0x56110bb2ad38 <line:374:9, col:42>
|       `-CallExpr 0x56110bb2ad00 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2ac20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2aca0 <col:21> 'const char *' lvalue ParmVar 0x56110bafbd40 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2acc0 <col:30> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int'
|         `-DeclRefExpr 0x56110bb2ace0 <col:41> 'T' lvalue ParmVar 0x56110bafbde8 'x' 'T &'
|-FunctionTemplateDecl 0x56110bafc288 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x56110bafbfc0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56110bafc1e8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56110bafc070 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56110bafc118 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x56110bb2ae98 <col:45, line:379:5>
| |   `-ReturnStmt 0x56110bb2ae88 <line:378:9, col:43>
| |     `-CallExpr 0x56110bb2ae50 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56110bb2ad70 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56110bb2adf0 <col:21> 'const char *' lvalue ParmVar 0x56110bafc070 'keyword' 'const char *'
| |       |-DeclRefExpr 0x56110bb2ae10 <col:30> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int'
| |       `-DeclRefExpr 0x56110bb2ae30 <col:42> 'T' lvalue ParmVar 0x56110bafc118 'x' 'T &'
| `-CXXMethodDecl 0x56110bb6c8e8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56110bb6c708 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x56110bb6c7d8 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x56110bafc5b8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56110bafc2f0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56110bafc518 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56110bafc3a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafc448 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2b098 <col:46, line:383:5>
|     `-ReturnStmt 0x56110bb2b088 <line:382:9, col:55>
|       `-CallExpr 0x56110bb2b050 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2aec0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2af40 <col:21> 'const char *' lvalue ParmVar 0x56110bafc3a0 'keyword' 'const char *'
|         |-BinaryOperator 0x56110bb2b010 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56110bb2afc0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56110bb2afa0 <col:30> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56110bb2aff8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56110bb2afd8 <col:42> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56110bb2b030 <col:54> 'T' lvalue ParmVar 0x56110bafc448 'x' 'T &'
|-FunctionTemplateDecl 0x56110bafc9b8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56110bafc620 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56110bafc918 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56110bafc6d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafc750 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56110bafc7f8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2b1d8 <col:54, line:388:5>
|     |-CallExpr 0x56110bb2b160 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56110bb2b0b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56110bb2b0f0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56110bb2b100 <col:30> 'const char *' lvalue ParmVar 0x56110bafc6d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56110bb2b120 <col:39> 'int' lvalue ParmVar 0x56110bafc750 'flags' 'int'
|     | `-DeclRefExpr 0x56110bb2b140 <col:46> 'T' lvalue ParmVar 0x56110bafc7f8 'x' 'T &'
|     `-ReturnStmt 0x56110bb2b1c8 <line:387:9, col:17>
|       `-UnaryOperator 0x56110bb2b1b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2b1a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110bafce68 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56110bafca28 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56110bafcaa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56110bafcdc8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56110bafcb68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafcc08 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56110bafcca8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56110bb2b348 <col:74, line:403:5>
|     `-ReturnStmt 0x56110bb2b338 <line:402:9, col:56>
|       `-CallExpr 0x56110bb2b2f8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2b208 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2b278 <col:28> 'const char *' lvalue ParmVar 0x56110bafcb68 'keyword' 'const char *'
|         |-IntegerLiteral 0x56110bb2b298 <col:37> 'int' 0
|         |-DeclRefExpr 0x56110bb2b2b8 <col:40> 'T' lvalue ParmVar 0x56110bafcc08 'x' 'T &'
|         `-DeclRefExpr 0x56110bb2b2d8 <col:43> 'const V' lvalue ParmVar 0x56110bafcca8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56110bafd2d8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56110bafced8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56110bafcf58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56110bafd238 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56110bafd018 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafd0b8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56110bafd158 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56110bb2b4b0 <col:76, line:407:5>
|     `-ReturnStmt 0x56110bb2b4a0 <line:406:9, col:65>
|       `-CallExpr 0x56110bb2b460 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2b370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2b3e0 <col:28> 'const char *' lvalue ParmVar 0x56110bafd018 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2b400 <col:37> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int'
|         |-DeclRefExpr 0x56110bb2b420 <col:49> 'T' lvalue ParmVar 0x56110bafd0b8 'x' 'T &'
|         `-DeclRefExpr 0x56110bb2b440 <col:52> 'const V' lvalue ParmVar 0x56110bafd158 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56110bafd828 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56110bafd348 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56110bafd3c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56110bafd788 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56110bafd488 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafd508 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56110bafd5a8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56110bafd648 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56110bb2b618 <col:85, line:412:5>
|     |-CallExpr 0x56110bb2b598 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56110bb2b4c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56110bb2b508 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56110bb2b518 <col:37> 'const char *' lvalue ParmVar 0x56110bafd488 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56110bb2b538 <col:46> 'int' lvalue ParmVar 0x56110bafd508 'flags' 'int'
|     | |-DeclRefExpr 0x56110bb2b558 <col:53> 'T' lvalue ParmVar 0x56110bafd5a8 'x' 'T &'
|     | `-DeclRefExpr 0x56110bb2b578 <col:56> 'const V' lvalue ParmVar 0x56110bafd648 'default_value' 'const V &'
|     `-ReturnStmt 0x56110bb2b608 <line:411:9, col:17>
|       `-UnaryOperator 0x56110bb2b5f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2b5e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110bafdcb8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56110bafd8a0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bafd918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bafdc18 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56110bafd9d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafda50 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56110bafdaf8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2b798 <col:53, line:425:5>
|     `-ReturnStmt 0x56110bb2b788 <line:424:9, col:42>
|       `-CallExpr 0x56110bb2b748 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2b648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2b6c8 <col:21> 'const char *' lvalue ParmVar 0x56110bafd9d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56110bb2b6e8 <col:30> 'int' 0
|         |-DeclRefExpr 0x56110bb2b708 <col:33> 'P' lvalue ParmVar 0x56110bafda50 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2b728 <col:41> 'T' lvalue ParmVar 0x56110bafdaf8 'x' 'T &'
|-FunctionTemplateDecl 0x56110bafe108 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56110bafdd28 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bafdda8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bafe068 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56110bafde68 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafdee0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56110bafdf88 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2b910 <col:55, line:429:5>
|     `-ReturnStmt 0x56110bb2b900 <line:428:9, col:50>
|       `-CallExpr 0x56110bb2b8c0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2b7c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2b840 <col:21> 'const char *' lvalue ParmVar 0x56110bafde68 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2b860 <col:30> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int'
|         |-DeclRefExpr 0x56110bb2b880 <col:41> 'P' lvalue ParmVar 0x56110bafdee0 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2b8a0 <col:49> 'T' lvalue ParmVar 0x56110bafdf88 'x' 'T &'
|-FunctionTemplateDecl 0x56110bafe558 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56110bafe178 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bafe1f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x56110bafe4b8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x56110bafe2b8 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56110bafe330 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x56110bafe3d8 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x56110bb2ba88 <col:55, line:433:5>
| |   `-ReturnStmt 0x56110bb2ba78 <line:432:9, col:51>
| |     `-CallExpr 0x56110bb2ba38 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56110bb2b938 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56110bb2b9b8 <col:21> 'const char *' lvalue ParmVar 0x56110bafe2b8 'keyword' 'const char *'
| |       |-DeclRefExpr 0x56110bb2b9d8 <col:30> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int'
| |       |-DeclRefExpr 0x56110bb2b9f8 <col:42> 'P' lvalue ParmVar 0x56110bafe330 'parser' 'P'
| |       `-DeclRefExpr 0x56110bb2ba18 <col:50> 'T' lvalue ParmVar 0x56110bafe3d8 'x' 'T &'
| `-CXXMethodDecl 0x56110bb6d418 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56110bb6d180 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x56110bb6d228 <col:39, col:41> col:41 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x56110bb6d2f8 <col:49, col:52> col:52 x 'int &'
|-FunctionTemplateDecl 0x56110bafe9a8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56110bafe5c8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bafe648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bafe908 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56110bafe708 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafe780 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56110bafe828 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2bcb0 <col:56, line:437:5>
|     `-ReturnStmt 0x56110bb2bca0 <line:436:9, col:63>
|       `-CallExpr 0x56110bb2bc60 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2bab0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2bb30 <col:21> 'const char *' lvalue ParmVar 0x56110bafe708 'keyword' 'const char *'
|         |-BinaryOperator 0x56110bb2bc00 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56110bb2bbb0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56110bb2bb90 <col:30> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56110bb2bbe8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56110bb2bbc8 <col:42> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56110bb2bc20 <col:54> 'P' lvalue ParmVar 0x56110bafe780 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2bc40 <col:62> 'T' lvalue ParmVar 0x56110bafe828 'x' 'T &'
|-FunctionTemplateDecl 0x56110bafeed8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56110bafea18 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bafea98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bafee38 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56110bafeb58 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bafebd8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56110bafec50 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56110bafecf8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2be18 <col:64, line:442:5>
|     |-CallExpr 0x56110bb2bd98 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56110bb2bcc8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56110bb2bd08 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56110bb2bd18 <col:30> 'const char *' lvalue ParmVar 0x56110bafeb58 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56110bb2bd38 <col:39> 'int' lvalue ParmVar 0x56110bafebd8 'flags' 'int'
|     | |-DeclRefExpr 0x56110bb2bd58 <col:46> 'P' lvalue ParmVar 0x56110bafec50 'parser' 'P'
|     | `-DeclRefExpr 0x56110bb2bd78 <col:54> 'T' lvalue ParmVar 0x56110bafecf8 'x' 'T &'
|     `-ReturnStmt 0x56110bb2be08 <line:441:9, col:17>
|       `-UnaryOperator 0x56110bb2bdf0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2bde0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110baff4d8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56110bafef50 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bafefc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56110baff048 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56110baff438 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56110baff110 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110baff188 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56110baff228 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56110baff2f8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56110bb2bfb0 <col:84, line:458:5>
|     `-ReturnStmt 0x56110bb2bfa0 <line:457:9, col:64>
|       `-CallExpr 0x56110bb2bf58 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2be48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2beb8 <col:28> 'const char *' lvalue ParmVar 0x56110baff110 'keyword' 'const char *'
|         |-IntegerLiteral 0x56110bb2bed8 <col:37> 'int' 0
|         |-DeclRefExpr 0x56110bb2bef8 <col:40> 'P' lvalue ParmVar 0x56110baff188 'parser' 'P'
|         |-DeclRefExpr 0x56110bb2bf18 <col:48> 'T' lvalue ParmVar 0x56110baff228 'x' 'T &'
|         `-DeclRefExpr 0x56110bb2bf38 <col:51> 'const V' lvalue ParmVar 0x56110baff2f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56110baffa58 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56110baff550 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110baff5c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56110baff648 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56110baff9b8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56110baff710 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110baff788 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56110baff828 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56110baff8c8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56110bb2c140 <col:86, line:462:5>
|     `-ReturnStmt 0x56110bb2c130 <line:461:9, col:73>
|       `-CallExpr 0x56110bb2c0e8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2bfd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2c048 <col:28> 'const char *' lvalue ParmVar 0x56110baff710 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2c068 <col:37> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int'
|         |-DeclRefExpr 0x56110bb2c088 <col:49> 'P' lvalue ParmVar 0x56110baff788 'parser' 'P'
|         |-DeclRefExpr 0x56110bb2c0a8 <col:57> 'T' lvalue ParmVar 0x56110baff828 'x' 'T &'
|         `-DeclRefExpr 0x56110bb2c0c8 <col:60> 'const V' lvalue ParmVar 0x56110baff8c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56110bb000b8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56110baffad0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110baffb48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56110baffbc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56110bb00018 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56110baffc90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110baffd10 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56110baffd88 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56110baffe28 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56110baffec8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56110bb2c2d0 <col:95, line:467:5>
|     |-CallExpr 0x56110bb2c248 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56110bb2c158 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56110bb2c198 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56110bb2c1a8 <col:37> 'const char *' lvalue ParmVar 0x56110baffc90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56110bb2c1c8 <col:46> 'int' lvalue ParmVar 0x56110baffd10 'flags' 'int'
|     | |-DeclRefExpr 0x56110bb2c1e8 <col:53> 'P' lvalue ParmVar 0x56110baffd88 'parser' 'P'
|     | |-DeclRefExpr 0x56110bb2c208 <col:61> 'T' lvalue ParmVar 0x56110baffe28 'x' 'T &'
|     | `-DeclRefExpr 0x56110bb2c228 <col:64> 'const V' lvalue ParmVar 0x56110baffec8 'default_value' 'const V &'
|     `-ReturnStmt 0x56110bb2c2c0 <line:466:9, col:17>
|       `-UnaryOperator 0x56110bb2c2a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2c298 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110bb00698 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56110bb00138 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb001b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56110bb00238 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56110bb005f8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56110bb00300 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb00378 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb00418 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56110bb004b8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56110bb2c478 <col:63, line:481:5>
|     `-ReturnStmt 0x56110bb2c468 <line:480:9, col:47>
|       `-CallExpr 0x56110bb2c420 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2c300 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2c380 <col:21> 'const char *' lvalue ParmVar 0x56110bb00300 'keyword' 'const char *'
|         |-IntegerLiteral 0x56110bb2c3a0 <col:30> 'int' 0
|         |-DeclRefExpr 0x56110bb2c3c0 <col:33> 'P' lvalue ParmVar 0x56110bb00378 'parser' 'P'
|         |-DeclRefExpr 0x56110bb2c3e0 <col:41> 'T1' lvalue ParmVar 0x56110bb00418 'x1' 'T1 &'
|         `-DeclRefExpr 0x56110bb2c400 <col:45> 'T2' lvalue ParmVar 0x56110bb004b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56110bb00c18 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56110bb00710 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb00788 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56110bb00808 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56110bb00b78 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56110bb008d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb00948 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb009e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56110bb00a88 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56110bb2c618 <col:65, line:485:5>
|     `-ReturnStmt 0x56110bb2c608 <line:484:9, col:55>
|       `-CallExpr 0x56110bb2c5c0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2c4a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2c520 <col:21> 'const char *' lvalue ParmVar 0x56110bb008d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2c540 <col:30> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int'
|         |-DeclRefExpr 0x56110bb2c560 <col:41> 'P' lvalue ParmVar 0x56110bb00948 'parser' 'P'
|         |-DeclRefExpr 0x56110bb2c580 <col:49> 'T1' lvalue ParmVar 0x56110bb009e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56110bb2c5a0 <col:53> 'T2' lvalue ParmVar 0x56110bb00a88 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56110bb01198 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56110bb00c90 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb00d08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56110bb00d88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56110bb010f8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56110bb00e50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb00ec8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb00f68 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56110bb01008 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56110bb2c7b8 <col:65, line:489:5>
|     `-ReturnStmt 0x56110bb2c7a8 <line:488:9, col:56>
|       `-CallExpr 0x56110bb2c760 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2c640 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2c6c0 <col:21> 'const char *' lvalue ParmVar 0x56110bb00e50 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2c6e0 <col:30> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int'
|         |-DeclRefExpr 0x56110bb2c700 <col:42> 'P' lvalue ParmVar 0x56110bb00ec8 'parser' 'P'
|         |-DeclRefExpr 0x56110bb2c720 <col:50> 'T1' lvalue ParmVar 0x56110bb00f68 'x1' 'T1 &'
|         `-DeclRefExpr 0x56110bb2c740 <col:54> 'T2' lvalue ParmVar 0x56110bb01008 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56110bb01718 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56110bb01210 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb01288 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56110bb01308 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56110bb01678 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56110bb013d0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb01448 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb014e8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56110bb01588 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x56110bb2ca08 <col:66, line:493:5>
|     `-ReturnStmt 0x56110bb2c9f8 <line:492:9, col:68>
|       `-CallExpr 0x56110bb2c9b0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2c7e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2c860 <col:21> 'const char *' lvalue ParmVar 0x56110bb013d0 'keyword' 'const char *'
|         |-BinaryOperator 0x56110bb2c930 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56110bb2c8e0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56110bb2c8c0 <col:30> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56110bb2c918 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56110bb2c8f8 <col:42> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56110bb2c950 <col:54> 'P' lvalue ParmVar 0x56110bb01448 'parser' 'P'
|         |-DeclRefExpr 0x56110bb2c970 <col:62> 'T1' lvalue ParmVar 0x56110bb014e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56110bb2c990 <col:66> 'T2' lvalue ParmVar 0x56110bb01588 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56110bb02938 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56110bb02350 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb023c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56110bb02448 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56110bb02898 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56110bb02510 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb02590 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb02608 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb026a8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56110bb02748 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x56110bb2cb98 <col:74, line:498:5>
|     |-CallExpr 0x56110bb2cb10 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56110bb2ca20 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56110bb2ca60 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56110bb2ca70 <col:30> 'const char *' lvalue ParmVar 0x56110bb02510 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56110bb2ca90 <col:39> 'int' lvalue ParmVar 0x56110bb02590 'flags' 'int'
|     | |-DeclRefExpr 0x56110bb2cab0 <col:46> 'P' lvalue ParmVar 0x56110bb02608 'parser' 'P'
|     | |-DeclRefExpr 0x56110bb2cad0 <col:54> 'T1' lvalue ParmVar 0x56110bb026a8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x56110bb2caf0 <col:58> 'T2' lvalue ParmVar 0x56110bb02748 'x2' 'T2 &'
|     `-ReturnStmt 0x56110bb2cb88 <line:497:9, col:17>
|       `-UnaryOperator 0x56110bb2cb70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2cb60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110bb02c98 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56110bb029b8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56110bb02bf8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56110bb02a70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb02ae8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x56110bb2cce0 <col:52, line:509:5>
|     `-ReturnStmt 0x56110bb2ccd0 <line:508:9, col:44>
|       `-CallExpr 0x56110bb2cc98 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2cbc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2cc38 <col:26> 'const char *' lvalue ParmVar 0x56110bb02a70 'keyword' 'const char *'
|         |-IntegerLiteral 0x56110bb2cc58 <col:35> 'int' 0
|         `-DeclRefExpr 0x56110bb2cc78 <col:38> 'P' lvalue ParmVar 0x56110bb02ae8 'parser' 'P'
|-FunctionTemplateDecl 0x56110bb02f98 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56110bb02d00 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56110bb02ef8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56110bb02db0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb02e28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56110bb2ce20 <col:54, line:513:5>
|     `-ReturnStmt 0x56110bb2ce10 <line:512:9, col:52>
|       `-CallExpr 0x56110bb2cdd8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2cd08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2cd78 <col:26> 'const char *' lvalue ParmVar 0x56110bb02db0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2cd98 <col:35> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int'
|         `-DeclRefExpr 0x56110bb2cdb8 <col:46> 'P' lvalue ParmVar 0x56110bb02e28 'parser' 'P'
|-FunctionTemplateDecl 0x56110bb03298 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56110bb03000 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56110bb031f8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56110bb030b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb03128 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56110bb2cf60 <col:54, line:517:5>
|     `-ReturnStmt 0x56110bb2cf50 <line:516:9, col:53>
|       `-CallExpr 0x56110bb2cf18 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2ce48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2ceb8 <col:26> 'const char *' lvalue ParmVar 0x56110bb030b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2ced8 <col:35> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int'
|         `-DeclRefExpr 0x56110bb2cef8 <col:47> 'P' lvalue ParmVar 0x56110bb03128 'parser' 'P'
|-FunctionTemplateDecl 0x56110bb03598 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56110bb03300 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56110bb034f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56110bb033b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb03428 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x56110bb2d150 <col:55, line:521:5>
|     `-ReturnStmt 0x56110bb2d140 <line:520:9, col:65>
|       `-CallExpr 0x56110bb2d108 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2cf88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2cff8 <col:26> 'const char *' lvalue ParmVar 0x56110bb033b0 'keyword' 'const char *'
|         |-BinaryOperator 0x56110bb2d0c8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x56110bb2d078 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56110bb2d058 <col:35> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56110bb2d0b0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56110bb2d090 <col:47> 'const int' lvalue Var 0x56110bafb650 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56110bb2d0e8 <col:59> 'P' lvalue ParmVar 0x56110bb03428 'parser' 'P'
|-FunctionTemplateDecl 0x56110bb03968 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56110bb03600 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56110bb038c8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56110bb036b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb03730 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb037a8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x56110bb2d290 <col:63, line:526:5>
|     |-CallExpr 0x56110bb2d218 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56110bb2d168 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x56110bb2d1a8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x56110bb2d1b8 <col:35> 'const char *' lvalue ParmVar 0x56110bb036b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56110bb2d1d8 <col:44> 'int' lvalue ParmVar 0x56110bb03730 'flags' 'int'
|     | `-DeclRefExpr 0x56110bb2d1f8 <col:51> 'P' lvalue ParmVar 0x56110bb037a8 'parser' 'P'
|     `-ReturnStmt 0x56110bb2d280 <line:525:9, col:17>
|       `-UnaryOperator 0x56110bb2d268 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2d258 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110bb03db8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56110bb039d8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb03a58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb03d18 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56110bb03b18 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb03b90 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb03c38 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2d3e8 <col:58, line:541:5>
|     `-ReturnStmt 0x56110bb2d3d8 <line:540:9, col:39>
|       `-CallExpr 0x56110bb2d3a0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2d2c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2d340 <col:21> 'const char *' lvalue ParmVar 0x56110bb03b18 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2d360 <col:30> 'P' lvalue ParmVar 0x56110bb03b90 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2d380 <col:38> 'T' lvalue ParmVar 0x56110bb03c38 'x' 'T &'
|-FunctionTemplateDecl 0x56110bb04208 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56110bb03e28 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb03ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb04168 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56110bb03f68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb03fe0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb04088 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2d520 <col:60, line:545:5>
|     `-ReturnStmt 0x56110bb2d510 <line:544:9, col:41>
|       `-CallExpr 0x56110bb2d4d8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2d410 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2d478 <col:23> 'const char *' lvalue ParmVar 0x56110bb03f68 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2d498 <col:32> 'P' lvalue ParmVar 0x56110bb03fe0 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2d4b8 <col:40> 'T' lvalue ParmVar 0x56110bb04088 'x' 'T &'
|-FunctionTemplateDecl 0x56110bb04658 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56110bb04278 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb042f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb045b8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56110bb043b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb04430 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb044d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2d658 <col:60, line:549:5>
|     `-ReturnStmt 0x56110bb2d648 <line:548:9, col:41>
|       `-CallExpr 0x56110bb2d610 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2d548 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2d5b0 <col:23> 'const char *' lvalue ParmVar 0x56110bb043b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2d5d0 <col:32> 'P' lvalue ParmVar 0x56110bb04430 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2d5f0 <col:40> 'T' lvalue ParmVar 0x56110bb044d8 'x' 'T &'
|-FunctionTemplateDecl 0x56110bb04aa8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56110bb046c8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb04748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb04a08 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56110bb04808 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb04880 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb04928 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2d790 <col:61, line:553:5>
|     `-ReturnStmt 0x56110bb2d780 <line:552:9, col:42>
|       `-CallExpr 0x56110bb2d748 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2d680 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2d6e8 <col:24> 'const char *' lvalue ParmVar 0x56110bb04808 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2d708 <col:33> 'P' lvalue ParmVar 0x56110bb04880 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2d728 <col:41> 'T' lvalue ParmVar 0x56110bb04928 'x' 'T &'
|-FunctionTemplateDecl 0x56110bb04f88 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56110bb04b18 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb04b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb04ee8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56110bb04c58 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb04cd8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb04d50 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb04df8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2d908 <col:69, line:557:5>
|     `-ReturnStmt 0x56110bb2d8f8 <line:556:9, col:46>
|       `-CallExpr 0x56110bb2d8b8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2d7b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2d838 <col:21> 'const char *' lvalue ParmVar 0x56110bb04c58 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2d858 <col:30> 'int' lvalue ParmVar 0x56110bb04cd8 'flags' 'int'
|         |-DeclRefExpr 0x56110bb2d878 <col:37> 'P' lvalue ParmVar 0x56110bb04d50 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2d898 <col:45> 'T' lvalue ParmVar 0x56110bb04df8 'x' 'T &'
|-FunctionTemplateDecl 0x56110bb05298 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56110bb05000 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56110bb051f8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56110bb050b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb05128 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56110bb2da48 <col:56, line:571:5>
|     `-ReturnStmt 0x56110bb2da38 <line:570:9, col:48>
|       `-CallExpr 0x56110bb2da00 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2d930 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2d9a0 <col:30> 'const char *' lvalue ParmVar 0x56110bb050b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56110bb2d9c0 <col:39> 'int' 0
|         `-DeclRefExpr 0x56110bb2d9e0 <col:42> 'P' lvalue ParmVar 0x56110bb05128 'parser' 'P'
|-FunctionTemplateDecl 0x56110bb05628 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56110bb05300 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56110bb05588 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56110bb053b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb05430 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb054a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56110bb2dc18 <col:67, line:576:5>
|     |-CallExpr 0x56110bb2dba0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56110bb2da60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56110bb2daa0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56110bb2dab0 <col:39> 'const char *' lvalue ParmVar 0x56110bb053b0 'keyword' 'const char *'
|     | |-BinaryOperator 0x56110bb2db60 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56110bb2db10 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56110bb2dad0 <col:48> 'int' lvalue ParmVar 0x56110bb05430 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56110bb2db48 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56110bb2db28 <col:56> 'const int' lvalue Var 0x56110bafb840 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56110bb2db80 <col:68> 'P' lvalue ParmVar 0x56110bb054a8 'parser' 'P'
|     `-ReturnStmt 0x56110bb2dc08 <line:575:9, col:17>
|       `-UnaryOperator 0x56110bb2dbf0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2dbe0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110bb05a78 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56110bb05698 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb05718 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb059d8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56110bb057d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb05850 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb058f8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2dd88 <col:62, line:592:5>
|     `-ReturnStmt 0x56110bb2dd78 <line:591:9, col:51>
|       `-CallExpr 0x56110bb2dd38 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2dc48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2dcb8 <col:30> 'const char *' lvalue ParmVar 0x56110bb057d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56110bb2dcd8 <col:39> 'int' 0
|         |-DeclRefExpr 0x56110bb2dcf8 <col:42> 'P' lvalue ParmVar 0x56110bb05850 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2dd18 <col:50> 'T' lvalue ParmVar 0x56110bb058f8 'x' 'T &'
|-FunctionTemplateDecl 0x56110bb05f58 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56110bb05ae8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb05b68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb05eb8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56110bb05c28 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb05ca8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb05d20 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb05dc8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2df80 <col:73, line:597:5>
|     |-CallExpr 0x56110bb2df00 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56110bb2dda0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56110bb2dde0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56110bb2ddf0 <col:39> 'const char *' lvalue ParmVar 0x56110bb05c28 'keyword' 'const char *'
|     | |-BinaryOperator 0x56110bb2dea0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56110bb2de50 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56110bb2de10 <col:48> 'int' lvalue ParmVar 0x56110bb05ca8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56110bb2de88 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56110bb2de68 <col:56> 'const int' lvalue Var 0x56110bafb840 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56110bb2dec0 <col:68> 'P' lvalue ParmVar 0x56110bb05d20 'parser' 'P'
|     | `-DeclRefExpr 0x56110bb2dee0 <col:76> 'T' lvalue ParmVar 0x56110bb05dc8 'x' 'T &'
|     `-ReturnStmt 0x56110bb2df70 <line:596:9, col:17>
|       `-UnaryOperator 0x56110bb2df58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2df48 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110bb06508 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56110bb05fd0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb06048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb06468 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56110bb06108 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb06180 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb06340 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56110bb2e0f0 <col:65, line:614:5>
|     `-ReturnStmt 0x56110bb2e0e0 <line:613:9, col:46>
|       `-CallExpr 0x56110bb2e0a0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2dfb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2e020 <col:25> 'const char *' lvalue ParmVar 0x56110bb06108 'keyword' 'const char *'
|         |-IntegerLiteral 0x56110bb2e040 <col:34> 'int' 0
|         |-DeclRefExpr 0x56110bb2e060 <col:37> 'P' lvalue ParmVar 0x56110bb06180 'parser' 'P'
|         `-DeclRefExpr 0x56110bb2e080 <col:45> 'Vector<T>' lvalue ParmVar 0x56110bb06340 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56110bb06938 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56110bb06578 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56110bb06898 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56110bb06630 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb06780 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56110bb2e310 <col:55, line:618:5>
|     `-ReturnStmt 0x56110bb2e300 <line:617:9, col:55>
|       `-CallExpr 0x56110bb2e2c0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2e118 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2e188 <col:25> 'const char *' lvalue ParmVar 0x56110bb06630 'keyword' 'const char *'
|         |-IntegerLiteral 0x56110bb2e1a8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56110bb2e280 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56110bb2e2a0 <col:54> 'Vector<T>' lvalue ParmVar 0x56110bb06780 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56110bb06f08 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56110bb069a0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb06a18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb06e68 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56110bb06ad8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb06b58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb06bd0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb06d20 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56110bb2e508 <col:76, line:623:5>
|     |-CallExpr 0x56110bb2e488 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56110bb2e328 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56110bb2e368 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56110bb2e378 <col:34> 'const char *' lvalue ParmVar 0x56110bb06ad8 'keyword' 'const char *'
|     | |-BinaryOperator 0x56110bb2e428 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56110bb2e3d8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56110bb2e398 <col:43> 'int' lvalue ParmVar 0x56110bb06b58 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56110bb2e410 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56110bb2e3f0 <col:51> 'const int' lvalue Var 0x56110bafb840 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56110bb2e448 <col:63> 'P' lvalue ParmVar 0x56110bb06bd0 'parser' 'P'
|     | `-DeclRefExpr 0x56110bb2e468 <col:71> 'Vector<T>' lvalue ParmVar 0x56110bb06d20 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56110bb2e4f8 <line:622:9, col:17>
|       `-UnaryOperator 0x56110bb2e4e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2e4d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110bb07448 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56110bb06f80 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb06ff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb073a8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56110bb070b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb07138 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb07280 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56110bb2e770 <col:66, line:627:5>
|     `-ReturnStmt 0x56110bb2e760 <line:626:9, col:59>
|       `-CallExpr 0x56110bb2e720 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56110bb2e538 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56110bb2e5a8 <col:25> 'const char *' lvalue ParmVar 0x56110bb070b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56110bb2e5c8 <col:34> 'int' lvalue ParmVar 0x56110bb07138 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56110bb2e6e0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56110bb2e700 <col:58> 'Vector<T>' lvalue ParmVar 0x56110bb07280 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56110bb074d8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56110bb2e7f0 <col:25, line:633:5>
|   `-ReturnStmt 0x56110bb2e7e0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56110bb2e7c8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56110bb2e798 <col:16> 'const bool' lvalue ->_status 0x56110bb14ce8
|         `-CXXThisExpr 0x56110bb2e788 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56110bb07658 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56110bb07590 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56110bb2e8d8 <col:27, line:639:5>
|   |-BinaryOperator 0x56110bb2e880 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56110bb2e808 <col:9> 'bool' lvalue ParmVar 0x56110bb07590 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56110bb2e868 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56110bb2e838 <col:13> 'bool' lvalue ->_status 0x56110bb14ce8
|   |     `-CXXThisExpr 0x56110bb2e828 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56110bb2e8c8 <line:638:9, col:17>
|     `-UnaryOperator 0x56110bb2e8b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56110bb2e8a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56110bb077d8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56110bb07718 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56110bb2e9c8 <col:39, line:644:5>
|   |-BinaryOperator 0x56110bb2e970 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56110bb2e8f8 <col:9> 'bool' lvalue ParmVar 0x56110bb07718 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56110bb2e958 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56110bb2e928 <col:13> 'const bool' lvalue ->_status 0x56110bb14ce8
|   |     `-CXXThisExpr 0x56110bb2e918 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56110bb2e9b8 <line:643:9, col:17>
|     `-UnaryOperator 0x56110bb2e9a0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56110bb2e990 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56110bb078a0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56110bb2ea70 <col:30, line:651:5>
|   `-ReturnStmt 0x56110bb2ea60 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56110bb2ea48 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56110bb2ea18 <col:16> 'bool' lvalue ->_read_status 0x56110ba0a690
|         `-ImplicitCastExpr 0x56110bb2e9f8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56110bb2e9e8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56110bb079e8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56110bb07958 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56110bb2eb78 <col:32, line:658:5>
|   |-BinaryOperator 0x56110bb2eb20 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56110bb2ea88 <col:9> 'bool' lvalue ParmVar 0x56110bb07958 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56110bb2eb08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56110bb2ead8 <col:13> 'bool' lvalue ->_read_status 0x56110ba0a690
|   |     `-ImplicitCastExpr 0x56110bb2eab8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56110bb2eaa8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56110bb2eb68 <line:657:9, col:17>
|     `-UnaryOperator 0x56110bb2eb50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56110bb2eb40 <col:17> 'Args *' this
|-CXXMethodDecl 0x56110bb07b38 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56110bb07aa8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56110bb2ec88 <col:44, line:663:5>
|   |-BinaryOperator 0x56110bb2ec30 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56110bb2eb98 <col:9> 'bool' lvalue ParmVar 0x56110bb07aa8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56110bb2ec18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56110bb2ebe8 <col:13> 'bool' lvalue ->_read_status 0x56110ba0a690
|   |     `-ImplicitCastExpr 0x56110bb2ebc8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56110bb2ebb8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56110bb2ec78 <line:662:9, col:17>
|     `-UnaryOperator 0x56110bb2ec60 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56110bb2ec50 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56110bb07c00 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56110bb07cc8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56110bb07d90 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56110bb07e58 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56110bb08168 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56110bb07ef8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56110bb080c8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56110bb07fd8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2f040 <col:19, line:706:5>
|     `-IfStmt 0x56110bb2f018 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56110bb2ed88 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56110bb2ef48 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56110bb2ef18 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56110bb2eed8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56110bb2ede0 <col:42> '<bound member function type>' ->simple_slot 0x56110bb28160
|       |     | `-CXXThisExpr 0x56110bb2edd0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x56110bb2ee78 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x56110bb2ee30 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x56110b8948a8
|       |     | `-DeclRefExpr 0x56110bb2ee10 <col:55> 'T' lvalue ParmVar 0x56110bb07fd8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56110bb2eeb8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56110bb2f008 <line:705:13, col:34>
|         `-CallExpr 0x56110bb2efe0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56110bb2ef68 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56110bb2efc0 <col:33> 'T' lvalue ParmVar 0x56110bb07fd8 'x' 'T &'
|-FunctionTemplateDecl 0x56110bb08438 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56110bb081c8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56110bb08398 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56110bb082a8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56110bb2f420 <col:31, line:717:5>
|     |-DeclStmt 0x56110bb2f180 <line:713:9, col:23>
|     | `-VarDecl 0x56110bb2f068 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56110bb2f158 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56110bb2f0e0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56110bb2f138 <col:21> 'T' lvalue ParmVar 0x56110bb082a8 'x' 'T &'
|     |-IfStmt 0x56110bb2f3d0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56110bb2f278 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56110bb2f3b0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56110bb2f350 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56110bb2f2e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|     |   | `-DeclRefExpr 0x56110bb2f2c0 <col:14> 'T *' lvalue Var 0x56110bb2f068 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56110bb2f390 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56110bb2f408 <line:716:9, col:16>
|       `-DeclRefExpr 0x56110bb2f3e8 <col:16> 'T *' lvalue Var 0x56110bb2f068 's' 'T *'
|-FunctionTemplateDecl 0x56110bb08848 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56110bb08498 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56110bb08518 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56110bb087a8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56110bb085f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56110bb08698 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56110bb2f730 <col:37, line:726:5>
|     |-IfStmt 0x56110bb2f6c0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56110bb2f6e0 <line:723:13, col:26>
|     | | `-VarDecl 0x56110bb2f488 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56110bb2f578 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56110bb2f500 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56110bb2f558 <col:25> 'T' lvalue ParmVar 0x56110bb085f8 'x' 'T &'
|     | |-DeclRefExpr 0x56110bb2f5a0 <col:16> 'T *' lvalue Var 0x56110bb2f488 's' 'T *'
|     | `-BinaryOperator 0x56110bb2f6a0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56110bb2f650 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56110bb2f5e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|     |   | `-DeclRefExpr 0x56110bb2f5c0 <col:14> 'T *' lvalue Var 0x56110bb2f488 's' 'T *'
|     |   `-DeclRefExpr 0x56110bb2f680 <col:18> 'const V' lvalue ParmVar 0x56110bb08698 'value' 'const V &'
|     `-ReturnStmt 0x56110bb2f720 <line:725:9, col:17>
|       `-UnaryOperator 0x56110bb2f708 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56110bb2f6f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56110bb08c48 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56110bb088b0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56110bb08ba8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56110bb08960 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb089e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb08a88 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56110bb30550 <col:65, line:737:5>
|     |-DeclStmt 0x56110bb2f7c8 <line:732:9, col:26>
|     | `-VarDecl 0x56110bb2f760 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56110bb30518 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56110bb30538 <line:733:13, col:58>
|       | `-VarDecl 0x56110bb2f7f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56110bb2f9d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56110bb2f9a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56110bb2f988 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56110bb2f968 <col:26, col:58> 'String' (CXXTemporary 0x56110bb2f968)
|       |           `-CXXMemberCallExpr 0x56110bb2f8f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56110bb2f868 <col:26> '<bound member function type>' ->find 0x56110bb27778
|       |             | `-CXXThisExpr 0x56110bb2f858 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56110bb2f930 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56110bb2f898 <col:31> 'const char *' lvalue ParmVar 0x56110bb08960 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56110bb2f948 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56110bb2f8b8 <col:40> 'int' lvalue ParmVar 0x56110bb089e0 'flags' 'int'
|       |             `-DeclRefExpr 0x56110bb2f8d8 <col:47> 'Args::Slot *' lvalue Var 0x56110bb2f760 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56110bb2fa88 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56110bb2fa70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56110bb2fa50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56110bb2fa20 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|       |       `-ImplicitCastExpr 0x56110bb2fa08 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56110bb2f9e8 <col:20> 'String' lvalue Var 0x56110bb2f7f0 'str' 'String'
|       `-CompoundStmt 0x56110bb304f8 <col:61, line:736:9>
|         |-DeclStmt 0x56110bb2ff40 <line:734:13, col:76>
|         | `-VarDecl 0x56110bb2fad8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56110bb2ff10 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56110bb2fe80 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56110bb2fec8 <col:60> 'T' lvalue ParmVar 0x56110bb08a88 'variable' 'T &'
|         |     `-UnaryOperator 0x56110bb2fef8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56110bb2fee8 <col:71> 'Args *' this
|         `-CallExpr 0x56110bb304c8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56110bb2ff68 <col:13> '<bound member function type>' ->postparse 0x56110bb27988
|           | `-CXXThisExpr 0x56110bb2ff58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56110bb30488 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56110bb2ff98 <col:23> 'T *' lvalue Var 0x56110bb2fad8 's' 'T *'
|           | `-CallExpr 0x56110bb30448 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56110bb30220 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56110bb30320 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56110bb30340 <col:86> 'String' lvalue Var 0x56110bb2f7f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56110bb303f0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56110bb30380 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|           |   | `-DeclRefExpr 0x56110bb30360 <col:92> 'T *' lvalue Var 0x56110bb2fad8 's' 'T *'
|           |   `-UnaryOperator 0x56110bb30430 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56110bb30420 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56110bb304a8 <col:103> 'Args::Slot *' lvalue Var 0x56110bb2f760 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56110bb09198 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56110bb08cb8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56110bb08d38 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56110bb090f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56110bb08df8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb08e78 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb08f18 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56110bb08fb8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56110bb313f0 <col:88, line:745:5>
|     |-DeclStmt 0x56110bb305e8 <line:741:9, col:26>
|     | `-VarDecl 0x56110bb30580 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56110bb30808 <line:742:9, col:55>
|     | `-VarDecl 0x56110bb30610 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56110bb307f0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56110bb307c0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56110bb307a8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56110bb30788 <col:22, col:54> 'String' (CXXTemporary 0x56110bb30788)
|     |           `-CXXMemberCallExpr 0x56110bb30718 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56110bb30688 <col:22> '<bound member function type>' ->find 0x56110bb27778
|     |             | `-CXXThisExpr 0x56110bb30678 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56110bb30750 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56110bb306b8 <col:27> 'const char *' lvalue ParmVar 0x56110bb08df8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56110bb30768 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56110bb306d8 <col:36> 'int' lvalue ParmVar 0x56110bb08e78 'flags' 'int'
|     |             `-DeclRefExpr 0x56110bb306f8 <col:43> 'Args::Slot *' lvalue Var 0x56110bb30580 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56110bb30be0 <line:743:9, col:72>
|     | `-VarDecl 0x56110bb30858 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56110bb30bb0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56110bb30b20 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56110bb30b68 <col:56> 'T' lvalue ParmVar 0x56110bb08f18 'variable' 'T &'
|     |     `-UnaryOperator 0x56110bb30b98 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56110bb30b88 <col:67> 'Args *' this
|     `-CallExpr 0x56110bb313c0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56110bb30c08 <col:9> '<bound member function type>' ->postparse 0x56110bb27988
|       | `-CXXThisExpr 0x56110bb30bf8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56110bb31380 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56110bb30c38 <col:19> 'T *' lvalue Var 0x56110bb30858 's' 'T *'
|       | `-ParenExpr 0x56110bb31360 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56110bb31330 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56110bb31318 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56110bb31300 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56110bb312e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56110bb312b0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|       |     |       `-ImplicitCastExpr 0x56110bb31298 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56110bb30c58 <col:25> 'String' lvalue Var 0x56110bb30610 'str' 'String'
|       |     |-CallExpr 0x56110bb31108 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56110bb30ee0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56110bb30fe0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56110bb31000 <col:89> 'String' lvalue Var 0x56110bb30610 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56110bb310b0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56110bb31040 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|       |     | | `-DeclRefExpr 0x56110bb31020 <col:95> 'T *' lvalue Var 0x56110bb30858 's' 'T *'
|       |     | `-UnaryOperator 0x56110bb310f0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56110bb310e0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56110bb31278 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56110bb31258 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56110bb31228 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56110bb311d8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56110bb31168 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|       |         | | `-DeclRefExpr 0x56110bb31148 <col:109> 'T *' lvalue Var 0x56110bb30858 's' 'T *'
|       |         | `-DeclRefExpr 0x56110bb31208 <col:113> 'const V' lvalue ParmVar 0x56110bb08fb8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56110bb31248 <col:120> 'bool' true
|       `-DeclRefExpr 0x56110bb313a0 <col:128> 'Args::Slot *' lvalue Var 0x56110bb30580 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56110bb096c8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56110bb09210 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb09288 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb09628 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56110bb09348 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb093c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb09440 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb094e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56110bb31fe8 <col:75, line:754:5>
|     |-DeclStmt 0x56110bb31498 <line:749:9, col:26>
|     | `-VarDecl 0x56110bb31430 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56110bb31fb0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56110bb31fd0 <line:750:13, col:58>
|       | `-VarDecl 0x56110bb314c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56110bb316a0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56110bb31670 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56110bb31658 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56110bb31638 <col:26, col:58> 'String' (CXXTemporary 0x56110bb31638)
|       |           `-CXXMemberCallExpr 0x56110bb315c8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56110bb31538 <col:26> '<bound member function type>' ->find 0x56110bb27778
|       |             | `-CXXThisExpr 0x56110bb31528 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56110bb31600 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56110bb31568 <col:31> 'const char *' lvalue ParmVar 0x56110bb09348 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56110bb31618 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56110bb31588 <col:40> 'int' lvalue ParmVar 0x56110bb093c8 'flags' 'int'
|       |             `-DeclRefExpr 0x56110bb315a8 <col:47> 'Args::Slot *' lvalue Var 0x56110bb31430 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56110bb31758 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56110bb31740 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56110bb31720 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56110bb316f0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|       |       `-ImplicitCastExpr 0x56110bb316d8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56110bb316b8 <col:20> 'String' lvalue Var 0x56110bb314c0 'str' 'String'
|       `-CompoundStmt 0x56110bb31f90 <col:61, line:753:9>
|         |-DeclStmt 0x56110bb31b30 <line:751:13, col:63>
|         | `-VarDecl 0x56110bb317a8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56110bb31b00 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56110bb31a70 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56110bb31ab8 <col:47> 'T' lvalue ParmVar 0x56110bb094e8 'variable' 'T &'
|         |     `-UnaryOperator 0x56110bb31ae8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56110bb31ad8 <col:58> 'Args *' this
|         `-CallExpr 0x56110bb31f60 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56110bb31b58 <col:13> '<bound member function type>' ->postparse 0x56110bb27988
|           | `-CXXThisExpr 0x56110bb31b48 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56110bb31f20 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56110bb31b88 <col:23> 'T *' lvalue Var 0x56110bb317a8 's' 'T *'
|           | `-CallExpr 0x56110bb31ee0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56110bb31d70 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56110bb31db8 <col:56> 'P' lvalue ParmVar 0x56110bb09440 'parser' 'P'
|           |   |-DeclRefExpr 0x56110bb31dd8 <col:64> 'String' lvalue Var 0x56110bb314c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56110bb31e88 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56110bb31e18 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|           |   | `-DeclRefExpr 0x56110bb31df8 <col:70> 'T *' lvalue Var 0x56110bb317a8 's' 'T *'
|           |   `-UnaryOperator 0x56110bb31ec8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56110bb31eb8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56110bb31f40 <col:81> 'Args::Slot *' lvalue Var 0x56110bb31430 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56110bb09d28 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56110bb09740 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56110bb097b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56110bb09838 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56110bb09c88 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56110bb09900 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb09980 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb099f8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb09a98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56110bb09b38 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56110bb35120 <col:98, line:762:5>
|     |-DeclStmt 0x56110bb32080 <line:758:9, col:26>
|     | `-VarDecl 0x56110bb32018 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56110bb322a0 <line:759:9, col:55>
|     | `-VarDecl 0x56110bb320a8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56110bb32288 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56110bb32258 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56110bb32240 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56110bb32220 <col:22, col:54> 'String' (CXXTemporary 0x56110bb32220)
|     |           `-CXXMemberCallExpr 0x56110bb321b0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56110bb32120 <col:22> '<bound member function type>' ->find 0x56110bb27778
|     |             | `-CXXThisExpr 0x56110bb32110 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56110bb321e8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56110bb32150 <col:27> 'const char *' lvalue ParmVar 0x56110bb09900 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56110bb32200 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56110bb32170 <col:36> 'int' lvalue ParmVar 0x56110bb09980 'flags' 'int'
|     |             `-DeclRefExpr 0x56110bb32190 <col:43> 'Args::Slot *' lvalue Var 0x56110bb32018 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56110bb326c0 <line:760:9, col:59>
|     | `-VarDecl 0x56110bb322f8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56110bb32690 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56110bb32600 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56110bb32648 <col:43> 'T' lvalue ParmVar 0x56110bb09a98 'variable' 'T &'
|     |     `-UnaryOperator 0x56110bb32678 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56110bb32668 <col:54> 'Args *' this
|     `-CallExpr 0x56110bb350f0 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56110bb326e8 <col:9> '<bound member function type>' ->postparse 0x56110bb27988
|       | `-CXXThisExpr 0x56110bb326d8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56110bb350b0 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56110bb32718 <col:19> 'T *' lvalue Var 0x56110bb322f8 's' 'T *'
|       | `-ParenExpr 0x56110bb35090 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56110bb35060 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56110bb35048 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56110bb35030 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56110bb35010 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56110bb34fe0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|       |     |       `-ImplicitCastExpr 0x56110bb34fc8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56110bb32738 <col:25> 'String' lvalue Var 0x56110bb320a8 'str' 'String'
|       |     |-CallExpr 0x56110bb34e38 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56110bb32920 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56110bb32968 <col:59> 'P' lvalue ParmVar 0x56110bb099f8 'parser' 'P'
|       |     | |-DeclRefExpr 0x56110bb32988 <col:67> 'String' lvalue Var 0x56110bb320a8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56110bb34de0 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56110bb34d70 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|       |     | | `-DeclRefExpr 0x56110bb329a8 <col:73> 'T *' lvalue Var 0x56110bb322f8 's' 'T *'
|       |     | `-UnaryOperator 0x56110bb34e20 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56110bb34e10 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56110bb34fa8 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56110bb34f88 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56110bb34f58 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56110bb34f08 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56110bb34e98 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|       |         | | `-DeclRefExpr 0x56110bb34e78 <col:87> 'T *' lvalue Var 0x56110bb322f8 's' 'T *'
|       |         | `-DeclRefExpr 0x56110bb34f38 <col:91> 'const V' lvalue ParmVar 0x56110bb09b38 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56110bb34f78 <col:98> 'bool' true
|       `-DeclRefExpr 0x56110bb350d0 <col:106> 'Args::Slot *' lvalue Var 0x56110bb32018 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56110bb11d70 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56110bb09da8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb09e28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56110bb09ea8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56110bb11cd0 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56110bb09f70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb09ff0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb0a068 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb0a108 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56110bb0a1a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x56110bb360f8 <col:60, line:773:5>
|     |-DeclStmt 0x56110bb351c8 <line:767:9, col:26>
|     | `-VarDecl 0x56110bb35160 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56110bb360c0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x56110bb360e0 <line:768:13, col:58>
|       | `-VarDecl 0x56110bb351f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56110bb353d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56110bb353a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56110bb35388 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56110bb35368 <col:26, col:58> 'String' (CXXTemporary 0x56110bb35368)
|       |           `-CXXMemberCallExpr 0x56110bb352f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56110bb35268 <col:26> '<bound member function type>' ->find 0x56110bb27778
|       |             | `-CXXThisExpr 0x56110bb35258 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56110bb35330 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56110bb35298 <col:31> 'const char *' lvalue ParmVar 0x56110bb09f70 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56110bb35348 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56110bb352b8 <col:40> 'int' lvalue ParmVar 0x56110bb09ff0 'flags' 'int'
|       |             `-DeclRefExpr 0x56110bb352d8 <col:47> 'Args::Slot *' lvalue Var 0x56110bb35160 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56110bb35488 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56110bb35470 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56110bb35450 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56110bb35420 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|       |       `-ImplicitCastExpr 0x56110bb35408 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56110bb353e8 <col:20> 'String' lvalue Var 0x56110bb351f0 'str' 'String'
|       `-CompoundStmt 0x56110bb36098 <col:61, line:772:9>
|         |-DeclStmt 0x56110bb357c0 <line:769:13, col:66>
|         | `-VarDecl 0x56110bb354d8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x56110bb35790 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56110bb35700 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56110bb35748 <col:49> 'T1' lvalue ParmVar 0x56110bb0a108 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x56110bb35778 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56110bb35768 <col:61> 'Args *' this
|         |-DeclStmt 0x56110bb35b30 <line:770:13, col:66>
|         | `-VarDecl 0x56110bb35848 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x56110bb35b00 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56110bb35a70 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56110bb35ab8 <col:49> 'T2' lvalue ParmVar 0x56110bb0a1a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x56110bb35ae8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56110bb35ad8 <col:61> 'Args *' this
|         `-CallExpr 0x56110bb36068 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x56110bb35b58 <col:13> '<bound member function type>' ->postparse 0x56110bb27988
|           | `-CXXThisExpr 0x56110bb35b48 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56110bb36028 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x56110bb35bc8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x56110bb35b88 <col:23> 'T1 *' lvalue Var 0x56110bb354d8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x56110bb35ba8 <col:29> 'T2 *' lvalue Var 0x56110bb35848 's2' 'T2 *'
|           | `-CallExpr 0x56110bb35fe0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56110bb35db0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56110bb35df8 <col:63> 'P' lvalue ParmVar 0x56110bb0a068 'parser' 'P'
|           |   |-DeclRefExpr 0x56110bb35e18 <col:71> 'String' lvalue Var 0x56110bb351f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56110bb35ec8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56110bb35e58 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|           |   | `-DeclRefExpr 0x56110bb35e38 <col:77> 'T1 *' lvalue Var 0x56110bb354d8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x56110bb35f88 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56110bb35f18 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|           |   | `-DeclRefExpr 0x56110bb35ef8 <col:82> 'T2 *' lvalue Var 0x56110bb35848 's2' 'T2 *'
|           |   `-UnaryOperator 0x56110bb35fc8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56110bb35fb8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x56110bb36048 <col:94> 'Args::Slot *' lvalue Var 0x56110bb35160 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56110bb12158 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56110bb11df0 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56110bb120b8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56110bb11ea0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb11f20 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb11f98 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56110bb36610 <col:67, line:780:5>
|     |-DeclStmt 0x56110bb36190 <line:777:9, col:26>
|     | `-VarDecl 0x56110bb36128 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56110bb365d8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x56110bb365f8 <line:778:13, col:58>
|       | `-VarDecl 0x56110bb361b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56110bb36398 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56110bb36368 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56110bb36350 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56110bb36330 <col:26, col:58> 'String' (CXXTemporary 0x56110bb36330)
|       |           `-CXXMemberCallExpr 0x56110bb362c0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56110bb36230 <col:26> '<bound member function type>' ->find 0x56110bb27778
|       |             | `-CXXThisExpr 0x56110bb36220 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56110bb362f8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56110bb36260 <col:31> 'const char *' lvalue ParmVar 0x56110bb11ea0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56110bb36310 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56110bb36280 <col:40> 'int' lvalue ParmVar 0x56110bb11f20 'flags' 'int'
|       |             `-DeclRefExpr 0x56110bb362a0 <col:47> 'Args::Slot *' lvalue Var 0x56110bb36128 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56110bb36450 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56110bb36438 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56110bb36418 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56110bb363e8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|       |       `-ImplicitCastExpr 0x56110bb363d0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56110bb363b0 <col:20> 'String' lvalue Var 0x56110bb361b8 'str' 'String'
|       `-CallExpr 0x56110bb365a8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x56110bb36478 <col:13> '<bound member function type>' ->postparse 0x56110bb27988
|         | `-CXXThisExpr 0x56110bb36468 <col:13> 'Args *' implicit this
|         |-CallExpr 0x56110bb36558 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x56110bb364c8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x56110bb364a8 <col:23> 'P' lvalue ParmVar 0x56110bb11f98 'parser' 'P'
|         | |-DeclRefExpr 0x56110bb36510 <col:36> 'String' lvalue Var 0x56110bb361b8 'str' 'String'
|         | `-UnaryOperator 0x56110bb36540 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x56110bb36530 <col:42> 'Args *' this
|         `-DeclRefExpr 0x56110bb36588 <col:49> 'Args::Slot *' lvalue Var 0x56110bb36128 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56110bb124f8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56110bb121c8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56110bb12458 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56110bb12280 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb12300 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb12378 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56110bb36f80 <col:71, line:792:5>
|     |-DeclStmt 0x56110bb366a8 <line:784:9, col:26>
|     | `-VarDecl 0x56110bb36640 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56110bb36778 <line:785:9, col:29>
|     | `-VarDecl 0x56110bb366d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56110bb36760 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56110bb36740 <col:28> 'int' 1
|     |-WhileStmt 0x56110bb36e30 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56110bb36e50 <line:786:16, col:61>
|     | | `-VarDecl 0x56110bb367a0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56110bb36980 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56110bb36950 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56110bb36938 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56110bb36918 <col:29, col:61> 'String' (CXXTemporary 0x56110bb36918)
|     | |           `-CXXMemberCallExpr 0x56110bb368a8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56110bb36818 <col:29> '<bound member function type>' ->find 0x56110bb27778
|     | |             | `-CXXThisExpr 0x56110bb36808 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56110bb368e0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56110bb36848 <col:34> 'const char *' lvalue ParmVar 0x56110bb12280 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56110bb368f8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56110bb36868 <col:43> 'int' lvalue ParmVar 0x56110bb12300 'flags' 'int'
|     | |             `-DeclRefExpr 0x56110bb36888 <col:50> 'Args::Slot *' lvalue Var 0x56110bb36640 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56110bb36a38 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56110bb36a20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56110bb36a00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56110bb369d0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|     | |       `-ImplicitCastExpr 0x56110bb369b8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56110bb36998 <col:23> 'String' lvalue Var 0x56110bb367a0 'str' 'String'
|     | `-CompoundStmt 0x56110bb36e08 <col:64, line:790:9>
|     |   |-CallExpr 0x56110bb36b90 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56110bb36a60 <col:13> '<bound member function type>' ->postparse 0x56110bb27988
|     |   | | `-CXXThisExpr 0x56110bb36a50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56110bb36b40 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56110bb36ab0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56110bb36a90 <col:23> 'P' lvalue ParmVar 0x56110bb12378 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56110bb36af8 <col:36> 'String' lvalue Var 0x56110bb367a0 'str' 'String'
|     |   | | `-UnaryOperator 0x56110bb36b28 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56110bb36b18 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56110bb36b70 <col:49> 'Args::Slot *' lvalue Var 0x56110bb36640 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56110bb36d28 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56110bb36bc0 <col:13> 'int' lvalue Var 0x56110bb366d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56110bb36d10 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56110bb36cf0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56110bb36c58 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56110bb36c38 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56110bb36c20 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56110bb36be0 <col:28> 'int' lvalue Var 0x56110bb366d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56110bb36c00 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56110bb36cd8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56110bb36ca8 <col:49> 'bool' lvalue ->_read_status 0x56110ba0a690
|     |   |         `-ImplicitCastExpr 0x56110bb36c88 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56110bb36c78 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56110bb36dd8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56110bb36d48 <col:13> 'int' lvalue ParmVar 0x56110bb12300 'flags' 'int'
|     |     `-UnaryOperator 0x56110bb36dc0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56110bb36da8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56110bb36d88 <col:23> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56110bb36f60 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56110bb36e98 <col:9> 'bool' lvalue ->_read_status 0x56110ba0a690
|       | `-ImplicitCastExpr 0x56110bb36e78 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56110bb36e68 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56110bb36f40 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56110bb36f20 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56110bb36f08 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56110bb36ec8 <col:25> 'int' lvalue Var 0x56110bb366d8 'read_status' 'int'
|           `-IntegerLiteral 0x56110bb36ee8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56110bb129d8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56110bb12568 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb125e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb12938 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56110bb126a8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb12728 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb127a0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb12848 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56110bb37f10 <col:84, line:805:5>
|     |-DeclStmt 0x56110bb37028 <line:796:9, col:26>
|     | `-VarDecl 0x56110bb36fc0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56110bb370f8 <line:797:9, col:29>
|     | `-VarDecl 0x56110bb37058 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56110bb370e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56110bb370c0 <col:28> 'int' 1
|     |-DeclStmt 0x56110bb37430 <line:798:9, col:71>
|     | `-VarDecl 0x56110bb37148 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56110bb37400 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56110bb37370 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56110bb373b8 <col:55> 'T' lvalue ParmVar 0x56110bb12848 'variable' 'T &'
|     |     `-UnaryOperator 0x56110bb373e8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56110bb373d8 <col:66> 'Args *' this
|     |-WhileStmt 0x56110bb37dc0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56110bb37de0 <line:799:16, col:61>
|     | | `-VarDecl 0x56110bb37458 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56110bb37638 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56110bb37608 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56110bb375f0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56110bb375d0 <col:29, col:61> 'String' (CXXTemporary 0x56110bb375d0)
|     | |           `-CXXMemberCallExpr 0x56110bb37560 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56110bb374d0 <col:29> '<bound member function type>' ->find 0x56110bb27778
|     | |             | `-CXXThisExpr 0x56110bb374c0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56110bb37598 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56110bb37500 <col:34> 'const char *' lvalue ParmVar 0x56110bb126a8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56110bb375b0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56110bb37520 <col:43> 'int' lvalue ParmVar 0x56110bb12728 'flags' 'int'
|     | |             `-DeclRefExpr 0x56110bb37540 <col:50> 'Args::Slot *' lvalue Var 0x56110bb36fc0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56110bb376f0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56110bb376d8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56110bb376b8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56110bb37688 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|     | |       `-ImplicitCastExpr 0x56110bb37670 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56110bb37650 <col:23> 'String' lvalue Var 0x56110bb37458 'str' 'String'
|     | `-CompoundStmt 0x56110bb37d98 <col:64, line:803:9>
|     |   |-CallExpr 0x56110bb37b20 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56110bb37718 <col:13> '<bound member function type>' ->postparse 0x56110bb27988
|     |   | | `-CXXThisExpr 0x56110bb37708 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56110bb37ae0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56110bb37748 <col:23> 'T *' lvalue Var 0x56110bb37148 's' 'T *'
|     |   | | `-CallExpr 0x56110bb37aa0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56110bb37930 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56110bb37978 <col:56> 'P' lvalue ParmVar 0x56110bb127a0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56110bb37998 <col:64> 'String' lvalue Var 0x56110bb37458 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56110bb37a48 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56110bb379d8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|     |   | |   | `-DeclRefExpr 0x56110bb379b8 <col:70> 'T *' lvalue Var 0x56110bb37148 's' 'T *'
|     |   | |   `-UnaryOperator 0x56110bb37a88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56110bb37a78 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56110bb37b00 <col:81> 'Args::Slot *' lvalue Var 0x56110bb36fc0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56110bb37cb8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56110bb37b50 <col:13> 'int' lvalue Var 0x56110bb37058 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56110bb37ca0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56110bb37c80 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56110bb37be8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56110bb37bc8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56110bb37bb0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56110bb37b70 <col:28> 'int' lvalue Var 0x56110bb37058 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56110bb37b90 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56110bb37c68 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56110bb37c38 <col:49> 'bool' lvalue ->_read_status 0x56110ba0a690
|     |   |         `-ImplicitCastExpr 0x56110bb37c18 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56110bb37c08 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56110bb37d68 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56110bb37cd8 <col:13> 'int' lvalue ParmVar 0x56110bb12728 'flags' 'int'
|     |     `-UnaryOperator 0x56110bb37d50 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56110bb37d38 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56110bb37d18 <col:23> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56110bb37ef0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56110bb37e28 <col:9> 'bool' lvalue ->_read_status 0x56110ba0a690
|       | `-ImplicitCastExpr 0x56110bb37e08 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56110bb37df8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56110bb37ed0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56110bb37eb0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56110bb37e98 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56110bb37e58 <col:25> 'int' lvalue Var 0x56110bb37058 'read_status' 'int'
|           `-IntegerLiteral 0x56110bb37e78 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56110bb12fb8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56110bb12a50 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56110bb12ac8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56110bb12f18 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56110bb12b88 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56110bb12c08 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56110bb12c80 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56110bb12dd0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56110bb38d18 <col:87, line:821:5>
|     |-DeclStmt 0x56110bb37fc0 <line:809:9, col:26>
|     | `-VarDecl 0x56110bb37f58 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56110bb38090 <line:810:9, col:29>
|     | `-VarDecl 0x56110bb37ff0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56110bb38078 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56110bb38058 <col:28> 'int' 1
|     |-DeclStmt 0x56110bb382d8 <line:811:9, col:38>
|     | `-VarDecl 0x56110bb381c0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56110bb382b0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56110bb38238 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56110bb38290 <col:29> 'Vector<T>' lvalue ParmVar 0x56110bb12dd0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56110bb38bc8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56110bb38be8 <line:812:16, col:61>
|     | | `-VarDecl 0x56110bb38300 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56110bb384e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56110bb384b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56110bb38498 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56110bb38478 <col:29, col:61> 'String' (CXXTemporary 0x56110bb38478)
|     | |           `-CXXMemberCallExpr 0x56110bb38408 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56110bb38378 <col:29> '<bound member function type>' ->find 0x56110bb27778
|     | |             | `-CXXThisExpr 0x56110bb38368 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56110bb38440 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56110bb383a8 <col:34> 'const char *' lvalue ParmVar 0x56110bb12b88 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56110bb38458 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56110bb383c8 <col:43> 'int' lvalue ParmVar 0x56110bb12c08 'flags' 'int'
|     | |             `-DeclRefExpr 0x56110bb383e8 <col:50> 'Args::Slot *' lvalue Var 0x56110bb37f58 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56110bb38598 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56110bb38580 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56110bb38560 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56110bb38530 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56110b856868
|     | |       `-ImplicitCastExpr 0x56110bb38518 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56110bb384f8 <col:23> 'String' lvalue Var 0x56110bb38300 'str' 'String'
|     | `-CompoundStmt 0x56110bb38b90 <col:64, line:819:9>
|     |   |-DeclStmt 0x56110bb38658 <line:813:13, col:23>
|     |   | `-VarDecl 0x56110bb385c0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56110bb38638 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56110bb387d8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56110bb38680 <col:13> '<bound member function type>' ->postparse 0x56110bb27988
|     |   | | `-CXXThisExpr 0x56110bb38670 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56110bb38780 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56110bb386d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56110bb386b0 <col:23> 'P' lvalue ParmVar 0x56110bb12c80 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56110bb38718 <col:36> 'String' lvalue Var 0x56110bb38300 'str' 'String'
|     |   | | |-DeclRefExpr 0x56110bb38738 <col:41> 'T' lvalue Var 0x56110bb385c0 'sx' 'T'
|     |   | | `-UnaryOperator 0x56110bb38768 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56110bb38758 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56110bb387b8 <col:53> 'Args::Slot *' lvalue Var 0x56110bb37f58 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56110bb38930 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56110bb38868 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56110bb38838 <col:17> 'bool' lvalue ->_read_status 0x56110ba0a690
|     |   | |   `-ImplicitCastExpr 0x56110bb38818 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56110bb38808 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56110bb38908 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56110bb388a0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56110bb38880 <col:17> 'Vector<T> *' lvalue Var 0x56110bb381c0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56110bb388e8 <col:30> 'T' lvalue Var 0x56110bb385c0 'sx' 'T'
|     |   |-BinaryOperator 0x56110bb38ab0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56110bb38948 <col:13> 'int' lvalue Var 0x56110bb37ff0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56110bb38a98 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56110bb38a78 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56110bb389e0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56110bb389c0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56110bb389a8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56110bb38968 <col:28> 'int' lvalue Var 0x56110bb37ff0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56110bb38988 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56110bb38a60 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56110bb38a30 <col:49> 'bool' lvalue ->_read_status 0x56110ba0a690
|     |   |         `-ImplicitCastExpr 0x56110bb38a10 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56110bb38a00 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56110bb38b60 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56110bb38ad0 <col:13> 'int' lvalue ParmVar 0x56110bb12c08 'flags' 'int'
|     |     `-UnaryOperator 0x56110bb38b48 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56110bb38b30 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56110bb38b10 <col:23> 'const int' lvalue Var 0x56110bafb558 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56110bb38cf8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56110bb38c30 <col:9> 'bool' lvalue ->_read_status 0x56110ba0a690
|       | `-ImplicitCastExpr 0x56110bb38c10 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56110bb38c00 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56110bb38cd8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56110bb38cb8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56110bb38ca0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56110bb38c60 <col:25> 'int' lvalue Var 0x56110bb37ff0 'read_status' 'int'
|           `-IntegerLiteral 0x56110bb38c80 <col:40> 'int' 1
|-AccessSpecDecl 0x56110bb13030 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56110bb13058 prev 0x56110baf9858 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56110bb13150 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56110bb13240 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56110bb38d50 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56110bb13330 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56110bb38d60 <col:25, line:830:9>
| |-CXXMethodDecl 0x56110bb13430 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56110bb134e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56110bb13588 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56110bb13588
| | `-ParmVarDecl 0x56110bb13698 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56110bb13e58 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56110bb13e58
|   `-ParmVarDecl 0x56110bb13f68 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56110bb13708 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56110bb13868 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56110bb13a60 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56110bb13910 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56110bb13988 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56110bb38f40 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56110bb13d18 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56110bb38db0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56110bb38d70 <col:20> 'void *' lvalue ParmVar 0x56110bb13910 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56110bb13d80 '_slot' 'char *'
| | | `-CXXNewExpr 0x56110bb38e38 <col:32, col:45> 'char *' array Function 0x56110b67a2c8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56110bb38e20 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56110bb38df0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56110bb13988 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56110bb13de0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56110bb38f00 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56110bb38ec0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56110bb13988 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56110bb38fc0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56110bb13b60 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56110bb13330 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56110bb39048 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56110bb39028 <line:840:13, col:22> 'void' array Function 0x56110b67a628 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56110bb39010 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56110bb38fe0 <col:22> 'char *' lvalue ->_slot 0x56110bb13d80
| |         `-CXXThisExpr 0x56110bb38fd0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56110bb13c60 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56110bb13430 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56110bb39238 <col:22, line:844:9>
| |   `-CallExpr 0x56110bb391a0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56110bb39188 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56110bb39168 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56110b7860a8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56110bb391d8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56110bb390b8 <col:20> 'void *' lvalue ->_ptr 0x56110bb13d18
| |     |   `-CXXThisExpr 0x56110bb390a8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56110bb39208 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56110bb391f0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56110bb390f8 <col:26> 'char *' lvalue ->_slot 0x56110bb13d80
| |     |     `-CXXThisExpr 0x56110bb390e8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56110bb39220 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56110bb39138 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56110bb13de0
| |         `-CXXThisExpr 0x56110bb39128 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56110bb13d18 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56110bb13d80 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56110bb13de0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56110bb13fd8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56110bb13fd8
| | `-ParmVarDecl 0x56110bb140e8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56110bb14188 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56110bb14188
|   `-ParmVarDecl 0x56110bb14298 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56110bb14438 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56110bb14308 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56110bb143a8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56110bb146d0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56110bb148c8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56110bb14798 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56110bb14a48 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56110bb39270 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56110bb39250 <col:20> 'T *' lvalue ParmVar 0x56110bb14798 'ptr' 'T *'
|   | `-CompoundStmt 0x56110bb392c0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56110bb14998 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56110bb13430 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56110bb39470 <col:22, line:857:9>
|   |   `-CallExpr 0x56110bb39440 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56110bb392d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56110b83e9f8 0x56110b7e8b08
|   |     |-CXXOperatorCallExpr 0x56110bb393d0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56110bb39360 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56110ba4b9a8 0x56110ba4b5c8 0x56110ba4b1f8 0x56110ba4ae18 0x56110ba4aa38 0x56110ba4a668
|   |     | `-MemberExpr 0x56110bb39330 <col:29> 'T *' lvalue ->_ptr 0x56110bb14a48
|   |     |   `-CXXThisExpr 0x56110bb39320 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56110bb39410 <col:35> 'T' lvalue ->_slot 0x56110bb14aa8
|   |       `-CXXThisExpr 0x56110bb39400 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56110bb14a48 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56110bb14aa8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56110bb14b10 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56110bb14c10 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56110bb14c60 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110bb14bf0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56110bb14bd0 <col:31> 'int' 48
|-FieldDecl 0x56110bb14c88 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56110bb14ce8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56110bb14d48 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56110bb14e80 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56110bb27020 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56110bb27080 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56110bb27130 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56110bb27358 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56110bb27260 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56110bb274a8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56110bb27418 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56110bb27778 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56110bb27568 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56110bb275e8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56110bb27690 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56110bb27988 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56110bb27840 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56110bb278b8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56110bb27a58 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56110bb27ba8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56110bb27b10 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56110bb27f38 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56110bb27c68 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56110bb27ce8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56110bb27d90 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56110bb27e48 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56110bb28160 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56110bb28010 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56110bb28088 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56110bb28478 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56110bb28210 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56110bb283d8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56110bb282e8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110bb52e60 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110bb52f78 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x56110bb53008 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56110bb53118 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x56110bb53048 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x56110bb53468 'size' 'int'
| | `-ImplicitCastExpr 0x56110bb53530 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56110bb534f0 <col:16> 'int' lvalue ParmVar 0x56110bb53048 's' 'int'
| `-CompoundStmt 0x56110bb53578 <col:19, line:1297:5>
|-CXXMethodDecl 0x56110bb53370 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x56110bb531d8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x56110bb53258 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x56110bb532d0 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x56110bb534d0 <col:73> 'const ArgContext' lvalue Var 0x56110bb39498 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x56110bb53428 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x56110bb53468 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x56110bb6cbe8 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x56110bb6cbe8
| `-ParmVarDecl 0x56110bb6ccf8 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x56110bb6cd98 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56110bb6cea8 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x56110bb53468 'size' 'int'
| | `-ImplicitCastExpr 0x56110bb6d6c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56110bb6d680 <col:7> 'int' xvalue .size 0x56110bb53468
| |     `-CXXStaticCastExpr 0x56110bb6d650 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x56110bb6d620 <col:7> 'AnnoArg' lvalue ParmVar 0x56110bb6cea8 '' 'AnnoArg &&'
| `-CompoundStmt 0x56110bb6d710 <col:7>
`-CXXDestructorDecl 0x56110bb6cf48 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110b847720 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110b847838 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56110b8478c8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56110b847998 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56110b847a80 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56110b847c98 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56110b847b40 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110b847e48 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56110b847d50 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56110b847f90 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56110b847f00 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56110b8480d8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56110b848048 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110b848220 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56110b848190 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110b8482e8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x56110b848430 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56110b8483a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x56110b8484f8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x56110b848640 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56110b8485b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x56110b8487b8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56110b8486f8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110b848900 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56110b848870 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110b8489c8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56110b848b88 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56110b848a78 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56110b848af0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110b848dd8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56110b848c48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56110b848cc0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56110b848e88 <col:86> "" ""
|-CXXMethodDecl 0x56110b8490f8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56110b848f68 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56110b848fe0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110b8492a8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56110b8491b8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56110b849458 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56110b849360 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56110b849728 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56110b849510 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56110b849588 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56110b849600 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110b849a08 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56110b8497f0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56110b849868 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56110b8498e0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56110b849ac0 <col:115> "" ""
|-AccessSpecDecl 0x56110b849b30 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56110b849b68 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110b84a070 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56110b84a070
| `-ParmVarDecl 0x56110b84a178 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56110b84a218 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56110b84a218
| `-ParmVarDecl 0x56110b84a328 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56110b87f958 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56110ba72760 <col:7>
|-CXXConstructorDecl 0x56110b87fa30 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56110b87fa30
| `-ParmVarDecl 0x56110b87fb48 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56110b87fbb8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56110b87fbb8
| `-ParmVarDecl 0x56110b87fcc8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56110ba75160 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110ba61308 prev 0x56110ba56510 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110ba61400 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56110ba614f0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56110ba61618 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56110ba61798 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56110ba61918 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56110ba61a98 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56110ba728c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56110ba73138 <col:11>
|-CXXDestructorDecl 0x56110ba729a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56110ba72ad8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56110ba72ad8
| `-ParmVarDecl 0x56110ba72be8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56110ba72c88 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56110ba72c88
| `-ParmVarDecl 0x56110ba72d98 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56110ba75b58 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56110ba75c68 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56110ba75ee8 <col:11>
|   `-ReturnStmt 0x56110ba75ed8 <col:11>
|     `-UnaryOperator 0x56110ba75ec0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56110ba75eb0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56110ba75cd8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56110ba75cd8
  `-ParmVarDecl 0x56110ba75de8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110ba61b00 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110ba61c18 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56110ba61cb8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56110ba61d20 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56110ba61d88 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56110ba61df0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56110ba61e50 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56110ba61f10 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56110ba61f70 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56110ba61fd0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56110ba727d8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56110ba61cb8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56110ba73148 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56110ba731a0 <col:12>
|-CXXConstructorDecl 0x56110ba72e08 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56110ba72e08
| `-ParmVarDecl 0x56110ba72f18 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56110ba72fb8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56110ba72fb8
| `-ParmVarDecl 0x56110ba730c8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56110ba75240 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110ba4fc20 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56110ba4fd38 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56110ba4fdc8 <col:16, col:22> col:16 public
|-EnumDecl 0x56110ba4fdf0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56110ba4fef0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56110ba4ffd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba4fed0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56110ba4feb0 <col:21> 'int' 28
| `-EnumConstantDecl 0x56110ba4ff80 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56110ba4ffe8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110ba4ff60 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56110ba4ff40 <col:22> 'int' 64
|-CXXMethodDecl 0x56110ba50328 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56110ba50010 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56110ba50090 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56110ba50108 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56110ba50180 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56110ba503e8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56110ba505e8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56110ba50460 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56110ba504d8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56110ba50698 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56110ba507f8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56110ba50708 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56110ba508a0 <col:72> warn_unused_result ""
|-TypedefDecl 0x56110ba50c00 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56110ba50b90 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56110ba50b30 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56110ba50af0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56110b5274e0 'void'
|       |-PointerType 0x56110b7cfda0 'unsigned char *'
|       | `-BuiltinType 0x56110b5275e0 'unsigned char'
|       |-TypedefType 0x56110b5cc370 'size_t' sugar
|       | |-Typedef 0x56110b597be0 'size_t'
|       | `-BuiltinType 0x56110b527640 'unsigned long'
|       `-PointerType 0x56110b527ce0 'void *'
|         `-BuiltinType 0x56110b5274e0 'void'
|-CXXMethodDecl 0x56110ba51078 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56110ba50c70 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56110ba50ce8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56110ba50d80 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56110ba50e00 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56110ba6b770 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56110ba6b758 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56110ba6b720 <col:58> 'int' 0
| |-ParmVarDecl 0x56110ba50e80 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56110ba6b798 <col:76> 'int' 0
| |-ParmVarDecl 0x56110ba50f00 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56110ba6b7b8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56110ba51148 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56110ba511c8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56110ba51288 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56110ba51328 <col:20>
| `-OptimizeNoneAttr 0x56110ba51380 <col:30>
|-CXXMethodDecl 0x56110ba513f8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56110ba51498 <col:20>
| `-OptimizeNoneAttr 0x56110ba514f0 <col:30>
|-CXXMethodDecl 0x56110ba51568 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56110ba51608 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56110ba516b8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56110ba51758 <col:20>
| |-OptimizeNoneAttr 0x56110ba517b0 <col:30>
| `-WarnUnusedResultAttr 0x56110ba517d8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56110ba51830 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56110ba518d0 <col:20>
| `-OptimizeNoneAttr 0x56110ba51928 <col:30>
|-CXXMethodDecl 0x56110ba51978 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56110ba51a18 <col:20>
| `-OptimizeNoneAttr 0x56110ba51a70 <col:30>
|-CXXMethodDecl 0x56110ba51ab8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56110ba51b58 <col:20>
| `-OptimizeNoneAttr 0x56110ba51bb0 <col:30>
|-CXXMethodDecl 0x56110ba51bf8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56110ba51cb8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56110ba51d80 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56110ba51e48 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56110ba51f08 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56110ba52028 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56110ba6b880 <col:54, line:99:5>
|   `-ReturnStmt 0x56110ba6b870 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56110ba6b858 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56110ba6b828 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56110ba62308
|         `-CXXThisExpr 0x56110ba6b818 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56110ba521c8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56110ba520d8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56110ba6b930 <col:67, line:103:5>
|   `-BinaryOperator 0x56110ba6b910 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56110ba6b8a8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56110ba62308
|     | `-CXXThisExpr 0x56110ba6b898 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56110ba6b8f8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56110ba6b8d8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56110ba520d8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56110ba522c0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56110ba6b9b0 <col:33, line:107:5>
|   `-ReturnStmt 0x56110ba6b9a0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56110ba6b988 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56110ba6b958 <col:16> 'void *' lvalue ->_destructor_argument 0x56110ba62370
|         `-CXXThisExpr 0x56110ba6b948 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56110ba52380 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56110ba6bfe0 <col:25, line:113:5>
|   |-ParenExpr 0x56110ba6bd28 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56110ba6bcf8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba6ba68 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56110ba6ba40 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56110ba6ba08 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56110ba6b9d8 <col:24> '<bound member function type>' ->shared 0x56110ba513f8
|   |   |       `-ImplicitCastExpr 0x56110ba6ba28 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56110ba6b9c8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56110ba6bac8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba6baa8 <col:42> 'int' 0
|   |   `-CallExpr 0x56110ba6bc58 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56110ba6bc40 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba6bc20 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba6bc98 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6bb38 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56110ba6bcb0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6bb60 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba6bcc8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba6bb98 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56110ba6bce0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba6bc08 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba6bbf0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba6bbb8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56110ba6bf28 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56110ba6bd58 <col:2> 'unsigned char *' lvalue ->_head 0x56110ba62110
|   | | `-CXXThisExpr 0x56110ba6bd48 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56110ba6bf10 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56110ba6bef0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56110ba6bd98 <col:10> 'unsigned char *' lvalue ->_data 0x56110ba62178
|   |     | `-CXXThisExpr 0x56110ba6bd88 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56110ba6bed8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56110ba6beb8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56110ba6bdd8 <col:18> 'unsigned char *' lvalue ->_tail 0x56110ba621e0
|   |         | `-CXXThisExpr 0x56110ba6bdc8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56110ba6bea0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56110ba6be80 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56110ba6be18 <col:26> 'unsigned char *' lvalue ->_end 0x56110ba62248
|   |             | `-CXXThisExpr 0x56110ba6be08 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56110ba6be68 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56110ba6be48 <col:33> 'int' 0
|   `-BinaryOperator 0x56110ba6bfc0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56110ba6bf58 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56110ba62308
|     | `-CXXThisExpr 0x56110ba6bf48 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56110ba6bfa8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56110ba6bf88 <col:16> 'int' 0
|-CXXMethodDecl 0x56110ba524c0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56110ba52430 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56110ba52568 <col:20>
| |-OptimizeNoneAttr 0x56110ba525c0 <col:30>
| `-WarnUnusedResultAttr 0x56110ba525e8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56110ba526b8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56110ba52628 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56110ba52760 <col:20>
| |-OptimizeNoneAttr 0x56110ba527b8 <col:30>
| `-WarnUnusedResultAttr 0x56110ba527e0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56110ba52918 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56110ba52820 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56110ba529c0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56110ba52ac0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56110ba52a30 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56110ba52b68 <col:20>
| `-OptimizeNoneAttr 0x56110ba52bc0 <col:30>
|-CXXMethodDecl 0x56110ba52c88 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56110ba52bf8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56110ba52d30 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56110ba52e30 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56110ba52da0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56110ba52ed8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56110ba52fd8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56110ba52f48 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56110ba53080 <col:20>
| `-OptimizeNoneAttr 0x56110ba530d8 <col:30>
|-CXXMethodDecl 0x56110ba53268 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56110ba53118 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56110ba53190 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56110ba6b7d8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56110ba53318 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56110ba53518 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56110ba53390 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56110ba53408 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110ba53728 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56110ba535d8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56110ba53650 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110ba53938 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56110ba537e8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56110ba53868 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56110ba6b7e8 <col:39> 'int' 0
|-CXXMethodDecl 0x56110ba53a08 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56110ba53ad0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56110ba53b98 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56110ba53c58 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56110ba53d20 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56110ba53e68 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56110ba53dd8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56110ba54038 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56110ba53f28 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56110ba53fa0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110ba54108 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56110ba541c8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56110ba54268 <col:20>
| `-OptimizeNoneAttr 0x56110ba542c0 <col:30>
|-CXXMethodDecl 0x56110ba54310 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56110ba543b0 <col:20>
| `-OptimizeNoneAttr 0x56110ba54408 <col:30>
|-CXXMethodDecl 0x56110ba54458 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56110ba54518 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56110ba545e0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56110ba54680 <col:20>
| `-OptimizeNoneAttr 0x56110ba546d8 <col:30>
|-CXXMethodDecl 0x56110ba54828 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56110ba54718 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56110ba54790 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110ba54978 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56110ba548e8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110ba54a50 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56110ba54b10 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56110ba54bb0 <col:20>
| `-OptimizeNoneAttr 0x56110ba54c08 <col:30>
|-CXXMethodDecl 0x56110ba54c58 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56110ba54cf8 <col:20>
| `-OptimizeNoneAttr 0x56110ba54d50 <col:30>
|-CXXMethodDecl 0x56110ba54da0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56110ba54e68 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56110ba54f08 <col:20>
| `-OptimizeNoneAttr 0x56110ba54f60 <col:30>
|-CXXMethodDecl 0x56110ba54fa8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56110ba550c8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56110ba55238 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56110ba55178 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56110ba55328 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56110ba553c8 <col:20>
| `-OptimizeNoneAttr 0x56110ba55420 <col:30>
|-CXXMethodDecl 0x56110ba55470 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56110ba55530 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56110ba55768 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56110ba555e0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56110ba55658 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56110ba55818 <col:20>
| `-OptimizeNoneAttr 0x56110ba55870 <col:30>
|-CXXMethodDecl 0x56110ba55918 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56110ba559b8 <col:20>
| `-OptimizeNoneAttr 0x56110ba55a10 <col:30>
|-CXXMethodDecl 0x56110ba55a60 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56110ba55b00 <col:20>
| `-OptimizeNoneAttr 0x56110ba55b58 <col:30>
|-CXXMethodDecl 0x56110ba55ba0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56110ba55c40 <col:20>
| `-OptimizeNoneAttr 0x56110ba55c98 <col:30>
|-CXXMethodDecl 0x56110ba55d98 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56110ba55cd0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56110ba55e40 <col:20>
| `-OptimizeNoneAttr 0x56110ba55e98 <col:30>
|-CXXMethodDecl 0x56110ba56058 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56110ba55ed0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56110ba55f48 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56110ba56108 <col:20>
| `-OptimizeNoneAttr 0x56110ba56160 <col:30>
|-CXXMethodDecl 0x56110ba56208 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56110ba56328 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56110ba56448 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56110ba564e8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56110ba56510 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56110ba56638 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56110ba566d8 <col:20>
| `-OptimizeNoneAttr 0x56110ba56730 <col:30>
|-CXXMethodDecl 0x56110ba567d8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56110ba56878 <col:20>
| `-OptimizeNoneAttr 0x56110ba568d0 <col:30>
|-AccessSpecDecl 0x56110ba568f8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56110ba56920 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56110ba56a20 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56110ba56a70 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110ba56a00 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56110ba569e0 <col:14> 'int' 48
|-CXXMethodDecl 0x56110ba56ad8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56110ba56b78 <col:20>
| `-OptimizeNoneAttr 0x56110ba56bd0 <col:30>
|-CXXMethodDecl 0x56110ba56c48 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56110ba56ce8 <col:20>
| `-OptimizeNoneAttr 0x56110ba56d40 <col:30>
|-CXXMethodDecl 0x56110ba56e08 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56110ba56d78 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56110ba56fa8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56110ba57148 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56110ba57058 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56110ba571f0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56110ba572f0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56110ba576a0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba572d0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56110ba572b0 <col:9> 'int' 0
| |-EnumConstantDecl 0x56110ba57380 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56110ba576b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba57360 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56110ba57340 <col:14> 'int' 1
| |-EnumConstantDecl 0x56110ba57410 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56110ba576d0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba573f0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56110ba573d0 <col:14> 'int' 2
| |-EnumConstantDecl 0x56110ba574a0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56110ba576e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba57480 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56110ba57460 <col:14> 'int' 3
| |-EnumConstantDecl 0x56110ba57530 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56110ba57700 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba57510 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56110ba574f0 <col:13> 'int' 4
| |-EnumConstantDecl 0x56110ba575c0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56110ba57718 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba575a0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56110ba57580 <col:13> 'int' 5
| `-EnumConstantDecl 0x56110ba57650 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56110ba57730 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110ba57630 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56110ba57610 <col:14> 'int' 6
|-CXXMethodDecl 0x56110ba57798 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56110ba57838 <col:20>
| `-OptimizeNoneAttr 0x56110ba57890 <col:30>
|-CXXMethodDecl 0x56110ba57988 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56110ba578c8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56110ba57a30 <col:20>
| `-OptimizeNoneAttr 0x56110ba57a88 <col:30>
|-CXXMethodDecl 0x56110ba57af8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56110ba57c20 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56110ba57d98 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56110ba57cd0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56110ba57e60 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56110ba57f28 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56110ba58068 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56110ba57fd8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56110ba58110 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56110ba58210 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56110ba58410 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba581f0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56110ba581d0 <col:23> 'int' 0
| |-EnumConstantDecl 0x56110ba582a0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56110ba58428 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba58280 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56110ba58260 <col:45> 'int' 4
| |-EnumConstantDecl 0x56110ba58330 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56110ba58440 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba58310 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56110ba582f0 <col:24> 'int' 0
| `-EnumConstantDecl 0x56110ba583c0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56110ba58458 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110ba583a0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56110ba58380 <col:47> 'int' 16
|-CXXMethodDecl 0x56110ba584b8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56110ba58628 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56110ba58568 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56110ba586d0 <col:20>
| `-OptimizeNoneAttr 0x56110ba58728 <col:30>
|-CXXMethodDecl 0x56110ba58778 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56110ba6c100 <col:18, col:36>
|   `-ReturnStmt 0x56110ba6c0f0 <col:20, col:33>
|     `-ImplicitCastExpr 0x56110ba6c0d8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56110ba6c0b8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56110ba6c088 <col:27> '<bound member function type>' ->xanno 0x56110ba567d8
|           `-CXXThisExpr 0x56110ba6c078 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56110ba58870 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56110ba6c210 <col:30, col:48>
|   `-ReturnStmt 0x56110ba6c200 <col:32, col:45>
|     `-ImplicitCastExpr 0x56110ba6c1e8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56110ba6c1c8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56110ba6c198 <col:39> '<bound member function type>' ->xanno 0x56110ba56638
|           `-CXXThisExpr 0x56110ba6c188 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56110ba58958 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56110ba6c3a8 <col:24, col:50>
|   `-ReturnStmt 0x56110ba6c398 <col:26, col:47>
|     `-UnaryOperator 0x56110ba6c380 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56110ba6c360 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56110ba6c348 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56110ba6c2f8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56110ba61618
|         |   `-CXXMemberCallExpr 0x56110ba6c2d8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56110ba6c2a8 <col:34> '<bound member function type>' ->xanno 0x56110ba567d8
|         |       `-CXXThisExpr 0x56110ba6c298 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56110ba6c328 <col:46> 'int' 0
|-CXXMethodDecl 0x56110ba58a60 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56110ba6c578 <col:36, col:62>
|   `-ReturnStmt 0x56110ba6c568 <col:38, col:59>
|     `-UnaryOperator 0x56110ba6c550 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56110ba6c530 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56110ba6c518 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56110ba6c490 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56110ba61618
|         |   `-CXXMemberCallExpr 0x56110ba6c470 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56110ba6c440 <col:46> '<bound member function type>' ->xanno 0x56110ba56638
|         |       `-CXXThisExpr 0x56110ba6c430 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56110ba6c4c0 <col:58> 'int' 0
|-CXXMethodDecl 0x56110ba58b78 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56110ba6c710 <col:26, col:53>
|   `-ReturnStmt 0x56110ba6c700 <col:28, col:50>
|     `-UnaryOperator 0x56110ba6c6e8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56110ba6c6c8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56110ba6c6b0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56110ba6c660 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56110ba61918
|         |   `-CXXMemberCallExpr 0x56110ba6c640 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56110ba6c610 <col:36> '<bound member function type>' ->xanno 0x56110ba567d8
|         |       `-CXXThisExpr 0x56110ba6c600 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56110ba6c690 <col:49> 'int' 0
|-CXXMethodDecl 0x56110ba58c98 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56110ba6c8e8 <col:38, col:65>
|   `-ReturnStmt 0x56110ba6c8d8 <col:40, col:62>
|     `-UnaryOperator 0x56110ba6c8c0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56110ba6c8a0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56110ba6c888 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56110ba6c7f8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56110ba61918
|         |   `-CXXMemberCallExpr 0x56110ba6c7d8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56110ba6c7a8 <col:48> '<bound member function type>' ->xanno 0x56110ba56638
|         |       `-CXXThisExpr 0x56110ba6c798 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56110ba6c828 <col:61> 'int' 0
|-CXXMethodDecl 0x56110ba58e48 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56110ba58d50 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56110ba6cfb8 <col:34, line:463:5>
|   |-ParenExpr 0x56110ba6ce00 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56110ba6cdd0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba6ca38 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba6ca08 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba6c958 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba6c940 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba6c900 <col:23> 'int' lvalue ParmVar 0x56110ba58d50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba6c920 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba6c9e8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba6c9b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba6c978 <col:33> 'int' lvalue ParmVar 0x56110ba58d50 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56110ba6c9d0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56110ba6c998 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56110ba6ca98 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba6ca78 <col:56> 'int' 0
|   |   `-CallExpr 0x56110ba6cd30 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56110ba6cd18 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba6ccf8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba6cd70 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6cb88 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56110ba6cd88 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6cbb8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba6cda0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba6cbf0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56110ba6cdb8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba6cce0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba6ccc8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba6cc88 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56110ba6cfa8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56110ba6cf90 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56110ba6cf70 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56110ba6cf40 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56110ba6cef0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56110ba61618
|         |   `-CXXMemberCallExpr 0x56110ba6ced0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56110ba6cea0 <col:9> '<bound member function type>' ->xanno 0x56110ba56638
|         |       `-CXXThisExpr 0x56110ba6ce90 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56110ba6cf58 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56110ba6cf20 <col:21> 'int' lvalue ParmVar 0x56110ba58d50 'i' 'int'
|-CXXMethodDecl 0x56110ba59098 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56110ba58f08 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56110ba58f80 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56110ba6d648 <col:40, line:472:5>
|   |-ParenExpr 0x56110ba6d460 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56110ba6d430 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba6d110 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba6d0e0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba6d030 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba6d018 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba6cfd8 <col:23> 'int' lvalue ParmVar 0x56110ba58f08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba6cff8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba6d0c0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba6d090 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba6d050 <col:33> 'int' lvalue ParmVar 0x56110ba58f08 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56110ba6d0a8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56110ba6d070 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56110ba6d170 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba6d150 <col:56> 'int' 0
|   |   `-CallExpr 0x56110ba6d390 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56110ba6d378 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba6d358 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba6d3d0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6d1e0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56110ba6d3e8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6d210 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba6d400 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba6d248 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56110ba6d418 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba6d340 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba6d328 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba6d2e8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56110ba6d628 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56110ba6d5d0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56110ba6d5a0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56110ba6d550 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56110ba61618
|     | |   `-CXXMemberCallExpr 0x56110ba6d530 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56110ba6d500 <col:2> '<bound member function type>' ->xanno 0x56110ba567d8
|     | |       `-CXXThisExpr 0x56110ba6d4f0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56110ba6d5b8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56110ba6d580 <col:14> 'int' lvalue ParmVar 0x56110ba58f08 'i' 'int'
|     `-ImplicitCastExpr 0x56110ba6d610 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56110ba6d5f0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56110ba58f80 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56110ba59258 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56110ba59160 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56110ba6ddc8 <col:36, line:485:5>
|   |-ParenExpr 0x56110ba6db30 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56110ba6db00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba6d7e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba6d7b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba6d6c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba6d6a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba6d668 <col:23> 'int' lvalue ParmVar 0x56110ba59160 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba6d688 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba6d790 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba6d778 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba6d6e0 <col:33> 'int' lvalue ParmVar 0x56110ba59160 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba6d758 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba6d740 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba6d700 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56110ba6d720 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56110ba6d840 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba6d820 <col:60> 'int' 0
|   |   `-CallExpr 0x56110ba6da60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56110ba6da48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba6da28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba6daa0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6d8b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56110ba6dab8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6d8e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba6dad0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba6d920 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56110ba6dae8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba6da10 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba6d9f8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba6d9b8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56110ba6ddb8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56110ba6dda0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56110ba6dd88 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56110ba6dd58 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56110ba6dcf8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56110ba6dcc8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56110ba6dc40 <col:61, col:70> 'char const[48]' lvalue ->c 0x56110ba614f0
|             |   `-CXXMemberCallExpr 0x56110ba6dc20 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56110ba6dbf0 <col:61> '<bound member function type>' ->xanno 0x56110ba56638
|             |       `-CXXThisExpr 0x56110ba6dbe0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56110ba6dce0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56110ba6dc70 <col:74> 'int' lvalue ParmVar 0x56110ba59160 'i' 'int'
|-CXXMethodDecl 0x56110ba594a8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56110ba59318 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56110ba59390 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56110ba6e518 <col:42, line:500:5>
|   |-ParenExpr 0x56110ba6e2b0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56110ba6e280 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba6df60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba6df30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba6de40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba6de28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba6dde8 <col:23> 'int' lvalue ParmVar 0x56110ba59318 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba6de08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba6df10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba6def8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba6de60 <col:33> 'int' lvalue ParmVar 0x56110ba59318 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba6ded8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba6dec0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba6de80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56110ba6dea0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56110ba6dfc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba6dfa0 <col:60> 'int' 0
|   |   `-CallExpr 0x56110ba6e1e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56110ba6e1c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba6e1a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba6e220 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6e030 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56110ba6e238 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6e068 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba6e250 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba6e0a0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56110ba6e268 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba6e190 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba6e178 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba6e138 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56110ba6e4f8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56110ba6e4a8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56110ba6e478 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56110ba6e420 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56110ba6e3f0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56110ba6e3a0 <col:48, col:57> 'char [48]' lvalue ->c 0x56110ba614f0
|     |     |   `-CXXMemberCallExpr 0x56110ba6e380 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56110ba6e350 <col:48> '<bound member function type>' ->xanno 0x56110ba567d8
|     |     |       `-CXXThisExpr 0x56110ba6e340 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56110ba6e408 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56110ba6e3d0 <col:61> 'int' lvalue ParmVar 0x56110ba59318 'i' 'int'
|     `-ImplicitCastExpr 0x56110ba6e4e0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56110ba6e4c0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56110ba59390 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56110ba59668 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56110ba59570 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56110ba6ec78 <col:35, line:513:5>
|   |-ParenExpr 0x56110ba6e988 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56110ba6e958 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba6e6b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba6e680 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba6e590 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba6e578 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba6e538 <col:23> 'int' lvalue ParmVar 0x56110ba59570 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba6e558 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba6e660 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba6e648 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba6e5b0 <col:33> 'int' lvalue ParmVar 0x56110ba59570 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba6e628 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba6e610 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba6e5d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56110ba6e5f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56110ba6e710 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba6e6f0 <col:60> 'int' 0
|   |   `-CallExpr 0x56110ba6e8b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56110ba6e8a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba6e880 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba6e8f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6e780 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56110ba6e910 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6e7b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba6e928 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba6e7f0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56110ba6e940 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba6e868 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba6e850 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba6e810 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56110ba6ec68 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56110ba6ec50 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56110ba6ec38 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56110ba6ec08 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56110ba6eb80 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56110ba6eb50 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56110ba6eb00 <col:60, col:69> 'char const[48]' lvalue ->c 0x56110ba614f0
|             |   `-CXXMemberCallExpr 0x56110ba6eae0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56110ba6eab0 <col:60> '<bound member function type>' ->xanno 0x56110ba56638
|             |       `-CXXThisExpr 0x56110ba6eaa0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56110ba6eb68 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56110ba6eb30 <col:73> 'int' lvalue ParmVar 0x56110ba59570 'i' 'int'
|-CXXMethodDecl 0x56110ba598b8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56110ba59728 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56110ba597a0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56110ba6f398 <col:41, line:528:5>
|   |-ParenExpr 0x56110ba6f120 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56110ba6f0f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba6ee10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba6ede0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba6ecf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba6ecd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba6ec98 <col:23> 'int' lvalue ParmVar 0x56110ba59728 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba6ecb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba6edc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba6eda8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba6ed10 <col:33> 'int' lvalue ParmVar 0x56110ba59728 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba6ed88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba6ed70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba6ed30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56110ba6ed50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56110ba6ee70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba6ee50 <col:60> 'int' 0
|   |   `-CallExpr 0x56110ba6f050 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56110ba6f038 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba6f018 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba6f090 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6eee0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56110ba6f0a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6ef18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba6f0c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba6ef50 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56110ba6f0d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba6f000 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba6efe8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba6efa8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56110ba6f378 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56110ba6f328 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56110ba6f2f8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56110ba6f2a0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56110ba6f260 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56110ba6f210 <col:47, col:56> 'char [48]' lvalue ->c 0x56110ba614f0
|     |     |   `-CXXMemberCallExpr 0x56110ba6f1f0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56110ba6f1c0 <col:47> '<bound member function type>' ->xanno 0x56110ba567d8
|     |     |       `-CXXThisExpr 0x56110ba6f1b0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56110ba6f278 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56110ba6f240 <col:60> 'int' lvalue ParmVar 0x56110ba59728 'i' 'int'
|     `-ImplicitCastExpr 0x56110ba6f360 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56110ba6f340 <col:65> 'int16_t':'short' lvalue ParmVar 0x56110ba597a0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56110ba59a78 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56110ba59980 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56110ba6fa68 <col:36, line:541:5>
|   |-ParenExpr 0x56110ba6f808 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56110ba6f7d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba6f530 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba6f500 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba6f410 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba6f3f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba6f3b8 <col:23> 'int' lvalue ParmVar 0x56110ba59980 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba6f3d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba6f4e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba6f4c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba6f430 <col:33> 'int' lvalue ParmVar 0x56110ba59980 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba6f4a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba6f490 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba6f450 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56110ba6f470 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56110ba6f590 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba6f570 <col:60> 'int' 0
|   |   `-CallExpr 0x56110ba6f738 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56110ba6f720 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba6f700 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba6f778 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6f600 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56110ba6f790 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6f638 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba6f7a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba6f670 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56110ba6f7c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba6f6e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba6f6d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba6f690 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56110ba6fa58 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56110ba6fa40 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56110ba6fa28 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56110ba6f9f8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56110ba6f9a0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56110ba6f970 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56110ba6f920 <col:61, col:70> 'char const[48]' lvalue ->c 0x56110ba614f0
|             |   `-CXXMemberCallExpr 0x56110ba6f900 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56110ba6f8d0 <col:61> '<bound member function type>' ->xanno 0x56110ba56638
|             |       `-CXXThisExpr 0x56110ba6f8c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56110ba6f988 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56110ba6f950 <col:74> 'int' lvalue ParmVar 0x56110ba59980 'i' 'int'
|-CXXMethodDecl 0x56110ba59c48 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56110ba59b38 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56110ba59bb0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56110ba59cf8 <col:20>
| `-OptimizeNoneAttr 0x56110ba59d50 <col:30>
|-CXXMethodDecl 0x56110ba59e88 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56110ba59d90 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56110ba70138 <col:35, line:562:5>
|   |-ParenExpr 0x56110ba6fed8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56110ba6fea8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba6fc00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba6fbd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba6fae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba6fac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba6fa88 <col:23> 'int' lvalue ParmVar 0x56110ba59d90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba6faa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba6fbb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba6fb98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba6fb00 <col:33> 'int' lvalue ParmVar 0x56110ba59d90 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba6fb78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba6fb60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba6fb20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56110ba6fb40 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56110ba6fc60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba6fc40 <col:60> 'int' 0
|   |   `-CallExpr 0x56110ba6fe08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56110ba6fdf0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba6fdd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba6fe48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6fcd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56110ba6fe60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba6fd08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba6fe78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba6fd40 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56110ba6fe90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba6fdb8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba6fda0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba6fd60 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56110ba70128 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56110ba70110 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56110ba700f8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56110ba700c8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56110ba70070 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56110ba70040 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56110ba6fff0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56110ba614f0
|             |   `-CXXMemberCallExpr 0x56110ba6ffd0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56110ba6ffa0 <col:60> '<bound member function type>' ->xanno 0x56110ba56638
|             |       `-CXXThisExpr 0x56110ba6ff90 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56110ba70058 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56110ba70020 <col:73> 'int' lvalue ParmVar 0x56110ba59d90 'i' 'int'
|-CXXMethodDecl 0x56110ba5a098 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56110ba59f48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56110ba59fc0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56110ba70818 <col:41, line:577:5>
|   |-ParenExpr 0x56110ba705a8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56110ba70578 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba702d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba702a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba701b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba70198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba70158 <col:23> 'int' lvalue ParmVar 0x56110ba59f48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba70178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba70280 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba70268 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba701d0 <col:33> 'int' lvalue ParmVar 0x56110ba59f48 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba70248 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba70230 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba701f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56110ba70210 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56110ba70330 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba70310 <col:60> 'int' 0
|   |   `-CallExpr 0x56110ba704d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56110ba704c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba704a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba70518 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba703a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56110ba70530 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba703d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba70548 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba70410 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56110ba70560 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba70488 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba70470 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba70430 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56110ba707f8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56110ba707a8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56110ba70778 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56110ba70718 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56110ba706e8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56110ba70698 <col:47, col:56> 'char [48]' lvalue ->c 0x56110ba614f0
|     |     |   `-CXXMemberCallExpr 0x56110ba70678 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56110ba70648 <col:47> '<bound member function type>' ->xanno 0x56110ba567d8
|     |     |       `-CXXThisExpr 0x56110ba70638 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56110ba70700 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56110ba706c8 <col:60> 'int' lvalue ParmVar 0x56110ba59f48 'i' 'int'
|     `-ImplicitCastExpr 0x56110ba707e0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56110ba707c0 <col:65> 'int32_t':'int' lvalue ParmVar 0x56110ba59fc0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56110ba5a258 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56110ba5a160 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56110ba70f48 <col:36, line:591:5>
|   |-ParenExpr 0x56110ba70c88 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56110ba70c58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba709b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba70980 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba70890 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba70878 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba70838 <col:23> 'int' lvalue ParmVar 0x56110ba5a160 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba70858 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba70960 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba70948 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba708b0 <col:33> 'int' lvalue ParmVar 0x56110ba5a160 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba70928 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba70910 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba708d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56110ba708f0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56110ba70a10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba709f0 <col:60> 'int' 0
|   |   `-CallExpr 0x56110ba70bb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56110ba70ba0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba70b80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba70bf8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba70a80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56110ba70c10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba70ab8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba70c28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba70af0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56110ba70c40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba70b68 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba70b50 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba70b10 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56110ba70f38 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56110ba70f20 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56110ba70f08 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56110ba70ed8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56110ba70e50 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56110ba70e20 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56110ba70dd0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56110ba614f0
|             |   `-CXXMemberCallExpr 0x56110ba70db0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56110ba70d80 <col:61> '<bound member function type>' ->xanno 0x56110ba56638
|             |       `-CXXThisExpr 0x56110ba70d70 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56110ba70e38 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56110ba70e00 <col:74> 'int' lvalue ParmVar 0x56110ba5a160 'i' 'int'
|-CXXMethodDecl 0x56110ba5a4a8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56110ba5a318 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56110ba5a390 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56110ba71628 <col:42, line:606:5>
|   |-ParenExpr 0x56110ba713b8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56110ba71388 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba710e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba710b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba70fc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba70fa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba70f68 <col:23> 'int' lvalue ParmVar 0x56110ba5a318 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba70f88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba71090 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56110ba71078 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba70fe0 <col:33> 'int' lvalue ParmVar 0x56110ba5a318 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba71058 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba71040 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba71000 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56110ba71020 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56110ba71140 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba71120 <col:60> 'int' 0
|   |   `-CallExpr 0x56110ba712e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56110ba712d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba712b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba71328 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba711b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56110ba71340 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba711e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba71358 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba71220 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56110ba71370 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba71298 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba71280 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba71240 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56110ba71608 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56110ba715b8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56110ba71588 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56110ba71528 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56110ba714f8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56110ba714a8 <col:48, col:57> 'char [48]' lvalue ->c 0x56110ba614f0
|     |     |   `-CXXMemberCallExpr 0x56110ba71488 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56110ba71458 <col:48> '<bound member function type>' ->xanno 0x56110ba567d8
|     |     |       `-CXXThisExpr 0x56110ba71448 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56110ba71510 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56110ba714d8 <col:61> 'int' lvalue ParmVar 0x56110ba5a318 'i' 'int'
|     `-ImplicitCastExpr 0x56110ba715f0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56110ba715d0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56110ba5a390 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56110ba5a640 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56110ba5a570 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56110ba71e98 <col:33, line:620:5>
|   |-ParenExpr 0x56110ba71c10 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56110ba71be0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba71830 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba71800 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba716a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba71688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba71648 <col:23> 'int' lvalue ParmVar 0x56110ba5a570 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba71668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba717e0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56110ba717c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba716c0 <col:33> 'int' lvalue ParmVar 0x56110ba5a570 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba717a8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba71790 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba716e0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56110ba71768 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56110ba71750 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56110ba71718 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56110ba71890 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba71870 <col:79> 'int' 0
|   |   `-CallExpr 0x56110ba71b40 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56110ba71b28 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba71b08 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba71b80 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba71978 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56110ba71b98 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba719c0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba71bb0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba719f8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56110ba71bc8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba71af0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba71ad8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba71a98 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56110ba71e88 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56110ba71e70 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56110ba71e58 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56110ba71e28 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56110ba71da0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56110ba71d70 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56110ba71d20 <col:67, col:76> 'char const[48]' lvalue ->c 0x56110ba614f0
|             |   `-CXXMemberCallExpr 0x56110ba71d00 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56110ba71cd0 <col:67> '<bound member function type>' ->xanno 0x56110ba56638
|             |       `-CXXThisExpr 0x56110ba71cc0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56110ba71d88 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56110ba71d50 <col:80> 'int' lvalue ParmVar 0x56110ba5a570 'i' 'int'
|-CXXMethodDecl 0x56110ba5a858 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56110ba5a700 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56110ba5a780 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56110ba726c0 <col:45, line:635:5>
|   |-ParenExpr 0x56110ba72408 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56110ba723d8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56110ba720a0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56110ba72070 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56110ba71f10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56110ba71ef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56110ba71eb8 <col:23> 'int' lvalue ParmVar 0x56110ba5a700 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56110ba71ed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56110ba72050 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56110ba72038 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56110ba71f30 <col:33> 'int' lvalue ParmVar 0x56110ba5a700 'i' 'int'
|   |   |     `-BinaryOperator 0x56110ba72018 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56110ba72000 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56110ba71f50 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56110ba56a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56110ba71fd8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56110ba71fc0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56110ba71f88 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56110ba72100 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56110ba720e0 <col:79> 'int' 0
|   |   `-CallExpr 0x56110ba72338 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56110ba72320 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56110ba72300 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56110b5c30d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56110ba72378 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba72170 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56110ba72390 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56110ba721b8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56110ba723a8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56110ba721f0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56110ba723c0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56110ba722e8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56110ba722d0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56110ba72288 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56110ba726a0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56110ba72608 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56110ba725d8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56110ba72578 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56110ba72548 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56110ba724f8 <col:54, col:63> 'char [48]' lvalue ->c 0x56110ba614f0
|     |     |   `-CXXMemberCallExpr 0x56110ba724d8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56110ba724a8 <col:54> '<bound member function type>' ->xanno 0x56110ba567d8
|     |     |       `-CXXThisExpr 0x56110ba72498 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56110ba72560 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56110ba72528 <col:67> 'int' lvalue ParmVar 0x56110ba5a700 'i' 'int'
|     `-CXXConstCastExpr 0x56110ba72670 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56110ba72658 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56110ba72620 <col:91> 'const void *' lvalue ParmVar 0x56110ba5a780 'x' 'const void *'
|-CXXMethodDecl 0x56110ba5a928 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56110ba72748 <col:34, line:640:5>
|   `-ReturnStmt 0x56110ba72738 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56110ba72720 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56110ba726f0 <col:16> 'Packet *' lvalue ->_data_packet 0x56110ba620a8
|         `-CXXThisExpr 0x56110ba726e0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56110ba5aa68 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56110ba5a9d8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56110ba6b808 <col:46> 'bool' true
|-CXXMethodDecl 0x56110ba5abe8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56110ba5ab20 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56110ba5ac90 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56110ba5b440 <line:660:22> "" ""
| |-EnumConstantDecl 0x56110ba5ad90 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b4b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5ad70 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56110ba5ad50 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56110ba4fef0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56110ba5ae20 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b4c8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5ae00 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56110ba5ade0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56110ba4ff80 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56110ba5aeb0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b4e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5ae90 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56110ba5ae70 <col:21> 'int' 0
| |-EnumConstantDecl 0x56110ba5af40 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b4f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5af20 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56110ba5af00 <col:19> 'int' 16
| |-EnumConstantDecl 0x56110ba5afd0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b510 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5afb0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56110ba5af90 <col:21> 'int' 16
| |-EnumConstantDecl 0x56110ba5b060 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b528 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5b040 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56110ba5b020 <col:19> 'int' 32
| |-EnumConstantDecl 0x56110ba5b0f0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b540 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5b0d0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56110ba5b0b0 <col:19> 'int' EnumConstant 0x56110ba5af40 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56110ba5b180 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b558 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5b160 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56110ba5b140 <col:19> 'int' EnumConstant 0x56110ba5b060 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56110ba5b250 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b570 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5b230 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56110ba5b210 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56110ba5b1d0 <col:23> 'int' EnumConstant 0x56110ba5b180 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56110ba5b1f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x56110ba5b320 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56110ba5b588 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110ba5b300 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56110ba5b2e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56110ba5b2a0 <col:23> 'int' EnumConstant 0x56110ba5b180 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56110ba5b2c0 <col:40> 'int' 4
| `-EnumConstantDecl 0x56110ba5b3f0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56110ba5b5a0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56110ba5b3d0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56110ba5b3b0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56110ba5b370 <col:23> 'int' EnumConstant 0x56110ba5b180 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56110ba5b390 <col:40> 'int' 8
|-CXXMethodDecl 0x56110ba5b5e0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56110ba5b680 <col:68> "" ""
|-CXXMethodDecl 0x56110ba5b718 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56110ba5b7b8 <col:45> "" ""
|-CXXMethodDecl 0x56110ba5b850 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56110ba5b8f0 <col:57> "" ""
|-CXXMethodDecl 0x56110ba5b988 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56110ba5ba28 <col:45> "" ""
|-CXXMethodDecl 0x56110ba5bac0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56110ba5bb60 <col:57> "" ""
|-CXXMethodDecl 0x56110ba5bbf0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56110ba5bc90 <col:51> "" ""
|-CXXMethodDecl 0x56110ba5bd20 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56110ba5bdc0 <col:63> "" ""
|-CXXMethodDecl 0x56110ba5be50 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56110ba5bef0 <col:53> "" ""
|-CXXMethodDecl 0x56110ba5bf80 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56110ba5c020 <col:65> "" ""
|-CXXMethodDecl 0x56110ba5c138 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56110ba5c0a8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56110ba5c1e0 <col:61> "" ""
|-CXXMethodDecl 0x56110ba5c378 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56110ba5c268 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56110ba5c2e0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56110ba5c428 <col:67> "" ""
|-CXXMethodDecl 0x56110ba5c540 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56110ba5c4b0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56110ba5c5e8 <col:63> "" ""
|-CXXMethodDecl 0x56110ba5c780 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56110ba5c670 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56110ba5c6e8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56110ba5c830 <col:69> "" ""
|-CXXMethodDecl 0x56110ba5c948 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56110ba5c8b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56110ba5c9f0 <col:63> "" ""
|-CXXMethodDecl 0x56110ba5f0c8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56110ba5efb8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56110ba5f030 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56110ba5f178 <col:69> "" ""
|-CXXMethodDecl 0x56110ba5f290 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56110ba5f200 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56110ba5f338 <col:62> "" ""
|-CXXMethodDecl 0x56110ba5f4d0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56110ba5f3c0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56110ba5f438 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56110ba5f580 <col:68> "" ""
|-CXXMethodDecl 0x56110ba5f698 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56110ba5f608 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56110ba5f740 <col:63> "" ""
|-CXXMethodDecl 0x56110ba5f8d8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56110ba5f7c8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56110ba5f840 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56110ba5f988 <col:69> "" ""
|-CXXMethodDecl 0x56110ba5fa18 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56110ba5fab8 <col:64> "" ""
|-CXXMethodDecl 0x56110ba5fb48 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56110ba5fbe8 <col:52> "" ""
|-CXXMethodDecl 0x56110ba5fc78 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56110ba5fd18 <col:67> "" ""
|-CXXMethodDecl 0x56110ba5fda8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56110ba5fe48 <col:55> "" ""
|-CXXMethodDecl 0x56110ba5ff60 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56110ba5fed0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56110ba60008 <col:58> "" ""
|-CXXMethodDecl 0x56110ba601a0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56110ba60090 <col:33> col:36 'int'
| |-ParmVarDecl 0x56110ba60108 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56110ba60250 <col:62> "" ""
|-CXXMethodDecl 0x56110ba60368 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56110ba602d8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56110ba60410 <col:58> "" ""
|-CXXMethodDecl 0x56110ba605a8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56110ba60498 <col:33> col:36 'int'
| |-ParmVarDecl 0x56110ba60510 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56110ba60658 <col:62> "" ""
|-CXXMethodDecl 0x56110ba60770 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56110ba606e0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56110ba60818 <col:60> "" ""
|-CXXMethodDecl 0x56110ba609b0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56110ba608a0 <col:34> col:37 'int'
| |-ParmVarDecl 0x56110ba60918 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56110ba60a60 <col:64> "" ""
|-CXXMethodDecl 0x56110ba60b78 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56110ba60ae8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56110ba60c20 <col:58> "" ""
|-CXXMethodDecl 0x56110ba60db8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56110ba60ca8 <col:33> col:36 'int'
| |-ParmVarDecl 0x56110ba60d20 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56110ba60e68 <col:62> "" ""
|-CXXMethodDecl 0x56110ba60f80 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56110ba60ef0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56110ba61028 <col:59> "" ""
|-CXXMethodDecl 0x56110ba611c0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56110ba610b0 <col:33> col:36 'int'
| |-ParmVarDecl 0x56110ba61128 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56110ba61270 <col:63> "" ""
|-AccessSpecDecl 0x56110ba612e0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56110ba61308 prev 0x56110ba56510 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56110ba61400 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56110ba614f0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56110ba61618 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56110ba61798 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56110ba61918 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56110ba61a98 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56110ba728c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56110ba73138 <col:11>
| |-CXXDestructorDecl 0x56110ba729a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56110ba72ad8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56110ba72ad8
| | `-ParmVarDecl 0x56110ba72be8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56110ba72c88 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56110ba72c88
| | `-ParmVarDecl 0x56110ba72d98 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56110ba75b58 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56110ba75c68 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56110ba75ee8 <col:11>
| |   `-ReturnStmt 0x56110ba75ed8 <col:11>
| |     `-UnaryOperator 0x56110ba75ec0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56110ba75eb0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56110ba75cd8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56110ba75cd8
|   `-ParmVarDecl 0x56110ba75de8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56110ba61b00 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56110ba61c18 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56110ba61cb8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56110ba61d20 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56110ba61d88 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56110ba61df0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56110ba61e50 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56110ba61f10 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56110ba61f70 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56110ba61fd0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56110ba727d8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56110ba61cb8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56110ba73148 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56110ba731a0 <col:12>
| |-CXXConstructorDecl 0x56110ba72e08 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56110ba72e08
| | `-ParmVarDecl 0x56110ba72f18 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56110ba72fb8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56110ba72fb8
| | `-ParmVarDecl 0x56110ba730c8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56110ba75240 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56110ba62048 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56110ba620a8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56110ba62110 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56110ba62178 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56110ba621e0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56110ba62248 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56110ba622a8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56110ba62308 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56110ba62370 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56110ba623f8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56110ba62048 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56110ba72770 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56110ba622a8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56110ba731b0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56110ba73210 <col:21, line:755:5>
|-CXXConstructorDecl 0x56110ba62598 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56110ba624d8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56110ba62690 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56110ba62878 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56110ba62780 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56110ba62b48 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56110ba62930 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56110ba629a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56110ba62a20 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110ba62d68 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56110ba62c18 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56110ba62c90 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56110ba6b348 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56110ba62e28 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56110ba62ea0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56110ba62f18 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56110ba6b4a0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56110ba6b410 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56110ba6b5e8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56110ba6b558 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56110ba6b6e0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110b888c30 prev 0x56110b7eea58 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110b888d28 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x56110b888db8 <col:19, col:25> col:19 public
|-TypedefDecl 0x56110b888df0 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x56110b67c330 'uninitialized_type'
|   `-CXXRecord 0x56110b67c298 'uninitialized_type'
|-CXXConstructorDecl 0x56110b888eb0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x56110b88d610 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56110b88d6b8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56110b88d678 <col:10> 'int' 0
| `-CompoundStmt 0x56110b88d700 <col:13, line:22:5>
|-CXXConstructorDecl 0x56110b889000 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x56110b888f70 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x56110b88d610 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56110b88d750 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x56110b88d710 <col:10> 'unsigned int' lvalue ParmVar 0x56110b888f70 'x' 'unsigned int'
| `-CompoundStmt 0x56110b88d798 <col:13, line:27:5>
|-CXXConstructorDecl 0x56110b889158 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x56110b8890c8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x56110b88d610 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56110b88d800 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x56110b88d7e8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x56110b88d7a8 <col:10> 'int' lvalue ParmVar 0x56110b8890c8 'x' 'int'
| `-CompoundStmt 0x56110b88d848 <col:13, line:31:5>
|-CXXConstructorDecl 0x56110b8892b0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x56110b889220 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x56110b88d610 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56110b88d8b0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x56110b88d898 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x56110b88d858 <col:10> 'unsigned long' lvalue ParmVar 0x56110b889220 'x' 'unsigned long'
| `-CompoundStmt 0x56110b88d8f8 <col:13, line:35:5>
|-CXXConstructorDecl 0x56110b889408 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x56110b889378 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x56110b88d610 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56110b88d960 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x56110b88d948 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x56110b88d908 <col:10> 'long' lvalue ParmVar 0x56110b889378 'x' 'long'
| `-CompoundStmt 0x56110b88d9a8 <col:13, line:39:5>
|-CXXConstructorDecl 0x56110b8895c8 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x56110b8894d8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x56110b88d610 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56110b88da28 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x56110b88d9d8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x56110b7bd810
| |     `-DeclRefExpr 0x56110b88d9b8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x56110b8894d8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x56110b88da70 <col:20, line:44:5>
|-CXXConstructorDecl 0x56110b889758 <line:50:5, line:56:5> line:50:14 used IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x56110b889690 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x56110b88dbd8 <col:51, line:56:5>
|   `-BinaryOperator 0x56110b88dbb8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x56110b88da90 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x56110b88d610
|     | `-CXXThisExpr 0x56110b88da80 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x56110b88dba0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56110b88db88 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x56110b88db68 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x56110b88db38 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x56110b88db20 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x56110b88dac0 <col:47> 'const unsigned char *' lvalue ParmVar 0x56110b889690 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x56110b8898a8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x56110b889818 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x56110b889a58 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x56110b889998 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x56110b88dc48 <col:56, line:68:5>
|   `-CStyleCastExpr 0x56110b88dc20 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x56110b88dbf0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x56110b889998 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x56110b889be8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x56110b889b20 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x56110b889cd8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x56110b88ec08 <col:46, line:83:5>
|   `-ReturnStmt 0x56110b88ebf8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x56110b88ebe0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x56110b88ebb0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56110b88ea68 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x56110b88e950 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x56110b88e838 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x56110b88dc70 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x56110b889dc8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x56110b88ecb8 <col:31, line:88:5>
|   `-ReturnStmt 0x56110b88eca8 <line:87:2, col:10>
|     `-UnaryOperator 0x56110b88ec90 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x56110b88ec78 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x56110b88ec60 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x56110b88ec30 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56110b88d610
|             `-CXXThisExpr 0x56110b88ec20 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x56110b889e88 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x56110b88ed38 <col:34, line:93:5>
|   `-ReturnStmt 0x56110b88ed28 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x56110b88ed10 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56110b88ece0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56110b88d610
|         `-CXXThisExpr 0x56110b88ecd0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x56110b889f58 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x56110b88edb8 <col:38, line:101:5>
|   `-ReturnStmt 0x56110b88eda8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x56110b88ed90 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56110b88ed60 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56110b88d610
|         `-CXXThisExpr 0x56110b88ed50 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x56110b88a028 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x56110b88f088 <col:38, line:108:5>
|   `-ReturnStmt 0x56110b88f078 <line:107:2, col:58>
|     `-BinaryOperator 0x56110b88f058 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x56110b88ef70 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x56110b88ef50 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x56110b88ef38 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x56110b88ede0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56110b88d610
|       |   |   `-CXXThisExpr 0x56110b88edd0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x56110b88ef10 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x56110b88eef8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56110b88ee78 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x56110b7cbd48 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x56110b88ee58 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x56110b88f030 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x56110b88f018 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56110b88eff8 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x56110b7cbd48 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x56110b88efd8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x56110b88a0e8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x56110b88f2f8 <col:39, line:112:5>
|   `-ReturnStmt 0x56110b88f2e8 <line:111:2, col:56>
|     `-BinaryOperator 0x56110b88f2c8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x56110b88f1e0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x56110b88f1c0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x56110b88f1a8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x56110b88f0b0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56110b88d610
|       |   |   `-CXXThisExpr 0x56110b88f0a0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x56110b88f180 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x56110b88f168 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56110b88f148 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x56110b7cbd48 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x56110b88f128 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x56110b88f2a0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x56110b88f288 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56110b88f268 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x56110b7cbd48 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x56110b88f248 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x56110b88a218 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x56110b88a320 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x56110b88a430 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x56110b88c508 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56110b88c5c8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56110b88c690 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x56110b88c888 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x56110b88c740 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x56110b88c7b8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x56110b88ca08 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x56110b88c948 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x56110b88cb50 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x56110b88cac0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x56110b88ccf8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x56110b88cc08 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x56110b88ce40 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x56110b88cdb0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x56110b88cf88 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x56110b88cef8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x56110b88d050 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x56110b88d110 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x56110b88d288 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x56110b88d1c0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x56110b88d350 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x56110b88d438 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x56110b88d4e0 <col:51> "" ""
|-TypedefDecl 0x56110b88d580 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x56110b7eeaf0 'IPAddress'
|   `-CXXRecord 0x56110b888c30 'IPAddress'
|-AccessSpecDecl 0x56110b88d5d8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x56110b88d610 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56110b88dcb8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x56110b88dcb8
| `-ParmVarDecl 0x56110b88ddc8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x56110b88de68 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56110b88df78 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x56110b88d610 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56110b88eb58 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x56110b88eb10 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x56110b88d610
| |     `-CXXStaticCastExpr 0x56110b88eae0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x56110b88eab0 <col:7> 'IPAddress' lvalue ParmVar 0x56110b88df78 '' 'IPAddress &&'
| `-CompoundStmt 0x56110b88eba0 <col:7>
`-CXXDestructorDecl 0x56110b88e868 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110b7bd628 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110b7bd748 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x56110b7bd810 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x56110b88e000 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56110b893318 <col:8>
|-CXXConstructorDecl 0x56110b88e108 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x56110b88e108
| `-ParmVarDecl 0x56110b88e218 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x56110b88e2b8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56110b88e3c8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x56110b7bd810 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x56110b893530 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x56110b893500 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x56110b7bd810
| |     `-CXXStaticCastExpr 0x56110b8934d0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x56110b8934a0 <col:8> 'in_addr' lvalue ParmVar 0x56110b88e3c8 '' 'in_addr &&'
| `-CompoundStmt 0x56110b893578 <col:8>
`-CXXDestructorDecl 0x56110b8937b0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110b885ce8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56110b885e08 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x56110b885ef0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x56110b885ed0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x56110b885e98 <col:22> 'int' 4
|-FieldDecl 0x56110b885f98 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x56110b885f78 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x56110b885f40 <col:21> 'int' 4
|-FieldDecl 0x56110b885ff8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x56110b886058 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x56110b8860b8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x56110b886118 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x56110b886178 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x56110b8861d8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x56110b886238 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x56110b8862a8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x56110b886318 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110bb435e0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110bb436f8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56110bb43788 <col:16, col:22> col:16 public
|-EnumDecl 0x56110bb437b0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56110bb438b0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56110bb43b00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb43890 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56110bb43870 <col:21> 'int' 0
| |-EnumConstantDecl 0x56110bb43940 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56110bb43b18 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb43920 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56110bb43900 <col:24> 'int' 22
| |-EnumConstantDecl 0x56110bb439d0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56110bb43b30 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb439b0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56110bb43990 <col:24> 'int' 34
| |-EnumConstantDecl 0x56110bb43a60 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56110bb43b48 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56110bb43a40 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56110bb43a20 <col:25> 'int' 95
| `-EnumConstantDecl 0x56110bb43ab0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56110bb454c0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56110bb458f8 <col:7>
|-CXXConstructorDecl 0x56110bb455c8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56110bb455c8
| `-ParmVarDecl 0x56110bb456d8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56110bb45778 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56110bb45888 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x56110bbac5c0 <col:7>
`-CXXDestructorDecl 0x56110bb47a08 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110bb43b78 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56110bb43cd8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56110bb43d68 <col:32, col:38> col:32 public
|-TypedefDecl 0x56110bb43da0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56110b67c620 'uint32_t' sugar
|   |-Typedef 0x56110b5904c8 'uint32_t'
|   `-TypedefType 0x56110b5695a0 '__uint32_t' sugar
|     |-Typedef 0x56110b569198 '__uint32_t'
|     `-BuiltinType 0x56110b527620 'unsigned int'
|-CXXConstructorDecl 0x56110bb43ee8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56110bb43e10 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56110bb453c8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56110bb45908 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56110bb44c80 'base' 'int'
| | `-ImplicitCastExpr 0x56110bb45468 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56110bb45428 <col:16> 'int' lvalue ParmVar 0x56110bb43e10 'b' 'int'
| `-CompoundStmt 0x56110bb45978 <col:19, line:1046:5>
|-CXXMethodDecl 0x56110bb443e0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56110bb43fb0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56110bb44030 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56110bb440a8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56110bb44128 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56110bb441e8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56110bb44268 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56110bb44838 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56110bb444b0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56110bb44798 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56110bb44558 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x56110bb445f8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x56110bb44670 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56110bb453e8 <col:82> 'const ArgContext' lvalue Var 0x56110bb39498 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56110bb468b8 <col:94, line:1067:5>
| |   |-DeclStmt 0x56110bb45b08 <line:1054:9, col:64>
| |   | `-VarDecl 0x56110bb45998 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x56110bb45ac0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x56110bb45d28 <line:1055:9, col:91>
| |   | `-VarDecl 0x56110bb45b38 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x56110bb45d00 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x56110bb45ce0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x56110bb45c90 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x56110bb45c70 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x56110bb45c18 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x56110bb45bc8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x56110bb45bf8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x56110bb45c58 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x56110bb45c38 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x56110bb45cc0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x56110bb45e88 <line:1056:9, col:27>
| |   | `-VarDecl 0x56110bb45e20 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x56110bb462d0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x56110bb46200 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x56110bb46180 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56110ba46828 0x56110b88fe08 0x56110b88fae0 0x56110b8802b0 0x56110b87ff60 0x56110b87f850 0x56110b8521c0 0x56110b7df470
| |   | | |-CallExpr 0x56110bb460c0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x56110bb45eb0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x56110bb45f60 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56110bb45f30 <col:19, col:23> '<bound member function type>' .begin 0x56110b86f4b8
| |   | | | |   `-DeclRefExpr 0x56110bb45f10 <col:19> 'const String' lvalue ParmVar 0x56110bb44558 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x56110bb45fd0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56110bb45fa0 <col:32, col:36> '<bound member function type>' .end 0x56110b86f6d0
| |   | | | |   `-DeclRefExpr 0x56110bb45f80 <col:32> 'const String' lvalue ParmVar 0x56110bb44558 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x56110bb45ff0 <col:43> 'const bool' lvalue Var 0x56110bb45998 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x56110bb46058 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x56110bb46038 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x56110bb46080 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x56110bb45e20 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x56110bb460a0 <col:73> 'const int' lvalue Var 0x56110bb45b38 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x56110bb46160 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x56110bb46130 <col:16, col:20> '<bound member function type>' .end 0x56110b86f6d0
| |   | |     `-DeclRefExpr 0x56110bb46110 <col:16> 'const String' lvalue ParmVar 0x56110bb44558 'str' 'const String &'
| |   | `-BinaryOperator 0x56110bb462b0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x56110bb46248 <col:13> 'int' lvalue ->status 0x56110bb44ce8
| |   |   | `-CXXThisExpr 0x56110bb46238 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x56110bb46298 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x56110bb46278 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56110bb43940 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x56110bb46520 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x56110bb46408 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x56110bb463f0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x56110bb463d8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x56110bb462f8 <col:13> 'int' lvalue ->status 0x56110bb44ce8
| |   | | |     `-CXXThisExpr 0x56110bb462e8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x56110bb463b8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x56110bb46388 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x56110bb46338 <col:23> 'int' lvalue ->status 0x56110bb44ce8
| |   | |   |   `-CXXThisExpr 0x56110bb46328 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x56110bb463a0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x56110bb46368 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56110bb439d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x56110bb46500 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x56110bb464a0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x56110bb46448 <col:13, col:18> '<bound member function type>' .error 0x56110ba09ca0
| |   |   | | `-DeclRefExpr 0x56110bb46428 <col:13> 'const ArgContext' lvalue ParmVar 0x56110bb44670 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x56110bb464c8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x56110bb46478 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x56110bb464f0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x56110bb464e0 <col:20> 'bool' false
| |   |-DeclStmt 0x56110bb466f8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x56110bb466a0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x56110bb46630 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x56110bb46868 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x56110bb46710 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x56110b813658
| |   | |-DeclRefExpr 0x56110bb46758 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x56110bb45e20 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x56110bb46838 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x56110bb467b0 <col:64> 'V' lvalue ParmVar 0x56110bb445f8 'result' 'V &'
| |   `-ReturnStmt 0x56110bb468a8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x56110bb46898 <col:16> 'bool' true
| `-CXXMethodDecl 0x56110bbb2bd8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56110bbb29b0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x56110bbb2a88 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x56110bbb2af0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x56110bbb4970 <col:94, line:1067:5>
|     |-DeclStmt 0x56110bbb33e8 <line:1054:9, col:64>
|     | `-VarDecl 0x56110bbb3208 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x56110bbb3378 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x56110bbb3348 <col:36, col:55> 'const bool' lvalue Var 0x56110b8035c8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x56110bbb35c8 <line:1055:9, col:91>
|     | `-VarDecl 0x56110bbb3400 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x56110bbb3548 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x56110bbb3530 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x56110bbb3510 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x56110bbb34f0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x56110bbb34d0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x56110bbb3498 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x56110bbb3478 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x56110bb45bf8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x56110bbb34b8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x56110bb45c38 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x56110bb45cc0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x56110bbb3760 <line:1056:9, col:27>
|     | `-VarDecl 0x56110bbb36f8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x56110bbb3be8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x56110bbb3b90 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x56110bbb3a48 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x56110bbb3a18 <col:13> '<bound member function type>' ->parse 0x56110bb443e0
|     | | | | `-CXXThisExpr 0x56110bbb3a08 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x56110bbb38a8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56110bbb3878 <col:19, col:23> '<bound member function type>' .begin 0x56110b86f4b8
|     | | | |   `-DeclRefExpr 0x56110bbb3858 <col:19> 'const String' lvalue ParmVar 0x56110bbb29b0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x56110bbb3918 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56110bbb38e8 <col:32, col:36> '<bound member function type>' .end 0x56110b86f6d0
|     | | | |   `-DeclRefExpr 0x56110bbb38c8 <col:32> 'const String' lvalue ParmVar 0x56110bbb29b0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x56110bbb3ab8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x56110bbb3a98 <col:43> 'const bool' lvalue Var 0x56110bbb3208 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x56110bbb39a0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x56110bbb3988 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x56110bbb3968 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x56110bbb3ad0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x56110bbb39c8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x56110bbb36f8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x56110bbb3b08 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x56110bbb3ae8 <col:73> 'const int' lvalue Var 0x56110bbb3400 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x56110bbb3b70 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x56110bbb3b40 <col:16, col:20> '<bound member function type>' .end 0x56110b86f6d0
|     | |     `-DeclRefExpr 0x56110bbb3b20 <col:16> 'const String' lvalue ParmVar 0x56110bbb29b0 'str' 'const String &'
|     | `-BinaryOperator 0x56110bbb3bc8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x56110bb46248 <col:13> 'int' lvalue ->status 0x56110bb44ce8
|     |   | `-CXXThisExpr 0x56110bb46238 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x56110bbb3bb0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x56110bb46278 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56110bb43940 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x56110bbb3d60 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x56110bbb3c80 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x56110bbb3c68 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x56110bbb3c50 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x56110bb462f8 <col:13> 'int' lvalue ->status 0x56110bb44ce8
|     | | |     `-CXXThisExpr 0x56110bb462e8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x56110bbb3c30 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x56110bbb3c00 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x56110bb46338 <col:23> 'int' lvalue ->status 0x56110bb44ce8
|     | |   |   `-CXXThisExpr 0x56110bb46328 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x56110bbb3c18 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x56110bb46368 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56110bb439d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x56110bbb3d40 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x56110bbb3cf0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x56110bbb3cc0 <col:13, col:18> '<bound member function type>' .error 0x56110ba09ca0
|     |   | | `-DeclRefExpr 0x56110bbb3ca0 <col:13> 'const ArgContext' lvalue ParmVar 0x56110bbb2af0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x56110bbb3d18 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x56110bb46478 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x56110bbb3d30 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x56110bb464e0 <col:20> 'bool' false
|     |-DeclStmt 0x56110bbb42a8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x56110bbb4250 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x56110bbb4200 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x56110bbb41e0 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x56110bbb4170 'type'
|     |       `-ElaboratedType 0x56110bbb4120 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x56110bbb4100 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x56110b803720 'unsigned_type'
|     |           `-BuiltinType 0x56110b527620 'unsigned int'
|     |-CallExpr 0x56110bbb4900 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x56110bbb48e8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56110bbb4868 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x56110bbb4748 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x56110b813658 'extract_integer')
|     | |-ImplicitCastExpr 0x56110bbb4948 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x56110bbb4930 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x56110bbb4308 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x56110bbb36f8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x56110bbb43d8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x56110bbb4388 <col:64> 'int':'int' lvalue ParmVar 0x56110bbb2a88 'result' 'int &'
|     `-ReturnStmt 0x56110bbb4960 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x56110bb46898 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56110bb44bf8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56110bb448a8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56110bb44b58 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56110bb44958 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56110bb449f8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56110bb44a70 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56110bb45408 <col:71> 'const ArgContext' lvalue Var 0x56110bb39498 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56110bb47028 <col:83, line:1083:5>
| |   |-DeclStmt 0x56110bb46980 <line:1071:9, col:12>
| |   | `-VarDecl 0x56110bb46918 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x56110bb47000 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56110bb46c10 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x56110bb46a98 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x56110bb46a60 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x56110bb469a8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x56110bb46a00 <col:31> 'const String' lvalue ParmVar 0x56110bb44958 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56110bb46a20 <col:36> 'V' lvalue Var 0x56110bb46918 'x' 'V'
| |     | |   `-DeclRefExpr 0x56110bb46a40 <col:39> 'const ArgContext' lvalue ParmVar 0x56110bb44a70 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56110bb46bf0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56110bb46bd0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56110bb46bb8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56110bb46ba0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x56110bb46ac0 <col:17> 'int' lvalue ->status 0x56110bb44ce8
| |     |     |     `-CXXThisExpr 0x56110bb46ab0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56110bb46b80 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56110bb46b50 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x56110bb46b00 <col:27> 'int' lvalue ->status 0x56110bb44ce8
| |     |       |   `-CXXThisExpr 0x56110bb46af0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56110bb46b68 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x56110bb46b30 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56110bb439d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56110bb46c40 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x56110bb46c30 <col:20> 'bool' false
| |     `-IfStmt 0x56110bb46fd8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56110bb46ce0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56110bb46cb0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x56110bb46c60 <col:18> 'int' lvalue ->status 0x56110bb44ce8
| |       | |   `-CXXThisExpr 0x56110bb46c50 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56110bb46cc8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x56110bb46c90 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56110bb439d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56110bb46f18 <col:42, line:1079:9>
| |       | |-CallExpr 0x56110bb46ec0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x56110bb46d10 <line:1076:13> '<bound member function type>' ->range_error 0x56110bb452f8
| |       | | | `-CXXThisExpr 0x56110bb46d00 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56110bb46d40 <col:25> 'const ArgContext' lvalue ParmVar 0x56110bb44a70 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x56110bb46e20 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x56110bb46e98 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x56110bb46e78 <col:43> 'V' lvalue Var 0x56110bb46918 'x' 'V'
| |       | `-ReturnStmt 0x56110bb46f08 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x56110bb46ef8 <col:20> 'bool' false
| |       `-CompoundStmt 0x56110bb46fb8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56110bb46f78 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x56110bb46f38 <col:13> 'V' lvalue ParmVar 0x56110bb449f8 'result' 'V &'
| |         | `-DeclRefExpr 0x56110bb46f58 <col:22> 'V' lvalue Var 0x56110bb46918 'x' 'V'
| |         `-ReturnStmt 0x56110bb46fa8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x56110bb46f98 <col:20> 'bool' true
| `-CXXMethodDecl 0x56110bbb2598 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56110bbb2370 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x56110bbb2448 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x56110bbb24b0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x56110bbb31e8 <col:83, line:1083:5>
|     |-DeclStmt 0x56110bbb2820 <line:1071:9, col:12>
|     | `-VarDecl 0x56110bbb27b8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x56110bbb31c0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x56110bbb2e50 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x56110bbb2d78 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x56110bbb2d40 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x56110bbb2cf8 <col:14> '<bound member function type>' ->parse_saturating 0x56110bbb2bd8
|       | |   | `-CXXThisExpr 0x56110bbb2ce8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x56110bbb2890 <col:31> 'const String' lvalue ParmVar 0x56110bbb2370 'str' 'const String &'
|       | |   |-DeclRefExpr 0x56110bbb28b0 <col:36> 'int':'int' lvalue Var 0x56110bbb27b8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x56110bbb28d0 <col:39> 'const ArgContext' lvalue ParmVar 0x56110bbb24b0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x56110bbb2e30 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x56110bbb2e10 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x56110bbb2df8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x56110bbb2de0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x56110bb46ac0 <col:17> 'int' lvalue ->status 0x56110bb44ce8
|       |     |     `-CXXThisExpr 0x56110bb46ab0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x56110bbb2dc0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x56110bbb2d90 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x56110bb46b00 <col:27> 'int' lvalue ->status 0x56110bb44ce8
|       |       |   `-CXXThisExpr 0x56110bb46af0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x56110bbb2da8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x56110bb46b30 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56110bb439d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x56110bbb2e70 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x56110bb46c30 <col:20> 'bool' false
|       `-IfStmt 0x56110bbb3198 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x56110bbb2eb0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x56110bbb2e80 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x56110bb46c60 <col:18> 'int' lvalue ->status 0x56110bb44ce8
|         | |   `-CXXThisExpr 0x56110bb46c50 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x56110bbb2e98 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x56110bb46c90 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56110bb439d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x56110bbb30d0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x56110bbb3040 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x56110bb46d10 <line:1076:13> '<bound member function type>' ->range_error 0x56110bb452f8
|         | | | `-CXXThisExpr 0x56110bb46d00 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x56110bbb2ed0 <col:25> 'const ArgContext' lvalue ParmVar 0x56110bbb24b0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x56110bbb30a8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x56110bbb3078 <col:31, col:50> 'const bool' lvalue Var 0x56110b8035c8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x56110bbb3018 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x56110bbb3000 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x56110bbb2fe8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x56110bbb2fc8 <col:43> 'int':'int' lvalue Var 0x56110bbb27b8 'x' 'int':'int'
|         | `-ReturnStmt 0x56110bbb30c0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x56110bb46ef8 <col:20> 'bool' false
|         `-CompoundStmt 0x56110bbb3178 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x56110bbb3148 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x56110bbb30f0 <col:13> 'int':'int' lvalue ParmVar 0x56110bbb2448 'result' 'int &'
|           | `-ImplicitCastExpr 0x56110bbb3130 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x56110bbb3110 <col:22> 'int':'int' lvalue Var 0x56110bbb27b8 'x' 'int':'int'
|           `-ReturnStmt 0x56110bbb3168 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x56110bb46f98 <col:20> 'bool' true
|-FieldDecl 0x56110bb44c80 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x56110bb44ce8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56110bb44d38 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56110bb44ff0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56110bb44d78 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56110bb44df8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56110bb44e70 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56110bb44ef0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56110bb452f8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56110bb450c0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56110bb45138 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56110bb451d0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x56110bb47888 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x56110bb47888
| `-ParmVarDecl 0x56110bb47998 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x56110bb47b18 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56110bb47c28 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56110bbac5d0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56110bbac5a0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x56110bbac570 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56110bbac540 <col:7> 'IntArg' lvalue ParmVar 0x56110bb47c28 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56110bb44c80 'base' 'int'
| | `-ImplicitCastExpr 0x56110bbac6c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56110bbac698 <col:7> 'int' xvalue .base 0x56110bb44c80
| |     `-CXXStaticCastExpr 0x56110bbac668 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56110bbac638 <col:7> 'IntArg' lvalue ParmVar 0x56110bb47c28 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56110bb44ce8 'status' 'int'
| | `-ImplicitCastExpr 0x56110bbac798 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56110bbac768 <col:7> 'int' xvalue .status 0x56110bb44ce8
| |     `-CXXStaticCastExpr 0x56110bbac738 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56110bbac708 <col:7> 'IntArg' lvalue ParmVar 0x56110bb47c28 '' 'IntArg &&'
| `-CompoundStmt 0x56110bbac7f0 <col:7>
`-CXXDestructorDecl 0x56110bbab730 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56110bb4c150 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56110bb4c3a8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56110bbab658 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56110bbabbd0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x56110bbabbb0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x56110bbabc40 <col:19>
|-CXXConstructorDecl 0x56110bbab838 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x56110bbab838
| `-ParmVarDecl 0x56110bbab948 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x56110bbab9e8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56110bbabaf8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56110bbac800 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56110bbac520 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x56110bbac4f0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x56110bbac4c0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x56110bbabaf8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x56110bbac870 <col:19>
`-CXXDestructorDecl 0x56110bbabc80 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56110bb55528 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56110bb55648 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x56110bb556d8 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x56110bb558d0 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x56110bb55710 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x56110bb55788 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x56110bb55800 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56110bb559a0 <col:79> 'const ArgContext' lvalue Var 0x56110bb39498 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56110bb55b40 <col:91, line:1348:5>
|   `-ReturnStmt 0x56110bb55b30 <line:1347:9, col:41>
|     `-CallExpr 0x56110bb55ae0 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x56110bb55ac8 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56110bb55a80 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x56110bb55470 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x56110bb55a08 <col:26> 'const String' lvalue ParmVar 0x56110bb55710 'str' 'const String &'
|       |-UnaryOperator 0x56110bb55a48 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x56110bb55a28 <col:32> 'String' lvalue ParmVar 0x56110bb55788 'result' 'String &'
|       `-ImplicitCastExpr 0x56110bb55b18 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x56110bb55a60 <col:40> 'int' 0
|-CXXConstructorDecl 0x56110bbc43b8 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x56110bbc4490 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56110bbc45c8 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x56110bbc45c8
| `-ParmVarDecl 0x56110bbc46d8 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x56110bbc4778 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56110bbc4888 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x56110bbc54e0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56110bb55b80 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56110bb55dd8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56110bbc42c8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56110bbc48f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x56110bbc48f8
| `-ParmVarDecl 0x56110bbc4a08 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x56110bbc4aa8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56110bbc4bb8 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x56110bbc54f0 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56110bbc54c0 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x56110bbc5490 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x56110bbc5460 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x56110bbc4bb8 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x56110bbc5560 <col:19>
`-CXXDestructorDecl 0x56110bbc4c58 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56110bbc8ef8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56110bbc92f8 prev 0x56110bbc8ef8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x56110bbc94f0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x56110bbc93f8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x56110bbca438 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x56110bbc9670 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x56110bbca3f8 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x56110bbca3b8 <col:20> 'String *' lvalue ParmVar 0x56110bbc93f8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x56110bbc96d0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x56110bbca498 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x56110bb392c0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x56110bbc95b0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x56110bb13430 Slot::store 'void ()' ]
| `-CompoundStmt 0x56110bbcab58 <col:22, line:857:9>
|   `-CallExpr 0x56110bbcab10 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x56110bbcaaf8 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56110bbcaa78 <col:13> 'void (String &, const String &)' lvalue Function 0x56110bbca958 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x56110b7e8b08 'assign_consume')
|     |-UnaryOperator 0x56110bbca628 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x56110bbca610 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x56110bbca5e0 <col:29> 'String *' lvalue ->_ptr 0x56110bbc9670
|     |     `-CXXThisExpr 0x56110bbca5d0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x56110bbcab40 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x56110bbca650 <col:35> 'String':'String' lvalue ->_slot 0x56110bbc96d0
|         `-CXXThisExpr 0x56110bbca640 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x56110bbc9670 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x56110bbc96d0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x56110bbc9748 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x56110bbc9748
| `-ParmVarDecl 0x56110bbc9858 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x56110bbc98f8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x56110bbc98f8
| `-ParmVarDecl 0x56110bbc9a08 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x56110bbc9aa8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x56110bbc9aa8
| `-ParmVarDecl 0x56110bbc9bb8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x56110bbc9c28 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x56110bbc9c28
| `-ParmVarDecl 0x56110bbc9d38 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x56110bbc9dc0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x56110bb13330 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x56110bbca500 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
