
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bda4aec8 prev 0x5564bda42668 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bda4afc0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5564bda4b050 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5564bda4b0c8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5564bda4b188 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5564bda4b250 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5564bda4b3c8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5564bda4b300 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5564bda4b470 <col:24>
| `-OptimizeNoneAttr 0x5564bda4b4c8 <col:34>
|-CXXMethodDecl 0x5564bda4b510 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5564bda4b7c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5564bda4b5c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5564bda4b638 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5564bda4b6b8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5564bda4b880 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5564bda4b8b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5564bda4b920 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5564bda4b9a8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5564bda4bcc8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5564bda4ba60 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5564bda4bad8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5564bda4bb50 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5564bda4bbd0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5564bda4bde0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5564bda53758 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5564bda53758
| `-ParmVarDecl 0x5564bda53868 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5564bda53908 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5564bda53908
| `-ParmVarDecl 0x5564bda53a18 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5564bdb217d0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bda3dee0 prev 0x5564bda3dc60 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5564bda3dfd8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5564bda3e068 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5564bda3e0c8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5564bda3e1b8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5564bda3e2b8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5564bda3e488 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5564bda3e338 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5564bda3e3b0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5564bda3e618 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5564bda3e550 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5564bda3e6c0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5564bda3e7f8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5564bda3e730 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5564bda3e998 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5564bda3e8d8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5564bda3eb38 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5564bda3ea78 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5564bda3ebe0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5564bda3ece0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5564bda3edc0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda3ecc0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5564bda3eca0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5564bda3ed70 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5564bda3edd8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda3ed50 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5564bda3ed30 <col:44> 'int' 2
|-CXXMethodDecl 0x5564bda3ef20 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5564bda3ee08 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5564bda3ee88 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5564bda3f078 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5564bda3efe8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5564bda3f2b8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5564bda3f138 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5564bda3f1b0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5564bda3f368 <col:20>
| `-OptimizeNoneAttr 0x5564bda3f3c0 <col:30>
|-CXXMethodDecl 0x5564bda3f4c8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5564bda3f400 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5564bda3f570 <col:20>
| `-OptimizeNoneAttr 0x5564bda3f5c8 <col:30>
|-CXXMethodDecl 0x5564bda3f618 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5564bda3f6e0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5564bda3f7f8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5564bda3f880 <line:56:5, col:33> col:23 used PORTS_0_1 'const char []' static
|-VarDecl 0x5564bda3f908 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5564bda3f990 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5564bda3fa18 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5564bda3faa8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5564bda3fb68 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5564bda3fbf0 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x5564bda3fc78 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5564bda3fd00 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5564bda3fd88 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5564bda3fe10 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5564bda3fea0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5564bda3ff60 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5564bda3fff0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5564bda40140 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5564bda400a8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5564bda402d0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5564bda40200 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5564bda40580 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5564bda40388 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5564bda40408 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5564bda40488 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5564bda40638 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5564bda40740 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5564bda409d0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda40720 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5564bda40700 <col:33> 'int' 0
| |-EnumConstantDecl 0x5564bda407d0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5564bda409e8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda407b0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5564bda40790 <col:32> 'int' 20
| |-EnumConstantDecl 0x5564bda40860 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5564bda40a00 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda40840 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5564bda40820 <col:38> 'int' 90
| |-EnumConstantDecl 0x5564bda408f0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5564bda40a18 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda408d0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5564bda408b0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5564bda40980 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5564bda40a30 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda40960 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5564bda40940 <col:32> 'int' 2000
|-CXXMethodDecl 0x5564bda40a70 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5564bda40eb0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5564bda40d20 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5564bda40d98 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda40f80 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5564bda41100 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5564bda41030 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda41308 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5564bda411b8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5564bda41230 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda41408 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5564bda414a8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5564bda41570 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5564bda41600 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5564bda41830 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda415e0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5564bda415c0 <col:36> 'int' EnumConstant 0x5564bda41570 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5564bda41650 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5564bda416a0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5564bda416f0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5564bda41740 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5564bda41790 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5564bda417e0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5564bda41918 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5564bda41858 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5564bda419e0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5564bda41aa0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5564bda41b60 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5564bda41c20 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5564bda41d38 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5564bda41e00 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5564bda41f80 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5564bda41eb0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5564bda420a8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5564bda422a8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5564bda42158 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5564bda421d8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5564bda4fbf8 <col:54, line:127:5>
|   |-ParenExpr 0x5564bda4faa8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5564bda4fa78 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda4f768 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5564bda4f740 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5564bda4f728 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5564bda4f710 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5564bda4f6e0 <col:31> 'Router *' lvalue ->_router 0x5564bda4d5c0
|   |   |         `-CXXThisExpr 0x5564bda4f6d0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5564bda4f7c8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda4f7a8 <col:48> 'int' 0
|   |   `-CallExpr 0x5564bda4f9d8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5564bda4f9c0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda4f9a0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda4fa18 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda4f838 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5564bda4fa30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda4f858 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5564bda4fa48 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda4f890 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5564bda4fa60 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda4f988 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda4f970 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda4f928 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5564bda4fb40 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5564bda4fad8 <col:9> 'Router *' lvalue ->_router 0x5564bda4d5c0
|   | | `-CXXThisExpr 0x5564bda4fac8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5564bda4fb28 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5564bda4fb08 <col:19> 'Router *' lvalue ParmVar 0x5564bda42158 'r' 'Router *'
|   `-BinaryOperator 0x5564bda4fbd8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5564bda4fb70 <col:9> 'int' lvalue ->_eindex 0x5564bda4d628
|     | `-CXXThisExpr 0x5564bda4fb60 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5564bda4fbc0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5564bda4fba0 <col:19> 'int' lvalue ParmVar 0x5564bda421d8 'eindex' 'int'
|-CXXMethodDecl 0x5564bda42430 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5564bda42368 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5564bda42500 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5564bda425c8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5564bda42668 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5564bda428b8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5564bda42730 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5564bda427b0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5564bda42968 <col:20>
| `-OptimizeNoneAttr 0x5564bda429c0 <col:30>
|-CXXMethodDecl 0x5564bda42ac8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5564bda42a00 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5564bda42b70 <col:20>
| `-OptimizeNoneAttr 0x5564bda42bc8 <col:30>
|-CXXMethodDecl 0x5564bda42c98 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5564bda42c08 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5564bda42d40 <col:20>
| `-OptimizeNoneAttr 0x5564bda42d98 <col:30>
|-CXXMethodDecl 0x5564bda42f28 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5564bda42dd0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5564bda42e50 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5564bda430b8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5564bda42ff0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5564bda43208 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5564bda43178 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5564bda43358 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5564bda432c8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5564bda434a8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5564bda43418 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5564bda43768 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5564bda43560 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5564bda435e0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5564bda43688 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5564bda43840 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5564bda43900 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5564bda43bd0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5564bda43a80 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5564bda43af8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda43cf8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5564bda43ed0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5564bda43db0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5564bda43e30 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5564bda440b8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5564bda43f98 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5564bda44018 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5564bda44428 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5564bda44178 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5564bda441f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5564bda44270 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5564bda4f1e0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5564bda4f1c0 <col:106> 'int' 0
| `-ParmVarDecl 0x5564bda442e8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5564bda4f218 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5564bda4f1f8 <col:126> 'int' 0
|-CXXMethodDecl 0x5564bda447c8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5564bda444f8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5564bda44590 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5564bda44610 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5564bda44688 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5564bda4f250 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5564bda4f230 <col:114> 'int' 0
|-CXXMethodDecl 0x5564bda44b58 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5564bda448a0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5564bda44918 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5564bda44998 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5564bda4f268 <col:96> 'int' 0
| `-ParmVarDecl 0x5564bda44a10 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5564bda4f2a8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5564bda4f288 <col:116> 'int' 0
|-CXXMethodDecl 0x5564bda44ed8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5564bda44c28 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5564bda44ca0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5564bda44d20 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5564bda4f2e0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5564bda4f2c0 <col:109> 'int' 0
| `-ParmVarDecl 0x5564bda44d98 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5564bda4f318 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5564bda4f2f8 <col:129> 'int' 0
|-CXXMethodDecl 0x5564bda45258 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5564bda44fa8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5564bda45020 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5564bda450a0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5564bda45118 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5564bda4f350 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5564bda4f330 <col:117> 'int' 0
|-CXXMethodDecl 0x5564bda455e8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5564bda45330 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda453a8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5564bda45428 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5564bda4f368 <col:99> 'int' 0
| `-ParmVarDecl 0x5564bda454a0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5564bda4f3a8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5564bda4f388 <col:119> 'int' 0
|-CXXMethodDecl 0x5564bda45a08 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5564bda456b8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5564bda45738 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5564bda457b0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5564bda45830 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5564bda4f3e0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5564bda4f3c0 <col:108> 'int' 0
| `-ParmVarDecl 0x5564bda458b0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5564bda4f418 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5564bda4f3f8 <col:141> 'int' 0
|-CXXMethodDecl 0x5564bda45e28 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5564bda45ae0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5564bda45b60 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5564bda45bd8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5564bda45c58 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5564bda45cd8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5564bda4f430 <col:121> 'int' 0
|-CXXMethodDecl 0x5564bda46258 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5564bda45f08 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5564bda45f88 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5564bda46000 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5564bda46080 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5564bda4f450 <col:98> 'int' 0
| `-ParmVarDecl 0x5564bda46100 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5564bda4f470 <col:123> 'int' 0
|-CXXMethodDecl 0x5564bda46520 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5564bda46330 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5564bda463b0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5564bda46430 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5564bda4f490 <col:80> 'int' 0
|-EnumDecl 0x5564bda465d8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5564bda466e0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5564bda46970 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda466c0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5564bda466a0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5564bda46770 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5564bda46988 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda46750 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5564bda46730 <col:40> 'int' 2
| |-EnumConstantDecl 0x5564bda46800 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5564bda469a0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda467e0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5564bda467c0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5564bda46890 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5564bda469b8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda46870 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5564bda46850 <col:36> 'int' 7
| `-EnumConstantDecl 0x5564bda46920 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5564bda469d0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda46900 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5564bda468e0 <col:34> 'int' 6
|-CXXMethodDecl 0x5564bda46c88 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5564bda469f8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5564bda46a98 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5564bda46b18 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5564bda46b90 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5564bda4f548 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5564bda4f530 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5564bda4f518 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5564bda4f4f8 <col:98, col:105> 'String' (CXXTemporary 0x5564bda4f4f8)
|           `-CXXTemporaryObjectExpr 0x5564bda4f4c0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5564bda46f28 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5564bda46d58 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5564bda46dd0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5564bda46e48 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5564bda4f5f8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5564bda4f5e0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5564bda4f5c8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5564bda4f5a8 <col:94, col:101> 'String' (CXXTemporary 0x5564bda4f5a8)
| |         `-CXXTemporaryObjectExpr 0x5564bda4f570 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5564bda4fde0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5564bda4fd58 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5564bda4fd28 <col:9> '<bound member function type>' ->add_task_handlers 0x5564bda46c88
|     | `-CXXThisExpr 0x5564bda4fd18 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5564bda4fd98 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5564bda4fc98 <col:27> 'Task *' lvalue ParmVar 0x5564bda46d58 'task' 'Task *'
|     |-ImplicitCastExpr 0x5564bda4fdb0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5564bda4fcb8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5564bda46dd0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5564bda4fdc8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5564bda4fcd8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5564bda46920 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5564bda4fcf8 <col:62> 'const String' lvalue ParmVar 0x5564bda46e48 'prefix' 'const String &'
|-CXXMethodDecl 0x5564bda47138 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5564bda46ff0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5564bda47068 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5564bda4f6a8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5564bda4f690 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5564bda4f678 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5564bda4f658 <col:70, col:77> 'String' (CXXTemporary 0x5564bda4f658)
| |         `-CXXTemporaryObjectExpr 0x5564bda4f620 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5564bda4ffb8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5564bda4ff30 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5564bda4ff00 <col:9> '<bound member function type>' ->add_task_handlers 0x5564bda46c88
|     | `-CXXThisExpr 0x5564bda4fef0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5564bda4ff70 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5564bda4fe70 <col:27> 'Task *' lvalue ParmVar 0x5564bda46ff0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5564bda4ff88 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5564bda4fe90 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5564bda4ffa0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5564bda4feb0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5564bda46920 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5564bda4fed0 <col:57> 'const String' lvalue ParmVar 0x5564bda47068 'prefix' 'const String &'
|-CXXMethodDecl 0x5564bda47418 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5564bda47200 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda47280 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda472f8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5564bda476c8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5564bda474e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda47568 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda475e8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5564bda479b8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5564bda47798 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda47818 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda47890 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5564bda47c68 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5564bda47a88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda47b08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda47b88 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5564bda47f18 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5564bda47d38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda47db8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda47e38 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5564bda481c8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5564bda47fe8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda48068 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda480e0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5564bda48478 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5564bda48298 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda48318 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda48398 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5564bda48788 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5564bda485a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda48620 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda486a0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5564bda48a68 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5564bda48858 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda488d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda48980 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5564bda48d48 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5564bda48b38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda48bb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda48c60 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5564bda48fb0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5564bda48e18 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5564bda48e98 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5564bda48f10 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5564bda49258 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5564bda49080 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5564bda49100 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5564bda49178 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5564bda49508 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5564bda49328 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda493a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda49428 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5564bda497b8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5564bda495d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda49658 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda496d0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5564bda49a68 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5564bda49888 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda49908 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda49980 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5564bda49d38 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5564bda49b38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda49bb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5564bda49c58 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5564bda4a068 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5564bda49e08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5564bda49e88 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5564bda49f00 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5564bda49f78 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5564bda4f6c0 <col:93> 'bool' false
|-CXXMethodDecl 0x5564bda4a250 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5564bda4a138 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5564bda4a1b8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5564bda4a428 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5564bda4a310 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5564bda4a390 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5564bda4a708 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5564bda4a4e8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5564bda4a560 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5564bda4a5e0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5564bda4a658 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda4a9f8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5564bda4a7d8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5564bda4a850 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5564bda4a8d0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5564bda4a948 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda4ac30 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5564bda4aad0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5564bda4ab50 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5564bda4ae18 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5564bda4acf8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5564bda4ad78 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5564bda4aec8 prev 0x5564bda42668 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5564bda4afc0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5564bda4b050 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5564bda4b0c8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5564bda4b188 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5564bda4b250 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5564bda4b3c8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5564bda4b300 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5564bda4b470 <col:24>
| | `-OptimizeNoneAttr 0x5564bda4b4c8 <col:34>
| |-CXXMethodDecl 0x5564bda4b510 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5564bda4b7c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5564bda4b5c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5564bda4b638 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5564bda4b6b8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5564bda4b880 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5564bda4b8b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5564bda4b920 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5564bda4b9a8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5564bda4bcc8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5564bda4ba60 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5564bda4bad8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5564bda4bb50 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5564bda4bbd0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5564bda4bde0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5564bda53758 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5564bda53758
| | `-ParmVarDecl 0x5564bda53868 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5564bda53908 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5564bda53908
| | `-ParmVarDecl 0x5564bda53a18 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5564bdb217d0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5564bda4be58 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5564bda4bef8 <col:38> "" ""
|-CXXMethodDecl 0x5564bda4bf88 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5564bda4c028 <col:44> "" ""
|-AccessSpecDecl 0x5564bda4c098 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5564bda4c0c0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5564bda4c1c0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5564bda4c210 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda4c1a0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5564bda4c180 <col:27> 'int' 4
|-FieldDecl 0x5564bda4c2c8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5564bda4c478 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5564bda4c530 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5564bda4d5c0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5564bda4d628 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5564bda4d778 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5564bda4d6b8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5564bda4d928 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5564bda4d838 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5564bda4db08 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5564bda4d9e8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5564bda4da68 <col:25> col:28 'int'
|-CXXMethodDecl 0x5564bda4ddb0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5564bda4dbd0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5564bda4dc50 <col:28> col:31 'int'
| `-ParmVarDecl 0x5564bda4dcc8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5564bda4de68 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5564bda4df30 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5564bda4df80 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5564bda4dfd0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5564bda4e1b0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5564bda4e060 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5564bda4e0d8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda4e458 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5564bda4e278 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5564bda4e2f8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5564bda4e370 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda4e678 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5564bda4e528 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5564bda4e5a8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5564bda4e9b0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5564bda4e738 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5564bda4e7b8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5564bda4e830 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5564bda4e8b0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5564bda4eb98 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5564bda4ea80 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5564bda4eb00 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5564bda4ece8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5564bda4ec58 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5564bda4f068 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5564bda4eda8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5564bda4ee28 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5564bda4eea0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5564bda4ef20 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5564bda4f180 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class RIPSend
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class IPAddress _src
       108 |     uint32_t _addr
       112 |   class IPAddress _dst
       112 |     uint32_t _addr
       116 |   class IPAddress _what
       116 |     uint32_t _addr
       120 |   class IPAddress _mask
       120 |     uint32_t _addr
       124 |   int _metric
       128 |   class Timer _timer
       128 |     int _schedpos1
       136 |     class Timestamp _expiry_s
       136 |       union Timestamp::rep_t _t
       136 |         int64_t x
       144 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       144 |       TimerCallback callback
       152 |     void * _thunk
       160 |     class Element * _owner
       168 |     class RouterThread * _thread
           | [sizeof=176, dsize=176, align=8,
           |  nvsize=176, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd83dea0 prev 0x5564bd7a3ee8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bd83df98 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5564bd83e028 <col:19, col:25> col:19 public
|-TypedefDecl 0x5564bd83e060 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5564bd6317c0 'uninitialized_type'
|   `-CXXRecord 0x5564bd631728 'uninitialized_type'
|-CXXConstructorDecl 0x5564bd83e120 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5564bd842880 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5564bd842928 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5564bd8428e8 <col:10> 'int' 0
| `-CompoundStmt 0x5564bd842970 <col:13, line:22:5>
|-CXXConstructorDecl 0x5564bd83e270 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5564bd83e1e0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5564bd842880 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5564bd8429c0 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5564bd842980 <col:10> 'unsigned int' lvalue ParmVar 0x5564bd83e1e0 'x' 'unsigned int'
| `-CompoundStmt 0x5564bd842a08 <col:13, line:27:5>
|-CXXConstructorDecl 0x5564bd83e3c8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5564bd83e338 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5564bd842880 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5564bd842a70 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5564bd842a58 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5564bd842a18 <col:10> 'int' lvalue ParmVar 0x5564bd83e338 'x' 'int'
| `-CompoundStmt 0x5564bd842ab8 <col:13, line:31:5>
|-CXXConstructorDecl 0x5564bd83e520 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5564bd83e490 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5564bd842880 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5564bd842b20 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5564bd842b08 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5564bd842ac8 <col:10> 'unsigned long' lvalue ParmVar 0x5564bd83e490 'x' 'unsigned long'
| `-CompoundStmt 0x5564bd842b68 <col:13, line:35:5>
|-CXXConstructorDecl 0x5564bd83e678 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5564bd83e5e8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5564bd842880 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5564bd842bd0 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5564bd842bb8 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5564bd842b78 <col:10> 'long' lvalue ParmVar 0x5564bd83e5e8 'x' 'long'
| `-CompoundStmt 0x5564bd842c18 <col:13, line:39:5>
|-CXXConstructorDecl 0x5564bd83e838 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5564bd83e748 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5564bd842880 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5564bd842c98 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5564bd842c48 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5564bd772ca0
| |     `-DeclRefExpr 0x5564bd842c28 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5564bd83e748 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5564bd842ce0 <col:20, line:44:5>
|-CXXConstructorDecl 0x5564bd83e9c8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5564bd83e900 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5564bd842e48 <col:51, line:56:5>
|   `-BinaryOperator 0x5564bd842e28 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5564bd842d00 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5564bd842880
|     | `-CXXThisExpr 0x5564bd842cf0 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5564bd842e10 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5564bd842df8 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5564bd842dd8 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5564bd842da8 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5564bd842d90 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5564bd842d30 <col:47> 'const unsigned char *' lvalue ParmVar 0x5564bd83e900 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5564bd83eb18 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5564bd83ea88 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5564bd83ecc8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5564bd83ec08 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5564bd842eb8 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5564bd842e90 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5564bd842e60 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5564bd83ec08 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5564bd83ee58 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5564bd83ed90 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5564bd83ef48 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5564bd843e78 <col:46, line:83:5>
|   `-ReturnStmt 0x5564bd843e68 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5564bd843e50 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5564bd843e20 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5564bd843cd8 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5564bd843bc0 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5564bd843aa8 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5564bd842ee0 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5564bd83f038 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5564bd843f28 <col:31, line:88:5>
|   `-ReturnStmt 0x5564bd843f18 <line:87:2, col:10>
|     `-UnaryOperator 0x5564bd843f00 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5564bd843ee8 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5564bd843ed0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5564bd843ea0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5564bd842880
|             `-CXXThisExpr 0x5564bd843e90 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5564bd83f0f8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5564bd843fa8 <col:34, line:93:5>
|   `-ReturnStmt 0x5564bd843f98 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5564bd843f80 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5564bd843f50 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5564bd842880
|         `-CXXThisExpr 0x5564bd843f40 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5564bd83f1c8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5564bd844028 <col:38, line:101:5>
|   `-ReturnStmt 0x5564bd844018 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5564bd844000 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5564bd843fd0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5564bd842880
|         `-CXXThisExpr 0x5564bd843fc0 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5564bd83f298 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5564bd8442f8 <col:38, line:108:5>
|   `-ReturnStmt 0x5564bd8442e8 <line:107:2, col:58>
|     `-BinaryOperator 0x5564bd8442c8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5564bd8441e0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5564bd8441c0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5564bd8441a8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5564bd844050 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5564bd842880
|       |   |   `-CXXThisExpr 0x5564bd844040 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5564bd844180 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5564bd844168 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5564bd8440e8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5564bd7811d8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5564bd8440c8 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5564bd8442a0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5564bd844288 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5564bd844268 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5564bd7811d8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5564bd844248 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5564bd83f358 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5564bd844568 <col:39, line:112:5>
|   `-ReturnStmt 0x5564bd844558 <line:111:2, col:56>
|     `-BinaryOperator 0x5564bd844538 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5564bd844450 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5564bd844430 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5564bd844418 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5564bd844320 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5564bd842880
|       |   |   `-CXXThisExpr 0x5564bd844310 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5564bd8443f0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5564bd8443d8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5564bd8443b8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5564bd7811d8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5564bd844398 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5564bd844510 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5564bd8444f8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5564bd8444d8 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5564bd7811d8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5564bd8444b8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5564bd83f488 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5564bd83f590 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5564bd83f6a0 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5564bd841778 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5564bd841838 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bd841900 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5564bd841af8 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5564bd8419b0 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5564bd841a28 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5564bd841c78 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5564bd841bb8 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5564bd841dc0 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5564bd841d30 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5564bd841f68 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5564bd841e78 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5564bd8420b0 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5564bd842020 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5564bd8421f8 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5564bd842168 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5564bd8422c0 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5564bd842380 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5564bd8424f8 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5564bd842430 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5564bd8425c0 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5564bd8426a8 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5564bd842750 <col:51> "" ""
|-TypedefDecl 0x5564bd8427f0 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5564bd7a3f80 'IPAddress'
|   `-CXXRecord 0x5564bd83dea0 'IPAddress'
|-AccessSpecDecl 0x5564bd842848 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5564bd842880 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5564bd842f28 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x5564bd842f28
| `-ParmVarDecl 0x5564bd843038 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x5564bd8430d8 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd8431e8 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5564bd842880 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5564bd843dc8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5564bd843d80 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5564bd842880
| |     `-CXXStaticCastExpr 0x5564bd843d50 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5564bd843d20 <col:7> 'IPAddress' lvalue ParmVar 0x5564bd8431e8 '' 'IPAddress &&'
| `-CompoundStmt 0x5564bd843e10 <col:7>
`-CXXDestructorDecl 0x5564bd843ad8 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd9d6810 prev 0x5564bd9cd650 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bd9d6908 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5564bd9d69a8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5564bd9dd770 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5564bd9ddb58 <col:11>
|-CXXConstructorDecl 0x5564bd9dd850 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd9dd938 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5564bd9de2a0 <col:11>
|-CXXConstructorDecl 0x5564bd9dd9d8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd9ddae8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5564bd9dfaf8 <col:11>
|-CXXDestructorDecl 0x5564bd9dee08 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5564bd6e59b8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd6e5ac8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5564bd6e6390 <col:11>
|   `-ReturnStmt 0x5564bd6e6380 <col:11>
|     `-UnaryOperator 0x5564bd6e6368 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bd6e6358 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5564bd6e5b38 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5564bd6e5c48 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5564bda73e30 <col:11>
    `-ReturnStmt 0x5564bda73e20 <col:11>
      `-UnaryOperator 0x5564bda73e08 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5564bda73df8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd9cc808 prev 0x5564bd9cc518 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bd9cc900 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5564bd9cc990 <col:19, col:25> col:19 public
|-TypedefDecl 0x5564bd9cc9c8 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5564bd631b90 'int32_t' sugar
|   |-Typedef 0x5564bd545328 'int32_t'
|   `-TypedefType 0x5564bd51e510 '__int32_t' sugar
|     |-Typedef 0x5564bd51e128 '__int32_t'
|     `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bd9cca30 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5564bd631d50 'int64_t' sugar
|   |-Typedef 0x5564bd545390 'int64_t'
|   `-TypedefType 0x5564bd51e630 '__int64_t' sugar
|     |-Typedef 0x5564bd51e208 '__int64_t'
|     `-BuiltinType 0x5564bd4dc5a0 'long'
|-EnumDecl 0x5564bd9cca88 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5564bd9ccc00 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5564bd9ccbe0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5564bd9ccbb8 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5564bd9ccba0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5564bd9ccb70 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5564bd9cccf8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5564bd9cccd8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5564bd9cccb0 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5564bd9ccc98 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5564bd9ccc70 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5564bd9ccc50 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5564bd9ccd48 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5564bd9cce50 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5564bd9cd3a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9cce30 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5564bd9cce10 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5564bd9ccee0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5564bd9cd3b8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9ccec0 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5564bd9ccea0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5564bd9ccf70 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5564bd9cd3d0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9ccf50 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5564bd9ccf30 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5564bd9cd000 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5564bd9cd3e8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9ccfe0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5564bd9ccfc0 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5564bd9cd090 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5564bd9cd400 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9cd070 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5564bd9cd050 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5564bd9cd120 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5564bd9cd418 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9cd100 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5564bd9cd0e0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5564bd9cd1b0 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5564bd9cd430 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9cd190 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5564bd9cd170 <col:26> 'int' EnumConstant 0x5564bd9cce50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5564bd9cd280 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5564bd9cd448 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9cd260 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5564bd9cd240 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5564bd9cd200 <col:27> 'int' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5564bd9cd220 <col:44> 'int' EnumConstant 0x5564bd9cd120 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5564bd9cd350 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5564bd9cd460 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bd9cd330 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5564bd9cd310 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5564bd9cd2d0 <col:27> 'int' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5564bd9cd2f0 <col:44> 'int' EnumConstant 0x5564bd9cd000 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5564bd9cd478 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5564bd9cd580 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5564bd9cd5d0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bd9cd560 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5564bd9cd540 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5564bd9cd5f8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5564bd6317c0 'uninitialized_type'
|   `-CXXRecord 0x5564bd631728 'uninitialized_type'
|-CXXRecordDecl 0x5564bd9cd650 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5564bd9cd760 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5564bd9d7958 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5564bd9ddb68 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5564bd9ddc88 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5564bd9ddc40 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5564bd9ddbd0 <col:9> '<bound member function type>' ->assign 0x5564bd9d23a8
|     | `-CXXThisExpr 0x5564bd9ddbc0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5564bd9ddc00 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5564bd9ddc70 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5564bd9ddc20 <col:19> 'int' 0
|-CXXConstructorDecl 0x5564bd9cd9a8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9cd820 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5564bd9cd898 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5564bd9d94a0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5564bd9d9480 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5564bd9d7958 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5564bd9ddca0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5564bd9dddf0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5564bd9ddd78 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5564bd9ddd08 <col:9> '<bound member function type>' ->assign 0x5564bd9d23a8
|     | `-CXXThisExpr 0x5564bd9ddcf8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5564bd9dddc0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5564bd9ddda8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5564bd9ddd38 <col:16> 'long' lvalue ParmVar 0x5564bd9cd820 'sec' 'long'
|     `-ImplicitCastExpr 0x5564bd9dddd8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5564bd9ddd58 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9cd898 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5564bd9cdc08 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9cda78 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5564bd9cdaf0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5564bd9d94d8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5564bd9d94b8 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5564bd9d7958 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5564bd9dde08 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5564bd9ddf40 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5564bd9ddee0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5564bd9dde70 <col:9> '<bound member function type>' ->assign 0x5564bd9d23a8
|     | `-CXXThisExpr 0x5564bd9dde60 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5564bd9ddf10 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5564bd9ddea0 <col:16> 'int' lvalue ParmVar 0x5564bd9cda78 'sec' 'int'
|     `-ImplicitCastExpr 0x5564bd9ddf28 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5564bd9ddec0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9cdaf0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5564bd9cde68 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9cdcd8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5564bd9cdd50 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5564bd9d9510 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5564bd9d94f0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5564bd9d7958 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5564bd9ddf58 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5564bd9de0a8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5564bd9de030 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5564bd9ddfc0 <col:9> '<bound member function type>' ->assign 0x5564bd9d23a8
|     | `-CXXThisExpr 0x5564bd9ddfb0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5564bd9de078 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5564bd9de060 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5564bd9ddff0 <col:16> 'unsigned long' lvalue ParmVar 0x5564bd9cdcd8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5564bd9de090 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5564bd9de010 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9cdd50 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5564bd9cf000 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9cdf38 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5564bd9cdfb0 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5564bd9d9548 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5564bd9d9528 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5564bd9d7958 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5564bd9de0c0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5564bd9de210 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5564bd9de198 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5564bd9de128 <col:9> '<bound member function type>' ->assign 0x5564bd9d23a8
|     | `-CXXThisExpr 0x5564bd9de118 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5564bd9de1e0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5564bd9de1c8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5564bd9de158 <col:16> 'unsigned int' lvalue ParmVar 0x5564bd9cdf38 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5564bd9de1f8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5564bd9de178 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9cdfb0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5564bd9cf160 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5564bd9cf0d0 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5564bd9cf2f8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5564bd9cf238 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5564bd9cf528 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5564bd9cf430 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5564bd9cf6d8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5564bd9cf618 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5564bd9d7958 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5564bd9de2b0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5564bd9de228 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5564bd9cf618 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5564bd9de310 <col:19, line:214:5>
|-CXXConstructorDecl 0x5564bd9cf8a8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5564bd9cf7e8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5564bd9d7958 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5564bd9de320 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5564bd9de3d0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5564bd9de3a8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5564bd9de378 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5564bd9cf7e8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5564bd9cfa98 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5564bd9cfa10 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5564bd9cc5b0 'Timestamp'
|   | `-CXXRecord 0x5564bd9cc808 'Timestamp'
|   `-ParenType 0x5564bd9cf9b0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5564bd9cf980 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5564bd9ccb50 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5564bd9cc9c8 'seconds_type'
|         `-TypedefType 0x5564bd631b90 'int32_t' sugar
|           |-Typedef 0x5564bd545328 'int32_t'
|           `-TypedefType 0x5564bd51e510 '__int32_t' sugar
|             |-Typedef 0x5564bd51e128 '__int32_t'
|             `-BuiltinType 0x5564bd4dc580 'int'
|-CXXConversionDecl 0x5564bd9cfbd8 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5564bd9cfca8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5564bd9de4d8 <col:37, line:231:5>
|   `-ReturnStmt 0x5564bd9de4c8 <line:227:9, col:23>
|     `-BinaryOperator 0x5564bd9de4a8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5564bd9de478 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5564bd9de428 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5564bd9d69a8
|       |   `-MemberExpr 0x5564bd9de3f8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5564bd9d7958
|       |     `-CXXThisExpr 0x5564bd9de3e8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5564bd9de490 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5564bd9de458 <col:23> 'int' 0
|-CXXMethodDecl 0x5564bd9cfd68 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5564bd9cfe28 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bd9cfee8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bd9cffa8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bd9d0068 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bd9d01d8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5564bd9d0118 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5564bd9d0320 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5564bd9d0290 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd9d03e8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5564bd9d0488 <col:54> "" ""
|-CXXMethodDecl 0x5564bd9d0518 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5564bd9d05b8 <col:54> "" ""
|-CXXMethodDecl 0x5564bd9d0648 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5564bd9d06e8 <col:54> "" ""
|-CXXMethodDecl 0x5564bd9d07e8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5564bd9d08b8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5564bd9d09e8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5564bd9d0ae0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5564bd9d0c18 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5564bd9de6f0 <col:39, line:271:5>
|   `-ReturnStmt 0x5564bd9de6e0 <line:267:9, col:61>
|     `-CallExpr 0x5564bd9de680 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5564bd9de668 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5564bd9de4f0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5564bd9d7c88 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5564bd9de6b0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5564bd9de550 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5564bd9d69a8
|       |   `-MemberExpr 0x5564bd9de520 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5564bd9d7958
|       |     `-CXXThisExpr 0x5564bd9de510 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5564bd9de6c8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5564bd9de5f0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5564bd9de5c0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5564bd9de580 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5564bd9de5d8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5564bd9de5a0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd120 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5564bd9d0cd8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5564bd9de8b0 <col:39, line:279:5>
|   `-ReturnStmt 0x5564bd9de8a0 <line:275:9, col:61>
|     `-CallExpr 0x5564bd9de840 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5564bd9de828 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5564bd9de708 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5564bd9d7c88 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5564bd9de870 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5564bd9de768 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5564bd9d69a8
|       |   `-MemberExpr 0x5564bd9de738 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5564bd9d7958
|       |     `-CXXThisExpr 0x5564bd9de728 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5564bd9de888 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5564bd9de808 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5564bd9de7d8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5564bd9de798 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5564bd9de7f0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5564bd9de7b8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd000 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5564bd9d0d98 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5564bd9dea48 <col:39, line:287:5>
|   `-ReturnStmt 0x5564bd9dea38 <line:283:9, col:53>
|     `-BinaryOperator 0x5564bd9dea18 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5564bd9de9e8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5564bd9de908 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5564bd9d69a8
|       |   `-MemberExpr 0x5564bd9de8d8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5564bd9d7958
|       |     `-CXXThisExpr 0x5564bd9de8c8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5564bd9dea00 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5564bd9de9c8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5564bd9de9a8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5564bd9de978 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5564bd9de938 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cce50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5564bd9de990 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5564bd9de958 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5564bd9d0e88 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5564bd9dfce0 <col:40, line:293:5>
|   |-DeclStmt 0x5564bd9deb90 <line:291:9, col:48>
|   | `-VarDecl 0x5564bd9dea70 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5564bd9deb70 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5564bd9deb18 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5564bd9deae8 <col:22> '<bound member function type>' ->subsec 0x5564bd9cfe28
|   |     |   `-CXXThisExpr 0x5564bd9dead8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5564bd9deb58 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5564bd9deb38 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd280 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5564bd9dfcd0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5564bd9dfcb8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5564bd9dfc88 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5564bd9dfc70 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5564bd9dfc50 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5564bd9dfc20 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5564bd9df9b8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5564bd9df9a0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5564bd9deba8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5564bd9dea70 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5564bd9dfbc0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5564bd9dfba8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5564bd9dfb78 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5564bd9df9d0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5564bd9df940 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5564bd9df928 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5564bd9df8d8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5564bd9cc758 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5564bd9df878 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5564bd9debd8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5564bd9debc8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5564bd9df8c0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5564bd9df8a8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5564bd9df098 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5564bd9dec00 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5564bd9dec90 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5564bd9dec60 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5564bd9dec20 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd280 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5564bd9dec78 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5564bd9dec40 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5564bd9dea70 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5564bd9dfbf0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5564bd9df988 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5564bd9df978 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5564bd9d0f48 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5564bd9e0238 <col:40, line:302:5>
|   |-DeclStmt 0x5564bd9dfe30 <line:297:9, col:48>
|   | `-VarDecl 0x5564bd9dfd10 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5564bd9dfe10 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5564bd9dfdb8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5564bd9dfd88 <col:22> '<bound member function type>' ->subsec 0x5564bd9cfe28
|   |     |   `-CXXThisExpr 0x5564bd9dfd78 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5564bd9dfdf8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5564bd9dfdd8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd350 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5564bd9e0228 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5564bd9e0210 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5564bd9e01e0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5564bd9e01c8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5564bd9e01a8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5564bd9e0178 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5564bd9e00a0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5564bd9e0088 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5564bd9dfe48 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5564bd9dfd10 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5564bd9e0118 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5564bd9e0100 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5564bd9e00d0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5564bd9e00b8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5564bd9e0028 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5564bd9e0010 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5564bd9dfff0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5564bd9cc758 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5564bd9dff90 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5564bd9dfe78 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5564bd9dfe68 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5564bd9dffd8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5564bd9dffc0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5564bd9dff50 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5564bd9dfea0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5564bd9dff30 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5564bd9dff00 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5564bd9dfec0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd350 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5564bd9dff18 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5564bd9dfee0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5564bd9dfd10 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5564bd9e0148 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5564bd9e0070 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5564bd9e0060 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5564bd9d1008 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5564bd9e02c0 <col:40, line:306:5>
|   `-ReturnStmt 0x5564bd9e02b0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5564bd9e0280 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5564bd9e0268 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bd9e0258 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5564bd9d11a8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5564bd9d10b8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5564bd9d1378 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5564bd9d1280 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5564bd9d1468 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5564bd9d15d8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5564bd9d1518 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5564bd9e0408 <col:56, line:320:5>
|   `-ReturnStmt 0x5564bd9e03f8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5564bd9e03e0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5564bd9e03b0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5564bd9e0398 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5564bd9e0358 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5564bd9e0328 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5564bd9e02e8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5564bd9d1518 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5564bd9e0340 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5564bd9e0308 <col:31> 'int' 0
|-CXXMethodDecl 0x5564bd9d1818 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d1690 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5564bd9d1708 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9e05d8 <col:72, line:326:5>
|   `-ReturnStmt 0x5564bd9e05c8 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5564bd9e05b0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5564bd9e0580 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5564bd9e0568 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5564bd9e0528 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5564bd9e0510 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5564bd9e0430 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5564bd9d1690 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5564bd9e04d0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5564bd9e04b8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5564bd9e0450 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5564bd9d6100 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5564bd9e04f8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5564bd9e0470 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d1708 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd9d19c8 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5564bd9d18d8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5564bd9e0ca0 <col:56, line:337:5>
|   |-DeclStmt 0x5564bd9e08d8 <line:329:9, col:51>
|   | `-VarDecl 0x5564bd9e0600 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5564bd9e08c0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5564bd9e0890 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5564bd9e0878 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5564bd9e0860 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5564bd9e0830 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5564bd9e0818 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5564bd9e0800 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5564bd9e06f0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5564bd9e0a90 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5564bd9e0940 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5564bd9d69a8
|   | | `-MemberExpr 0x5564bd9e0910 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5564bd9d7958
|   | |   `-DeclRefExpr 0x5564bd9e08f0 <col:9> 'Timestamp' lvalue Var 0x5564bd9e0600 't' 'Timestamp'
|   | `-BinaryOperator 0x5564bd9e0a70 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5564bd9e0a40 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5564bd9e0970 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5564bd9d18d8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5564bd9e0a58 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5564bd9e0a20 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5564bd9e0a00 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5564bd9e09d0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5564bd9e0990 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5564bd9e09e8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5564bd9e09b0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd120 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5564bd9e0c88 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5564bd9e0c58 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5564bd9e0c40 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5564bd9e0c20 <col:16> 'Timestamp' lvalue Var 0x5564bd9e0600 't' 'Timestamp'
|-CXXMethodDecl 0x5564bd9d1b90 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d1a80 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5564bd9d1af8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9e0e58 <col:72, line:343:5>
|   `-ReturnStmt 0x5564bd9e0e48 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5564bd9e0e30 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5564bd9e0e00 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5564bd9e0de8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5564bd9e0da8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5564bd9e0d90 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5564bd9e0cd8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5564bd9d1a80 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5564bd9e0d50 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5564bd9e0d38 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5564bd9e0cf8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5564bd9d6248 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5564bd9e0d78 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5564bd9e0d18 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d1af8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd9d1ce0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5564bd9d1c50 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5564bd9e12a0 <col:56, line:354:5>
|   |-DeclStmt 0x5564bd9e1048 <line:346:9, col:51>
|   | `-VarDecl 0x5564bd9e0e80 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5564bd9e1030 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5564bd9e1000 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5564bd9e0fe8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5564bd9e0fd0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5564bd9e0fa0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5564bd9e0f88 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5564bd9e0f70 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5564bd9e0f40 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5564bd9e1200 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5564bd9e10b0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5564bd9d69a8
|   | | `-MemberExpr 0x5564bd9e1080 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5564bd9d7958
|   | |   `-DeclRefExpr 0x5564bd9e1060 <col:9> 'Timestamp' lvalue Var 0x5564bd9e0e80 't' 'Timestamp'
|   | `-BinaryOperator 0x5564bd9e11e0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5564bd9e11b0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5564bd9e10e0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5564bd9d1c50 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5564bd9e11c8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5564bd9e1190 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5564bd9e1170 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5564bd9e1140 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5564bd9e1100 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5564bd9e1158 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5564bd9e1120 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd000 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5564bd9e1288 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5564bd9e1258 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5564bd9e1240 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5564bd9e1220 <col:16> 'Timestamp' lvalue Var 0x5564bd9e0e80 't' 'Timestamp'
|-CXXMethodDecl 0x5564bd9d1ea8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d1d98 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5564bd9d1e10 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9e1458 <col:72, line:360:5>
|   `-ReturnStmt 0x5564bd9e1448 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5564bd9e1430 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5564bd9e1400 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5564bd9e13e8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5564bd9e13a8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5564bd9e1390 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5564bd9e12d8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5564bd9d1d98 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5564bd9e1350 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5564bd9e1338 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5564bd9e12f8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5564bd9d6390 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5564bd9e1378 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5564bd9e1318 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d1e10 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd9d1ff8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5564bd9d1f68 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5564bd9eddc8 <col:56, line:371:5>
|   |-DeclStmt 0x5564bd9e1648 <line:363:9, col:51>
|   | `-VarDecl 0x5564bd9e1480 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5564bd9e1630 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5564bd9e1600 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5564bd9e15e8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5564bd9e15d0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5564bd9e15a0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5564bd9e1588 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5564bd9e1570 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5564bd9e1540 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5564bd9edd28 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5564bd9e16b0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5564bd9d69a8
|   | | `-MemberExpr 0x5564bd9e1680 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5564bd9d7958
|   | |   `-DeclRefExpr 0x5564bd9e1660 <col:9> 'Timestamp' lvalue Var 0x5564bd9e1480 't' 'Timestamp'
|   | `-CallExpr 0x5564bd9edcc8 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5564bd9edcb0 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5564bd9e16e0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5564bd9d7c88 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5564bd9edcf8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5564bd9e1700 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5564bd9d1f68 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5564bd9edd10 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5564bd9edc90 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5564bd9edc60 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5564bd9e1720 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cce50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5564bd9edc78 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5564bd9e1740 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5564bd9eddb0 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5564bd9edd80 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5564bd9edd68 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5564bd9edd48 <col:16> 'Timestamp' lvalue Var 0x5564bd9e1480 't' 'Timestamp'
|-CXXMethodDecl 0x5564bd9d20e8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5564bd9edf08 <col:39, line:377:5>
|   `-ReturnStmt 0x5564bd9edef8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5564bd9edee0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5564bd9edeb0 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5564bd9ede98 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5564bd9ede58 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5564bd9ede00 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5564bd9ede40 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5564bd9ede20 <col:29> 'int' 1
|-CXXMethodDecl 0x5564bd9d21a8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5564bd9edfe8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5564bd9edfa0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5564bd9edf30 <col:9> '<bound member function type>' ->assign 0x5564bd9d23a8
|     | `-CXXThisExpr 0x5564bd9edf20 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5564bd9edf60 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5564bd9edfd0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5564bd9edf80 <col:19> 'int' 0
|-CXXMethodDecl 0x5564bd9d23a8 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9d2258 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5564bd9d22d0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5564bd9d9580 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5564bd9d9560 <col:60> 'int' 0
| `-CompoundStmt 0x5564bd9ee1e0 <col:63, line:395:5>
|   `-BinaryOperator 0x5564bd9ee1c0 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5564bd9ee040 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5564bd9d69a8
|     | `-MemberExpr 0x5564bd9ee010 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5564bd9d7958
|     |   `-CXXThisExpr 0x5564bd9ee000 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5564bd9ee1a0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5564bd9ee130 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5564bd9ee0d0 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5564bd9ee0b8 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5564bd9ee0a0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5564bd9ee070 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5564bd9d2258 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5564bd9ee118 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5564bd9ee0f8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5564bd9ee188 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5564bd9ee170 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5564bd9ee150 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d22d0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd9d2578 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9d2468 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5564bd9d24e0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9ee338 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5564bd9ee2f0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5564bd9ee208 <col:9> '<bound member function type>' ->assign 0x5564bd9d23a8
|     | `-CXXThisExpr 0x5564bd9ee1f8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5564bd9ee320 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5564bd9ee238 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5564bd9d2468 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5564bd9ee2b0 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5564bd9ee298 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5564bd9ee258 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5564bd9d6248 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5564bd9ee2d8 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5564bd9ee278 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d24e0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd9d2748 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9d2638 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5564bd9d26b0 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9ee490 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5564bd9ee448 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5564bd9ee360 <col:9> '<bound member function type>' ->assign 0x5564bd9d23a8
|     | `-CXXThisExpr 0x5564bd9ee350 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5564bd9ee478 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5564bd9ee390 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5564bd9d2638 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5564bd9ee408 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5564bd9ee3f0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5564bd9ee3b0 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5564bd9d6390 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5564bd9ee430 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5564bd9ee3d0 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d26b0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd9d2918 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9d2808 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5564bd9d2880 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5564bd9d95b8 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5564bd9d9598 <col:57> 'int' 0
| `-DeprecatedAttr 0x5564bd9d29c8 <col:75> "" ""
|-CXXMethodDecl 0x5564bd9d2b58 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9d2a48 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5564bd9d2ac0 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bd9d2c08 <col:74> "" ""
|-CXXMethodDecl 0x5564bd9d2d98 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5564bd9d2c88 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5564bd9d2d00 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bd9d2e48 <col:74> "" ""
|-CXXMethodDecl 0x5564bd9d2ed8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5564bd9d2f78 <col:42> "" ""
|-CXXMethodDecl 0x5564bd9d57b0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5564bd9d5690 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5564bd9d5710 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5564bd9d5880 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5564bd9d5940 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5564bd9d59e0 <col:20>
| `-OptimizeNoneAttr 0x5564bd9d5a38 <col:30>
|-CXXMethodDecl 0x5564bd9d5a80 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5564bd9d5b40 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5564bd9d5c00 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5564bd9d5cc0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5564bd9d5d80 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5564bd9d5e40 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5564bd9d5f00 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5564bd9d5fc0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5564bd9d6100 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d6070 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9ee5d8 <col:58, line:512:5>
|   `-ReturnStmt 0x5564bd9ee5c8 <line:511:9, col:53>
|     `-BinaryOperator 0x5564bd9ee5a8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5564bd9ee578 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5564bd9ee4a8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d6070 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5564bd9ee590 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5564bd9ee558 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5564bd9ee538 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5564bd9ee508 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5564bd9ee4c8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5564bd9ee520 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5564bd9ee4e8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd120 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5564bd9d6248 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d61b8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9ee720 <col:58, line:516:5>
|   `-ReturnStmt 0x5564bd9ee710 <line:515:9, col:53>
|     `-BinaryOperator 0x5564bd9ee6f0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5564bd9ee6c0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5564bd9ee5f0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d61b8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5564bd9ee6d8 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5564bd9ee6a0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5564bd9ee680 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5564bd9ee650 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5564bd9ee610 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5564bd9ee668 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5564bd9ee630 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd000 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5564bd9d6390 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d6300 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9ee868 <col:58, line:520:5>
|   `-ReturnStmt 0x5564bd9ee858 <line:519:9, col:53>
|     `-BinaryOperator 0x5564bd9ee838 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5564bd9ee808 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5564bd9ee738 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d6300 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5564bd9ee820 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5564bd9ee7e8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5564bd9ee7c8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5564bd9ee798 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5564bd9ee758 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cce50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5564bd9ee7b0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5564bd9ee778 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5564bd9d64d8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d6448 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9ee9b0 <col:60, line:524:5>
|   `-ReturnStmt 0x5564bd9ee9a0 <line:523:9, col:55>
|     `-BinaryOperator 0x5564bd9ee980 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5564bd9ee950 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5564bd9ee880 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d6448 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5564bd9ee968 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5564bd9ee930 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5564bd9ee910 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5564bd9ee8e0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5564bd9ee8a0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5564bd9ee8f8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5564bd9ee8c0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd120 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5564bd9d6620 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d6590 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9eeaf8 <col:60, line:528:5>
|   `-ReturnStmt 0x5564bd9eeae8 <line:527:9, col:55>
|     `-BinaryOperator 0x5564bd9eeac8 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5564bd9eea98 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5564bd9ee9c8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d6590 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5564bd9eeab0 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5564bd9eea78 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5564bd9eea58 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5564bd9eea28 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5564bd9ee9e8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5564bd9eea40 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5564bd9eea08 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd000 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5564bd9d6768 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d66d8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9eec40 <col:60, line:532:5>
|   `-ReturnStmt 0x5564bd9eec30 <line:531:9, col:55>
|     `-BinaryOperator 0x5564bd9eec10 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5564bd9eebe0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5564bd9eeb10 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d66d8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5564bd9eebf8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5564bd9eebc0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5564bd9eeba0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5564bd9eeb70 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5564bd9eeb30 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cce50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5564bd9eeb88 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5564bd9eeb50 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5564bd9cd1b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5564bd9d6810 prev 0x5564bd9cd650 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5564bd9d6908 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5564bd9d69a8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5564bd9dd770 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5564bd9ddb58 <col:11>
| |-CXXConstructorDecl 0x5564bd9dd850 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5564bd9dd938 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5564bd9de2a0 <col:11>
| |-CXXConstructorDecl 0x5564bd9dd9d8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5564bd9ddae8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5564bd9dfaf8 <col:11>
| |-CXXDestructorDecl 0x5564bd9dee08 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5564bd6e59b8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5564bd6e5ac8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5564bd6e6390 <col:11>
| |   `-ReturnStmt 0x5564bd6e6380 <col:11>
| |     `-UnaryOperator 0x5564bd6e6368 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5564bd6e6358 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5564bd6e5b38 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5564bd6e5c48 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5564bda73e30 <col:11>
|     `-ReturnStmt 0x5564bda73e20 <col:11>
|       `-UnaryOperator 0x5564bda73e08 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bda73df8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5564bd9d6a10 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5564bd9d6b10 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5564bd9d6d10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9d6af0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5564bd9d6ad0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5564bd9d6ba0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5564bd9d6d28 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9d6b80 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5564bd9d6b60 <col:23> 'int' 1
| |-EnumConstantDecl 0x5564bd9d6c30 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5564bd9d6d40 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bd9d6c10 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5564bd9d6bf0 <col:23> 'int' 2
| `-EnumConstantDecl 0x5564bd9d6cc0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5564bd9d6d58 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bd9d6ca0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5564bd9d6c80 <col:27> 'int' 3
|-CXXMethodDecl 0x5564bd9d6d98 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5564bd9d6e60 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5564bd9d7068 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5564bd9d6f10 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5564bd9d6f90 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5564bd9d95d0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5564bd9d7278 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5564bd9d7128 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5564bd9d71a0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5564bd9d7348 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5564bd9d7408 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5564bd9d7578 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5564bd9d74b8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5564bd9d7640 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5564bd9d7700 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5564bd9d77c0 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5564bd9d7880 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5564bd9d7920 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5564bd9d7958 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5564bd9d79c8 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5564bd9eec58 <col:27, line:684:5>
|-CXXMethodDecl 0x5564bd9d7a88 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5564bd9eec68 <col:27, line:696:5>
|-CXXMethodDecl 0x5564bd9d7c88 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d7b38 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5564bd9d7bb0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9eedf0 <col:66, line:700:5>
|   `-ReturnStmt 0x5564bd9eede0 <line:699:9, col:31>
|     `-CallExpr 0x5564bd9eed80 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5564bd9eed68 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5564bd9eed18 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5564bd85a038 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5564bd9eedb0 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5564bd9eecd8 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5564bd9d7b38 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5564bd9eedc8 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5564bd9eecf8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d7bb0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd9d7ff8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5564bd9d7d48 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5564bd9d7dc0 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5564bd9d7e38 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5564bd9d7eb0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bd9ef140 <col:64, line:707:5>
|   |-DeclStmt 0x5564bd9eee80 <line:704:9, col:24>
|   | `-VarDecl 0x5564bd9eee18 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5564bd9ef090 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5564bd9eee98 <col:9> 'int32_t':'int' lvalue ParmVar 0x5564bd9d7dc0 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5564bd9ef078 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5564bd9ef010 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5564bd9eeff8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bd9eef78 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5564bd85f308 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5564bd9ef048 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5564bd9eef18 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5564bd9d7e38 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5564bd9ef060 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5564bd9eef38 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bd9d7eb0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5564bd9eef58 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5564bd9eee18 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5564bd9ef120 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5564bd9ef0b0 <col:9> 'int32_t':'int' lvalue ParmVar 0x5564bd9d7d48 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5564bd9ef108 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5564bd9ef0f0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5564bd9ef0d0 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5564bd9eee18 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5564bd9d8298 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5564bd9d80c8 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5564bd9d8140 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5564bd9d81b8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5564bd9d8538 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5564bd9d8360 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5564bd9d83d8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5564bd9d8450 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5564bd9d86c8 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5564bd9d8600 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5564bd9d88c8 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5564bd9d8780 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5564bd9d87f8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5564bd9d8b98 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5564bd9d8ad8 parent 0x5564bd4dc488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5564bd9d8988 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5564bd9d8a00 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5564bd9d8db8 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5564bd9d8cf8 parent 0x5564bd4dc488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5564bd9d8be8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5564bd9d8c60 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5564bd9d8f80 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5564bd9d8ec8 parent 0x5564bd4dc488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5564bd9d8e08 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5564bd9d9208 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5564bd9d9148 parent 0x5564bd4dc488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5564bd9d8ff8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5564bd9d9070 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5564bd9d9428 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5564bd9d9368 parent 0x5564bd4dc488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5564bd9d9258 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5564bd9d92d0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5564bd9decb0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd9ded98 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5564bd9d7958 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5564bd9df808 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5564bd9df7c0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5564bd9d7958
| |     `-DeclRefExpr 0x5564bd9df7a0 <col:7> 'const Timestamp' lvalue ParmVar 0x5564bd9ded98 '' 'const Timestamp &'
| `-CompoundStmt 0x5564bd9df868 <col:7>
|-CXXConstructorDecl 0x5564bd9def18 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd9df028 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5564bd9d7958 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5564bd9dfb08 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5564bd9dfab0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5564bd9d7958
| |     `-CXXStaticCastExpr 0x5564bd9dfa80 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5564bd9dfa50 <col:7> 'Timestamp' lvalue ParmVar 0x5564bd9df028 '' 'Timestamp &&'
| `-CompoundStmt 0x5564bd9dfb68 <col:7>
|-CXXDestructorDecl 0x5564bd9df0d8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5564bd6e5808 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd6e5918 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5564bd6e6408 <col:7>
|   |-CXXMemberCallExpr 0x5564bd6e63a8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5564bd6e62e8 <col:7> '<bound member function type>' .operator= 0x5564bd6e59b8
|   | | `-MemberExpr 0x5564bd6e61f8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5564bd9d7958
|   | |   `-CXXThisExpr 0x5564bd6e61e8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5564bd6e62b8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5564bd9d7958
|   |   `-DeclRefExpr 0x5564bd6e6298 <col:7> 'const Timestamp' lvalue ParmVar 0x5564bd6e5918 '' 'const Timestamp &'
|   `-ReturnStmt 0x5564bd6e63f8 <col:7>
|     `-UnaryOperator 0x5564bd6e63e0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bd6e63d0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5564bd6e5cb8 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5564bd6e5dc8 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5564bda73ea8 <col:7>
    |-CXXMemberCallExpr 0x5564bda73e48 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5564bda73db0 <col:7> '<bound member function type>' .operator= 0x5564bd6e5b38
    | | `-MemberExpr 0x5564bda73c80 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5564bd9d7958
    | |   `-CXXThisExpr 0x5564bda73c70 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5564bda73d80 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5564bd9d7958
    |   `-CXXStaticCastExpr 0x5564bda73d50 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5564bda73d20 <col:7> 'Timestamp' lvalue ParmVar 0x5564bd6e5dc8 '' 'Timestamp &&'
    `-ReturnStmt 0x5564bda73e98 <col:7>
      `-UnaryOperator 0x5564bda73e80 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5564bda73e70 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bda70e88 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5564bda70fb8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5564bda71aa8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bda5b6b8 prev 0x5564bda3db00 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5564bda5b7b0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5564bda5b840 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5564bda5b8a0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5564bda5b948 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5564bda5ba68 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x5564bdb211a0 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x5564bdb211a0
| |-CXXConstructorDecl 0x5564bdb21280 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x5564bdb21280
| | `-ParmVarDecl 0x5564bdb21368 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x5564bdb21408 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x5564bdb21408
|   `-ParmVarDecl 0x5564bdb21518 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x5564bda5bc08 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5564bda5bb48 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5564bda5be58 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5564bda5bcc8 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5564bda5bd48 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5564bda5bfe8 <line:43:5, col:27> col:5 used Timer 'void (Element *)'
| `-ParmVarDecl 0x5564bda5bf20 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5564bda5c168 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5564bda5c0a8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5564bda5c318 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5564bda5c258 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5564bda5c410 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5564bda71c80 <col:21, line:58:5>
|   `-IfStmt 0x5564bda71c68 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5564bda71bd0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5564bda71ba0 <col:6> '<bound member function type>' ->scheduled 0x5564bda5cc68
|     |   `-ImplicitCastExpr 0x5564bda71bf0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5564bda71b90 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5564bda71c48 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5564bda71c18 <col:6> '<bound member function type>' ->unschedule 0x5564bda70330
|         `-CXXThisExpr 0x5564bda71c08 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5564bda5c510 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5564bda71e20 <col:26, line:65:5>
|   |-BinaryOperator 0x5564bda71d40 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5564bda71cd8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5564bda70fb8
|   | | `-MemberExpr 0x5564bda71ca8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5564bda71078
|   | |   `-CXXThisExpr 0x5564bda71c98 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5564bda71d28 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5564bda71d08 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5564bda714d8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5564bda71e00 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5564bda71d70 <col:2> 'void *' lvalue ->_thunk 0x5564bda710f8
|     | `-CXXThisExpr 0x5564bda71d60 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5564bda71dd8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5564bda71da0 <col:20> 'int' 1
|-CXXMethodDecl 0x5564bda5c650 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5564bda5c5c0 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5564bda71f80 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5564bda71e70 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5564bda71e40 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5564bda5c5c0 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5564bda71f60 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5564bda71f30 <col:2> '<bound member function type>' ->assign 0x5564bda5c510
|       `-CXXThisExpr 0x5564bda71f20 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5564bda5c820 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5564bda5c708 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5564bda5c788 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5564bda72100 <col:58, line:79:5>
|   |-BinaryOperator 0x5564bda72048 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5564bda71fe0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5564bda70fb8
|   | | `-MemberExpr 0x5564bda71fb0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5564bda71078
|   | |   `-CXXThisExpr 0x5564bda71fa0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5564bda72030 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5564bda72010 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5564bda5c708 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5564bda720e0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5564bda72078 <col:2> 'void *' lvalue ->_thunk 0x5564bda710f8
|     | `-CXXThisExpr 0x5564bda72068 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5564bda720c8 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5564bda720a8 <col:11> 'void *' lvalue ParmVar 0x5564bda5c788 'user_data' 'void *'
|-CXXMethodDecl 0x5564bda5c970 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5564bda5c8e0 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5564bda72298 <col:35, line:87:5>
|   |-BinaryOperator 0x5564bda721c8 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5564bda72160 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5564bda70fb8
|   | | `-MemberExpr 0x5564bda72130 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5564bda71078
|   | |   `-CXXThisExpr 0x5564bda72120 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5564bda721b0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5564bda72190 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5564bda716b0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5564bda72278 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5564bda721f8 <col:2> 'void *' lvalue ->_thunk 0x5564bda710f8
|     | `-CXXThisExpr 0x5564bda721e8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5564bda72260 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5564bda72248 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5564bda72228 <col:11> 'Element *' lvalue ParmVar 0x5564bda5c8e0 'element' 'Element *'
|-CXXMethodDecl 0x5564bda5cab8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5564bda5ca28 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5564bda72430 <col:29, line:94:5>
|   |-BinaryOperator 0x5564bda72360 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5564bda722f8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5564bda70fb8
|   | | `-MemberExpr 0x5564bda722c8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5564bda71078
|   | |   `-CXXThisExpr 0x5564bda722b8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5564bda72348 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5564bda72328 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5564bda71888 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5564bda72410 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5564bda72390 <col:2> 'void *' lvalue ->_thunk 0x5564bda710f8
|     | `-CXXThisExpr 0x5564bda72380 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5564bda723f8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5564bda723e0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5564bda723c0 <col:11> 'Task *' lvalue ParmVar 0x5564bda5ca28 'task' 'Task *'
|-CXXMethodDecl 0x5564bda5cba8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5564bda72510 <col:37, line:100:5>
|   `-ReturnStmt 0x5564bda72500 <line:99:2, col:19>
|     `-BinaryOperator 0x5564bda724e0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5564bda724b0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5564bda72460 <col:9> 'Element *const' lvalue ->_owner 0x5564bda71158
|       |   `-CXXThisExpr 0x5564bda72450 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5564bda724c8 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5564bda72490 <col:19> 'int' 0
|-CXXMethodDecl 0x5564bda5cc68 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5564bda725d0 <col:35, line:105:5>
|   `-ReturnStmt 0x5564bda725c0 <line:104:2, col:23>
|     `-BinaryOperator 0x5564bda725a0 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5564bda72588 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5564bda72538 <col:9> 'const int' lvalue ->_schedpos1 0x5564bda70dd8
|       |   `-CXXThisExpr 0x5564bda72528 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5564bda72568 <col:23> 'int' 0
|-CXXMethodDecl 0x5564bda5cd28 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5564bda72638 <col:51, line:118:5>
|   `-ReturnStmt 0x5564bda72628 <line:117:2, col:9>
|     `-MemberExpr 0x5564bda725f8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5564bda70e38
|       `-CXXThisExpr 0x5564bda725e8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5564bda5cde8 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5564bda72b90 <col:37, line:136:5>
|   `-IfStmt 0x5564bda72b68 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5564bda726f8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5564bda726e0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5564bda726c0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5564bda72690 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5564bd9cfbd8
|     |       `-MemberExpr 0x5564bda72660 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5564bda70e38
|     |         `-CXXThisExpr 0x5564bda72650 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5564bda72ad8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5564bda72ac0 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5564bda72a90 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5564bda72a78 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5564bda72a40 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5564bda72a28 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5564bda72a08 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5564bd9fe3b0 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5564bda729a8 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5564bda72990 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5564bda728b8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5564bda728a0 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5564bda72880 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5564bd9fe070 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5564bda72820 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5564bda72720 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5564bda70e38
|     |         |     |   `-CXXThisExpr 0x5564bda72710 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5564bda72868 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5564bda72850 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5564bda72800 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5564bda727e8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5564bda72788 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5564bd9f16d0 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5564bda729f0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5564bda729d8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5564bda72970 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5564bda72958 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5564bda72928 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5564bd84cc20 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5564bda72b58 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5564bda72b28 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5564bda72af8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5564bda70e38
|           `-CXXThisExpr 0x5564bda72ae8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5564bda5cea8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5564bda72c78 <col:35, line:141:5>
|   `-ReturnStmt 0x5564bda72c68 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5564bda72c30 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5564bda72c00 <col:9, col:17> '<bound member function type>' ->router 0x5564bda50260
|         `-ImplicitCastExpr 0x5564bda72c50 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5564bda72be8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5564bda72bb8 <col:9> 'Element *const' lvalue ->_owner 0x5564bda71158
|               `-CXXThisExpr 0x5564bda72ba8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5564bda5cf68 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5564bda72cf8 <col:37, line:146:5>
|   `-ReturnStmt 0x5564bda72ce8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5564bda72cd0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5564bda72ca0 <col:9> 'Element *const' lvalue ->_owner 0x5564bda71158
|         `-CXXThisExpr 0x5564bda72c90 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5564bda5d028 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5564bda72d78 <col:41, line:151:5>
|   `-ReturnStmt 0x5564bda72d68 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5564bda72d50 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5564bda72d20 <col:9> 'RouterThread *const' lvalue ->_thread 0x5564bda711b8
|         `-CXXThisExpr 0x5564bda72d10 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5564bda5d0f0 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5564bda5d2e8 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5564bda5d1a0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5564bda5d218 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5564bda71a98 <col:50> 'bool' false
|-CXXMethodDecl 0x5564bda5d468 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5564bda5d3a8 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5564bda6f620 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5564bda5d520 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5564bda6f768 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5564bda6f6d8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5564bda6f8b0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5564bda6f820 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5564bda6f9f8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5564bda6f968 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5564bda6fac0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5564bda72ee0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5564bda72ec8 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5564bda72e70 <col:2, col:47> 'void'
|       |-MemberExpr 0x5564bda72da0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5564bda6f620
|       | `-CXXThisExpr 0x5564bda72d90 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5564bda72eb0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5564bda72e98 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5564bda72e50 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5564bda72e38 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5564bda72e08 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5564bd84cc20 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5564bda6fc00 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5564bda6fb70 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5564bda6fd48 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5564bda6fcb8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bda73068 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5564bda73050 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5564bda72ff8 <col:2, col:40> 'void'
|       |-MemberExpr 0x5564bda72f08 <col:2> '<bound member function type>' ->schedule_after 0x5564bda6fc00
|       | `-CXXThisExpr 0x5564bda72ef8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5564bda73038 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5564bda73020 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5564bda72fb8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5564bda72f88 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5564bda72f48 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bda6fcb8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5564bda72fa0 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5564bda72f68 <col:38> 'int' 0
|-CXXMethodDecl 0x5564bda6fe90 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5564bda6fe00 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bda732d8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5564bda732c0 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5564bda73268 <col:2, col:49> 'void'
|       |-MemberExpr 0x5564bda73090 <col:2> '<bound member function type>' ->schedule_after 0x5564bda6fc00
|       | `-CXXThisExpr 0x5564bda73080 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5564bda732a8 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5564bda73290 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5564bda73210 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5564bda731f8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5564bda73168 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5564bd9d19c8 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5564bda73250 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5564bda73238 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5564bda73148 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bda6fe00 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda6ffd8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5564bda6ff48 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5564bda734b8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5564bda734a0 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5564bda73448 <col:2, col:38> 'void'
|       |-MemberExpr 0x5564bda73300 <col:2> '<bound member function type>' ->schedule_at_steady 0x5564bda6f620
|       | `-CXXThisExpr 0x5564bda732f0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5564bda73488 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5564bda73470 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5564bda73410 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5564bda733f8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5564bda733d8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5564bd9fe070 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5564bda733a8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5564bda73390 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5564bda73340 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5564bda70e38
|             |     `-CXXThisExpr 0x5564bda73330 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5564bda73370 <col:33> 'const Timestamp' lvalue ParmVar 0x5564bda6ff48 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5564bda70120 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5564bda70090 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bda73790 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5564bda73778 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5564bda73720 <col:2, col:79> 'void'
|       |-MemberExpr 0x5564bda734e0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5564bda6f620
|       | `-CXXThisExpr 0x5564bda734d0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5564bda73760 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5564bda73748 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5564bda736e0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5564bda73618 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5564bda73600 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5564bda73590 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5564bda73560 <col:31, col:41> '<bound member function type>' .sec 0x5564bd84e718
|             | |     `-ImplicitCastExpr 0x5564bda735b0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5564bda73530 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5564bda70e38
|             | |         `-CXXThisExpr 0x5564bda73520 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5564bda735e8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5564bda735c8 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bda70090 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5564bda736a8 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5564bda73678 <col:60, col:70> '<bound member function type>' .subsec 0x5564bd84ee10
|                 `-ImplicitCastExpr 0x5564bda736c8 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5564bda73648 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5564bda70e38
|                     `-CXXThisExpr 0x5564bda73638 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5564bda70268 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5564bda701d8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5564bda73ac8 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5564bda73ab0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5564bda73a58 <col:2, col:65> 'void'
|       |-MemberExpr 0x5564bda737b8 <col:2> '<bound member function type>' ->schedule_at_steady 0x5564bda6f620
|       | `-CXXThisExpr 0x5564bda737a8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5564bda73a98 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5564bda73a80 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5564bda73a20 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5564bda73a08 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5564bda739e8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5564bd9fe070 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5564bda73988 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5564bda73970 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5564bda737f8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5564bda70e38
|             |     `-CXXThisExpr 0x5564bda737e8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5564bda739d0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5564bda739b8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5564bda73918 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5564bda73900 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5564bda738d0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5564bd9d19c8 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5564bda73958 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5564bda73940 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5564bda738b0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5564bda701d8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda70330 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5564bda703f0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5564bda73f90 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5564bda73b20 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5564bda73af0 <col:2> '<bound member function type>' ->unschedule 0x5564bda70330
|   |   `-CXXThisExpr 0x5564bda73ae0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5564bda73f78 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5564bda73f40 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5564bda73f28 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5564bda73bd8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5564bd6e5cb8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5564bda73b50 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5564bda70e38
|       | `-CXXThisExpr 0x5564bda73b40 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5564bda73bc0 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5564bda73b90 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5564bda704b0 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5564bda742e8 <col:42, line:310:5>
|   |-IfStmt 0x5564bda74130 <line:306:2, line:307:23>
|   | |-CallExpr 0x5564bda74060 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5564bda74048 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5564bda73fe8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5564bd9efb40 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5564bda74120 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5564bda74108 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5564bda740d8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5564bda740c0 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5564bda74090 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5564bda742d8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5564bda742c0 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5564bda74290 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5564bda74278 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5564bda74238 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5564bda74220 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5564bda741f0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5564bd9d1ce0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5564bda74260 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5564bda741d0 <col:30> 'int' 500
|-CXXMethodDecl 0x5564bda705f0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5564bda70560 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bda70698 <col:69> "" ""
|-CXXMethodDecl 0x5564bda707a8 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5564bda70718 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bda70850 <col:70> "" ""
|-CXXMethodDecl 0x5564bda70960 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5564bda708d0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bda70a08 <col:71> "" ""
|-CXXMethodDecl 0x5564bda70b18 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5564bda70a88 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bda70bc0 <col:72> "" ""
|-EnumDecl 0x5564bda70c30 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5564bda70d30 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5564bda70d80 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda70d10 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5564bda70cf0 <col:25> 'int' 1
|-AccessSpecDecl 0x5564bda70d98 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5564bda70dd8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5564bda70e38 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5564bda70e88 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5564bda70fb8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5564bda71aa8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5564bda71078 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5564bda710f8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5564bda71158 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5564bda711b8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5564bda71308 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5564bda71218 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5564bda714d8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5564bda713c0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5564bda71440 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5564bda716b0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5564bda71598 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5564bda71618 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5564bda71888 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5564bda71770 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5564bda717f0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5564bda71a58 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bda75600 <../elements/ip/ripsend.hh:28:1, line:52:1> line:28:7 class RIPSend definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5564bda75758 <col:1, col:7> col:7 implicit referenced class RIPSend
|-FieldDecl 0x5564bda757f8 <line:30:3, col:13> col:13 _src 'IPAddress'
|-FieldDecl 0x5564bda75858 <line:31:3, col:13> col:13 _dst 'IPAddress'
|-FieldDecl 0x5564bda758b8 <line:32:3, col:13> col:13 _what 'IPAddress'
|-FieldDecl 0x5564bda75918 <line:33:3, col:13> col:13 _mask 'IPAddress'
|-FieldDecl 0x5564bda75980 <line:34:3, col:7> col:7 _metric 'int'
|-FieldDecl 0x5564bda759e0 <line:36:3, col:9> col:9 _timer 'Timer'
|-AccessSpecDecl 0x5564bda75a30 <line:38:2, col:8> col:2 public
|-CXXConstructorDecl 0x5564bda75ac0 <line:40:3, col:11> col:3 RIPSend 'void ()'
|-CXXDestructorDecl 0x5564bda75bb0 <line:41:3, col:12> col:3 ~RIPSend 'void ()' noexcept-unevaluated 0x5564bda75bb0
| `-Overrides: [ 0x5564bda3e1b8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5564bda75ce0 <line:43:3, col:54> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5564bda3f618 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5564bda76830 <col:34, col:54>
|   `-ReturnStmt 0x5564bda76820 <col:36, col:43>
|     `-ImplicitCastExpr 0x5564bda76808 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5564bda767e8 <col:43> 'const char [8]' lvalue "RIPSend"
|-CXXMethodDecl 0x5564bda75da8 <line:44:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5564bda3f6e0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5564bda76890 <col:34, col:54>
|   `-ReturnStmt 0x5564bda76880 <col:36, col:43>
|     `-ImplicitCastExpr 0x5564bda76868 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5564bda76848 <col:43> 'const char []' lvalue Var 0x5564bda3f880 'PORTS_0_1' 'const char []'
|-CXXMethodDecl 0x5564bda75e70 <line:45:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5564bda3faa8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5564bda768f0 <col:34, col:49>
|   `-ReturnStmt 0x5564bda768e0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5564bda768c8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5564bda768a8 <col:43> 'const char []' lvalue Var 0x5564bda3fbf0 'PUSH' 'const char []'
|-CXXMethodDecl 0x5564bda76140 <line:47:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5564bda40eb0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5564bda75ff0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5564bda76068 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda76298 <line:48:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5564bda41100 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5564bda76200 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5564bda763e0 <line:50:3, col:25> col:8 run_timer 'void (Timer *)'
| |-Overrides: [ 0x5564bda3eb38 Element::run_timer 'void (Timer *)' ]
| `-ParmVarDecl 0x5564bda76350 <col:18, col:24> col:25 'Timer *'
|-CXXConstructorDecl 0x5564bda764b8 <line:28:7> col:7 implicit RIPSend 'void (const RIPSend &)' inline default_delete noexcept-unevaluated 0x5564bda764b8
| `-ParmVarDecl 0x5564bda765c8 <col:7> col:7 'const RIPSend &'
`-CXXMethodDecl 0x5564bda76668 <col:7> col:7 implicit operator= 'RIPSend &(const RIPSend &)' inline default_delete noexcept-unevaluated 0x5564bda76668
  `-ParmVarDecl 0x5564bda76778 <col:7> col:7 'const RIPSend &'

Layout: <CGRecordLayout
  LLVMType:%class.RIPSend = type { %class.Element.base, %class.IPAddress, %class.IPAddress, %class.IPAddress, %class.IPAddress, i32, %class.Timer }
  NonVirtualBaseLLVMType:%class.RIPSend = type { %class.Element.base, %class.IPAddress, %class.IPAddress, %class.IPAddress, %class.IPAddress, i32, %class.Timer }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd810d70 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5564bd810e88 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5564bd810f28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5564bd810f88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5564bd810fe8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5564bd811098 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd8113a0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bd8114b8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5564bd811560 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5564bd8115c8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5564bd811658 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5564bd8176f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5564bd817b28 <col:12>
|-CXXConstructorDecl 0x5564bd8177f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd817908 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5564bd811560 'data' 'const char *'
| | `-ImplicitCastExpr 0x5564bd81a0b0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5564bd81a080 <col:12> 'const char *const' lvalue .data 0x5564bd811560
| |     `-DeclRefExpr 0x5564bd81a060 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd817908 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5564bd8115c8 'length' 'int'
| | `-ImplicitCastExpr 0x5564bd81a140 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5564bd81a110 <col:12> 'const int' lvalue .length 0x5564bd8115c8
| |     `-DeclRefExpr 0x5564bd81a0f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd817908 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5564bd811658 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5564bd81a1d0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5564bd81a1a0 <col:12> 'String::memo_t *const' lvalue .memo 0x5564bd811658
| |     `-DeclRefExpr 0x5564bd81a180 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd817908 '' 'const String::rep_t &'
| `-CompoundStmt 0x5564bd81a228 <col:12>
|-CXXConstructorDecl 0x5564bd8179a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5564bd8179a8
| `-ParmVarDecl 0x5564bd817ab8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5564bd81d010 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5564bd828a28 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd828b38 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5564bd829050 <col:12>
|   |-BinaryOperator 0x5564bd828e68 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5564bd828e20 <col:12> 'const char *' lvalue ->data 0x5564bd811560
|   | | `-CXXThisExpr 0x5564bd828e10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5564bd828e50 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5564bd828de0 <col:12> 'const char *const' lvalue .data 0x5564bd811560
|   |     `-DeclRefExpr 0x5564bd828dc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd828b38 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5564bd828f30 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5564bd828ee8 <col:12> 'int' lvalue ->length 0x5564bd8115c8
|   | | `-CXXThisExpr 0x5564bd828ed8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5564bd828f18 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5564bd828ea8 <col:12> 'const int' lvalue .length 0x5564bd8115c8
|   |     `-DeclRefExpr 0x5564bd828e88 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd828b38 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5564bd828ff8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5564bd828fb0 <col:12> 'String::memo_t *' lvalue ->memo 0x5564bd811658
|   | | `-CXXThisExpr 0x5564bd828fa0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5564bd828fe0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5564bd828f70 <col:12> 'String::memo_t *const' lvalue .memo 0x5564bd811658
|   |     `-DeclRefExpr 0x5564bd828f50 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd828b38 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5564bd829040 <col:12>
|     `-UnaryOperator 0x5564bd829028 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bd829018 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5564bd828ba8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5564bd828ba8
  `-ParmVarDecl 0x5564bd828cb8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd8082e0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5564bd8083f8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5564bd808488 <col:16, col:22> col:16 public
|-TypedefDecl 0x5564bd8084c8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5564bd4dcfd0 'const char *'
|   `-QualType 0x5564bd4dc521 'const char' const
|     `-BuiltinType 0x5564bd4dc520 'char'
|-TypedefDecl 0x5564bd808550 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5564bd808520 'String::const_iterator' sugar
|   |-Typedef 0x5564bd8084c8 'const_iterator'
|   `-PointerType 0x5564bd4dcfd0 'const char *'
|     `-QualType 0x5564bd4dc521 'const char' const
|       `-BuiltinType 0x5564bd4dc520 'char'
|-TypedefDecl 0x5564bd8086c0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5564bd808630 'int (String::*)() const'
|   |-RecordType 0x5564bd808370 'String'
|   | `-CXXRecord 0x5564bd8082e0 'String'
|   `-ParenType 0x5564bd8085d0 'int () const' sugar
|     `-FunctionProtoType 0x5564bd7dd170 'int () const' const cdecl
|       `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bd808728 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5564bd631d50 'int64_t' sugar
|   |-Typedef 0x5564bd545390 'int64_t'
|   `-TypedefType 0x5564bd51e630 '__int64_t' sugar
|     |-Typedef 0x5564bd51e208 '__int64_t'
|     `-BuiltinType 0x5564bd4dc5a0 'long'
|-TypedefDecl 0x5564bd808790 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5564bd631c70 'uint64_t' sugar
|   |-Typedef 0x5564bd545530 'uint64_t'
|   `-TypedefType 0x5564bd51e6c0 '__uint64_t' sugar
|     |-Typedef 0x5564bd51e278 '__uint64_t'
|     `-BuiltinType 0x5564bd4dc640 'unsigned long'
|-TypedefDecl 0x5564bd808820 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5564bd8087f0 'String::intmax_t' sugar
|   |-Typedef 0x5564bd808728 'intmax_t'
|   `-TypedefType 0x5564bd631d50 'int64_t' sugar
|     |-Typedef 0x5564bd545390 'int64_t'
|     `-TypedefType 0x5564bd51e630 '__int64_t' sugar
|       |-Typedef 0x5564bd51e208 '__int64_t'
|       `-BuiltinType 0x5564bd4dc5a0 'long'
|-TypedefDecl 0x5564bd8088b0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5564bd808880 'String::uintmax_t' sugar
|   |-Typedef 0x5564bd808790 'uintmax_t'
|   `-TypedefType 0x5564bd631c70 'uint64_t' sugar
|     |-Typedef 0x5564bd545530 'uint64_t'
|     `-TypedefType 0x5564bd51e6c0 '__uint64_t' sugar
|       |-Typedef 0x5564bd51e278 '__uint64_t'
|       `-BuiltinType 0x5564bd4dc640 'unsigned long'
|-CXXConstructorDecl 0x5564bd808970 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5564bd808b18 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5564bd808a58 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5564bd808cc8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5564bd808c08 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5564bd808e20 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5564bd808d90 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5564bd809038 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5564bd808ee8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5564bd808f68 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5564bd809258 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5564bd809108 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5564bd809188 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5564bd809478 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5564bd809328 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5564bd8093a8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5564bd809698 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5564bd809548 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5564bd8095c8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5564bd809828 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5564bd809760 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5564bd8099a8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5564bd8098e8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5564bd809b38 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5564bd809a70 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5564bd809c90 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5564bd809c00 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5564bd809de8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5564bd809d58 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5564bd809f40 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5564bd809eb0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5564bd80a0c8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5564bd80a008 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5564bd80a258 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5564bd80a190 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5564bd80a3e8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5564bd80a320 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5564bd80a578 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5564bd80a4b0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5564bd80a670 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5564bd80a798 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5564bd80a918 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5564bd80a850 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5564bd80aa68 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5564bd80a9d8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5564bd80ab20 <col:63> "" ""
|-CXXMethodDecl 0x5564bd80ac68 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5564bd80aba8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5564bd80ae78 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5564bd80ad28 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5564bd80ada8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5564bd80b098 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5564bd80af40 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5564bd80afc0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5564bd80b378 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5564bd80b158 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5564bd80b1d8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5564bd8171c0 <col:55> 'int' 10
| `-ParmVarDecl 0x5564bd80b250 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5564bd8171e0 <col:76> 'bool' true
|-CXXMethodDecl 0x5564bd80b658 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5564bd80b440 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5564bd80b4c0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5564bd8171f0 <col:56> 'int' 10
| `-ParmVarDecl 0x5564bd80b538 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5564bd817210 <col:77> 'bool' true
|-CXXMethodDecl 0x5564bd80b760 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5564bd80b828 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5564bd80b8f0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5564bd80b990 <col:20>
| `-OptimizeNoneAttr 0x5564bd80b9e8 <col:30>
|-CXXConversionDecl 0x5564bd80bad8 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5564bd80bba8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5564bd80bc68 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5564bd80bd58 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5564bd80be18 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5564bd80bf98 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5564bd80bed0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5564bd80c0e8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5564bd80c058 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5564bd80c1d8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5564bd80c298 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5564bd80c4e8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5564bd80c350 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5564bd80c3d0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5564bd80c748 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5564bd80c5b0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5564bd80c630 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5564bd80c818 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bd80ca28 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5564bd80c8d0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5564bd80c950 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5564bd80cc48 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5564bd80caf0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5564bd80cb70 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5564bd80cdd8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5564bd80cd10 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5564bd80cec8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5564bd80d038 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5564bd80cf78 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5564bd80d248 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5564bd80d0f8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5564bd80d178 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5564bd80d460 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5564bd80d308 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5564bd80d380 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5564bd80d5f0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5564bd80d520 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5564bd80d810 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5564bd80d6b0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5564bd80d730 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5564bd80d960 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5564bd80d8d0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5564bd80db38 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5564bd80da20 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5564bd80daa0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5564bd80dc88 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5564bd80dbf8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5564bd80dea0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5564bd80dd40 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5564bd80ddc0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5564bd817220 <col:39> 'int' 0
|-CXXMethodDecl 0x5564bd80e0c0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5564bd80df60 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5564bd80dfe0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5564bd817240 <col:48> 'int' 0
|-CXXMethodDecl 0x5564bd80e2a0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5564bd80e180 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5564bd80e200 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5564bd817260 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5564bd80e370 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5564bd80e430 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5564bd80e4f0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5564bd80e5b0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5564bd80e670 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5564bd80e818 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5564bd80e720 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5564bd80e998 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5564bd80e8d0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5564bd80eb70 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5564bd80ea58 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5564bd80ece8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5564bd80ec28 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5564bd80ee30 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5564bd80eda0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5564bd80ef80 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5564bd80eef0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5564bd80f158 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5564bd80f040 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5564bd80f0c0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5564bd80f338 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5564bd80f220 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5564bd80f2a0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5564bd80f488 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5564bd80f3f8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5564bd80f698 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5564bd80f548 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5564bd80f5c8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5564bd80f7f8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5564bd80f760 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5564bd80f950 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5564bd80f8b8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5564bd80f9f8 <col:57> "" ""
|-CXXMethodDecl 0x5564bd80fb08 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5564bd80fa78 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5564bd80fc58 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5564bd80fbc8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5564bd80fdd8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5564bd80fd10 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5564bd80fea0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5564bd80ff60 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5564bd810020 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5564bd8100c0 <col:49> "" ""
|-CXXMethodDecl 0x5564bd810150 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5564bd810210 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5564bd810300 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5564bd8103c8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5564bd810488 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5564bd810548 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5564bd810640 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5564bd810708 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5564bd8107d0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5564bd8109a8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5564bd810888 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5564bd810908 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5564bd810bd0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5564bd810a70 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5564bd810af0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5564bd810ce0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5564bd810d48 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5564bd810d70 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5564bd810e88 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5564bd810f28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5564bd810f88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5564bd810fe8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5564bd811098 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5564bd811100 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5564bd811338 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5564bd811388 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bd811318 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5564bd811228 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5564bd8111d0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5564bd811210 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5564bd8111f0 <col:32> 'int' 8
|-CXXRecordDecl 0x5564bd8113a0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5564bd8114b8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5564bd811560 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5564bd8115c8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5564bd811658 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5564bd8176f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5564bd817b28 <col:12>
| |-CXXConstructorDecl 0x5564bd8177f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5564bd817908 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5564bd811560 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5564bd81a0b0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5564bd81a080 <col:12> 'const char *const' lvalue .data 0x5564bd811560
| | |     `-DeclRefExpr 0x5564bd81a060 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd817908 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5564bd8115c8 'length' 'int'
| | | `-ImplicitCastExpr 0x5564bd81a140 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5564bd81a110 <col:12> 'const int' lvalue .length 0x5564bd8115c8
| | |     `-DeclRefExpr 0x5564bd81a0f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd817908 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5564bd811658 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5564bd81a1d0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5564bd81a1a0 <col:12> 'String::memo_t *const' lvalue .memo 0x5564bd811658
| | |     `-DeclRefExpr 0x5564bd81a180 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd817908 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5564bd81a228 <col:12>
| |-CXXConstructorDecl 0x5564bd8179a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5564bd8179a8
| | `-ParmVarDecl 0x5564bd817ab8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5564bd81d010 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5564bd828a28 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5564bd828b38 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5564bd829050 <col:12>
| |   |-BinaryOperator 0x5564bd828e68 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5564bd828e20 <col:12> 'const char *' lvalue ->data 0x5564bd811560
| |   | | `-CXXThisExpr 0x5564bd828e10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5564bd828e50 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5564bd828de0 <col:12> 'const char *const' lvalue .data 0x5564bd811560
| |   |     `-DeclRefExpr 0x5564bd828dc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd828b38 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5564bd828f30 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5564bd828ee8 <col:12> 'int' lvalue ->length 0x5564bd8115c8
| |   | | `-CXXThisExpr 0x5564bd828ed8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5564bd828f18 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5564bd828ea8 <col:12> 'const int' lvalue .length 0x5564bd8115c8
| |   |     `-DeclRefExpr 0x5564bd828e88 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd828b38 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5564bd828ff8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5564bd828fb0 <col:12> 'String::memo_t *' lvalue ->memo 0x5564bd811658
| |   | | `-CXXThisExpr 0x5564bd828fa0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5564bd828fe0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5564bd828f70 <col:12> 'String::memo_t *const' lvalue .memo 0x5564bd811658
| |   |     `-DeclRefExpr 0x5564bd828f50 <col:12> 'const String::rep_t' lvalue ParmVar 0x5564bd828b38 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5564bd829040 <col:12>
| |     `-UnaryOperator 0x5564bd829028 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5564bd829018 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5564bd828ba8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5564bd828ba8
|   `-ParmVarDecl 0x5564bd828cb8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5564bd8116d0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5564bd811918 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5564bd811738 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5564bd8117b8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5564bd811830 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5564bd8176b0 <col:79, line:261:5>
|   |-BinaryOperator 0x5564bd817328 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5564bd8172c0 <col:2, col:5> 'const char *' lvalue .data 0x5564bd811560
|   | | `-MemberExpr 0x5564bd817290 <col:2> 'String::rep_t' lvalue ->_r 0x5564bd8116d0
|   | |   `-CXXThisExpr 0x5564bd817280 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5564bd817310 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5564bd8172f0 <col:12> 'const char *' lvalue ParmVar 0x5564bd811738 'data' 'const char *'
|   |-BinaryOperator 0x5564bd8173f0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5564bd817388 <col:2, col:5> 'int' lvalue .length 0x5564bd8115c8
|   | | `-MemberExpr 0x5564bd817358 <col:2> 'String::rep_t' lvalue ->_r 0x5564bd8116d0
|   | |   `-CXXThisExpr 0x5564bd817348 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5564bd8173d8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5564bd8173b8 <col:14> 'int' lvalue ParmVar 0x5564bd8117b8 'length' 'int'
|   `-IfStmt 0x5564bd817698 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5564bd817510 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5564bd8174f8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5564bd8174d8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5564bd8174b8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5564bd817450 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5564bd811658
|     |       | `-MemberExpr 0x5564bd817420 <col:7> 'String::rep_t' lvalue ->_r 0x5564bd8116d0
|     |       |   `-CXXThisExpr 0x5564bd817410 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5564bd8174a0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5564bd817480 <col:17> 'String::memo_t *' lvalue ParmVar 0x5564bd811830 'memo' 'String::memo_t *'
|     `-CallExpr 0x5564bd817670 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5564bd817658 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5564bd817560 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5564bd800348 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5564bd8175c8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5564bd810f28
|         `-ImplicitCastExpr 0x5564bd8175b0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5564bd817590 <col:27> 'String::memo_t *' lvalue ParmVar 0x5564bd811830 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5564bd811bc8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5564bd8119e8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5564bd811a68 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5564bd811ae0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5564bd8116d0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5564bd817b38 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5564bd817cc8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5564bd817c30 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5564bd817ba0 <col:2> '<bound member function type>' ->assign_memo 0x5564bd811918
|     | `-ImplicitCastExpr 0x5564bd817c68 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5564bd817b90 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5564bd817c80 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5564bd817bd0 <col:14> 'const char *' lvalue ParmVar 0x5564bd8119e8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5564bd817c98 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5564bd817bf0 <col:20> 'int' lvalue ParmVar 0x5564bd811a68 'length' 'int'
|     `-ImplicitCastExpr 0x5564bd817cb0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5564bd817c10 <col:28> 'String::memo_t *' lvalue ParmVar 0x5564bd811ae0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5564bd811d58 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5564bd811c98 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5564bd817f20 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5564bd817ea0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5564bd817cf0 <col:2> '<bound member function type>' ->assign_memo 0x5564bd811918
|     | `-CXXThisExpr 0x5564bd817ce0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5564bd817ed8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5564bd817d70 <col:14, col:19> 'const char *' lvalue .data 0x5564bd811560
|     |   `-MemberExpr 0x5564bd817d40 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5564bd8116d0
|     |     `-DeclRefExpr 0x5564bd817d20 <col:14> 'const String' lvalue ParmVar 0x5564bd811c98 'x' 'const String &'
|     |-ImplicitCastExpr 0x5564bd817ef0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5564bd817df0 <col:25, col:30> 'int' lvalue .length 0x5564bd8115c8
|     |   `-MemberExpr 0x5564bd817dc0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5564bd8116d0
|     |     `-DeclRefExpr 0x5564bd817da0 <col:25> 'const String' lvalue ParmVar 0x5564bd811c98 'x' 'const String &'
|     `-ImplicitCastExpr 0x5564bd817f08 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5564bd817e70 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5564bd811658
|         `-MemberExpr 0x5564bd817e40 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5564bd8116d0
|           `-DeclRefExpr 0x5564bd817e20 <col:38> 'const String' lvalue ParmVar 0x5564bd811c98 'x' 'const String &'
|-CXXMethodDecl 0x5564bd811e20 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5564bd8188e0 <col:31, line:278:5>
|   `-IfStmt 0x5564bd8188c8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5564bd817fc0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5564bd817fa8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5564bd817f78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5564bd811658
|     |     `-MemberExpr 0x5564bd817f48 <col:6> 'String::rep_t' lvalue ->_r 0x5564bd8116d0
|     |       `-CXXThisExpr 0x5564bd817f38 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5564bd8188a0 <col:15, line:277:2>
|       |-ParenExpr 0x5564bd818470 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5564bd818440 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5564bd8180d0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5564bd8180b8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5564bd8180a0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5564bd818060 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5564bd810f28
|       |   |       `-ImplicitCastExpr 0x5564bd818048 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5564bd818018 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5564bd811658
|       |   |           `-MemberExpr 0x5564bd817fe8 <col:27> 'String::rep_t' lvalue ->_r 0x5564bd8116d0
|       |   |             `-CXXThisExpr 0x5564bd817fd8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5564bd818130 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5564bd818110 <col:54> 'int' 0
|       |   `-CallExpr 0x5564bd8183a0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5564bd818388 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5564bd818308 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5564bd8183e0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5564bd818218 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5564bd8183f8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5564bd818248 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5564bd818410 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5564bd818280 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5564bd818428 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5564bd8182f0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5564bd8182d8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5564bd8182a0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5564bd8187c0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5564bd818680 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5564bd818668 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5564bd8185e0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5564bd801790 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5564bd8185b0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5564bd810f28
|       | |   `-ImplicitCastExpr 0x5564bd818598 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5564bd818568 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5564bd811658
|       | |       `-MemberExpr 0x5564bd818538 <col:40> 'String::rep_t' lvalue ->_r 0x5564bd8116d0
|       | |         `-CXXThisExpr 0x5564bd818528 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5564bd818780 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5564bd818768 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5564bd8186a8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5564bd816600 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5564bd8187a8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5564bd818708 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5564bd811658
|       |       `-MemberExpr 0x5564bd8186d8 <col:15> 'String::rep_t' lvalue ->_r 0x5564bd8116d0
|       |         `-CXXThisExpr 0x5564bd8186c8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5564bd818880 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5564bd818818 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5564bd811658
|         | `-MemberExpr 0x5564bd8187e8 <col:6> 'String::rep_t' lvalue ->_r 0x5564bd8116d0
|         |   `-CXXThisExpr 0x5564bd8187d8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5564bd818868 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5564bd818848 <col:16> 'int' 0
|-CXXMethodDecl 0x5564bd8120b8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5564bd811ed8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5564bd811f58 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5564bd811fd0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5564bd812190 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5564bd8123e0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5564bd812248 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5564bd8122c8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5564bd812340 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5564bd8125c8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5564bd8124b0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5564bd812530 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5564bd8126c8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5564bd8189b8 <col:41, line:286:5>
|   `-ReturnStmt 0x5564bd8189a8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5564bd818978 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5564bd818940 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5564bd818928 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5564bd818908 <col:46> 'int' 1
|-CXXMethodDecl 0x5564bd812968 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5564bd812780 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5564bd812800 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5564bd812880 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5564bd816600 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5564bd812a30 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5564bd8166d0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5564bd8168a0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5564bd816788 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5564bd816808 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5564bd816960 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5564bd816a28 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5564bd816b28 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5564bd816ba0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5564bd816c18 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5564bd816c80 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5564bd816d80 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5564bd816dd0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bd816d60 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5564bd816d40 <col:22> 'int' 14
|-CXXMethodDecl 0x5564bd816fe8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5564bd816e00 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5564bd816e80 <col:38> col:41 'int'
| `-ParmVarDecl 0x5564bd816f00 <col:43> col:46 'int'
|-FriendDecl 0x5564bd8170f0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5564bd817180 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5564bdaa1aa0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5564bdaa1c78 prev 0x5564bdaa1aa0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5564bdaa1d08 <col:46, col:52> col:46 public
|-TypedefDecl 0x5564bdaa1d30 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdaa3690 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5564bdaa3640 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5564bdaa3620 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5564bdaa1f48 'type'
|     `-SubstTemplateTypeParmType 0x5564bdaa1f10 'String' sugar
|       |-TemplateTypeParmType 0x5564bd7ccb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7ccb40 'T'
|       `-RecordType 0x5564bd808370 'String'
|         `-CXXRecord 0x5564bd8082e0 'String'
|-TypedefDecl 0x5564bdaa3748 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5564bdaa3710 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5564bdaa36f0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5564bdaa3690 'type'
|     `-ElaboratedType 0x5564bdaa3640 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5564bdaa3620 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5564bdaa1f48 'type'
|         `-SubstTemplateTypeParmType 0x5564bdaa1f10 'String' sugar
|           |-TemplateTypeParmType 0x5564bd7ccb90 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5564bd7ccb40 'T'
|           `-RecordType 0x5564bd808370 'String'
|             `-CXXRecord 0x5564bd8082e0 'String'
|-CXXMethodDecl 0x5564bdaa38c8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5564bdaa37d8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5564bdaa39b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5564bdaa3a98 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5564bdaa3a98
|-CXXMethodDecl 0x5564bdaa3d68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5564bdaa3c70 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5564bdaa3fa8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5564bdaa3e20 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5564bdaa3e98 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5564bdaa4178 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5564bdaa4068 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5564bdaa40e0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5564bdaa42d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5564bdaa43a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5564bdaa45f8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5564bdaa4468 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5564bdaa44e0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5564bdaa4858 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5564bdaa46c8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5564bdaa4740 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5564bdaa4a18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5564bdaa4928 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5564bdaa4bd8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5564bdaa4ae0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5564bdaa4c90 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5564bdaa4d40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5564bdaa4f78 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5564bdaa4df0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5564bdaa4e68 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5564bdaa5218 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5564bdaa5120 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5564bdaa52e0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5564bdaa5330 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5564bdaa5380 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5564bda40b20 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5564bdaa0508 prev 0x5564bda40b20 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5564bdaa1a10 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5564bdaa19c0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5564bdaa19a0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5564bdaa1850 'type'
|     `-SubstTemplateTypeParmType 0x5564bdaa16e0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5564bd7a2940 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5564bd7a28e8 'F'
|       `-RecordType 0x5564bdaa1340 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5564bdaa1260 'typed_array_memory'
|-FieldDecl 0x5564bdaa53d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5564bdaa5420 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5564bdaa5458 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5564bdaa05a0 'String' sugar
|   |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|   `-RecordType 0x5564bd808370 'String'
|     `-CXXRecord 0x5564bd8082e0 'String'
|-TypedefDecl 0x5564bdaa54e8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5564bdaa54b0 'String &'
|   `-SubstTemplateTypeParmType 0x5564bdaa05a0 'String' sugar
|     |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|     `-RecordType 0x5564bd808370 'String'
|       `-CXXRecord 0x5564bd8082e0 'String'
|-TypedefDecl 0x5564bdaa5578 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5564bdaa5540 'const String &'
|   `-QualType 0x5564bdaa05a1 'const String' const
|     `-SubstTemplateTypeParmType 0x5564bdaa05a0 'String' sugar
|       |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|       `-RecordType 0x5564bd808370 'String'
|         `-CXXRecord 0x5564bd8082e0 'String'
|-TypedefDecl 0x5564bdaa5608 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5564bdaa55d0 'String *'
|   `-SubstTemplateTypeParmType 0x5564bdaa05a0 'String' sugar
|     |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|     `-RecordType 0x5564bd808370 'String'
|       `-CXXRecord 0x5564bd8082e0 'String'
|-TypedefDecl 0x5564bdaa5698 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5564bdaa5660 'const String *'
|   `-QualType 0x5564bdaa05a1 'const String' const
|     `-SubstTemplateTypeParmType 0x5564bdaa05a0 'String' sugar
|       |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|       `-RecordType 0x5564bd808370 'String'
|         `-CXXRecord 0x5564bd8082e0 'String'
|-TypedefDecl 0x5564bdaa62f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5564bdaa62a0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5564bdaa6280 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5564bdaa61b8 'type'
|     `-LValueReferenceType 0x5564bdaa6180 'const String &'
|       `-QualType 0x5564bdaa5f21 'const String' const
|         `-SubstTemplateTypeParmType 0x5564bdaa5f20 'String' sugar
|           |-TemplateTypeParmType 0x5564bd7ac890 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5564bd7ac838 'T'
|           `-RecordType 0x5564bd808370 'String'
|             `-CXXRecord 0x5564bd8082e0 'String'
|-TypedefDecl 0x5564bdaa6358 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5564bdaa5540 'const String &'
|   `-QualType 0x5564bdaa05a1 'const String' const
|     `-SubstTemplateTypeParmType 0x5564bdaa05a0 'String' sugar
|       |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|       `-RecordType 0x5564bd808370 'String'
|         `-CXXRecord 0x5564bd8082e0 'String'
|-TypedefDecl 0x5564bdaa63b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdaa6418 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5564bdaa55d0 'String *'
|   `-SubstTemplateTypeParmType 0x5564bdaa05a0 'String' sugar
|     |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|     `-RecordType 0x5564bd808370 'String'
|       `-CXXRecord 0x5564bd8082e0 'String'
|-TypedefDecl 0x5564bdaa6480 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5564bdaa5660 'const String *'
|   `-QualType 0x5564bdaa05a1 'const String' const
|     `-SubstTemplateTypeParmType 0x5564bdaa05a0 'String' sugar
|       |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|       `-RecordType 0x5564bd808370 'String'
|         `-CXXRecord 0x5564bd8082e0 'String'
|-EnumDecl 0x5564bdaa64d8 <line:134:5> col:5
| `-EnumConstantDecl 0x5564bdaa65d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5564bdaa65b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5564bd7db538 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5564bd7db510 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5564bd7db4f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5564bdaa6658 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5564bdaa68e8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5564bdaa6710 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5564bdaa67b0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5564bdaa6b78 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5564bdaa6a60 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5564bdaa6e38 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5564bdaa6d20 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5564bdaa7150 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5564bdaa7030 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5564bdaa7460 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5564bdaa7340 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5564bdaa77c0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5564bdaa7598 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5564bdaa7680 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5564bdaa78e8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5564bdaa7998 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaa79f0 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaa7a38 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5564bdaa7ae8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaa7b40 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaa7c08 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5564bdaa7cb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaa7d10 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaa7d58 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5564bdaa7e08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaa7e60 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaa7ea8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5564bdaa7f58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaa7fb0 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaa7ff8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5564bdaa80a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaa8100 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaa8128 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5564bdaa81d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5564bdaa8288 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5564bdaa8448 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5564bdaa8338 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5564bdaa83b0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5564bdaa8598 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5564bdaa8508 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaa8748 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5564bdaa8650 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5564bdaa8800 <col:20>
| `-OptimizeNoneAttr 0x5564bdaa8858 <col:30>
|-CXXMethodDecl 0x5564bdaa8978 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5564bdaa8880 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5564bdaa8a30 <col:20>
| `-OptimizeNoneAttr 0x5564bdaa8a88 <col:30>
|-CXXMethodDecl 0x5564bdaa8b40 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5564bdaa8ab0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaa8c88 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5564bdaa8bf8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaa8db8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5564bdaa8eb8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5564bdaa8f88 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5564bdaa9058 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5564bdaa9198 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5564bdaa9108 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaa92e0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5564bdaa9250 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaa9428 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5564bdaa9398 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5564bdaa94e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5564bdaa95e0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5564bdaa9550 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5564bdaa9698 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5564bdaa9758 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5564bdaa9858 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5564bdaa99d8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5564bdaa9918 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5564bdaaa198 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5564bdaa9a90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5564bdaaa0f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5564bdaa9ff8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5564bdaaa278 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5564bdaaa3c8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5564bdaaa338 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5564bdaaa480 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5564bdaaa6c8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5564bdaaa540 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5564bdaaa5b8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5564bdaaa858 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5564bdaaa798 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5564bdaaaa68 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5564bdaaa920 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5564bdaaa998 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5564bdaaab28 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5564bdaaad88 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5564bdaaac90 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5564bdaaae58 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5564bdaaae58

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bdab5a68 prev 0x5564bda035c8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bdab5b60 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5564bdab5bf0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5564bdab5d28 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5564bdab5c28 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5564bdab7150 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5564bdab7130 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5564bdab6cc8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5564bdab71e0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5564bdab71a0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5564bdab5c28 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5564bdab6d30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5564bdab7260 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5564bdab7220 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5564bdab6d90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5564bdab72a0 <col:54> 'bool' false
| `-CompoundStmt 0x5564bdab73a8 <col:61, line:38:5>
|   `-BinaryOperator 0x5564bdab7388 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5564bdab7320 <col:9> 'const Element *' lvalue ->_context 0x5564bdab6c68
|     | `-CXXThisExpr 0x5564bdab7310 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5564bdab7370 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5564bdab7350 <col:20> 'int' 0
|-CXXConstructorDecl 0x5564bdab5f38 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5564bdab5de8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5564bdab5e60 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5564bdab7188 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5564bdab7168 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5564bdab6c68 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5564bdab7400 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5564bdab73c0 <col:20> 'const Element *' lvalue ParmVar 0x5564bdab5de8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5564bdab6cc8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5564bdab7480 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5564bdab7440 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5564bdab5e60 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5564bdab6d30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5564bdab7500 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5564bdab74c0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5564bdab6d90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5564bdab7540 <col:73> 'bool' false
| `-CompoundStmt 0x5564bdab75b8 <col:80, line:46:5>
|-CXXMethodDecl 0x5564bdab6068 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5564bdab7630 <col:36, line:51:5>
|   `-ReturnStmt 0x5564bdab7620 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5564bdab7608 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5564bdab75d8 <col:16> 'const Element *const' lvalue ->_context 0x5564bdab6c68
|         `-CXXThisExpr 0x5564bdab75c8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5564bdab6158 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5564bdab76c8 <col:32, line:57:5>
|   `-ReturnStmt 0x5564bdab76b8 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5564bdab76a0 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5564bdab7658 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5564bdab6cc8
|         `-CXXThisExpr 0x5564bdab7648 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5564bdab6218 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5564bdab63a0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5564bdab62d0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5564bdab64f0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5564bdab6460 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5564bdab6640 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5564bdab65b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5564bdab6848 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5564bdab66f8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5564bdab6770 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5564bdab6b78 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5564bdab6908 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5564bdab6988 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5564bdab6a50 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5564bdab6c30 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5564bdab6c68 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5564bdab6cc8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5564bdab6d30 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5564bdab6d90 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5564bdab6de0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5564bdab6de0
| `-ParmVarDecl 0x5564bdab6ef8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5564bdab6f98 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5564bdab6f98
| `-ParmVarDecl 0x5564bdab70a8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5564bdb22408 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5564bdae3d80 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5564bdae3f58 prev 0x5564bdae3d80 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5564bdae3fe8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5564bdae4010 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae5be0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5564bdae5b90 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5564bdae44c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5564bdae43c0 'type'
|     `-TemplateSpecializationType 0x5564bdae4350 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5564bdae4230 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5564bdae4210 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5564bdae41f0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5564bdae4330 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5564bdae4250 'char_array'
|-TypedefDecl 0x5564bdae5c98 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5564bdae5c60 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5564bdae5c40 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5564bdae5be0 'type'
|     `-ElaboratedType 0x5564bdae5b90 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5564bdae44c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5564bdae43c0 'type'
|         `-TemplateSpecializationType 0x5564bdae4350 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5564bdae4230 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5564bdae4210 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5564bdae41f0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5564bdae4330 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5564bdae4250 'char_array'
|-CXXMethodDecl 0x5564bdae5e18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5564bdae5d28 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5564bdae5f08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5564bdae5fe8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5564bdae62b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5564bdae61c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5564bdae64f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5564bdae6370 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5564bdae63e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5564bdae66c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5564bdae65b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5564bdae6630 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5564bdae6828 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5564bdae68f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5564bdae6b48 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5564bdae69b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5564bdae6a30 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5564bdae6da8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5564bdae6c18 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5564bdae6c90 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5564bdae6f68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5564bdae6e78 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5564bdae7128 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5564bdae7030 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5564bdae71e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5564bdae7290 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5564bdae74c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5564bdae7340 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5564bdae73b8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5564bdae7768 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5564bdae7670 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5564bdae7830 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5564bdae7880 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5564bdae78d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5564bdae2790 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5564bdae2998 prev 0x5564bdae2790 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5564bdae3cf0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5564bdae3ca0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5564bdae3c80 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5564bdae3b30 'type'
|     `-SubstTemplateTypeParmType 0x5564bdae3950 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5564bd7a21c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7a2168 'T'
|       `-RecordType 0x5564bdae34a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5564bdae33b8 'sized_array_memory'
|-FieldDecl 0x5564bdae7920 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5564bdae7970 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5564bdae79a8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5564bdae2a30 'int' sugar
|   |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|   `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae7a38 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5564bdae7a00 'int &'
|   `-SubstTemplateTypeParmType 0x5564bdae2a30 'int' sugar
|     |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|     `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae7af8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5564bdae7ac0 'const int &'
|   `-QualType 0x5564bdae2a31 'const int' const
|     `-SubstTemplateTypeParmType 0x5564bdae2a30 'int' sugar
|       |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|       `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae7b88 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5564bdae7b50 'int *'
|   `-SubstTemplateTypeParmType 0x5564bdae2a30 'int' sugar
|     |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|     `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae7c18 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5564bdae7be0 'const int *'
|   `-QualType 0x5564bdae2a31 'const int' const
|     `-SubstTemplateTypeParmType 0x5564bdae2a30 'int' sugar
|       |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|       `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae8800 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5564bdae87b0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5564bdae8790 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5564bdae8720 'type'
|     `-SubstTemplateTypeParmType 0x5564bdae84e0 'int' sugar
|       |-TemplateTypeParmType 0x5564bd7acfc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7acf70 'T'
|       `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae8868 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5564bdae7ac0 'const int &'
|   `-QualType 0x5564bdae2a31 'const int' const
|     `-SubstTemplateTypeParmType 0x5564bdae2a30 'int' sugar
|       |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|       `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae88c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae8928 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5564bdae7b50 'int *'
|   `-SubstTemplateTypeParmType 0x5564bdae2a30 'int' sugar
|     |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|     `-BuiltinType 0x5564bd4dc580 'int'
|-TypedefDecl 0x5564bdae8990 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5564bdae7be0 'const int *'
|   `-QualType 0x5564bdae2a31 'const int' const
|     `-SubstTemplateTypeParmType 0x5564bdae2a30 'int' sugar
|       |-TemplateTypeParmType 0x5564bd7d9eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5564bd7d9e58 'T'
|       `-BuiltinType 0x5564bd4dc580 'int'
|-EnumDecl 0x5564bdae89e8 <line:134:5> col:5
| `-EnumConstantDecl 0x5564bdae8ae0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5564bdae8ac0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5564bd7db538 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5564bd7db510 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5564bd7db4f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5564bdae8b68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5564bdae8db8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5564bdae8c20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5564bdae8cc0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5564bdae9078 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5564bdae8f60 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5564bdae9338 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5564bdae9220 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5564bdae9680 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5564bdae9560 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5564bdae9990 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5564bdae9870 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5564bdae9c80 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5564bdae9ac8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5564bdae9b40 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5564bdae9da8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5564bdae9e88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdae9ee0 <col:30> Inherited
|-CXXMethodDecl 0x5564bdae9f28 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5564bdae9fd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaea030 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaea0f8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5564bdaea1a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaea200 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaea248 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5564bdaea2f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaea350 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaea398 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5564bdaea448 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaea4a0 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaea4e8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5564bdaea598 <col:20> Inherited
| `-OptimizeNoneAttr 0x5564bdaea5f0 <col:30> Inherited
|-CXXMethodDecl 0x5564bdaea618 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5564bdaebda0 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5564bdaebe50 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5564bdaec010 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5564bdaebf00 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5564bdaebf78 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5564bdaec160 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5564bdaec0d0 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaec308 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5564bdaec218 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5564bdaec3c0 <col:20>
| `-OptimizeNoneAttr 0x5564bdaec418 <col:30>
|-CXXMethodDecl 0x5564bdaec538 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5564bdaec440 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5564bdaec5f0 <col:20>
| `-OptimizeNoneAttr 0x5564bdaec648 <col:30>
|-CXXMethodDecl 0x5564bdaec700 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5564bdaec670 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaec848 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5564bdaec7b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaec978 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5564bdaecaa8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5564bdaecb78 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5564bdaecc48 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5564bdaecd88 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5564bdaeccf8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaeced0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5564bdaece40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5564bdaed018 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5564bdaecf88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5564bdaed0d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5564bdaed1d0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5564bdaed140 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5564bdaed288 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5564bdaed348 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5564bdaed448 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5564bdaed5c8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5564bdaed508 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5564bdaedd88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5564bdaed680 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5564bdaedce8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5564bdaedbe8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5564bdaede68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5564bdaedfb8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5564bdaedf28 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5564bdaee070 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5564bdaee2b8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5564bdaee130 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5564bdaee1a8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5564bdaee478 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5564bdaee388 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5564bdaee6c8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5564bdaee540 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5564bdaee5b8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5564bdaee788 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5564bdaee9e8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5564bdaee8f0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5564bdaeeab8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bdad47e8 prev 0x5564bdabc5d8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5564bdad48e0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5564bdad49d0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5564bdb02780 <col:16, line:828:9>
|-CXXDestructorDecl 0x5564bdad4ac0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5564bdb02790 <col:25, line:830:9>
|-CXXMethodDecl 0x5564bdad4bc0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5564bdad4c70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5564bdad4d18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5564bdad4d18
| `-ParmVarDecl 0x5564bdad4e28 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5564bdad55e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5564bdad55e8
  `-ParmVarDecl 0x5564bdad56f8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bdabc3e8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5564bdabc548 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5564bdabc5d8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5564bdabc690 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5564bdabc798 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5564bdabc6c8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5564bdaf0078 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5564bdaf0058 <col:31> 'int' 0
|-CXXConstructorDecl 0x5564bdabcab8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5564bdabc930 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5564bdabc9a8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5564bdaf00b0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5564bdaf0090 <col:59> 'int' 0
|-CXXConstructorDecl 0x5564bdabcc90 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5564bdabcb80 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5564bdabcbf8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5564bdaf00e8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5564bdaf00c8 <col:55> 'int' 0
|-CXXConstructorDecl 0x5564bdabd048 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5564bdabce30 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5564bdabcea8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5564bdabcf20 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5564bdaf0120 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5564bdaf0100 <col:31> 'int' 0
|-CXXConstructorDecl 0x5564bdabd208 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5564bdabd148 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5564bdabd300 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5564bdabd4e8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5564bdabd3f0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5564bdabd5d8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5564bdaf04d0 <col:24, line:291:5>
|   `-ReturnStmt 0x5564bdaf04c0 <line:290:9, col:79>
|     `-BinaryOperator 0x5564bdaf04a0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5564bdaf0378 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5564bdaf02d0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5564bdaf02b0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5564bdaf01a8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5564bdaf0190 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5564bdaf0178 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5564bdaf0148 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5564bdae2728
|       | |   |       `-CXXThisExpr 0x5564bdaf0138 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5564bdaf0298 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5564bdaf0280 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5564bdaf0248 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5564bdaf0218 <col:28, col:35> '<bound member function type>' ->size 0x5564bdaa8128
|       | |           `-ImplicitCastExpr 0x5564bdaf0268 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5564bdaf0200 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5564bdaf01d0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5564bdae2728
|       | |                 `-CXXThisExpr 0x5564bdaf01c0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5564bdaf0360 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5564bdaf0348 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5564bdaf0330 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5564bdaf0300 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5564bdaeec00
|       |         `-CXXThisExpr 0x5564bdaf02f0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5564bdaf0480 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5564bdaf0468 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5564bdaf0450 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5564bdaf0410 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5564bdaf03f8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5564bdaf03a8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5564bdaeecb0
|         |     |   `-CXXThisExpr 0x5564bdaf0398 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5564bdaf03d8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5564bdaf0430 <col:79> 'int' 0
|-CXXMethodDecl 0x5564bdabd698 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5564bdaf06a8 <col:32, line:296:5>
|   `-ReturnStmt 0x5564bdaf0698 <line:295:9, col:49>
|     `-BinaryOperator 0x5564bdaf0678 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5564bdaf0558 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5564bdaf0540 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5564bdaf0528 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5564bdaf04f8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5564bdaeec00
|       |       `-CXXThisExpr 0x5564bdaf04e8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5564bdaf0658 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5564bdaf0640 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5564bdaf0628 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5564bdaf05e8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5564bdaf05d0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5564bdaf0580 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5564bdaeecb0
|         |     |   `-CXXThisExpr 0x5564bdaf0570 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5564bdaf05b0 <col:43> 'int' 0
|         `-IntegerLiteral 0x5564bdaf0608 <col:49> 'int' 0
|-CXXMethodDecl 0x5564bdabd788 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5564bdaf08b8 <col:19, line:306:5>
|   |-IfStmt 0x5564bdaf07d8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5564bdaf0718 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5564bdaf0700 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5564bdaf06d0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5564bdae2728
|   | |     `-CXXThisExpr 0x5564bdaf06c0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5564bdaf07b8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5564bdaf0788 <col:13, col:20> '<bound member function type>' ->clear 0x5564bdaaab28
|   |     `-ImplicitCastExpr 0x5564bdaf0770 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5564bdaf0740 <col:13> 'Vector<String> *' lvalue ->_conf 0x5564bdae2728
|   |         `-CXXThisExpr 0x5564bdaf0730 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5564bdaf0860 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5564bdaf0830 <col:9, col:16> '<bound member function type>' .clear 0x5564bdaee788
|   |   `-MemberExpr 0x5564bdaf0800 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5564bdaeeba0
|   |     `-CXXThisExpr 0x5564bdaf07f0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5564bdaf08a8 <line:305:9, col:17>
|     `-UnaryOperator 0x5564bdaf0890 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bdaf0880 <col:17> 'Args *' this
|-CXXMethodDecl 0x5564bdabda08 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5564bdabd910 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5564bdabdb88 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5564bdabdac0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5564bdabdf08 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5564bdabdc30 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5564bdabde68 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5564bdabdcd8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5564bdabdd50 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5564bdaf0bd8 <col:67, line:327:5>
|     |-WhileStmt 0x5564bdaf0b88 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5564bdaf09a0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5564bdaf0920 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5564bd9fba98 0x5564bd845078 0x5564bd844d50 0x5564bd835520 0x5564bd8351d0 0x5564bd834ac0 0x5564bd807430 0x5564bd794900
|     | | |-DeclRefExpr 0x5564bdaf08e0 <col:16> 'Iter' lvalue ParmVar 0x5564bdabdcd8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5564bdaf0900 <col:25> 'Iter' lvalue ParmVar 0x5564bdabdd50 'end' 'Iter'
|     | `-CompoundStmt 0x5564bdaf0b68 <col:30, line:325:9>
|     |   |-CallExpr 0x5564bdaf0b08 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5564bdaf09e8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5564bdaf0ad8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5564bdaf0a68 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|     |   |   `-DeclRefExpr 0x5564bdaf0a48 <col:24> 'Iter' lvalue ParmVar 0x5564bdabdcd8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5564bdaf0b50 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5564bdaf0b30 <col:15> 'Iter' lvalue ParmVar 0x5564bdabdcd8 'begin' 'Iter'
|     `-ReturnStmt 0x5564bdaf0bc8 <line:326:9, col:17>
|       `-UnaryOperator 0x5564bdaf0bb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf0ba0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5564bdabe010 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5564bdabdf80 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5564bdabe158 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5564bdabe0c8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5564bdabe220 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5564bdaf0cb8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5564bdaf0c58 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5564bdaf0c08 <col:9> '<bound member function type>' ->reset_from 0x5564bdaef028
|   | | `-CXXThisExpr 0x5564bdaf0bf8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5564bdaf0c38 <col:20> 'int' 0
|   `-ReturnStmt 0x5564bdaf0ca8 <line:352:9, col:17>
|     `-UnaryOperator 0x5564bdaf0c90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bdaf0c80 <col:17> 'Args *' this
|-VarDecl 0x5564bdabe2d8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5564bdabe340 <col:38> 'int' 1
|-VarDecl 0x5564bdabe3d0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5564bdabe438 <col:39> 'int' 2
|-VarDecl 0x5564bdabe4c8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5564bdabe530 <col:39> 'int' 4
|-VarDecl 0x5564bdabe5c0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5564bdabe628 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5564bdabe9a8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5564bdabe6a0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5564bdabe908 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5564bdabe750 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdabe7f8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf0e10 <col:43, line:371:5>
|     `-ReturnStmt 0x5564bdaf0e00 <line:370:9, col:34>
|       `-CallExpr 0x5564bdaf0dc8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf0ce8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf0d68 <col:21> 'const char *' lvalue ParmVar 0x5564bdabe750 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf0d88 <col:30> 'int' 0
|         `-DeclRefExpr 0x5564bdaf0da8 <col:33> 'T' lvalue ParmVar 0x5564bdabe7f8 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdabecd8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5564bdabea10 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5564bdabec38 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5564bdabeac0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdabeb68 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf0f60 <col:45, line:375:5>
|     `-ReturnStmt 0x5564bdaf0f50 <line:374:9, col:42>
|       `-CallExpr 0x5564bdaf0f18 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf0e38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf0eb8 <col:21> 'const char *' lvalue ParmVar 0x5564bdabeac0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf0ed8 <col:30> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5564bdaf0ef8 <col:41> 'T' lvalue ParmVar 0x5564bdabeb68 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdabf008 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5564bdabed40 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5564bdabef68 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5564bdabedf0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdabee98 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf10b0 <col:45, line:379:5>
|     `-ReturnStmt 0x5564bdaf10a0 <line:378:9, col:43>
|       `-CallExpr 0x5564bdaf1068 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf0f88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf1008 <col:21> 'const char *' lvalue ParmVar 0x5564bdabedf0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf1028 <col:30> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int'
|         `-DeclRefExpr 0x5564bdaf1048 <col:42> 'T' lvalue ParmVar 0x5564bdabee98 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdabf338 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5564bdabf070 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5564bdabf298 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5564bdabf120 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5564bdabf1c8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5564bdaf12b0 <col:46, line:383:5>
| |   `-ReturnStmt 0x5564bdaf12a0 <line:382:9, col:55>
| |     `-CallExpr 0x5564bdaf1268 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5564bdaf10d8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5564bdaf1158 <col:21> 'const char *' lvalue ParmVar 0x5564bdabf120 'keyword' 'const char *'
| |       |-BinaryOperator 0x5564bdaf1228 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5564bdaf11d8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5564bdaf11b8 <col:30> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5564bdaf1210 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5564bdaf11f0 <col:42> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5564bdaf1248 <col:54> 'T' lvalue ParmVar 0x5564bdabf1c8 'x' 'T &'
| |-CXXMethodDecl 0x5564bdb22898 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IPAddress &)'
| | |-TemplateArgument type 'IPAddress'
| | |-ParmVarDecl 0x5564bdb226b0 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x5564bdb22788 <col:40, col:43> col:43 x 'IPAddress &'
| `-CXXMethodDecl 0x5564bdb23c38 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5564bdb23a50 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5564bdb23b28 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x5564bdac0be0 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5564bdabf3a0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5564bdac0b40 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5564bdabf450 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdabf4d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdabf578 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf13f0 <col:54, line:388:5>
|     |-CallExpr 0x5564bdaf1378 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5564bdaf12c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5564bdaf1308 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5564bdaf1318 <col:30> 'const char *' lvalue ParmVar 0x5564bdabf450 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5564bdaf1338 <col:39> 'int' lvalue ParmVar 0x5564bdabf4d0 'flags' 'int'
|     | `-DeclRefExpr 0x5564bdaf1358 <col:46> 'T' lvalue ParmVar 0x5564bdabf578 'x' 'T &'
|     `-ReturnStmt 0x5564bdaf13e0 <line:387:9, col:17>
|       `-UnaryOperator 0x5564bdaf13c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf13b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdac1088 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5564bdac0c50 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5564bdac0cc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5564bdac0fe8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5564bdac0d88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac0e28 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5564bdac0ec8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5564bdaf1560 <col:74, line:403:5>
|     `-ReturnStmt 0x5564bdaf1550 <line:402:9, col:56>
|       `-CallExpr 0x5564bdaf1510 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf1420 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf1490 <col:28> 'const char *' lvalue ParmVar 0x5564bdac0d88 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf14b0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5564bdaf14d0 <col:40> 'T' lvalue ParmVar 0x5564bdac0e28 'x' 'T &'
|         `-DeclRefExpr 0x5564bdaf14f0 <col:43> 'const V' lvalue ParmVar 0x5564bdac0ec8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5564bdac14f8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5564bdac10f8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5564bdac1178 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5564bdac1458 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5564bdac1238 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac12d8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5564bdac1378 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5564bdaf16c8 <col:76, line:407:5>
|     `-ReturnStmt 0x5564bdaf16b8 <line:406:9, col:65>
|       `-CallExpr 0x5564bdaf1678 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf1588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf15f8 <col:28> 'const char *' lvalue ParmVar 0x5564bdac1238 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf1618 <col:37> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int'
|         |-DeclRefExpr 0x5564bdaf1638 <col:49> 'T' lvalue ParmVar 0x5564bdac12d8 'x' 'T &'
|         `-DeclRefExpr 0x5564bdaf1658 <col:52> 'const V' lvalue ParmVar 0x5564bdac1378 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5564bdac1a48 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5564bdac1568 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5564bdac15e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5564bdac19a8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5564bdac16a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac1728 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdac17c8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5564bdac1868 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5564bdaf1830 <col:85, line:412:5>
|     |-CallExpr 0x5564bdaf17b0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5564bdaf16e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5564bdaf1720 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5564bdaf1730 <col:37> 'const char *' lvalue ParmVar 0x5564bdac16a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5564bdaf1750 <col:46> 'int' lvalue ParmVar 0x5564bdac1728 'flags' 'int'
|     | |-DeclRefExpr 0x5564bdaf1770 <col:53> 'T' lvalue ParmVar 0x5564bdac17c8 'x' 'T &'
|     | `-DeclRefExpr 0x5564bdaf1790 <col:56> 'const V' lvalue ParmVar 0x5564bdac1868 'default_value' 'const V &'
|     `-ReturnStmt 0x5564bdaf1820 <line:411:9, col:17>
|       `-UnaryOperator 0x5564bdaf1808 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf17f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdac1ed8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5564bdac1ac0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac1b38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac1e38 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5564bdac1bf8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac1c70 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac1d18 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf19b0 <col:53, line:425:5>
|     `-ReturnStmt 0x5564bdaf19a0 <line:424:9, col:42>
|       `-CallExpr 0x5564bdaf1960 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf1860 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf18e0 <col:21> 'const char *' lvalue ParmVar 0x5564bdac1bf8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf1900 <col:30> 'int' 0
|         |-DeclRefExpr 0x5564bdaf1920 <col:33> 'P' lvalue ParmVar 0x5564bdac1c70 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf1940 <col:41> 'T' lvalue ParmVar 0x5564bdac1d18 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdac2328 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5564bdac1f48 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac1fc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac2288 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5564bdac2088 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac2100 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac21a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf1b28 <col:55, line:429:5>
|     `-ReturnStmt 0x5564bdaf1b18 <line:428:9, col:50>
|       `-CallExpr 0x5564bdaf1ad8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf19d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf1a58 <col:21> 'const char *' lvalue ParmVar 0x5564bdac2088 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf1a78 <col:30> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5564bdaf1a98 <col:41> 'P' lvalue ParmVar 0x5564bdac2100 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf1ab8 <col:49> 'T' lvalue ParmVar 0x5564bdac21a8 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdac2778 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5564bdac2398 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac2418 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac26d8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5564bdac24d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac2550 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac25f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf1ca0 <col:55, line:433:5>
|     `-ReturnStmt 0x5564bdaf1c90 <line:432:9, col:51>
|       `-CallExpr 0x5564bdaf1c50 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf1b50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf1bd0 <col:21> 'const char *' lvalue ParmVar 0x5564bdac24d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf1bf0 <col:30> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int'
|         |-DeclRefExpr 0x5564bdaf1c10 <col:42> 'P' lvalue ParmVar 0x5564bdac2550 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf1c30 <col:50> 'T' lvalue ParmVar 0x5564bdac25f8 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdac2bc8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5564bdac27e8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac2868 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac2b28 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5564bdac2928 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac29a0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac2a48 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf1ec8 <col:56, line:437:5>
|     `-ReturnStmt 0x5564bdaf1eb8 <line:436:9, col:63>
|       `-CallExpr 0x5564bdaf1e78 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf1cc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf1d48 <col:21> 'const char *' lvalue ParmVar 0x5564bdac2928 'keyword' 'const char *'
|         |-BinaryOperator 0x5564bdaf1e18 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5564bdaf1dc8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5564bdaf1da8 <col:30> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5564bdaf1e00 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5564bdaf1de0 <col:42> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5564bdaf1e38 <col:54> 'P' lvalue ParmVar 0x5564bdac29a0 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf1e58 <col:62> 'T' lvalue ParmVar 0x5564bdac2a48 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdac30f8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5564bdac2c38 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac2cb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac3058 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5564bdac2d78 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac2df8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdac2e70 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac2f18 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf2030 <col:64, line:442:5>
|     |-CallExpr 0x5564bdaf1fb0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5564bdaf1ee0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5564bdaf1f20 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5564bdaf1f30 <col:30> 'const char *' lvalue ParmVar 0x5564bdac2d78 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5564bdaf1f50 <col:39> 'int' lvalue ParmVar 0x5564bdac2df8 'flags' 'int'
|     | |-DeclRefExpr 0x5564bdaf1f70 <col:46> 'P' lvalue ParmVar 0x5564bdac2e70 'parser' 'P'
|     | `-DeclRefExpr 0x5564bdaf1f90 <col:54> 'T' lvalue ParmVar 0x5564bdac2f18 'x' 'T &'
|     `-ReturnStmt 0x5564bdaf2020 <line:441:9, col:17>
|       `-UnaryOperator 0x5564bdaf2008 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf1ff8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdac36f8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5564bdac3170 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac31e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5564bdac3268 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5564bdac3658 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5564bdac3330 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac33a8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac3448 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5564bdac3518 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5564bdaf21c8 <col:84, line:458:5>
|     `-ReturnStmt 0x5564bdaf21b8 <line:457:9, col:64>
|       `-CallExpr 0x5564bdaf2170 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf2060 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf20d0 <col:28> 'const char *' lvalue ParmVar 0x5564bdac3330 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf20f0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5564bdaf2110 <col:40> 'P' lvalue ParmVar 0x5564bdac33a8 'parser' 'P'
|         |-DeclRefExpr 0x5564bdaf2130 <col:48> 'T' lvalue ParmVar 0x5564bdac3448 'x' 'T &'
|         `-DeclRefExpr 0x5564bdaf2150 <col:51> 'const V' lvalue ParmVar 0x5564bdac3518 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5564bdac3c78 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5564bdac3770 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac37e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5564bdac3868 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5564bdac3bd8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5564bdac3930 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac39a8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac3a48 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5564bdac3ae8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5564bdaf2358 <col:86, line:462:5>
|     `-ReturnStmt 0x5564bdaf2348 <line:461:9, col:73>
|       `-CallExpr 0x5564bdaf2300 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf21f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf2260 <col:28> 'const char *' lvalue ParmVar 0x5564bdac3930 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf2280 <col:37> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int'
|         |-DeclRefExpr 0x5564bdaf22a0 <col:49> 'P' lvalue ParmVar 0x5564bdac39a8 'parser' 'P'
|         |-DeclRefExpr 0x5564bdaf22c0 <col:57> 'T' lvalue ParmVar 0x5564bdac3a48 'x' 'T &'
|         `-DeclRefExpr 0x5564bdaf22e0 <col:60> 'const V' lvalue ParmVar 0x5564bdac3ae8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5564bdac42d8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5564bdac3cf0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac3d68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5564bdac3de8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5564bdac4238 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5564bdac3eb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac3f30 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdac3fa8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac4048 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5564bdac40e8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5564bdaf24e8 <col:95, line:467:5>
|     |-CallExpr 0x5564bdaf2460 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5564bdaf2370 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5564bdaf23b0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5564bdaf23c0 <col:37> 'const char *' lvalue ParmVar 0x5564bdac3eb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5564bdaf23e0 <col:46> 'int' lvalue ParmVar 0x5564bdac3f30 'flags' 'int'
|     | |-DeclRefExpr 0x5564bdaf2400 <col:53> 'P' lvalue ParmVar 0x5564bdac3fa8 'parser' 'P'
|     | |-DeclRefExpr 0x5564bdaf2420 <col:61> 'T' lvalue ParmVar 0x5564bdac4048 'x' 'T &'
|     | `-DeclRefExpr 0x5564bdaf2440 <col:64> 'const V' lvalue ParmVar 0x5564bdac40e8 'default_value' 'const V &'
|     `-ReturnStmt 0x5564bdaf24d8 <line:466:9, col:17>
|       `-UnaryOperator 0x5564bdaf24c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf24b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdac48b8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5564bdac4358 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac43d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5564bdac4458 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5564bdac4818 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5564bdac4520 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac4598 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac4638 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5564bdac46d8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5564bdaf2690 <col:63, line:481:5>
|     `-ReturnStmt 0x5564bdaf2680 <line:480:9, col:47>
|       `-CallExpr 0x5564bdaf2638 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf2518 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf2598 <col:21> 'const char *' lvalue ParmVar 0x5564bdac4520 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf25b8 <col:30> 'int' 0
|         |-DeclRefExpr 0x5564bdaf25d8 <col:33> 'P' lvalue ParmVar 0x5564bdac4598 'parser' 'P'
|         |-DeclRefExpr 0x5564bdaf25f8 <col:41> 'T1' lvalue ParmVar 0x5564bdac4638 'x1' 'T1 &'
|         `-DeclRefExpr 0x5564bdaf2618 <col:45> 'T2' lvalue ParmVar 0x5564bdac46d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5564bdac4e38 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5564bdac4930 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac49a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5564bdac4a28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5564bdac4d98 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5564bdac4af0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac4b68 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac4c08 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5564bdac4ca8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5564bdaf2830 <col:65, line:485:5>
|     `-ReturnStmt 0x5564bdaf2820 <line:484:9, col:55>
|       `-CallExpr 0x5564bdaf27d8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf26b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf2738 <col:21> 'const char *' lvalue ParmVar 0x5564bdac4af0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf2758 <col:30> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5564bdaf2778 <col:41> 'P' lvalue ParmVar 0x5564bdac4b68 'parser' 'P'
|         |-DeclRefExpr 0x5564bdaf2798 <col:49> 'T1' lvalue ParmVar 0x5564bdac4c08 'x1' 'T1 &'
|         `-DeclRefExpr 0x5564bdaf27b8 <col:53> 'T2' lvalue ParmVar 0x5564bdac4ca8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5564bdac53b8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5564bdac4eb0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac4f28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5564bdac4fa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5564bdac5318 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5564bdac5070 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac50e8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac5188 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5564bdac5228 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5564bdaf29d0 <col:65, line:489:5>
|     `-ReturnStmt 0x5564bdaf29c0 <line:488:9, col:56>
|       `-CallExpr 0x5564bdaf2978 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf2858 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf28d8 <col:21> 'const char *' lvalue ParmVar 0x5564bdac5070 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf28f8 <col:30> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int'
|         |-DeclRefExpr 0x5564bdaf2918 <col:42> 'P' lvalue ParmVar 0x5564bdac50e8 'parser' 'P'
|         |-DeclRefExpr 0x5564bdaf2938 <col:50> 'T1' lvalue ParmVar 0x5564bdac5188 'x1' 'T1 &'
|         `-DeclRefExpr 0x5564bdaf2958 <col:54> 'T2' lvalue ParmVar 0x5564bdac5228 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5564bdac5938 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5564bdac5430 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac54a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5564bdac5528 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| |-CXXMethodDecl 0x5564bdac5898 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
| | |-ParmVarDecl 0x5564bdac55f0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5564bdac5668 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x5564bdac5708 <col:50, col:54> col:54 referenced x1 'T1 &'
| | |-ParmVarDecl 0x5564bdac57a8 <col:58, col:62> col:62 referenced x2 'T2 &'
| | `-CompoundStmt 0x5564bdaf2c20 <col:66, line:493:5>
| |   `-ReturnStmt 0x5564bdaf2c10 <line:492:9, col:68>
| |     `-CallExpr 0x5564bdaf2bc8 <col:16, col:68> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5564bdaf29f8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5564bdaf2a78 <col:21> 'const char *' lvalue ParmVar 0x5564bdac55f0 'keyword' 'const char *'
| |       |-BinaryOperator 0x5564bdaf2b48 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5564bdaf2af8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5564bdaf2ad8 <col:30> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5564bdaf2b30 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5564bdaf2b10 <col:42> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x5564bdaf2b68 <col:54> 'P' lvalue ParmVar 0x5564bdac5668 'parser' 'P'
| |       |-DeclRefExpr 0x5564bdaf2b88 <col:62> 'T1' lvalue ParmVar 0x5564bdac5708 'x1' 'T1 &'
| |       `-DeclRefExpr 0x5564bdaf2ba8 <col:66> 'T2' lvalue ParmVar 0x5564bdac57a8 'x2' 'T2 &'
| `-CXXMethodDecl 0x5564bdb235f8 <line:491:5, line:493:5> line:491:11 used read_mp 'Args &(const char *, IPPrefixArg, IPAddress &, IPAddress &)'
|   |-TemplateArgument type 'IPPrefixArg'
|   |-TemplateArgument type 'IPAddress'
|   |-TemplateArgument type 'IPAddress'
|   |-ParmVarDecl 0x5564bdb23278 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5564bdb23318 <col:40, col:42> col:42 parser 'IPPrefixArg':'IPPrefixArg'
|   |-ParmVarDecl 0x5564bdb233e8 <col:50, col:54> col:54 x1 'IPAddress &'
|   `-ParmVarDecl 0x5564bdb234b8 <col:58, col:62> col:62 x2 'IPAddress &'
|-FunctionTemplateDecl 0x5564bdac5f98 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5564bdac59b0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac5a28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5564bdac5aa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5564bdac5ef8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5564bdac5b70 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac5bf0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdac5c68 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac5d08 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5564bdac5da8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5564bdaf2db0 <col:74, line:498:5>
|     |-CallExpr 0x5564bdaf2d28 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5564bdaf2c38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5564bdaf2c78 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5564bdaf2c88 <col:30> 'const char *' lvalue ParmVar 0x5564bdac5b70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5564bdaf2ca8 <col:39> 'int' lvalue ParmVar 0x5564bdac5bf0 'flags' 'int'
|     | |-DeclRefExpr 0x5564bdaf2cc8 <col:46> 'P' lvalue ParmVar 0x5564bdac5c68 'parser' 'P'
|     | |-DeclRefExpr 0x5564bdaf2ce8 <col:54> 'T1' lvalue ParmVar 0x5564bdac5d08 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5564bdaf2d08 <col:58> 'T2' lvalue ParmVar 0x5564bdac5da8 'x2' 'T2 &'
|     `-ReturnStmt 0x5564bdaf2da0 <line:497:9, col:17>
|       `-UnaryOperator 0x5564bdaf2d88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf2d78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdac62f8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5564bdac6018 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5564bdac6258 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5564bdac60d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac6148 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5564bdaf2ef8 <col:52, line:509:5>
|     `-ReturnStmt 0x5564bdaf2ee8 <line:508:9, col:44>
|       `-CallExpr 0x5564bdaf2eb0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf2de0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf2e50 <col:26> 'const char *' lvalue ParmVar 0x5564bdac60d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf2e70 <col:35> 'int' 0
|         `-DeclRefExpr 0x5564bdaf2e90 <col:38> 'P' lvalue ParmVar 0x5564bdac6148 'parser' 'P'
|-FunctionTemplateDecl 0x5564bdac65f8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5564bdac6360 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5564bdac6558 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5564bdac6410 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac6488 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5564bdaf3038 <col:54, line:513:5>
|     `-ReturnStmt 0x5564bdaf3028 <line:512:9, col:52>
|       `-CallExpr 0x5564bdaf2ff0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf2f20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf2f90 <col:26> 'const char *' lvalue ParmVar 0x5564bdac6410 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf2fb0 <col:35> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5564bdaf2fd0 <col:46> 'P' lvalue ParmVar 0x5564bdac6488 'parser' 'P'
|-FunctionTemplateDecl 0x5564bdac68f8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5564bdac6660 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5564bdac6858 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5564bdac6710 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac6788 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5564bdaf3178 <col:54, line:517:5>
|     `-ReturnStmt 0x5564bdaf3168 <line:516:9, col:53>
|       `-CallExpr 0x5564bdaf3130 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf3060 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf30d0 <col:26> 'const char *' lvalue ParmVar 0x5564bdac6710 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf30f0 <col:35> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int'
|         `-DeclRefExpr 0x5564bdaf3110 <col:47> 'P' lvalue ParmVar 0x5564bdac6788 'parser' 'P'
|-FunctionTemplateDecl 0x5564bdac6bf8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5564bdac6960 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5564bdac6b58 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5564bdac6a10 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac6a88 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5564bdaf3368 <col:55, line:521:5>
|     `-ReturnStmt 0x5564bdaf3358 <line:520:9, col:65>
|       `-CallExpr 0x5564bdaf3320 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf31a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf3210 <col:26> 'const char *' lvalue ParmVar 0x5564bdac6a10 'keyword' 'const char *'
|         |-BinaryOperator 0x5564bdaf32e0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5564bdaf3290 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5564bdaf3270 <col:35> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5564bdaf32c8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5564bdaf32a8 <col:47> 'const int' lvalue Var 0x5564bdabe3d0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5564bdaf3300 <col:59> 'P' lvalue ParmVar 0x5564bdac6a88 'parser' 'P'
|-FunctionTemplateDecl 0x5564bdac6fc8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5564bdac6c60 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5564bdac6f28 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5564bdac6d10 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac6d90 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdac6e08 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5564bdaf34a8 <col:63, line:526:5>
|     |-CallExpr 0x5564bdaf3430 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5564bdaf3380 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5564bdaf33c0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5564bdaf33d0 <col:35> 'const char *' lvalue ParmVar 0x5564bdac6d10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5564bdaf33f0 <col:44> 'int' lvalue ParmVar 0x5564bdac6d90 'flags' 'int'
|     | `-DeclRefExpr 0x5564bdaf3410 <col:51> 'P' lvalue ParmVar 0x5564bdac6e08 'parser' 'P'
|     `-ReturnStmt 0x5564bdaf3498 <line:525:9, col:17>
|       `-UnaryOperator 0x5564bdaf3480 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf3470 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdac7418 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5564bdac7038 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac70b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac7378 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5564bdac7178 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac71f0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac7298 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf3600 <col:58, line:541:5>
|     `-ReturnStmt 0x5564bdaf35f0 <line:540:9, col:39>
|       `-CallExpr 0x5564bdaf35b8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf34d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf3558 <col:21> 'const char *' lvalue ParmVar 0x5564bdac7178 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf3578 <col:30> 'P' lvalue ParmVar 0x5564bdac71f0 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf3598 <col:38> 'T' lvalue ParmVar 0x5564bdac7298 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdac7868 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5564bdac7488 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac7508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac77c8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5564bdac75c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac7640 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac76e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf3738 <col:60, line:545:5>
|     `-ReturnStmt 0x5564bdaf3728 <line:544:9, col:41>
|       `-CallExpr 0x5564bdaf36f0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf3628 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf3690 <col:23> 'const char *' lvalue ParmVar 0x5564bdac75c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf36b0 <col:32> 'P' lvalue ParmVar 0x5564bdac7640 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf36d0 <col:40> 'T' lvalue ParmVar 0x5564bdac76e8 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdac7cb8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5564bdac78d8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac7958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac7c18 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5564bdac7a18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac7a90 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac7b38 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf3870 <col:60, line:549:5>
|     `-ReturnStmt 0x5564bdaf3860 <line:548:9, col:41>
|       `-CallExpr 0x5564bdaf3828 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf3760 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf37c8 <col:23> 'const char *' lvalue ParmVar 0x5564bdac7a18 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf37e8 <col:32> 'P' lvalue ParmVar 0x5564bdac7a90 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf3808 <col:40> 'T' lvalue ParmVar 0x5564bdac7b38 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdac8108 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5564bdac7d28 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac7da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac8068 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5564bdac7e68 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac7ee0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac7f88 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf39a8 <col:61, line:553:5>
|     `-ReturnStmt 0x5564bdaf3998 <line:552:9, col:42>
|       `-CallExpr 0x5564bdaf3960 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf3898 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf3900 <col:24> 'const char *' lvalue ParmVar 0x5564bdac7e68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf3920 <col:33> 'P' lvalue ParmVar 0x5564bdac7ee0 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf3940 <col:41> 'T' lvalue ParmVar 0x5564bdac7f88 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdac85e8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5564bdac8178 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdac81f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdac8548 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5564bdac82b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac8338 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdac83b0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdac8458 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf3b20 <col:69, line:557:5>
|     `-ReturnStmt 0x5564bdaf3b10 <line:556:9, col:46>
|       `-CallExpr 0x5564bdaf3ad0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf39d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf3a50 <col:21> 'const char *' lvalue ParmVar 0x5564bdac82b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf3a70 <col:30> 'int' lvalue ParmVar 0x5564bdac8338 'flags' 'int'
|         |-DeclRefExpr 0x5564bdaf3a90 <col:37> 'P' lvalue ParmVar 0x5564bdac83b0 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf3ab0 <col:45> 'T' lvalue ParmVar 0x5564bdac8458 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdac88f8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5564bdac8660 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5564bdac8858 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5564bdac8710 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac8788 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5564bdaf3c60 <col:56, line:571:5>
|     `-ReturnStmt 0x5564bdaf3c50 <line:570:9, col:48>
|       `-CallExpr 0x5564bdaf3c18 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf3b48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf3bb8 <col:30> 'const char *' lvalue ParmVar 0x5564bdac8710 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf3bd8 <col:39> 'int' 0
|         `-DeclRefExpr 0x5564bdaf3bf8 <col:42> 'P' lvalue ParmVar 0x5564bdac8788 'parser' 'P'
|-FunctionTemplateDecl 0x5564bdace788 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5564bdac8960 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5564bdace6e8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5564bdac8a10 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdac8a90 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdace600 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5564bdaf5f48 <col:67, line:576:5>
|     |-CallExpr 0x5564bdaf5ed0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5564bdaf3c78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5564bdaf3cb8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5564bdaf3cc8 <col:39> 'const char *' lvalue ParmVar 0x5564bdac8a10 'keyword' 'const char *'
|     | |-BinaryOperator 0x5564bdaf3d78 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5564bdaf3d28 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5564bdaf3ce8 <col:48> 'int' lvalue ParmVar 0x5564bdac8a90 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5564bdaf3d60 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5564bdaf3d40 <col:56> 'const int' lvalue Var 0x5564bdabe5c0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5564bdaf5eb0 <col:68> 'P' lvalue ParmVar 0x5564bdace600 'parser' 'P'
|     `-ReturnStmt 0x5564bdaf5f38 <line:575:9, col:17>
|       `-UnaryOperator 0x5564bdaf5f20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf5f10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdacebd8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5564bdace7f8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdace878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdaceb38 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5564bdace938 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdace9b0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdacea58 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf60b8 <col:62, line:592:5>
|     `-ReturnStmt 0x5564bdaf60a8 <line:591:9, col:51>
|       `-CallExpr 0x5564bdaf6068 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf5f78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf5fe8 <col:30> 'const char *' lvalue ParmVar 0x5564bdace938 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf6008 <col:39> 'int' 0
|         |-DeclRefExpr 0x5564bdaf6028 <col:42> 'P' lvalue ParmVar 0x5564bdace9b0 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf6048 <col:50> 'T' lvalue ParmVar 0x5564bdacea58 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdacf0b8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5564bdacec48 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdacecc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdacf018 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5564bdaced88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdacee08 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdacee80 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdacef28 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf62b0 <col:73, line:597:5>
|     |-CallExpr 0x5564bdaf6230 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5564bdaf60d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5564bdaf6110 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5564bdaf6120 <col:39> 'const char *' lvalue ParmVar 0x5564bdaced88 'keyword' 'const char *'
|     | |-BinaryOperator 0x5564bdaf61d0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5564bdaf6180 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5564bdaf6140 <col:48> 'int' lvalue ParmVar 0x5564bdacee08 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5564bdaf61b8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5564bdaf6198 <col:56> 'const int' lvalue Var 0x5564bdabe5c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5564bdaf61f0 <col:68> 'P' lvalue ParmVar 0x5564bdacee80 'parser' 'P'
|     | `-DeclRefExpr 0x5564bdaf6210 <col:76> 'T' lvalue ParmVar 0x5564bdacef28 'x' 'T &'
|     `-ReturnStmt 0x5564bdaf62a0 <line:596:9, col:17>
|       `-UnaryOperator 0x5564bdaf6288 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf6278 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdacf668 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5564bdacf130 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdacf1a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdacf5c8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5564bdacf268 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdacf2e0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdacf4a0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5564bdaf6420 <col:65, line:614:5>
|     `-ReturnStmt 0x5564bdaf6410 <line:613:9, col:46>
|       `-CallExpr 0x5564bdaf63d0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf62e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf6350 <col:25> 'const char *' lvalue ParmVar 0x5564bdacf268 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf6370 <col:34> 'int' 0
|         |-DeclRefExpr 0x5564bdaf6390 <col:37> 'P' lvalue ParmVar 0x5564bdacf2e0 'parser' 'P'
|         `-DeclRefExpr 0x5564bdaf63b0 <col:45> 'Vector<T>' lvalue ParmVar 0x5564bdacf4a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5564bdacfa98 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5564bdacf6d8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5564bdacf9f8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5564bdacf790 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdacf8e0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5564bdaf6640 <col:55, line:618:5>
|     `-ReturnStmt 0x5564bdaf6630 <line:617:9, col:55>
|       `-CallExpr 0x5564bdaf65f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf6448 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf64b8 <col:25> 'const char *' lvalue ParmVar 0x5564bdacf790 'keyword' 'const char *'
|         |-IntegerLiteral 0x5564bdaf64d8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5564bdaf65b0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5564bdaf65d0 <col:54> 'Vector<T>' lvalue ParmVar 0x5564bdacf8e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5564bdad0068 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5564bdacfb00 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdacfb78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdacffc8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5564bdacfc38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdacfcb8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdacfd30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdacfe80 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5564bdaf6838 <col:76, line:623:5>
|     |-CallExpr 0x5564bdaf67b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5564bdaf6658 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5564bdaf6698 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5564bdaf66a8 <col:34> 'const char *' lvalue ParmVar 0x5564bdacfc38 'keyword' 'const char *'
|     | |-BinaryOperator 0x5564bdaf6758 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5564bdaf6708 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5564bdaf66c8 <col:43> 'int' lvalue ParmVar 0x5564bdacfcb8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5564bdaf6740 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5564bdaf6720 <col:51> 'const int' lvalue Var 0x5564bdabe5c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5564bdaf6778 <col:63> 'P' lvalue ParmVar 0x5564bdacfd30 'parser' 'P'
|     | `-DeclRefExpr 0x5564bdaf6798 <col:71> 'Vector<T>' lvalue ParmVar 0x5564bdacfe80 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5564bdaf6828 <line:622:9, col:17>
|       `-UnaryOperator 0x5564bdaf6810 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf6800 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdad05a8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5564bdad00e0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdad0158 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdad0508 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5564bdad0218 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad0298 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad03e0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5564bdaf6aa0 <col:66, line:627:5>
|     `-ReturnStmt 0x5564bdaf6a90 <line:626:9, col:59>
|       `-CallExpr 0x5564bdaf6a50 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5564bdaf6868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5564bdaf68d8 <col:25> 'const char *' lvalue ParmVar 0x5564bdad0218 'keyword' 'const char *'
|         |-DeclRefExpr 0x5564bdaf68f8 <col:34> 'int' lvalue ParmVar 0x5564bdad0298 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5564bdaf6a10 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5564bdaf6a30 <col:58> 'Vector<T>' lvalue ParmVar 0x5564bdad03e0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5564bdad0638 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5564bdaf6b20 <col:25, line:633:5>
|   `-ReturnStmt 0x5564bdaf6b10 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5564bdaf6af8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5564bdaf6ac8 <col:16> 'const bool' lvalue ->_status 0x5564bdad6478
|         `-CXXThisExpr 0x5564bdaf6ab8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5564bdad07b8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5564bdad06f0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5564bdaf6c08 <col:27, line:639:5>
|   |-BinaryOperator 0x5564bdaf6bb0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5564bdaf6b38 <col:9> 'bool' lvalue ParmVar 0x5564bdad06f0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5564bdaf6b98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5564bdaf6b68 <col:13> 'bool' lvalue ->_status 0x5564bdad6478
|   |     `-CXXThisExpr 0x5564bdaf6b58 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5564bdaf6bf8 <line:638:9, col:17>
|     `-UnaryOperator 0x5564bdaf6be0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bdaf6bd0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5564bdad0938 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5564bdad0878 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5564bdaf6cf8 <col:39, line:644:5>
|   |-BinaryOperator 0x5564bdaf6ca0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5564bdaf6c28 <col:9> 'bool' lvalue ParmVar 0x5564bdad0878 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5564bdaf6c88 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5564bdaf6c58 <col:13> 'const bool' lvalue ->_status 0x5564bdad6478
|   |     `-CXXThisExpr 0x5564bdaf6c48 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5564bdaf6ce8 <line:643:9, col:17>
|     `-UnaryOperator 0x5564bdaf6cd0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bdaf6cc0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5564bdad0a00 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5564bdaf6da0 <col:30, line:651:5>
|   `-ReturnStmt 0x5564bdaf6d90 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5564bdaf6d78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5564bdaf6d48 <col:16> 'bool' lvalue ->_read_status 0x5564bdab6d90
|         `-ImplicitCastExpr 0x5564bdaf6d28 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5564bdaf6d18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5564bdad0b48 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5564bdad0ab8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5564bdaf6ea8 <col:32, line:658:5>
|   |-BinaryOperator 0x5564bdaf6e50 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5564bdaf6db8 <col:9> 'bool' lvalue ParmVar 0x5564bdad0ab8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5564bdaf6e38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5564bdaf6e08 <col:13> 'bool' lvalue ->_read_status 0x5564bdab6d90
|   |     `-ImplicitCastExpr 0x5564bdaf6de8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5564bdaf6dd8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5564bdaf6e98 <line:657:9, col:17>
|     `-UnaryOperator 0x5564bdaf6e80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bdaf6e70 <col:17> 'Args *' this
|-CXXMethodDecl 0x5564bdad0c98 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5564bdad0c08 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5564bdaf6fb8 <col:44, line:663:5>
|   |-BinaryOperator 0x5564bdaf6f60 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5564bdaf6ec8 <col:9> 'bool' lvalue ParmVar 0x5564bdad0c08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5564bdaf6f48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5564bdaf6f18 <col:13> 'bool' lvalue ->_read_status 0x5564bdab6d90
|   |     `-ImplicitCastExpr 0x5564bdaf6ef8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5564bdaf6ee8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5564bdaf6fa8 <line:662:9, col:17>
|     `-UnaryOperator 0x5564bdaf6f90 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bdaf6f80 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5564bdad0d60 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5564bdad0e28 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5564bdad0ef0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5564bdad0fb8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5564bdad12c8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5564bdad1058 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5564bdad1228 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5564bdad1138 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf7370 <col:19, line:706:5>
|     `-IfStmt 0x5564bdaf7348 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5564bdaf70b8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5564bdaf7278 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5564bdaf7248 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5564bdaf7208 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5564bdaf7110 <col:42> '<bound member function type>' ->simple_slot 0x5564bdaefce0
|       |     | `-CXXThisExpr 0x5564bdaf7100 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5564bdaf71a8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5564bdaf7160 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5564bd849b18
|       |     | `-DeclRefExpr 0x5564bdaf7140 <col:55> 'T' lvalue ParmVar 0x5564bdad1138 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5564bdaf71e8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5564bdaf7338 <line:705:13, col:34>
|         `-CallExpr 0x5564bdaf7310 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5564bdaf7298 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5564bdaf72f0 <col:33> 'T' lvalue ParmVar 0x5564bdad1138 'x' 'T &'
|-FunctionTemplateDecl 0x5564bdad1598 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5564bdad1328 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5564bdad14f8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5564bdad1408 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5564bdaf7750 <col:31, line:717:5>
|     |-DeclStmt 0x5564bdaf74b0 <line:713:9, col:23>
|     | `-VarDecl 0x5564bdaf7398 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5564bdaf7488 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5564bdaf7410 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5564bdaf7468 <col:21> 'T' lvalue ParmVar 0x5564bdad1408 'x' 'T &'
|     |-IfStmt 0x5564bdaf7700 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5564bdaf75a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5564bdaf76e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5564bdaf7680 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5564bdaf7610 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|     |   | `-DeclRefExpr 0x5564bdaf75f0 <col:14> 'T *' lvalue Var 0x5564bdaf7398 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5564bdaf76c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5564bdaf7738 <line:716:9, col:16>
|       `-DeclRefExpr 0x5564bdaf7718 <col:16> 'T *' lvalue Var 0x5564bdaf7398 's' 'T *'
|-FunctionTemplateDecl 0x5564bdad19a8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5564bdad15f8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5564bdad1678 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5564bdad1908 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5564bdad1758 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5564bdad17f8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5564bdaf7a60 <col:37, line:726:5>
|     |-IfStmt 0x5564bdaf79f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5564bdaf7a10 <line:723:13, col:26>
|     | | `-VarDecl 0x5564bdaf77b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5564bdaf78a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5564bdaf7830 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5564bdaf7888 <col:25> 'T' lvalue ParmVar 0x5564bdad1758 'x' 'T &'
|     | |-DeclRefExpr 0x5564bdaf78d0 <col:16> 'T *' lvalue Var 0x5564bdaf77b8 's' 'T *'
|     | `-BinaryOperator 0x5564bdaf79d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5564bdaf7980 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5564bdaf7910 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|     |   | `-DeclRefExpr 0x5564bdaf78f0 <col:14> 'T *' lvalue Var 0x5564bdaf77b8 's' 'T *'
|     |   `-DeclRefExpr 0x5564bdaf79b0 <col:18> 'const V' lvalue ParmVar 0x5564bdad17f8 'value' 'const V &'
|     `-ReturnStmt 0x5564bdaf7a50 <line:725:9, col:17>
|       `-UnaryOperator 0x5564bdaf7a38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5564bdaf7a28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5564bdad1da8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5564bdad1a10 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5564bdad1d08 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5564bdad1ac0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad1b40 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad1be8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5564bdaf8880 <col:65, line:737:5>
|     |-DeclStmt 0x5564bdaf7af8 <line:732:9, col:26>
|     | `-VarDecl 0x5564bdaf7a90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5564bdaf8848 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5564bdaf8868 <line:733:13, col:58>
|       | `-VarDecl 0x5564bdaf7b20 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5564bdaf7d00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5564bdaf7cd0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5564bdaf7cb8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5564bdaf7c98 <col:26, col:58> 'String' (CXXTemporary 0x5564bdaf7c98)
|       |           `-CXXMemberCallExpr 0x5564bdaf7c28 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5564bdaf7b98 <col:26> '<bound member function type>' ->find 0x5564bdaef2f8
|       |             | `-CXXThisExpr 0x5564bdaf7b88 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5564bdaf7c60 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5564bdaf7bc8 <col:31> 'const char *' lvalue ParmVar 0x5564bdad1ac0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5564bdaf7c78 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5564bdaf7be8 <col:40> 'int' lvalue ParmVar 0x5564bdad1b40 'flags' 'int'
|       |             `-DeclRefExpr 0x5564bdaf7c08 <col:47> 'Args::Slot *' lvalue Var 0x5564bdaf7a90 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5564bdaf7db8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5564bdaf7da0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5564bdaf7d80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5564bdaf7d50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5564bd80bad8
|       |       `-ImplicitCastExpr 0x5564bdaf7d38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5564bdaf7d18 <col:20> 'String' lvalue Var 0x5564bdaf7b20 'str' 'String'
|       `-CompoundStmt 0x5564bdaf8828 <col:61, line:736:9>
|         |-DeclStmt 0x5564bdaf8270 <line:734:13, col:76>
|         | `-VarDecl 0x5564bdaf7e08 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5564bdaf8240 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5564bdaf81b0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5564bdaf81f8 <col:60> 'T' lvalue ParmVar 0x5564bdad1be8 'variable' 'T &'
|         |     `-UnaryOperator 0x5564bdaf8228 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5564bdaf8218 <col:71> 'Args *' this
|         `-CallExpr 0x5564bdaf87f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5564bdaf8298 <col:13> '<bound member function type>' ->postparse 0x5564bdaef508
|           | `-CXXThisExpr 0x5564bdaf8288 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5564bdaf87b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5564bdaf82c8 <col:23> 'T *' lvalue Var 0x5564bdaf7e08 's' 'T *'
|           | `-CallExpr 0x5564bdaf8778 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5564bdaf8550 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5564bdaf8650 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5564bdaf8670 <col:86> 'String' lvalue Var 0x5564bdaf7b20 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5564bdaf8720 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5564bdaf86b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|           |   | `-DeclRefExpr 0x5564bdaf8690 <col:92> 'T *' lvalue Var 0x5564bdaf7e08 's' 'T *'
|           |   `-UnaryOperator 0x5564bdaf8760 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5564bdaf8750 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5564bdaf87d8 <col:103> 'Args::Slot *' lvalue Var 0x5564bdaf7a90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5564bdad22f8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5564bdad1e18 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5564bdad1e98 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5564bdad2258 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5564bdad1f58 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad1fd8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad2078 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5564bdad2118 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5564bdaf9720 <col:88, line:745:5>
|     |-DeclStmt 0x5564bdaf8918 <line:741:9, col:26>
|     | `-VarDecl 0x5564bdaf88b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5564bdaf8b38 <line:742:9, col:55>
|     | `-VarDecl 0x5564bdaf8940 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5564bdaf8b20 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5564bdaf8af0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5564bdaf8ad8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5564bdaf8ab8 <col:22, col:54> 'String' (CXXTemporary 0x5564bdaf8ab8)
|     |           `-CXXMemberCallExpr 0x5564bdaf8a48 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5564bdaf89b8 <col:22> '<bound member function type>' ->find 0x5564bdaef2f8
|     |             | `-CXXThisExpr 0x5564bdaf89a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5564bdaf8a80 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5564bdaf89e8 <col:27> 'const char *' lvalue ParmVar 0x5564bdad1f58 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5564bdaf8a98 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5564bdaf8a08 <col:36> 'int' lvalue ParmVar 0x5564bdad1fd8 'flags' 'int'
|     |             `-DeclRefExpr 0x5564bdaf8a28 <col:43> 'Args::Slot *' lvalue Var 0x5564bdaf88b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5564bdaf8f10 <line:743:9, col:72>
|     | `-VarDecl 0x5564bdaf8b88 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5564bdaf8ee0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5564bdaf8e50 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5564bdaf8e98 <col:56> 'T' lvalue ParmVar 0x5564bdad2078 'variable' 'T &'
|     |     `-UnaryOperator 0x5564bdaf8ec8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5564bdaf8eb8 <col:67> 'Args *' this
|     `-CallExpr 0x5564bdaf96f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5564bdaf8f38 <col:9> '<bound member function type>' ->postparse 0x5564bdaef508
|       | `-CXXThisExpr 0x5564bdaf8f28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5564bdaf96b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5564bdaf8f68 <col:19> 'T *' lvalue Var 0x5564bdaf8b88 's' 'T *'
|       | `-ParenExpr 0x5564bdaf9690 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5564bdaf9660 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5564bdaf9648 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5564bdaf9630 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5564bdaf9610 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5564bdaf95e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5564bd80bad8
|       |     |       `-ImplicitCastExpr 0x5564bdaf95c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5564bdaf8f88 <col:25> 'String' lvalue Var 0x5564bdaf8940 'str' 'String'
|       |     |-CallExpr 0x5564bdaf9438 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5564bdaf9210 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5564bdaf9310 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5564bdaf9330 <col:89> 'String' lvalue Var 0x5564bdaf8940 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5564bdaf93e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5564bdaf9370 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|       |     | | `-DeclRefExpr 0x5564bdaf9350 <col:95> 'T *' lvalue Var 0x5564bdaf8b88 's' 'T *'
|       |     | `-UnaryOperator 0x5564bdaf9420 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5564bdaf9410 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5564bdaf95a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5564bdaf9588 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5564bdaf9558 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5564bdaf9508 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5564bdaf9498 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|       |         | | `-DeclRefExpr 0x5564bdaf9478 <col:109> 'T *' lvalue Var 0x5564bdaf8b88 's' 'T *'
|       |         | `-DeclRefExpr 0x5564bdaf9538 <col:113> 'const V' lvalue ParmVar 0x5564bdad2118 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5564bdaf9578 <col:120> 'bool' true
|       `-DeclRefExpr 0x5564bdaf96d0 <col:128> 'Args::Slot *' lvalue Var 0x5564bdaf88b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5564bdad2828 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5564bdad2370 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdad23e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdad2788 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5564bdad24a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad2528 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad25a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdad2648 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5564bdafa318 <col:75, line:754:5>
|     |-DeclStmt 0x5564bdaf97c8 <line:749:9, col:26>
|     | `-VarDecl 0x5564bdaf9760 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5564bdafa2e0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5564bdafa300 <line:750:13, col:58>
|       | `-VarDecl 0x5564bdaf97f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5564bdaf99d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5564bdaf99a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5564bdaf9988 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5564bdaf9968 <col:26, col:58> 'String' (CXXTemporary 0x5564bdaf9968)
|       |           `-CXXMemberCallExpr 0x5564bdaf98f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5564bdaf9868 <col:26> '<bound member function type>' ->find 0x5564bdaef2f8
|       |             | `-CXXThisExpr 0x5564bdaf9858 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5564bdaf9930 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5564bdaf9898 <col:31> 'const char *' lvalue ParmVar 0x5564bdad24a8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5564bdaf9948 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5564bdaf98b8 <col:40> 'int' lvalue ParmVar 0x5564bdad2528 'flags' 'int'
|       |             `-DeclRefExpr 0x5564bdaf98d8 <col:47> 'Args::Slot *' lvalue Var 0x5564bdaf9760 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5564bdaf9a88 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5564bdaf9a70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5564bdaf9a50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5564bdaf9a20 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5564bd80bad8
|       |       `-ImplicitCastExpr 0x5564bdaf9a08 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5564bdaf99e8 <col:20> 'String' lvalue Var 0x5564bdaf97f0 'str' 'String'
|       `-CompoundStmt 0x5564bdafa2c0 <col:61, line:753:9>
|         |-DeclStmt 0x5564bdaf9e60 <line:751:13, col:63>
|         | `-VarDecl 0x5564bdaf9ad8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5564bdaf9e30 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5564bdaf9da0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5564bdaf9de8 <col:47> 'T' lvalue ParmVar 0x5564bdad2648 'variable' 'T &'
|         |     `-UnaryOperator 0x5564bdaf9e18 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5564bdaf9e08 <col:58> 'Args *' this
|         `-CallExpr 0x5564bdafa290 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5564bdaf9e88 <col:13> '<bound member function type>' ->postparse 0x5564bdaef508
|           | `-CXXThisExpr 0x5564bdaf9e78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5564bdafa250 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5564bdaf9eb8 <col:23> 'T *' lvalue Var 0x5564bdaf9ad8 's' 'T *'
|           | `-CallExpr 0x5564bdafa210 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5564bdafa0a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5564bdafa0e8 <col:56> 'P' lvalue ParmVar 0x5564bdad25a0 'parser' 'P'
|           |   |-DeclRefExpr 0x5564bdafa108 <col:64> 'String' lvalue Var 0x5564bdaf97f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5564bdafa1b8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5564bdafa148 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|           |   | `-DeclRefExpr 0x5564bdafa128 <col:70> 'T *' lvalue Var 0x5564bdaf9ad8 's' 'T *'
|           |   `-UnaryOperator 0x5564bdafa1f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5564bdafa1e8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5564bdafa270 <col:81> 'Args::Slot *' lvalue Var 0x5564bdaf9760 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5564bdad2e88 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5564bdad28a0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5564bdad2918 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5564bdad2998 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5564bdad2de8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5564bdad2a60 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad2ae0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad2b58 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdad2bf8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5564bdad2c98 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5564bdafb0a8 <col:98, line:762:5>
|     |-DeclStmt 0x5564bdafa3b0 <line:758:9, col:26>
|     | `-VarDecl 0x5564bdafa348 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5564bdafa5d0 <line:759:9, col:55>
|     | `-VarDecl 0x5564bdafa3d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5564bdafa5b8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5564bdafa588 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5564bdafa570 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5564bdafa550 <col:22, col:54> 'String' (CXXTemporary 0x5564bdafa550)
|     |           `-CXXMemberCallExpr 0x5564bdafa4e0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5564bdafa450 <col:22> '<bound member function type>' ->find 0x5564bdaef2f8
|     |             | `-CXXThisExpr 0x5564bdafa440 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5564bdafa518 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5564bdafa480 <col:27> 'const char *' lvalue ParmVar 0x5564bdad2a60 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5564bdafa530 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5564bdafa4a0 <col:36> 'int' lvalue ParmVar 0x5564bdad2ae0 'flags' 'int'
|     |             `-DeclRefExpr 0x5564bdafa4c0 <col:43> 'Args::Slot *' lvalue Var 0x5564bdafa348 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5564bdafa9f0 <line:760:9, col:59>
|     | `-VarDecl 0x5564bdafa628 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5564bdafa9c0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5564bdafa930 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5564bdafa978 <col:43> 'T' lvalue ParmVar 0x5564bdad2bf8 'variable' 'T &'
|     |     `-UnaryOperator 0x5564bdafa9a8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5564bdafa998 <col:54> 'Args *' this
|     `-CallExpr 0x5564bdafb078 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5564bdafaa18 <col:9> '<bound member function type>' ->postparse 0x5564bdaef508
|       | `-CXXThisExpr 0x5564bdafaa08 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5564bdafb038 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5564bdafaa48 <col:19> 'T *' lvalue Var 0x5564bdafa628 's' 'T *'
|       | `-ParenExpr 0x5564bdafb018 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5564bdafafe8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5564bdafafd0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5564bdafafb8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5564bdafaf98 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5564bdafaf68 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5564bd80bad8
|       |     |       `-ImplicitCastExpr 0x5564bdafaf50 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5564bdafaa68 <col:25> 'String' lvalue Var 0x5564bdafa3d8 'str' 'String'
|       |     |-CallExpr 0x5564bdafadc0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5564bdafac50 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5564bdafac98 <col:59> 'P' lvalue ParmVar 0x5564bdad2b58 'parser' 'P'
|       |     | |-DeclRefExpr 0x5564bdafacb8 <col:67> 'String' lvalue Var 0x5564bdafa3d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5564bdafad68 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5564bdafacf8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|       |     | | `-DeclRefExpr 0x5564bdafacd8 <col:73> 'T *' lvalue Var 0x5564bdafa628 's' 'T *'
|       |     | `-UnaryOperator 0x5564bdafada8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5564bdafad98 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5564bdafaf30 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5564bdafaf10 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5564bdafaee0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5564bdafae90 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5564bdafae20 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|       |         | | `-DeclRefExpr 0x5564bdafae00 <col:87> 'T *' lvalue Var 0x5564bdafa628 's' 'T *'
|       |         | `-DeclRefExpr 0x5564bdafaec0 <col:91> 'const V' lvalue ParmVar 0x5564bdad2c98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5564bdafaf00 <col:98> 'bool' true
|       `-DeclRefExpr 0x5564bdafb058 <col:106> 'Args::Slot *' lvalue Var 0x5564bdafa348 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5564bdad34f8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5564bdad2f08 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdad2f88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5564bdad3008 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5564bdad3458 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5564bdad30d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad3150 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad31c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdad3268 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5564bdad3308 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5564bdafc088 <col:60, line:773:5>
|     |-DeclStmt 0x5564bdafb150 <line:767:9, col:26>
|     | `-VarDecl 0x5564bdafb0e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5564bdafc050 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5564bdafc070 <line:768:13, col:58>
|       | `-VarDecl 0x5564bdafb178 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5564bdafb358 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5564bdafb328 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5564bdafb310 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5564bdafb2f0 <col:26, col:58> 'String' (CXXTemporary 0x5564bdafb2f0)
|       |           `-CXXMemberCallExpr 0x5564bdafb280 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5564bdafb1f0 <col:26> '<bound member function type>' ->find 0x5564bdaef2f8
|       |             | `-CXXThisExpr 0x5564bdafb1e0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5564bdafb2b8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5564bdafb220 <col:31> 'const char *' lvalue ParmVar 0x5564bdad30d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5564bdafb2d0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5564bdafb240 <col:40> 'int' lvalue ParmVar 0x5564bdad3150 'flags' 'int'
|       |             `-DeclRefExpr 0x5564bdafb260 <col:47> 'Args::Slot *' lvalue Var 0x5564bdafb0e8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5564bdafb410 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5564bdafb3f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5564bdafb3d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5564bdafb3a8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5564bd80bad8
|       |       `-ImplicitCastExpr 0x5564bdafb390 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5564bdafb370 <col:20> 'String' lvalue Var 0x5564bdafb178 'str' 'String'
|       `-CompoundStmt 0x5564bdafc028 <col:61, line:772:9>
|         |-DeclStmt 0x5564bdafb750 <line:769:13, col:66>
|         | `-VarDecl 0x5564bdafb468 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5564bdafb720 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5564bdafb690 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5564bdafb6d8 <col:49> 'T1' lvalue ParmVar 0x5564bdad3268 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5564bdafb708 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5564bdafb6f8 <col:61> 'Args *' this
|         |-DeclStmt 0x5564bdafbac0 <line:770:13, col:66>
|         | `-VarDecl 0x5564bdafb7d8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5564bdafba90 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5564bdafba00 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5564bdafba48 <col:49> 'T2' lvalue ParmVar 0x5564bdad3308 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5564bdafba78 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5564bdafba68 <col:61> 'Args *' this
|         `-CallExpr 0x5564bdafbff8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5564bdafbae8 <col:13> '<bound member function type>' ->postparse 0x5564bdaef508
|           | `-CXXThisExpr 0x5564bdafbad8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5564bdafbfb8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5564bdafbb58 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5564bdafbb18 <col:23> 'T1 *' lvalue Var 0x5564bdafb468 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5564bdafbb38 <col:29> 'T2 *' lvalue Var 0x5564bdafb7d8 's2' 'T2 *'
|           | `-CallExpr 0x5564bdafbf70 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5564bdafbd40 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5564bdafbd88 <col:63> 'P' lvalue ParmVar 0x5564bdad31c8 'parser' 'P'
|           |   |-DeclRefExpr 0x5564bdafbda8 <col:71> 'String' lvalue Var 0x5564bdafb178 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5564bdafbe58 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5564bdafbde8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|           |   | `-DeclRefExpr 0x5564bdafbdc8 <col:77> 'T1 *' lvalue Var 0x5564bdafb468 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5564bdafbf18 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5564bdafbea8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|           |   | `-DeclRefExpr 0x5564bdafbe88 <col:82> 'T2 *' lvalue Var 0x5564bdafb7d8 's2' 'T2 *'
|           |   `-UnaryOperator 0x5564bdafbf58 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5564bdafbf48 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5564bdafbfd8 <col:94> 'Args::Slot *' lvalue Var 0x5564bdafb0e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5564bdad38e8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5564bdad3578 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5564bdad3848 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5564bdad3630 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad36b0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad3728 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5564bdafc5a0 <col:67, line:780:5>
|     |-DeclStmt 0x5564bdafc120 <line:777:9, col:26>
|     | `-VarDecl 0x5564bdafc0b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5564bdafc568 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5564bdafc588 <line:778:13, col:58>
|       | `-VarDecl 0x5564bdafc148 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5564bdafc328 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5564bdafc2f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5564bdafc2e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5564bdafc2c0 <col:26, col:58> 'String' (CXXTemporary 0x5564bdafc2c0)
|       |           `-CXXMemberCallExpr 0x5564bdafc250 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5564bdafc1c0 <col:26> '<bound member function type>' ->find 0x5564bdaef2f8
|       |             | `-CXXThisExpr 0x5564bdafc1b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5564bdafc288 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5564bdafc1f0 <col:31> 'const char *' lvalue ParmVar 0x5564bdad3630 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5564bdafc2a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5564bdafc210 <col:40> 'int' lvalue ParmVar 0x5564bdad36b0 'flags' 'int'
|       |             `-DeclRefExpr 0x5564bdafc230 <col:47> 'Args::Slot *' lvalue Var 0x5564bdafc0b8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5564bdafc3e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5564bdafc3c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5564bdafc3a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5564bdafc378 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5564bd80bad8
|       |       `-ImplicitCastExpr 0x5564bdafc360 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5564bdafc340 <col:20> 'String' lvalue Var 0x5564bdafc148 'str' 'String'
|       `-CallExpr 0x5564bdafc538 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5564bdafc408 <col:13> '<bound member function type>' ->postparse 0x5564bdaef508
|         | `-CXXThisExpr 0x5564bdafc3f8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5564bdafc4e8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5564bdafc458 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5564bdafc438 <col:23> 'P' lvalue ParmVar 0x5564bdad3728 'parser' 'P'
|         | |-DeclRefExpr 0x5564bdafc4a0 <col:36> 'String' lvalue Var 0x5564bdafc148 'str' 'String'
|         | `-UnaryOperator 0x5564bdafc4d0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5564bdafc4c0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5564bdafc518 <col:49> 'Args::Slot *' lvalue Var 0x5564bdafc0b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5564bdad3c88 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5564bdad3958 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5564bdad3be8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5564bdad3a10 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad3a90 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad3b08 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5564bdafcf10 <col:71, line:792:5>
|     |-DeclStmt 0x5564bdafc638 <line:784:9, col:26>
|     | `-VarDecl 0x5564bdafc5d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5564bdafc708 <line:785:9, col:29>
|     | `-VarDecl 0x5564bdafc668 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5564bdafc6f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5564bdafc6d0 <col:28> 'int' 1
|     |-WhileStmt 0x5564bdafcdc0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5564bdafcde0 <line:786:16, col:61>
|     | | `-VarDecl 0x5564bdafc730 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5564bdafc910 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5564bdafc8e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5564bdafc8c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5564bdafc8a8 <col:29, col:61> 'String' (CXXTemporary 0x5564bdafc8a8)
|     | |           `-CXXMemberCallExpr 0x5564bdafc838 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5564bdafc7a8 <col:29> '<bound member function type>' ->find 0x5564bdaef2f8
|     | |             | `-CXXThisExpr 0x5564bdafc798 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5564bdafc870 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5564bdafc7d8 <col:34> 'const char *' lvalue ParmVar 0x5564bdad3a10 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5564bdafc888 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5564bdafc7f8 <col:43> 'int' lvalue ParmVar 0x5564bdad3a90 'flags' 'int'
|     | |             `-DeclRefExpr 0x5564bdafc818 <col:50> 'Args::Slot *' lvalue Var 0x5564bdafc5d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5564bdafc9c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5564bdafc9b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5564bdafc990 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5564bdafc960 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5564bd80bad8
|     | |       `-ImplicitCastExpr 0x5564bdafc948 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5564bdafc928 <col:23> 'String' lvalue Var 0x5564bdafc730 'str' 'String'
|     | `-CompoundStmt 0x5564bdafcd98 <col:64, line:790:9>
|     |   |-CallExpr 0x5564bdafcb20 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5564bdafc9f0 <col:13> '<bound member function type>' ->postparse 0x5564bdaef508
|     |   | | `-CXXThisExpr 0x5564bdafc9e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5564bdafcad0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5564bdafca40 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5564bdafca20 <col:23> 'P' lvalue ParmVar 0x5564bdad3b08 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5564bdafca88 <col:36> 'String' lvalue Var 0x5564bdafc730 'str' 'String'
|     |   | | `-UnaryOperator 0x5564bdafcab8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5564bdafcaa8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5564bdafcb00 <col:49> 'Args::Slot *' lvalue Var 0x5564bdafc5d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5564bdafccb8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5564bdafcb50 <col:13> 'int' lvalue Var 0x5564bdafc668 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5564bdafcca0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5564bdafcc80 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5564bdafcbe8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5564bdafcbc8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5564bdafcbb0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5564bdafcb70 <col:28> 'int' lvalue Var 0x5564bdafc668 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5564bdafcb90 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5564bdafcc68 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5564bdafcc38 <col:49> 'bool' lvalue ->_read_status 0x5564bdab6d90
|     |   |         `-ImplicitCastExpr 0x5564bdafcc18 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5564bdafcc08 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5564bdafcd68 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5564bdafccd8 <col:13> 'int' lvalue ParmVar 0x5564bdad3a90 'flags' 'int'
|     |     `-UnaryOperator 0x5564bdafcd50 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5564bdafcd38 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5564bdafcd18 <col:23> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5564bdafcef0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5564bdafce28 <col:9> 'bool' lvalue ->_read_status 0x5564bdab6d90
|       | `-ImplicitCastExpr 0x5564bdafce08 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5564bdafcdf8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5564bdafced0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5564bdafceb0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5564bdafce98 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5564bdafce58 <col:25> 'int' lvalue Var 0x5564bdafc668 'read_status' 'int'
|           `-IntegerLiteral 0x5564bdafce78 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5564bdad4168 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5564bdad3cf8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdad3d78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdad40c8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5564bdad3e38 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad3eb8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad3f30 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdad3fd8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5564bdb01940 <col:84, line:805:5>
|     |-DeclStmt 0x5564bdafcfb8 <line:796:9, col:26>
|     | `-VarDecl 0x5564bdafcf50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5564bdafd088 <line:797:9, col:29>
|     | `-VarDecl 0x5564bdafcfe8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5564bdafd070 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5564bdafd050 <col:28> 'int' 1
|     |-DeclStmt 0x5564bdafd3c0 <line:798:9, col:71>
|     | `-VarDecl 0x5564bdafd0d8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5564bdafd390 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5564bdafd300 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5564bdafd348 <col:55> 'T' lvalue ParmVar 0x5564bdad3fd8 'variable' 'T &'
|     |     `-UnaryOperator 0x5564bdafd378 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5564bdafd368 <col:66> 'Args *' this
|     |-WhileStmt 0x5564bdafdd50 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5564bdafdd70 <line:799:16, col:61>
|     | | `-VarDecl 0x5564bdafd3e8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5564bdafd5c8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5564bdafd598 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5564bdafd580 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5564bdafd560 <col:29, col:61> 'String' (CXXTemporary 0x5564bdafd560)
|     | |           `-CXXMemberCallExpr 0x5564bdafd4f0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5564bdafd460 <col:29> '<bound member function type>' ->find 0x5564bdaef2f8
|     | |             | `-CXXThisExpr 0x5564bdafd450 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5564bdafd528 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5564bdafd490 <col:34> 'const char *' lvalue ParmVar 0x5564bdad3e38 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5564bdafd540 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5564bdafd4b0 <col:43> 'int' lvalue ParmVar 0x5564bdad3eb8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5564bdafd4d0 <col:50> 'Args::Slot *' lvalue Var 0x5564bdafcf50 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5564bdafd680 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5564bdafd668 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5564bdafd648 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5564bdafd618 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5564bd80bad8
|     | |       `-ImplicitCastExpr 0x5564bdafd600 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5564bdafd5e0 <col:23> 'String' lvalue Var 0x5564bdafd3e8 'str' 'String'
|     | `-CompoundStmt 0x5564bdafdd28 <col:64, line:803:9>
|     |   |-CallExpr 0x5564bdafdab0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5564bdafd6a8 <col:13> '<bound member function type>' ->postparse 0x5564bdaef508
|     |   | | `-CXXThisExpr 0x5564bdafd698 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5564bdafda70 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5564bdafd6d8 <col:23> 'T *' lvalue Var 0x5564bdafd0d8 's' 'T *'
|     |   | | `-CallExpr 0x5564bdafda30 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5564bdafd8c0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5564bdafd908 <col:56> 'P' lvalue ParmVar 0x5564bdad3f30 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5564bdafd928 <col:64> 'String' lvalue Var 0x5564bdafd3e8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5564bdafd9d8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5564bdafd968 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|     |   | |   | `-DeclRefExpr 0x5564bdafd948 <col:70> 'T *' lvalue Var 0x5564bdafd0d8 's' 'T *'
|     |   | |   `-UnaryOperator 0x5564bdafda18 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5564bdafda08 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5564bdafda90 <col:81> 'Args::Slot *' lvalue Var 0x5564bdafcf50 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5564bdafdc48 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5564bdafdae0 <col:13> 'int' lvalue Var 0x5564bdafcfe8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5564bdafdc30 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5564bdafdc10 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5564bdafdb78 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5564bdafdb58 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5564bdafdb40 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5564bdafdb00 <col:28> 'int' lvalue Var 0x5564bdafcfe8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5564bdafdb20 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5564bdafdbf8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5564bdafdbc8 <col:49> 'bool' lvalue ->_read_status 0x5564bdab6d90
|     |   |         `-ImplicitCastExpr 0x5564bdafdba8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5564bdafdb98 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5564bdafdcf8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5564bdafdc68 <col:13> 'int' lvalue ParmVar 0x5564bdad3eb8 'flags' 'int'
|     |     `-UnaryOperator 0x5564bdafdce0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5564bdafdcc8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5564bdafdca8 <col:23> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5564bdafde80 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5564bdafddb8 <col:9> 'bool' lvalue ->_read_status 0x5564bdab6d90
|       | `-ImplicitCastExpr 0x5564bdafdd98 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5564bdafdd88 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5564bdafde60 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5564bdafde40 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5564bdafde28 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5564bdafdde8 <col:25> 'int' lvalue Var 0x5564bdafcfe8 'read_status' 'int'
|           `-IntegerLiteral 0x5564bdafde08 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5564bdad4748 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5564bdad41e0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5564bdad4258 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5564bdad46a8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5564bdad4318 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5564bdad4398 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5564bdad4410 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5564bdad4560 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5564bdb02748 <col:87, line:821:5>
|     |-DeclStmt 0x5564bdb019f0 <line:809:9, col:26>
|     | `-VarDecl 0x5564bdb01988 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5564bdb01ac0 <line:810:9, col:29>
|     | `-VarDecl 0x5564bdb01a20 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5564bdb01aa8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5564bdb01a88 <col:28> 'int' 1
|     |-DeclStmt 0x5564bdb01d08 <line:811:9, col:38>
|     | `-VarDecl 0x5564bdb01bf0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5564bdb01ce0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5564bdb01c68 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5564bdb01cc0 <col:29> 'Vector<T>' lvalue ParmVar 0x5564bdad4560 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5564bdb025f8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5564bdb02618 <line:812:16, col:61>
|     | | `-VarDecl 0x5564bdb01d30 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5564bdb01f10 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5564bdb01ee0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5564bdb01ec8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5564bdb01ea8 <col:29, col:61> 'String' (CXXTemporary 0x5564bdb01ea8)
|     | |           `-CXXMemberCallExpr 0x5564bdb01e38 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5564bdb01da8 <col:29> '<bound member function type>' ->find 0x5564bdaef2f8
|     | |             | `-CXXThisExpr 0x5564bdb01d98 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5564bdb01e70 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5564bdb01dd8 <col:34> 'const char *' lvalue ParmVar 0x5564bdad4318 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5564bdb01e88 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5564bdb01df8 <col:43> 'int' lvalue ParmVar 0x5564bdad4398 'flags' 'int'
|     | |             `-DeclRefExpr 0x5564bdb01e18 <col:50> 'Args::Slot *' lvalue Var 0x5564bdb01988 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5564bdb01fc8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5564bdb01fb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5564bdb01f90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5564bdb01f60 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5564bd80bad8
|     | |       `-ImplicitCastExpr 0x5564bdb01f48 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5564bdb01f28 <col:23> 'String' lvalue Var 0x5564bdb01d30 'str' 'String'
|     | `-CompoundStmt 0x5564bdb025c0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5564bdb02088 <line:813:13, col:23>
|     |   | `-VarDecl 0x5564bdb01ff0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5564bdb02068 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5564bdb02208 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5564bdb020b0 <col:13> '<bound member function type>' ->postparse 0x5564bdaef508
|     |   | | `-CXXThisExpr 0x5564bdb020a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5564bdb021b0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5564bdb02100 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5564bdb020e0 <col:23> 'P' lvalue ParmVar 0x5564bdad4410 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5564bdb02148 <col:36> 'String' lvalue Var 0x5564bdb01d30 'str' 'String'
|     |   | | |-DeclRefExpr 0x5564bdb02168 <col:41> 'T' lvalue Var 0x5564bdb01ff0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5564bdb02198 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5564bdb02188 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5564bdb021e8 <col:53> 'Args::Slot *' lvalue Var 0x5564bdb01988 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5564bdb02360 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5564bdb02298 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5564bdb02268 <col:17> 'bool' lvalue ->_read_status 0x5564bdab6d90
|     |   | |   `-ImplicitCastExpr 0x5564bdb02248 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5564bdb02238 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5564bdb02338 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5564bdb022d0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5564bdb022b0 <col:17> 'Vector<T> *' lvalue Var 0x5564bdb01bf0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5564bdb02318 <col:30> 'T' lvalue Var 0x5564bdb01ff0 'sx' 'T'
|     |   |-BinaryOperator 0x5564bdb024e0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5564bdb02378 <col:13> 'int' lvalue Var 0x5564bdb01a20 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5564bdb024c8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5564bdb024a8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5564bdb02410 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5564bdb023f0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5564bdb023d8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5564bdb02398 <col:28> 'int' lvalue Var 0x5564bdb01a20 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5564bdb023b8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5564bdb02490 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5564bdb02460 <col:49> 'bool' lvalue ->_read_status 0x5564bdab6d90
|     |   |         `-ImplicitCastExpr 0x5564bdb02440 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5564bdb02430 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5564bdb02590 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5564bdb02500 <col:13> 'int' lvalue ParmVar 0x5564bdad4398 'flags' 'int'
|     |     `-UnaryOperator 0x5564bdb02578 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5564bdb02560 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5564bdb02540 <col:23> 'const int' lvalue Var 0x5564bdabe2d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5564bdb02728 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5564bdb02660 <col:9> 'bool' lvalue ->_read_status 0x5564bdab6d90
|       | `-ImplicitCastExpr 0x5564bdb02640 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5564bdb02630 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5564bdb02708 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5564bdb026e8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5564bdb026d0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5564bdb02690 <col:25> 'int' lvalue Var 0x5564bdb01a20 'read_status' 'int'
|           `-IntegerLiteral 0x5564bdb026b0 <col:40> 'int' 1
|-AccessSpecDecl 0x5564bdad47c0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5564bdad47e8 prev 0x5564bdabc5d8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5564bdad48e0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5564bdad49d0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5564bdb02780 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5564bdad4ac0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5564bdb02790 <col:25, line:830:9>
| |-CXXMethodDecl 0x5564bdad4bc0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5564bdad4c70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5564bdad4d18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5564bdad4d18
| | `-ParmVarDecl 0x5564bdad4e28 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5564bdad55e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5564bdad55e8
|   `-ParmVarDecl 0x5564bdad56f8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5564bdad4e98 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5564bdad4ff8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5564bdad51f0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5564bdad50a0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5564bdad5118 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5564bdb02970 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5564bdad54a8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5564bdb027e0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5564bdb027a0 <col:20> 'void *' lvalue ParmVar 0x5564bdad50a0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5564bdad5510 '_slot' 'char *'
| | | `-CXXNewExpr 0x5564bdb02868 <col:32, col:45> 'char *' array Function 0x5564bd62f758 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5564bdb02850 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5564bdb02820 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5564bdad5118 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5564bdad5570 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5564bdb02930 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5564bdb028f0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5564bdad5118 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5564bdb029f0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5564bdad52f0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5564bdad4ac0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5564bdb02a78 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5564bdb02a58 <line:840:13, col:22> 'void' array Function 0x5564bd62fab8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5564bdb02a40 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5564bdb02a10 <col:22> 'char *' lvalue ->_slot 0x5564bdad5510
| |         `-CXXThisExpr 0x5564bdb02a00 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5564bdad53f0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5564bdad4bc0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5564bdb02c68 <col:22, line:844:9>
| |   `-CallExpr 0x5564bdb02bd0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5564bdb02bb8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5564bdb02b98 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5564bd73b538 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5564bdb02c08 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5564bdb02ae8 <col:20> 'void *' lvalue ->_ptr 0x5564bdad54a8
| |     |   `-CXXThisExpr 0x5564bdb02ad8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5564bdb02c38 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5564bdb02c20 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5564bdb02b28 <col:26> 'char *' lvalue ->_slot 0x5564bdad5510
| |     |     `-CXXThisExpr 0x5564bdb02b18 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5564bdb02c50 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5564bdb02b68 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5564bdad5570
| |         `-CXXThisExpr 0x5564bdb02b58 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5564bdad54a8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5564bdad5510 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5564bdad5570 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5564bdad5768 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5564bdad5768
| | `-ParmVarDecl 0x5564bdad5878 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5564bdad5918 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5564bdad5918
|   `-ParmVarDecl 0x5564bdad5a28 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5564bdad5bc8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5564bdad5a98 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5564bdad5b38 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5564bdad5e60 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5564bdad6058 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5564bdad5f28 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5564bdad61d8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5564bdb02ca0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5564bdb02c80 <col:20> 'T *' lvalue ParmVar 0x5564bdad5f28 'ptr' 'T *'
|   | `-CompoundStmt 0x5564bdb02cf0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5564bdad6128 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5564bdad4bc0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5564bdb02ea0 <col:22, line:857:9>
|   |   `-CallExpr 0x5564bdb02e70 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5564bdb02d00 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5564bd7f3c68 0x5564bd79df98
|   |     |-CXXOperatorCallExpr 0x5564bdb02e00 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5564bdb02d90 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5564bda00c18 0x5564bda00838 0x5564bda00468 0x5564bda00088 0x5564bd9ffca8 0x5564bd9ff8d8
|   |     | `-MemberExpr 0x5564bdb02d60 <col:29> 'T *' lvalue ->_ptr 0x5564bdad61d8
|   |     |   `-CXXThisExpr 0x5564bdb02d50 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5564bdb02e40 <col:35> 'T' lvalue ->_slot 0x5564bdad6238
|   |       `-CXXThisExpr 0x5564bdb02e30 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5564bdad61d8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5564bdad6238 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5564bdad62a0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5564bdad63a0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5564bdad63f0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bdad6380 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5564bdad6360 <col:31> 'int' 48
|-FieldDecl 0x5564bdad6418 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5564bdad6478 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5564bdad64d8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5564bdae2728 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5564bdaeeba0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5564bdaeec00 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5564bdaeecb0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5564bdaeeed8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5564bdaeede0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5564bdaef028 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5564bdaeef98 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5564bdaef2f8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5564bdaef0e8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5564bdaef168 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5564bdaef210 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5564bdaef508 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5564bdaef3c0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5564bdaef438 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5564bdaef5d8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5564bdaef728 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5564bdaef690 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5564bdaefab8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5564bdaef7e8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5564bdaef868 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5564bdaef910 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5564bdaef9c8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5564bdaefce0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5564bdaefb90 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5564bdaefc08 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5564bdaefff8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5564bdaefd90 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5564bdaeff58 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5564bdaefe68 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPrefixArg
         0 |   _Bool allow_bare_address
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd850cb0 <../dummy_inc/click/ipaddress.hh:382:1, line:396:1> line:382:7 referenced class IPPrefixArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bd850dc8 <col:1, col:7> col:7 implicit referenced class IPPrefixArg
|-AccessSpecDecl 0x5564bd850e58 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x5564bd850f68 <line:383:5, line:385:5> line:383:5 used IPPrefixArg 'void (bool)'
| |-ParmVarDecl 0x5564bd850e90 <col:17, col:44> col:22 used allow_bare_address_ 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5564bd8517a0 <col:44> 'bool' false
| |-CXXCtorInitializer Field 0x5564bd851738 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x5564bd851830 <line:384:23> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x5564bd8517f0 <col:23> 'bool' lvalue ParmVar 0x5564bd850e90 'allow_bare_address_' 'bool'
| `-CompoundStmt 0x5564bd851878 <col:44, line:385:5>
|-CXXMethodDecl 0x5564bd8512b8 <line:386:5, line:388:46> line:386:10 used parse 'bool (const String &, IPAddress &, IPAddress &, const ArgContext &) const'
| |-ParmVarDecl 0x5564bd851028 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5564bd8510a0 <line:387:9, col:20> col:20 result_addr 'IPAddress &'
| |-ParmVarDecl 0x5564bd851118 <col:33, col:44> col:44 result_mask 'IPAddress &'
| `-ParmVarDecl 0x5564bd851190 <line:388:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5564bd8517b0 <col:34> 'const ArgContext' lvalue Var 0x5564bd83dc00 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5564bd851668 <line:389:5, line:394:5> line:389:10 parse 'bool (const String &, struct in_addr &, struct in_addr &, const ArgContext &) const'
| |-ParmVarDecl 0x5564bd851388 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x5564bd851418 <line:390:9, col:25> col:25 used result_addr 'struct in_addr &'
| |-ParmVarDecl 0x5564bd8514a8 <col:38, col:54> col:54 used result_mask 'struct in_addr &'
| |-ParmVarDecl 0x5564bd851520 <line:391:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5564bd8517d0 <col:34> 'const ArgContext' lvalue Var 0x5564bd83dc00 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5564bd851a88 <col:52, line:394:5>
|   `-ReturnStmt 0x5564bd851a78 <line:392:2, line:393:56>
|     `-CXXMemberCallExpr 0x5564bd851a38 <line:392:9, line:393:56> 'bool'
|       |-MemberExpr 0x5564bd851a08 <line:392:9> '<bound member function type>' ->parse 0x5564bd8512b8
|       | `-CXXThisExpr 0x5564bd8519f8 <col:9> 'const IPPrefixArg *' implicit this
|       |-DeclRefExpr 0x5564bd8518f8 <col:15> 'const String' lvalue ParmVar 0x5564bd851388 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5564bd851948 <col:20, col:61> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5564bd851918 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5564bd851418 'result_addr' 'struct in_addr &'
|       |-CXXReinterpretCastExpr 0x5564bd8519a8 <line:393:8, col:49> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5564bd851978 <col:38> 'struct in_addr':'in_addr' lvalue ParmVar 0x5564bd8514a8 'result_mask' 'struct in_addr &'
|       `-DeclRefExpr 0x5564bd8519d8 <col:52> 'const ArgContext' lvalue ParmVar 0x5564bd851520 'args' 'const ArgContext &'
|-FieldDecl 0x5564bd851738 <line:395:5, col:10> col:10 referenced allow_bare_address 'bool'
|-CXXConstructorDecl 0x5564bdb22c88 <line:382:7> col:7 implicit constexpr IPPrefixArg 'void (const IPPrefixArg &)' inline default trivial noexcept-unevaluated 0x5564bdb22c88
| `-ParmVarDecl 0x5564bdb22d98 <col:7> col:7 'const IPPrefixArg &'
|-CXXConstructorDecl 0x5564bdb22e38 <col:7> col:7 implicit used constexpr IPPrefixArg 'void (IPPrefixArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bdb22f48 <col:7> col:7 used 'IPPrefixArg &&'
| |-CXXCtorInitializer Field 0x5564bd851738 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x5564bdb238c0 <col:7> 'bool' <LValueToRValue>
| |   `-MemberExpr 0x5564bdb23890 <col:7> 'bool' xvalue .allow_bare_address 0x5564bd851738
| |     `-CXXStaticCastExpr 0x5564bdb23860 <col:7> 'IPPrefixArg' xvalue static_cast<class IPPrefixArg &&> <NoOp>
| |       `-DeclRefExpr 0x5564bdb23830 <col:7> 'IPPrefixArg' lvalue ParmVar 0x5564bdb22f48 '' 'IPPrefixArg &&'
| `-CompoundStmt 0x5564bdb23908 <col:7>
`-CXXDestructorDecl 0x5564bdb23010 <col:7> col:7 implicit referenced ~IPPrefixArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPrefixArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPPrefixArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd7fc990 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bd7fcaa8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5564bd7fcb38 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5564bd7fcc08 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5564bd7fccf0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bd7fcf08 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5564bd7fcdb0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd7fd0b8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5564bd7fcfc0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5564bd7fd200 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5564bd7fd170 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5564bd7fd348 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5564bd7fd2b8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd7fd490 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5564bd7fd400 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd7fd558 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5564bd7fd6a0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5564bd7fd610 <col:28> col:31 'int'
|-CXXMethodDecl 0x5564bd7fd768 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5564bd7fd8b0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5564bd7fd820 <col:28> col:31 'int'
|-CXXMethodDecl 0x5564bd7fda28 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5564bd7fd968 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd7fdb70 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5564bd7fdae0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd7fdc38 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5564bd7fddf8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5564bd7fdce8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5564bd7fdd60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd7fe048 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5564bd7fdeb8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5564bd7fdf30 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bd7fe0f8 <col:86> "" ""
|-CXXMethodDecl 0x5564bd7fe368 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5564bd7fe1d8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5564bd7fe250 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd7fe518 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5564bd7fe428 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5564bd7fe6c8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5564bd7fe5d0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5564bd7fe998 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5564bd7fe780 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5564bd7fe7f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5564bd7fe870 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd7fec78 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5564bd7fea60 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5564bd7fead8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5564bd7feb50 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bd7fed30 <col:115> "" ""
|-AccessSpecDecl 0x5564bd7feda0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5564bd7fedd8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bd7ff2e0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5564bd7ff2e0
| `-ParmVarDecl 0x5564bd7ff3e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5564bd7ff488 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5564bd7ff488
| `-ParmVarDecl 0x5564bd7ff598 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5564bd834bc8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5564bda279d0 <col:7>
|-CXXConstructorDecl 0x5564bd834ca0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5564bd834ca0
| `-ParmVarDecl 0x5564bd834db8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5564bd834e28 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5564bd834e28
| `-ParmVarDecl 0x5564bd834f38 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5564bda2a3d0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bda16578 prev 0x5564bda0b780 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bda16670 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5564bda16760 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5564bda16888 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5564bda16a08 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5564bda16b88 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5564bda16d08 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5564bda27b38 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5564bda283a8 <col:11>
|-CXXDestructorDecl 0x5564bda27c10 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5564bda27d48 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5564bda27d48
| `-ParmVarDecl 0x5564bda27e58 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5564bda27ef8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5564bda27ef8
| `-ParmVarDecl 0x5564bda28008 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5564bda2adc8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bda2aed8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5564bda2b158 <col:11>
|   `-ReturnStmt 0x5564bda2b148 <col:11>
|     `-UnaryOperator 0x5564bda2b130 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5564bda2b120 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5564bda2af48 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5564bda2af48
  `-ParmVarDecl 0x5564bda2b058 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bda16d70 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bda16e88 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5564bda16f28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5564bda16f90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5564bda16ff8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5564bda17060 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5564bda170c0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5564bda17180 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5564bda171e0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5564bda17240 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5564bda27a48 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5564bda16f28 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5564bda283b8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5564bda28410 <col:12>
|-CXXConstructorDecl 0x5564bda28078 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5564bda28078
| `-ParmVarDecl 0x5564bda28188 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5564bda28228 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5564bda28228
| `-ParmVarDecl 0x5564bda28338 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5564bda2a4b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bda04e90 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5564bda04fa8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5564bda05038 <col:16, col:22> col:16 public
|-EnumDecl 0x5564bda05060 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5564bda05160 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5564bda05240 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda05140 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5564bda05120 <col:21> 'int' 28
| `-EnumConstantDecl 0x5564bda051f0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5564bda05258 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda051d0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5564bda051b0 <col:22> 'int' 64
|-CXXMethodDecl 0x5564bda05598 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5564bda05280 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5564bda05300 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5564bda05378 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5564bda053f0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5564bda05658 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5564bda05858 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5564bda056d0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5564bda05748 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5564bda05908 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5564bda05a68 <line:55:5, col:91> col:35 used make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5564bda05978 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5564bda05b10 <col:72> warn_unused_result ""
|-TypedefDecl 0x5564bda05e70 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5564bda05e00 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5564bda05da0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5564bda05d60 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5564bd4dc4e0 'void'
|       |-PointerType 0x5564bd785230 'unsigned char *'
|       | `-BuiltinType 0x5564bd4dc5e0 'unsigned char'
|       |-TypedefType 0x5564bd581800 'size_t' sugar
|       | |-Typedef 0x5564bd54cbe0 'size_t'
|       | `-BuiltinType 0x5564bd4dc640 'unsigned long'
|       `-PointerType 0x5564bd4dcce0 'void *'
|         `-BuiltinType 0x5564bd4dc4e0 'void'
|-CXXMethodDecl 0x5564bda062e8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5564bda05ee0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5564bda05f58 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5564bda05ff0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5564bda06070 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5564bda209e0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5564bda209c8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5564bda20990 <col:58> 'int' 0
| |-ParmVarDecl 0x5564bda060f0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5564bda20a08 <col:76> 'int' 0
| |-ParmVarDecl 0x5564bda06170 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5564bda20a28 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5564bda063b8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5564bda06438 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5564bda064f8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5564bda06598 <col:20>
| `-OptimizeNoneAttr 0x5564bda065f0 <col:30>
|-CXXMethodDecl 0x5564bda06668 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5564bda06708 <col:20>
| `-OptimizeNoneAttr 0x5564bda06760 <col:30>
|-CXXMethodDecl 0x5564bda067d8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5564bda06878 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5564bda06928 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5564bda069c8 <col:20>
| |-OptimizeNoneAttr 0x5564bda06a20 <col:30>
| `-WarnUnusedResultAttr 0x5564bda06a48 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5564bda06aa0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5564bda06b40 <col:20>
| `-OptimizeNoneAttr 0x5564bda06b98 <col:30>
|-CXXMethodDecl 0x5564bda06be8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5564bda06c88 <col:20>
| `-OptimizeNoneAttr 0x5564bda06ce0 <col:30>
|-CXXMethodDecl 0x5564bda06d28 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5564bda06dc8 <col:20>
| `-OptimizeNoneAttr 0x5564bda06e20 <col:30>
|-CXXMethodDecl 0x5564bda06e68 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bda06f28 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bda06ff0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5564bda070b8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5564bda07178 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bda07298 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5564bda20af0 <col:54, line:99:5>
|   `-ReturnStmt 0x5564bda20ae0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5564bda20ac8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5564bda20a98 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5564bda17578
|         `-CXXThisExpr 0x5564bda20a88 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5564bda07438 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5564bda07348 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5564bda20ba0 <col:67, line:103:5>
|   `-BinaryOperator 0x5564bda20b80 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5564bda20b18 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5564bda17578
|     | `-CXXThisExpr 0x5564bda20b08 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5564bda20b68 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5564bda20b48 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5564bda07348 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5564bda07530 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5564bda20c20 <col:33, line:107:5>
|   `-ReturnStmt 0x5564bda20c10 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5564bda20bf8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5564bda20bc8 <col:16> 'void *' lvalue ->_destructor_argument 0x5564bda175e0
|         `-CXXThisExpr 0x5564bda20bb8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5564bda075f0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5564bda21250 <col:25, line:113:5>
|   |-ParenExpr 0x5564bda20f98 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5564bda20f68 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda20cd8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5564bda20cb0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5564bda20c78 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5564bda20c48 <col:24> '<bound member function type>' ->shared 0x5564bda06668
|   |   |       `-ImplicitCastExpr 0x5564bda20c98 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5564bda20c38 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5564bda20d38 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda20d18 <col:42> 'int' 0
|   |   `-CallExpr 0x5564bda20ec8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5564bda20eb0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda20e90 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda20f08 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda20da8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5564bda20f20 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda20dd0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda20f38 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda20e08 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5564bda20f50 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda20e78 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda20e60 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda20e28 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5564bda21198 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5564bda20fc8 <col:2> 'unsigned char *' lvalue ->_head 0x5564bda17380
|   | | `-CXXThisExpr 0x5564bda20fb8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5564bda21180 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5564bda21160 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5564bda21008 <col:10> 'unsigned char *' lvalue ->_data 0x5564bda173e8
|   |     | `-CXXThisExpr 0x5564bda20ff8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5564bda21148 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5564bda21128 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5564bda21048 <col:18> 'unsigned char *' lvalue ->_tail 0x5564bda17450
|   |         | `-CXXThisExpr 0x5564bda21038 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5564bda21110 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5564bda210f0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5564bda21088 <col:26> 'unsigned char *' lvalue ->_end 0x5564bda174b8
|   |             | `-CXXThisExpr 0x5564bda21078 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5564bda210d8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5564bda210b8 <col:33> 'int' 0
|   `-BinaryOperator 0x5564bda21230 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5564bda211c8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5564bda17578
|     | `-CXXThisExpr 0x5564bda211b8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5564bda21218 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5564bda211f8 <col:16> 'int' 0
|-CXXMethodDecl 0x5564bda07730 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5564bda076a0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5564bda077d8 <col:20>
| |-OptimizeNoneAttr 0x5564bda07830 <col:30>
| `-WarnUnusedResultAttr 0x5564bda07858 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5564bda07928 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5564bda07898 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5564bda079d0 <col:20>
| |-OptimizeNoneAttr 0x5564bda07a28 <col:30>
| `-WarnUnusedResultAttr 0x5564bda07a50 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5564bda07b88 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5564bda07a90 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5564bda07c30 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5564bda07d30 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5564bda07ca0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5564bda07dd8 <col:20>
| `-OptimizeNoneAttr 0x5564bda07e30 <col:30>
|-CXXMethodDecl 0x5564bda07ef8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5564bda07e68 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5564bda07fa0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5564bda080a0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5564bda08010 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5564bda08148 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5564bda08248 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5564bda081b8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5564bda082f0 <col:20>
| `-OptimizeNoneAttr 0x5564bda08348 <col:30>
|-CXXMethodDecl 0x5564bda084d8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5564bda08388 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5564bda08400 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5564bda20a48 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5564bda08588 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5564bda08788 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5564bda08600 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5564bda08678 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda08998 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5564bda08848 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5564bda088c0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda08ba8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5564bda08a58 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5564bda08ad8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5564bda20a58 <col:39> 'int' 0
|-CXXMethodDecl 0x5564bda08c78 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5564bda08d40 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5564bda08e08 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5564bda08ec8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bda08f90 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5564bda090d8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5564bda09048 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5564bda092a8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5564bda09198 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5564bda09210 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda09378 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5564bda09438 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5564bda094d8 <col:20>
| `-OptimizeNoneAttr 0x5564bda09530 <col:30>
|-CXXMethodDecl 0x5564bda09580 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5564bda09620 <col:20>
| `-OptimizeNoneAttr 0x5564bda09678 <col:30>
|-CXXMethodDecl 0x5564bda096c8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5564bda09788 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bda09850 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5564bda098f0 <col:20>
| `-OptimizeNoneAttr 0x5564bda09948 <col:30>
|-CXXMethodDecl 0x5564bda09a98 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5564bda09988 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5564bda09a00 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda09be8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5564bda09b58 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda09cc0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5564bda09d80 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5564bda09e20 <col:20>
| `-OptimizeNoneAttr 0x5564bda09e78 <col:30>
|-CXXMethodDecl 0x5564bda09ec8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5564bda09f68 <col:20>
| `-OptimizeNoneAttr 0x5564bda09fc0 <col:30>
|-CXXMethodDecl 0x5564bda0a010 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5564bda0a0d8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5564bda0a178 <col:20>
| `-OptimizeNoneAttr 0x5564bda0a1d0 <col:30>
|-CXXMethodDecl 0x5564bda0a218 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5564bda0a338 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5564bda0a4a8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5564bda0a3e8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5564bda0a598 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5564bda0a638 <col:20>
| `-OptimizeNoneAttr 0x5564bda0a690 <col:30>
|-CXXMethodDecl 0x5564bda0a6e0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5564bda0a7a0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5564bda0a9d8 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5564bda0a850 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5564bda0a8c8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5564bda0aa88 <col:20>
| `-OptimizeNoneAttr 0x5564bda0aae0 <col:30>
|-CXXMethodDecl 0x5564bda0ab88 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5564bda0ac28 <col:20>
| `-OptimizeNoneAttr 0x5564bda0ac80 <col:30>
|-CXXMethodDecl 0x5564bda0acd0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5564bda0ad70 <col:20>
| `-OptimizeNoneAttr 0x5564bda0adc8 <col:30>
|-CXXMethodDecl 0x5564bda0ae10 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5564bda0aeb0 <col:20>
| `-OptimizeNoneAttr 0x5564bda0af08 <col:30>
|-CXXMethodDecl 0x5564bda0b008 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5564bda0af40 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5564bda0b0b0 <col:20>
| `-OptimizeNoneAttr 0x5564bda0b108 <col:30>
|-CXXMethodDecl 0x5564bda0b2c8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5564bda0b140 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5564bda0b1b8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5564bda0b378 <col:20>
| `-OptimizeNoneAttr 0x5564bda0b3d0 <col:30>
|-CXXMethodDecl 0x5564bda0b478 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5564bda0b598 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5564bda0b6b8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5564bda0b758 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5564bda0b780 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5564bda0b8a8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5564bda0b948 <col:20>
| `-OptimizeNoneAttr 0x5564bda0b9a0 <col:30>
|-CXXMethodDecl 0x5564bda0ba48 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5564bda0bae8 <col:20>
| `-OptimizeNoneAttr 0x5564bda0bb40 <col:30>
|-AccessSpecDecl 0x5564bda0bb68 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5564bda0bb90 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5564bda0bc90 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5564bda0bce0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda0bc70 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5564bda0bc50 <col:14> 'int' 48
|-CXXMethodDecl 0x5564bda0bd48 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5564bda0bde8 <col:20>
| `-OptimizeNoneAttr 0x5564bda0be40 <col:30>
|-CXXMethodDecl 0x5564bda0beb8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5564bda0bf58 <col:20>
| `-OptimizeNoneAttr 0x5564bda0bfb0 <col:30>
|-CXXMethodDecl 0x5564bda0c078 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5564bda0bfe8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5564bda0c218 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5564bda0c3b8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5564bda0c2c8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5564bda0c460 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5564bda0c560 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5564bda0c910 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0c540 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5564bda0c520 <col:9> 'int' 0
| |-EnumConstantDecl 0x5564bda0c5f0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5564bda0c928 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0c5d0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5564bda0c5b0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5564bda0c680 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5564bda0c940 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0c660 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5564bda0c640 <col:14> 'int' 2
| |-EnumConstantDecl 0x5564bda0c710 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5564bda0c958 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0c6f0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5564bda0c6d0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5564bda0c7a0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5564bda0c970 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0c780 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5564bda0c760 <col:13> 'int' 4
| |-EnumConstantDecl 0x5564bda0c830 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5564bda0c988 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0c810 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5564bda0c7f0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5564bda0c8c0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5564bda0c9a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda0c8a0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5564bda0c880 <col:14> 'int' 6
|-CXXMethodDecl 0x5564bda0ca08 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5564bda0caa8 <col:20>
| `-OptimizeNoneAttr 0x5564bda0cb00 <col:30>
|-CXXMethodDecl 0x5564bda0cbf8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5564bda0cb38 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5564bda0cca0 <col:20>
| `-OptimizeNoneAttr 0x5564bda0ccf8 <col:30>
|-CXXMethodDecl 0x5564bda0cd68 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5564bda0ce90 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5564bda0d008 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5564bda0cf40 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5564bda0d0d0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5564bda0d198 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5564bda0d2d8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5564bda0d248 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5564bda0d380 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5564bda0d480 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5564bda0d680 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0d460 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5564bda0d440 <col:23> 'int' 0
| |-EnumConstantDecl 0x5564bda0d510 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5564bda0d698 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0d4f0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5564bda0d4d0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5564bda0d5a0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5564bda0d6b0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0d580 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5564bda0d560 <col:24> 'int' 0
| `-EnumConstantDecl 0x5564bda0d630 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5564bda0d6c8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda0d610 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5564bda0d5f0 <col:47> 'int' 16
|-CXXMethodDecl 0x5564bda0d728 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5564bda0d898 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5564bda0d7d8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5564bda0d940 <col:20>
| `-OptimizeNoneAttr 0x5564bda0d998 <col:30>
|-CXXMethodDecl 0x5564bda0d9e8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5564bda21370 <col:18, col:36>
|   `-ReturnStmt 0x5564bda21360 <col:20, col:33>
|     `-ImplicitCastExpr 0x5564bda21348 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5564bda21328 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5564bda212f8 <col:27> '<bound member function type>' ->xanno 0x5564bda0ba48
|           `-CXXThisExpr 0x5564bda212e8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5564bda0dae0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5564bda21480 <col:30, col:48>
|   `-ReturnStmt 0x5564bda21470 <col:32, col:45>
|     `-ImplicitCastExpr 0x5564bda21458 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5564bda21438 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5564bda21408 <col:39> '<bound member function type>' ->xanno 0x5564bda0b8a8
|           `-CXXThisExpr 0x5564bda213f8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5564bda0dbc8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5564bda21618 <col:24, col:50>
|   `-ReturnStmt 0x5564bda21608 <col:26, col:47>
|     `-UnaryOperator 0x5564bda215f0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5564bda215d0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5564bda215b8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5564bda21568 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5564bda16888
|         |   `-CXXMemberCallExpr 0x5564bda21548 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5564bda21518 <col:34> '<bound member function type>' ->xanno 0x5564bda0ba48
|         |       `-CXXThisExpr 0x5564bda21508 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5564bda21598 <col:46> 'int' 0
|-CXXMethodDecl 0x5564bda0dcd0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5564bda217e8 <col:36, col:62>
|   `-ReturnStmt 0x5564bda217d8 <col:38, col:59>
|     `-UnaryOperator 0x5564bda217c0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5564bda217a0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5564bda21788 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5564bda21700 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5564bda16888
|         |   `-CXXMemberCallExpr 0x5564bda216e0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5564bda216b0 <col:46> '<bound member function type>' ->xanno 0x5564bda0b8a8
|         |       `-CXXThisExpr 0x5564bda216a0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5564bda21730 <col:58> 'int' 0
|-CXXMethodDecl 0x5564bda0dde8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5564bda21980 <col:26, col:53>
|   `-ReturnStmt 0x5564bda21970 <col:28, col:50>
|     `-UnaryOperator 0x5564bda21958 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5564bda21938 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5564bda21920 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5564bda218d0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5564bda16b88
|         |   `-CXXMemberCallExpr 0x5564bda218b0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5564bda21880 <col:36> '<bound member function type>' ->xanno 0x5564bda0ba48
|         |       `-CXXThisExpr 0x5564bda21870 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5564bda21900 <col:49> 'int' 0
|-CXXMethodDecl 0x5564bda0df08 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5564bda21b58 <col:38, col:65>
|   `-ReturnStmt 0x5564bda21b48 <col:40, col:62>
|     `-UnaryOperator 0x5564bda21b30 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5564bda21b10 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5564bda21af8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5564bda21a68 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5564bda16b88
|         |   `-CXXMemberCallExpr 0x5564bda21a48 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5564bda21a18 <col:48> '<bound member function type>' ->xanno 0x5564bda0b8a8
|         |       `-CXXThisExpr 0x5564bda21a08 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5564bda21a98 <col:61> 'int' 0
|-CXXMethodDecl 0x5564bda0e0b8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5564bda0dfc0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5564bda22228 <col:34, line:463:5>
|   |-ParenExpr 0x5564bda22070 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5564bda22040 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda21ca8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda21c78 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda21bc8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda21bb0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda21b70 <col:23> 'int' lvalue ParmVar 0x5564bda0dfc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda21b90 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda21c58 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda21c28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda21be8 <col:33> 'int' lvalue ParmVar 0x5564bda0dfc0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5564bda21c40 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5564bda21c08 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5564bda21d08 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda21ce8 <col:56> 'int' 0
|   |   `-CallExpr 0x5564bda21fa0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5564bda21f88 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda21f68 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda21fe0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda21df8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5564bda21ff8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda21e28 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda22010 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda21e60 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5564bda22028 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda21f50 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda21f38 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda21ef8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5564bda22218 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5564bda22200 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5564bda221e0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5564bda221b0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5564bda22160 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5564bda16888
|         |   `-CXXMemberCallExpr 0x5564bda22140 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5564bda22110 <col:9> '<bound member function type>' ->xanno 0x5564bda0b8a8
|         |       `-CXXThisExpr 0x5564bda22100 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5564bda221c8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5564bda22190 <col:21> 'int' lvalue ParmVar 0x5564bda0dfc0 'i' 'int'
|-CXXMethodDecl 0x5564bda0e308 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5564bda0e178 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5564bda0e1f0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5564bda228b8 <col:40, line:472:5>
|   |-ParenExpr 0x5564bda226d0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5564bda226a0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda22380 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda22350 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda222a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda22288 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda22248 <col:23> 'int' lvalue ParmVar 0x5564bda0e178 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda22268 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda22330 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda22300 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda222c0 <col:33> 'int' lvalue ParmVar 0x5564bda0e178 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5564bda22318 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5564bda222e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5564bda223e0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda223c0 <col:56> 'int' 0
|   |   `-CallExpr 0x5564bda22600 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5564bda225e8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda225c8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda22640 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda22450 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5564bda22658 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda22480 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda22670 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda224b8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5564bda22688 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda225b0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda22598 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda22558 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5564bda22898 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5564bda22840 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5564bda22810 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5564bda227c0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5564bda16888
|     | |   `-CXXMemberCallExpr 0x5564bda227a0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5564bda22770 <col:2> '<bound member function type>' ->xanno 0x5564bda0ba48
|     | |       `-CXXThisExpr 0x5564bda22760 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5564bda22828 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5564bda227f0 <col:14> 'int' lvalue ParmVar 0x5564bda0e178 'i' 'int'
|     `-ImplicitCastExpr 0x5564bda22880 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5564bda22860 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5564bda0e1f0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5564bda0e4c8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5564bda0e3d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5564bda23038 <col:36, line:485:5>
|   |-ParenExpr 0x5564bda22da0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5564bda22d70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda22a50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda22a20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda22930 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda22918 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda228d8 <col:23> 'int' lvalue ParmVar 0x5564bda0e3d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda228f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda22a00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda229e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda22950 <col:33> 'int' lvalue ParmVar 0x5564bda0e3d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda229c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda229b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda22970 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5564bda22990 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5564bda22ab0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda22a90 <col:60> 'int' 0
|   |   `-CallExpr 0x5564bda22cd0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5564bda22cb8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda22c98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda22d10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda22b20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5564bda22d28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda22b58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda22d40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda22b90 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5564bda22d58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda22c80 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda22c68 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda22c28 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5564bda23028 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5564bda23010 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5564bda22ff8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5564bda22fc8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5564bda22f68 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5564bda22f38 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5564bda22eb0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5564bda16760
|             |   `-CXXMemberCallExpr 0x5564bda22e90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5564bda22e60 <col:61> '<bound member function type>' ->xanno 0x5564bda0b8a8
|             |       `-CXXThisExpr 0x5564bda22e50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5564bda22f50 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5564bda22ee0 <col:74> 'int' lvalue ParmVar 0x5564bda0e3d0 'i' 'int'
|-CXXMethodDecl 0x5564bda0e718 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5564bda0e588 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5564bda0e600 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5564bda23788 <col:42, line:500:5>
|   |-ParenExpr 0x5564bda23520 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5564bda234f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda231d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda231a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda230b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda23098 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda23058 <col:23> 'int' lvalue ParmVar 0x5564bda0e588 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda23078 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda23180 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda23168 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda230d0 <col:33> 'int' lvalue ParmVar 0x5564bda0e588 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda23148 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda23130 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda230f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5564bda23110 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5564bda23230 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda23210 <col:60> 'int' 0
|   |   `-CallExpr 0x5564bda23450 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5564bda23438 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda23418 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda23490 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda232a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5564bda234a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda232d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda234c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda23310 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5564bda234d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda23400 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda233e8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda233a8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5564bda23768 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5564bda23718 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5564bda236e8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5564bda23690 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5564bda23660 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5564bda23610 <col:48, col:57> 'char [48]' lvalue ->c 0x5564bda16760
|     |     |   `-CXXMemberCallExpr 0x5564bda235f0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5564bda235c0 <col:48> '<bound member function type>' ->xanno 0x5564bda0ba48
|     |     |       `-CXXThisExpr 0x5564bda235b0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5564bda23678 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5564bda23640 <col:61> 'int' lvalue ParmVar 0x5564bda0e588 'i' 'int'
|     `-ImplicitCastExpr 0x5564bda23750 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5564bda23730 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5564bda0e600 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5564bda0e8d8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5564bda0e7e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5564bda23ee8 <col:35, line:513:5>
|   |-ParenExpr 0x5564bda23bf8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5564bda23bc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda23920 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda238f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda23800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda237e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda237a8 <col:23> 'int' lvalue ParmVar 0x5564bda0e7e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda237c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda238d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda238b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda23820 <col:33> 'int' lvalue ParmVar 0x5564bda0e7e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda23898 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda23880 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda23840 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5564bda23860 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5564bda23980 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda23960 <col:60> 'int' 0
|   |   `-CallExpr 0x5564bda23b28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5564bda23b10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda23af0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda23b68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda239f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5564bda23b80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda23a28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda23b98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda23a60 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5564bda23bb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda23ad8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda23ac0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda23a80 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5564bda23ed8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5564bda23ec0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5564bda23ea8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5564bda23e78 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5564bda23df0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5564bda23dc0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5564bda23d70 <col:60, col:69> 'char const[48]' lvalue ->c 0x5564bda16760
|             |   `-CXXMemberCallExpr 0x5564bda23d50 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5564bda23d20 <col:60> '<bound member function type>' ->xanno 0x5564bda0b8a8
|             |       `-CXXThisExpr 0x5564bda23d10 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5564bda23dd8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5564bda23da0 <col:73> 'int' lvalue ParmVar 0x5564bda0e7e0 'i' 'int'
|-CXXMethodDecl 0x5564bda0eb28 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5564bda0e998 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5564bda0ea10 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5564bda24608 <col:41, line:528:5>
|   |-ParenExpr 0x5564bda24390 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5564bda24360 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda24080 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda24050 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda23f60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda23f48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda23f08 <col:23> 'int' lvalue ParmVar 0x5564bda0e998 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda23f28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda24030 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda24018 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda23f80 <col:33> 'int' lvalue ParmVar 0x5564bda0e998 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda23ff8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda23fe0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda23fa0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5564bda23fc0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5564bda240e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda240c0 <col:60> 'int' 0
|   |   `-CallExpr 0x5564bda242c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5564bda242a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda24288 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda24300 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda24150 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5564bda24318 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda24188 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda24330 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda241c0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5564bda24348 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda24270 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda24258 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda24218 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5564bda245e8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5564bda24598 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5564bda24568 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5564bda24510 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5564bda244d0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5564bda24480 <col:47, col:56> 'char [48]' lvalue ->c 0x5564bda16760
|     |     |   `-CXXMemberCallExpr 0x5564bda24460 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5564bda24430 <col:47> '<bound member function type>' ->xanno 0x5564bda0ba48
|     |     |       `-CXXThisExpr 0x5564bda24420 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5564bda244e8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5564bda244b0 <col:60> 'int' lvalue ParmVar 0x5564bda0e998 'i' 'int'
|     `-ImplicitCastExpr 0x5564bda245d0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5564bda245b0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5564bda0ea10 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5564bda0ece8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5564bda0ebf0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5564bda24cd8 <col:36, line:541:5>
|   |-ParenExpr 0x5564bda24a78 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5564bda24a48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda247a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda24770 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda24680 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda24668 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda24628 <col:23> 'int' lvalue ParmVar 0x5564bda0ebf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda24648 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda24750 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda24738 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda246a0 <col:33> 'int' lvalue ParmVar 0x5564bda0ebf0 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda24718 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda24700 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda246c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5564bda246e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5564bda24800 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda247e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5564bda249a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5564bda24990 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda24970 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda249e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda24870 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5564bda24a00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda248a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda24a18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda248e0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5564bda24a30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda24958 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda24940 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda24900 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5564bda24cc8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5564bda24cb0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5564bda24c98 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5564bda24c68 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5564bda24c10 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5564bda24be0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5564bda24b90 <col:61, col:70> 'char const[48]' lvalue ->c 0x5564bda16760
|             |   `-CXXMemberCallExpr 0x5564bda24b70 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5564bda24b40 <col:61> '<bound member function type>' ->xanno 0x5564bda0b8a8
|             |       `-CXXThisExpr 0x5564bda24b30 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5564bda24bf8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5564bda24bc0 <col:74> 'int' lvalue ParmVar 0x5564bda0ebf0 'i' 'int'
|-CXXMethodDecl 0x5564bda0eeb8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5564bda0eda8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5564bda0ee20 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5564bda0ef68 <col:20>
| `-OptimizeNoneAttr 0x5564bda0efc0 <col:30>
|-CXXMethodDecl 0x5564bda0f0f8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5564bda0f000 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5564bda253a8 <col:35, line:562:5>
|   |-ParenExpr 0x5564bda25148 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5564bda25118 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda24e70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda24e40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda24d50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda24d38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda24cf8 <col:23> 'int' lvalue ParmVar 0x5564bda0f000 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda24d18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda24e20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda24e08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda24d70 <col:33> 'int' lvalue ParmVar 0x5564bda0f000 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda24de8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda24dd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda24d90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5564bda24db0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5564bda24ed0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda24eb0 <col:60> 'int' 0
|   |   `-CallExpr 0x5564bda25078 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5564bda25060 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda25040 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda250b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda24f40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5564bda250d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda24f78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda250e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda24fb0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5564bda25100 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda25028 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda25010 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda24fd0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5564bda25398 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5564bda25380 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5564bda25368 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5564bda25338 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5564bda252e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5564bda252b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5564bda25260 <col:60, col:69> 'char const[48]' lvalue ->c 0x5564bda16760
|             |   `-CXXMemberCallExpr 0x5564bda25240 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5564bda25210 <col:60> '<bound member function type>' ->xanno 0x5564bda0b8a8
|             |       `-CXXThisExpr 0x5564bda25200 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5564bda252c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5564bda25290 <col:73> 'int' lvalue ParmVar 0x5564bda0f000 'i' 'int'
|-CXXMethodDecl 0x5564bda0f308 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5564bda0f1b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5564bda0f230 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5564bda25a88 <col:41, line:577:5>
|   |-ParenExpr 0x5564bda25818 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5564bda257e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda25540 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda25510 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda25420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda25408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda253c8 <col:23> 'int' lvalue ParmVar 0x5564bda0f1b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda253e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda254f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda254d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda25440 <col:33> 'int' lvalue ParmVar 0x5564bda0f1b8 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda254b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda254a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda25460 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5564bda25480 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5564bda255a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda25580 <col:60> 'int' 0
|   |   `-CallExpr 0x5564bda25748 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5564bda25730 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda25710 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda25788 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda25610 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5564bda257a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda25648 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda257b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda25680 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5564bda257d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda256f8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda256e0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda256a0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5564bda25a68 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5564bda25a18 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5564bda259e8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5564bda25988 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5564bda25958 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5564bda25908 <col:47, col:56> 'char [48]' lvalue ->c 0x5564bda16760
|     |     |   `-CXXMemberCallExpr 0x5564bda258e8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5564bda258b8 <col:47> '<bound member function type>' ->xanno 0x5564bda0ba48
|     |     |       `-CXXThisExpr 0x5564bda258a8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5564bda25970 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5564bda25938 <col:60> 'int' lvalue ParmVar 0x5564bda0f1b8 'i' 'int'
|     `-ImplicitCastExpr 0x5564bda25a50 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5564bda25a30 <col:65> 'int32_t':'int' lvalue ParmVar 0x5564bda0f230 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5564bda0f4c8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5564bda0f3d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5564bda261b8 <col:36, line:591:5>
|   |-ParenExpr 0x5564bda25ef8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5564bda25ec8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda25c20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda25bf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda25b00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda25ae8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda25aa8 <col:23> 'int' lvalue ParmVar 0x5564bda0f3d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda25ac8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda25bd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda25bb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda25b20 <col:33> 'int' lvalue ParmVar 0x5564bda0f3d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda25b98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda25b80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda25b40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5564bda25b60 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5564bda25c80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda25c60 <col:60> 'int' 0
|   |   `-CallExpr 0x5564bda25e28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5564bda25e10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda25df0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda25e68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda25cf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5564bda25e80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda25d28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda25e98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda25d60 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5564bda25eb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda25dd8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda25dc0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda25d80 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5564bda261a8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5564bda26190 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5564bda26178 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5564bda26148 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5564bda260c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5564bda26090 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5564bda26040 <col:61, col:70> 'char const[48]' lvalue ->c 0x5564bda16760
|             |   `-CXXMemberCallExpr 0x5564bda26020 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5564bda25ff0 <col:61> '<bound member function type>' ->xanno 0x5564bda0b8a8
|             |       `-CXXThisExpr 0x5564bda25fe0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5564bda260a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5564bda26070 <col:74> 'int' lvalue ParmVar 0x5564bda0f3d0 'i' 'int'
|-CXXMethodDecl 0x5564bda0f718 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5564bda0f588 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5564bda0f600 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5564bda26898 <col:42, line:606:5>
|   |-ParenExpr 0x5564bda26628 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5564bda265f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda26350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda26320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda26230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda26218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda261d8 <col:23> 'int' lvalue ParmVar 0x5564bda0f588 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda261f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda26300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5564bda262e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda26250 <col:33> 'int' lvalue ParmVar 0x5564bda0f588 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda262c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda262b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda26270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5564bda26290 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5564bda263b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda26390 <col:60> 'int' 0
|   |   `-CallExpr 0x5564bda26558 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5564bda26540 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda26520 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda26598 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda26420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5564bda265b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda26458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda265c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda26490 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5564bda265e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda26508 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda264f0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda264b0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5564bda26878 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5564bda26828 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5564bda267f8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5564bda26798 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5564bda26768 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5564bda26718 <col:48, col:57> 'char [48]' lvalue ->c 0x5564bda16760
|     |     |   `-CXXMemberCallExpr 0x5564bda266f8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5564bda266c8 <col:48> '<bound member function type>' ->xanno 0x5564bda0ba48
|     |     |       `-CXXThisExpr 0x5564bda266b8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5564bda26780 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5564bda26748 <col:61> 'int' lvalue ParmVar 0x5564bda0f588 'i' 'int'
|     `-ImplicitCastExpr 0x5564bda26860 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5564bda26840 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5564bda0f600 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5564bda0f8b0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5564bda0f7e0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5564bda27108 <col:33, line:620:5>
|   |-ParenExpr 0x5564bda26e80 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5564bda26e50 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda26aa0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda26a70 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda26910 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda268f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda268b8 <col:23> 'int' lvalue ParmVar 0x5564bda0f7e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda268d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda26a50 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5564bda26a38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda26930 <col:33> 'int' lvalue ParmVar 0x5564bda0f7e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda26a18 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda26a00 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda26950 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5564bda269d8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5564bda269c0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5564bda26988 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5564bda26b00 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda26ae0 <col:79> 'int' 0
|   |   `-CallExpr 0x5564bda26db0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5564bda26d98 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda26d78 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda26df0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda26be8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5564bda26e08 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda26c30 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda26e20 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda26c68 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5564bda26e38 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda26d60 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda26d48 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda26d08 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5564bda270f8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5564bda270e0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5564bda270c8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5564bda27098 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5564bda27010 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5564bda26fe0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5564bda26f90 <col:67, col:76> 'char const[48]' lvalue ->c 0x5564bda16760
|             |   `-CXXMemberCallExpr 0x5564bda26f70 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5564bda26f40 <col:67> '<bound member function type>' ->xanno 0x5564bda0b8a8
|             |       `-CXXThisExpr 0x5564bda26f30 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5564bda26ff8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5564bda26fc0 <col:80> 'int' lvalue ParmVar 0x5564bda0f7e0 'i' 'int'
|-CXXMethodDecl 0x5564bda0fac8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5564bda0f970 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5564bda0f9f0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5564bda27930 <col:45, line:635:5>
|   |-ParenExpr 0x5564bda27678 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5564bda27648 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5564bda27310 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5564bda272e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5564bda27180 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5564bda27168 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5564bda27128 <col:23> 'int' lvalue ParmVar 0x5564bda0f970 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5564bda27148 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5564bda272c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5564bda272a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5564bda271a0 <col:33> 'int' lvalue ParmVar 0x5564bda0f970 'i' 'int'
|   |   |     `-BinaryOperator 0x5564bda27288 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5564bda27270 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5564bda271c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5564bda0bc90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5564bda27248 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5564bda27230 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5564bda271f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5564bda27370 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5564bda27350 <col:79> 'int' 0
|   |   `-CallExpr 0x5564bda275a8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5564bda27590 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5564bda27570 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5564bd578560 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5564bda275e8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda273e0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5564bda27600 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5564bda27428 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5564bda27618 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5564bda27460 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5564bda27630 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5564bda27558 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5564bda27540 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5564bda274f8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5564bda27910 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5564bda27878 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5564bda27848 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5564bda277e8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5564bda277b8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5564bda27768 <col:54, col:63> 'char [48]' lvalue ->c 0x5564bda16760
|     |     |   `-CXXMemberCallExpr 0x5564bda27748 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5564bda27718 <col:54> '<bound member function type>' ->xanno 0x5564bda0ba48
|     |     |       `-CXXThisExpr 0x5564bda27708 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5564bda277d0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5564bda27798 <col:67> 'int' lvalue ParmVar 0x5564bda0f970 'i' 'int'
|     `-CXXConstCastExpr 0x5564bda278e0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5564bda278c8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5564bda27890 <col:91> 'const void *' lvalue ParmVar 0x5564bda0f9f0 'x' 'const void *'
|-CXXMethodDecl 0x5564bda0fb98 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5564bda279b8 <col:34, line:640:5>
|   `-ReturnStmt 0x5564bda279a8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5564bda27990 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5564bda27960 <col:16> 'Packet *' lvalue ->_data_packet 0x5564bda17318
|         `-CXXThisExpr 0x5564bda27950 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5564bda0fcd8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5564bda0fc48 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5564bda20a78 <col:46> 'bool' true
|-CXXMethodDecl 0x5564bda0fe58 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5564bda0fd90 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5564bda0ff00 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5564bda106b0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5564bda10000 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda10720 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda0ffe0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5564bda0ffc0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5564bda05160 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5564bda10090 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda10738 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda10070 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5564bda10050 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5564bda051f0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5564bda10120 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda10750 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda10100 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5564bda100e0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5564bda101b0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda10768 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda10190 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5564bda10170 <col:19> 'int' 16
| |-EnumConstantDecl 0x5564bda10240 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda10780 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda10220 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5564bda10200 <col:21> 'int' 16
| |-EnumConstantDecl 0x5564bda102d0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda10798 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda102b0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5564bda10290 <col:19> 'int' 32
| |-EnumConstantDecl 0x5564bda10360 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda107b0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda10340 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5564bda10320 <col:19> 'int' EnumConstant 0x5564bda101b0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5564bda103f0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda107c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda103d0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5564bda103b0 <col:19> 'int' EnumConstant 0x5564bda102d0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5564bda104c0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda107e0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda104a0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5564bda10480 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5564bda10440 <col:23> 'int' EnumConstant 0x5564bda103f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5564bda10460 <col:40> 'int' 2
| |-EnumConstantDecl 0x5564bda10590 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5564bda107f8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bda10570 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5564bda10550 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5564bda10510 <col:23> 'int' EnumConstant 0x5564bda103f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5564bda10530 <col:40> 'int' 4
| `-EnumConstantDecl 0x5564bda10660 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5564bda10810 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5564bda10640 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5564bda10620 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5564bda105e0 <col:23> 'int' EnumConstant 0x5564bda103f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5564bda10600 <col:40> 'int' 8
|-CXXMethodDecl 0x5564bda10850 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5564bda108f0 <col:68> "" ""
|-CXXMethodDecl 0x5564bda10988 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5564bda10a28 <col:45> "" ""
|-CXXMethodDecl 0x5564bda10ac0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5564bda10b60 <col:57> "" ""
|-CXXMethodDecl 0x5564bda10bf8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5564bda10c98 <col:45> "" ""
|-CXXMethodDecl 0x5564bda10d30 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5564bda10dd0 <col:57> "" ""
|-CXXMethodDecl 0x5564bda10e60 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5564bda10f00 <col:51> "" ""
|-CXXMethodDecl 0x5564bda10f90 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5564bda11030 <col:63> "" ""
|-CXXMethodDecl 0x5564bda110c0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5564bda11160 <col:53> "" ""
|-CXXMethodDecl 0x5564bda111f0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5564bda11290 <col:65> "" ""
|-CXXMethodDecl 0x5564bda113a8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5564bda11318 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5564bda11450 <col:61> "" ""
|-CXXMethodDecl 0x5564bda115e8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5564bda114d8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5564bda11550 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5564bda11698 <col:67> "" ""
|-CXXMethodDecl 0x5564bda117b0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5564bda11720 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5564bda11858 <col:63> "" ""
|-CXXMethodDecl 0x5564bda119f0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5564bda118e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5564bda11958 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5564bda11aa0 <col:69> "" ""
|-CXXMethodDecl 0x5564bda11bb8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5564bda11b28 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5564bda11c60 <col:63> "" ""
|-CXXMethodDecl 0x5564bda14338 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5564bda14228 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5564bda142a0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bda143e8 <col:69> "" ""
|-CXXMethodDecl 0x5564bda14500 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5564bda14470 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5564bda145a8 <col:62> "" ""
|-CXXMethodDecl 0x5564bda14740 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5564bda14630 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5564bda146a8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5564bda147f0 <col:68> "" ""
|-CXXMethodDecl 0x5564bda14908 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5564bda14878 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5564bda149b0 <col:63> "" ""
|-CXXMethodDecl 0x5564bda14b48 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5564bda14a38 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5564bda14ab0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5564bda14bf8 <col:69> "" ""
|-CXXMethodDecl 0x5564bda14c88 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5564bda14d28 <col:64> "" ""
|-CXXMethodDecl 0x5564bda14db8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5564bda14e58 <col:52> "" ""
|-CXXMethodDecl 0x5564bda14ee8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5564bda14f88 <col:67> "" ""
|-CXXMethodDecl 0x5564bda15018 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5564bda150b8 <col:55> "" ""
|-CXXMethodDecl 0x5564bda151d0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5564bda15140 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5564bda15278 <col:58> "" ""
|-CXXMethodDecl 0x5564bda15410 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5564bda15300 <col:33> col:36 'int'
| |-ParmVarDecl 0x5564bda15378 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5564bda154c0 <col:62> "" ""
|-CXXMethodDecl 0x5564bda155d8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5564bda15548 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5564bda15680 <col:58> "" ""
|-CXXMethodDecl 0x5564bda15818 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5564bda15708 <col:33> col:36 'int'
| |-ParmVarDecl 0x5564bda15780 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5564bda158c8 <col:62> "" ""
|-CXXMethodDecl 0x5564bda159e0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5564bda15950 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5564bda15a88 <col:60> "" ""
|-CXXMethodDecl 0x5564bda15c20 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5564bda15b10 <col:34> col:37 'int'
| |-ParmVarDecl 0x5564bda15b88 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5564bda15cd0 <col:64> "" ""
|-CXXMethodDecl 0x5564bda15de8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5564bda15d58 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5564bda15e90 <col:58> "" ""
|-CXXMethodDecl 0x5564bda16028 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5564bda15f18 <col:33> col:36 'int'
| |-ParmVarDecl 0x5564bda15f90 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5564bda160d8 <col:62> "" ""
|-CXXMethodDecl 0x5564bda161f0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5564bda16160 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5564bda16298 <col:59> "" ""
|-CXXMethodDecl 0x5564bda16430 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5564bda16320 <col:33> col:36 'int'
| |-ParmVarDecl 0x5564bda16398 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5564bda164e0 <col:63> "" ""
|-AccessSpecDecl 0x5564bda16550 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5564bda16578 prev 0x5564bda0b780 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5564bda16670 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5564bda16760 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5564bda16888 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5564bda16a08 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5564bda16b88 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5564bda16d08 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5564bda27b38 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5564bda283a8 <col:11>
| |-CXXDestructorDecl 0x5564bda27c10 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5564bda27d48 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5564bda27d48
| | `-ParmVarDecl 0x5564bda27e58 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5564bda27ef8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5564bda27ef8
| | `-ParmVarDecl 0x5564bda28008 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5564bda2adc8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5564bda2aed8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5564bda2b158 <col:11>
| |   `-ReturnStmt 0x5564bda2b148 <col:11>
| |     `-UnaryOperator 0x5564bda2b130 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5564bda2b120 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5564bda2af48 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5564bda2af48
|   `-ParmVarDecl 0x5564bda2b058 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5564bda16d70 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5564bda16e88 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5564bda16f28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5564bda16f90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5564bda16ff8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5564bda17060 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5564bda170c0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5564bda17180 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5564bda171e0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5564bda17240 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5564bda27a48 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5564bda16f28 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5564bda283b8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5564bda28410 <col:12>
| |-CXXConstructorDecl 0x5564bda28078 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5564bda28078
| | `-ParmVarDecl 0x5564bda28188 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5564bda28228 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5564bda28228
| | `-ParmVarDecl 0x5564bda28338 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5564bda2a4b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5564bda172b8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5564bda17318 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5564bda17380 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5564bda173e8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5564bda17450 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5564bda174b8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5564bda17518 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5564bda17578 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5564bda175e0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5564bda17668 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5564bda172b8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5564bda279e0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5564bda17518 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5564bda28420 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5564bda28480 <col:21, line:755:5>
|-CXXConstructorDecl 0x5564bda17808 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5564bda17748 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5564bda17900 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5564bda17ae8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5564bda179f0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5564bda17db8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5564bda17ba0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5564bda17c18 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5564bda17c90 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda17fd8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5564bda17e88 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5564bda17f00 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5564bda205b8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5564bda18098 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5564bda18110 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5564bda18188 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5564bda20710 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5564bda20680 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda20858 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5564bda207c8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5564bda20950 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bda28520 prev 0x5564bda04de0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5564bda28658 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5564bda286e8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5564bda28790 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5564bda28830 <col:20>
| `-OptimizeNoneAttr 0x5564bda28888 <col:30>
|-CXXMethodDecl 0x5564bda288d8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5564bda28978 <col:20>
| `-OptimizeNoneAttr 0x5564bda289d0 <col:30>
|-CXXMethodDecl 0x5564bda28a20 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5564bda28ae8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5564bda28bb0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5564bda28cc8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5564bda28d90 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5564bda28e30 <col:20>
| `-OptimizeNoneAttr 0x5564bda28e88 <col:30>
|-CXXMethodDecl 0x5564bda28ef8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5564bda28f98 <col:20>
| `-OptimizeNoneAttr 0x5564bda28ff0 <col:30>
|-CXXMethodDecl 0x5564bda29098 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5564bda29138 <col:20>
| `-OptimizeNoneAttr 0x5564bda29190 <col:30>
|-CXXMethodDecl 0x5564bda291e0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5564bda292f8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5564bda29418 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5564bda29538 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5564bda29600 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5564bda296a0 <col:62> "" ""
|-AccessSpecDecl 0x5564bda29710 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5564bda29770 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5564bda2a368 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5564bda2a590 <col:29, col:31>
|-CXXMethodDecl 0x5564bda29838 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5564bda29978 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5564bda298e8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5564bda29a70 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5564bda2a5a0 <col:23, col:25>
|-CXXMethodDecl 0x5564bda29c28 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5564bda29b60 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5564bda29ef8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5564bda29ce0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5564bda29d58 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5564bda29dd0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5564bda2a088 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5564bda29fc0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5564bda2a180 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5564bda2a1e8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5564bda2a1e8
  `-ParmVarDecl 0x5564bda2a2f8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd772ab8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bd772bd8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5564bd772ca0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5564bd843270 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5564bd848588 <col:8>
|-CXXConstructorDecl 0x5564bd843378 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5564bd843378
| `-ParmVarDecl 0x5564bd843488 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5564bd843528 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bd843638 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5564bd772ca0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5564bd8487a0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5564bd848770 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5564bd772ca0
| |     `-CXXStaticCastExpr 0x5564bd848740 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5564bd848710 <col:8> 'in_addr' lvalue ParmVar 0x5564bd843638 '' 'in_addr &&'
| `-CompoundStmt 0x5564bd8487e8 <col:8>
|-CXXDestructorDecl 0x5564bd848a20 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5564bdb27228 <col:8> col:8 implicit constexpr operator= 'in_addr &(const in_addr &)' inline default trivial noexcept-unevaluated 0x5564bdb27228
| `-ParmVarDecl 0x5564bdb27338 <col:8> col:8 'const in_addr &'
`-CXXMethodDecl 0x5564bdb273a8 <col:8> col:8 implicit used constexpr operator= 'in_addr &(in_addr &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5564bdb274b8 <col:8> col:8 used 'in_addr &&'
  `-CompoundStmt 0x5564bdb276d0 <col:8>
    |-BinaryOperator 0x5564bdb27678 <col:8> 'in_addr_t':'unsigned int' lvalue '='
    | |-MemberExpr 0x5564bdb27630 <col:8> 'in_addr_t':'unsigned int' lvalue ->s_addr 0x5564bd772ca0
    | | `-CXXThisExpr 0x5564bdb27620 <col:8> 'in_addr *' this
    | `-ImplicitCastExpr 0x5564bdb27660 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
    |   `-MemberExpr 0x5564bdb275f0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5564bd772ca0
    |     `-CXXStaticCastExpr 0x5564bdb275c0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
    |       `-DeclRefExpr 0x5564bdb27590 <col:8> 'in_addr' lvalue ParmVar 0x5564bdb274b8 '' 'in_addr &&'
    `-ReturnStmt 0x5564bdb276c0 <col:8>
      `-UnaryOperator 0x5564bdb276a8 <col:8> 'in_addr' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5564bdb27698 <col:8> 'in_addr *' this

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd83af58 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5564bd83b078 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5564bd83b160 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5564bd83b140 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5564bd83b108 <col:22> 'int' 4
|-FieldDecl 0x5564bd83b208 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x5564bd83b1e8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5564bd83b1b0 <col:21> 'int' 4
|-FieldDecl 0x5564bd83b268 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5564bd83b2c8 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5564bd83b328 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5564bd83b388 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5564bd83b3e8 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5564bd83b448 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5564bd83b4a8 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5564bd83b518 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5564bd83b588 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bdb20cf8 prev 0x5564bda04c80 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5564bdb20df0 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x5564bdb20e90 <line:12:5, col:14> col:14 referenced uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5564bdb20ef0 <line:13:5, col:14> col:14 referenced uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5564bdb20f50 <line:14:5, col:14> col:14 referenced uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x5564bdb20fb0 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IPAddress>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IPAddress * _ptr
        24 |   class IPAddress _slot
        24 |     uint32_t _addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd631728 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bd631848 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x5564bd8436c0 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5564bd8437a0 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x5564bd8437a0
| `-ParmVarDecl 0x5564bd843888 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x5564bd843928 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x5564bd843928
| `-ParmVarDecl 0x5564bd843a38 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x5564bd9e0720 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IPAddress> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bd84b880 prev 0x5564bd83dc68 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bd84b978 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x5564bd84ba08 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x5564bd84be30 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x5564bd84ba48 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x5564bd84bac8 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x5564bd84bc00 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x5564bd84bcb0 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x5564bd84c0f8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x5564bd84bf00 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5564bd84bf78 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x5564bd84c018 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5564bd850a98 <col:34> 'const ArgContext' lvalue Var 0x5564bd83dc00 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5564bd8504f0 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x5564bd84c1c0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5564bd84c2b0 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x5564bd84c328 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5564bd850ab8 <col:34> 'const ArgContext' lvalue Var 0x5564bd83dc00 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5564bd850c98 <col:46, line:375:5>
|   `-ReturnStmt 0x5564bd850c88 <line:374:2, col:63>
|     `-CallExpr 0x5564bd850c50 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x5564bd850c38 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5564bd850bf0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x5564bd84c0f8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x5564bd850b50 <col:15> 'const String' lvalue ParmVar 0x5564bd84c1c0 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5564bd850ba0 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5564bd850b70 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5564bd84c2b0 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x5564bd850bd0 <col:59> 'const ArgContext' lvalue ParmVar 0x5564bd84c328 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5564bd8509c8 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x5564bd8505b8 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5564bd850830 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x5564bd8508a8 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5564bd850ad8 <col:34> 'const ArgContext' lvalue Var 0x5564bd83dc00 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x5564bdb6c4b8 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5564bdb6c590 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5564bdb6c6c8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x5564bdb6c6c8
| `-ParmVarDecl 0x5564bdb6c7d8 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x5564bdb6c878 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5564bdb6c988 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x5564bdb6d5e0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5564bd851ac8 <../dummy_inc/click/ipaddress.hh:398:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x5564bd851d28 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5564bdb6c3c8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5564bdb6c9f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IPAddress> &)' inline default trivial noexcept-unevaluated 0x5564bdb6c9f8
| `-ParmVarDecl 0x5564bdb6cb08 <col:19> col:19 'const DefaultArg<IPAddress> &'
|-CXXConstructorDecl 0x5564bdb6cba8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IPAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bdb6ccb8 <col:19> col:19 used 'DefaultArg<IPAddress> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x5564bdb6d5f0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5564bdb6d5c0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x5564bdb6d590 <col:19> 'DefaultArg<IPAddress>' xvalue static_cast<struct DefaultArg<class IPAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x5564bdb6d560 <col:19> 'DefaultArg<IPAddress>' lvalue ParmVar 0x5564bdb6ccb8 '' 'DefaultArg<IPAddress> &&'
| `-CompoundStmt 0x5564bdb6d660 <col:19>
`-CXXDestructorDecl 0x5564bdb6cd58 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bdb0b600 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5564bdb0b718 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5564bdb0b7a8 <col:16, col:22> col:16 public
|-EnumDecl 0x5564bdb0b7d0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5564bdb0b8d0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5564bdb0bb20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bdb0b8b0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5564bdb0b890 <col:21> 'int' 0
| |-EnumConstantDecl 0x5564bdb0b960 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5564bdb0bb38 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bdb0b940 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5564bdb0b920 <col:24> 'int' 22
| |-EnumConstantDecl 0x5564bdb0b9f0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5564bdb0bb50 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bdb0b9d0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5564bdb0b9b0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5564bdb0ba80 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5564bdb0bb68 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5564bdb0ba60 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5564bdb0ba40 <col:25> 'int' 95
| `-EnumConstantDecl 0x5564bdb0bad0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5564bdb0d4e0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5564bdb0d918 <col:7>
|-CXXConstructorDecl 0x5564bdb0d5e8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5564bdb0d5e8
| `-ParmVarDecl 0x5564bdb0d6f8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5564bdb0d798 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bdb0d8a8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5564bdb7ff70 <col:7>
`-CXXDestructorDecl 0x5564bdb0fa18 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5564bdb0bb98 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5564bdb0bcf8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5564bdb0bd88 <col:32, col:38> col:32 public
|-TypedefDecl 0x5564bdb0bdc0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5564bd631ab0 'uint32_t' sugar
|   |-Typedef 0x5564bd5454c8 'uint32_t'
|   `-TypedefType 0x5564bd51e5a0 '__uint32_t' sugar
|     |-Typedef 0x5564bd51e198 '__uint32_t'
|     `-BuiltinType 0x5564bd4dc620 'unsigned int'
|-CXXConstructorDecl 0x5564bdb0bf08 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5564bdb0be30 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5564bdb0d3e8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5564bdb0d928 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5564bdb0cca0 'base' 'int'
| | `-ImplicitCastExpr 0x5564bdb0d488 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5564bdb0d448 <col:16> 'int' lvalue ParmVar 0x5564bdb0be30 'b' 'int'
| `-CompoundStmt 0x5564bdb0d998 <col:19, line:1046:5>
|-CXXMethodDecl 0x5564bdb0c400 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5564bdb0bfd0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5564bdb0c050 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5564bdb0c0c8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5564bdb0c148 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5564bdb0c208 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5564bdb0c288 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5564bdb0c858 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5564bdb0c4d0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5564bdb0c7b8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5564bdb0c578 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5564bdb0c618 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5564bdb0c690 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5564bdb0d408 <col:82> 'const ArgContext' lvalue Var 0x5564bdb02ec8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5564bdb0e8c8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5564bdb0db28 <line:1054:9, col:64>
| |   | `-VarDecl 0x5564bdb0d9b8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5564bdb0dae0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5564bdb0dd48 <line:1055:9, col:91>
| |   | `-VarDecl 0x5564bdb0db58 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5564bdb0dd20 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5564bdb0dd00 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5564bdb0dcb0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5564bdb0dc90 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5564bdb0dc38 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5564bdb0dbe8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5564bdb0dc18 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5564bdb0dc78 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5564bdb0dc58 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5564bdb0dce0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5564bdb0dea8 <line:1056:9, col:27>
| |   | `-VarDecl 0x5564bdb0de40 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5564bdb0e2f0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5564bdb0e220 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5564bdb0e1a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5564bd9fba98 0x5564bd845078 0x5564bd844d50 0x5564bd835520 0x5564bd8351d0 0x5564bd834ac0 0x5564bd807430 0x5564bd794900
| |   | | |-CallExpr 0x5564bdb0e0e0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5564bdb0ded0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5564bdb0df80 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5564bdb0df50 <col:19, col:23> '<bound member function type>' .begin 0x5564bd824728
| |   | | | |   `-DeclRefExpr 0x5564bdb0df30 <col:19> 'const String' lvalue ParmVar 0x5564bdb0c578 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5564bdb0dff0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5564bdb0dfc0 <col:32, col:36> '<bound member function type>' .end 0x5564bd824940
| |   | | | |   `-DeclRefExpr 0x5564bdb0dfa0 <col:32> 'const String' lvalue ParmVar 0x5564bdb0c578 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5564bdb0e010 <col:43> 'const bool' lvalue Var 0x5564bdb0d9b8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5564bdb0e078 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5564bdb0e058 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5564bdb0e0a0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5564bdb0de40 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5564bdb0e0c0 <col:73> 'const int' lvalue Var 0x5564bdb0db58 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5564bdb0e180 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5564bdb0e150 <col:16, col:20> '<bound member function type>' .end 0x5564bd824940
| |   | |     `-DeclRefExpr 0x5564bdb0e130 <col:16> 'const String' lvalue ParmVar 0x5564bdb0c578 'str' 'const String &'
| |   | `-BinaryOperator 0x5564bdb0e2d0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5564bdb0e268 <col:13> 'int' lvalue ->status 0x5564bdb0cd08
| |   |   | `-CXXThisExpr 0x5564bdb0e258 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5564bdb0e2b8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5564bdb0e298 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5564bdb0b960 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5564bdb0e540 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5564bdb0e428 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5564bdb0e410 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5564bdb0e3f8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5564bdb0e318 <col:13> 'int' lvalue ->status 0x5564bdb0cd08
| |   | | |     `-CXXThisExpr 0x5564bdb0e308 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5564bdb0e3d8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5564bdb0e3a8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5564bdb0e358 <col:23> 'int' lvalue ->status 0x5564bdb0cd08
| |   | |   |   `-CXXThisExpr 0x5564bdb0e348 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5564bdb0e3c0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5564bdb0e388 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5564bdb0b9f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5564bdb0e520 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5564bdb0e4c0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5564bdb0e468 <col:13, col:18> '<bound member function type>' .error 0x5564bdab63a0
| |   |   | | `-DeclRefExpr 0x5564bdb0e448 <col:13> 'const ArgContext' lvalue ParmVar 0x5564bdb0c690 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5564bdb0e4e8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5564bdb0e498 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5564bdb0e510 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5564bdb0e500 <col:20> 'bool' false
| |   |-DeclStmt 0x5564bdb0e718 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5564bdb0e6c0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5564bdb0e650 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5564bdb0e878 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5564bdb0e730 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5564bd7c88c8
| |   | |-DeclRefExpr 0x5564bdb0e778 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5564bdb0de40 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5564bdb0e848 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5564bdb0e7c0 <col:64> 'V' lvalue ParmVar 0x5564bdb0c618 'result' 'V &'
| |   `-ReturnStmt 0x5564bdb0e8b8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5564bdb0e8a8 <col:16> 'bool' true
| `-CXXMethodDecl 0x5564bdb83578 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5564bdb83350 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5564bdb83428 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x5564bdb83490 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5564bdb8b840 <col:94, line:1067:5>
|     |-DeclStmt 0x5564bdb8a2b8 <line:1054:9, col:64>
|     | `-VarDecl 0x5564bdb8a0d8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5564bdb8a248 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5564bdb8a218 <col:36, col:55> 'const bool' lvalue Var 0x5564bd7b8838 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5564bdb8a498 <line:1055:9, col:91>
|     | `-VarDecl 0x5564bdb8a2d0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5564bdb8a418 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5564bdb8a400 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5564bdb8a3e0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5564bdb8a3c0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5564bdb8a3a0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5564bdb8a368 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5564bdb8a348 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5564bdb0dc18 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5564bdb8a388 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5564bdb0dc58 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5564bdb0dce0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5564bdb8a630 <line:1056:9, col:27>
|     | `-VarDecl 0x5564bdb8a5c8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5564bdb8aab8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5564bdb8aa60 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5564bdb8a918 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5564bdb8a8e8 <col:13> '<bound member function type>' ->parse 0x5564bdb0c400
|     | | | | `-CXXThisExpr 0x5564bdb8a8d8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5564bdb8a778 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5564bdb8a748 <col:19, col:23> '<bound member function type>' .begin 0x5564bd824728
|     | | | |   `-DeclRefExpr 0x5564bdb8a728 <col:19> 'const String' lvalue ParmVar 0x5564bdb83350 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5564bdb8a7e8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5564bdb8a7b8 <col:32, col:36> '<bound member function type>' .end 0x5564bd824940
|     | | | |   `-DeclRefExpr 0x5564bdb8a798 <col:32> 'const String' lvalue ParmVar 0x5564bdb83350 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5564bdb8a988 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5564bdb8a968 <col:43> 'const bool' lvalue Var 0x5564bdb8a0d8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5564bdb8a870 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5564bdb8a858 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5564bdb8a838 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x5564bdb8a9a0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5564bdb8a898 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5564bdb8a5c8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5564bdb8a9d8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5564bdb8a9b8 <col:73> 'const int' lvalue Var 0x5564bdb8a2d0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5564bdb8aa40 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5564bdb8aa10 <col:16, col:20> '<bound member function type>' .end 0x5564bd824940
|     | |     `-DeclRefExpr 0x5564bdb8a9f0 <col:16> 'const String' lvalue ParmVar 0x5564bdb83350 'str' 'const String &'
|     | `-BinaryOperator 0x5564bdb8aa98 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5564bdb0e268 <col:13> 'int' lvalue ->status 0x5564bdb0cd08
|     |   | `-CXXThisExpr 0x5564bdb0e258 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5564bdb8aa80 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5564bdb0e298 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5564bdb0b960 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5564bdb8ac30 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5564bdb8ab50 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5564bdb8ab38 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5564bdb8ab20 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5564bdb0e318 <col:13> 'int' lvalue ->status 0x5564bdb0cd08
|     | | |     `-CXXThisExpr 0x5564bdb0e308 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5564bdb8ab00 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5564bdb8aad0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5564bdb0e358 <col:23> 'int' lvalue ->status 0x5564bdb0cd08
|     | |   |   `-CXXThisExpr 0x5564bdb0e348 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5564bdb8aae8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5564bdb0e388 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5564bdb0b9f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5564bdb8ac10 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5564bdb8abc0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5564bdb8ab90 <col:13, col:18> '<bound member function type>' .error 0x5564bdab63a0
|     |   | | `-DeclRefExpr 0x5564bdb8ab70 <col:13> 'const ArgContext' lvalue ParmVar 0x5564bdb83490 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5564bdb8abe8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5564bdb0e498 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5564bdb8ac00 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5564bdb0e500 <col:20> 'bool' false
|     |-DeclStmt 0x5564bdb8b178 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5564bdb8b120 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5564bdb8b0d0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x5564bdb8b0b0 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x5564bdb8b040 'type'
|     |       `-ElaboratedType 0x5564bdb8aff0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x5564bdb8afd0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x5564bd7b8990 'unsigned_type'
|     |           `-BuiltinType 0x5564bd4dc620 'unsigned int'
|     |-CallExpr 0x5564bdb8b7d0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5564bdb8b7b8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5564bdb8b738 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5564bdb8b618 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5564bd7c88c8 'extract_integer')
|     | |-ImplicitCastExpr 0x5564bdb8b818 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5564bdb8b800 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5564bdb8b1d8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5564bdb8a5c8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5564bdb8b2a8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x5564bdb8b258 <col:64> 'int':'int' lvalue ParmVar 0x5564bdb83428 'result' 'int &'
|     `-ReturnStmt 0x5564bdb8b830 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5564bdb0e8a8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5564bdb0cc18 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5564bdb0c8c8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5564bdb0cb78 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5564bdb0c978 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5564bdb0ca18 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5564bdb0ca90 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5564bdb0d428 <col:71> 'const ArgContext' lvalue Var 0x5564bdb02ec8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5564bdb0f038 <col:83, line:1083:5>
| |   |-DeclStmt 0x5564bdb0e990 <line:1071:9, col:12>
| |   | `-VarDecl 0x5564bdb0e928 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5564bdb0f010 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5564bdb0ec20 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5564bdb0eaa8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5564bdb0ea70 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5564bdb0e9b8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5564bdb0ea10 <col:31> 'const String' lvalue ParmVar 0x5564bdb0c978 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5564bdb0ea30 <col:36> 'V' lvalue Var 0x5564bdb0e928 'x' 'V'
| |     | |   `-DeclRefExpr 0x5564bdb0ea50 <col:39> 'const ArgContext' lvalue ParmVar 0x5564bdb0ca90 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5564bdb0ec00 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5564bdb0ebe0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5564bdb0ebc8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5564bdb0ebb0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5564bdb0ead0 <col:17> 'int' lvalue ->status 0x5564bdb0cd08
| |     |     |     `-CXXThisExpr 0x5564bdb0eac0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5564bdb0eb90 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5564bdb0eb60 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5564bdb0eb10 <col:27> 'int' lvalue ->status 0x5564bdb0cd08
| |     |       |   `-CXXThisExpr 0x5564bdb0eb00 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5564bdb0eb78 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5564bdb0eb40 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5564bdb0b9f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5564bdb0ec50 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5564bdb0ec40 <col:20> 'bool' false
| |     `-IfStmt 0x5564bdb0efe8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5564bdb0ecf0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5564bdb0ecc0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5564bdb0ec70 <col:18> 'int' lvalue ->status 0x5564bdb0cd08
| |       | |   `-CXXThisExpr 0x5564bdb0ec60 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5564bdb0ecd8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5564bdb0eca0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5564bdb0b9f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5564bdb0ef28 <col:42, line:1079:9>
| |       | |-CallExpr 0x5564bdb0eed0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5564bdb0ed20 <line:1076:13> '<bound member function type>' ->range_error 0x5564bdb0d318
| |       | | | `-CXXThisExpr 0x5564bdb0ed10 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5564bdb0ed50 <col:25> 'const ArgContext' lvalue ParmVar 0x5564bdb0ca90 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5564bdb0ee30 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5564bdb0eea8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5564bdb0ee88 <col:43> 'V' lvalue Var 0x5564bdb0e928 'x' 'V'
| |       | `-ReturnStmt 0x5564bdb0ef18 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5564bdb0ef08 <col:20> 'bool' false
| |       `-CompoundStmt 0x5564bdb0efc8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5564bdb0ef88 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5564bdb0ef48 <col:13> 'V' lvalue ParmVar 0x5564bdb0ca18 'result' 'V &'
| |         | `-DeclRefExpr 0x5564bdb0ef68 <col:22> 'V' lvalue Var 0x5564bdb0e928 'x' 'V'
| |         `-ReturnStmt 0x5564bdb0efb8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5564bdb0efa8 <col:20> 'bool' true
| `-CXXMethodDecl 0x5564bdb82f38 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5564bdb82d10 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5564bdb82de8 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x5564bdb82e50 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5564bdb8a0b8 <col:83, line:1083:5>
|     |-DeclStmt 0x5564bdb831c0 <line:1071:9, col:12>
|     | `-VarDecl 0x5564bdb83158 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x5564bdb8a090 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5564bdb89d18 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5564bdb89c40 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5564bdb836e0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5564bdb83698 <col:14> '<bound member function type>' ->parse_saturating 0x5564bdb83578
|       | |   | `-CXXThisExpr 0x5564bdb83688 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5564bdb83230 <col:31> 'const String' lvalue ParmVar 0x5564bdb82d10 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5564bdb83250 <col:36> 'int':'int' lvalue Var 0x5564bdb83158 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x5564bdb83270 <col:39> 'const ArgContext' lvalue ParmVar 0x5564bdb82e50 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5564bdb89cf8 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5564bdb89cd8 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5564bdb89cc0 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5564bdb89ca8 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5564bdb0ead0 <col:17> 'int' lvalue ->status 0x5564bdb0cd08
|       |     |     `-CXXThisExpr 0x5564bdb0eac0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5564bdb89c88 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5564bdb89c58 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5564bdb0eb10 <col:27> 'int' lvalue ->status 0x5564bdb0cd08
|       |       |   `-CXXThisExpr 0x5564bdb0eb00 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5564bdb89c70 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5564bdb0eb40 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5564bdb0b9f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5564bdb89d38 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5564bdb0ec40 <col:20> 'bool' false
|       `-IfStmt 0x5564bdb8a068 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5564bdb89d78 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5564bdb89d48 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5564bdb0ec70 <col:18> 'int' lvalue ->status 0x5564bdb0cd08
|         | |   `-CXXThisExpr 0x5564bdb0ec60 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5564bdb89d60 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5564bdb0eca0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5564bdb0b9f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5564bdb89fa0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5564bdb89f10 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5564bdb0ed20 <line:1076:13> '<bound member function type>' ->range_error 0x5564bdb0d318
|         | | | `-CXXThisExpr 0x5564bdb0ed10 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5564bdb89d98 <col:25> 'const ArgContext' lvalue ParmVar 0x5564bdb82e50 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5564bdb89f78 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5564bdb89f48 <col:31, col:50> 'const bool' lvalue Var 0x5564bd7b8838 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5564bdb89ee8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5564bdb89ed0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5564bdb89eb8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5564bdb89e98 <col:43> 'int':'int' lvalue Var 0x5564bdb83158 'x' 'int':'int'
|         | `-ReturnStmt 0x5564bdb89f90 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5564bdb0ef08 <col:20> 'bool' false
|         `-CompoundStmt 0x5564bdb8a048 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5564bdb8a018 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x5564bdb89fc0 <col:13> 'int':'int' lvalue ParmVar 0x5564bdb82de8 'result' 'int &'
|           | `-ImplicitCastExpr 0x5564bdb8a000 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5564bdb89fe0 <col:22> 'int':'int' lvalue Var 0x5564bdb83158 'x' 'int':'int'
|           `-ReturnStmt 0x5564bdb8a038 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5564bdb0efa8 <col:20> 'bool' true
|-FieldDecl 0x5564bdb0cca0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5564bdb0cd08 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5564bdb0cd58 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5564bdb0d010 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5564bdb0cd98 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5564bdb0ce18 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5564bdb0ce90 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5564bdb0cf10 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5564bdb0d318 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5564bdb0d0e0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5564bdb0d158 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5564bdb0d1f0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5564bdb0f898 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5564bdb0f898
| `-ParmVarDecl 0x5564bdb0f9a8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5564bdb0fb28 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bdb0fc38 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5564bdb7ff80 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5564bdb7ff50 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5564bdb7ff20 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5564bdb7fef0 <col:7> 'IntArg' lvalue ParmVar 0x5564bdb0fc38 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5564bdb0cca0 'base' 'int'
| | `-ImplicitCastExpr 0x5564bdb80078 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5564bdb80048 <col:7> 'int' xvalue .base 0x5564bdb0cca0
| |     `-CXXStaticCastExpr 0x5564bdb80018 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5564bdb7ffe8 <col:7> 'IntArg' lvalue ParmVar 0x5564bdb0fc38 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5564bdb0cd08 'status' 'int'
| | `-ImplicitCastExpr 0x5564bdb80148 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5564bdb80118 <col:7> 'int' xvalue .status 0x5564bdb0cd08
| |     `-CXXStaticCastExpr 0x5564bdb800e8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5564bdb800b8 <col:7> 'IntArg' lvalue ParmVar 0x5564bdb0fc38 '' 'IntArg &&'
| `-CompoundStmt 0x5564bdb801a0 <col:7>
`-CXXDestructorDecl 0x5564bdb7f0e0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5564bdb14190 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5564bdb143e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5564bdb7f008 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5564bdb7f580 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5564bdb7f560 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5564bdb7f5f0 <col:19>
|-CXXConstructorDecl 0x5564bdb7f1e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x5564bdb7f1e8
| `-ParmVarDecl 0x5564bdb7f2f8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x5564bdb7f398 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5564bdb7f4a8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5564bdb801b0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5564bdb7fed0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5564bdb7fea0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x5564bdb7fe70 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x5564bdb7f4a8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x5564bdb80220 <col:19>
`-CXXDestructorDecl 0x5564bdb7f630 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
