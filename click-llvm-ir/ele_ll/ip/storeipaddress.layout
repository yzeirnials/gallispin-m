
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57db8ee8 prev 0x55bf57db0688 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57db8fe0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55bf57db9070 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55bf57db90e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55bf57db91a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55bf57db9270 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55bf57db93e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55bf57db9320 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55bf57db9490 <col:24>
| `-OptimizeNoneAttr 0x55bf57db94e8 <col:34>
|-CXXMethodDecl 0x55bf57db9530 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55bf57db97e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55bf57db95e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55bf57db9658 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55bf57db96d8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55bf57db98a0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55bf57db98d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55bf57db9940 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55bf57db99c8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55bf57db9ce8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55bf57db9a80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55bf57db9af8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55bf57db9b70 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55bf57db9bf0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55bf57db9e00 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55bf57dc0768 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55bf57dc0768
| `-ParmVarDecl 0x55bf57dc0878 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55bf57dc0918 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55bf57dc0918
| `-ParmVarDecl 0x55bf57dc0a28 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55bf57e8bb68 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57dabf00 prev 0x55bf57dabc80 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bf57dabff8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55bf57dac088 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55bf57dac0e8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55bf57dac1d8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55bf57dac2d8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55bf57dac4a8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55bf57dac358 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55bf57dac3d0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55bf57dac638 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55bf57dac570 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55bf57dac6e0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55bf57dac818 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55bf57dac750 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55bf57dac9b8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55bf57dac8f8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55bf57dacb58 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55bf57daca98 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55bf57dacc00 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55bf57dacd00 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55bf57dacde0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57dacce0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55bf57daccc0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55bf57dacd90 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55bf57dacdf8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57dacd70 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55bf57dacd50 <col:44> 'int' 2
|-CXXMethodDecl 0x55bf57dacf40 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55bf57dace28 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55bf57dacea8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55bf57dad098 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55bf57dad008 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55bf57dad2d8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55bf57dad158 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55bf57dad1d0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55bf57dad388 <col:20>
| `-OptimizeNoneAttr 0x55bf57dad3e0 <col:30>
|-CXXMethodDecl 0x55bf57dad4e8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55bf57dad420 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55bf57dad590 <col:20>
| `-OptimizeNoneAttr 0x55bf57dad5e8 <col:30>
|-CXXMethodDecl 0x55bf57dad638 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55bf57dad700 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55bf57dad818 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55bf57dad8a0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55bf57dad928 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55bf57dad9b0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55bf57dada38 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55bf57dadac8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55bf57dadb88 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55bf57dadc10 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55bf57dadc98 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55bf57dadd20 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55bf57dadda8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55bf57dade30 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55bf57dadec0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55bf57dadf80 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55bf57dae010 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55bf57dae160 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55bf57dae0c8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55bf57dae2f0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55bf57dae220 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55bf57dae5a0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55bf57dae3a8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55bf57dae428 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55bf57dae4a8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55bf57dae658 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55bf57dae760 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bf57dae9f0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57dae740 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55bf57dae720 <col:33> 'int' 0
| |-EnumConstantDecl 0x55bf57dae7f0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bf57daea08 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57dae7d0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55bf57dae7b0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55bf57dae880 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bf57daea20 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57dae860 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55bf57dae840 <col:38> 'int' 90
| |-EnumConstantDecl 0x55bf57dae910 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bf57daea38 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57dae8f0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55bf57dae8d0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55bf57dae9a0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55bf57daea50 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57dae980 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55bf57dae960 <col:32> 'int' 2000
|-CXXMethodDecl 0x55bf57daea90 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55bf57daeed0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bf57daed40 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55bf57daedb8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57daefa0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55bf57daf120 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55bf57daf050 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57daf328 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bf57daf1d8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55bf57daf250 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57daf428 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55bf57daf4c8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55bf57daf590 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bf57daf620 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55bf57daf850 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57daf600 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55bf57daf5e0 <col:36> 'int' EnumConstant 0x55bf57daf590 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bf57daf670 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bf57daf6c0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bf57daf710 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bf57daf760 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bf57daf7b0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55bf57daf800 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55bf57daf938 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55bf57daf878 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55bf57dafa00 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55bf57dafac0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55bf57dafb80 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55bf57dafc40 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55bf57dafd58 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55bf57dafe20 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55bf57daffa0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55bf57dafed0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55bf57db00c8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55bf57db02c8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55bf57db0178 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55bf57db01f8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55bf57dbcc08 <col:54, line:127:5>
|   |-ParenExpr 0x55bf57dbcab8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55bf57dbca88 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57dbc778 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55bf57dbc750 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55bf57dbc738 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55bf57dbc720 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55bf57dbc6f0 <col:31> 'Router *' lvalue ->_router 0x55bf57dba5d0
|   |   |         `-CXXThisExpr 0x55bf57dbc6e0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55bf57dbc7d8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57dbc7b8 <col:48> 'int' 0
|   |   `-CallExpr 0x55bf57dbc9e8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55bf57dbc9d0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57dbc9b0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57dbca28 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57dbc848 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55bf57dbca40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57dbc868 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55bf57dbca58 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57dbc8a0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55bf57dbca70 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57dbc998 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57dbc980 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57dbc938 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55bf57dbcb50 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55bf57dbcae8 <col:9> 'Router *' lvalue ->_router 0x55bf57dba5d0
|   | | `-CXXThisExpr 0x55bf57dbcad8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55bf57dbcb38 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bf57dbcb18 <col:19> 'Router *' lvalue ParmVar 0x55bf57db0178 'r' 'Router *'
|   `-BinaryOperator 0x55bf57dbcbe8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55bf57dbcb80 <col:9> 'int' lvalue ->_eindex 0x55bf57dba638
|     | `-CXXThisExpr 0x55bf57dbcb70 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55bf57dbcbd0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57dbcbb0 <col:19> 'int' lvalue ParmVar 0x55bf57db01f8 'eindex' 'int'
|-CXXMethodDecl 0x55bf57db0450 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55bf57db0388 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55bf57db0520 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55bf57db05e8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55bf57db0688 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55bf57db08d8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55bf57db0750 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55bf57db07d0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55bf57db0988 <col:20>
| `-OptimizeNoneAttr 0x55bf57db09e0 <col:30>
|-CXXMethodDecl 0x55bf57db0ae8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55bf57db0a20 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55bf57db0b90 <col:20>
| `-OptimizeNoneAttr 0x55bf57db0be8 <col:30>
|-CXXMethodDecl 0x55bf57db0cb8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55bf57db0c28 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55bf57db0d60 <col:20>
| `-OptimizeNoneAttr 0x55bf57db0db8 <col:30>
|-CXXMethodDecl 0x55bf57db0f48 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55bf57db0df0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55bf57db0e70 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55bf57db10d8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55bf57db1010 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55bf57db1228 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55bf57db1198 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55bf57db1378 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55bf57db12e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55bf57db14c8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55bf57db1438 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55bf57db1788 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55bf57db1580 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55bf57db1600 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55bf57db16a8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55bf57db1860 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55bf57db1920 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55bf57db1bf0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bf57db1aa0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55bf57db1b18 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57db1d18 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55bf57db1ef0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55bf57db1dd0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55bf57db1e50 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55bf57db20d8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55bf57db1fb8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55bf57db2038 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55bf57db2448 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55bf57db2198 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55bf57db2210 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55bf57db2290 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55bf57dbc1f0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55bf57dbc1d0 <col:106> 'int' 0
| `-ParmVarDecl 0x55bf57db2308 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bf57dbc228 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bf57dbc208 <col:126> 'int' 0
|-CXXMethodDecl 0x55bf57db27e8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bf57db2518 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55bf57db25b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55bf57db2630 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55bf57db26a8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bf57dbc260 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bf57dbc240 <col:114> 'int' 0
|-CXXMethodDecl 0x55bf57db2b78 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bf57db28c0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55bf57db2938 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55bf57db29b8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55bf57dbc278 <col:96> 'int' 0
| `-ParmVarDecl 0x55bf57db2a30 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bf57dbc2b8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bf57dbc298 <col:116> 'int' 0
|-CXXMethodDecl 0x55bf57db2ef8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55bf57db2c48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55bf57db2cc0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57db2d40 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55bf57dbc2f0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55bf57dbc2d0 <col:109> 'int' 0
| `-ParmVarDecl 0x55bf57db2db8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bf57dbc328 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bf57dbc308 <col:129> 'int' 0
|-CXXMethodDecl 0x55bf57db3278 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bf57db2fc8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55bf57db3040 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57db30c0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55bf57db3138 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bf57dbc360 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bf57dbc340 <col:117> 'int' 0
|-CXXMethodDecl 0x55bf57db3608 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bf57db3350 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db33c8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57db3448 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55bf57dbc378 <col:99> 'int' 0
| `-ParmVarDecl 0x55bf57db34c0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bf57dbc3b8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bf57dbc398 <col:119> 'int' 0
|-CXXMethodDecl 0x55bf57db3a28 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55bf57db36d8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55bf57db3758 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55bf57db37d0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57db3850 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55bf57dbc3f0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55bf57dbc3d0 <col:108> 'int' 0
| `-ParmVarDecl 0x55bf57db38d0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55bf57dbc428 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55bf57dbc408 <col:141> 'int' 0
|-CXXMethodDecl 0x55bf57db3e48 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55bf57db3b00 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55bf57db3b80 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55bf57db3bf8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57db3c78 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55bf57db3cf8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55bf57dbc440 <col:121> 'int' 0
|-CXXMethodDecl 0x55bf57db4278 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55bf57db3f28 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55bf57db3fa8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55bf57db4020 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57db40a0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55bf57dbc460 <col:98> 'int' 0
| `-ParmVarDecl 0x55bf57db4120 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55bf57dbc480 <col:123> 'int' 0
|-CXXMethodDecl 0x55bf57db4540 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55bf57db4350 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55bf57db43d0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55bf57db4450 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55bf57dbc4a0 <col:80> 'int' 0
|-EnumDecl 0x55bf57db45f8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55bf57db4700 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bf57db4990 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57db46e0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55bf57db46c0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55bf57db4790 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bf57db49a8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57db4770 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55bf57db4750 <col:40> 'int' 2
| |-EnumConstantDecl 0x55bf57db4820 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bf57db49c0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57db4800 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55bf57db47e0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55bf57db48b0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bf57db49d8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57db4890 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55bf57db4870 <col:36> 'int' 7
| `-EnumConstantDecl 0x55bf57db4940 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55bf57db49f0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57db4920 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55bf57db4900 <col:34> 'int' 6
|-CXXMethodDecl 0x55bf57db4ca8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55bf57db4a18 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55bf57db4ab8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55bf57db4b38 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55bf57db4bb0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55bf57dbc558 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55bf57dbc540 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55bf57dbc528 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55bf57dbc508 <col:98, col:105> 'String' (CXXTemporary 0x55bf57dbc508)
|           `-CXXTemporaryObjectExpr 0x55bf57dbc4d0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55bf57db4f48 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55bf57db4d78 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55bf57db4df0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55bf57db4e68 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55bf57dbc608 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55bf57dbc5f0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55bf57dbc5d8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55bf57dbc5b8 <col:94, col:101> 'String' (CXXTemporary 0x55bf57dbc5b8)
| |         `-CXXTemporaryObjectExpr 0x55bf57dbc580 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55bf57dbcdf0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55bf57dbcd68 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55bf57dbcd38 <col:9> '<bound member function type>' ->add_task_handlers 0x55bf57db4ca8
|     | `-CXXThisExpr 0x55bf57dbcd28 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55bf57dbcda8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bf57dbcca8 <col:27> 'Task *' lvalue ParmVar 0x55bf57db4d78 'task' 'Task *'
|     |-ImplicitCastExpr 0x55bf57dbcdc0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bf57dbccc8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55bf57db4df0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55bf57dbcdd8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55bf57dbcce8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55bf57db4940 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55bf57dbcd08 <col:62> 'const String' lvalue ParmVar 0x55bf57db4e68 'prefix' 'const String &'
|-CXXMethodDecl 0x55bf57db5158 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55bf57db5010 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55bf57db5088 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55bf57dbc6b8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55bf57dbc6a0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55bf57dbc688 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55bf57dbc668 <col:70, col:77> 'String' (CXXTemporary 0x55bf57dbc668)
| |         `-CXXTemporaryObjectExpr 0x55bf57dbc630 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55bf57dbcfc8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55bf57dbcf40 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55bf57dbcf10 <col:9> '<bound member function type>' ->add_task_handlers 0x55bf57db4ca8
|     | `-CXXThisExpr 0x55bf57dbcf00 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55bf57dbcf80 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bf57dbce80 <col:27> 'Task *' lvalue ParmVar 0x55bf57db5010 'task' 'Task *'
|     |-ImplicitCastExpr 0x55bf57dbcf98 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55bf57dbcea0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55bf57dbcfb0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55bf57dbcec0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55bf57db4940 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55bf57dbcee0 <col:57> 'const String' lvalue ParmVar 0x55bf57db5088 'prefix' 'const String &'
|-CXXMethodDecl 0x55bf57db5438 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55bf57db5220 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db52a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db5318 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55bf57db56e8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55bf57db5508 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db5588 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db5608 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55bf57db59d8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55bf57db57b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db5838 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db58b0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55bf57db5c88 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55bf57db5aa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db5b28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db5ba8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55bf57db5f38 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55bf57db5d58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db5dd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db5e58 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55bf57db61e8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55bf57db6008 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db6088 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db6100 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55bf57db6498 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55bf57db62b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db6338 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db63b8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55bf57db67a8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55bf57db65c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db6640 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db66c0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55bf57db6a88 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55bf57db6878 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db68f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db69a0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55bf57db6d68 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55bf57db6b58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db6bd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db6c80 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55bf57db6fd0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55bf57db6e38 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55bf57db6eb8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55bf57db6f30 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55bf57db7278 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55bf57db70a0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55bf57db7120 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55bf57db7198 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55bf57db7528 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55bf57db7348 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db73c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db7448 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55bf57db77d8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55bf57db75f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db7678 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db76f0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55bf57db7a88 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55bf57db78a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db7928 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db79a0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55bf57db7d58 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55bf57db7b58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db7bd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bf57db7c78 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55bf57db8088 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55bf57db7e28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bf57db7ea8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55bf57db7f20 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55bf57db7f98 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bf57dbc6d0 <col:93> 'bool' false
|-CXXMethodDecl 0x55bf57db8270 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bf57db8158 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55bf57db81d8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55bf57db8448 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bf57db8330 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55bf57db83b0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55bf57db8728 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bf57db8508 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55bf57db8580 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55bf57db8600 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55bf57db8678 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57db8a18 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bf57db87f8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55bf57db8870 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55bf57db88f0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55bf57db8968 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57db8c50 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55bf57db8af0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55bf57db8b70 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55bf57db8e38 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55bf57db8d18 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55bf57db8d98 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55bf57db8ee8 prev 0x55bf57db0688 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bf57db8fe0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55bf57db9070 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55bf57db90e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55bf57db91a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55bf57db9270 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55bf57db93e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55bf57db9320 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55bf57db9490 <col:24>
| | `-OptimizeNoneAttr 0x55bf57db94e8 <col:34>
| |-CXXMethodDecl 0x55bf57db9530 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55bf57db97e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55bf57db95e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55bf57db9658 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55bf57db96d8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55bf57db98a0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55bf57db98d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55bf57db9940 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55bf57db99c8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55bf57db9ce8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55bf57db9a80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55bf57db9af8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55bf57db9b70 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55bf57db9bf0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55bf57db9e00 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55bf57dc0768 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55bf57dc0768
| | `-ParmVarDecl 0x55bf57dc0878 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55bf57dc0918 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55bf57dc0918
| | `-ParmVarDecl 0x55bf57dc0a28 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55bf57e8bb68 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bf57db9e78 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55bf57db9f18 <col:38> "" ""
|-CXXMethodDecl 0x55bf57db9fa8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55bf57dba048 <col:44> "" ""
|-AccessSpecDecl 0x55bf57dba0b8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55bf57dba0e0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55bf57dba1e0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55bf57dba230 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57dba1c0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55bf57dba1a0 <col:27> 'int' 4
|-FieldDecl 0x55bf57dba2e8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55bf57dba498 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55bf57dba550 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55bf57dba5d0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55bf57dba638 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55bf57dba788 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55bf57dba6c8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55bf57dba938 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55bf57dba848 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55bf57dbab18 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55bf57dba9f8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55bf57dbaa78 <col:25> col:28 'int'
|-CXXMethodDecl 0x55bf57dbadc0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57dbabe0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55bf57dbac60 <col:28> col:31 'int'
| `-ParmVarDecl 0x55bf57dbacd8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55bf57dbae78 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55bf57dbaf40 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55bf57dbaf90 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55bf57dbafe0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55bf57dbb1c0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55bf57dbb070 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55bf57dbb0e8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57dbb468 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55bf57dbb288 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55bf57dbb308 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55bf57dbb380 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57dbb688 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55bf57dbb538 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55bf57dbb5b8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55bf57dbb9c0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55bf57dbb748 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55bf57dbb7c8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55bf57dbb840 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55bf57dbb8c0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55bf57dbbba8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bf57dbba90 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55bf57dbbb10 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55bf57dbbcf8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55bf57dbbc68 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55bf57dbc078 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55bf57dbbdb8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55bf57dbbe38 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55bf57dbbeb0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55bf57dbbf30 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55bf57dbc190 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StoreIPAddress
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
       112 |   class IPAddress _address
       112 |     uint32_t _addr
       116 |   _Bool _use_address
           | [sizeof=120, dsize=117, align=8,
           |  nvsize=117, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57ba9f40 prev 0x55bf57b0ed58 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57baa038 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55bf57baa0c8 <col:19, col:25> col:19 public
|-TypedefDecl 0x55bf57baa100 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55bf5799c430 'uninitialized_type'
|   `-CXXRecord 0x55bf5799c398 'uninitialized_type'
|-CXXConstructorDecl 0x55bf57baa1c0 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55bf57bad910 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bf57bad9b8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bf57bad978 <col:10> 'int' 0
| `-CompoundStmt 0x55bf57bada00 <col:13, line:22:5>
|-CXXConstructorDecl 0x55bf57baa310 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55bf57baa280 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55bf57bad910 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bf57bada50 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55bf57bada10 <col:10> 'unsigned int' lvalue ParmVar 0x55bf57baa280 'x' 'unsigned int'
| `-CompoundStmt 0x55bf57bada98 <col:13, line:27:5>
|-CXXConstructorDecl 0x55bf57baa468 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55bf57baa3d8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55bf57bad910 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bf57badb00 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55bf57badae8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55bf57badaa8 <col:10> 'int' lvalue ParmVar 0x55bf57baa3d8 'x' 'int'
| `-CompoundStmt 0x55bf57badb48 <col:13, line:31:5>
|-CXXConstructorDecl 0x55bf57baa5c0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55bf57baa530 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55bf57bad910 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bf57badbb0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55bf57badb98 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55bf57badb58 <col:10> 'unsigned long' lvalue ParmVar 0x55bf57baa530 'x' 'unsigned long'
| `-CompoundStmt 0x55bf57badbf8 <col:13, line:35:5>
|-CXXConstructorDecl 0x55bf57baa718 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55bf57baa688 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55bf57bad910 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bf57badc60 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55bf57badc48 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55bf57badc08 <col:10> 'long' lvalue ParmVar 0x55bf57baa688 'x' 'long'
| `-CompoundStmt 0x55bf57badca8 <col:13, line:39:5>
|-CXXConstructorDecl 0x55bf57baa8d8 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55bf57baa7e8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55bf57bad910 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bf57badd28 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bf57badcd8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55bf57addb10
| |     `-DeclRefExpr 0x55bf57badcb8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55bf57baa7e8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55bf57badd70 <col:20, line:44:5>
|-CXXConstructorDecl 0x55bf57baaa68 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55bf57baa9a0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55bf57baded8 <col:51, line:56:5>
|   `-BinaryOperator 0x55bf57badeb8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55bf57badd90 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55bf57bad910
|     | `-CXXThisExpr 0x55bf57badd80 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55bf57badea0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55bf57bade88 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55bf57bade68 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55bf57bade38 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55bf57bade20 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55bf57baddc0 <col:47> 'const unsigned char *' lvalue ParmVar 0x55bf57baa9a0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55bf57baabb8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55bf57baab28 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55bf57baad68 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55bf57baaca8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55bf57badf48 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55bf57badf20 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55bf57badef0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55bf57baaca8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55bf57baaef8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55bf57baae30 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55bf57baafe8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55bf57baef08 <col:46, line:83:5>
|   `-ReturnStmt 0x55bf57baeef8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55bf57baeee0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55bf57baeeb0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bf57baed68 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55bf57baec50 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55bf57baeb38 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55bf57badf70 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55bf57bab0d8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55bf57baefb8 <col:31, line:88:5>
|   `-ReturnStmt 0x55bf57baefa8 <line:87:2, col:10>
|     `-UnaryOperator 0x55bf57baef90 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55bf57baef78 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55bf57baef60 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55bf57baef30 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bf57bad910
|             `-CXXThisExpr 0x55bf57baef20 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55bf57bab198 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55bf57baf038 <col:34, line:93:5>
|   `-ReturnStmt 0x55bf57baf028 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55bf57baf010 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55bf57baefe0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bf57bad910
|         `-CXXThisExpr 0x55bf57baefd0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55bf57bab268 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55bf57baf0b8 <col:38, line:101:5>
|   `-ReturnStmt 0x55bf57baf0a8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55bf57baf090 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55bf57baf060 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bf57bad910
|         `-CXXThisExpr 0x55bf57baf050 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55bf57bab338 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55bf57baf388 <col:38, line:108:5>
|   `-ReturnStmt 0x55bf57baf378 <line:107:2, col:58>
|     `-BinaryOperator 0x55bf57baf358 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55bf57baf270 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55bf57baf250 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55bf57baf238 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55bf57baf0e0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bf57bad910
|       |   |   `-CXXThisExpr 0x55bf57baf0d0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55bf57baf210 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55bf57baf1f8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55bf57baf178 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bf57aec048 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55bf57baf158 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55bf57baf330 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55bf57baf318 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55bf57baf2f8 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bf57aec048 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55bf57baf2d8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55bf57bab3f8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55bf57baf5f8 <col:39, line:112:5>
|   `-ReturnStmt 0x55bf57baf5e8 <line:111:2, col:56>
|     `-BinaryOperator 0x55bf57baf5c8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55bf57baf4e0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55bf57baf4c0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55bf57baf4a8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55bf57baf3b0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bf57bad910
|       |   |   `-CXXThisExpr 0x55bf57baf3a0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55bf57baf480 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55bf57baf468 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55bf57baf448 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bf57aec048 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55bf57baf428 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55bf57baf5a0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55bf57baf588 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55bf57baf568 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bf57aec048 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55bf57baf548 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55bf57bab528 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55bf57bab630 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55bf57bab740 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55bf57bac808 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bf57bac8c8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55bf57bac990 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55bf57bacb88 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55bf57baca40 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55bf57bacab8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55bf57bacd08 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55bf57bacc48 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55bf57bace50 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55bf57bacdc0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55bf57bacff8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55bf57bacf08 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55bf57bad140 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55bf57bad0b0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55bf57bad288 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55bf57bad1f8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55bf57bad350 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55bf57bad410 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55bf57bad588 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55bf57bad4c0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55bf57bad650 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55bf57bad738 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55bf57bad7e0 <col:51> "" ""
|-TypedefDecl 0x55bf57bad880 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55bf57b0edf0 'IPAddress'
|   `-CXXRecord 0x55bf57ba9f40 'IPAddress'
|-AccessSpecDecl 0x55bf57bad8d8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55bf57bad910 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55bf57badfb8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55bf57badfb8
| `-ParmVarDecl 0x55bf57bae0c8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55bf57bae168 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bf57bae278 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55bf57bad910 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bf57baee58 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bf57baee10 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55bf57bad910
| |     `-CXXStaticCastExpr 0x55bf57baede0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55bf57baedb0 <col:7> 'IPAddress' lvalue ParmVar 0x55bf57bae278 '' 'IPAddress &&'
| `-CompoundStmt 0x55bf57baeea0 <col:7>
`-CXXDestructorDecl 0x55bf57baeb68 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57dc38d8 <../elements/ip/storeipaddress.hh:54:1, line:73:1> line:54:7 class StoreIPAddress definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55bf57dc3a38 <col:1, col:7> col:7 implicit referenced class StoreIPAddress
|-AccessSpecDecl 0x55bf57dc3ac8 <col:41, col:47> col:41 public
|-CXXConstructorDecl 0x55bf57dc3b50 <line:56:5, col:20> col:5 StoreIPAddress 'void ()'
|-CXXDestructorDecl 0x55bf57dc3c40 <line:57:5, col:21> col:5 ~StoreIPAddress 'void ()' noexcept-unevaluated 0x55bf57dc3c40
| `-Overrides: [ 0x55bf57dac1d8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55bf57dc3d70 <line:59:5, col:63> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55bf57dad638 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55bf57dc48c8 <col:36, col:63>
|   `-ReturnStmt 0x55bf57dc48b8 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bf57dc48a0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55bf57dc4878 <col:45> 'const char [15]' lvalue "StoreIPAddress"
|-CXXMethodDecl 0x55bf57dc3e38 <line:60:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55bf57dad700 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55bf57dc4928 <col:36, col:58>
|   `-ReturnStmt 0x55bf57dc4918 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bf57dc4900 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55bf57dc48e0 <col:45> 'const char []' lvalue Var 0x55bf57dada38 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x55bf57dc3f00 <line:61:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55bf57dadac8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55bf57dc4988 <col:36, col:62>
|   `-ReturnStmt 0x55bf57dc4978 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bf57dc4960 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55bf57dc4940 <col:45> 'const char []' lvalue Var 0x55bf57dade30 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x55bf57dc41d0 <line:63:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55bf57daeed0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55bf57dc4080 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55bf57dc40f8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57dc4320 <line:65:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55bf57dac818 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55bf57dc4290 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55bf57dc43c8 <line:67:3, col:10> col:3 private
|-FieldDecl 0x55bf57dc4408 <line:69:5, col:9> col:9 _offset 'int'
|-FieldDecl 0x55bf57dc4468 <line:70:5, col:15> col:15 _address 'IPAddress'
|-FieldDecl 0x55bf57dc44c8 <line:71:5, col:10> col:10 _use_address 'bool'
|-CXXConstructorDecl 0x55bf57dc4548 <line:54:7> col:7 implicit StoreIPAddress 'void (const StoreIPAddress &)' inline default_delete noexcept-unevaluated 0x55bf57dc4548
| `-ParmVarDecl 0x55bf57dc4658 <col:7> col:7 'const StoreIPAddress &'
`-CXXMethodDecl 0x55bf57dc46f8 <col:7> col:7 implicit operator= 'StoreIPAddress &(const StoreIPAddress &)' inline default_delete noexcept-unevaluated 0x55bf57dc46f8
  `-ParmVarDecl 0x55bf57dc4808 <col:7> col:7 'const StoreIPAddress &'

Layout: <CGRecordLayout
  LLVMType:%class.StoreIPAddress = type <{ %class.Element.base, i32, %class.IPAddress, i8, [3 x i8] }>
  NonVirtualBaseLLVMType:%class.StoreIPAddress.base = type <{ %class.Element.base, i32, %class.IPAddress, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57b7ce10 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bf57b7cf28 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55bf57b7cfc8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55bf57b7d028 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55bf57b7d088 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55bf57b7d138 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57b7d440 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57b7d558 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55bf57b7d600 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55bf57b7d668 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55bf57b7d6f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55bf57b83790 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bf57b83bc8 <col:12>
|-CXXConstructorDecl 0x55bf57b83898 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bf57b839a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55bf57b7d600 'data' 'const char *'
| | `-ImplicitCastExpr 0x55bf57b86150 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55bf57b86120 <col:12> 'const char *const' lvalue .data 0x55bf57b7d600
| |     `-DeclRefExpr 0x55bf57b86100 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b839a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55bf57b7d668 'length' 'int'
| | `-ImplicitCastExpr 0x55bf57b861e0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55bf57b861b0 <col:12> 'const int' lvalue .length 0x55bf57b7d668
| |     `-DeclRefExpr 0x55bf57b86190 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b839a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55bf57b7d6f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55bf57b86270 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55bf57b86240 <col:12> 'String::memo_t *const' lvalue .memo 0x55bf57b7d6f8
| |     `-DeclRefExpr 0x55bf57b86220 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b839a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55bf57b862c8 <col:12>
|-CXXConstructorDecl 0x55bf57b83a48 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bf57b83a48
| `-ParmVarDecl 0x55bf57b83b58 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55bf57b890b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bf57b94ac8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bf57b94bd8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55bf57b950f0 <col:12>
|   |-BinaryOperator 0x55bf57b94f08 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55bf57b94ec0 <col:12> 'const char *' lvalue ->data 0x55bf57b7d600
|   | | `-CXXThisExpr 0x55bf57b94eb0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55bf57b94ef0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55bf57b94e80 <col:12> 'const char *const' lvalue .data 0x55bf57b7d600
|   |     `-DeclRefExpr 0x55bf57b94e60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b94bd8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55bf57b94fd0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55bf57b94f88 <col:12> 'int' lvalue ->length 0x55bf57b7d668
|   | | `-CXXThisExpr 0x55bf57b94f78 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55bf57b94fb8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55bf57b94f48 <col:12> 'const int' lvalue .length 0x55bf57b7d668
|   |     `-DeclRefExpr 0x55bf57b94f28 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b94bd8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55bf57b95098 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55bf57b95050 <col:12> 'String::memo_t *' lvalue ->memo 0x55bf57b7d6f8
|   | | `-CXXThisExpr 0x55bf57b95040 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55bf57b95080 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55bf57b95010 <col:12> 'String::memo_t *const' lvalue .memo 0x55bf57b7d6f8
|   |     `-DeclRefExpr 0x55bf57b94ff0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b94bd8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55bf57b950e0 <col:12>
|     `-UnaryOperator 0x55bf57b950c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bf57b950b8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55bf57b94c48 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bf57b94c48
  `-ParmVarDecl 0x55bf57b94d58 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57b74380 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bf57b74498 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55bf57b74528 <col:16, col:22> col:16 public
|-TypedefDecl 0x55bf57b74568 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55bf57847fd0 'const char *'
|   `-QualType 0x55bf57847521 'const char' const
|     `-BuiltinType 0x55bf57847520 'char'
|-TypedefDecl 0x55bf57b745f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55bf57b745c0 'String::const_iterator' sugar
|   |-Typedef 0x55bf57b74568 'const_iterator'
|   `-PointerType 0x55bf57847fd0 'const char *'
|     `-QualType 0x55bf57847521 'const char' const
|       `-BuiltinType 0x55bf57847520 'char'
|-TypedefDecl 0x55bf57b74760 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55bf57b746d0 'int (String::*)() const'
|   |-RecordType 0x55bf57b74410 'String'
|   | `-CXXRecord 0x55bf57b74380 'String'
|   `-ParenType 0x55bf57b74670 'int () const' sugar
|     `-FunctionProtoType 0x55bf57b48200 'int () const' const cdecl
|       `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57b747c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55bf5799c9c0 'int64_t' sugar
|   |-Typedef 0x55bf578b0390 'int64_t'
|   `-TypedefType 0x55bf57889630 '__int64_t' sugar
|     |-Typedef 0x55bf57889208 '__int64_t'
|     `-BuiltinType 0x55bf578475a0 'long'
|-TypedefDecl 0x55bf57b74830 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55bf5799c8e0 'uint64_t' sugar
|   |-Typedef 0x55bf578b0530 'uint64_t'
|   `-TypedefType 0x55bf578896c0 '__uint64_t' sugar
|     |-Typedef 0x55bf57889278 '__uint64_t'
|     `-BuiltinType 0x55bf57847640 'unsigned long'
|-TypedefDecl 0x55bf57b748c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55bf57b74890 'String::intmax_t' sugar
|   |-Typedef 0x55bf57b747c8 'intmax_t'
|   `-TypedefType 0x55bf5799c9c0 'int64_t' sugar
|     |-Typedef 0x55bf578b0390 'int64_t'
|     `-TypedefType 0x55bf57889630 '__int64_t' sugar
|       |-Typedef 0x55bf57889208 '__int64_t'
|       `-BuiltinType 0x55bf578475a0 'long'
|-TypedefDecl 0x55bf57b74950 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55bf57b74920 'String::uintmax_t' sugar
|   |-Typedef 0x55bf57b74830 'uintmax_t'
|   `-TypedefType 0x55bf5799c8e0 'uint64_t' sugar
|     |-Typedef 0x55bf578b0530 'uint64_t'
|     `-TypedefType 0x55bf578896c0 '__uint64_t' sugar
|       |-Typedef 0x55bf57889278 '__uint64_t'
|       `-BuiltinType 0x55bf57847640 'unsigned long'
|-CXXConstructorDecl 0x55bf57b74a10 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55bf57b74bb8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55bf57b74af8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55bf57b74d68 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55bf57b74ca8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55bf57b74ec0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55bf57b74e30 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55bf57b750d8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55bf57b74f88 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55bf57b75008 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55bf57b752f8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55bf57b751a8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55bf57b75228 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55bf57b75518 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55bf57b753c8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55bf57b75448 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55bf57b75738 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55bf57b755e8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55bf57b75668 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55bf57b758c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55bf57b75800 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55bf57b75a48 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55bf57b75988 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55bf57b75bd8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55bf57b75b10 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55bf57b75d30 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55bf57b75ca0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55bf57b75e88 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55bf57b75df8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55bf57b75fe0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55bf57b75f50 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55bf57b76168 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55bf57b760a8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55bf57b762f8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55bf57b76230 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55bf57b76488 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55bf57b763c0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55bf57b76618 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55bf57b76550 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55bf57b76710 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55bf57b76838 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55bf57b769b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55bf57b768f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55bf57b76b08 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55bf57b76a78 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55bf57b76bc0 <col:63> "" ""
|-CXXMethodDecl 0x55bf57b76d08 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55bf57b76c48 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55bf57b76f18 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55bf57b76dc8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55bf57b76e48 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55bf57b77138 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55bf57b76fe0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55bf57b77060 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55bf57b77418 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55bf57b771f8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55bf57b77278 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55bf57b83260 <col:55> 'int' 10
| `-ParmVarDecl 0x55bf57b772f0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bf57b83280 <col:76> 'bool' true
|-CXXMethodDecl 0x55bf57b776f8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55bf57b774e0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55bf57b77560 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55bf57b83290 <col:56> 'int' 10
| `-ParmVarDecl 0x55bf57b775d8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bf57b832b0 <col:77> 'bool' true
|-CXXMethodDecl 0x55bf57b77800 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55bf57b778c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55bf57b77990 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55bf57b77a30 <col:20>
| `-OptimizeNoneAttr 0x55bf57b77a88 <col:30>
|-CXXConversionDecl 0x55bf57b77b78 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55bf57b77c48 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55bf57b77d08 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55bf57b77df8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55bf57b77eb8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55bf57b78038 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55bf57b77f70 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55bf57b78188 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55bf57b780f8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55bf57b78278 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55bf57b78338 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55bf57b78588 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55bf57b783f0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55bf57b78470 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55bf57b787e8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55bf57b78650 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55bf57b786d0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55bf57b788b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55bf57b78ac8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55bf57b78970 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55bf57b789f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55bf57b78ce8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55bf57b78b90 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55bf57b78c10 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55bf57b78e78 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55bf57b78db0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55bf57b78f68 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55bf57b790d8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55bf57b79018 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55bf57b792e8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55bf57b79198 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55bf57b79218 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55bf57b79500 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55bf57b793a8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55bf57b79420 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55bf57b79690 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55bf57b795c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55bf57b798b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55bf57b79750 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55bf57b797d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55bf57b79a00 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55bf57b79970 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55bf57b79bd8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55bf57b79ac0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55bf57b79b40 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55bf57b79d28 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55bf57b79c98 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55bf57b79f40 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55bf57b79de0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55bf57b79e60 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55bf57b832c0 <col:39> 'int' 0
|-CXXMethodDecl 0x55bf57b7a160 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55bf57b7a000 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55bf57b7a080 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55bf57b832e0 <col:48> 'int' 0
|-CXXMethodDecl 0x55bf57b7a340 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55bf57b7a220 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55bf57b7a2a0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55bf57b83300 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55bf57b7a410 <line:129:5, col:20> col:12 used lower 'String () const'
|-CXXMethodDecl 0x55bf57b7a4d0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55bf57b7a590 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55bf57b7a650 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55bf57b7a710 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55bf57b7a8b8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55bf57b7a7c0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55bf57b7aa38 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55bf57b7a970 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55bf57b7ac10 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55bf57b7aaf8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55bf57b7ad88 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55bf57b7acc8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55bf57b7aed0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55bf57b7ae40 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55bf57b7b020 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55bf57b7af90 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55bf57b7b1f8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55bf57b7b0e0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55bf57b7b160 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55bf57b7b3d8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55bf57b7b2c0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55bf57b7b340 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55bf57b7b528 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55bf57b7b498 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55bf57b7b738 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55bf57b7b5e8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55bf57b7b668 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55bf57b7b898 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55bf57b7b800 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55bf57b7b9f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55bf57b7b958 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55bf57b7ba98 <col:57> "" ""
|-CXXMethodDecl 0x55bf57b7bba8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55bf57b7bb18 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55bf57b7bcf8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55bf57b7bc68 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55bf57b7be78 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55bf57b7bdb0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55bf57b7bf40 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55bf57b7c000 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55bf57b7c0c0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55bf57b7c160 <col:49> "" ""
|-CXXMethodDecl 0x55bf57b7c1f0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55bf57b7c2b0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55bf57b7c3a0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55bf57b7c468 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55bf57b7c528 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55bf57b7c5e8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55bf57b7c6e0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55bf57b7c7a8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55bf57b7c870 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55bf57b7ca48 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55bf57b7c928 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55bf57b7c9a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55bf57b7cc70 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55bf57b7cb10 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55bf57b7cb90 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55bf57b7cd80 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55bf57b7cde8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55bf57b7ce10 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55bf57b7cf28 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55bf57b7cfc8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55bf57b7d028 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55bf57b7d088 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55bf57b7d138 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55bf57b7d1a0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55bf57b7d3d8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55bf57b7d428 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57b7d3b8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55bf57b7d2c8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55bf57b7d270 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55bf57b7d2b0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55bf57b7d290 <col:32> 'int' 8
|-CXXRecordDecl 0x55bf57b7d440 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bf57b7d558 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55bf57b7d600 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55bf57b7d668 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55bf57b7d6f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55bf57b83790 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55bf57b83bc8 <col:12>
| |-CXXConstructorDecl 0x55bf57b83898 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bf57b839a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55bf57b7d600 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55bf57b86150 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55bf57b86120 <col:12> 'const char *const' lvalue .data 0x55bf57b7d600
| | |     `-DeclRefExpr 0x55bf57b86100 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b839a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55bf57b7d668 'length' 'int'
| | | `-ImplicitCastExpr 0x55bf57b861e0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55bf57b861b0 <col:12> 'const int' lvalue .length 0x55bf57b7d668
| | |     `-DeclRefExpr 0x55bf57b86190 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b839a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55bf57b7d6f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55bf57b86270 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55bf57b86240 <col:12> 'String::memo_t *const' lvalue .memo 0x55bf57b7d6f8
| | |     `-DeclRefExpr 0x55bf57b86220 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b839a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55bf57b862c8 <col:12>
| |-CXXConstructorDecl 0x55bf57b83a48 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bf57b83a48
| | `-ParmVarDecl 0x55bf57b83b58 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55bf57b890b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55bf57b94ac8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bf57b94bd8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55bf57b950f0 <col:12>
| |   |-BinaryOperator 0x55bf57b94f08 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55bf57b94ec0 <col:12> 'const char *' lvalue ->data 0x55bf57b7d600
| |   | | `-CXXThisExpr 0x55bf57b94eb0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55bf57b94ef0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55bf57b94e80 <col:12> 'const char *const' lvalue .data 0x55bf57b7d600
| |   |     `-DeclRefExpr 0x55bf57b94e60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b94bd8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55bf57b94fd0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55bf57b94f88 <col:12> 'int' lvalue ->length 0x55bf57b7d668
| |   | | `-CXXThisExpr 0x55bf57b94f78 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55bf57b94fb8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55bf57b94f48 <col:12> 'const int' lvalue .length 0x55bf57b7d668
| |   |     `-DeclRefExpr 0x55bf57b94f28 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b94bd8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55bf57b95098 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55bf57b95050 <col:12> 'String::memo_t *' lvalue ->memo 0x55bf57b7d6f8
| |   | | `-CXXThisExpr 0x55bf57b95040 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55bf57b95080 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55bf57b95010 <col:12> 'String::memo_t *const' lvalue .memo 0x55bf57b7d6f8
| |   |     `-DeclRefExpr 0x55bf57b94ff0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bf57b94bd8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55bf57b950e0 <col:12>
| |     `-UnaryOperator 0x55bf57b950c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55bf57b950b8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55bf57b94c48 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bf57b94c48
|   `-ParmVarDecl 0x55bf57b94d58 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55bf57b7d770 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55bf57b7d9b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55bf57b7d7d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55bf57b7d858 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55bf57b7d8d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55bf57b83750 <col:79, line:261:5>
|   |-BinaryOperator 0x55bf57b833c8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55bf57b83360 <col:2, col:5> 'const char *' lvalue .data 0x55bf57b7d600
|   | | `-MemberExpr 0x55bf57b83330 <col:2> 'String::rep_t' lvalue ->_r 0x55bf57b7d770
|   | |   `-CXXThisExpr 0x55bf57b83320 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55bf57b833b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bf57b83390 <col:12> 'const char *' lvalue ParmVar 0x55bf57b7d7d8 'data' 'const char *'
|   |-BinaryOperator 0x55bf57b83490 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55bf57b83428 <col:2, col:5> 'int' lvalue .length 0x55bf57b7d668
|   | | `-MemberExpr 0x55bf57b833f8 <col:2> 'String::rep_t' lvalue ->_r 0x55bf57b7d770
|   | |   `-CXXThisExpr 0x55bf57b833e8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55bf57b83478 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bf57b83458 <col:14> 'int' lvalue ParmVar 0x55bf57b7d858 'length' 'int'
|   `-IfStmt 0x55bf57b83738 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55bf57b835b0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55bf57b83598 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55bf57b83578 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55bf57b83558 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55bf57b834f0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55bf57b7d6f8
|     |       | `-MemberExpr 0x55bf57b834c0 <col:7> 'String::rep_t' lvalue ->_r 0x55bf57b7d770
|     |       |   `-CXXThisExpr 0x55bf57b834b0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55bf57b83540 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bf57b83520 <col:17> 'String::memo_t *' lvalue ParmVar 0x55bf57b7d8d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55bf57b83710 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55bf57b836f8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bf57b83600 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55bf57b6c3e8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55bf57b83668 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55bf57b7cfc8
|         `-ImplicitCastExpr 0x55bf57b83650 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55bf57b83630 <col:27> 'String::memo_t *' lvalue ParmVar 0x55bf57b7d8d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55bf57b7dc68 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55bf57b7da88 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55bf57b7db08 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55bf57b7db80 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55bf57b7d770 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55bf57b83bd8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55bf57b83d68 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55bf57b83cd0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55bf57b83c40 <col:2> '<bound member function type>' ->assign_memo 0x55bf57b7d9b8
|     | `-ImplicitCastExpr 0x55bf57b83d08 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55bf57b83c30 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55bf57b83d20 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bf57b83c70 <col:14> 'const char *' lvalue ParmVar 0x55bf57b7da88 'data' 'const char *'
|     |-ImplicitCastExpr 0x55bf57b83d38 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55bf57b83c90 <col:20> 'int' lvalue ParmVar 0x55bf57b7db08 'length' 'int'
|     `-ImplicitCastExpr 0x55bf57b83d50 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57b83cb0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55bf57b7db80 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55bf57b7ddf8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55bf57b7dd38 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55bf57b83fc0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55bf57b83f40 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55bf57b83d90 <col:2> '<bound member function type>' ->assign_memo 0x55bf57b7d9b8
|     | `-CXXThisExpr 0x55bf57b83d80 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55bf57b83f78 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55bf57b83e10 <col:14, col:19> 'const char *' lvalue .data 0x55bf57b7d600
|     |   `-MemberExpr 0x55bf57b83de0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55bf57b7d770
|     |     `-DeclRefExpr 0x55bf57b83dc0 <col:14> 'const String' lvalue ParmVar 0x55bf57b7dd38 'x' 'const String &'
|     |-ImplicitCastExpr 0x55bf57b83f90 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55bf57b83e90 <col:25, col:30> 'int' lvalue .length 0x55bf57b7d668
|     |   `-MemberExpr 0x55bf57b83e60 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55bf57b7d770
|     |     `-DeclRefExpr 0x55bf57b83e40 <col:25> 'const String' lvalue ParmVar 0x55bf57b7dd38 'x' 'const String &'
|     `-ImplicitCastExpr 0x55bf57b83fa8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55bf57b83f10 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55bf57b7d6f8
|         `-MemberExpr 0x55bf57b83ee0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55bf57b7d770
|           `-DeclRefExpr 0x55bf57b83ec0 <col:38> 'const String' lvalue ParmVar 0x55bf57b7dd38 'x' 'const String &'
|-CXXMethodDecl 0x55bf57b7dec0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55bf57b84980 <col:31, line:278:5>
|   `-IfStmt 0x55bf57b84968 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55bf57b84060 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55bf57b84048 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55bf57b84018 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55bf57b7d6f8
|     |     `-MemberExpr 0x55bf57b83fe8 <col:6> 'String::rep_t' lvalue ->_r 0x55bf57b7d770
|     |       `-CXXThisExpr 0x55bf57b83fd8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55bf57b84940 <col:15, line:277:2>
|       |-ParenExpr 0x55bf57b84510 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55bf57b844e0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55bf57b84170 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55bf57b84158 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55bf57b84140 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55bf57b84100 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55bf57b7cfc8
|       |   |       `-ImplicitCastExpr 0x55bf57b840e8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55bf57b840b8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55bf57b7d6f8
|       |   |           `-MemberExpr 0x55bf57b84088 <col:27> 'String::rep_t' lvalue ->_r 0x55bf57b7d770
|       |   |             `-CXXThisExpr 0x55bf57b84078 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55bf57b841d0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55bf57b841b0 <col:54> 'int' 0
|       |   `-CallExpr 0x55bf57b84440 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55bf57b84428 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55bf57b843a8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55bf57b84480 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55bf57b842b8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55bf57b84498 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55bf57b842e8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55bf57b844b0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55bf57b84320 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55bf57b844c8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55bf57b84390 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55bf57b84378 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55bf57b84340 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55bf57b84860 <line:274:6, line:275:22>
|       | |-CallExpr 0x55bf57b84720 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55bf57b84708 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55bf57b84680 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55bf57b6d830 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55bf57b84650 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55bf57b7cfc8
|       | |   `-ImplicitCastExpr 0x55bf57b84638 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55bf57b84608 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55bf57b7d6f8
|       | |       `-MemberExpr 0x55bf57b845d8 <col:40> 'String::rep_t' lvalue ->_r 0x55bf57b7d770
|       | |         `-CXXThisExpr 0x55bf57b845c8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55bf57b84820 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55bf57b84808 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55bf57b84748 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55bf57b826a0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55bf57b84848 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55bf57b847a8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55bf57b7d6f8
|       |       `-MemberExpr 0x55bf57b84778 <col:15> 'String::rep_t' lvalue ->_r 0x55bf57b7d770
|       |         `-CXXThisExpr 0x55bf57b84768 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55bf57b84920 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55bf57b848b8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55bf57b7d6f8
|         | `-MemberExpr 0x55bf57b84888 <col:6> 'String::rep_t' lvalue ->_r 0x55bf57b7d770
|         |   `-CXXThisExpr 0x55bf57b84878 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55bf57b84908 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55bf57b848e8 <col:16> 'int' 0
|-CXXMethodDecl 0x55bf57b7e158 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55bf57b7df78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55bf57b7dff8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55bf57b7e070 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55bf57b7e230 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55bf57b7e480 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55bf57b7e2e8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55bf57b7e368 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55bf57b7e3e0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55bf57b7e668 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55bf57b7e550 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55bf57b7e5d0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55bf57b7e768 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55bf57b84a58 <col:41, line:286:5>
|   `-ReturnStmt 0x55bf57b84a48 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55bf57b84a18 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55bf57b849e0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55bf57b849c8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55bf57b849a8 <col:46> 'int' 1
|-CXXMethodDecl 0x55bf57b7ea08 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55bf57b7e820 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55bf57b7e8a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55bf57b7e920 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55bf57b826a0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55bf57b7ead0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55bf57b82770 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55bf57b82940 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55bf57b82828 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55bf57b828a8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55bf57b82a00 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55bf57b82ac8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55bf57b82bc8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55bf57b82c40 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55bf57b82cb8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55bf57b82d20 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55bf57b82e20 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55bf57b82e70 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57b82e00 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55bf57b82de0 <col:22> 'int' 14
|-CXXMethodDecl 0x55bf57b83088 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55bf57b82ea0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55bf57b82f20 <col:38> col:41 'int'
| `-ParmVarDecl 0x55bf57b82fa0 <col:43> col:46 'int'
|-FriendDecl 0x55bf57b83190 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55bf57b83220 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bf57c44d40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55bf57c44f18 prev 0x55bf57c44d40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55bf57c44fa8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55bf57c44fd0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57c46930 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55bf57c468e0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55bf57c468c0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55bf57c451e8 'type'
|     `-SubstTemplateTypeParmType 0x55bf57c451b0 'String' sugar
|       |-TemplateTypeParmType 0x55bf57b37c20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b37bd0 'T'
|       `-RecordType 0x55bf57b74410 'String'
|         `-CXXRecord 0x55bf57b74380 'String'
|-TypedefDecl 0x55bf57c469e8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55bf57c469b0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55bf57c46990 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55bf57c46930 'type'
|     `-ElaboratedType 0x55bf57c468e0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55bf57c468c0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55bf57c451e8 'type'
|         `-SubstTemplateTypeParmType 0x55bf57c451b0 'String' sugar
|           |-TemplateTypeParmType 0x55bf57b37c20 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55bf57b37bd0 'T'
|           `-RecordType 0x55bf57b74410 'String'
|             `-CXXRecord 0x55bf57b74380 'String'
|-CXXMethodDecl 0x55bf57c46b68 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55bf57c46a78 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55bf57c46c58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55bf57c46d38 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55bf57c46d38
|-CXXMethodDecl 0x55bf57c47008 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55bf57c46f10 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55bf57c47248 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bf57c470c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bf57c47138 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bf57c47418 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bf57c47308 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bf57c47380 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bf57c47578 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55bf57c47648 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55bf57df3af8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bf57c47708 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55bf57c47780 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bf57df3d58 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55bf57df3bc8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55bf57df3c40 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bf57df3f18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55bf57df3e28 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bf57df40d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55bf57df3fe0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bf57df4190 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bf57df4240 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bf57df4478 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bf57df42f0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bf57df4368 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bf57df4718 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55bf57df4620 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55bf57df47e0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55bf57df4830 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55bf57df4880 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bf57daeb40 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55bf57c437a8 prev 0x55bf57daeb40 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55bf57c44cb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55bf57c44c60 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55bf57c44c40 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55bf57c44af0 'type'
|     `-SubstTemplateTypeParmType 0x55bf57c44980 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55bf57b0d7b0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55bf57b0d758 'F'
|       `-RecordType 0x55bf57c445e0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55bf57c44500 'typed_array_memory'
|-FieldDecl 0x55bf57df48d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55bf57df4920 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55bf57df4958 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55bf57c43840 'String' sugar
|   |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|   `-RecordType 0x55bf57b74410 'String'
|     `-CXXRecord 0x55bf57b74380 'String'
|-TypedefDecl 0x55bf57df49e8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55bf57df49b0 'String &'
|   `-SubstTemplateTypeParmType 0x55bf57c43840 'String' sugar
|     |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|     `-RecordType 0x55bf57b74410 'String'
|       `-CXXRecord 0x55bf57b74380 'String'
|-TypedefDecl 0x55bf57df4a78 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55bf57df4a40 'const String &'
|   `-QualType 0x55bf57c43841 'const String' const
|     `-SubstTemplateTypeParmType 0x55bf57c43840 'String' sugar
|       |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|       `-RecordType 0x55bf57b74410 'String'
|         `-CXXRecord 0x55bf57b74380 'String'
|-TypedefDecl 0x55bf57df4b08 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55bf57df4ad0 'String *'
|   `-SubstTemplateTypeParmType 0x55bf57c43840 'String' sugar
|     |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|     `-RecordType 0x55bf57b74410 'String'
|       `-CXXRecord 0x55bf57b74380 'String'
|-TypedefDecl 0x55bf57df4b98 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55bf57df4b60 'const String *'
|   `-QualType 0x55bf57c43841 'const String' const
|     `-SubstTemplateTypeParmType 0x55bf57c43840 'String' sugar
|       |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|       `-RecordType 0x55bf57b74410 'String'
|         `-CXXRecord 0x55bf57b74380 'String'
|-TypedefDecl 0x55bf57df57f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55bf57df57a0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55bf57df5780 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55bf57df56b8 'type'
|     `-LValueReferenceType 0x55bf57df5680 'const String &'
|       `-QualType 0x55bf57df5421 'const String' const
|         `-SubstTemplateTypeParmType 0x55bf57df5420 'String' sugar
|           |-TemplateTypeParmType 0x55bf57b17920 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55bf57b178c8 'T'
|           `-RecordType 0x55bf57b74410 'String'
|             `-CXXRecord 0x55bf57b74380 'String'
|-TypedefDecl 0x55bf57df5858 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55bf57df4a40 'const String &'
|   `-QualType 0x55bf57c43841 'const String' const
|     `-SubstTemplateTypeParmType 0x55bf57c43840 'String' sugar
|       |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|       `-RecordType 0x55bf57b74410 'String'
|         `-CXXRecord 0x55bf57b74380 'String'
|-TypedefDecl 0x55bf57df58b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57df5918 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55bf57df4ad0 'String *'
|   `-SubstTemplateTypeParmType 0x55bf57c43840 'String' sugar
|     |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|     `-RecordType 0x55bf57b74410 'String'
|       `-CXXRecord 0x55bf57b74380 'String'
|-TypedefDecl 0x55bf57df5980 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55bf57df4b60 'const String *'
|   `-QualType 0x55bf57c43841 'const String' const
|     `-SubstTemplateTypeParmType 0x55bf57c43840 'String' sugar
|       |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|       `-RecordType 0x55bf57b74410 'String'
|         `-CXXRecord 0x55bf57b74380 'String'
|-EnumDecl 0x55bf57df59d8 <line:134:5> col:5
| `-EnumConstantDecl 0x55bf57df5ad0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55bf57df5ab0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55bf57b465c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55bf57b465a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55bf57b46580 <col:40> 'int' 1
|-CXXConstructorDecl 0x55bf57df5b58 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55bf57df5de8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bf57df5c10 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bf57df5cb0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55bf57df6078 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55bf57df5f60 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55bf57df6338 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55bf57df6220 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55bf57df6650 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55bf57df6530 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55bf57df6960 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55bf57df6840 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55bf57df6c50 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bf57df6a98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bf57df6b10 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bf57df6d78 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55bf57df6e28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57df6e80 <col:30> Inherited
|-CXXMethodDecl 0x55bf57df6ec8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55bf57df6f78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57df6fd0 <col:30> Inherited
|-CXXMethodDecl 0x55bf57df7098 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bf57df7148 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57df71a0 <col:30> Inherited
|-CXXMethodDecl 0x55bf57df71e8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bf57df7298 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57df72f0 <col:30> Inherited
|-CXXMethodDecl 0x55bf57df7338 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bf57df73e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57df7440 <col:30> Inherited
|-CXXMethodDecl 0x55bf57df7488 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bf57df7538 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57df7590 <col:30> Inherited
|-CXXMethodDecl 0x55bf57df75b8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bf57df7668 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bf57df7718 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bf57df78d8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bf57df77c8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bf57df7840 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bf57df7a28 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55bf57df7998 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57df7bd8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55bf57df7ae0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bf57df7c90 <col:20>
| `-OptimizeNoneAttr 0x55bf57df7ce8 <col:30>
|-CXXMethodDecl 0x55bf57df7e08 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55bf57df7d10 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bf57df7ec0 <col:20>
| `-OptimizeNoneAttr 0x55bf57df7f18 <col:30>
|-CXXMethodDecl 0x55bf57df7fd0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bf57df7f40 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57df8118 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bf57df8088 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57df8248 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55bf57df8348 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55bf57df8418 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55bf57df84e8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55bf57df8628 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bf57df8598 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57df8770 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bf57df86e0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57df88b8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55bf57df8828 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bf57df8970 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55bf57df8a70 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55bf57df89e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bf57df8b28 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55bf57df8be8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55bf57df8ce8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55bf57df8e68 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55bf57df8da8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55bf57df9628 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55bf57df8f20 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55bf57df9588 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55bf57df9488 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55bf57df9708 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bf57df9858 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55bf57df97c8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bf57df9910 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55bf57df9b58 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bf57df99d0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55bf57df9a48 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bf57df9ce8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55bf57df9c28 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55bf57df9ef8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55bf57df9db0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55bf57df9e28 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55bf57df9fb8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55bf57dfa218 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55bf57dfa120 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55bf57dfa2e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55bf57dfa2e8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57e79728 prev 0x55bf57d294e8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bf57e79820 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55bf57e798b0 <col:22, col:28> col:22 public
|-EnumDecl 0x55bf57e798d8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55bf57e799f8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bf57e799d8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55bf57e799c0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bf57e799a0 <col:14> 'int' 999
| |-EnumConstantDecl 0x55bf57e79aa0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bf57e79a80 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55bf57e79a68 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bf57e79a48 <col:14> 'int' 1
| |-EnumConstantDecl 0x55bf57e79b30 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bf57e79b10 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55bf57e79af0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55bf57e79bc0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bf57e79ba0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55bf57e79b80 <col:13> 'int' 1
| |-EnumConstantDecl 0x55bf57e79c50 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bf57e79c30 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55bf57e79c10 <col:16> 'int' 2
| |-EnumConstantDecl 0x55bf57e79ce0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bf57e79cc0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55bf57e79ca0 <col:13> 'int' 3
| |-EnumConstantDecl 0x55bf57e79d70 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bf57e79d50 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55bf57e79d30 <col:15> 'int' 4
| |-EnumConstantDecl 0x55bf57e79e00 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bf57e79de0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55bf57e79dc0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55bf57e79e90 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bf57e79e70 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55bf57e79e50 <col:12> 'int' 6
| `-EnumConstantDecl 0x55bf57e79f20 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55bf57e79f00 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55bf57e79ee0 <col:13> 'int' 7
|-VarDecl 0x55bf57e79f90 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55bf57e7a018 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55bf57e7a0a0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55bf57e7a128 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55bf57e7a1b0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55bf57e7a238 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55bf57e7a2c0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55bf57e7a348 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55bf57e7a3d0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55bf57e7a458 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55bf57e7a4e0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55bf57e7a5e0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55bf57e7f8e8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55bf57e80078 <line:128:13> 'int' 0
| `-CompoundStmt 0x55bf57e800e8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55bf57e7a6d0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55bf57e800f8 <col:29, line:132:5>
|-CXXMethodDecl 0x55bf57e7a888 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55bf57e7a7c0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57e7a950 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55bf57e7aa38 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55bf57e80150 <col:44, line:161:5>
|   `-ReturnStmt 0x55bf57e80140 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55bf57e80128 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57e80108 <col:9> 'ErrorHandler *' lvalue Var 0x55bf57e7f948 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57e7ab78 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55bf57e7aae8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bf57e7ac40 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55bf57e801b0 <col:43, line:173:5>
|   `-ReturnStmt 0x55bf57e801a0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55bf57e80188 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57e80168 <col:9> 'ErrorHandler *' lvalue Var 0x55bf57e7f9c0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55bf57e7acf8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55bf57e7ad78 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55bf57e7ae88 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55bf57e7adf8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7afd8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55bf57e7af48 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7b130 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55bf57e7b098 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7b288 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55bf57e7b1f0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7b3e0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55bf57e7b348 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7b5f0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bf57e7b498 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55bf57e7b518 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7b7c8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bf57e7b6b0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55bf57e7b730 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7b9e8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bf57e7b888 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55bf57e7b908 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7bbc8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bf57e7baa8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55bf57e7bb28 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7bda8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bf57e7bc88 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55bf57e7bd08 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7bf30 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55bf57e7be68 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55bf57e7c100 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55bf57e7bfe8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55bf57e7c060 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55bf57e80408 <col:57, line:234:5>
|   `-ReturnStmt 0x55bf57e803f8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55bf57e803e0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55bf57e80388 <col:9, col:41> 'int'
|         |-MemberExpr 0x55bf57e80358 <col:9> '<bound member function type>' ->xmessage 0x55bf57e7bf30
|         | `-CXXThisExpr 0x55bf57e80348 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55bf57e803c8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55bf57e803b0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55bf57e80328 <col:18, col:40> 'String' (CXXTemporary 0x55bf57e80328)
|               `-CallExpr 0x55bf57e802f0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55bf57e802d8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55bf57e80250 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55bf57e7e0f8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55bf57e80270 <col:31> 'const String' lvalue ParmVar 0x55bf57e7c060 'str' 'const String &'
|                 `-DeclRefExpr 0x55bf57e80290 <col:36> 'const String' lvalue ParmVar 0x55bf57e7bfe8 'anno' 'const String &'
|-CXXMethodDecl 0x55bf57e7c3e0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55bf57e7c1c0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55bf57e7c240 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55bf57e7c2b8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55bf57e80698 <col:68, line:243:5>
|   `-ReturnStmt 0x55bf57e80688 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55bf57e80670 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55bf57e80610 <col:9, col:41> 'int'
|         |-MemberExpr 0x55bf57e805e0 <col:9> '<bound member function type>' ->xmessage 0x55bf57e7c100
|         | `-CXXThisExpr 0x55bf57e805d0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55bf57e804a8 <col:18> 'const String' lvalue ParmVar 0x55bf57e7c1c0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55bf57e80658 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55bf57e80640 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55bf57e805b0 <col:24, col:40> 'String' (CXXTemporary 0x55bf57e805b0)
|               `-CXXMemberCallExpr 0x55bf57e80548 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55bf57e804d8 <col:24> '<bound member function type>' ->vformat 0x55bf57e7d5c0
|                 | `-CXXThisExpr 0x55bf57e804c8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55bf57e80578 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55bf57e80508 <col:32> 'const char *' lvalue ParmVar 0x55bf57e7c240 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55bf57e80590 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55bf57e80528 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55bf57e7c2b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bf57e7c680 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55bf57e7c4a8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55bf57e7c520 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55bf57e7c598 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55bf57e809d8 <col:23, line:254:5>
|   `-ReturnStmt 0x55bf57e809c8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55bf57e809b0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55bf57e80950 <col:9, col:71> 'int'
|         |-MemberExpr 0x55bf57e80920 <col:9> '<bound member function type>' ->xmessage 0x55bf57e7c100
|         | `-CXXThisExpr 0x55bf57e80910 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55bf57e80998 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55bf57e80980 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55bf57e808d0 <col:18, col:65> 'String' (CXXTemporary 0x55bf57e808d0)
|         |     `-CallExpr 0x55bf57e80868 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55bf57e80850 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55bf57e80738 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55bf57e7e0f8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55bf57e80758 <col:31> 'const String' lvalue ParmVar 0x55bf57e7c520 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55bf57e808b0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55bf57e80898 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55bf57e80830 <col:37, col:64> 'String' (CXXTemporary 0x55bf57e80830)
|         |             `-CallExpr 0x55bf57e80800 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55bf57e807e8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55bf57e80778 <col:37> 'String (const String &)' lvalue CXXMethod 0x55bf57e7e748 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55bf57e80798 <col:56> 'const String' lvalue ParmVar 0x55bf57e7c4a8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55bf57e808f0 <col:68> 'const String' lvalue ParmVar 0x55bf57e7c598 'str' 'const String &'
|-CXXMethodDecl 0x55bf57e7ca00 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55bf57e7c748 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55bf57e7c7c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55bf57e7c840 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55bf57e7c8b8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55bf57e80c90 <col:34, line:267:5>
|   `-ReturnStmt 0x55bf57e80c80 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55bf57e80c68 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55bf57e80c00 <col:9, col:51> 'int'
|         |-MemberExpr 0x55bf57e80bd0 <col:9> '<bound member function type>' ->xmessage 0x55bf57e7c680
|         | `-CXXThisExpr 0x55bf57e80bc0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55bf57e80a78 <col:18> 'const String' lvalue ParmVar 0x55bf57e7c748 'landmark' 'const String &'
|         |-DeclRefExpr 0x55bf57e80a98 <col:28> 'const String' lvalue ParmVar 0x55bf57e7c7c0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55bf57e80c50 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55bf57e80c38 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55bf57e80ba0 <col:34, col:50> 'String' (CXXTemporary 0x55bf57e80ba0)
|               `-CXXMemberCallExpr 0x55bf57e80b38 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55bf57e80ac8 <col:34> '<bound member function type>' ->vformat 0x55bf57e7d5c0
|                 | `-CXXThisExpr 0x55bf57e80ab8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55bf57e80b68 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55bf57e80af8 <col:42> 'const char *' lvalue ParmVar 0x55bf57e7c840 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55bf57e80b80 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55bf57e80b18 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55bf57e7c8b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bf57e7cb10 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55bf57e80d10 <col:25, line:288:5>
|   `-ReturnStmt 0x55bf57e80d00 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55bf57e80ce8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55bf57e80cb8 <col:9> 'const int' lvalue ->_nerrors 0x55bf57e7f8e8
|         `-CXXThisExpr 0x55bf57e80ca8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55bf57e7cd20 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55bf57e7cbc8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55bf57e7cc48 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7d008 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55bf57e7cde8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55bf57e7ce68 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55bf57e7cee0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bf57e7d1a0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55bf57e7d0d8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7d3e8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55bf57e7d260 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55bf57e7d2d8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55bf57e80f70 <col:58, line:357:5>
|   `-ReturnStmt 0x55bf57e80f60 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55bf57e80f48 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55bf57e80f18 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55bf57e80f00 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55bf57e80ee0 <col:9, col:29> 'String' (CXXTemporary 0x55bf57e80ee0)
|             `-CallExpr 0x55bf57e80e70 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55bf57e80e58 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55bf57e80dd8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55bf57e7d008 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55bf57e80d78 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55bf57e80ea8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55bf57e80d98 <col:21> 'const char *' lvalue ParmVar 0x55bf57e7d260 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55bf57e80ec0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55bf57e80db8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55bf57e7d2d8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bf57e7d5c0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55bf57e7d4b0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55bf57e7d528 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bf57e7d718 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55bf57e7d688 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55bf57e7d860 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55bf57e7d7d0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55bf57e7db00 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55bf57e7d918 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55bf57e7d998 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55bf57e7da10 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55bf57e7dc60 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55bf57e7dbd0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55bf57e81088 <col:37, line:441:5>
|   `-IfStmt 0x55bf57e81070 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55bf57e80ff8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55bf57e80fc8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55bf57e80f88 <col:6> 'int' lvalue ParmVar 0x55bf57e7dbd0 'level' 'int'
|     | `-ImplicitCastExpr 0x55bf57e80fe0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55bf57e80fa8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55bf57e79ce0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55bf57e81058 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55bf57e81028 <col:8> 'int' lvalue ->_nerrors 0x55bf57e7f8e8
|         `-CXXThisExpr 0x55bf57e81018 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55bf57e7dd28 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55bf57e81120 <col:26, line:448:5>
|   `-BinaryOperator 0x55bf57e81100 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55bf57e810b0 <col:2> 'int' lvalue ->_nerrors 0x55bf57e7f8e8
|     | `-CXXThisExpr 0x55bf57e810a0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55bf57e810e0 <col:13> 'int' 0
|-CXXMethodDecl 0x55bf57e7def0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55bf57e7dde0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55bf57e7de58 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55bf57e7e0f8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55bf57e7dfb0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55bf57e7e028 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55bf57e7e3a8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55bf57e7e1b8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55bf57e7e238 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55bf57e7e2b8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55bf57e7e460 <col:59> 0 0
|-CXXMethodDecl 0x55bf57e7e5f8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55bf57e7e4d8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55bf57e7e558 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55bf57e81790 <col:70, line:534:5>
|   |-DeclStmt 0x55bf57e81290 <line:528:2, col:20>
|   | |-VarDecl 0x55bf57e81148 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55bf57e811b0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55bf57e811e8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55bf57e81250 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55bf57e81360 <line:529:2, col:23>
|   | `-VarDecl 0x55bf57e812c0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55bf57e81348 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55bf57e81328 <col:18> 'const char *' lvalue ParmVar 0x55bf57e7e4d8 'begin' 'const char *'
|   |-DoStmt 0x55bf57e81728 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55bf57e81658 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55bf57e81640 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55bf57e81620 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55bf57e81378 <col:6> 'const char *' lvalue Var 0x55bf57e812c0 'x' 'const char *'
|   | |     `-CallExpr 0x55bf57e81570 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55bf57e81558 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55bf57e81510 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55bf57e7fdc0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55bf57e815d8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55bf57e815c0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55bf57e81430 <col:20, col:27> 'String' (CXXTemporary 0x55bf57e81430)
|   | |       |     `-CXXTemporaryObjectExpr 0x55bf57e813f8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55bf57e815f0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55bf57e81450 <col:30> 'const char *' lvalue Var 0x55bf57e812c0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55bf57e81608 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55bf57e81470 <col:33> 'const char *' lvalue ParmVar 0x55bf57e7e558 'end' 'const char *'
|   | |       |-UnaryOperator 0x55bf57e814b0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55bf57e81490 <col:39> 'String' lvalue Var 0x55bf57e81148 'name' 'String'
|   | |       |-UnaryOperator 0x55bf57e814e8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55bf57e814c8 <col:46> 'String' lvalue Var 0x55bf57e811e8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55bf57e81500 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55bf57e81710 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55bf57e816f8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55bf57e816d8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55bf57e816a8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|   |         `-ImplicitCastExpr 0x55bf57e81690 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55bf57e81670 <col:11> 'String' lvalue Var 0x55bf57e81148 'name' 'String'
|   `-ReturnStmt 0x55bf57e81780 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55bf57e81768 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57e81748 <col:9> 'const char *' lvalue Var 0x55bf57e812c0 'x' 'const char *'
|-CXXMethodDecl 0x55bf57e7e748 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55bf57e7e6b8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55bf57e81d98 <col:55, line:550:5>
|   `-IfStmt 0x55bf57e81d70 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55bf57e819d0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55bf57e819b8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bf57e819a0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bf57e81980 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bf57e81950 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|     | |       `-DeclRefExpr 0x55bf57e817f0 <col:6> 'const String' lvalue ParmVar 0x55bf57e7e6b8 'x' 'const String &'
|     | `-BinaryOperator 0x55bf57e81930 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55bf57e81900 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55bf57e818b0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55bf57e81898 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55bf57e81850 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55bf57b913b0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55bf57e81810 <col:11> 'const String' lvalue ParmVar 0x55bf57e7e6b8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55bf57e81830 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55bf57e81918 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55bf57e818e8 <col:19> 'char' 123
|     |-ReturnStmt 0x55bf57e81a40 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55bf57e81a10 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55bf57e819f0 <col:13> 'const String' lvalue ParmVar 0x55bf57e7e6b8 'x' 'const String &'
|     `-IfStmt 0x55bf57e81d48 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55bf57e81ad8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bf57e81ac0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bf57e81aa0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bf57e81a70 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|       |       `-DeclRefExpr 0x55bf57e81a50 <col:11> 'const String' lvalue ParmVar 0x55bf57e7e6b8 'x' 'const String &'
|       |-ReturnStmt 0x55bf57e81c60 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55bf57e81c48 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55bf57e81c18 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55bf57e81c00 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55bf57e81be0 <col:13, col:29> 'String' (CXXTemporary 0x55bf57e81be0)
|       |         `-CallExpr 0x55bf57e81b90 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55bf57e81b78 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55bf57e81af0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55bf57e7def0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55bf57e81bc0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55bf57e81b10 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55bf57e81b30 <col:28> 'const String' lvalue ParmVar 0x55bf57e7e6b8 'x' 'const String &'
|       `-ReturnStmt 0x55bf57e81d38 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55bf57e81d20 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55bf57e81cf0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55bf57e81cd8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55bf57e81cb8 <col:13, col:20> 'String' (CXXTemporary 0x55bf57e81cb8)
|                 `-CXXTemporaryObjectExpr 0x55bf57e81c80 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55bf57e7e910 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55bf57e7e800 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55bf57e7e878 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bf57e80068 <col:71> 'bool' false
|-CXXRecordDecl 0x55bf57e7e9c0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55bf57e7ecb8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55bf57e7ec50 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55bf57e7ebf0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55bf57e7ebb0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55bf57b74410 'String'
|       | `-CXXRecord 0x55bf57b74380 'String'
|       |-BuiltinType 0x55bf57847580 'int'
|       `-DecayedType 0x55bf57d2a530 '__va_list_tag *' sugar
|         |-TypedefType 0x55bf57d2a500 'va_list' sugar
|         | |-Typedef 0x55bf57a652a0 'va_list'
|         | `-TypedefType 0x55bf57a65250 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55bf5799cc78 '__gnuc_va_list'
|         |   `-TypedefType 0x55bf5799cbe0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55bf57888d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55bf57888ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55bf578482d0 '__va_list_tag'
|         |         `-CXXRecord 0x55bf57848238 '__va_list_tag'
|         `-PointerType 0x55bf57a6ab40 '__va_list_tag *'
|           `-RecordType 0x55bf578482d0 '__va_list_tag'
|             `-CXXRecord 0x55bf57848238 '__va_list_tag'
|-EnumDecl 0x55bf57e7ed10 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55bf57e7ee10 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bf57e7f390 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e7edf0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55bf57e7edd0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55bf57e7eea0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bf57e7f3a8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e7ee80 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55bf57e7ee60 <col:21> 'int' 2
| |-EnumConstantDecl 0x55bf57e7ef30 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bf57e7f3c0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e7ef10 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55bf57e7eef0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55bf57e7efc0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bf57e7f3d8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e7efa0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55bf57e7ef80 <col:17> 'int' 8
| |-EnumConstantDecl 0x55bf57e7f050 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bf57e7f3f0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e7f030 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55bf57e7f010 <col:22> 'int' 16
| |-EnumConstantDecl 0x55bf57e7f0e0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bf57e7f408 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e7f0c0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55bf57e7f0a0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55bf57e7f170 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bf57e7f420 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e7f150 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55bf57e7f130 <col:17> 'int' 64
| |-EnumConstantDecl 0x55bf57e7f220 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bf57e7f438 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e7f1e0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55bf57e7f1c0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55bf57e7f2b0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bf57e7f450 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e7f290 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55bf57e7f270 <col:16> 'int' 256
| `-EnumConstantDecl 0x55bf57e7f340 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55bf57e7f468 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57e7f320 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55bf57e7f300 <col:12> 'int' 1024
|-CXXMethodDecl 0x55bf57e7f678 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55bf57e7f490 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55bf57e7f530 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55bf57e7f800 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55bf57e7f738 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55bf57e7f8a8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55bf57e7f8e8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55bf57e7f948 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55bf57e7f9c0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55bf57e7fdc0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55bf57e7fa38 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55bf57e7fab8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55bf57e7fb38 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55bf57e7fbb0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55bf57e7fc28 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55bf57e7fca0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55bf57e7fee8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55bf57e7fee8
| `-ParmVarDecl 0x55bf57e7fff8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55bf57e820f8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55bf57e820f8
  `-ParmVarDecl 0x55bf57e82208 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57d29578 prev 0x55bf57d6e658 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57d29670 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55bf57d29700 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55bf57d29838 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55bf57d29738 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55bf57d2ac60 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55bf57d2ac40 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55bf57d2a7d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55bf57d2acf0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bf57d2acb0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55bf57d29738 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55bf57d2a840 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55bf57d2ad70 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55bf57d2ad30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55bf57d2a8a0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55bf57d2adb0 <col:54> 'bool' false
| `-CompoundStmt 0x55bf57d2aeb8 <col:61, line:38:5>
|   `-BinaryOperator 0x55bf57d2ae98 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55bf57d2ae30 <col:9> 'const Element *' lvalue ->_context 0x55bf57d2a778
|     | `-CXXThisExpr 0x55bf57d2ae20 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55bf57d2ae80 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55bf57d2ae60 <col:20> 'int' 0
|-CXXConstructorDecl 0x55bf57d29a48 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57d298f8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55bf57d29970 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55bf57d2ac98 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55bf57d2ac78 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55bf57d2a778 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55bf57d2af10 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bf57d2aed0 <col:20> 'const Element *' lvalue ParmVar 0x55bf57d298f8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55bf57d2a7d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55bf57d2af90 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bf57d2af50 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55bf57d29970 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55bf57d2a840 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55bf57d2b010 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55bf57d2afd0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55bf57d2a8a0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55bf57d2b050 <col:73> 'bool' false
| `-CompoundStmt 0x55bf57d2b0c8 <col:80, line:46:5>
|-CXXMethodDecl 0x55bf57d29b78 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55bf57d2b140 <col:36, line:51:5>
|   `-ReturnStmt 0x55bf57d2b130 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55bf57d2b118 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55bf57d2b0e8 <col:16> 'const Element *const' lvalue ->_context 0x55bf57d2a778
|         `-CXXThisExpr 0x55bf57d2b0d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55bf57d29c68 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55bf57d2b1c0 <col:32, line:57:5>
|   `-ReturnStmt 0x55bf57d2b1b0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55bf57d2b198 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55bf57d2b168 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55bf57d2a7d8
|         `-CXXThisExpr 0x55bf57d2b158 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55bf57d29d28 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55bf57d29eb0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55bf57d29de0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55bf57d2a000 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55bf57d29f70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55bf57d2a150 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55bf57d2a0c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55bf57d2a358 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55bf57d2a208 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55bf57d2a280 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55bf57d2a688 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55bf57d2a418 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55bf57d2a498 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55bf57d2a560 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55bf57d2a740 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55bf57d2a778 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55bf57d2a7d8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55bf57d2a840 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55bf57d2a8a0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55bf57d2a8f0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55bf57d2a8f0
| `-ParmVarDecl 0x55bf57d2aa08 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55bf57d2aaa8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55bf57d2aaa8
| `-ParmVarDecl 0x55bf57d2abb8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55bf57e8c8f0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bf57e36e70 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55bf57e37048 prev 0x55bf57e36e70 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55bf57e370d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55bf57e37100 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e38cd0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55bf57e38c80 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55bf57e375b0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55bf57e374b0 'type'
|     `-TemplateSpecializationType 0x55bf57e37440 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55bf57e37320 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55bf57e37300 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55bf57e372e0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55bf57e37420 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55bf57e37340 'char_array'
|-TypedefDecl 0x55bf57e38d88 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55bf57e38d50 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55bf57e38d30 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55bf57e38cd0 'type'
|     `-ElaboratedType 0x55bf57e38c80 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55bf57e375b0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55bf57e374b0 'type'
|         `-TemplateSpecializationType 0x55bf57e37440 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55bf57e37320 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55bf57e37300 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55bf57e372e0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55bf57e37420 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55bf57e37340 'char_array'
|-CXXMethodDecl 0x55bf57e38f08 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55bf57e38e18 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55bf57e38ff8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55bf57e390d8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55bf57e393a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55bf57e392b0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55bf57e395e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bf57e39460 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bf57e394d8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bf57e397b8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bf57e396a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bf57e39720 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bf57e39918 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55bf57e399e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55bf57e39c38 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bf57e39aa8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55bf57e39b20 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bf57e39e98 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55bf57e39d08 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55bf57e39d80 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bf57e3a058 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55bf57e39f68 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bf57e3a218 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55bf57e3a120 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bf57e3a2d0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bf57e3a380 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bf57e3a5b8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bf57e3a430 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bf57e3a4a8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bf57e41c98 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55bf57e41ba0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55bf57e41d60 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55bf57e41db0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55bf57e41e00 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bf57e35878 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55bf57e35a88 prev 0x55bf57e35878 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55bf57e36de0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55bf57e36d90 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55bf57e36d70 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55bf57e36c20 'type'
|     `-SubstTemplateTypeParmType 0x55bf57e36a40 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55bf57b0d030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b0cfd8 'T'
|       `-RecordType 0x55bf57e36590 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55bf57e364a8 'sized_array_memory'
|-FieldDecl 0x55bf57e41e50 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55bf57e41ea0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55bf57e41ed8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55bf57e35b20 'int' sugar
|   |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|   `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e41f68 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55bf57e41f30 'int &'
|   `-SubstTemplateTypeParmType 0x55bf57e35b20 'int' sugar
|     |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|     `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e42028 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55bf57e41ff0 'const int &'
|   `-QualType 0x55bf57e35b21 'const int' const
|     `-SubstTemplateTypeParmType 0x55bf57e35b20 'int' sugar
|       |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|       `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e420b8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55bf57e42080 'int *'
|   `-SubstTemplateTypeParmType 0x55bf57e35b20 'int' sugar
|     |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|     `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e42148 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55bf57e42110 'const int *'
|   `-QualType 0x55bf57e35b21 'const int' const
|     `-SubstTemplateTypeParmType 0x55bf57e35b20 'int' sugar
|       |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|       `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e42d30 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55bf57e42ce0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55bf57e42cc0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55bf57e42c50 'type'
|     `-SubstTemplateTypeParmType 0x55bf57e42a10 'int' sugar
|       |-TemplateTypeParmType 0x55bf57b18050 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b18000 'T'
|       `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e42d98 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55bf57e41ff0 'const int &'
|   `-QualType 0x55bf57e35b21 'const int' const
|     `-SubstTemplateTypeParmType 0x55bf57e35b20 'int' sugar
|       |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|       `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e42df0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e42e58 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55bf57e42080 'int *'
|   `-SubstTemplateTypeParmType 0x55bf57e35b20 'int' sugar
|     |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|     `-BuiltinType 0x55bf57847580 'int'
|-TypedefDecl 0x55bf57e42ec0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55bf57e42110 'const int *'
|   `-QualType 0x55bf57e35b21 'const int' const
|     `-SubstTemplateTypeParmType 0x55bf57e35b20 'int' sugar
|       |-TemplateTypeParmType 0x55bf57b44f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bf57b44ee8 'T'
|       `-BuiltinType 0x55bf57847580 'int'
|-EnumDecl 0x55bf57e42f18 <line:134:5> col:5
| `-EnumConstantDecl 0x55bf57e43010 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55bf57e42ff0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55bf57b465c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55bf57b465a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55bf57b46580 <col:40> 'int' 1
|-CXXConstructorDecl 0x55bf57e43098 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55bf57e432e8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bf57e43150 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bf57e431f0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55bf57e435a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55bf57e43490 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55bf57e43868 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55bf57e43750 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55bf57e43bb0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55bf57e43a90 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55bf57e43ec0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55bf57e43da0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55bf57e441b0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bf57e43ff8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bf57e44070 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bf57e442d8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55bf57e443b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57e44410 <col:30> Inherited
|-CXXMethodDecl 0x55bf57e44458 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55bf57e44508 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57e44560 <col:30> Inherited
|-CXXMethodDecl 0x55bf57e44628 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bf57e446d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57e44730 <col:30> Inherited
|-CXXMethodDecl 0x55bf57e44778 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bf57e44828 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57e44880 <col:30> Inherited
|-CXXMethodDecl 0x55bf57e448c8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bf57e44978 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57e449d0 <col:30> Inherited
|-CXXMethodDecl 0x55bf57e44a18 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bf57e44ac8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bf57e44b20 <col:30> Inherited
|-CXXMethodDecl 0x55bf57e44b48 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bf57e44bf8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bf57e44ca8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bf57e44e68 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bf57e44d58 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bf57e44dd0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bf57e44fb8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55bf57e44f28 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57e45168 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55bf57e45070 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bf57e45220 <col:20>
| `-OptimizeNoneAttr 0x55bf57e45278 <col:30>
|-CXXMethodDecl 0x55bf57e45398 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55bf57e452a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bf57e45450 <col:20>
| `-OptimizeNoneAttr 0x55bf57e454a8 <col:30>
|-CXXMethodDecl 0x55bf57e45560 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bf57e454d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57e456a8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bf57e45618 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57e457d8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55bf57e45908 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55bf57e459d8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55bf57e45aa8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55bf57e45be8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bf57e45b58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57e45d30 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bf57e45ca0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bf57e45e78 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55bf57e45de8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bf57e45f30 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55bf57e46030 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55bf57e45fa0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bf57e460e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55bf57e461a8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55bf57e462a8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55bf57e46428 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55bf57e46368 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55bf57e46be8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55bf57e464e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55bf57e46b48 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55bf57e46a48 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55bf57e46cc8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bf57e46e18 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55bf57e46d88 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bf57e46ed0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55bf57e47118 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bf57e46f90 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55bf57e47008 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bf57e472d8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55bf57e471e8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55bf57e47528 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55bf57e473a0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55bf57e47418 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55bf57e475e8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55bf57e47848 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55bf57e47750 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55bf57e47918 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57e339e8 prev 0x55bf57e15ae0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bf57e33ae0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55bf57e33bd0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55bf57e596b0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55bf57e33cc0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55bf57e596c0 <col:25, line:830:9>
|-CXXMethodDecl 0x55bf57e33dc0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55bf57e33e70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55bf57e33f18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55bf57e33f18
| `-ParmVarDecl 0x55bf57e34028 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55bf57e347e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55bf57e347e8
  `-ParmVarDecl 0x55bf57e348f8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57d2fee8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55bf57d30048 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55bf57e15ae0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55bf57e15b90 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55bf57e15c98 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55bf57e15bc8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bf57e48ed8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bf57e48eb8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55bf57e15fb8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57e15e30 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55bf57e15ea8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bf57e48f10 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bf57e48ef0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55bf57e16190 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57e16080 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55bf57e160f8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bf57e48f48 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bf57e48f28 <col:55> 'int' 0
|-CXXConstructorDecl 0x55bf57e16548 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55bf57e16330 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55bf57e163a8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55bf57e16420 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bf57e48f80 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bf57e48f60 <col:31> 'int' 0
|-CXXConstructorDecl 0x55bf57e16708 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55bf57e16648 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55bf57e16800 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55bf57e169e8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55bf57e168f0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55bf57e16ad8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55bf57e49330 <col:24, line:291:5>
|   `-ReturnStmt 0x55bf57e49320 <line:290:9, col:79>
|     `-BinaryOperator 0x55bf57e49300 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55bf57e491d8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55bf57e49130 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55bf57e49110 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55bf57e49008 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55bf57e48ff0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55bf57e48fd8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55bf57e48fa8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55bf57e35810
|       | |   |       `-CXXThisExpr 0x55bf57e48f98 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55bf57e490f8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55bf57e490e0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55bf57e490a8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55bf57e49078 <col:28, col:35> '<bound member function type>' ->size 0x55bf57df75b8
|       | |           `-ImplicitCastExpr 0x55bf57e490c8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55bf57e49060 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55bf57e49030 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55bf57e35810
|       | |                 `-CXXThisExpr 0x55bf57e49020 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55bf57e491c0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55bf57e491a8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55bf57e49190 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55bf57e49160 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55bf57e47a60
|       |         `-CXXThisExpr 0x55bf57e49150 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55bf57e492e0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55bf57e492c8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55bf57e492b0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55bf57e49270 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55bf57e49258 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55bf57e49208 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55bf57e47b10
|         |     |   `-CXXThisExpr 0x55bf57e491f8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55bf57e49238 <col:73> 'int' 0
|         `-IntegerLiteral 0x55bf57e49290 <col:79> 'int' 0
|-CXXMethodDecl 0x55bf57e16b98 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55bf57e49508 <col:32, line:296:5>
|   `-ReturnStmt 0x55bf57e494f8 <line:295:9, col:49>
|     `-BinaryOperator 0x55bf57e494d8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55bf57e493b8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55bf57e493a0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55bf57e49388 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55bf57e49358 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55bf57e47a60
|       |       `-CXXThisExpr 0x55bf57e49348 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55bf57e494b8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55bf57e494a0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55bf57e49488 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55bf57e49448 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55bf57e49430 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55bf57e493e0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55bf57e47b10
|         |     |   `-CXXThisExpr 0x55bf57e493d0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55bf57e49410 <col:43> 'int' 0
|         `-IntegerLiteral 0x55bf57e49468 <col:49> 'int' 0
|-CXXMethodDecl 0x55bf57e16c88 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55bf57e49718 <col:19, line:306:5>
|   |-IfStmt 0x55bf57e49638 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55bf57e49578 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55bf57e49560 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55bf57e49530 <col:13> 'Vector<String> *' lvalue ->_conf 0x55bf57e35810
|   | |     `-CXXThisExpr 0x55bf57e49520 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55bf57e49618 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55bf57e495e8 <col:13, col:20> '<bound member function type>' ->clear 0x55bf57df9fb8
|   |     `-ImplicitCastExpr 0x55bf57e495d0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55bf57e495a0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55bf57e35810
|   |         `-CXXThisExpr 0x55bf57e49590 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55bf57e496c0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55bf57e49690 <col:9, col:16> '<bound member function type>' .clear 0x55bf57e475e8
|   |   `-MemberExpr 0x55bf57e49660 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55bf57e47a00
|   |     `-CXXThisExpr 0x55bf57e49650 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55bf57e49708 <line:305:9, col:17>
|     `-UnaryOperator 0x55bf57e496f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bf57e496e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bf57e16f08 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55bf57e16e10 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55bf57e17088 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55bf57e16fc0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55bf57e17408 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55bf57e17130 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55bf57e17368 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55bf57e171d8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55bf57e17250 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55bf57e49a38 <col:67, line:327:5>
|     |-WhileStmt 0x55bf57e499e8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55bf57e49800 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55bf57e49780 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55bf57d66b28 0x55bf57bb0108 0x55bf57bafde0 0x55bf57ba15c0 0x55bf57ba1270 0x55bf57ba0b60 0x55bf57b734d0 0x55bf57aff770
|     | | |-DeclRefExpr 0x55bf57e49740 <col:16> 'Iter' lvalue ParmVar 0x55bf57e171d8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55bf57e49760 <col:25> 'Iter' lvalue ParmVar 0x55bf57e17250 'end' 'Iter'
|     | `-CompoundStmt 0x55bf57e499c8 <col:30, line:325:9>
|     |   |-CallExpr 0x55bf57e49968 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55bf57e49848 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55bf57e49938 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55bf57e498c8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|     |   |   `-DeclRefExpr 0x55bf57e498a8 <col:24> 'Iter' lvalue ParmVar 0x55bf57e171d8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55bf57e499b0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55bf57e49990 <col:15> 'Iter' lvalue ParmVar 0x55bf57e171d8 'begin' 'Iter'
|     `-ReturnStmt 0x55bf57e49a28 <line:326:9, col:17>
|       `-UnaryOperator 0x55bf57e49a10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e49a00 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bf57e17510 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55bf57e17480 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55bf57e17658 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55bf57e175c8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55bf57e17720 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55bf57e49b18 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55bf57e49ab8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55bf57e49a68 <col:9> '<bound member function type>' ->reset_from 0x55bf57e47e88
|   | | `-CXXThisExpr 0x55bf57e49a58 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55bf57e49a98 <col:20> 'int' 0
|   `-ReturnStmt 0x55bf57e49b08 <line:352:9, col:17>
|     `-UnaryOperator 0x55bf57e49af0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bf57e49ae0 <col:17> 'Args *' this
|-VarDecl 0x55bf57e177d8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bf57e17840 <col:38> 'int' 1
|-VarDecl 0x55bf57e178d0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bf57e17938 <col:39> 'int' 2
|-VarDecl 0x55bf57e179c8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bf57e17a30 <col:39> 'int' 4
|-VarDecl 0x55bf57e17ac0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bf57e17b28 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55bf57e17ea8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55bf57e17ba0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bf57e17e08 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55bf57e17c50 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e17cf8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4b558 <col:43, line:371:5>
|     `-ReturnStmt 0x55bf57e4b548 <line:370:9, col:34>
|       `-CallExpr 0x55bf57e4b510 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4b430 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4b4b0 <col:21> 'const char *' lvalue ParmVar 0x55bf57e17c50 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4b4d0 <col:30> 'int' 0
|         `-DeclRefExpr 0x55bf57e4b4f0 <col:33> 'T' lvalue ParmVar 0x55bf57e17cf8 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e181d8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55bf57e17f10 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bf57e18138 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55bf57e17fc0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e18068 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4b6a8 <col:45, line:375:5>
|     `-ReturnStmt 0x55bf57e4b698 <line:374:9, col:42>
|       `-CallExpr 0x55bf57e4b660 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4b580 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4b600 <col:21> 'const char *' lvalue ParmVar 0x55bf57e17fc0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4b620 <col:30> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55bf57e4b640 <col:41> 'T' lvalue ParmVar 0x55bf57e18068 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e18508 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55bf57e18240 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bf57e18468 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55bf57e182f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e18398 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4b7f8 <col:45, line:379:5>
|     `-ReturnStmt 0x55bf57e4b7e8 <line:378:9, col:43>
|       `-CallExpr 0x55bf57e4b7b0 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4b6d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4b750 <col:21> 'const char *' lvalue ParmVar 0x55bf57e182f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4b770 <col:30> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int'
|         `-DeclRefExpr 0x55bf57e4b790 <col:42> 'T' lvalue ParmVar 0x55bf57e18398 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e18838 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55bf57e18570 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55bf57e18798 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55bf57e18620 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55bf57e186c8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55bf57e4b9f8 <col:46, line:383:5>
| |   `-ReturnStmt 0x55bf57e4b9e8 <line:382:9, col:55>
| |     `-CallExpr 0x55bf57e4b9b0 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55bf57e4b820 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55bf57e4b8a0 <col:21> 'const char *' lvalue ParmVar 0x55bf57e18620 'keyword' 'const char *'
| |       |-BinaryOperator 0x55bf57e4b970 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55bf57e4b920 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55bf57e4b900 <col:30> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55bf57e4b958 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55bf57e4b938 <col:42> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55bf57e4b990 <col:54> 'T' lvalue ParmVar 0x55bf57e186c8 'x' 'T &'
| `-CXXMethodDecl 0x55bf57e8dbb8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IPAddress &)'
|   |-TemplateArgument type 'IPAddress'
|   |-ParmVarDecl 0x55bf57e8d9d0 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55bf57e8daa8 <col:40, col:43> col:43 x 'IPAddress &'
|-FunctionTemplateDecl 0x55bf57e18c38 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55bf57e188a0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bf57e18b98 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55bf57e18950 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e189d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e18a78 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4bb38 <col:54, line:388:5>
|     |-CallExpr 0x55bf57e4bac0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e4ba10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55bf57e4ba50 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55bf57e4ba60 <col:30> 'const char *' lvalue ParmVar 0x55bf57e18950 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bf57e4ba80 <col:39> 'int' lvalue ParmVar 0x55bf57e189d0 'flags' 'int'
|     | `-DeclRefExpr 0x55bf57e4baa0 <col:46> 'T' lvalue ParmVar 0x55bf57e18a78 'x' 'T &'
|     `-ReturnStmt 0x55bf57e4bb28 <line:387:9, col:17>
|       `-UnaryOperator 0x55bf57e4bb10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e4bb00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e190e8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55bf57e18ca8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bf57e18d28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bf57e19048 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55bf57e18de8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e18e88 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55bf57e18f28 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bf57e4bca8 <col:74, line:403:5>
|     `-ReturnStmt 0x55bf57e4bc98 <line:402:9, col:56>
|       `-CallExpr 0x55bf57e4bc58 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4bb68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4bbd8 <col:28> 'const char *' lvalue ParmVar 0x55bf57e18de8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4bbf8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55bf57e4bc18 <col:40> 'T' lvalue ParmVar 0x55bf57e18e88 'x' 'T &'
|         `-DeclRefExpr 0x55bf57e4bc38 <col:43> 'const V' lvalue ParmVar 0x55bf57e18f28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bf57e19558 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55bf57e19158 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bf57e191d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bf57e194b8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55bf57e19298 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e19338 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55bf57e193d8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bf57e4be10 <col:76, line:407:5>
|     `-ReturnStmt 0x55bf57e4be00 <line:406:9, col:65>
|       `-CallExpr 0x55bf57e4bdc0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4bcd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4bd40 <col:28> 'const char *' lvalue ParmVar 0x55bf57e19298 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4bd60 <col:37> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int'
|         |-DeclRefExpr 0x55bf57e4bd80 <col:49> 'T' lvalue ParmVar 0x55bf57e19338 'x' 'T &'
|         `-DeclRefExpr 0x55bf57e4bda0 <col:52> 'const V' lvalue ParmVar 0x55bf57e193d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bf57e19aa8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55bf57e195c8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bf57e19648 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bf57e19a08 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55bf57e19708 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e19788 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e19828 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55bf57e198c8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bf57e4bf78 <col:85, line:412:5>
|     |-CallExpr 0x55bf57e4bef8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e4be28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55bf57e4be68 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55bf57e4be78 <col:37> 'const char *' lvalue ParmVar 0x55bf57e19708 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bf57e4be98 <col:46> 'int' lvalue ParmVar 0x55bf57e19788 'flags' 'int'
|     | |-DeclRefExpr 0x55bf57e4beb8 <col:53> 'T' lvalue ParmVar 0x55bf57e19828 'x' 'T &'
|     | `-DeclRefExpr 0x55bf57e4bed8 <col:56> 'const V' lvalue ParmVar 0x55bf57e198c8 'default_value' 'const V &'
|     `-ReturnStmt 0x55bf57e4bf68 <line:411:9, col:17>
|       `-UnaryOperator 0x55bf57e4bf50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e4bf40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e19f38 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55bf57e19b20 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e19b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e19e98 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bf57e19c58 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e19cd0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e19d78 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4c0f8 <col:53, line:425:5>
|     `-ReturnStmt 0x55bf57e4c0e8 <line:424:9, col:42>
|       `-CallExpr 0x55bf57e4c0a8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4bfa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4c028 <col:21> 'const char *' lvalue ParmVar 0x55bf57e19c58 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4c048 <col:30> 'int' 0
|         |-DeclRefExpr 0x55bf57e4c068 <col:33> 'P' lvalue ParmVar 0x55bf57e19cd0 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4c088 <col:41> 'T' lvalue ParmVar 0x55bf57e19d78 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e1a388 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55bf57e19fa8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1a028 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e1a2e8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bf57e1a0e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1a160 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1a208 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4c270 <col:55, line:429:5>
|     `-ReturnStmt 0x55bf57e4c260 <line:428:9, col:50>
|       `-CallExpr 0x55bf57e4c220 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4c120 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4c1a0 <col:21> 'const char *' lvalue ParmVar 0x55bf57e1a0e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4c1c0 <col:30> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55bf57e4c1e0 <col:41> 'P' lvalue ParmVar 0x55bf57e1a160 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4c200 <col:49> 'T' lvalue ParmVar 0x55bf57e1a208 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e1a7d8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55bf57e1a3f8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1a478 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e1a738 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bf57e1a538 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1a5b0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1a658 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4c3e8 <col:55, line:433:5>
|     `-ReturnStmt 0x55bf57e4c3d8 <line:432:9, col:51>
|       `-CallExpr 0x55bf57e4c398 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4c298 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4c318 <col:21> 'const char *' lvalue ParmVar 0x55bf57e1a538 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4c338 <col:30> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int'
|         |-DeclRefExpr 0x55bf57e4c358 <col:42> 'P' lvalue ParmVar 0x55bf57e1a5b0 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4c378 <col:50> 'T' lvalue ParmVar 0x55bf57e1a658 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e1ac28 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55bf57e1a848 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1a8c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55bf57e1ab88 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55bf57e1a988 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55bf57e1aa00 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55bf57e1aaa8 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55bf57e4c610 <col:56, line:437:5>
| |   `-ReturnStmt 0x55bf57e4c600 <line:436:9, col:63>
| |     `-CallExpr 0x55bf57e4c5c0 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55bf57e4c410 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55bf57e4c490 <col:21> 'const char *' lvalue ParmVar 0x55bf57e1a988 'keyword' 'const char *'
| |       |-BinaryOperator 0x55bf57e4c560 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55bf57e4c510 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55bf57e4c4f0 <col:30> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55bf57e4c548 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55bf57e4c528 <col:42> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55bf57e4c580 <col:54> 'P' lvalue ParmVar 0x55bf57e1aa00 'parser' 'P'
| |       `-DeclRefExpr 0x55bf57e4c5a0 <col:62> 'T' lvalue ParmVar 0x55bf57e1aaa8 'x' 'T &'
| `-CXXMethodDecl 0x55bf57e8d3a8 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, WordArg, String &)'
|   |-TemplateArgument type 'WordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55bf57e8d110 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e8d1b8 <col:40, col:42> col:42 parser 'WordArg':'WordArg'
|   `-ParmVarDecl 0x55bf57e8d288 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x55bf57e1b158 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55bf57e1ac98 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1ad18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e1b0b8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bf57e1add8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1ae58 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e1aed0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1af78 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4c778 <col:64, line:442:5>
|     |-CallExpr 0x55bf57e4c6f8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e4c628 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55bf57e4c668 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55bf57e4c678 <col:30> 'const char *' lvalue ParmVar 0x55bf57e1add8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bf57e4c698 <col:39> 'int' lvalue ParmVar 0x55bf57e1ae58 'flags' 'int'
|     | |-DeclRefExpr 0x55bf57e4c6b8 <col:46> 'P' lvalue ParmVar 0x55bf57e1aed0 'parser' 'P'
|     | `-DeclRefExpr 0x55bf57e4c6d8 <col:54> 'T' lvalue ParmVar 0x55bf57e1af78 'x' 'T &'
|     `-ReturnStmt 0x55bf57e4c768 <line:441:9, col:17>
|       `-UnaryOperator 0x55bf57e4c750 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e4c740 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e1b758 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55bf57e1b1d0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1b248 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55bf57e1b2c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bf57e1b6b8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55bf57e1b390 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1b408 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1b4a8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55bf57e1b578 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bf57e4c910 <col:84, line:458:5>
|     `-ReturnStmt 0x55bf57e4c900 <line:457:9, col:64>
|       `-CallExpr 0x55bf57e4c8b8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4c7a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4c818 <col:28> 'const char *' lvalue ParmVar 0x55bf57e1b390 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4c838 <col:37> 'int' 0
|         |-DeclRefExpr 0x55bf57e4c858 <col:40> 'P' lvalue ParmVar 0x55bf57e1b408 'parser' 'P'
|         |-DeclRefExpr 0x55bf57e4c878 <col:48> 'T' lvalue ParmVar 0x55bf57e1b4a8 'x' 'T &'
|         `-DeclRefExpr 0x55bf57e4c898 <col:51> 'const V' lvalue ParmVar 0x55bf57e1b578 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bf57e1bcd8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55bf57e1b7d0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1b848 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55bf57e1b8c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bf57e1bc38 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55bf57e1b990 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1ba08 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1baa8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55bf57e1bb48 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bf57e4caa0 <col:86, line:462:5>
|     `-ReturnStmt 0x55bf57e4ca90 <line:461:9, col:73>
|       `-CallExpr 0x55bf57e4ca48 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4c938 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4c9a8 <col:28> 'const char *' lvalue ParmVar 0x55bf57e1b990 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4c9c8 <col:37> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int'
|         |-DeclRefExpr 0x55bf57e4c9e8 <col:49> 'P' lvalue ParmVar 0x55bf57e1ba08 'parser' 'P'
|         |-DeclRefExpr 0x55bf57e4ca08 <col:57> 'T' lvalue ParmVar 0x55bf57e1baa8 'x' 'T &'
|         `-DeclRefExpr 0x55bf57e4ca28 <col:60> 'const V' lvalue ParmVar 0x55bf57e1bb48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bf57e1c338 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55bf57e1bd50 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1bdc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55bf57e1be48 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bf57e1c298 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55bf57e1bf10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1bf90 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e1c008 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1c0a8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55bf57e1c148 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bf57e4cc30 <col:95, line:467:5>
|     |-CallExpr 0x55bf57e4cba8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e4cab8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55bf57e4caf8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55bf57e4cb08 <col:37> 'const char *' lvalue ParmVar 0x55bf57e1bf10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bf57e4cb28 <col:46> 'int' lvalue ParmVar 0x55bf57e1bf90 'flags' 'int'
|     | |-DeclRefExpr 0x55bf57e4cb48 <col:53> 'P' lvalue ParmVar 0x55bf57e1c008 'parser' 'P'
|     | |-DeclRefExpr 0x55bf57e4cb68 <col:61> 'T' lvalue ParmVar 0x55bf57e1c0a8 'x' 'T &'
|     | `-DeclRefExpr 0x55bf57e4cb88 <col:64> 'const V' lvalue ParmVar 0x55bf57e1c148 'default_value' 'const V &'
|     `-ReturnStmt 0x55bf57e4cc20 <line:466:9, col:17>
|       `-UnaryOperator 0x55bf57e4cc08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e4cbf8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e1c918 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55bf57e1c3b8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1c438 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bf57e1c4b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bf57e1c878 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bf57e1c580 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1c5f8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1c698 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bf57e1c738 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bf57e4cdd8 <col:63, line:481:5>
|     `-ReturnStmt 0x55bf57e4cdc8 <line:480:9, col:47>
|       `-CallExpr 0x55bf57e4cd80 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4cc60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4cce0 <col:21> 'const char *' lvalue ParmVar 0x55bf57e1c580 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4cd00 <col:30> 'int' 0
|         |-DeclRefExpr 0x55bf57e4cd20 <col:33> 'P' lvalue ParmVar 0x55bf57e1c5f8 'parser' 'P'
|         |-DeclRefExpr 0x55bf57e4cd40 <col:41> 'T1' lvalue ParmVar 0x55bf57e1c698 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bf57e4cd60 <col:45> 'T2' lvalue ParmVar 0x55bf57e1c738 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bf57e1ce98 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55bf57e1c990 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1ca08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bf57e1ca88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bf57e1cdf8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bf57e1cb50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1cbc8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1cc68 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bf57e1cd08 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bf57e4cf78 <col:65, line:485:5>
|     `-ReturnStmt 0x55bf57e4cf68 <line:484:9, col:55>
|       `-CallExpr 0x55bf57e4cf20 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4ce00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4ce80 <col:21> 'const char *' lvalue ParmVar 0x55bf57e1cb50 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4cea0 <col:30> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55bf57e4cec0 <col:41> 'P' lvalue ParmVar 0x55bf57e1cbc8 'parser' 'P'
|         |-DeclRefExpr 0x55bf57e4cee0 <col:49> 'T1' lvalue ParmVar 0x55bf57e1cc68 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bf57e4cf00 <col:53> 'T2' lvalue ParmVar 0x55bf57e1cd08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bf57e1d418 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55bf57e1cf10 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1cf88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bf57e1d008 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bf57e1d378 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bf57e1d0d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1d148 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1d1e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bf57e1d288 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bf57e4d118 <col:65, line:489:5>
|     `-ReturnStmt 0x55bf57e4d108 <line:488:9, col:56>
|       `-CallExpr 0x55bf57e4d0c0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4cfa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4d020 <col:21> 'const char *' lvalue ParmVar 0x55bf57e1d0d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4d040 <col:30> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int'
|         |-DeclRefExpr 0x55bf57e4d060 <col:42> 'P' lvalue ParmVar 0x55bf57e1d148 'parser' 'P'
|         |-DeclRefExpr 0x55bf57e4d080 <col:50> 'T1' lvalue ParmVar 0x55bf57e1d1e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bf57e4d0a0 <col:54> 'T2' lvalue ParmVar 0x55bf57e1d288 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bf57e1d998 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55bf57e1d490 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1d508 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bf57e1d588 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bf57e1d8f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bf57e1d650 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e1d6c8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e1d768 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bf57e1d808 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bf57e4d368 <col:66, line:493:5>
|     `-ReturnStmt 0x55bf57e4d358 <line:492:9, col:68>
|       `-CallExpr 0x55bf57e4d310 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4d140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4d1c0 <col:21> 'const char *' lvalue ParmVar 0x55bf57e1d650 'keyword' 'const char *'
|         |-BinaryOperator 0x55bf57e4d290 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55bf57e4d240 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bf57e4d220 <col:30> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55bf57e4d278 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55bf57e4d258 <col:42> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55bf57e4d2b0 <col:54> 'P' lvalue ParmVar 0x55bf57e1d6c8 'parser' 'P'
|         |-DeclRefExpr 0x55bf57e4d2d0 <col:62> 'T1' lvalue ParmVar 0x55bf57e1d768 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bf57e4d2f0 <col:66> 'T2' lvalue ParmVar 0x55bf57e1d808 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bf57e22328 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55bf57e1da10 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e1da88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bf57e21e38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bf57e22288 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bf57e21f00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e21f80 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e21ff8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e22098 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bf57e22138 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bf57e4d4f8 <col:74, line:498:5>
|     |-CallExpr 0x55bf57e4d470 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e4d380 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55bf57e4d3c0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55bf57e4d3d0 <col:30> 'const char *' lvalue ParmVar 0x55bf57e21f00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bf57e4d3f0 <col:39> 'int' lvalue ParmVar 0x55bf57e21f80 'flags' 'int'
|     | |-DeclRefExpr 0x55bf57e4d410 <col:46> 'P' lvalue ParmVar 0x55bf57e21ff8 'parser' 'P'
|     | |-DeclRefExpr 0x55bf57e4d430 <col:54> 'T1' lvalue ParmVar 0x55bf57e22098 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55bf57e4d450 <col:58> 'T2' lvalue ParmVar 0x55bf57e22138 'x2' 'T2 &'
|     `-ReturnStmt 0x55bf57e4d4e8 <line:497:9, col:17>
|       `-UnaryOperator 0x55bf57e4d4d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e4d4c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e22688 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55bf57e223a8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bf57e225e8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bf57e22460 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e224d8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55bf57e4d640 <col:52, line:509:5>
|     `-ReturnStmt 0x55bf57e4d630 <line:508:9, col:44>
|       `-CallExpr 0x55bf57e4d5f8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4d528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4d598 <col:26> 'const char *' lvalue ParmVar 0x55bf57e22460 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4d5b8 <col:35> 'int' 0
|         `-DeclRefExpr 0x55bf57e4d5d8 <col:38> 'P' lvalue ParmVar 0x55bf57e224d8 'parser' 'P'
|-FunctionTemplateDecl 0x55bf57e22988 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55bf57e226f0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bf57e228e8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bf57e227a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e22818 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55bf57e4d780 <col:54, line:513:5>
|     `-ReturnStmt 0x55bf57e4d770 <line:512:9, col:52>
|       `-CallExpr 0x55bf57e4d738 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4d668 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4d6d8 <col:26> 'const char *' lvalue ParmVar 0x55bf57e227a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4d6f8 <col:35> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55bf57e4d718 <col:46> 'P' lvalue ParmVar 0x55bf57e22818 'parser' 'P'
|-FunctionTemplateDecl 0x55bf57e22c88 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55bf57e229f0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bf57e22be8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bf57e22aa0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e22b18 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55bf57e4d8c0 <col:54, line:517:5>
|     `-ReturnStmt 0x55bf57e4d8b0 <line:516:9, col:53>
|       `-CallExpr 0x55bf57e4d878 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4d7a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4d818 <col:26> 'const char *' lvalue ParmVar 0x55bf57e22aa0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4d838 <col:35> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int'
|         `-DeclRefExpr 0x55bf57e4d858 <col:47> 'P' lvalue ParmVar 0x55bf57e22b18 'parser' 'P'
|-FunctionTemplateDecl 0x55bf57e22f88 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55bf57e22cf0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bf57e22ee8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bf57e22da0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e22e18 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55bf57e4dab0 <col:55, line:521:5>
|     `-ReturnStmt 0x55bf57e4daa0 <line:520:9, col:65>
|       `-CallExpr 0x55bf57e4da68 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4d8e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4d958 <col:26> 'const char *' lvalue ParmVar 0x55bf57e22da0 'keyword' 'const char *'
|         |-BinaryOperator 0x55bf57e4da28 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55bf57e4d9d8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bf57e4d9b8 <col:35> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55bf57e4da10 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55bf57e4d9f0 <col:47> 'const int' lvalue Var 0x55bf57e178d0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55bf57e4da48 <col:59> 'P' lvalue ParmVar 0x55bf57e22e18 'parser' 'P'
|-FunctionTemplateDecl 0x55bf57e23358 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55bf57e22ff0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bf57e232b8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55bf57e230a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e23120 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e23198 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55bf57e4dbf0 <col:63, line:526:5>
|     |-CallExpr 0x55bf57e4db78 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e4dac8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55bf57e4db08 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55bf57e4db18 <col:35> 'const char *' lvalue ParmVar 0x55bf57e230a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bf57e4db38 <col:44> 'int' lvalue ParmVar 0x55bf57e23120 'flags' 'int'
|     | `-DeclRefExpr 0x55bf57e4db58 <col:51> 'P' lvalue ParmVar 0x55bf57e23198 'parser' 'P'
|     `-ReturnStmt 0x55bf57e4dbe0 <line:525:9, col:17>
|       `-UnaryOperator 0x55bf57e4dbc8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e4dbb8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e237a8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55bf57e233c8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e23448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e23708 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bf57e23508 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e23580 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e23628 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4dd48 <col:58, line:541:5>
|     `-ReturnStmt 0x55bf57e4dd38 <line:540:9, col:39>
|       `-CallExpr 0x55bf57e4dd00 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4dc20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4dca0 <col:21> 'const char *' lvalue ParmVar 0x55bf57e23508 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4dcc0 <col:30> 'P' lvalue ParmVar 0x55bf57e23580 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4dce0 <col:38> 'T' lvalue ParmVar 0x55bf57e23628 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e23bf8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55bf57e23818 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e23898 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e23b58 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bf57e23958 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e239d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e23a78 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4de80 <col:60, line:545:5>
|     `-ReturnStmt 0x55bf57e4de70 <line:544:9, col:41>
|       `-CallExpr 0x55bf57e4de38 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4dd70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4ddd8 <col:23> 'const char *' lvalue ParmVar 0x55bf57e23958 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4ddf8 <col:32> 'P' lvalue ParmVar 0x55bf57e239d0 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4de18 <col:40> 'T' lvalue ParmVar 0x55bf57e23a78 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e24048 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55bf57e23c68 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e23ce8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e23fa8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bf57e23da8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e23e20 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e23ec8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4dfb8 <col:60, line:549:5>
|     `-ReturnStmt 0x55bf57e4dfa8 <line:548:9, col:41>
|       `-CallExpr 0x55bf57e4df70 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4dea8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4df10 <col:23> 'const char *' lvalue ParmVar 0x55bf57e23da8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4df30 <col:32> 'P' lvalue ParmVar 0x55bf57e23e20 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4df50 <col:40> 'T' lvalue ParmVar 0x55bf57e23ec8 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e24498 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55bf57e240b8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e24138 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e243f8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bf57e241f8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e24270 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e24318 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4e0f0 <col:61, line:553:5>
|     `-ReturnStmt 0x55bf57e4e0e0 <line:552:9, col:42>
|       `-CallExpr 0x55bf57e4e0a8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4dfe0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4e048 <col:24> 'const char *' lvalue ParmVar 0x55bf57e241f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4e068 <col:33> 'P' lvalue ParmVar 0x55bf57e24270 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4e088 <col:41> 'T' lvalue ParmVar 0x55bf57e24318 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e24978 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55bf57e24508 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e24588 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e248d8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bf57e24648 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e246c8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e24740 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e247e8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4e268 <col:69, line:557:5>
|     `-ReturnStmt 0x55bf57e4e258 <line:556:9, col:46>
|       `-CallExpr 0x55bf57e4e218 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4e118 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4e198 <col:21> 'const char *' lvalue ParmVar 0x55bf57e24648 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4e1b8 <col:30> 'int' lvalue ParmVar 0x55bf57e246c8 'flags' 'int'
|         |-DeclRefExpr 0x55bf57e4e1d8 <col:37> 'P' lvalue ParmVar 0x55bf57e24740 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4e1f8 <col:45> 'T' lvalue ParmVar 0x55bf57e247e8 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e24c88 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55bf57e249f0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bf57e24be8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bf57e24aa0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e24b18 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55bf57e4e3a8 <col:56, line:571:5>
|     `-ReturnStmt 0x55bf57e4e398 <line:570:9, col:48>
|       `-CallExpr 0x55bf57e4e360 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4e290 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4e300 <col:30> 'const char *' lvalue ParmVar 0x55bf57e24aa0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4e320 <col:39> 'int' 0
|         `-DeclRefExpr 0x55bf57e4e340 <col:42> 'P' lvalue ParmVar 0x55bf57e24b18 'parser' 'P'
|-FunctionTemplateDecl 0x55bf57e25018 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55bf57e24cf0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bf57e24f78 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55bf57e24da0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e24e20 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e24e98 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55bf57e4e578 <col:67, line:576:5>
|     |-CallExpr 0x55bf57e4e500 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e4e3c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55bf57e4e400 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55bf57e4e410 <col:39> 'const char *' lvalue ParmVar 0x55bf57e24da0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55bf57e4e4c0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55bf57e4e470 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55bf57e4e430 <col:48> 'int' lvalue ParmVar 0x55bf57e24e20 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55bf57e4e4a8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55bf57e4e488 <col:56> 'const int' lvalue Var 0x55bf57e17ac0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55bf57e4e4e0 <col:68> 'P' lvalue ParmVar 0x55bf57e24e98 'parser' 'P'
|     `-ReturnStmt 0x55bf57e4e568 <line:575:9, col:17>
|       `-UnaryOperator 0x55bf57e4e550 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e4e540 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e25468 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55bf57e25088 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e25108 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e253c8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bf57e251c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e25240 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e252e8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4e6e8 <col:62, line:592:5>
|     `-ReturnStmt 0x55bf57e4e6d8 <line:591:9, col:51>
|       `-CallExpr 0x55bf57e4e698 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4e5a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4e618 <col:30> 'const char *' lvalue ParmVar 0x55bf57e251c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4e638 <col:39> 'int' 0
|         |-DeclRefExpr 0x55bf57e4e658 <col:42> 'P' lvalue ParmVar 0x55bf57e25240 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4e678 <col:50> 'T' lvalue ParmVar 0x55bf57e252e8 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e25948 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55bf57e254d8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e25558 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e258a8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bf57e25618 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e25698 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e25710 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e257b8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4e8e0 <col:73, line:597:5>
|     |-CallExpr 0x55bf57e4e860 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e4e700 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55bf57e4e740 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55bf57e4e750 <col:39> 'const char *' lvalue ParmVar 0x55bf57e25618 'keyword' 'const char *'
|     | |-BinaryOperator 0x55bf57e4e800 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55bf57e4e7b0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55bf57e4e770 <col:48> 'int' lvalue ParmVar 0x55bf57e25698 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55bf57e4e7e8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55bf57e4e7c8 <col:56> 'const int' lvalue Var 0x55bf57e17ac0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55bf57e4e820 <col:68> 'P' lvalue ParmVar 0x55bf57e25710 'parser' 'P'
|     | `-DeclRefExpr 0x55bf57e4e840 <col:76> 'T' lvalue ParmVar 0x55bf57e257b8 'x' 'T &'
|     `-ReturnStmt 0x55bf57e4e8d0 <line:596:9, col:17>
|       `-UnaryOperator 0x55bf57e4e8b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e4e8a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e25ef8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55bf57e259c0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e25a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e25e58 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55bf57e25af8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e25b70 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e25d30 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bf57e4ea50 <col:65, line:614:5>
|     `-ReturnStmt 0x55bf57e4ea40 <line:613:9, col:46>
|       `-CallExpr 0x55bf57e4ea00 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4e910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4e980 <col:25> 'const char *' lvalue ParmVar 0x55bf57e25af8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4e9a0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55bf57e4e9c0 <col:37> 'P' lvalue ParmVar 0x55bf57e25b70 'parser' 'P'
|         `-DeclRefExpr 0x55bf57e4e9e0 <col:45> 'Vector<T>' lvalue ParmVar 0x55bf57e25d30 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55bf57e26328 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55bf57e25f68 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bf57e26288 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55bf57e26020 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e26170 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bf57e4ec70 <col:55, line:618:5>
|     `-ReturnStmt 0x55bf57e4ec60 <line:617:9, col:55>
|       `-CallExpr 0x55bf57e4ec20 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4ea78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4eae8 <col:25> 'const char *' lvalue ParmVar 0x55bf57e26020 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bf57e4eb08 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55bf57e4ebe0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55bf57e4ec00 <col:54> 'Vector<T>' lvalue ParmVar 0x55bf57e26170 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55bf57e268f8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55bf57e26390 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e26408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e26858 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55bf57e264c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e26548 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e265c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e26710 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bf57e4ee68 <col:76, line:623:5>
|     |-CallExpr 0x55bf57e4ede8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e4ec88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55bf57e4ecc8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55bf57e4ecd8 <col:34> 'const char *' lvalue ParmVar 0x55bf57e264c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55bf57e4ed88 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55bf57e4ed38 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55bf57e4ecf8 <col:43> 'int' lvalue ParmVar 0x55bf57e26548 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55bf57e4ed70 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55bf57e4ed50 <col:51> 'const int' lvalue Var 0x55bf57e17ac0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55bf57e4eda8 <col:63> 'P' lvalue ParmVar 0x55bf57e265c0 'parser' 'P'
|     | `-DeclRefExpr 0x55bf57e4edc8 <col:71> 'Vector<T>' lvalue ParmVar 0x55bf57e26710 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55bf57e4ee58 <line:622:9, col:17>
|       `-UnaryOperator 0x55bf57e4ee40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e4ee30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e26e38 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55bf57e26970 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e269e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e26d98 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55bf57e26aa8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e26b28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e26c70 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bf57e4f0d0 <col:66, line:627:5>
|     `-ReturnStmt 0x55bf57e4f0c0 <line:626:9, col:59>
|       `-CallExpr 0x55bf57e4f080 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bf57e4ee98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bf57e4ef08 <col:25> 'const char *' lvalue ParmVar 0x55bf57e26aa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bf57e4ef28 <col:34> 'int' lvalue ParmVar 0x55bf57e26b28 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55bf57e4f040 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55bf57e4f060 <col:58> 'Vector<T>' lvalue ParmVar 0x55bf57e26c70 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55bf57e26ec8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55bf57e4f150 <col:25, line:633:5>
|   `-ReturnStmt 0x55bf57e4f140 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55bf57e4f128 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55bf57e4f0f8 <col:16> 'const bool' lvalue ->_status 0x55bf57e35678
|         `-CXXThisExpr 0x55bf57e4f0e8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55bf57e27048 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55bf57e26f80 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55bf57e4f238 <col:27, line:639:5>
|   |-BinaryOperator 0x55bf57e4f1e0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bf57e4f168 <col:9> 'bool' lvalue ParmVar 0x55bf57e26f80 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bf57e4f1c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bf57e4f198 <col:13> 'bool' lvalue ->_status 0x55bf57e35678
|   |     `-CXXThisExpr 0x55bf57e4f188 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55bf57e4f228 <line:638:9, col:17>
|     `-UnaryOperator 0x55bf57e4f210 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bf57e4f200 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bf57e271c8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55bf57e27108 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55bf57e4f328 <col:39, line:644:5>
|   |-BinaryOperator 0x55bf57e4f2d0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bf57e4f258 <col:9> 'bool' lvalue ParmVar 0x55bf57e27108 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bf57e4f2b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bf57e4f288 <col:13> 'const bool' lvalue ->_status 0x55bf57e35678
|   |     `-CXXThisExpr 0x55bf57e4f278 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55bf57e4f318 <line:643:9, col:17>
|     `-UnaryOperator 0x55bf57e4f300 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bf57e4f2f0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55bf57e27290 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55bf57e4f3d0 <col:30, line:651:5>
|   `-ReturnStmt 0x55bf57e4f3c0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55bf57e4f3a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55bf57e4f378 <col:16> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|         `-ImplicitCastExpr 0x55bf57e4f358 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55bf57e4f348 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55bf57e273d8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55bf57e27348 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55bf57e4f4d8 <col:32, line:658:5>
|   |-BinaryOperator 0x55bf57e4f480 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bf57e4f3e8 <col:9> 'bool' lvalue ParmVar 0x55bf57e27348 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bf57e4f468 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bf57e4f438 <col:13> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|   |     `-ImplicitCastExpr 0x55bf57e4f418 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55bf57e4f408 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55bf57e4f4c8 <line:657:9, col:17>
|     `-UnaryOperator 0x55bf57e4f4b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bf57e4f4a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bf57e27528 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55bf57e27498 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55bf57e4f5e8 <col:44, line:663:5>
|   |-BinaryOperator 0x55bf57e4f590 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bf57e4f4f8 <col:9> 'bool' lvalue ParmVar 0x55bf57e27498 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bf57e4f578 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bf57e4f548 <col:13> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|   |     `-ImplicitCastExpr 0x55bf57e4f528 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55bf57e4f518 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55bf57e4f5d8 <line:662:9, col:17>
|     `-UnaryOperator 0x55bf57e4f5c0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bf57e4f5b0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55bf57e275f0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55bf57e276b8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55bf57e27780 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55bf57e27848 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55bf57e27b58 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55bf57e278e8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bf57e27ab8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55bf57e279c8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4f9a0 <col:19, line:706:5>
|     `-IfStmt 0x55bf57e4f978 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55bf57e4f6e8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55bf57e4f8a8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55bf57e4f878 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55bf57e4f838 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55bf57e4f740 <col:42> '<bound member function type>' ->simple_slot 0x55bf57e48b40
|       |     | `-CXXThisExpr 0x55bf57e4f730 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55bf57e4f7d8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55bf57e4f790 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55bf57bb4ba8
|       |     | `-DeclRefExpr 0x55bf57e4f770 <col:55> 'T' lvalue ParmVar 0x55bf57e279c8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55bf57e4f818 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55bf57e4f968 <line:705:13, col:34>
|         `-CallExpr 0x55bf57e4f940 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55bf57e4f8c8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55bf57e4f920 <col:33> 'T' lvalue ParmVar 0x55bf57e279c8 'x' 'T &'
|-FunctionTemplateDecl 0x55bf57e27e28 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55bf57e27bb8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bf57e27d88 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55bf57e27c98 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55bf57e4fd80 <col:31, line:717:5>
|     |-DeclStmt 0x55bf57e4fae0 <line:713:9, col:23>
|     | `-VarDecl 0x55bf57e4f9c8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55bf57e4fab8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55bf57e4fa40 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55bf57e4fa98 <col:21> 'T' lvalue ParmVar 0x55bf57e27c98 'x' 'T &'
|     |-IfStmt 0x55bf57e4fd30 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55bf57e4fbd8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55bf57e4fd10 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55bf57e4fcb0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55bf57e4fc40 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|     |   | `-DeclRefExpr 0x55bf57e4fc20 <col:14> 'T *' lvalue Var 0x55bf57e4f9c8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55bf57e4fcf0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55bf57e4fd68 <line:716:9, col:16>
|       `-DeclRefExpr 0x55bf57e4fd48 <col:16> 'T *' lvalue Var 0x55bf57e4f9c8 's' 'T *'
|-FunctionTemplateDecl 0x55bf57e28238 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55bf57e27e88 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bf57e27f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bf57e28198 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55bf57e27fe8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55bf57e28088 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55bf57e50090 <col:37, line:726:5>
|     |-IfStmt 0x55bf57e50020 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55bf57e50040 <line:723:13, col:26>
|     | | `-VarDecl 0x55bf57e4fde8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55bf57e4fed8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55bf57e4fe60 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55bf57e4feb8 <col:25> 'T' lvalue ParmVar 0x55bf57e27fe8 'x' 'T &'
|     | |-DeclRefExpr 0x55bf57e4ff00 <col:16> 'T *' lvalue Var 0x55bf57e4fde8 's' 'T *'
|     | `-BinaryOperator 0x55bf57e50000 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55bf57e4ffb0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55bf57e4ff40 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|     |   | `-DeclRefExpr 0x55bf57e4ff20 <col:14> 'T *' lvalue Var 0x55bf57e4fde8 's' 'T *'
|     |   `-DeclRefExpr 0x55bf57e4ffe0 <col:18> 'const V' lvalue ParmVar 0x55bf57e28088 'value' 'const V &'
|     `-ReturnStmt 0x55bf57e50080 <line:725:9, col:17>
|       `-UnaryOperator 0x55bf57e50068 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bf57e50058 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bf57e28638 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55bf57e282a0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bf57e28598 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55bf57e28350 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e283d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e28478 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55bf57e50eb0 <col:65, line:737:5>
|     |-DeclStmt 0x55bf57e50128 <line:732:9, col:26>
|     | `-VarDecl 0x55bf57e500c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bf57e50e78 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55bf57e50e98 <line:733:13, col:58>
|       | `-VarDecl 0x55bf57e50150 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bf57e50330 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bf57e50300 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bf57e502e8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bf57e502c8 <col:26, col:58> 'String' (CXXTemporary 0x55bf57e502c8)
|       |           `-CXXMemberCallExpr 0x55bf57e50258 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bf57e501c8 <col:26> '<bound member function type>' ->find 0x55bf57e48158
|       |             | `-CXXThisExpr 0x55bf57e501b8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bf57e50290 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bf57e501f8 <col:31> 'const char *' lvalue ParmVar 0x55bf57e28350 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bf57e502a8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bf57e50218 <col:40> 'int' lvalue ParmVar 0x55bf57e283d0 'flags' 'int'
|       |             `-DeclRefExpr 0x55bf57e50238 <col:47> 'Args::Slot *' lvalue Var 0x55bf57e500c0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bf57e503e8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bf57e503d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bf57e503b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bf57e50380 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|       |       `-ImplicitCastExpr 0x55bf57e50368 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bf57e50348 <col:20> 'String' lvalue Var 0x55bf57e50150 'str' 'String'
|       `-CompoundStmt 0x55bf57e50e58 <col:61, line:736:9>
|         |-DeclStmt 0x55bf57e508a0 <line:734:13, col:76>
|         | `-VarDecl 0x55bf57e50438 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55bf57e50870 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bf57e507e0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bf57e50828 <col:60> 'T' lvalue ParmVar 0x55bf57e28478 'variable' 'T &'
|         |     `-UnaryOperator 0x55bf57e50858 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bf57e50848 <col:71> 'Args *' this
|         `-CallExpr 0x55bf57e50e28 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55bf57e508c8 <col:13> '<bound member function type>' ->postparse 0x55bf57e48368
|           | `-CXXThisExpr 0x55bf57e508b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55bf57e50de8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55bf57e508f8 <col:23> 'T *' lvalue Var 0x55bf57e50438 's' 'T *'
|           | `-CallExpr 0x55bf57e50da8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55bf57e50b80 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55bf57e50c80 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55bf57e50ca0 <col:86> 'String' lvalue Var 0x55bf57e50150 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55bf57e50d50 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bf57e50ce0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|           |   | `-DeclRefExpr 0x55bf57e50cc0 <col:92> 'T *' lvalue Var 0x55bf57e50438 's' 'T *'
|           |   `-UnaryOperator 0x55bf57e50d90 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55bf57e50d80 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55bf57e50e08 <col:103> 'Args::Slot *' lvalue Var 0x55bf57e500c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bf57e28b88 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55bf57e286a8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bf57e28728 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bf57e28ae8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55bf57e287e8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e28868 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e28908 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55bf57e289a8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55bf57e51d50 <col:88, line:745:5>
|     |-DeclStmt 0x55bf57e50f48 <line:741:9, col:26>
|     | `-VarDecl 0x55bf57e50ee0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bf57e51168 <line:742:9, col:55>
|     | `-VarDecl 0x55bf57e50f70 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55bf57e51150 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55bf57e51120 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55bf57e51108 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55bf57e510e8 <col:22, col:54> 'String' (CXXTemporary 0x55bf57e510e8)
|     |           `-CXXMemberCallExpr 0x55bf57e51078 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55bf57e50fe8 <col:22> '<bound member function type>' ->find 0x55bf57e48158
|     |             | `-CXXThisExpr 0x55bf57e50fd8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55bf57e510b0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bf57e51018 <col:27> 'const char *' lvalue ParmVar 0x55bf57e287e8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55bf57e510c8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bf57e51038 <col:36> 'int' lvalue ParmVar 0x55bf57e28868 'flags' 'int'
|     |             `-DeclRefExpr 0x55bf57e51058 <col:43> 'Args::Slot *' lvalue Var 0x55bf57e50ee0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55bf57e51540 <line:743:9, col:72>
|     | `-VarDecl 0x55bf57e511b8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55bf57e51510 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55bf57e51480 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55bf57e514c8 <col:56> 'T' lvalue ParmVar 0x55bf57e28908 'variable' 'T &'
|     |     `-UnaryOperator 0x55bf57e514f8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55bf57e514e8 <col:67> 'Args *' this
|     `-CallExpr 0x55bf57e51d20 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55bf57e51568 <col:9> '<bound member function type>' ->postparse 0x55bf57e48368
|       | `-CXXThisExpr 0x55bf57e51558 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55bf57e51ce0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55bf57e51598 <col:19> 'T *' lvalue Var 0x55bf57e511b8 's' 'T *'
|       | `-ParenExpr 0x55bf57e51cc0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55bf57e51c90 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55bf57e51c78 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55bf57e51c60 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55bf57e51c40 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55bf57e51c10 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|       |     |       `-ImplicitCastExpr 0x55bf57e51bf8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55bf57e515b8 <col:25> 'String' lvalue Var 0x55bf57e50f70 'str' 'String'
|       |     |-CallExpr 0x55bf57e51a68 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55bf57e51840 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55bf57e51940 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55bf57e51960 <col:89> 'String' lvalue Var 0x55bf57e50f70 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55bf57e51a10 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55bf57e519a0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|       |     | | `-DeclRefExpr 0x55bf57e51980 <col:95> 'T *' lvalue Var 0x55bf57e511b8 's' 'T *'
|       |     | `-UnaryOperator 0x55bf57e51a50 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55bf57e51a40 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55bf57e51bd8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55bf57e51bb8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55bf57e51b88 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55bf57e51b38 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55bf57e51ac8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|       |         | | `-DeclRefExpr 0x55bf57e51aa8 <col:109> 'T *' lvalue Var 0x55bf57e511b8 's' 'T *'
|       |         | `-DeclRefExpr 0x55bf57e51b68 <col:113> 'const V' lvalue ParmVar 0x55bf57e289a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55bf57e51ba8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55bf57e51d00 <col:128> 'Args::Slot *' lvalue Var 0x55bf57e50ee0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bf57e290b8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55bf57e28c00 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e28c78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e29018 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bf57e28d38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e28db8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e28e30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e28ed8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55bf57e52948 <col:75, line:754:5>
|     |-DeclStmt 0x55bf57e51df8 <line:749:9, col:26>
|     | `-VarDecl 0x55bf57e51d90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bf57e52910 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55bf57e52930 <line:750:13, col:58>
|       | `-VarDecl 0x55bf57e51e20 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bf57e52000 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bf57e51fd0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bf57e51fb8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bf57e51f98 <col:26, col:58> 'String' (CXXTemporary 0x55bf57e51f98)
|       |           `-CXXMemberCallExpr 0x55bf57e51f28 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bf57e51e98 <col:26> '<bound member function type>' ->find 0x55bf57e48158
|       |             | `-CXXThisExpr 0x55bf57e51e88 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bf57e51f60 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bf57e51ec8 <col:31> 'const char *' lvalue ParmVar 0x55bf57e28d38 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bf57e51f78 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bf57e51ee8 <col:40> 'int' lvalue ParmVar 0x55bf57e28db8 'flags' 'int'
|       |             `-DeclRefExpr 0x55bf57e51f08 <col:47> 'Args::Slot *' lvalue Var 0x55bf57e51d90 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bf57e520b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bf57e520a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bf57e52080 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bf57e52050 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|       |       `-ImplicitCastExpr 0x55bf57e52038 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bf57e52018 <col:20> 'String' lvalue Var 0x55bf57e51e20 'str' 'String'
|       `-CompoundStmt 0x55bf57e528f0 <col:61, line:753:9>
|         |-DeclStmt 0x55bf57e52490 <line:751:13, col:63>
|         | `-VarDecl 0x55bf57e52108 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55bf57e52460 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bf57e523d0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bf57e52418 <col:47> 'T' lvalue ParmVar 0x55bf57e28ed8 'variable' 'T &'
|         |     `-UnaryOperator 0x55bf57e52448 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bf57e52438 <col:58> 'Args *' this
|         `-CallExpr 0x55bf57e528c0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55bf57e524b8 <col:13> '<bound member function type>' ->postparse 0x55bf57e48368
|           | `-CXXThisExpr 0x55bf57e524a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55bf57e52880 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55bf57e524e8 <col:23> 'T *' lvalue Var 0x55bf57e52108 's' 'T *'
|           | `-CallExpr 0x55bf57e52840 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55bf57e526d0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55bf57e52718 <col:56> 'P' lvalue ParmVar 0x55bf57e28e30 'parser' 'P'
|           |   |-DeclRefExpr 0x55bf57e52738 <col:64> 'String' lvalue Var 0x55bf57e51e20 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55bf57e527e8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bf57e52778 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|           |   | `-DeclRefExpr 0x55bf57e52758 <col:70> 'T *' lvalue Var 0x55bf57e52108 's' 'T *'
|           |   `-UnaryOperator 0x55bf57e52828 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55bf57e52818 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55bf57e528a0 <col:81> 'Args::Slot *' lvalue Var 0x55bf57e51d90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bf57e29718 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55bf57e29130 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bf57e291a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55bf57e29228 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bf57e29678 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55bf57e292f0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e29370 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e293e8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e29488 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55bf57e29528 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55bf57e55a78 <col:98, line:762:5>
|     |-DeclStmt 0x55bf57e529e0 <line:758:9, col:26>
|     | `-VarDecl 0x55bf57e52978 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bf57e52c00 <line:759:9, col:55>
|     | `-VarDecl 0x55bf57e52a08 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55bf57e52be8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55bf57e52bb8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55bf57e52ba0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55bf57e52b80 <col:22, col:54> 'String' (CXXTemporary 0x55bf57e52b80)
|     |           `-CXXMemberCallExpr 0x55bf57e52b10 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55bf57e52a80 <col:22> '<bound member function type>' ->find 0x55bf57e48158
|     |             | `-CXXThisExpr 0x55bf57e52a70 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55bf57e52b48 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bf57e52ab0 <col:27> 'const char *' lvalue ParmVar 0x55bf57e292f0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55bf57e52b60 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bf57e52ad0 <col:36> 'int' lvalue ParmVar 0x55bf57e29370 'flags' 'int'
|     |             `-DeclRefExpr 0x55bf57e52af0 <col:43> 'Args::Slot *' lvalue Var 0x55bf57e52978 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55bf57e53020 <line:760:9, col:59>
|     | `-VarDecl 0x55bf57e52c58 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55bf57e52ff0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55bf57e52f60 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55bf57e52fa8 <col:43> 'T' lvalue ParmVar 0x55bf57e29488 'variable' 'T &'
|     |     `-UnaryOperator 0x55bf57e52fd8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55bf57e52fc8 <col:54> 'Args *' this
|     `-CallExpr 0x55bf57e55a48 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55bf57e53048 <col:9> '<bound member function type>' ->postparse 0x55bf57e48368
|       | `-CXXThisExpr 0x55bf57e53038 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55bf57e55a08 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55bf57e53078 <col:19> 'T *' lvalue Var 0x55bf57e52c58 's' 'T *'
|       | `-ParenExpr 0x55bf57e559e8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55bf57e559b8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55bf57e559a0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55bf57e55988 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55bf57e55968 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55bf57e55938 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|       |     |       `-ImplicitCastExpr 0x55bf57e55920 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55bf57e53098 <col:25> 'String' lvalue Var 0x55bf57e52a08 'str' 'String'
|       |     |-CallExpr 0x55bf57e533f0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55bf57e53280 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55bf57e532c8 <col:59> 'P' lvalue ParmVar 0x55bf57e293e8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55bf57e532e8 <col:67> 'String' lvalue Var 0x55bf57e52a08 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55bf57e53398 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55bf57e53328 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|       |     | | `-DeclRefExpr 0x55bf57e53308 <col:73> 'T *' lvalue Var 0x55bf57e52c58 's' 'T *'
|       |     | `-UnaryOperator 0x55bf57e533d8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55bf57e533c8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55bf57e55900 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55bf57e558e0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55bf57e558b0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55bf57e55860 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55bf57e557f0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|       |         | | `-DeclRefExpr 0x55bf57e557d0 <col:87> 'T *' lvalue Var 0x55bf57e52c58 's' 'T *'
|       |         | `-DeclRefExpr 0x55bf57e55890 <col:91> 'const V' lvalue ParmVar 0x55bf57e29528 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55bf57e558d0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55bf57e55a28 <col:106> 'Args::Slot *' lvalue Var 0x55bf57e52978 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bf57e29d88 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55bf57e29798 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e29818 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bf57e29898 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bf57e29ce8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bf57e29960 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e299e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e29a58 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e29af8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55bf57e29b98 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55bf57e56a58 <col:60, line:773:5>
|     |-DeclStmt 0x55bf57e55b20 <line:767:9, col:26>
|     | `-VarDecl 0x55bf57e55ab8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bf57e56a20 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55bf57e56a40 <line:768:13, col:58>
|       | `-VarDecl 0x55bf57e55b48 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bf57e55d28 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bf57e55cf8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bf57e55ce0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bf57e55cc0 <col:26, col:58> 'String' (CXXTemporary 0x55bf57e55cc0)
|       |           `-CXXMemberCallExpr 0x55bf57e55c50 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bf57e55bc0 <col:26> '<bound member function type>' ->find 0x55bf57e48158
|       |             | `-CXXThisExpr 0x55bf57e55bb0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bf57e55c88 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bf57e55bf0 <col:31> 'const char *' lvalue ParmVar 0x55bf57e29960 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bf57e55ca0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bf57e55c10 <col:40> 'int' lvalue ParmVar 0x55bf57e299e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55bf57e55c30 <col:47> 'Args::Slot *' lvalue Var 0x55bf57e55ab8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bf57e55de0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bf57e55dc8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bf57e55da8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bf57e55d78 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|       |       `-ImplicitCastExpr 0x55bf57e55d60 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bf57e55d40 <col:20> 'String' lvalue Var 0x55bf57e55b48 'str' 'String'
|       `-CompoundStmt 0x55bf57e569f8 <col:61, line:772:9>
|         |-DeclStmt 0x55bf57e56120 <line:769:13, col:66>
|         | `-VarDecl 0x55bf57e55e38 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55bf57e560f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bf57e56060 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bf57e560a8 <col:49> 'T1' lvalue ParmVar 0x55bf57e29af8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55bf57e560d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bf57e560c8 <col:61> 'Args *' this
|         |-DeclStmt 0x55bf57e56490 <line:770:13, col:66>
|         | `-VarDecl 0x55bf57e561a8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55bf57e56460 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bf57e563d0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bf57e56418 <col:49> 'T2' lvalue ParmVar 0x55bf57e29b98 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55bf57e56448 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bf57e56438 <col:61> 'Args *' this
|         `-CallExpr 0x55bf57e569c8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55bf57e564b8 <col:13> '<bound member function type>' ->postparse 0x55bf57e48368
|           | `-CXXThisExpr 0x55bf57e564a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55bf57e56988 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55bf57e56528 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55bf57e564e8 <col:23> 'T1 *' lvalue Var 0x55bf57e55e38 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55bf57e56508 <col:29> 'T2 *' lvalue Var 0x55bf57e561a8 's2' 'T2 *'
|           | `-CallExpr 0x55bf57e56940 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55bf57e56710 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55bf57e56758 <col:63> 'P' lvalue ParmVar 0x55bf57e29a58 'parser' 'P'
|           |   |-DeclRefExpr 0x55bf57e56778 <col:71> 'String' lvalue Var 0x55bf57e55b48 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55bf57e56828 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bf57e567b8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|           |   | `-DeclRefExpr 0x55bf57e56798 <col:77> 'T1 *' lvalue Var 0x55bf57e55e38 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55bf57e568e8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bf57e56878 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|           |   | `-DeclRefExpr 0x55bf57e56858 <col:82> 'T2 *' lvalue Var 0x55bf57e561a8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55bf57e56928 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55bf57e56918 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55bf57e569a8 <col:94> 'Args::Slot *' lvalue Var 0x55bf57e55ab8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bf57e32ae8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55bf57e32780 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bf57e32a48 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55bf57e32830 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e328b0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e32928 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55bf57e56f70 <col:67, line:780:5>
|     |-DeclStmt 0x55bf57e56af0 <line:777:9, col:26>
|     | `-VarDecl 0x55bf57e56a88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bf57e56f38 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55bf57e56f58 <line:778:13, col:58>
|       | `-VarDecl 0x55bf57e56b18 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bf57e56cf8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bf57e56cc8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bf57e56cb0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bf57e56c90 <col:26, col:58> 'String' (CXXTemporary 0x55bf57e56c90)
|       |           `-CXXMemberCallExpr 0x55bf57e56c20 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bf57e56b90 <col:26> '<bound member function type>' ->find 0x55bf57e48158
|       |             | `-CXXThisExpr 0x55bf57e56b80 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bf57e56c58 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bf57e56bc0 <col:31> 'const char *' lvalue ParmVar 0x55bf57e32830 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bf57e56c70 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bf57e56be0 <col:40> 'int' lvalue ParmVar 0x55bf57e328b0 'flags' 'int'
|       |             `-DeclRefExpr 0x55bf57e56c00 <col:47> 'Args::Slot *' lvalue Var 0x55bf57e56a88 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bf57e56db0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bf57e56d98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bf57e56d78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bf57e56d48 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|       |       `-ImplicitCastExpr 0x55bf57e56d30 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bf57e56d10 <col:20> 'String' lvalue Var 0x55bf57e56b18 'str' 'String'
|       `-CallExpr 0x55bf57e56f08 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55bf57e56dd8 <col:13> '<bound member function type>' ->postparse 0x55bf57e48368
|         | `-CXXThisExpr 0x55bf57e56dc8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55bf57e56eb8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55bf57e56e28 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55bf57e56e08 <col:23> 'P' lvalue ParmVar 0x55bf57e32928 'parser' 'P'
|         | |-DeclRefExpr 0x55bf57e56e70 <col:36> 'String' lvalue Var 0x55bf57e56b18 'str' 'String'
|         | `-UnaryOperator 0x55bf57e56ea0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55bf57e56e90 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55bf57e56ee8 <col:49> 'Args::Slot *' lvalue Var 0x55bf57e56a88 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bf57e32e88 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55bf57e32b58 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bf57e32de8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55bf57e32c10 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e32c90 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e32d08 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55bf57e578e0 <col:71, line:792:5>
|     |-DeclStmt 0x55bf57e57008 <line:784:9, col:26>
|     | `-VarDecl 0x55bf57e56fa0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bf57e570d8 <line:785:9, col:29>
|     | `-VarDecl 0x55bf57e57038 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55bf57e570c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55bf57e570a0 <col:28> 'int' 1
|     |-WhileStmt 0x55bf57e57790 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55bf57e577b0 <line:786:16, col:61>
|     | | `-VarDecl 0x55bf57e57100 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55bf57e572e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55bf57e572b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55bf57e57298 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55bf57e57278 <col:29, col:61> 'String' (CXXTemporary 0x55bf57e57278)
|     | |           `-CXXMemberCallExpr 0x55bf57e57208 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55bf57e57178 <col:29> '<bound member function type>' ->find 0x55bf57e48158
|     | |             | `-CXXThisExpr 0x55bf57e57168 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55bf57e57240 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bf57e571a8 <col:34> 'const char *' lvalue ParmVar 0x55bf57e32c10 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55bf57e57258 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bf57e571c8 <col:43> 'int' lvalue ParmVar 0x55bf57e32c90 'flags' 'int'
|     | |             `-DeclRefExpr 0x55bf57e571e8 <col:50> 'Args::Slot *' lvalue Var 0x55bf57e56fa0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55bf57e57398 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bf57e57380 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bf57e57360 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bf57e57330 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|     | |       `-ImplicitCastExpr 0x55bf57e57318 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55bf57e572f8 <col:23> 'String' lvalue Var 0x55bf57e57100 'str' 'String'
|     | `-CompoundStmt 0x55bf57e57768 <col:64, line:790:9>
|     |   |-CallExpr 0x55bf57e574f0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55bf57e573c0 <col:13> '<bound member function type>' ->postparse 0x55bf57e48368
|     |   | | `-CXXThisExpr 0x55bf57e573b0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55bf57e574a0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55bf57e57410 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55bf57e573f0 <col:23> 'P' lvalue ParmVar 0x55bf57e32d08 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55bf57e57458 <col:36> 'String' lvalue Var 0x55bf57e57100 'str' 'String'
|     |   | | `-UnaryOperator 0x55bf57e57488 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55bf57e57478 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55bf57e574d0 <col:49> 'Args::Slot *' lvalue Var 0x55bf57e56fa0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55bf57e57688 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55bf57e57520 <col:13> 'int' lvalue Var 0x55bf57e57038 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55bf57e57670 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55bf57e57650 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55bf57e575b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55bf57e57598 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55bf57e57580 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55bf57e57540 <col:28> 'int' lvalue Var 0x55bf57e57038 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55bf57e57560 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55bf57e57638 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55bf57e57608 <col:49> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|     |   |         `-ImplicitCastExpr 0x55bf57e575e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55bf57e575d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55bf57e57738 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55bf57e576a8 <col:13> 'int' lvalue ParmVar 0x55bf57e32c90 'flags' 'int'
|     |     `-UnaryOperator 0x55bf57e57720 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55bf57e57708 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bf57e576e8 <col:23> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55bf57e578c0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55bf57e577f8 <col:9> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|       | `-ImplicitCastExpr 0x55bf57e577d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55bf57e577c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55bf57e578a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55bf57e57880 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55bf57e57868 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55bf57e57828 <col:25> 'int' lvalue Var 0x55bf57e57038 'read_status' 'int'
|           `-IntegerLiteral 0x55bf57e57848 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55bf57e33368 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55bf57e32ef8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e32f78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e332c8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bf57e33038 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e330b8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e33130 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e331d8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55bf57e58870 <col:84, line:805:5>
|     |-DeclStmt 0x55bf57e57988 <line:796:9, col:26>
|     | `-VarDecl 0x55bf57e57920 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bf57e57a58 <line:797:9, col:29>
|     | `-VarDecl 0x55bf57e579b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55bf57e57a40 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55bf57e57a20 <col:28> 'int' 1
|     |-DeclStmt 0x55bf57e57d90 <line:798:9, col:71>
|     | `-VarDecl 0x55bf57e57aa8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55bf57e57d60 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55bf57e57cd0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55bf57e57d18 <col:55> 'T' lvalue ParmVar 0x55bf57e331d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55bf57e57d48 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55bf57e57d38 <col:66> 'Args *' this
|     |-WhileStmt 0x55bf57e58720 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55bf57e58740 <line:799:16, col:61>
|     | | `-VarDecl 0x55bf57e57db8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55bf57e57f98 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55bf57e57f68 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55bf57e57f50 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55bf57e57f30 <col:29, col:61> 'String' (CXXTemporary 0x55bf57e57f30)
|     | |           `-CXXMemberCallExpr 0x55bf57e57ec0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55bf57e57e30 <col:29> '<bound member function type>' ->find 0x55bf57e48158
|     | |             | `-CXXThisExpr 0x55bf57e57e20 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55bf57e57ef8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bf57e57e60 <col:34> 'const char *' lvalue ParmVar 0x55bf57e33038 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55bf57e57f10 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bf57e57e80 <col:43> 'int' lvalue ParmVar 0x55bf57e330b8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55bf57e57ea0 <col:50> 'Args::Slot *' lvalue Var 0x55bf57e57920 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55bf57e58050 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bf57e58038 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bf57e58018 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bf57e57fe8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|     | |       `-ImplicitCastExpr 0x55bf57e57fd0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55bf57e57fb0 <col:23> 'String' lvalue Var 0x55bf57e57db8 'str' 'String'
|     | `-CompoundStmt 0x55bf57e586f8 <col:64, line:803:9>
|     |   |-CallExpr 0x55bf57e58480 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55bf57e58078 <col:13> '<bound member function type>' ->postparse 0x55bf57e48368
|     |   | | `-CXXThisExpr 0x55bf57e58068 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55bf57e58440 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55bf57e580a8 <col:23> 'T *' lvalue Var 0x55bf57e57aa8 's' 'T *'
|     |   | | `-CallExpr 0x55bf57e58400 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55bf57e58290 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55bf57e582d8 <col:56> 'P' lvalue ParmVar 0x55bf57e33130 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55bf57e582f8 <col:64> 'String' lvalue Var 0x55bf57e57db8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55bf57e583a8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55bf57e58338 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|     |   | |   | `-DeclRefExpr 0x55bf57e58318 <col:70> 'T *' lvalue Var 0x55bf57e57aa8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55bf57e583e8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55bf57e583d8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55bf57e58460 <col:81> 'Args::Slot *' lvalue Var 0x55bf57e57920 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55bf57e58618 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55bf57e584b0 <col:13> 'int' lvalue Var 0x55bf57e579b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55bf57e58600 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55bf57e585e0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55bf57e58548 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55bf57e58528 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55bf57e58510 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55bf57e584d0 <col:28> 'int' lvalue Var 0x55bf57e579b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55bf57e584f0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55bf57e585c8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55bf57e58598 <col:49> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|     |   |         `-ImplicitCastExpr 0x55bf57e58578 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55bf57e58568 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55bf57e586c8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55bf57e58638 <col:13> 'int' lvalue ParmVar 0x55bf57e330b8 'flags' 'int'
|     |     `-UnaryOperator 0x55bf57e586b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55bf57e58698 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bf57e58678 <col:23> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55bf57e58850 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55bf57e58788 <col:9> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|       | `-ImplicitCastExpr 0x55bf57e58768 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55bf57e58758 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55bf57e58830 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55bf57e58810 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55bf57e587f8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55bf57e587b8 <col:25> 'int' lvalue Var 0x55bf57e579b8 'read_status' 'int'
|           `-IntegerLiteral 0x55bf57e587d8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55bf57e33948 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55bf57e333e0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bf57e33458 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bf57e338a8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55bf57e33518 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bf57e33598 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55bf57e33610 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55bf57e33760 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55bf57e59678 <col:87, line:821:5>
|     |-DeclStmt 0x55bf57e58920 <line:809:9, col:26>
|     | `-VarDecl 0x55bf57e588b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bf57e589f0 <line:810:9, col:29>
|     | `-VarDecl 0x55bf57e58950 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55bf57e589d8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55bf57e589b8 <col:28> 'int' 1
|     |-DeclStmt 0x55bf57e58c38 <line:811:9, col:38>
|     | `-VarDecl 0x55bf57e58b20 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55bf57e58c10 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55bf57e58b98 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55bf57e58bf0 <col:29> 'Vector<T>' lvalue ParmVar 0x55bf57e33760 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55bf57e59528 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55bf57e59548 <line:812:16, col:61>
|     | | `-VarDecl 0x55bf57e58c60 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55bf57e58e40 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55bf57e58e10 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55bf57e58df8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55bf57e58dd8 <col:29, col:61> 'String' (CXXTemporary 0x55bf57e58dd8)
|     | |           `-CXXMemberCallExpr 0x55bf57e58d68 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55bf57e58cd8 <col:29> '<bound member function type>' ->find 0x55bf57e48158
|     | |             | `-CXXThisExpr 0x55bf57e58cc8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55bf57e58da0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bf57e58d08 <col:34> 'const char *' lvalue ParmVar 0x55bf57e33518 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55bf57e58db8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bf57e58d28 <col:43> 'int' lvalue ParmVar 0x55bf57e33598 'flags' 'int'
|     | |             `-DeclRefExpr 0x55bf57e58d48 <col:50> 'Args::Slot *' lvalue Var 0x55bf57e588b8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55bf57e58ef8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bf57e58ee0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bf57e58ec0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bf57e58e90 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55bf57b77b78
|     | |       `-ImplicitCastExpr 0x55bf57e58e78 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55bf57e58e58 <col:23> 'String' lvalue Var 0x55bf57e58c60 'str' 'String'
|     | `-CompoundStmt 0x55bf57e594f0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55bf57e58fb8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55bf57e58f20 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55bf57e58f98 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55bf57e59138 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55bf57e58fe0 <col:13> '<bound member function type>' ->postparse 0x55bf57e48368
|     |   | | `-CXXThisExpr 0x55bf57e58fd0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55bf57e590e0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55bf57e59030 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55bf57e59010 <col:23> 'P' lvalue ParmVar 0x55bf57e33610 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55bf57e59078 <col:36> 'String' lvalue Var 0x55bf57e58c60 'str' 'String'
|     |   | | |-DeclRefExpr 0x55bf57e59098 <col:41> 'T' lvalue Var 0x55bf57e58f20 'sx' 'T'
|     |   | | `-UnaryOperator 0x55bf57e590c8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55bf57e590b8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55bf57e59118 <col:53> 'Args::Slot *' lvalue Var 0x55bf57e588b8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55bf57e59290 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55bf57e591c8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55bf57e59198 <col:17> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|     |   | |   `-ImplicitCastExpr 0x55bf57e59178 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55bf57e59168 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55bf57e59268 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55bf57e59200 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55bf57e591e0 <col:17> 'Vector<T> *' lvalue Var 0x55bf57e58b20 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55bf57e59248 <col:30> 'T' lvalue Var 0x55bf57e58f20 'sx' 'T'
|     |   |-BinaryOperator 0x55bf57e59410 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55bf57e592a8 <col:13> 'int' lvalue Var 0x55bf57e58950 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55bf57e593f8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55bf57e593d8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55bf57e59340 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55bf57e59320 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55bf57e59308 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55bf57e592c8 <col:28> 'int' lvalue Var 0x55bf57e58950 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55bf57e592e8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55bf57e593c0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55bf57e59390 <col:49> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|     |   |         `-ImplicitCastExpr 0x55bf57e59370 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55bf57e59360 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55bf57e594c0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55bf57e59430 <col:13> 'int' lvalue ParmVar 0x55bf57e33598 'flags' 'int'
|     |     `-UnaryOperator 0x55bf57e594a8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55bf57e59490 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bf57e59470 <col:23> 'const int' lvalue Var 0x55bf57e177d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55bf57e59658 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55bf57e59590 <col:9> 'bool' lvalue ->_read_status 0x55bf57d2a8a0
|       | `-ImplicitCastExpr 0x55bf57e59570 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55bf57e59560 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55bf57e59638 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55bf57e59618 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55bf57e59600 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55bf57e595c0 <col:25> 'int' lvalue Var 0x55bf57e58950 'read_status' 'int'
|           `-IntegerLiteral 0x55bf57e595e0 <col:40> 'int' 1
|-AccessSpecDecl 0x55bf57e339c0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55bf57e339e8 prev 0x55bf57e15ae0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55bf57e33ae0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55bf57e33bd0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55bf57e596b0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55bf57e33cc0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55bf57e596c0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55bf57e33dc0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55bf57e33e70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55bf57e33f18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55bf57e33f18
| | `-ParmVarDecl 0x55bf57e34028 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55bf57e347e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55bf57e347e8
|   `-ParmVarDecl 0x55bf57e348f8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55bf57e34098 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55bf57e341f8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55bf57e343f0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55bf57e342a0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55bf57e34318 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55bf57e598a0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55bf57e346a8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55bf57e59710 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55bf57e596d0 <col:20> 'void *' lvalue ParmVar 0x55bf57e342a0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55bf57e34710 '_slot' 'char *'
| | | `-CXXNewExpr 0x55bf57e59798 <col:32, col:45> 'char *' array Function 0x55bf5799a3c8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55bf57e59780 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55bf57e59750 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55bf57e34318 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55bf57e34770 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55bf57e59860 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55bf57e59820 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55bf57e34318 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55bf57e59920 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55bf57e344f0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55bf57e33cc0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55bf57e599a8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55bf57e59988 <line:840:13, col:22> 'void' array Function 0x55bf5799a728 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55bf57e59970 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55bf57e59940 <col:22> 'char *' lvalue ->_slot 0x55bf57e34710
| |         `-CXXThisExpr 0x55bf57e59930 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55bf57e345f0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55bf57e33dc0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55bf57e59b98 <col:22, line:844:9>
| |   `-CallExpr 0x55bf57e59b00 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55bf57e59ae8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55bf57e59ac8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55bf57aa63a8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55bf57e59b38 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55bf57e59a18 <col:20> 'void *' lvalue ->_ptr 0x55bf57e346a8
| |     |   `-CXXThisExpr 0x55bf57e59a08 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55bf57e59b68 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55bf57e59b50 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55bf57e59a58 <col:26> 'char *' lvalue ->_slot 0x55bf57e34710
| |     |     `-CXXThisExpr 0x55bf57e59a48 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55bf57e59b80 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55bf57e59a98 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55bf57e34770
| |         `-CXXThisExpr 0x55bf57e59a88 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55bf57e346a8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55bf57e34710 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55bf57e34770 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55bf57e34968 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55bf57e34968
| | `-ParmVarDecl 0x55bf57e34a78 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55bf57e34b18 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55bf57e34b18
|   `-ParmVarDecl 0x55bf57e34c28 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55bf57e34dc8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55bf57e34c98 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55bf57e34d38 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55bf57e35060 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55bf57e35258 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55bf57e35128 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55bf57e353d8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55bf57e59bd0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55bf57e59bb0 <col:20> 'T *' lvalue ParmVar 0x55bf57e35128 'ptr' 'T *'
|   | `-CompoundStmt 0x55bf57e59c20 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55bf57e35328 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55bf57e33dc0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55bf57e59dd0 <col:22, line:857:9>
|   |   `-CallExpr 0x55bf57e59da0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55bf57e59c30 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55bf57b5ecf8 0x55bf57b08e08
|   |     |-CXXOperatorCallExpr 0x55bf57e59d30 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55bf57e59cc0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bf57d6bca8 0x55bf57d6b8c8 0x55bf57d6b4f8 0x55bf57d6b118 0x55bf57d6ad38 0x55bf57d6a968
|   |     | `-MemberExpr 0x55bf57e59c90 <col:29> 'T *' lvalue ->_ptr 0x55bf57e353d8
|   |     |   `-CXXThisExpr 0x55bf57e59c80 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55bf57e59d70 <col:35> 'T' lvalue ->_slot 0x55bf57e35438
|   |       `-CXXThisExpr 0x55bf57e59d60 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55bf57e353d8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55bf57e35438 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55bf57e354a0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55bf57e355a0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55bf57e355f0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57e35580 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55bf57e35560 <col:31> 'int' 48
|-FieldDecl 0x55bf57e35618 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55bf57e35678 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55bf57e356d8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55bf57e35810 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55bf57e47a00 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55bf57e47a60 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55bf57e47b10 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55bf57e47d38 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55bf57e47c40 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55bf57e47e88 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55bf57e47df8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55bf57e48158 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55bf57e47f48 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55bf57e47fc8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55bf57e48070 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55bf57e48368 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55bf57e48220 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55bf57e48298 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55bf57e48438 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55bf57e48588 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55bf57e484f0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55bf57e48918 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55bf57e48648 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55bf57e486c8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55bf57e48770 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55bf57e48828 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55bf57e48b40 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55bf57e489f0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55bf57e48a68 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55bf57e48e58 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55bf57e48bf0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55bf57e48db8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55bf57e48cc8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57e77368 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57e77488 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x55bf57e77518 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55bf57e77710 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55bf57e77550 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55bf57e775c8 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55bf57e77640 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55bf57e777e0 <col:79> 'const ArgContext' lvalue Var 0x55bf57e59df8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55bf57e77958 <col:91, line:1372:5>
|   `-ReturnStmt 0x55bf57e77948 <line:1371:9, col:39>
|     `-CallExpr 0x55bf57e778f8 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x55bf57e778e0 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bf57e778c0 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55bf57e772b0 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55bf57e77848 <col:24> 'const String' lvalue ParmVar 0x55bf57e77550 'str' 'const String &'
|       |-UnaryOperator 0x55bf57e77888 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55bf57e77868 <col:30> 'String' lvalue ParmVar 0x55bf57e775c8 'result' 'String &'
|       `-ImplicitCastExpr 0x55bf57e77930 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55bf57e778a0 <col:38> 'int' 0
|-CXXConstructorDecl 0x55bf57e8cac0 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bf57e8cbc8 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x55bf57e8cbc8
| `-ParmVarDecl 0x55bf57e8ccd8 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x55bf57e8cd78 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bf57e8ce88 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x55bf57e8d5b0 <col:7>
`-CXXDestructorDecl 0x55bf57e8cf28 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57e63f40 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57e64058 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55bf57e640e8 <col:16, col:22> col:16 public
|-EnumDecl 0x55bf57e64110 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55bf57e64210 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55bf57e64460 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e641f0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55bf57e641d0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55bf57e642a0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55bf57e64478 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e64280 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55bf57e64260 <col:24> 'int' 22
| |-EnumConstantDecl 0x55bf57e64330 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55bf57e64490 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e64310 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55bf57e642f0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55bf57e643c0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55bf57e644a8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57e643a0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55bf57e64380 <col:25> 'int' 95
| `-EnumConstantDecl 0x55bf57e64410 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55bf57e65e20 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bf57e66258 <col:7>
|-CXXConstructorDecl 0x55bf57e65f28 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55bf57e65f28
| `-ParmVarDecl 0x55bf57e66038 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55bf57e660d8 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55bf57e660d8
| `-ParmVarDecl 0x55bf57e661e8 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55bf57e68398 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57e644d8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55bf57e64638 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55bf57e646c8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55bf57e64700 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55bf5799c720 'uint32_t' sugar
|   |-Typedef 0x55bf578b04c8 'uint32_t'
|   `-TypedefType 0x55bf578895a0 '__uint32_t' sugar
|     |-Typedef 0x55bf57889198 '__uint32_t'
|     `-BuiltinType 0x55bf57847620 'unsigned int'
|-CXXConstructorDecl 0x55bf57e64848 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55bf57e64770 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55bf57e65d28 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55bf57e66268 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55bf57e655e0 'base' 'int'
| | `-ImplicitCastExpr 0x55bf57e65dc8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55bf57e65d88 <col:16> 'int' lvalue ParmVar 0x55bf57e64770 'b' 'int'
| `-CompoundStmt 0x55bf57e662d8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55bf57e64d40 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55bf57e64910 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55bf57e64990 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55bf57e64a08 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55bf57e64a88 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55bf57e64b48 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55bf57e64bc8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55bf57e65198 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55bf57e64e10 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55bf57e650f8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55bf57e64eb8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55bf57e64f58 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55bf57e64fd0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55bf57e65d48 <col:82> 'const ArgContext' lvalue Var 0x55bf57e59df8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55bf57e67240 <col:94, line:1067:5>
|     |-DeclStmt 0x55bf57e66468 <line:1054:9, col:64>
|     | `-VarDecl 0x55bf57e662f8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55bf57e66420 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55bf57e66688 <line:1055:9, col:91>
|     | `-VarDecl 0x55bf57e66498 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55bf57e66660 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55bf57e66640 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55bf57e665f0 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55bf57e665d0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55bf57e66578 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55bf57e66528 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55bf57e66558 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55bf57e665b8 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55bf57e66598 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55bf57e66620 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55bf57e667e8 <line:1056:9, col:27>
|     | `-VarDecl 0x55bf57e66780 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55bf57e66c30 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55bf57e66b60 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55bf57e66ae0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55bf57d66b28 0x55bf57bb0108 0x55bf57bafde0 0x55bf57ba15c0 0x55bf57ba1270 0x55bf57ba0b60 0x55bf57b734d0 0x55bf57aff770
|     | | |-CallExpr 0x55bf57e66a20 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55bf57e66810 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55bf57e668c0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55bf57e66890 <col:19, col:23> '<bound member function type>' .begin 0x55bf57b907c8
|     | | | |   `-DeclRefExpr 0x55bf57e66870 <col:19> 'const String' lvalue ParmVar 0x55bf57e64eb8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55bf57e66930 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55bf57e66900 <col:32, col:36> '<bound member function type>' .end 0x55bf57b909e0
|     | | | |   `-DeclRefExpr 0x55bf57e668e0 <col:32> 'const String' lvalue ParmVar 0x55bf57e64eb8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55bf57e66950 <col:43> 'const bool' lvalue Var 0x55bf57e662f8 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55bf57e669b8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55bf57e66998 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55bf57e669e0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55bf57e66780 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55bf57e66a00 <col:73> 'const int' lvalue Var 0x55bf57e66498 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55bf57e66ac0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55bf57e66a90 <col:16, col:20> '<bound member function type>' .end 0x55bf57b909e0
|     | |     `-DeclRefExpr 0x55bf57e66a70 <col:16> 'const String' lvalue ParmVar 0x55bf57e64eb8 'str' 'const String &'
|     | `-BinaryOperator 0x55bf57e66c10 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55bf57e66ba8 <col:13> 'int' lvalue ->status 0x55bf57e65648
|     |   | `-CXXThisExpr 0x55bf57e66b98 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55bf57e66bf8 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55bf57e66bd8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55bf57e642a0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55bf57e66e80 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55bf57e66d68 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55bf57e66d50 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55bf57e66d38 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55bf57e66c58 <col:13> 'int' lvalue ->status 0x55bf57e65648
|     | | |     `-CXXThisExpr 0x55bf57e66c48 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55bf57e66d18 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55bf57e66ce8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55bf57e66c98 <col:23> 'int' lvalue ->status 0x55bf57e65648
|     | |   |   `-CXXThisExpr 0x55bf57e66c88 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55bf57e66d00 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55bf57e66cc8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55bf57e64330 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55bf57e66e60 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55bf57e66e00 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55bf57e66da8 <col:13, col:18> '<bound member function type>' .error 0x55bf57d29eb0
|     |   | | `-DeclRefExpr 0x55bf57e66d88 <col:13> 'const ArgContext' lvalue ParmVar 0x55bf57e64fd0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55bf57e66e28 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55bf57e66dd8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55bf57e66e50 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55bf57e66e40 <col:20> 'bool' false
|     |-DeclStmt 0x55bf57e67058 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55bf57e67000 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55bf57e66f90 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55bf57e671f0 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bf57e67070 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55bf57b33958
|     | |-DeclRefExpr 0x55bf57e670b8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55bf57e66780 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55bf57e67188 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55bf57e67100 <col:64> 'V' lvalue ParmVar 0x55bf57e64f58 'result' 'V &'
|     `-ReturnStmt 0x55bf57e67230 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55bf57e67220 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55bf57e65558 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55bf57e65208 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55bf57e654b8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55bf57e652b8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55bf57e65358 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55bf57e653d0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55bf57e65d68 <col:71> 'const ArgContext' lvalue Var 0x55bf57e59df8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55bf57e679b8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55bf57e67308 <line:1071:9, col:12>
| |   | `-VarDecl 0x55bf57e672a0 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55bf57e67990 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55bf57e67598 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55bf57e67420 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55bf57e673e8 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55bf57e67330 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55bf57e67388 <col:31> 'const String' lvalue ParmVar 0x55bf57e652b8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55bf57e673a8 <col:36> 'V' lvalue Var 0x55bf57e672a0 'x' 'V'
| |     | |   `-DeclRefExpr 0x55bf57e673c8 <col:39> 'const ArgContext' lvalue ParmVar 0x55bf57e653d0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55bf57e67578 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55bf57e67558 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55bf57e67540 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55bf57e67528 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55bf57e67448 <col:17> 'int' lvalue ->status 0x55bf57e65648
| |     |     |     `-CXXThisExpr 0x55bf57e67438 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55bf57e67508 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55bf57e674d8 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55bf57e67488 <col:27> 'int' lvalue ->status 0x55bf57e65648
| |     |       |   `-CXXThisExpr 0x55bf57e67478 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55bf57e674f0 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55bf57e674b8 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55bf57e64330 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55bf57e675c8 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55bf57e675b8 <col:20> 'bool' false
| |     `-IfStmt 0x55bf57e67968 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55bf57e67668 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55bf57e67638 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55bf57e675e8 <col:18> 'int' lvalue ->status 0x55bf57e65648
| |       | |   `-CXXThisExpr 0x55bf57e675d8 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55bf57e67650 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55bf57e67618 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55bf57e64330 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55bf57e678a8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55bf57e67850 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55bf57e67698 <line:1076:13> '<bound member function type>' ->range_error 0x55bf57e65c58
| |       | | | `-CXXThisExpr 0x55bf57e67688 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55bf57e676c8 <col:25> 'const ArgContext' lvalue ParmVar 0x55bf57e653d0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55bf57e677b0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55bf57e67828 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55bf57e67808 <col:43> 'V' lvalue Var 0x55bf57e672a0 'x' 'V'
| |       | `-ReturnStmt 0x55bf57e67898 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55bf57e67888 <col:20> 'bool' false
| |       `-CompoundStmt 0x55bf57e67948 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55bf57e67908 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55bf57e678c8 <col:13> 'V' lvalue ParmVar 0x55bf57e65358 'result' 'V &'
| |         | `-DeclRefExpr 0x55bf57e678e8 <col:22> 'V' lvalue Var 0x55bf57e672a0 'x' 'V'
| |         `-ReturnStmt 0x55bf57e67938 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55bf57e67928 <col:20> 'bool' true
| `-CXXMethodDecl 0x55bf57e8ea78 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55bf57e8e858 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x55bf57e8e928 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x55bf57e8e990 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x55bf57e65d68 <col:71> 'const ArgContext' lvalue Var 0x55bf57e59df8 'blank_args' 'const ArgContext'
|-FieldDecl 0x55bf57e655e0 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55bf57e65648 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55bf57e65698 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55bf57e65950 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55bf57e656d8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55bf57e65758 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55bf57e657d0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55bf57e65850 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55bf57e65c58 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55bf57e65a20 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55bf57e65a98 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55bf57e65b30 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55bf57e68218 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55bf57e68218
| `-ParmVarDecl 0x55bf57e68328 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55bf57e684a8 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55bf57e684a8
| `-ParmVarDecl 0x55bf57e685b8 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55bf57e8e5d8 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57b67a20 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57b67b38 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55bf57b67bc8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55bf57b67c98 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55bf57b67d80 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55bf57b67f98 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55bf57b67e40 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57b68148 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55bf57b68050 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55bf57b68290 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55bf57b68200 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55bf57b683d8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55bf57b68348 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57b68520 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55bf57b68490 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57b685e8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55bf57b68730 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55bf57b686a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55bf57b687f8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55bf57b68940 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55bf57b688b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55bf57b68ab8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55bf57b689f8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57b68c00 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55bf57b68b70 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57b68cc8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55bf57b68e88 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55bf57b68d78 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bf57b68df0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57b690d8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55bf57b68f48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bf57b68fc0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bf57b69188 <col:86> "" ""
|-CXXMethodDecl 0x55bf57b693f8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55bf57b69268 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55bf57b692e0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57b695a8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55bf57b694b8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55bf57b69758 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55bf57b69660 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55bf57b69a28 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55bf57b69810 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55bf57b69888 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bf57b69900 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57b69d08 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55bf57b69af0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55bf57b69b68 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bf57b69be0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bf57b69dc0 <col:115> "" ""
|-AccessSpecDecl 0x55bf57b69e30 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55bf57b69e68 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57b6b380 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55bf57b6b380
| `-ParmVarDecl 0x55bf57b6b488 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55bf57b6b528 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55bf57b6b528
| `-ParmVarDecl 0x55bf57b6b638 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55bf57ba0c68 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bf57d92fe0 <col:7>
|-CXXConstructorDecl 0x55bf57ba0d40 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55bf57ba0d40
| `-ParmVarDecl 0x55bf57ba0e58 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55bf57ba0ec8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55bf57ba0ec8
| `-ParmVarDecl 0x55bf57ba0fd8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55bf57d983f0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57d81b48 prev 0x55bf57d76810 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57d81c40 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55bf57d81d30 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55bf57d81e58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55bf57d81fd8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55bf57d82158 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55bf57d822d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55bf57d93148 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bf57d939b8 <col:11>
|-CXXDestructorDecl 0x55bf57d93220 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bf57d93358 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55bf57d93358
| `-ParmVarDecl 0x55bf57d93468 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55bf57d93508 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bf57d93508
| `-ParmVarDecl 0x55bf57d93618 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55bf57d98de8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bf57d98ef8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55bf57d99178 <col:11>
|   `-ReturnStmt 0x55bf57d99168 <col:11>
|     `-UnaryOperator 0x55bf57d99150 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bf57d99140 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55bf57d98f68 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bf57d98f68
  `-ParmVarDecl 0x55bf57d99078 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57d82340 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57d82458 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55bf57d824f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55bf57d82560 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55bf57d825c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55bf57d82630 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55bf57d82690 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55bf57d82750 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55bf57d827b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55bf57d82810 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55bf57d93058 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55bf57d824f8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55bf57d939c8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55bf57d93a20 <col:12>
|-CXXConstructorDecl 0x55bf57d93688 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55bf57d93688
| `-ParmVarDecl 0x55bf57d93798 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55bf57d93838 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55bf57d93838
| `-ParmVarDecl 0x55bf57d93948 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55bf57d984d0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57d6ff20 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bf57d70038 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55bf57d700c8 <col:16, col:22> col:16 public
|-EnumDecl 0x55bf57d700f0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55bf57d701f0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55bf57d702d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d701d0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55bf57d701b0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55bf57d70280 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55bf57d702e8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57d70260 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55bf57d70240 <col:22> 'int' 64
|-CXXMethodDecl 0x55bf57d70628 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55bf57d70310 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bf57d70390 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55bf57d70408 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bf57d70480 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bf57d706e8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d708e8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55bf57d70760 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55bf57d707d8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bf57d70998 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d70af8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55bf57d70a08 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bf57d70ba0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55bf57d70f00 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55bf57d70e90 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55bf57d70e30 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55bf57d70df0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55bf578474e0 'void'
|       |-PointerType 0x55bf57af00a0 'unsigned char *'
|       | `-BuiltinType 0x55bf578475e0 'unsigned char'
|       |-TypedefType 0x55bf578ec470 'size_t' sugar
|       | |-Typedef 0x55bf578b7be0 'size_t'
|       | `-BuiltinType 0x55bf57847640 'unsigned long'
|       `-PointerType 0x55bf57847ce0 'void *'
|         `-BuiltinType 0x55bf578474e0 'void'
|-CXXMethodDecl 0x55bf57d71378 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55bf57d70f70 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55bf57d70fe8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bf57d71080 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55bf57d71100 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55bf57d8bff0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55bf57d8bfd8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55bf57d8bfa0 <col:58> 'int' 0
| |-ParmVarDecl 0x55bf57d71180 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55bf57d8c018 <col:76> 'int' 0
| |-ParmVarDecl 0x55bf57d71200 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55bf57d8c038 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55bf57d71448 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d714c8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55bf57d71588 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55bf57d71628 <col:20>
| `-OptimizeNoneAttr 0x55bf57d71680 <col:30>
|-CXXMethodDecl 0x55bf57d716f8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55bf57d71798 <col:20>
| `-OptimizeNoneAttr 0x55bf57d717f0 <col:30>
|-CXXMethodDecl 0x55bf57d71868 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55bf57d71908 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d719b8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55bf57d71a58 <col:20>
| |-OptimizeNoneAttr 0x55bf57d71ab0 <col:30>
| `-WarnUnusedResultAttr 0x55bf57d71ad8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d71b30 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55bf57d71bd0 <col:20>
| `-OptimizeNoneAttr 0x55bf57d71c28 <col:30>
|-CXXMethodDecl 0x55bf57d71c78 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55bf57d71d18 <col:20>
| `-OptimizeNoneAttr 0x55bf57d71d70 <col:30>
|-CXXMethodDecl 0x55bf57d71db8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55bf57d71e58 <col:20>
| `-OptimizeNoneAttr 0x55bf57d71eb0 <col:30>
|-CXXMethodDecl 0x55bf57d71ef8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55bf57d71fb8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55bf57d72080 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bf57d72148 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bf57d72208 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bf57d72328 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55bf57d8c100 <col:54, line:99:5>
|   `-ReturnStmt 0x55bf57d8c0f0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55bf57d8c0d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55bf57d8c0a8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55bf57d82b48
|         `-CXXThisExpr 0x55bf57d8c098 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55bf57d724c8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55bf57d723d8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55bf57d8c1b0 <col:67, line:103:5>
|   `-BinaryOperator 0x55bf57d8c190 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55bf57d8c128 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55bf57d82b48
|     | `-CXXThisExpr 0x55bf57d8c118 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55bf57d8c178 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57d8c158 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55bf57d723d8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55bf57d725c0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55bf57d8c230 <col:33, line:107:5>
|   `-ReturnStmt 0x55bf57d8c220 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55bf57d8c208 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55bf57d8c1d8 <col:16> 'void *' lvalue ->_destructor_argument 0x55bf57d82bb0
|         `-CXXThisExpr 0x55bf57d8c1c8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55bf57d72680 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55bf57d8c860 <col:25, line:113:5>
|   |-ParenExpr 0x55bf57d8c5a8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55bf57d8c578 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d8c2e8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55bf57d8c2c0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55bf57d8c288 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55bf57d8c258 <col:24> '<bound member function type>' ->shared 0x55bf57d716f8
|   |   |       `-ImplicitCastExpr 0x55bf57d8c2a8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55bf57d8c248 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55bf57d8c348 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d8c328 <col:42> 'int' 0
|   |   `-CallExpr 0x55bf57d8c4d8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d8c4c0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d8c4a0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d8c518 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8c3b8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55bf57d8c530 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8c3e0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d8c548 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d8c418 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55bf57d8c560 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d8c488 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d8c470 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d8c438 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55bf57d8c7a8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55bf57d8c5d8 <col:2> 'unsigned char *' lvalue ->_head 0x55bf57d82950
|   | | `-CXXThisExpr 0x55bf57d8c5c8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55bf57d8c790 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55bf57d8c770 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55bf57d8c618 <col:10> 'unsigned char *' lvalue ->_data 0x55bf57d829b8
|   |     | `-CXXThisExpr 0x55bf57d8c608 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55bf57d8c758 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55bf57d8c738 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55bf57d8c658 <col:18> 'unsigned char *' lvalue ->_tail 0x55bf57d82a20
|   |         | `-CXXThisExpr 0x55bf57d8c648 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55bf57d8c720 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55bf57d8c700 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55bf57d8c698 <col:26> 'unsigned char *' lvalue ->_end 0x55bf57d82a88
|   |             | `-CXXThisExpr 0x55bf57d8c688 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55bf57d8c6e8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55bf57d8c6c8 <col:33> 'int' 0
|   `-BinaryOperator 0x55bf57d8c840 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55bf57d8c7d8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55bf57d82b48
|     | `-CXXThisExpr 0x55bf57d8c7c8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55bf57d8c828 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55bf57d8c808 <col:16> 'int' 0
|-CXXMethodDecl 0x55bf57d727c0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55bf57d72730 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bf57d72868 <col:20>
| |-OptimizeNoneAttr 0x55bf57d728c0 <col:30>
| `-WarnUnusedResultAttr 0x55bf57d728e8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d729b8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55bf57d72928 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bf57d72a60 <col:20>
| |-OptimizeNoneAttr 0x55bf57d72ab8 <col:30>
| `-WarnUnusedResultAttr 0x55bf57d72ae0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d72c18 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55bf57d72b20 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bf57d72cc0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d72dc0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55bf57d72d30 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bf57d72e68 <col:20>
| `-OptimizeNoneAttr 0x55bf57d72ec0 <col:30>
|-CXXMethodDecl 0x55bf57d72f88 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55bf57d72ef8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bf57d73030 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d73130 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55bf57d730a0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bf57d731d8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d732d8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55bf57d73248 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bf57d73380 <col:20>
| `-OptimizeNoneAttr 0x55bf57d733d8 <col:30>
|-CXXMethodDecl 0x55bf57d73568 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55bf57d73418 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55bf57d73490 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55bf57d8c058 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55bf57d73618 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55bf57d73818 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55bf57d73690 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55bf57d73708 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57d73a28 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55bf57d738d8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bf57d73950 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57d73c38 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55bf57d73ae8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55bf57d73b68 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55bf57d8c068 <col:39> 'int' 0
|-CXXMethodDecl 0x55bf57d73d08 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55bf57d73dd0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bf57d73e98 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bf57d73f58 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bf57d74020 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55bf57d74168 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55bf57d740d8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55bf57d74338 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55bf57d74228 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55bf57d742a0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57d74408 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55bf57d744c8 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55bf57d74568 <col:20>
| `-OptimizeNoneAttr 0x55bf57d745c0 <col:30>
|-CXXMethodDecl 0x55bf57d74610 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55bf57d746b0 <col:20>
| `-OptimizeNoneAttr 0x55bf57d74708 <col:30>
|-CXXMethodDecl 0x55bf57d74758 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bf57d74818 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bf57d748e0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55bf57d74980 <col:20>
| `-OptimizeNoneAttr 0x55bf57d749d8 <col:30>
|-CXXMethodDecl 0x55bf57d74b28 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55bf57d74a18 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55bf57d74a90 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57d74c78 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55bf57d74be8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57d74d50 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55bf57d74e10 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55bf57d74eb0 <col:20>
| `-OptimizeNoneAttr 0x55bf57d74f08 <col:30>
|-CXXMethodDecl 0x55bf57d74f58 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55bf57d74ff8 <col:20>
| `-OptimizeNoneAttr 0x55bf57d75050 <col:30>
|-CXXMethodDecl 0x55bf57d750a0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bf57d75168 <line:300:5, col:63> col:44 used transport_length 'int () const'
| |-NoInlineAttr 0x55bf57d75208 <col:20>
| `-OptimizeNoneAttr 0x55bf57d75260 <col:30>
|-CXXMethodDecl 0x55bf57d752a8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55bf57d753c8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55bf57d75538 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55bf57d75478 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55bf57d75628 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55bf57d756c8 <col:20>
| `-OptimizeNoneAttr 0x55bf57d75720 <col:30>
|-CXXMethodDecl 0x55bf57d75770 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bf57d75830 <line:309:5, col:40> col:21 used ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bf57d75a68 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55bf57d758e0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55bf57d75958 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bf57d75b18 <col:20>
| `-OptimizeNoneAttr 0x55bf57d75b70 <col:30>
|-CXXMethodDecl 0x55bf57d75c18 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55bf57d75cb8 <col:20>
| `-OptimizeNoneAttr 0x55bf57d75d10 <col:30>
|-CXXMethodDecl 0x55bf57d75d60 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55bf57d75e00 <col:20>
| `-OptimizeNoneAttr 0x55bf57d75e58 <col:30>
|-CXXMethodDecl 0x55bf57d75ea0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55bf57d75f40 <col:20>
| `-OptimizeNoneAttr 0x55bf57d75f98 <col:30>
|-CXXMethodDecl 0x55bf57d76098 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55bf57d75fd0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55bf57d76140 <col:20>
| `-OptimizeNoneAttr 0x55bf57d76198 <col:30>
|-CXXMethodDecl 0x55bf57d76358 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55bf57d761d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55bf57d76248 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bf57d76408 <col:20>
| `-OptimizeNoneAttr 0x55bf57d76460 <col:30>
|-CXXMethodDecl 0x55bf57d76508 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55bf57d76628 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55bf57d76748 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55bf57d767e8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55bf57d76810 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55bf57d76938 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55bf57d769d8 <col:20>
| `-OptimizeNoneAttr 0x55bf57d76a30 <col:30>
|-CXXMethodDecl 0x55bf57d76ad8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55bf57d76b78 <col:20>
| `-OptimizeNoneAttr 0x55bf57d76bd0 <col:30>
|-AccessSpecDecl 0x55bf57d76bf8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55bf57d76c20 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55bf57d76d20 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55bf57d76d70 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57d76d00 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55bf57d76ce0 <col:14> 'int' 48
|-CXXMethodDecl 0x55bf57d76dd8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55bf57d76e78 <col:20>
| `-OptimizeNoneAttr 0x55bf57d76ed0 <col:30>
|-CXXMethodDecl 0x55bf57d76f48 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55bf57d76fe8 <col:20>
| `-OptimizeNoneAttr 0x55bf57d77040 <col:30>
|-CXXMethodDecl 0x55bf57d77108 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55bf57d77078 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55bf57d772a8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55bf57d77448 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55bf57d77358 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55bf57d774f0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55bf57d775f0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bf57d779a0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d775d0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55bf57d775b0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55bf57d77680 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bf57d779b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d77660 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55bf57d77640 <col:14> 'int' 1
| |-EnumConstantDecl 0x55bf57d77710 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bf57d779d0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d776f0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55bf57d776d0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55bf57d777a0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bf57d779e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d77780 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55bf57d77760 <col:14> 'int' 3
| |-EnumConstantDecl 0x55bf57d77830 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bf57d77a00 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d77810 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55bf57d777f0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55bf57d778c0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bf57d77a18 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d778a0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55bf57d77880 <col:13> 'int' 5
| `-EnumConstantDecl 0x55bf57d77950 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55bf57d77a30 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57d77930 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55bf57d77910 <col:14> 'int' 6
|-CXXMethodDecl 0x55bf57d77a98 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55bf57d77b38 <col:20>
| `-OptimizeNoneAttr 0x55bf57d77b90 <col:30>
|-CXXMethodDecl 0x55bf57d77c88 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55bf57d77bc8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55bf57d77d30 <col:20>
| `-OptimizeNoneAttr 0x55bf57d77d88 <col:30>
|-CXXMethodDecl 0x55bf57d77df8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55bf57d77f20 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55bf57d78098 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55bf57d77fd0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55bf57d78160 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55bf57d78228 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55bf57d78368 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55bf57d782d8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55bf57d78410 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55bf57d78510 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55bf57d78710 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d784f0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55bf57d784d0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55bf57d785a0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55bf57d78728 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d78580 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55bf57d78560 <col:45> 'int' 4
| |-EnumConstantDecl 0x55bf57d78630 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55bf57d78740 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d78610 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55bf57d785f0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55bf57d786c0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55bf57d78758 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57d786a0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55bf57d78680 <col:47> 'int' 16
|-CXXMethodDecl 0x55bf57d787b8 <line:431:5, col:36> col:22 used dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55bf57d78928 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55bf57d78868 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55bf57d789d0 <col:20>
| `-OptimizeNoneAttr 0x55bf57d78a28 <col:30>
|-CXXMethodDecl 0x55bf57d78a78 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55bf57d8c980 <col:18, col:36>
|   `-ReturnStmt 0x55bf57d8c970 <col:20, col:33>
|     `-ImplicitCastExpr 0x55bf57d8c958 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55bf57d8c938 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55bf57d8c908 <col:27> '<bound member function type>' ->xanno 0x55bf57d76ad8
|           `-CXXThisExpr 0x55bf57d8c8f8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55bf57d78b70 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55bf57d8ca90 <col:30, col:48>
|   `-ReturnStmt 0x55bf57d8ca80 <col:32, col:45>
|     `-ImplicitCastExpr 0x55bf57d8ca68 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55bf57d8ca48 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55bf57d8ca18 <col:39> '<bound member function type>' ->xanno 0x55bf57d76938
|           `-CXXThisExpr 0x55bf57d8ca08 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55bf57d78c58 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55bf57d8cc28 <col:24, col:50>
|   `-ReturnStmt 0x55bf57d8cc18 <col:26, col:47>
|     `-UnaryOperator 0x55bf57d8cc00 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bf57d8cbe0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55bf57d8cbc8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bf57d8cb78 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55bf57d81e58
|         |   `-CXXMemberCallExpr 0x55bf57d8cb58 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55bf57d8cb28 <col:34> '<bound member function type>' ->xanno 0x55bf57d76ad8
|         |       `-CXXThisExpr 0x55bf57d8cb18 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55bf57d8cba8 <col:46> 'int' 0
|-CXXMethodDecl 0x55bf57d78d60 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55bf57d8cdf8 <col:36, col:62>
|   `-ReturnStmt 0x55bf57d8cde8 <col:38, col:59>
|     `-UnaryOperator 0x55bf57d8cdd0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bf57d8cdb0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55bf57d8cd98 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bf57d8cd10 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55bf57d81e58
|         |   `-CXXMemberCallExpr 0x55bf57d8ccf0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55bf57d8ccc0 <col:46> '<bound member function type>' ->xanno 0x55bf57d76938
|         |       `-CXXThisExpr 0x55bf57d8ccb0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55bf57d8cd40 <col:58> 'int' 0
|-CXXMethodDecl 0x55bf57d78e78 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55bf57d8cf90 <col:26, col:53>
|   `-ReturnStmt 0x55bf57d8cf80 <col:28, col:50>
|     `-UnaryOperator 0x55bf57d8cf68 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bf57d8cf48 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55bf57d8cf30 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bf57d8cee0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55bf57d82158
|         |   `-CXXMemberCallExpr 0x55bf57d8cec0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55bf57d8ce90 <col:36> '<bound member function type>' ->xanno 0x55bf57d76ad8
|         |       `-CXXThisExpr 0x55bf57d8ce80 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55bf57d8cf10 <col:49> 'int' 0
|-CXXMethodDecl 0x55bf57d78f98 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55bf57d8d168 <col:38, col:65>
|   `-ReturnStmt 0x55bf57d8d158 <col:40, col:62>
|     `-UnaryOperator 0x55bf57d8d140 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bf57d8d120 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55bf57d8d108 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bf57d8d078 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55bf57d82158
|         |   `-CXXMemberCallExpr 0x55bf57d8d058 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55bf57d8d028 <col:48> '<bound member function type>' ->xanno 0x55bf57d76938
|         |       `-CXXThisExpr 0x55bf57d8d018 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55bf57d8d0a8 <col:61> 'int' 0
|-CXXMethodDecl 0x55bf57d79148 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55bf57d79050 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55bf57d8d838 <col:34, line:463:5>
|   |-ParenExpr 0x55bf57d8d680 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55bf57d8d650 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d8d2b8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d8d288 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d8d1d8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d8d1c0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d8d180 <col:23> 'int' lvalue ParmVar 0x55bf57d79050 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d8d1a0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d8d268 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d8d238 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d8d1f8 <col:33> 'int' lvalue ParmVar 0x55bf57d79050 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55bf57d8d250 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55bf57d8d218 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55bf57d8d318 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d8d2f8 <col:56> 'int' 0
|   |   `-CallExpr 0x55bf57d8d5b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d8d598 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d8d578 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d8d5f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8d408 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55bf57d8d608 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8d438 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d8d620 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d8d470 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55bf57d8d638 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d8d560 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d8d548 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d8d508 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55bf57d8d828 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55bf57d8d810 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55bf57d8d7f0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55bf57d8d7c0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bf57d8d770 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55bf57d81e58
|         |   `-CXXMemberCallExpr 0x55bf57d8d750 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55bf57d8d720 <col:9> '<bound member function type>' ->xanno 0x55bf57d76938
|         |       `-CXXThisExpr 0x55bf57d8d710 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55bf57d8d7d8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55bf57d8d7a0 <col:21> 'int' lvalue ParmVar 0x55bf57d79050 'i' 'int'
|-CXXMethodDecl 0x55bf57d79398 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55bf57d79208 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55bf57d79280 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55bf57d8dec8 <col:40, line:472:5>
|   |-ParenExpr 0x55bf57d8dce0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55bf57d8dcb0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d8d990 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d8d960 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d8d8b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d8d898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d8d858 <col:23> 'int' lvalue ParmVar 0x55bf57d79208 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d8d878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d8d940 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d8d910 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d8d8d0 <col:33> 'int' lvalue ParmVar 0x55bf57d79208 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55bf57d8d928 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55bf57d8d8f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55bf57d8d9f0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d8d9d0 <col:56> 'int' 0
|   |   `-CallExpr 0x55bf57d8dc10 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d8dbf8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d8dbd8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d8dc50 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8da60 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55bf57d8dc68 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8da90 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d8dc80 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d8dac8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55bf57d8dc98 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d8dbc0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d8dba8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d8db68 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55bf57d8dea8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55bf57d8de50 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55bf57d8de20 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55bf57d8ddd0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55bf57d81e58
|     | |   `-CXXMemberCallExpr 0x55bf57d8ddb0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55bf57d8dd80 <col:2> '<bound member function type>' ->xanno 0x55bf57d76ad8
|     | |       `-CXXThisExpr 0x55bf57d8dd70 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55bf57d8de38 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55bf57d8de00 <col:14> 'int' lvalue ParmVar 0x55bf57d79208 'i' 'int'
|     `-ImplicitCastExpr 0x55bf57d8de90 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57d8de70 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55bf57d79280 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55bf57d79558 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55bf57d79460 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55bf57d8e648 <col:36, line:485:5>
|   |-ParenExpr 0x55bf57d8e3b0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bf57d8e380 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d8e060 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d8e030 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d8df40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d8df28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d8dee8 <col:23> 'int' lvalue ParmVar 0x55bf57d79460 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d8df08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d8e010 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d8dff8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d8df60 <col:33> 'int' lvalue ParmVar 0x55bf57d79460 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d8dfd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d8dfc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d8df80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bf57d8dfa0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bf57d8e0c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d8e0a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bf57d8e2e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d8e2c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d8e2a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d8e320 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8e130 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bf57d8e338 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8e168 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d8e350 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d8e1a0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55bf57d8e368 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d8e290 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d8e278 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d8e238 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55bf57d8e638 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55bf57d8e620 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55bf57d8e608 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bf57d8e5d8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55bf57d8e578 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bf57d8e548 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bf57d8e4c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55bf57d81d30
|             |   `-CXXMemberCallExpr 0x55bf57d8e4a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bf57d8e470 <col:61> '<bound member function type>' ->xanno 0x55bf57d76938
|             |       `-CXXThisExpr 0x55bf57d8e460 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bf57d8e560 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bf57d8e4f0 <col:74> 'int' lvalue ParmVar 0x55bf57d79460 'i' 'int'
|-CXXMethodDecl 0x55bf57d797a8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55bf57d79618 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bf57d79690 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55bf57d8ed98 <col:42, line:500:5>
|   |-ParenExpr 0x55bf57d8eb30 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bf57d8eb00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d8e7e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d8e7b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d8e6c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d8e6a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d8e668 <col:23> 'int' lvalue ParmVar 0x55bf57d79618 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d8e688 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d8e790 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d8e778 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d8e6e0 <col:33> 'int' lvalue ParmVar 0x55bf57d79618 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d8e758 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d8e740 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d8e700 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bf57d8e720 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bf57d8e840 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d8e820 <col:60> 'int' 0
|   |   `-CallExpr 0x55bf57d8ea60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d8ea48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d8ea28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d8eaa0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8e8b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bf57d8eab8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8e8e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d8ead0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d8e920 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55bf57d8eae8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d8ea10 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d8e9f8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d8e9b8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55bf57d8ed78 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55bf57d8ed28 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bf57d8ecf8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55bf57d8eca0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bf57d8ec70 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bf57d8ec20 <col:48, col:57> 'char [48]' lvalue ->c 0x55bf57d81d30
|     |     |   `-CXXMemberCallExpr 0x55bf57d8ec00 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bf57d8ebd0 <col:48> '<bound member function type>' ->xanno 0x55bf57d76ad8
|     |     |       `-CXXThisExpr 0x55bf57d8ebc0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bf57d8ec88 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bf57d8ec50 <col:61> 'int' lvalue ParmVar 0x55bf57d79618 'i' 'int'
|     `-ImplicitCastExpr 0x55bf57d8ed60 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57d8ed40 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55bf57d79690 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55bf57d79968 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55bf57d79870 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55bf57d8f4f8 <col:35, line:513:5>
|   |-ParenExpr 0x55bf57d8f208 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bf57d8f1d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d8ef30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d8ef00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d8ee10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d8edf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d8edb8 <col:23> 'int' lvalue ParmVar 0x55bf57d79870 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d8edd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d8eee0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d8eec8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d8ee30 <col:33> 'int' lvalue ParmVar 0x55bf57d79870 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d8eea8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d8ee90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d8ee50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bf57d8ee70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bf57d8ef90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d8ef70 <col:60> 'int' 0
|   |   `-CallExpr 0x55bf57d8f138 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d8f120 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d8f100 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d8f178 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8f000 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bf57d8f190 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8f038 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d8f1a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d8f070 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55bf57d8f1c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d8f0e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d8f0d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d8f090 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55bf57d8f4e8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55bf57d8f4d0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55bf57d8f4b8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bf57d8f488 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55bf57d8f400 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bf57d8f3d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bf57d8f380 <col:60, col:69> 'char const[48]' lvalue ->c 0x55bf57d81d30
|             |   `-CXXMemberCallExpr 0x55bf57d8f360 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bf57d8f330 <col:60> '<bound member function type>' ->xanno 0x55bf57d76938
|             |       `-CXXThisExpr 0x55bf57d8f320 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bf57d8f3e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bf57d8f3b0 <col:73> 'int' lvalue ParmVar 0x55bf57d79870 'i' 'int'
|-CXXMethodDecl 0x55bf57d79bb8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55bf57d79a28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bf57d79aa0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55bf57d8fc18 <col:41, line:528:5>
|   |-ParenExpr 0x55bf57d8f9a0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bf57d8f970 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d8f690 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d8f660 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d8f570 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d8f558 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d8f518 <col:23> 'int' lvalue ParmVar 0x55bf57d79a28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d8f538 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d8f640 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d8f628 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d8f590 <col:33> 'int' lvalue ParmVar 0x55bf57d79a28 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d8f608 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d8f5f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d8f5b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bf57d8f5d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bf57d8f6f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d8f6d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bf57d8f8d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d8f8b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d8f898 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d8f910 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8f760 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bf57d8f928 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8f798 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d8f940 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d8f7d0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55bf57d8f958 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d8f880 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d8f868 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d8f828 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55bf57d8fbf8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55bf57d8fba8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bf57d8fb78 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55bf57d8fb20 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bf57d8fae0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bf57d8fa90 <col:47, col:56> 'char [48]' lvalue ->c 0x55bf57d81d30
|     |     |   `-CXXMemberCallExpr 0x55bf57d8fa70 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bf57d8fa40 <col:47> '<bound member function type>' ->xanno 0x55bf57d76ad8
|     |     |       `-CXXThisExpr 0x55bf57d8fa30 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bf57d8faf8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bf57d8fac0 <col:60> 'int' lvalue ParmVar 0x55bf57d79a28 'i' 'int'
|     `-ImplicitCastExpr 0x55bf57d8fbe0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57d8fbc0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55bf57d79aa0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55bf57d79d78 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55bf57d79c80 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55bf57d902e8 <col:36, line:541:5>
|   |-ParenExpr 0x55bf57d90088 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bf57d90058 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d8fdb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d8fd80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d8fc90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d8fc78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d8fc38 <col:23> 'int' lvalue ParmVar 0x55bf57d79c80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d8fc58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d8fd60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d8fd48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d8fcb0 <col:33> 'int' lvalue ParmVar 0x55bf57d79c80 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d8fd28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d8fd10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d8fcd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bf57d8fcf0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55bf57d8fe10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d8fdf0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bf57d8ffb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d8ffa0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d8ff80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d8fff8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8fe80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55bf57d90010 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d8feb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d90028 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d8fef0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55bf57d90040 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d8ff68 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d8ff50 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d8ff10 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55bf57d902d8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55bf57d902c0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55bf57d902a8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bf57d90278 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55bf57d90220 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bf57d901f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bf57d901a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55bf57d81d30
|             |   `-CXXMemberCallExpr 0x55bf57d90180 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bf57d90150 <col:61> '<bound member function type>' ->xanno 0x55bf57d76938
|             |       `-CXXThisExpr 0x55bf57d90140 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bf57d90208 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bf57d901d0 <col:74> 'int' lvalue ParmVar 0x55bf57d79c80 'i' 'int'
|-CXXMethodDecl 0x55bf57d79f48 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55bf57d79e38 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55bf57d79eb0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bf57d79ff8 <col:20>
| `-OptimizeNoneAttr 0x55bf57d7a050 <col:30>
|-CXXMethodDecl 0x55bf57d7a188 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55bf57d7a090 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55bf57d909b8 <col:35, line:562:5>
|   |-ParenExpr 0x55bf57d90758 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bf57d90728 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d90480 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d90450 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d90360 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d90348 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d90308 <col:23> 'int' lvalue ParmVar 0x55bf57d7a090 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d90328 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d90430 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d90418 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d90380 <col:33> 'int' lvalue ParmVar 0x55bf57d7a090 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d903f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d903e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d903a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bf57d903c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55bf57d904e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d904c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bf57d90688 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d90670 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d90650 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d906c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d90550 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55bf57d906e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d90588 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d906f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d905c0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55bf57d90710 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d90638 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d90620 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d905e0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55bf57d909a8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55bf57d90990 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55bf57d90978 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bf57d90948 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55bf57d908f0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bf57d908c0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bf57d90870 <col:60, col:69> 'char const[48]' lvalue ->c 0x55bf57d81d30
|             |   `-CXXMemberCallExpr 0x55bf57d90850 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bf57d90820 <col:60> '<bound member function type>' ->xanno 0x55bf57d76938
|             |       `-CXXThisExpr 0x55bf57d90810 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bf57d908d8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bf57d908a0 <col:73> 'int' lvalue ParmVar 0x55bf57d7a090 'i' 'int'
|-CXXMethodDecl 0x55bf57d7a398 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55bf57d7a248 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bf57d7a2c0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55bf57d91098 <col:41, line:577:5>
|   |-ParenExpr 0x55bf57d90e28 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bf57d90df8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d90b50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d90b20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d90a30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d90a18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d909d8 <col:23> 'int' lvalue ParmVar 0x55bf57d7a248 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d909f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d90b00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d90ae8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d90a50 <col:33> 'int' lvalue ParmVar 0x55bf57d7a248 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d90ac8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d90ab0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d90a70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bf57d90a90 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55bf57d90bb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d90b90 <col:60> 'int' 0
|   |   `-CallExpr 0x55bf57d90d58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d90d40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d90d20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d90d98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d90c20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55bf57d90db0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d90c58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d90dc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d90c90 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55bf57d90de0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d90d08 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d90cf0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d90cb0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55bf57d91078 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55bf57d91028 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bf57d90ff8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55bf57d90f98 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bf57d90f68 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bf57d90f18 <col:47, col:56> 'char [48]' lvalue ->c 0x55bf57d81d30
|     |     |   `-CXXMemberCallExpr 0x55bf57d90ef8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bf57d90ec8 <col:47> '<bound member function type>' ->xanno 0x55bf57d76ad8
|     |     |       `-CXXThisExpr 0x55bf57d90eb8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bf57d90f80 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bf57d90f48 <col:60> 'int' lvalue ParmVar 0x55bf57d7a248 'i' 'int'
|     `-ImplicitCastExpr 0x55bf57d91060 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57d91040 <col:65> 'int32_t':'int' lvalue ParmVar 0x55bf57d7a2c0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55bf57d7a558 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55bf57d7a460 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55bf57d917c8 <col:36, line:591:5>
|   |-ParenExpr 0x55bf57d91508 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bf57d914d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d91230 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d91200 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d91110 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d910f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d910b8 <col:23> 'int' lvalue ParmVar 0x55bf57d7a460 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d910d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d911e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d911c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d91130 <col:33> 'int' lvalue ParmVar 0x55bf57d7a460 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d911a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d91190 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d91150 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bf57d91170 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55bf57d91290 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d91270 <col:60> 'int' 0
|   |   `-CallExpr 0x55bf57d91438 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d91420 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d91400 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d91478 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d91300 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55bf57d91490 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d91338 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d914a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d91370 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55bf57d914c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d913e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d913d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d91390 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55bf57d917b8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55bf57d917a0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55bf57d91788 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bf57d91758 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55bf57d916d0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bf57d916a0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bf57d91650 <col:61, col:70> 'char const[48]' lvalue ->c 0x55bf57d81d30
|             |   `-CXXMemberCallExpr 0x55bf57d91630 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bf57d91600 <col:61> '<bound member function type>' ->xanno 0x55bf57d76938
|             |       `-CXXThisExpr 0x55bf57d915f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bf57d916b8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bf57d91680 <col:74> 'int' lvalue ParmVar 0x55bf57d7a460 'i' 'int'
|-CXXMethodDecl 0x55bf57d7a7a8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55bf57d7a618 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bf57d7a690 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55bf57d91ea8 <col:42, line:606:5>
|   |-ParenExpr 0x55bf57d91c38 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bf57d91c08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d91960 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d91930 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d91840 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d91828 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d917e8 <col:23> 'int' lvalue ParmVar 0x55bf57d7a618 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d91808 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d91910 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bf57d918f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d91860 <col:33> 'int' lvalue ParmVar 0x55bf57d7a618 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d918d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d918c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d91880 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bf57d918a0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55bf57d919c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d919a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bf57d91b68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d91b50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d91b30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d91ba8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d91a30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55bf57d91bc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d91a68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d91bd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d91aa0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55bf57d91bf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d91b18 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d91b00 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d91ac0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55bf57d91e88 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55bf57d91e38 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bf57d91e08 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55bf57d91da8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bf57d91d78 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bf57d91d28 <col:48, col:57> 'char [48]' lvalue ->c 0x55bf57d81d30
|     |     |   `-CXXMemberCallExpr 0x55bf57d91d08 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bf57d91cd8 <col:48> '<bound member function type>' ->xanno 0x55bf57d76ad8
|     |     |       `-CXXThisExpr 0x55bf57d91cc8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bf57d91d90 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bf57d91d58 <col:61> 'int' lvalue ParmVar 0x55bf57d7a618 'i' 'int'
|     `-ImplicitCastExpr 0x55bf57d91e70 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55bf57d91e50 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55bf57d7a690 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55bf57d7a940 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55bf57d7a870 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55bf57d92718 <col:33, line:620:5>
|   |-ParenExpr 0x55bf57d92490 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55bf57d92460 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d920b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d92080 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d91f20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d91f08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d91ec8 <col:23> 'int' lvalue ParmVar 0x55bf57d7a870 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d91ee8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d92060 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55bf57d92048 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d91f40 <col:33> 'int' lvalue ParmVar 0x55bf57d7a870 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d92028 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d92010 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d91f60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55bf57d91fe8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55bf57d91fd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55bf57d91f98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55bf57d92110 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d920f0 <col:79> 'int' 0
|   |   `-CallExpr 0x55bf57d923c0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d923a8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d92388 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d92400 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d921f8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55bf57d92418 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d92240 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d92430 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d92278 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55bf57d92448 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d92370 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d92358 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d92318 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55bf57d92708 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55bf57d926f0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55bf57d926d8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bf57d926a8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55bf57d92620 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bf57d925f0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bf57d925a0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55bf57d81d30
|             |   `-CXXMemberCallExpr 0x55bf57d92580 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bf57d92550 <col:67> '<bound member function type>' ->xanno 0x55bf57d76938
|             |       `-CXXThisExpr 0x55bf57d92540 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bf57d92608 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bf57d925d0 <col:80> 'int' lvalue ParmVar 0x55bf57d7a870 'i' 'int'
|-CXXMethodDecl 0x55bf57d7ab58 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55bf57d7aa00 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bf57d7aa80 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55bf57d92f40 <col:45, line:635:5>
|   |-ParenExpr 0x55bf57d92c88 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55bf57d92c58 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55bf57d92920 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bf57d928f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bf57d92790 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bf57d92778 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bf57d92738 <col:23> 'int' lvalue ParmVar 0x55bf57d7aa00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bf57d92758 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bf57d928d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55bf57d928b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bf57d927b0 <col:33> 'int' lvalue ParmVar 0x55bf57d7aa00 'i' 'int'
|   |   |     `-BinaryOperator 0x55bf57d92898 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bf57d92880 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bf57d927d0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bf57d76d20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55bf57d92858 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55bf57d92840 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55bf57d92808 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55bf57d92980 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bf57d92960 <col:79> 'int' 0
|   |   `-CallExpr 0x55bf57d92bb8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55bf57d92ba0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bf57d92b80 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bf578e31d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bf57d92bf8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d929f0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55bf57d92c10 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bf57d92a38 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bf57d92c28 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bf57d92a70 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55bf57d92c40 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bf57d92b68 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bf57d92b50 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bf57d92b08 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55bf57d92f20 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55bf57d92e88 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bf57d92e58 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55bf57d92df8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bf57d92dc8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bf57d92d78 <col:54, col:63> 'char [48]' lvalue ->c 0x55bf57d81d30
|     |     |   `-CXXMemberCallExpr 0x55bf57d92d58 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bf57d92d28 <col:54> '<bound member function type>' ->xanno 0x55bf57d76ad8
|     |     |       `-CXXThisExpr 0x55bf57d92d18 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bf57d92de0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bf57d92da8 <col:67> 'int' lvalue ParmVar 0x55bf57d7aa00 'i' 'int'
|     `-CXXConstCastExpr 0x55bf57d92ef0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55bf57d92ed8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55bf57d92ea0 <col:91> 'const void *' lvalue ParmVar 0x55bf57d7aa80 'x' 'const void *'
|-CXXMethodDecl 0x55bf57d7ac28 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55bf57d92fc8 <col:34, line:640:5>
|   `-ReturnStmt 0x55bf57d92fb8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55bf57d92fa0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55bf57d92f70 <col:16> 'Packet *' lvalue ->_data_packet 0x55bf57d828e8
|         `-CXXThisExpr 0x55bf57d92f60 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55bf57d7ad68 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55bf57d7acd8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bf57d8c088 <col:46> 'bool' true
|-CXXMethodDecl 0x55bf57d7aee8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55bf57d7ae20 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55bf57d7af90 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55bf57d7b740 <line:660:22> "" ""
| |-EnumConstantDecl 0x55bf57d7b090 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b7b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b070 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55bf57d7b050 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55bf57d701f0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55bf57d7b120 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b7c8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b100 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55bf57d7b0e0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55bf57d70280 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55bf57d7b1b0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b7e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b190 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55bf57d7b170 <col:21> 'int' 0
| |-EnumConstantDecl 0x55bf57d7b240 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b7f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b220 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55bf57d7b200 <col:19> 'int' 16
| |-EnumConstantDecl 0x55bf57d7b2d0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b810 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b2b0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55bf57d7b290 <col:21> 'int' 16
| |-EnumConstantDecl 0x55bf57d7b360 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b828 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b340 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55bf57d7b320 <col:19> 'int' 32
| |-EnumConstantDecl 0x55bf57d7b3f0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b840 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b3d0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55bf57d7b3b0 <col:19> 'int' EnumConstant 0x55bf57d7b240 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55bf57d7b480 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b858 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b460 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55bf57d7b440 <col:19> 'int' EnumConstant 0x55bf57d7b360 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55bf57d7b550 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b870 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b530 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55bf57d7b510 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55bf57d7b4d0 <col:23> 'int' EnumConstant 0x55bf57d7b480 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55bf57d7b4f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55bf57d7b620 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bf57d7b888 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bf57d7b600 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55bf57d7b5e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55bf57d7b5a0 <col:23> 'int' EnumConstant 0x55bf57d7b480 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55bf57d7b5c0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55bf57d7b6f0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55bf57d7b8a0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bf57d7b6d0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55bf57d7b6b0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55bf57d7b670 <col:23> 'int' EnumConstant 0x55bf57d7b480 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55bf57d7b690 <col:40> 'int' 8
|-CXXMethodDecl 0x55bf57d7b8e0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55bf57d7b980 <col:68> "" ""
|-CXXMethodDecl 0x55bf57d7ba18 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55bf57d7bab8 <col:45> "" ""
|-CXXMethodDecl 0x55bf57d7bb50 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55bf57d7bbf0 <col:57> "" ""
|-CXXMethodDecl 0x55bf57d7bc88 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55bf57d7bd28 <col:45> "" ""
|-CXXMethodDecl 0x55bf57d7bdc0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55bf57d7be60 <col:57> "" ""
|-CXXMethodDecl 0x55bf57d7bef0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55bf57d7bf90 <col:51> "" ""
|-CXXMethodDecl 0x55bf57d7c020 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55bf57d7c0c0 <col:63> "" ""
|-CXXMethodDecl 0x55bf57d7c150 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55bf57d7c1f0 <col:53> "" ""
|-CXXMethodDecl 0x55bf57d7c280 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55bf57d7c320 <col:65> "" ""
|-CXXMethodDecl 0x55bf57d7c438 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55bf57d7c3a8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55bf57d7c4e0 <col:61> "" ""
|-CXXMethodDecl 0x55bf57d7c678 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55bf57d7c568 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55bf57d7c5e0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55bf57d7c728 <col:67> "" ""
|-CXXMethodDecl 0x55bf57d7c840 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55bf57d7c7b0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55bf57d7c8e8 <col:63> "" ""
|-CXXMethodDecl 0x55bf57d7ca80 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55bf57d7c970 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bf57d7c9e8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55bf57d7cb30 <col:69> "" ""
|-CXXMethodDecl 0x55bf57d7cc48 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55bf57d7cbb8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55bf57d7ccf0 <col:63> "" ""
|-CXXMethodDecl 0x55bf57d7f908 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55bf57d7f7f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bf57d7f870 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bf57d7f9b8 <col:69> "" ""
|-CXXMethodDecl 0x55bf57d7fad0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55bf57d7fa40 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55bf57d7fb78 <col:62> "" ""
|-CXXMethodDecl 0x55bf57d7fd10 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55bf57d7fc00 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bf57d7fc78 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55bf57d7fdc0 <col:68> "" ""
|-CXXMethodDecl 0x55bf57d7fed8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55bf57d7fe48 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55bf57d7ff80 <col:63> "" ""
|-CXXMethodDecl 0x55bf57d80118 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55bf57d80008 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bf57d80080 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55bf57d801c8 <col:69> "" ""
|-CXXMethodDecl 0x55bf57d80258 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55bf57d802f8 <col:64> "" ""
|-CXXMethodDecl 0x55bf57d80388 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55bf57d80428 <col:52> "" ""
|-CXXMethodDecl 0x55bf57d804b8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55bf57d80558 <col:67> "" ""
|-CXXMethodDecl 0x55bf57d805e8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55bf57d80688 <col:55> "" ""
|-CXXMethodDecl 0x55bf57d807a0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55bf57d80710 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55bf57d80848 <col:58> "" ""
|-CXXMethodDecl 0x55bf57d809e0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55bf57d808d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bf57d80948 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55bf57d80a90 <col:62> "" ""
|-CXXMethodDecl 0x55bf57d80ba8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55bf57d80b18 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55bf57d80c50 <col:58> "" ""
|-CXXMethodDecl 0x55bf57d80de8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55bf57d80cd8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bf57d80d50 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55bf57d80e98 <col:62> "" ""
|-CXXMethodDecl 0x55bf57d80fb0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55bf57d80f20 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55bf57d81058 <col:60> "" ""
|-CXXMethodDecl 0x55bf57d811f0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55bf57d810e0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55bf57d81158 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55bf57d812a0 <col:64> "" ""
|-CXXMethodDecl 0x55bf57d813b8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55bf57d81328 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55bf57d81460 <col:58> "" ""
|-CXXMethodDecl 0x55bf57d815f8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55bf57d814e8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bf57d81560 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55bf57d816a8 <col:62> "" ""
|-CXXMethodDecl 0x55bf57d817c0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55bf57d81730 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55bf57d81868 <col:59> "" ""
|-CXXMethodDecl 0x55bf57d81a00 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55bf57d818f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bf57d81968 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bf57d81ab0 <col:63> "" ""
|-AccessSpecDecl 0x55bf57d81b20 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55bf57d81b48 prev 0x55bf57d76810 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bf57d81c40 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55bf57d81d30 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55bf57d81e58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55bf57d81fd8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55bf57d82158 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55bf57d822d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55bf57d93148 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55bf57d939b8 <col:11>
| |-CXXDestructorDecl 0x55bf57d93220 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55bf57d93358 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55bf57d93358
| | `-ParmVarDecl 0x55bf57d93468 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55bf57d93508 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bf57d93508
| | `-ParmVarDecl 0x55bf57d93618 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55bf57d98de8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bf57d98ef8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55bf57d99178 <col:11>
| |   `-ReturnStmt 0x55bf57d99168 <col:11>
| |     `-UnaryOperator 0x55bf57d99150 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55bf57d99140 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55bf57d98f68 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bf57d98f68
|   `-ParmVarDecl 0x55bf57d99078 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55bf57d82340 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bf57d82458 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55bf57d824f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55bf57d82560 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55bf57d825c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55bf57d82630 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55bf57d82690 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55bf57d82750 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55bf57d827b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55bf57d82810 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55bf57d93058 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55bf57d824f8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55bf57d939c8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55bf57d93a20 <col:12>
| |-CXXConstructorDecl 0x55bf57d93688 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55bf57d93688
| | `-ParmVarDecl 0x55bf57d93798 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55bf57d93838 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55bf57d93838
| | `-ParmVarDecl 0x55bf57d93948 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55bf57d984d0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55bf57d82888 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55bf57d828e8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55bf57d82950 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55bf57d829b8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55bf57d82a20 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55bf57d82a88 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55bf57d82ae8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55bf57d82b48 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55bf57d82bb0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55bf57d82c38 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55bf57d82888 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55bf57d92ff0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55bf57d82ae8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55bf57d93a30 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55bf57d93a90 <col:21, line:755:5>
|-CXXConstructorDecl 0x55bf57d82dd8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55bf57d82d18 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55bf57d82ed0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55bf57d830b8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55bf57d82fc0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55bf57d83388 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55bf57d83170 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bf57d831e8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bf57d83260 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57d835a8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55bf57d83458 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55bf57d834d0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55bf57d8bbc8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55bf57d83668 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55bf57d836e0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55bf57d83758 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55bf57d8bd20 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55bf57d8bc90 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57d8be68 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55bf57d8bdd8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55bf57d8bf60 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57d96540 prev 0x55bf57d6fe70 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55bf57d96678 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55bf57d96708 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55bf57d967b0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55bf57d96850 <col:20>
| `-OptimizeNoneAttr 0x55bf57d968a8 <col:30>
|-CXXMethodDecl 0x55bf57d968f8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55bf57d96998 <col:20>
| `-OptimizeNoneAttr 0x55bf57d969f0 <col:30>
|-CXXMethodDecl 0x55bf57d96a40 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bf57d96b08 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bf57d96bd0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bf57d96ce8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55bf57d96db0 <line:786:5, col:72> col:55 used network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55bf57d96e50 <col:20>
| `-OptimizeNoneAttr 0x55bf57d96ea8 <col:30>
|-CXXMethodDecl 0x55bf57d96f18 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55bf57d96fb8 <col:20>
| `-OptimizeNoneAttr 0x55bf57d97010 <col:30>
|-CXXMethodDecl 0x55bf57d970b8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55bf57d97158 <col:20>
| `-OptimizeNoneAttr 0x55bf57d971b0 <col:30>
|-CXXMethodDecl 0x55bf57d97200 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bf57d97318 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55bf57d97438 <line:791:5, col:36> col:23 used tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55bf57d97558 <line:792:5, col:36> col:23 used udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55bf57d97620 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55bf57d976c0 <col:62> "" ""
|-AccessSpecDecl 0x55bf57d97730 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55bf57d97790 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55bf57d98388 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55bf57d985b0 <col:29, col:31>
|-CXXMethodDecl 0x55bf57d97858 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55bf57d97998 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55bf57d97908 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55bf57d97a90 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55bf57d985c0 <col:23, col:25>
|-CXXMethodDecl 0x55bf57d97c48 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55bf57d97b80 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55bf57d97f18 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55bf57d97d00 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bf57d97d78 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bf57d97df0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bf57d980a8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55bf57d97fe0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55bf57d981a0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55bf57d98208 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55bf57d98208
  `-ParmVarDecl 0x55bf57d98318 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57add928 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57adda48 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55bf57addb10 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55bf57bae300 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bf57bb3618 <col:8>
|-CXXConstructorDecl 0x55bf57bae408 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55bf57bae408
| `-ParmVarDecl 0x55bf57bae518 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55bf57bae5b8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bf57bae6c8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55bf57addb10 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bf57bb3830 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bf57bb3800 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55bf57addb10
| |     `-CXXStaticCastExpr 0x55bf57bb37d0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55bf57bb37a0 <col:8> 'in_addr' lvalue ParmVar 0x55bf57bae6c8 '' 'in_addr &&'
| `-CompoundStmt 0x55bf57bb3878 <col:8>
`-CXXDestructorDecl 0x55bf57bb3ab0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57ba6ff8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bf57ba7118 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55bf57ba7200 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55bf57ba71e0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55bf57ba71a8 <col:22> 'int' 4
|-FieldDecl 0x55bf57ba72a8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55bf57ba7288 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55bf57ba7250 <col:21> 'int' 4
|-FieldDecl 0x55bf57ba7308 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55bf57ba7368 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55bf57ba73c8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55bf57ba7428 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55bf57ba7488 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55bf57ba74e8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55bf57ba7548 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55bf57ba75b8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55bf57ba7628 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57e8b030 prev 0x55bf57d6fc60 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bf57e8b128 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x55bf57e8b1c8 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bf57e8b228 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bf57e8b2b0 <line:27:5, col:15> col:15 th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55bf57e8b310 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55bf57e8b3b8 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x55bf57e8b398 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x55bf57e8b360 <col:26> 'int' 4
|-FieldDecl 0x55bf57e8b460 <line:31:5, col:23> col:14 th_off 'unsigned int'
| `-ConstantExpr 0x55bf57e8b440 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x55bf57e8b408 <col:23> 'int' 4
|-FieldDecl 0x55bf57e8b4c0 <line:39:5, col:13> col:13 th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x55bf57e8b520 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x55bf57e8b580 <line:49:5, col:14> col:14 referenced th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x55bf57e8b5e0 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57e8b648 prev 0x55bf57d6fd10 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bf57e8b740 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x55bf57e8b7e0 <line:12:5, col:14> col:14 uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bf57e8b840 <line:13:5, col:14> col:14 uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bf57e8b8a0 <line:14:5, col:14> col:14 uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x55bf57e8b900 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IPAddress>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IPAddress * _ptr
        24 |   class IPAddress _slot
        24 |     uint32_t _addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bf57ee3dd8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55bf57ee41d8 prev 0x55bf57ee3dd8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55bf57ee43d0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55bf57ee42d8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55bf57ee5318 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55bf57ee4550 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55bf57ee52d8 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bf57ee5298 <col:20> 'String *' lvalue ParmVar 0x55bf57ee42d8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55bf57ee45b0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55bf57ee5378 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55bf57e59c20 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55bf57ee4490 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55bf57e33dc0 Slot::store 'void ()' ]
| `-CompoundStmt 0x55bf57ee5ab8 <col:22, line:857:9>
|   `-CallExpr 0x55bf57ee5a70 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55bf57ee5a58 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55bf57ee59d8 <col:13> 'void (String &, const String &)' lvalue Function 0x55bf57ee58b8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55bf57b08e08 'assign_consume')
|     |-UnaryOperator 0x55bf57ee5508 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55bf57ee54f0 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55bf57ee54c0 <col:29> 'String *' lvalue ->_ptr 0x55bf57ee4550
|     |     `-CXXThisExpr 0x55bf57ee54b0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55bf57ee5aa0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55bf57ee5530 <col:35> 'String':'String' lvalue ->_slot 0x55bf57ee45b0
|         `-CXXThisExpr 0x55bf57ee5520 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55bf57ee4550 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55bf57ee45b0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55bf57ee4628 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55bf57ee4628
| `-ParmVarDecl 0x55bf57ee4738 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55bf57ee47d8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55bf57ee47d8
| `-ParmVarDecl 0x55bf57ee48e8 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55bf57ee4988 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55bf57ee4988
| `-ParmVarDecl 0x55bf57ee4a98 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55bf57ee4b08 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55bf57ee4b08
| `-ParmVarDecl 0x55bf57ee4c18 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55bf57ee4ca0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55bf57e33cc0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55bf57ee53e0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IPAddress> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bf57bb6910 prev 0x55bf57ba9d08 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bf57bb6a08 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x55bf57bb6a98 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x55bf57bb6ec0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x55bf57bb6ad8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x55bf57bb6b58 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x55bf57bb6c90 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x55bf57bb6d40 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x55bf57bb7188 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x55bf57bb6f90 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55bf57bb7008 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x55bf57bb70a8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55bf57bbbb28 <col:34> 'const ArgContext' lvalue Var 0x55bf57ba9ca0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55bf57bbb580 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55bf57bb7250 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55bf57bb7340 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x55bf57bb73b8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55bf57bbbb48 <col:34> 'const ArgContext' lvalue Var 0x55bf57ba9ca0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55bf57bbbd28 <col:46, line:375:5>
|   `-ReturnStmt 0x55bf57bbbd18 <line:374:2, col:63>
|     `-CallExpr 0x55bf57bbbce0 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x55bf57bbbcc8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bf57bbbc80 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x55bf57bb7188 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x55bf57bbbbe0 <col:15> 'const String' lvalue ParmVar 0x55bf57bb7250 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55bf57bbbc30 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55bf57bbbc00 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55bf57bb7340 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x55bf57bbbc60 <col:59> 'const ArgContext' lvalue ParmVar 0x55bf57bb73b8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55bf57bbba58 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x55bf57bbb648 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55bf57bbb8c0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x55bf57bbb938 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55bf57bbbb68 <col:34> 'const ArgContext' lvalue Var 0x55bf57ba9ca0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x55bf57eee3d8 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55bf57eee4b0 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bf57eee5e8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x55bf57eee5e8
| `-ParmVarDecl 0x55bf57eee6f8 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x55bf57eee798 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55bf57eee8a8 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x55bf57eef500 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bf57bbcb58 <../dummy_inc/click/ipaddress.hh:398:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x55bf57bbcdb8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55bf57eee2e8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bf57eee918 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IPAddress> &)' inline default trivial noexcept-unevaluated 0x55bf57eee918
| `-ParmVarDecl 0x55bf57eeea28 <col:19> col:19 'const DefaultArg<IPAddress> &'
|-CXXConstructorDecl 0x55bf57eeeac8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IPAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bf57eeebd8 <col:19> col:19 used 'DefaultArg<IPAddress> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55bf57eef510 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55bf57eef4e0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55bf57eef4b0 <col:19> 'DefaultArg<IPAddress>' xvalue static_cast<struct DefaultArg<class IPAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x55bf57eef480 <col:19> 'DefaultArg<IPAddress>' lvalue ParmVar 0x55bf57eeebd8 '' 'DefaultArg<IPAddress> &&'
| `-CompoundStmt 0x55bf57eef580 <col:19>
`-CXXDestructorDecl 0x55bf57eeec78 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
