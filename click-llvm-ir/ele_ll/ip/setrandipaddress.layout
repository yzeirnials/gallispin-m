
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3c8b298 prev 0x55e1a3c82a38 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e1a3c8b390 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55e1a3c8b420 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55e1a3c8b498 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55e1a3c8b558 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55e1a3c8b620 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55e1a3c8b798 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55e1a3c8b6d0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55e1a3c8b840 <col:24>
| `-OptimizeNoneAttr 0x55e1a3c8b898 <col:34>
|-CXXMethodDecl 0x55e1a3c8b8e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55e1a3c8bb98 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55e1a3c8b990 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e1a3c8ba08 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55e1a3c8ba88 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55e1a3c8bc50 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55e1a3c8bc88 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55e1a3c8bcf0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55e1a3c8bd78 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55e1a3c8c098 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55e1a3c8be30 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e1a3c8bea8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55e1a3c8bf20 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55e1a3c8bfa0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55e1a3c8c1b0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55e1a3c93b28 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e1a3c93b28
| `-ParmVarDecl 0x55e1a3c93c38 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55e1a3c93cd8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e1a3c93cd8
| `-ParmVarDecl 0x55e1a3c93de8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55e1a3d4dc40 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3c7e2b0 prev 0x55e1a3c7e030 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e1a3c7e3a8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55e1a3c7e438 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55e1a3c7e498 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55e1a3c7e588 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55e1a3c7e688 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55e1a3c7e858 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55e1a3c7e708 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55e1a3c7e780 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55e1a3c7e9e8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55e1a3c7e920 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55e1a3c7ea90 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c7ebc8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55e1a3c7eb00 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55e1a3c7ed68 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55e1a3c7eca8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55e1a3c7ef08 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55e1a3c7ee48 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55e1a3c7efb0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55e1a3c7f0b0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55e1a3c7f190 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c7f090 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55e1a3c7f070 <col:26> 'int' 1
| `-EnumConstantDecl 0x55e1a3c7f140 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55e1a3c7f1a8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3c7f120 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55e1a3c7f100 <col:44> 'int' 2
|-CXXMethodDecl 0x55e1a3c7f2f0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55e1a3c7f1d8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55e1a3c7f258 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55e1a3c7f448 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55e1a3c7f3b8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55e1a3c7f688 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55e1a3c7f508 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55e1a3c7f580 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55e1a3c7f738 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c7f790 <col:30>
|-CXXMethodDecl 0x55e1a3c7f898 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55e1a3c7f7d0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55e1a3c7f940 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c7f998 <col:30>
|-CXXMethodDecl 0x55e1a3c7f9e8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55e1a3c7fab0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55e1a3c7fbc8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55e1a3c7fc50 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55e1a3c7fcd8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55e1a3c7fd60 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55e1a3c7fde8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55e1a3c7fe78 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55e1a3c7ff38 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55e1a3c7ffc0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55e1a3c80048 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55e1a3c800d0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55e1a3c80158 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55e1a3c801e0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55e1a3c80270 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55e1a3c80330 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55e1a3c803c0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55e1a3c80510 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55e1a3c80478 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55e1a3c806a0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55e1a3c805d0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55e1a3c80950 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55e1a3c80758 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55e1a3c807d8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55e1a3c80858 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55e1a3c80a08 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55e1a3c80b10 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e1a3c80da0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c80af0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55e1a3c80ad0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55e1a3c80ba0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e1a3c80db8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c80b80 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55e1a3c80b60 <col:32> 'int' 20
| |-EnumConstantDecl 0x55e1a3c80c30 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e1a3c80dd0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c80c10 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55e1a3c80bf0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55e1a3c80cc0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e1a3c80de8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c80ca0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55e1a3c80c80 <col:35> 'int' 100
| `-EnumConstantDecl 0x55e1a3c80d50 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55e1a3c80e00 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3c80d30 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55e1a3c80d10 <col:32> 'int' 2000
|-CXXMethodDecl 0x55e1a3c80e40 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55e1a3c81280 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e1a3c810f0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e1a3c81168 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e1a3c81350 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55e1a3c814d0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55e1a3c81400 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e1a3c816d8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e1a3c81588 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55e1a3c81600 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e1a3c817d8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55e1a3c81878 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55e1a3c81940 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e1a3c819d0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55e1a3c81c00 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c819b0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55e1a3c81990 <col:36> 'int' EnumConstant 0x55e1a3c81940 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e1a3c81a20 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e1a3c81a70 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e1a3c81ac0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e1a3c81b10 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e1a3c81b60 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55e1a3c81bb0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55e1a3c81ce8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55e1a3c81c28 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55e1a3c81db0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55e1a3c81e70 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55e1a3c81f30 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55e1a3c81ff0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55e1a3c82108 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55e1a3c821d0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55e1a3c82350 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55e1a3c82280 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55e1a3c82478 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55e1a3c82678 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55e1a3c82528 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55e1a3c825a8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55e1a3c8ffc8 <col:54, line:127:5>
|   |-ParenExpr 0x55e1a3c8fe78 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55e1a3c8fe48 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c8fb38 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e1a3c8fb10 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55e1a3c8faf8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55e1a3c8fae0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55e1a3c8fab0 <col:31> 'Router *' lvalue ->_router 0x55e1a3c8d990
|   |   |         `-CXXThisExpr 0x55e1a3c8faa0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e1a3c8fb98 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c8fb78 <col:48> 'int' 0
|   |   `-CallExpr 0x55e1a3c8fda8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c8fd90 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c8fd70 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c8fde8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c8fc08 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55e1a3c8fe00 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c8fc28 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c8fe18 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c8fc60 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55e1a3c8fe30 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c8fd58 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c8fd40 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c8fcf8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55e1a3c8ff10 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55e1a3c8fea8 <col:9> 'Router *' lvalue ->_router 0x55e1a3c8d990
|   | | `-CXXThisExpr 0x55e1a3c8fe98 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55e1a3c8fef8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e1a3c8fed8 <col:19> 'Router *' lvalue ParmVar 0x55e1a3c82528 'r' 'Router *'
|   `-BinaryOperator 0x55e1a3c8ffa8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55e1a3c8ff40 <col:9> 'int' lvalue ->_eindex 0x55e1a3c8d9f8
|     | `-CXXThisExpr 0x55e1a3c8ff30 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55e1a3c8ff90 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e1a3c8ff70 <col:19> 'int' lvalue ParmVar 0x55e1a3c825a8 'eindex' 'int'
|-CXXMethodDecl 0x55e1a3c82800 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55e1a3c82738 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55e1a3c828d0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55e1a3c82998 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55e1a3c82a38 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55e1a3c82c88 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55e1a3c82b00 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55e1a3c82b80 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55e1a3c82d38 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c82d90 <col:30>
|-CXXMethodDecl 0x55e1a3c82e98 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e1a3c82dd0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55e1a3c82f40 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c82f98 <col:30>
|-CXXMethodDecl 0x55e1a3c83068 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e1a3c82fd8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55e1a3c83110 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c83168 <col:30>
|-CXXMethodDecl 0x55e1a3c832f8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55e1a3c831a0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55e1a3c83220 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55e1a3c83488 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e1a3c833c0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e1a3c835d8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e1a3c83548 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e1a3c83728 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e1a3c83698 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e1a3c83878 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e1a3c837e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e1a3c83b38 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55e1a3c83930 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55e1a3c839b0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55e1a3c83a58 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55e1a3c83c10 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55e1a3c83cd0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55e1a3c83fa0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e1a3c83e50 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55e1a3c83ec8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55e1a3c840c8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55e1a3c842a0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55e1a3c84180 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55e1a3c84200 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55e1a3c84488 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55e1a3c84368 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55e1a3c843e8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55e1a3c847f8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e1a3c84548 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e1a3c845c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e1a3c84640 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e1a3c8f5b0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e1a3c8f590 <col:106> 'int' 0
| `-ParmVarDecl 0x55e1a3c846b8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e1a3c8f5e8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e1a3c8f5c8 <col:126> 'int' 0
|-CXXMethodDecl 0x55e1a3c84b98 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e1a3c848c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e1a3c84960 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e1a3c849e0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55e1a3c84a58 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e1a3c8f620 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e1a3c8f600 <col:114> 'int' 0
|-CXXMethodDecl 0x55e1a3c84f28 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e1a3c84c70 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55e1a3c84ce8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e1a3c84d68 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55e1a3c8f638 <col:96> 'int' 0
| `-ParmVarDecl 0x55e1a3c84de0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e1a3c8f678 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e1a3c8f658 <col:116> 'int' 0
|-CXXMethodDecl 0x55e1a3c852a8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e1a3c84ff8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e1a3c85070 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3c850f0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e1a3c8f6b0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e1a3c8f690 <col:109> 'int' 0
| `-ParmVarDecl 0x55e1a3c85168 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e1a3c8f6e8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e1a3c8f6c8 <col:129> 'int' 0
|-CXXMethodDecl 0x55e1a3c85628 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e1a3c85378 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e1a3c853f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3c85470 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55e1a3c854e8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e1a3c8f720 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e1a3c8f700 <col:117> 'int' 0
|-CXXMethodDecl 0x55e1a3c859b8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e1a3c85700 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c85778 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3c857f8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55e1a3c8f738 <col:99> 'int' 0
| `-ParmVarDecl 0x55e1a3c85870 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e1a3c8f778 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e1a3c8f758 <col:119> 'int' 0
|-CXXMethodDecl 0x55e1a3c85dd8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55e1a3c85a88 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e1a3c85b08 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e1a3c85b80 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3c85c00 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e1a3c8f7b0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e1a3c8f790 <col:108> 'int' 0
| `-ParmVarDecl 0x55e1a3c85c80 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55e1a3c8f7e8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55e1a3c8f7c8 <col:141> 'int' 0
|-CXXMethodDecl 0x55e1a3c861f8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e1a3c85eb0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e1a3c85f30 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e1a3c85fa8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3c86028 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55e1a3c860a8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e1a3c8f800 <col:121> 'int' 0
|-CXXMethodDecl 0x55e1a3c86628 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e1a3c862d8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55e1a3c86358 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55e1a3c863d0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3c86450 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55e1a3c8f820 <col:98> 'int' 0
| `-ParmVarDecl 0x55e1a3c864d0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e1a3c8f840 <col:123> 'int' 0
|-CXXMethodDecl 0x55e1a3c868f0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55e1a3c86700 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e1a3c86780 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55e1a3c86800 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55e1a3c8f860 <col:80> 'int' 0
|-EnumDecl 0x55e1a3c869a8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55e1a3c86ab0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e1a3c86d40 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c86a90 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55e1a3c86a70 <col:42> 'int' 1
| |-EnumConstantDecl 0x55e1a3c86b40 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e1a3c86d58 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c86b20 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55e1a3c86b00 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e1a3c86bd0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e1a3c86d70 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c86bb0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55e1a3c86b90 <col:44> 'int' 4
| |-EnumConstantDecl 0x55e1a3c86c60 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e1a3c86d88 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c86c40 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55e1a3c86c20 <col:36> 'int' 7
| `-EnumConstantDecl 0x55e1a3c86cf0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55e1a3c86da0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3c86cd0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55e1a3c86cb0 <col:34> 'int' 6
|-CXXMethodDecl 0x55e1a3c87058 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55e1a3c86dc8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55e1a3c86e68 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e1a3c86ee8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55e1a3c86f60 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55e1a3c8f918 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55e1a3c8f900 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55e1a3c8f8e8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55e1a3c8f8c8 <col:98, col:105> 'String' (CXXTemporary 0x55e1a3c8f8c8)
|           `-CXXTemporaryObjectExpr 0x55e1a3c8f890 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55e1a3c872f8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55e1a3c87128 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e1a3c871a0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e1a3c87218 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e1a3c8f9c8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e1a3c8f9b0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e1a3c8f998 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e1a3c8f978 <col:94, col:101> 'String' (CXXTemporary 0x55e1a3c8f978)
| |         `-CXXTemporaryObjectExpr 0x55e1a3c8f940 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55e1a3c901b0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55e1a3c90128 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55e1a3c900f8 <col:9> '<bound member function type>' ->add_task_handlers 0x55e1a3c87058
|     | `-CXXThisExpr 0x55e1a3c900e8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e1a3c90168 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e1a3c90068 <col:27> 'Task *' lvalue ParmVar 0x55e1a3c87128 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e1a3c90180 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e1a3c90088 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55e1a3c871a0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55e1a3c90198 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e1a3c900a8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e1a3c86cf0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e1a3c900c8 <col:62> 'const String' lvalue ParmVar 0x55e1a3c87218 'prefix' 'const String &'
|-CXXMethodDecl 0x55e1a3c87508 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55e1a3c873c0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e1a3c87438 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e1a3c8fa78 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e1a3c8fa60 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e1a3c8fa48 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e1a3c8fa28 <col:70, col:77> 'String' (CXXTemporary 0x55e1a3c8fa28)
| |         `-CXXTemporaryObjectExpr 0x55e1a3c8f9f0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55e1a3c90388 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55e1a3c90300 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55e1a3c902d0 <col:9> '<bound member function type>' ->add_task_handlers 0x55e1a3c87058
|     | `-CXXThisExpr 0x55e1a3c902c0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e1a3c90340 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e1a3c90240 <col:27> 'Task *' lvalue ParmVar 0x55e1a3c873c0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e1a3c90358 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55e1a3c90260 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55e1a3c90370 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e1a3c90280 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e1a3c86cf0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e1a3c902a0 <col:57> 'const String' lvalue ParmVar 0x55e1a3c87438 'prefix' 'const String &'
|-CXXMethodDecl 0x55e1a3c877e8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55e1a3c875d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c87650 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c876c8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55e1a3c87a98 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55e1a3c878b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c87938 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c879b8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55e1a3c87d88 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e1a3c87b68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c87be8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c87c60 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55e1a3c88038 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55e1a3c87e58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c87ed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c87f58 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55e1a3c882e8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55e1a3c88108 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c88188 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c88208 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55e1a3c88598 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55e1a3c883b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c88438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c884b0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55e1a3c88848 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55e1a3c88668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c886e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c88768 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55e1a3c88b58 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55e1a3c88970 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c889f0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c88a70 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55e1a3c88e38 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55e1a3c88c28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c88ca8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c88d50 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55e1a3c89118 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55e1a3c88f08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c88f88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c89030 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55e1a3c89380 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e1a3c891e8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e1a3c89268 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e1a3c892e0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55e1a3c89628 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55e1a3c89450 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e1a3c894d0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e1a3c89548 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55e1a3c898d8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55e1a3c896f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c89778 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c897f8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55e1a3c89b88 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55e1a3c899a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c89a28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c89aa0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55e1a3c89e38 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55e1a3c89c58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c89cd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c89d50 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55e1a3c8a108 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55e1a3c89f08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c89f88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e1a3c8a028 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55e1a3c8a438 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55e1a3c8a1d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e1a3c8a258 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55e1a3c8a2d0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55e1a3c8a348 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e1a3c8fa90 <col:93> 'bool' false
|-CXXMethodDecl 0x55e1a3c8a620 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e1a3c8a508 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55e1a3c8a588 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55e1a3c8a7f8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e1a3c8a6e0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55e1a3c8a760 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55e1a3c8aad8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e1a3c8a8b8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55e1a3c8a930 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55e1a3c8a9b0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55e1a3c8aa28 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55e1a3c8adc8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e1a3c8aba8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55e1a3c8ac20 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55e1a3c8aca0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55e1a3c8ad18 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55e1a3c8b000 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55e1a3c8aea0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55e1a3c8af20 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55e1a3c8b1e8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55e1a3c8b0c8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55e1a3c8b148 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55e1a3c8b298 prev 0x55e1a3c82a38 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e1a3c8b390 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55e1a3c8b420 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55e1a3c8b498 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55e1a3c8b558 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55e1a3c8b620 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55e1a3c8b798 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55e1a3c8b6d0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55e1a3c8b840 <col:24>
| | `-OptimizeNoneAttr 0x55e1a3c8b898 <col:34>
| |-CXXMethodDecl 0x55e1a3c8b8e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55e1a3c8bb98 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55e1a3c8b990 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e1a3c8ba08 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55e1a3c8ba88 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55e1a3c8bc50 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55e1a3c8bc88 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55e1a3c8bcf0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55e1a3c8bd78 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55e1a3c8c098 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55e1a3c8be30 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e1a3c8bea8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55e1a3c8bf20 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55e1a3c8bfa0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55e1a3c8c1b0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55e1a3c93b28 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e1a3c93b28
| | `-ParmVarDecl 0x55e1a3c93c38 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55e1a3c93cd8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e1a3c93cd8
| | `-ParmVarDecl 0x55e1a3c93de8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55e1a3d4dc40 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e1a3c8c228 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55e1a3c8c2c8 <col:38> "" ""
|-CXXMethodDecl 0x55e1a3c8c358 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55e1a3c8c3f8 <col:44> "" ""
|-AccessSpecDecl 0x55e1a3c8c468 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55e1a3c8c490 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55e1a3c8c590 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55e1a3c8c5e0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3c8c570 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55e1a3c8c550 <col:27> 'int' 4
|-FieldDecl 0x55e1a3c8c698 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55e1a3c8c848 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55e1a3c8c900 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55e1a3c8d990 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55e1a3c8d9f8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55e1a3c8db48 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55e1a3c8da88 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55e1a3c8dcf8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55e1a3c8dc08 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55e1a3c8ded8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55e1a3c8ddb8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55e1a3c8de38 <col:25> col:28 'int'
|-CXXMethodDecl 0x55e1a3c8e180 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3c8dfa0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55e1a3c8e020 <col:28> col:31 'int'
| `-ParmVarDecl 0x55e1a3c8e098 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55e1a3c8e238 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55e1a3c8e300 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55e1a3c8e350 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55e1a3c8e3a0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55e1a3c8e580 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55e1a3c8e430 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55e1a3c8e4a8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e1a3c8e828 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55e1a3c8e648 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55e1a3c8e6c8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55e1a3c8e740 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55e1a3c8ea48 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55e1a3c8e8f8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55e1a3c8e978 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55e1a3c8ed80 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55e1a3c8eb08 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55e1a3c8eb88 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55e1a3c8ec00 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55e1a3c8ec80 <col:57> col:60 'int'
|-CXXMethodDecl 0x55e1a3c8ef68 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e1a3c8ee50 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55e1a3c8eed0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55e1a3c8f0b8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55e1a3c8f028 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55e1a3c8f438 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55e1a3c8f178 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55e1a3c8f1f8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55e1a3c8f270 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55e1a3c8f2f0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55e1a3c8f550 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetRandIPAddress
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class IPAddress _ip
       108 |     uint32_t _addr
       112 |   class IPAddress _mask
       112 |     uint32_t _addr
       116 |   int _max
       120 |   class IPAddress * _addrs
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3a7f280 prev 0x55e1a39e42b8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e1a3a7f378 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55e1a3a7f408 <col:19, col:25> col:19 public
|-TypedefDecl 0x55e1a3a7f440 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55e1a3871b90 'uninitialized_type'
|   `-CXXRecord 0x55e1a3871af8 'uninitialized_type'
|-CXXConstructorDecl 0x55e1a3a7f500 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55e1a3a82c50 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e1a3a82cf8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55e1a3a82cb8 <col:10> 'int' 0
| `-CompoundStmt 0x55e1a3a82d40 <col:13, line:22:5>
|-CXXConstructorDecl 0x55e1a3a7f650 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55e1a3a7f5c0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55e1a3a82c50 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e1a3a82d90 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55e1a3a82d50 <col:10> 'unsigned int' lvalue ParmVar 0x55e1a3a7f5c0 'x' 'unsigned int'
| `-CompoundStmt 0x55e1a3a82dd8 <col:13, line:27:5>
|-CXXConstructorDecl 0x55e1a3a7f7a8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55e1a3a7f718 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55e1a3a82c50 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e1a3a82e40 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55e1a3a82e28 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55e1a3a82de8 <col:10> 'int' lvalue ParmVar 0x55e1a3a7f718 'x' 'int'
| `-CompoundStmt 0x55e1a3a82e88 <col:13, line:31:5>
|-CXXConstructorDecl 0x55e1a3a7f900 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55e1a3a7f870 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55e1a3a82c50 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e1a3a82ef0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55e1a3a82ed8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55e1a3a82e98 <col:10> 'unsigned long' lvalue ParmVar 0x55e1a3a7f870 'x' 'unsigned long'
| `-CompoundStmt 0x55e1a3a82f38 <col:13, line:35:5>
|-CXXConstructorDecl 0x55e1a3a7fa58 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55e1a3a7f9c8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55e1a3a82c50 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e1a3a82fa0 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55e1a3a82f88 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55e1a3a82f48 <col:10> 'long' lvalue ParmVar 0x55e1a3a7f9c8 'x' 'long'
| `-CompoundStmt 0x55e1a3a82fe8 <col:13, line:39:5>
|-CXXConstructorDecl 0x55e1a3a7fc18 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55e1a3a7fb28 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55e1a3a82c50 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e1a3a83068 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55e1a3a83018 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55e1a39b3070
| |     `-DeclRefExpr 0x55e1a3a82ff8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55e1a3a7fb28 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55e1a3a830b0 <col:20, line:44:5>
|-CXXConstructorDecl 0x55e1a3a7fda8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55e1a3a7fce0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55e1a3a83218 <col:51, line:56:5>
|   `-BinaryOperator 0x55e1a3a831f8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55e1a3a830d0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55e1a3a82c50
|     | `-CXXThisExpr 0x55e1a3a830c0 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55e1a3a831e0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55e1a3a831c8 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55e1a3a831a8 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55e1a3a83178 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55e1a3a83160 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55e1a3a83100 <col:47> 'const unsigned char *' lvalue ParmVar 0x55e1a3a7fce0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55e1a3a7fef8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55e1a3a7fe68 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55e1a3a800a8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55e1a3a7ffe8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55e1a3a83288 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55e1a3a83260 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55e1a3a83230 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55e1a3a7ffe8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55e1a3a80238 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55e1a3a80170 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55e1a3a80328 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55e1a3a84248 <col:46, line:83:5>
|   `-ReturnStmt 0x55e1a3a84238 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55e1a3a84220 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55e1a3a841f0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55e1a3a840a8 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55e1a3a83f90 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55e1a3a83e78 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55e1a3a832b0 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55e1a3a80418 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55e1a3a842f8 <col:31, line:88:5>
|   `-ReturnStmt 0x55e1a3a842e8 <line:87:2, col:10>
|     `-UnaryOperator 0x55e1a3a842d0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55e1a3a842b8 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55e1a3a842a0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55e1a3a84270 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e1a3a82c50
|             `-CXXThisExpr 0x55e1a3a84260 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55e1a3a804d8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55e1a3a84378 <col:34, line:93:5>
|   `-ReturnStmt 0x55e1a3a84368 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55e1a3a84350 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55e1a3a84320 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e1a3a82c50
|         `-CXXThisExpr 0x55e1a3a84310 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55e1a3a805a8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55e1a3a843f8 <col:38, line:101:5>
|   `-ReturnStmt 0x55e1a3a843e8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55e1a3a843d0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55e1a3a843a0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e1a3a82c50
|         `-CXXThisExpr 0x55e1a3a84390 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55e1a3a80678 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55e1a3a846c8 <col:38, line:108:5>
|   `-ReturnStmt 0x55e1a3a846b8 <line:107:2, col:58>
|     `-BinaryOperator 0x55e1a3a84698 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55e1a3a845b0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55e1a3a84590 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55e1a3a84578 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55e1a3a84420 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e1a3a82c50
|       |   |   `-CXXThisExpr 0x55e1a3a84410 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55e1a3a84550 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55e1a3a84538 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e1a3a844b8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55e1a39c15a8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55e1a3a84498 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55e1a3a84670 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55e1a3a84658 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55e1a3a84638 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55e1a39c15a8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55e1a3a84618 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55e1a3a80738 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55e1a3a84938 <col:39, line:112:5>
|   `-ReturnStmt 0x55e1a3a84928 <line:111:2, col:56>
|     `-BinaryOperator 0x55e1a3a84908 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55e1a3a84820 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55e1a3a84800 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55e1a3a847e8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55e1a3a846f0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e1a3a82c50
|       |   |   `-CXXThisExpr 0x55e1a3a846e0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55e1a3a847c0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55e1a3a847a8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e1a3a84788 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55e1a39c15a8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55e1a3a84768 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55e1a3a848e0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55e1a3a848c8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55e1a3a848a8 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55e1a39c15a8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55e1a3a84888 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55e1a3a80868 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55e1a3a80970 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55e1a3a80a80 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55e1a3a81b48 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e1a3a81c08 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55e1a3a81cd0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55e1a3a81ec8 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55e1a3a81d80 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55e1a3a81df8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55e1a3a82048 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55e1a3a81f88 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55e1a3a82190 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55e1a3a82100 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55e1a3a82338 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55e1a3a82248 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55e1a3a82480 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55e1a3a823f0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55e1a3a825c8 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55e1a3a82538 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55e1a3a82690 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55e1a3a82750 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55e1a3a828c8 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55e1a3a82800 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55e1a3a82990 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55e1a3a82a78 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55e1a3a82b20 <col:51> "" ""
|-TypedefDecl 0x55e1a3a82bc0 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55e1a39e4350 'IPAddress'
|   `-CXXRecord 0x55e1a3a7f280 'IPAddress'
|-AccessSpecDecl 0x55e1a3a82c18 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55e1a3a82c50 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55e1a3a832f8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55e1a3a832f8
| `-ParmVarDecl 0x55e1a3a83408 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55e1a3a834a8 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e1a3a835b8 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55e1a3a82c50 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e1a3a84198 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55e1a3a84150 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55e1a3a82c50
| |     `-CXXStaticCastExpr 0x55e1a3a84120 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55e1a3a840f0 <col:7> 'IPAddress' lvalue ParmVar 0x55e1a3a835b8 '' 'IPAddress &&'
| `-CompoundStmt 0x55e1a3a841e0 <col:7>
`-CXXDestructorDecl 0x55e1a3a83ea8 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3c96c98 <../elements/ip/setrandipaddress.hh:21:1, line:40:1> line:21:7 class SetRandIPAddress definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55e1a3c96df8 <col:1, col:7> col:7 implicit referenced class SetRandIPAddress
|-FieldDecl 0x55e1a3c96e98 <line:23:3, col:13> col:13 _ip 'IPAddress'
|-FieldDecl 0x55e1a3c96ef8 <line:24:3, col:13> col:13 _mask 'IPAddress'
|-FieldDecl 0x55e1a3c96f60 <line:25:3, col:7> col:7 referenced _max 'int'
|-FieldDecl 0x55e1a3c96fc0 <line:26:3, col:14> col:14 referenced _addrs 'IPAddress *'
|-AccessSpecDecl 0x55e1a3c97010 <line:28:2, col:8> col:2 public
|-CXXConstructorDecl 0x55e1a3c970a0 <line:30:3, col:20> col:3 SetRandIPAddress 'void ()'
|-CXXDestructorDecl 0x55e1a3c97190 <line:31:3, col:21> col:3 ~SetRandIPAddress 'void ()' noexcept-unevaluated 0x55e1a3c97190
| `-Overrides: [ 0x55e1a3c7e588 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55e1a3c972c0 <line:33:3, col:63> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55e1a3c7f9e8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55e1a3c97cc8 <col:34, col:63>
|   `-ReturnStmt 0x55e1a3c97cb8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55e1a3c97ca0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55e1a3c97c78 <col:43> 'const char [17]' lvalue "SetRandIPAddress"
|-CXXMethodDecl 0x55e1a3c97388 <line:34:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55e1a3c7fab0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55e1a3c97d28 <col:34, col:54>
|   `-ReturnStmt 0x55e1a3c97d18 <col:36, col:43>
|     `-ImplicitCastExpr 0x55e1a3c97d00 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55e1a3c97ce0 <col:43> 'const char []' lvalue Var 0x55e1a3c7fd60 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55e1a3c97660 <line:36:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55e1a3c81280 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55e1a3c97510 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55e1a3c97588 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55e1a3c977b0 <line:38:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55e1a3c7ebc8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55e1a3c97720 <col:25, col:32> col:33 'Packet *'
|-CXXMethodDecl 0x55e1a3c97878 <line:39:3, col:18> col:13 pick 'IPAddress ()'
|-CXXConstructorDecl 0x55e1a3c97948 <line:21:7> col:7 implicit SetRandIPAddress 'void (const SetRandIPAddress &)' inline default_delete noexcept-unevaluated 0x55e1a3c97948
| `-ParmVarDecl 0x55e1a3c97a58 <col:7> col:7 'const SetRandIPAddress &'
`-CXXMethodDecl 0x55e1a3c97af8 <col:7> col:7 implicit operator= 'SetRandIPAddress &(const SetRandIPAddress &)' inline default_delete noexcept-unevaluated 0x55e1a3c97af8
  `-ParmVarDecl 0x55e1a3c97c08 <col:7> col:7 'const SetRandIPAddress &'

Layout: <CGRecordLayout
  LLVMType:%class.SetRandIPAddress = type { %class.Element.base, %class.IPAddress, %class.IPAddress, i32, %class.IPAddress* }
  NonVirtualBaseLLVMType:%class.SetRandIPAddress = type { %class.Element.base, %class.IPAddress, %class.IPAddress, i32, %class.IPAddress* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3a52150 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e1a3a52268 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55e1a3a52308 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55e1a3a52368 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55e1a3a523c8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55e1a3a52478 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3a52780 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e1a3a52898 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55e1a3a52940 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55e1a3a529a8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55e1a3a52a38 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55e1a3a58ad0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e1a3a58f08 <col:12>
|-CXXConstructorDecl 0x55e1a3a58bd8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e1a3a58ce8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e1a3a52940 'data' 'const char *'
| | `-ImplicitCastExpr 0x55e1a3a5b490 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55e1a3a5b460 <col:12> 'const char *const' lvalue .data 0x55e1a3a52940
| |     `-DeclRefExpr 0x55e1a3a5b440 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a58ce8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e1a3a529a8 'length' 'int'
| | `-ImplicitCastExpr 0x55e1a3a5b520 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e1a3a5b4f0 <col:12> 'const int' lvalue .length 0x55e1a3a529a8
| |     `-DeclRefExpr 0x55e1a3a5b4d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a58ce8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e1a3a52a38 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55e1a3a5b5b0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55e1a3a5b580 <col:12> 'String::memo_t *const' lvalue .memo 0x55e1a3a52a38
| |     `-DeclRefExpr 0x55e1a3a5b560 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a58ce8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55e1a3a5b608 <col:12>
|-CXXConstructorDecl 0x55e1a3a58d88 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e1a3a58d88
| `-ParmVarDecl 0x55e1a3a58e98 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55e1a3a5e3f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e1a3a69e08 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e1a3a69f18 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55e1a3a6a430 <col:12>
|   |-BinaryOperator 0x55e1a3a6a248 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e1a3a6a200 <col:12> 'const char *' lvalue ->data 0x55e1a3a52940
|   | | `-CXXThisExpr 0x55e1a3a6a1f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e1a3a6a230 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55e1a3a6a1c0 <col:12> 'const char *const' lvalue .data 0x55e1a3a52940
|   |     `-DeclRefExpr 0x55e1a3a6a1a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a69f18 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e1a3a6a310 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55e1a3a6a2c8 <col:12> 'int' lvalue ->length 0x55e1a3a529a8
|   | | `-CXXThisExpr 0x55e1a3a6a2b8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e1a3a6a2f8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55e1a3a6a288 <col:12> 'const int' lvalue .length 0x55e1a3a529a8
|   |     `-DeclRefExpr 0x55e1a3a6a268 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a69f18 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e1a3a6a3d8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55e1a3a6a390 <col:12> 'String::memo_t *' lvalue ->memo 0x55e1a3a52a38
|   | | `-CXXThisExpr 0x55e1a3a6a380 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e1a3a6a3c0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55e1a3a6a350 <col:12> 'String::memo_t *const' lvalue .memo 0x55e1a3a52a38
|   |     `-DeclRefExpr 0x55e1a3a6a330 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a69f18 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55e1a3a6a420 <col:12>
|     `-UnaryOperator 0x55e1a3a6a408 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e1a3a6a3f8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55e1a3a69f88 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e1a3a69f88
  `-ParmVarDecl 0x55e1a3a6a098 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3a496c0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e1a3a497d8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55e1a3a49868 <col:16, col:22> col:16 public
|-TypedefDecl 0x55e1a3a498a8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55e1a371ddc0 'const char *'
|   `-QualType 0x55e1a371d311 'const char' const
|     `-BuiltinType 0x55e1a371d310 'char'
|-TypedefDecl 0x55e1a3a49930 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55e1a3a49900 'String::const_iterator' sugar
|   |-Typedef 0x55e1a3a498a8 'const_iterator'
|   `-PointerType 0x55e1a371ddc0 'const char *'
|     `-QualType 0x55e1a371d311 'const char' const
|       `-BuiltinType 0x55e1a371d310 'char'
|-TypedefDecl 0x55e1a3a49aa0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55e1a3a49a10 'int (String::*)() const'
|   |-RecordType 0x55e1a3a49750 'String'
|   | `-CXXRecord 0x55e1a3a496c0 'String'
|   `-ParenType 0x55e1a3a499b0 'int () const' sugar
|     `-FunctionProtoType 0x55e1a3a1d540 'int () const' const cdecl
|       `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3a49b08 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55e1a3872120 'int64_t' sugar
|   |-Typedef 0x55e1a37862d0 'int64_t'
|   `-TypedefType 0x55e1a375f4d0 '__int64_t' sugar
|     |-Typedef 0x55e1a375f0a8 '__int64_t'
|     `-BuiltinType 0x55e1a371d390 'long'
|-TypedefDecl 0x55e1a3a49b70 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55e1a3872040 'uint64_t' sugar
|   |-Typedef 0x55e1a3786470 'uint64_t'
|   `-TypedefType 0x55e1a375f560 '__uint64_t' sugar
|     |-Typedef 0x55e1a375f118 '__uint64_t'
|     `-BuiltinType 0x55e1a371d430 'unsigned long'
|-TypedefDecl 0x55e1a3a49c00 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55e1a3a49bd0 'String::intmax_t' sugar
|   |-Typedef 0x55e1a3a49b08 'intmax_t'
|   `-TypedefType 0x55e1a3872120 'int64_t' sugar
|     |-Typedef 0x55e1a37862d0 'int64_t'
|     `-TypedefType 0x55e1a375f4d0 '__int64_t' sugar
|       |-Typedef 0x55e1a375f0a8 '__int64_t'
|       `-BuiltinType 0x55e1a371d390 'long'
|-TypedefDecl 0x55e1a3a49c90 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55e1a3a49c60 'String::uintmax_t' sugar
|   |-Typedef 0x55e1a3a49b70 'uintmax_t'
|   `-TypedefType 0x55e1a3872040 'uint64_t' sugar
|     |-Typedef 0x55e1a3786470 'uint64_t'
|     `-TypedefType 0x55e1a375f560 '__uint64_t' sugar
|       |-Typedef 0x55e1a375f118 '__uint64_t'
|       `-BuiltinType 0x55e1a371d430 'unsigned long'
|-CXXConstructorDecl 0x55e1a3a49d50 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55e1a3a49ef8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55e1a3a49e38 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55e1a3a4a0a8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55e1a3a49fe8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55e1a3a4a200 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55e1a3a4a170 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55e1a3a4a418 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e1a3a4a2c8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55e1a3a4a348 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55e1a3a4a638 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55e1a3a4a4e8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55e1a3a4a568 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55e1a3a4a858 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e1a3a4a708 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55e1a3a4a788 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55e1a3a4aa78 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55e1a3a4a928 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55e1a3a4a9a8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55e1a3a4ac08 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55e1a3a4ab40 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55e1a3a4ad88 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55e1a3a4acc8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55e1a3a4af18 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55e1a3a4ae50 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55e1a3a4b070 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55e1a3a4afe0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55e1a3a4b1c8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55e1a3a4b138 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55e1a3a4b320 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55e1a3a4b290 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55e1a3a4b4a8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55e1a3a4b3e8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55e1a3a4b638 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55e1a3a4b570 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55e1a3a4b7c8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55e1a3a4b700 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55e1a3a4b958 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55e1a3a4b890 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55e1a3a4ba50 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55e1a3a4bb78 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55e1a3a4bcf8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55e1a3a4bc30 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55e1a3a4be48 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55e1a3a4bdb8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55e1a3a4bf00 <col:63> "" ""
|-CXXMethodDecl 0x55e1a3a4c048 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55e1a3a4bf88 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55e1a3a4c258 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55e1a3a4c108 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55e1a3a4c188 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55e1a3a4c478 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55e1a3a4c320 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55e1a3a4c3a0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55e1a3a4c758 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55e1a3a4c538 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55e1a3a4c5b8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55e1a3a585a0 <col:55> 'int' 10
| `-ParmVarDecl 0x55e1a3a4c630 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e1a3a585c0 <col:76> 'bool' true
|-CXXMethodDecl 0x55e1a3a4ca38 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55e1a3a4c820 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55e1a3a4c8a0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55e1a3a585d0 <col:56> 'int' 10
| `-ParmVarDecl 0x55e1a3a4c918 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e1a3a585f0 <col:77> 'bool' true
|-CXXMethodDecl 0x55e1a3a4cb40 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55e1a3a4cc08 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55e1a3a4ccd0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55e1a3a4cd70 <col:20>
| `-OptimizeNoneAttr 0x55e1a3a4cdc8 <col:30>
|-CXXConversionDecl 0x55e1a3a4ceb8 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55e1a3a4cf88 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55e1a3a4d048 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55e1a3a4d138 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e1a3a4d1f8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e1a3a4d378 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55e1a3a4d2b0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55e1a3a4d4c8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55e1a3a4d438 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55e1a3a4d5b8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55e1a3a4d678 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55e1a3a4d8c8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55e1a3a4d730 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55e1a3a4d7b0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55e1a3a4db28 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55e1a3a4d990 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55e1a3a4da10 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55e1a3a4dbf8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55e1a3a4de08 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55e1a3a4dcb0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55e1a3a4dd30 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55e1a3a4e028 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55e1a3a4ded0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55e1a3a4df50 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55e1a3a4e1b8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55e1a3a4e0f0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55e1a3a4e2a8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55e1a3a4e418 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e1a3a4e358 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e1a3a4e628 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55e1a3a4e4d8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e1a3a4e558 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e1a3a4e840 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55e1a3a4e6e8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55e1a3a4e760 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55e1a3a4e9d0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55e1a3a4e900 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e1a3a4ebf0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55e1a3a4ea90 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55e1a3a4eb10 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e1a3a4ed40 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e1a3a4ecb0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55e1a3a4ef18 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e1a3a4ee00 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e1a3a4ee80 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55e1a3a4f068 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55e1a3a4efd8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55e1a3a4f280 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55e1a3a4f120 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55e1a3a4f1a0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55e1a3a58600 <col:39> 'int' 0
|-CXXMethodDecl 0x55e1a3a4f4a0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55e1a3a4f340 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55e1a3a4f3c0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55e1a3a58620 <col:48> 'int' 0
|-CXXMethodDecl 0x55e1a3a4f680 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55e1a3a4f560 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55e1a3a4f5e0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55e1a3a58640 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55e1a3a4f750 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55e1a3a4f810 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55e1a3a4f8d0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55e1a3a4f990 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55e1a3a4fa50 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55e1a3a4fbf8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e1a3a4fb00 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55e1a3a4fd78 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55e1a3a4fcb0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55e1a3a4ff50 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e1a3a4fe38 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55e1a3a500c8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55e1a3a50008 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55e1a3a50210 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55e1a3a50180 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e1a3a50360 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55e1a3a502d0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55e1a3a50538 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e1a3a50420 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e1a3a504a0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e1a3a50718 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e1a3a50600 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55e1a3a50680 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55e1a3a50868 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55e1a3a507d8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55e1a3a50a78 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55e1a3a50928 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55e1a3a509a8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55e1a3a50bd8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55e1a3a50b40 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e1a3a50d30 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55e1a3a50c98 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55e1a3a50dd8 <col:57> "" ""
|-CXXMethodDecl 0x55e1a3a50ee8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e1a3a50e58 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55e1a3a51038 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e1a3a50fa8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55e1a3a511b8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55e1a3a510f0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55e1a3a51280 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55e1a3a51340 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55e1a3a51400 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55e1a3a514a0 <col:49> "" ""
|-CXXMethodDecl 0x55e1a3a51530 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55e1a3a515f0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55e1a3a516e0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55e1a3a517a8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55e1a3a51868 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55e1a3a51928 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55e1a3a51a20 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55e1a3a51ae8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55e1a3a51bb0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55e1a3a51d88 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55e1a3a51c68 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55e1a3a51ce8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55e1a3a51fb0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55e1a3a51e50 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55e1a3a51ed0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55e1a3a520c0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55e1a3a52128 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55e1a3a52150 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55e1a3a52268 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55e1a3a52308 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55e1a3a52368 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55e1a3a523c8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55e1a3a52478 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55e1a3a524e0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55e1a3a52718 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55e1a3a52768 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3a526f8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55e1a3a52608 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55e1a3a525b0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55e1a3a525f0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55e1a3a525d0 <col:32> 'int' 8
|-CXXRecordDecl 0x55e1a3a52780 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e1a3a52898 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55e1a3a52940 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55e1a3a529a8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55e1a3a52a38 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55e1a3a58ad0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e1a3a58f08 <col:12>
| |-CXXConstructorDecl 0x55e1a3a58bd8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e1a3a58ce8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e1a3a52940 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55e1a3a5b490 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55e1a3a5b460 <col:12> 'const char *const' lvalue .data 0x55e1a3a52940
| | |     `-DeclRefExpr 0x55e1a3a5b440 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a58ce8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e1a3a529a8 'length' 'int'
| | | `-ImplicitCastExpr 0x55e1a3a5b520 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55e1a3a5b4f0 <col:12> 'const int' lvalue .length 0x55e1a3a529a8
| | |     `-DeclRefExpr 0x55e1a3a5b4d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a58ce8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e1a3a52a38 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55e1a3a5b5b0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55e1a3a5b580 <col:12> 'String::memo_t *const' lvalue .memo 0x55e1a3a52a38
| | |     `-DeclRefExpr 0x55e1a3a5b560 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a58ce8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55e1a3a5b608 <col:12>
| |-CXXConstructorDecl 0x55e1a3a58d88 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e1a3a58d88
| | `-ParmVarDecl 0x55e1a3a58e98 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55e1a3a5e3f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55e1a3a69e08 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e1a3a69f18 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55e1a3a6a430 <col:12>
| |   |-BinaryOperator 0x55e1a3a6a248 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55e1a3a6a200 <col:12> 'const char *' lvalue ->data 0x55e1a3a52940
| |   | | `-CXXThisExpr 0x55e1a3a6a1f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e1a3a6a230 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e1a3a6a1c0 <col:12> 'const char *const' lvalue .data 0x55e1a3a52940
| |   |     `-DeclRefExpr 0x55e1a3a6a1a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a69f18 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e1a3a6a310 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55e1a3a6a2c8 <col:12> 'int' lvalue ->length 0x55e1a3a529a8
| |   | | `-CXXThisExpr 0x55e1a3a6a2b8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e1a3a6a2f8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55e1a3a6a288 <col:12> 'const int' lvalue .length 0x55e1a3a529a8
| |   |     `-DeclRefExpr 0x55e1a3a6a268 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a69f18 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e1a3a6a3d8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55e1a3a6a390 <col:12> 'String::memo_t *' lvalue ->memo 0x55e1a3a52a38
| |   | | `-CXXThisExpr 0x55e1a3a6a380 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e1a3a6a3c0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e1a3a6a350 <col:12> 'String::memo_t *const' lvalue .memo 0x55e1a3a52a38
| |   |     `-DeclRefExpr 0x55e1a3a6a330 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e1a3a69f18 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55e1a3a6a420 <col:12>
| |     `-UnaryOperator 0x55e1a3a6a408 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e1a3a6a3f8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55e1a3a69f88 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e1a3a69f88
|   `-ParmVarDecl 0x55e1a3a6a098 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55e1a3a52ab0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55e1a3a52cf8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55e1a3a52b18 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55e1a3a52b98 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55e1a3a52c10 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55e1a3a58a90 <col:79, line:261:5>
|   |-BinaryOperator 0x55e1a3a58708 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e1a3a586a0 <col:2, col:5> 'const char *' lvalue .data 0x55e1a3a52940
|   | | `-MemberExpr 0x55e1a3a58670 <col:2> 'String::rep_t' lvalue ->_r 0x55e1a3a52ab0
|   | |   `-CXXThisExpr 0x55e1a3a58660 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e1a3a586f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e1a3a586d0 <col:12> 'const char *' lvalue ParmVar 0x55e1a3a52b18 'data' 'const char *'
|   |-BinaryOperator 0x55e1a3a587d0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55e1a3a58768 <col:2, col:5> 'int' lvalue .length 0x55e1a3a529a8
|   | | `-MemberExpr 0x55e1a3a58738 <col:2> 'String::rep_t' lvalue ->_r 0x55e1a3a52ab0
|   | |   `-CXXThisExpr 0x55e1a3a58728 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e1a3a587b8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e1a3a58798 <col:14> 'int' lvalue ParmVar 0x55e1a3a52b98 'length' 'int'
|   `-IfStmt 0x55e1a3a58a78 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55e1a3a588f0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e1a3a588d8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55e1a3a588b8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55e1a3a58898 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55e1a3a58830 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55e1a3a52a38
|     |       | `-MemberExpr 0x55e1a3a58800 <col:7> 'String::rep_t' lvalue ->_r 0x55e1a3a52ab0
|     |       |   `-CXXThisExpr 0x55e1a3a587f0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55e1a3a58880 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e1a3a58860 <col:17> 'String::memo_t *' lvalue ParmVar 0x55e1a3a52c10 'memo' 'String::memo_t *'
|     `-CallExpr 0x55e1a3a58a50 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55e1a3a58a38 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55e1a3a58940 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55e1a3a41728 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55e1a3a589a8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e1a3a52308
|         `-ImplicitCastExpr 0x55e1a3a58990 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55e1a3a58970 <col:27> 'String::memo_t *' lvalue ParmVar 0x55e1a3a52c10 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55e1a3a52fa8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55e1a3a52dc8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55e1a3a52e48 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55e1a3a52ec0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55e1a3a52ab0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55e1a3a58f18 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55e1a3a590a8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55e1a3a59010 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55e1a3a58f80 <col:2> '<bound member function type>' ->assign_memo 0x55e1a3a52cf8
|     | `-ImplicitCastExpr 0x55e1a3a59048 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55e1a3a58f70 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55e1a3a59060 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e1a3a58fb0 <col:14> 'const char *' lvalue ParmVar 0x55e1a3a52dc8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55e1a3a59078 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55e1a3a58fd0 <col:20> 'int' lvalue ParmVar 0x55e1a3a52e48 'length' 'int'
|     `-ImplicitCastExpr 0x55e1a3a59090 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55e1a3a58ff0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55e1a3a52ec0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55e1a3a53138 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55e1a3a53078 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55e1a3a59300 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55e1a3a59280 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55e1a3a590d0 <col:2> '<bound member function type>' ->assign_memo 0x55e1a3a52cf8
|     | `-CXXThisExpr 0x55e1a3a590c0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55e1a3a592b8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55e1a3a59150 <col:14, col:19> 'const char *' lvalue .data 0x55e1a3a52940
|     |   `-MemberExpr 0x55e1a3a59120 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55e1a3a52ab0
|     |     `-DeclRefExpr 0x55e1a3a59100 <col:14> 'const String' lvalue ParmVar 0x55e1a3a53078 'x' 'const String &'
|     |-ImplicitCastExpr 0x55e1a3a592d0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55e1a3a591d0 <col:25, col:30> 'int' lvalue .length 0x55e1a3a529a8
|     |   `-MemberExpr 0x55e1a3a591a0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55e1a3a52ab0
|     |     `-DeclRefExpr 0x55e1a3a59180 <col:25> 'const String' lvalue ParmVar 0x55e1a3a53078 'x' 'const String &'
|     `-ImplicitCastExpr 0x55e1a3a592e8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55e1a3a59250 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55e1a3a52a38
|         `-MemberExpr 0x55e1a3a59220 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55e1a3a52ab0
|           `-DeclRefExpr 0x55e1a3a59200 <col:38> 'const String' lvalue ParmVar 0x55e1a3a53078 'x' 'const String &'
|-CXXMethodDecl 0x55e1a3a53200 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55e1a3a59cc0 <col:31, line:278:5>
|   `-IfStmt 0x55e1a3a59ca8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55e1a3a593a0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e1a3a59388 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55e1a3a59358 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e1a3a52a38
|     |     `-MemberExpr 0x55e1a3a59328 <col:6> 'String::rep_t' lvalue ->_r 0x55e1a3a52ab0
|     |       `-CXXThisExpr 0x55e1a3a59318 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55e1a3a59c80 <col:15, line:277:2>
|       |-ParenExpr 0x55e1a3a59850 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55e1a3a59820 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55e1a3a594b0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55e1a3a59498 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55e1a3a59480 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55e1a3a59440 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e1a3a52308
|       |   |       `-ImplicitCastExpr 0x55e1a3a59428 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55e1a3a593f8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55e1a3a52a38
|       |   |           `-MemberExpr 0x55e1a3a593c8 <col:27> 'String::rep_t' lvalue ->_r 0x55e1a3a52ab0
|       |   |             `-CXXThisExpr 0x55e1a3a593b8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55e1a3a59510 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55e1a3a594f0 <col:54> 'int' 0
|       |   `-CallExpr 0x55e1a3a59780 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55e1a3a59768 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e1a3a596e8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55e1a3a597c0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e1a3a595f8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55e1a3a597d8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e1a3a59628 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55e1a3a597f0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55e1a3a59660 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55e1a3a59808 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55e1a3a596d0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55e1a3a596b8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55e1a3a59680 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55e1a3a59ba0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55e1a3a59a60 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55e1a3a59a48 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55e1a3a599c0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55e1a3a42b70 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55e1a3a59990 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e1a3a52308
|       | |   `-ImplicitCastExpr 0x55e1a3a59978 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55e1a3a59948 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55e1a3a52a38
|       | |       `-MemberExpr 0x55e1a3a59918 <col:40> 'String::rep_t' lvalue ->_r 0x55e1a3a52ab0
|       | |         `-CXXThisExpr 0x55e1a3a59908 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55e1a3a59b60 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55e1a3a59b48 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55e1a3a59a88 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55e1a3a579e0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55e1a3a59b88 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55e1a3a59ae8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55e1a3a52a38
|       |       `-MemberExpr 0x55e1a3a59ab8 <col:15> 'String::rep_t' lvalue ->_r 0x55e1a3a52ab0
|       |         `-CXXThisExpr 0x55e1a3a59aa8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55e1a3a59c60 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55e1a3a59bf8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e1a3a52a38
|         | `-MemberExpr 0x55e1a3a59bc8 <col:6> 'String::rep_t' lvalue ->_r 0x55e1a3a52ab0
|         |   `-CXXThisExpr 0x55e1a3a59bb8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55e1a3a59c48 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55e1a3a59c28 <col:16> 'int' 0
|-CXXMethodDecl 0x55e1a3a53498 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55e1a3a532b8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e1a3a53338 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e1a3a533b0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55e1a3a53570 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55e1a3a537c0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55e1a3a53628 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e1a3a536a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e1a3a53720 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e1a3a539a8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55e1a3a53890 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55e1a3a53910 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55e1a3a53aa8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55e1a3a59d98 <col:41, line:286:5>
|   `-ReturnStmt 0x55e1a3a59d88 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55e1a3a59d58 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55e1a3a59d20 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55e1a3a59d08 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55e1a3a59ce8 <col:46> 'int' 1
|-CXXMethodDecl 0x55e1a3a53d48 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55e1a3a53b60 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55e1a3a53be0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55e1a3a53c60 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55e1a3a579e0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55e1a3a53e10 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e1a3a57ab0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55e1a3a57c80 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e1a3a57b68 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e1a3a57be8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55e1a3a57d40 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55e1a3a57e08 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55e1a3a57f08 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55e1a3a57f80 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55e1a3a57ff8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55e1a3a58060 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55e1a3a58160 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55e1a3a581b0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3a58140 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55e1a3a58120 <col:22> 'int' 14
|-CXXMethodDecl 0x55e1a3a583c8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55e1a3a581e0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55e1a3a58260 <col:38> col:41 'int'
| `-ParmVarDecl 0x55e1a3a582e0 <col:43> col:46 'int'
|-FriendDecl 0x55e1a3a584d0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55e1a3a58560 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e1a3cc5b00 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55e1a3cc5cd8 prev 0x55e1a3cc5b00 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e1a3cc5d68 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e1a3cc5d90 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3cc76f0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55e1a3cc76a0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55e1a3cc7680 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55e1a3cc5fa8 'type'
|     `-SubstTemplateTypeParmType 0x55e1a3cc5f70 'String' sugar
|       |-TemplateTypeParmType 0x55e1a3a0cf60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a3a0cf10 'T'
|       `-RecordType 0x55e1a3a49750 'String'
|         `-CXXRecord 0x55e1a3a496c0 'String'
|-TypedefDecl 0x55e1a3cc77a8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55e1a3cc7770 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55e1a3cc7750 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e1a3cc76f0 'type'
|     `-ElaboratedType 0x55e1a3cc76a0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55e1a3cc7680 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55e1a3cc5fa8 'type'
|         `-SubstTemplateTypeParmType 0x55e1a3cc5f70 'String' sugar
|           |-TemplateTypeParmType 0x55e1a3a0cf60 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e1a3a0cf10 'T'
|           `-RecordType 0x55e1a3a49750 'String'
|             `-CXXRecord 0x55e1a3a496c0 'String'
|-CXXMethodDecl 0x55e1a3cc7928 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55e1a3cc7838 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55e1a3cc7a18 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e1a3cc7af8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55e1a3cc7af8
|-CXXMethodDecl 0x55e1a3cc7dc8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e1a3cc7cd0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55e1a3cc8008 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e1a3cc7e80 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e1a3cc7ef8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e1a3cc81d8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e1a3cc80c8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e1a3cc8140 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e1a3cc8338 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e1a3cc8408 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e1a3ccc690 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e1a3cc84c8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e1a3cc8540 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e1a3ccc8e8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55e1a3ccc760 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e1a3ccc7d8 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e1a3cccaa8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e1a3ccc9b8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e1a3cccc68 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e1a3cccb70 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e1a3cccd20 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e1a3cccdd0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e1a3ccd008 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e1a3ccce80 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e1a3cccef8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e1a3ccd2a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e1a3ccd1b0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55e1a3ccd370 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55e1a3ccd3c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e1a3ccd410 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e1a3c80ef0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55e1a3cc4568 prev 0x55e1a3c80ef0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e1a3cc5a70 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55e1a3cc5a20 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55e1a3cc5a00 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e1a3cc58b0 'type'
|     `-SubstTemplateTypeParmType 0x55e1a3cc5740 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55e1a39e2d10 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55e1a39e2cb8 'F'
|       `-RecordType 0x55e1a3cc53a0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55e1a3cc52c0 'typed_array_memory'
|-FieldDecl 0x55e1a3ccd460 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55e1a3ccd4b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e1a3ccd4e8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55e1a3cc4600 'String' sugar
|   |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|   `-RecordType 0x55e1a3a49750 'String'
|     `-CXXRecord 0x55e1a3a496c0 'String'
|-TypedefDecl 0x55e1a3ccd578 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55e1a3ccd540 'String &'
|   `-SubstTemplateTypeParmType 0x55e1a3cc4600 'String' sugar
|     |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|     `-RecordType 0x55e1a3a49750 'String'
|       `-CXXRecord 0x55e1a3a496c0 'String'
|-TypedefDecl 0x55e1a3ccd608 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55e1a3ccd5d0 'const String &'
|   `-QualType 0x55e1a3cc4601 'const String' const
|     `-SubstTemplateTypeParmType 0x55e1a3cc4600 'String' sugar
|       |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|       `-RecordType 0x55e1a3a49750 'String'
|         `-CXXRecord 0x55e1a3a496c0 'String'
|-TypedefDecl 0x55e1a3ccd698 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55e1a3ccd660 'String *'
|   `-SubstTemplateTypeParmType 0x55e1a3cc4600 'String' sugar
|     |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|     `-RecordType 0x55e1a3a49750 'String'
|       `-CXXRecord 0x55e1a3a496c0 'String'
|-TypedefDecl 0x55e1a3ccd728 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55e1a3ccd6f0 'const String *'
|   `-QualType 0x55e1a3cc4601 'const String' const
|     `-SubstTemplateTypeParmType 0x55e1a3cc4600 'String' sugar
|       |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|       `-RecordType 0x55e1a3a49750 'String'
|         `-CXXRecord 0x55e1a3a496c0 'String'
|-TypedefDecl 0x55e1a3cce380 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55e1a3cce330 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55e1a3cce310 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55e1a3cce248 'type'
|     `-LValueReferenceType 0x55e1a3cce210 'const String &'
|       `-QualType 0x55e1a3ccdfb1 'const String' const
|         `-SubstTemplateTypeParmType 0x55e1a3ccdfb0 'String' sugar
|           |-TemplateTypeParmType 0x55e1a39ecc60 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e1a39ecc08 'T'
|           `-RecordType 0x55e1a3a49750 'String'
|             `-CXXRecord 0x55e1a3a496c0 'String'
|-TypedefDecl 0x55e1a3cce3e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55e1a3ccd5d0 'const String &'
|   `-QualType 0x55e1a3cc4601 'const String' const
|     `-SubstTemplateTypeParmType 0x55e1a3cc4600 'String' sugar
|       |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|       `-RecordType 0x55e1a3a49750 'String'
|         `-CXXRecord 0x55e1a3a496c0 'String'
|-TypedefDecl 0x55e1a3cce440 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3cce4a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55e1a3ccd660 'String *'
|   `-SubstTemplateTypeParmType 0x55e1a3cc4600 'String' sugar
|     |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|     `-RecordType 0x55e1a3a49750 'String'
|       `-CXXRecord 0x55e1a3a496c0 'String'
|-TypedefDecl 0x55e1a3cce510 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55e1a3ccd6f0 'const String *'
|   `-QualType 0x55e1a3cc4601 'const String' const
|     `-SubstTemplateTypeParmType 0x55e1a3cc4600 'String' sugar
|       |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|       `-RecordType 0x55e1a3a49750 'String'
|         `-CXXRecord 0x55e1a3a496c0 'String'
|-EnumDecl 0x55e1a3cce568 <line:134:5> col:5
| `-EnumConstantDecl 0x55e1a3cce660 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e1a3cce640 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e1a3a1b908 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e1a3a1b8e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e1a3a1b8c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e1a3cce6e8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e1a3cce978 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e1a3cce7a0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e1a3cce840 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55e1a3ccec08 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55e1a3cceaf0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55e1a3cceec8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55e1a3ccedb0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e1a3ccf1e0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55e1a3ccf0c0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55e1a3ccf4f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55e1a3ccf3d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e1a3ccf7e0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e1a3ccf628 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e1a3ccf6a0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e1a3ccf908 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e1a3ccf9b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3ccfa10 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3ccfa58 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e1a3ccfb08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3ccfb60 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3ccfc28 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e1a3ccfcd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3ccfd30 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3ccfd78 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e1a3ccfe28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3ccfe80 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3ccfec8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e1a3ccff78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3ccffd0 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3cd0018 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e1a3cd00c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3cd0120 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3cd0148 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e1a3cd01f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e1a3cd02a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e1a3cd0468 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e1a3cd0358 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e1a3cd03d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e1a3cd05b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e1a3cd0528 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3cd0768 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55e1a3cd0670 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e1a3cd0820 <col:20>
| `-OptimizeNoneAttr 0x55e1a3cd0878 <col:30>
|-CXXMethodDecl 0x55e1a3cd0998 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55e1a3cd08a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e1a3cd0a50 <col:20>
| `-OptimizeNoneAttr 0x55e1a3cd0aa8 <col:30>
|-CXXMethodDecl 0x55e1a3cd0b60 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e1a3cd0ad0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3cd0ca8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e1a3cd0c18 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3cd0dd8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55e1a3cd0ed8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55e1a3cd0fa8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55e1a3cd1078 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55e1a3cd11b8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e1a3cd1128 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3cd1300 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e1a3cd1270 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3cd1448 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e1a3cd13b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e1a3cd1500 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e1a3cd1600 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e1a3cd1570 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e1a3cd16b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e1a3cd1778 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55e1a3cd1878 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55e1a3cd19f8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e1a3cd1938 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55e1a3cd21b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e1a3cd1ab0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55e1a3cd2118 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55e1a3cd2018 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55e1a3cd2298 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e1a3cd23e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e1a3cd2358 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e1a3cd24a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e1a3cd26e8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e1a3cd2560 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e1a3cd25d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e1a3cd2878 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55e1a3cd27b8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e1a3cd2a88 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55e1a3cd2940 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e1a3cd29b8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e1a3cd2b48 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e1a3cd2da8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55e1a3cd2cb0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55e1a3cd2e78 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55e1a3cd2e78

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3bfe858 prev 0x55e1a3c43998 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e1a3bfe950 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55e1a3bfe9e0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55e1a3bfeb18 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3bfea18 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e1a3bfff40 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e1a3bfff20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e1a3bffab8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e1a3bfffd0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e1a3bfff90 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55e1a3bfea18 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e1a3bffb20 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e1a3c00050 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e1a3c00010 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e1a3bffb80 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e1a3c00090 <col:54> 'bool' false
| `-CompoundStmt 0x55e1a3c00198 <col:61, line:38:5>
|   `-BinaryOperator 0x55e1a3c00178 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55e1a3c00110 <col:9> 'const Element *' lvalue ->_context 0x55e1a3bffa58
|     | `-CXXThisExpr 0x55e1a3c00100 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55e1a3c00160 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55e1a3c00140 <col:20> 'int' 0
|-CXXConstructorDecl 0x55e1a3bfed28 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3bfebd8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55e1a3bfec50 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e1a3bfff78 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e1a3bfff58 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55e1a3bffa58 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55e1a3c001f0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e1a3c001b0 <col:20> 'const Element *' lvalue ParmVar 0x55e1a3bfebd8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55e1a3bffab8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e1a3c00270 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e1a3c00230 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55e1a3bfec50 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e1a3bffb20 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e1a3c002f0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e1a3c002b0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55e1a3bffb80 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e1a3c00330 <col:73> 'bool' false
| `-CompoundStmt 0x55e1a3c003a8 <col:80, line:46:5>
|-CXXMethodDecl 0x55e1a3bfee58 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55e1a3c00420 <col:36, line:51:5>
|   `-ReturnStmt 0x55e1a3c00410 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55e1a3c003f8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55e1a3c003c8 <col:16> 'const Element *const' lvalue ->_context 0x55e1a3bffa58
|         `-CXXThisExpr 0x55e1a3c003b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e1a3bfef48 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55e1a3c004a0 <col:32, line:57:5>
|   `-ReturnStmt 0x55e1a3c00490 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55e1a3c00478 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55e1a3c00448 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55e1a3bffab8
|         `-CXXThisExpr 0x55e1a3c00438 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e1a3bff008 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55e1a3bff190 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e1a3bff0c0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e1a3bff2e0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e1a3bff250 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e1a3bff430 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e1a3bff3a0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e1a3bff638 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55e1a3bff4e8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55e1a3bff560 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55e1a3bff968 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55e1a3bff6f8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55e1a3bff778 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55e1a3bff840 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55e1a3bffa20 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55e1a3bffa58 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55e1a3bffab8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55e1a3bffb20 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55e1a3bffb80 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55e1a3bffbd0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e1a3bffbd0
| `-ParmVarDecl 0x55e1a3bffce8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55e1a3bffd88 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e1a3bffd88
| `-ParmVarDecl 0x55e1a3bffe98 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55e1a3d4e920 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e1a3d0c1f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55e1a3d0c3c8 prev 0x55e1a3d0c1f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e1a3d0c458 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e1a3d0c480 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d0e050 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55e1a3d0e000 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55e1a3d0c930 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55e1a3d0c830 'type'
|     `-TemplateSpecializationType 0x55e1a3d0c7c0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55e1a3d0c6a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55e1a3d0c680 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55e1a3d0c660 <col:24> 'unsigned long' 4
|       `-RecordType 0x55e1a3d0c7a0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55e1a3d0c6c0 'char_array'
|-TypedefDecl 0x55e1a3d0e108 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55e1a3d0e0d0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55e1a3d0e0b0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55e1a3d0e050 'type'
|     `-ElaboratedType 0x55e1a3d0e000 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55e1a3d0c930 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55e1a3d0c830 'type'
|         `-TemplateSpecializationType 0x55e1a3d0c7c0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55e1a3d0c6a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55e1a3d0c680 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55e1a3d0c660 <col:24> 'unsigned long' 4
|           `-RecordType 0x55e1a3d0c7a0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55e1a3d0c6c0 'char_array'
|-CXXMethodDecl 0x55e1a3d0e288 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55e1a3d0e198 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55e1a3d0e378 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e1a3d0e458 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55e1a3d0e728 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e1a3d0e630 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55e1a3d0e968 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e1a3d0e7e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e1a3d0e858 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e1a3d0eb38 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e1a3d0ea28 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e1a3d0eaa0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e1a3d0ec98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e1a3d0ed68 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e1a3d0efb8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e1a3d0ee28 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e1a3d0eea0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e1a3d0f218 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55e1a3d0f088 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e1a3d0f100 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e1a3d0f3d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e1a3d0f2e8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e1a3d0f598 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e1a3d0f4a0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e1a3d0f650 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e1a3d0f700 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e1a3d0f938 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e1a3d0f7b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e1a3d0f828 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e1a3d16008 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e1a3d0fae0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55e1a3d160d0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55e1a3d16120 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e1a3d16170 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e1a3d0abf8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e1a3d0ae08 prev 0x55e1a3d0abf8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e1a3d0c160 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55e1a3d0c110 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55e1a3d0c0f0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55e1a3d0bfa0 'type'
|     `-SubstTemplateTypeParmType 0x55e1a3d0bdc0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55e1a39e2590 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a39e2538 'T'
|       `-RecordType 0x55e1a3d0b910 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55e1a3d0b828 'sized_array_memory'
|-FieldDecl 0x55e1a3d161c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55e1a3d16210 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e1a3d16248 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55e1a3d0aea0 'int' sugar
|   |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|   `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d162d8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55e1a3d162a0 'int &'
|   `-SubstTemplateTypeParmType 0x55e1a3d0aea0 'int' sugar
|     |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|     `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d16398 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55e1a3d16360 'const int &'
|   `-QualType 0x55e1a3d0aea1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e1a3d0aea0 'int' sugar
|       |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|       `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d16428 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55e1a3d163f0 'int *'
|   `-SubstTemplateTypeParmType 0x55e1a3d0aea0 'int' sugar
|     |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|     `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d164b8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55e1a3d16480 'const int *'
|   `-QualType 0x55e1a3d0aea1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e1a3d0aea0 'int' sugar
|       |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|       `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d170a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55e1a3d17050 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55e1a3d17030 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55e1a3d16fc0 'type'
|     `-SubstTemplateTypeParmType 0x55e1a3d16d80 'int' sugar
|       |-TemplateTypeParmType 0x55e1a39ed390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a39ed340 'T'
|       `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d17108 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55e1a3d16360 'const int &'
|   `-QualType 0x55e1a3d0aea1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e1a3d0aea0 'int' sugar
|       |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|       `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d17160 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d171c8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55e1a3d163f0 'int *'
|   `-SubstTemplateTypeParmType 0x55e1a3d0aea0 'int' sugar
|     |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|     `-BuiltinType 0x55e1a371d370 'int'
|-TypedefDecl 0x55e1a3d17230 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55e1a3d16480 'const int *'
|   `-QualType 0x55e1a3d0aea1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e1a3d0aea0 'int' sugar
|       |-TemplateTypeParmType 0x55e1a3a1a280 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e1a3a1a228 'T'
|       `-BuiltinType 0x55e1a371d370 'int'
|-EnumDecl 0x55e1a3d17288 <line:134:5> col:5
| `-EnumConstantDecl 0x55e1a3d17380 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e1a3d17360 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e1a3a1b908 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e1a3a1b8e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e1a3a1b8c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e1a3d17408 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e1a3d17658 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e1a3d174c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e1a3d17560 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55e1a3d17918 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55e1a3d17800 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55e1a3d17bd8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55e1a3d17ac0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e1a3d17f20 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55e1a3d17e00 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55e1a3d18230 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55e1a3d18110 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e1a3d18520 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e1a3d18368 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e1a3d183e0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e1a3d18648 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e1a3d18728 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3d18780 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3d187c8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e1a3d18878 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3d188d0 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3d18998 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e1a3d18a48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3d18aa0 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3d18ae8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e1a3d18b98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3d18bf0 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3d18c38 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e1a3d18ce8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3d18d40 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3d18d88 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e1a3d18e38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e1a3d18e90 <col:30> Inherited
|-CXXMethodDecl 0x55e1a3d18eb8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e1a3d18f68 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e1a3d19018 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e1a3d191d8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e1a3d190c8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e1a3d19140 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e1a3d19328 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e1a3d19298 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3d194d8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55e1a3d193e0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e1a3d19590 <col:20>
| `-OptimizeNoneAttr 0x55e1a3d195e8 <col:30>
|-CXXMethodDecl 0x55e1a3d19708 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55e1a3d19610 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e1a3d197c0 <col:20>
| `-OptimizeNoneAttr 0x55e1a3d19818 <col:30>
|-CXXMethodDecl 0x55e1a3d198d0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e1a3d19840 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3d19a18 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e1a3d19988 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3d19b48 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55e1a3d19c78 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55e1a3d19d48 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55e1a3d19e18 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55e1a3d19f58 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e1a3d19ec8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3d1a0a0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e1a3d1a010 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e1a3d1a1e8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e1a3d1a158 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e1a3d1a2a0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e1a3d1a3a0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e1a3d1a310 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e1a3d1a458 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e1a3d1a518 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55e1a3d1a618 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55e1a3d1a798 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e1a3d1a6d8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55e1a3d1af58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e1a3d1a850 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55e1a3d1aeb8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55e1a3d1adb8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55e1a3d1b038 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e1a3d1b188 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e1a3d1b0f8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e1a3d1b240 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e1a3d1b488 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e1a3d1b300 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e1a3d1b378 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e1a3d1b648 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55e1a3d1b558 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e1a3d1b898 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55e1a3d1b710 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e1a3d1b788 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e1a3d1b958 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e1a3d1bbb8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55e1a3d1bac0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55e1a3d1bc88 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3d08d68 prev 0x55e1a3c053b8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e1a3d08e60 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55e1a3d08f50 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55e1a3d2da10 <col:16, line:828:9>
|-CXXDestructorDecl 0x55e1a3d09040 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55e1a3d2da20 <col:25, line:830:9>
|-CXXMethodDecl 0x55e1a3d09140 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55e1a3d091f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55e1a3d09298 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e1a3d09298
| `-ParmVarDecl 0x55e1a3d093a8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55e1a3d09b68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e1a3d09b68
  `-ParmVarDecl 0x55e1a3d09c78 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3c051c8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55e1a3c05328 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55e1a3c053b8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55e1a3cee700 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55e1a3cee808 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55e1a3cee738 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e1a3d1d248 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e1a3d1d228 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e1a3ceeb28 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3cee9a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55e1a3ceea18 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e1a3d1d280 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e1a3d1d260 <col:59> 'int' 0
|-CXXConstructorDecl 0x55e1a3ceed00 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3ceebf0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55e1a3ceec68 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e1a3d1d2b8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e1a3d1d298 <col:55> 'int' 0
|-CXXConstructorDecl 0x55e1a3cef0b8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e1a3ceeea0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55e1a3ceef18 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55e1a3ceef90 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e1a3d1d2f0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e1a3d1d2d0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e1a3cef278 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55e1a3cef1b8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55e1a3cef370 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55e1a3cef558 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55e1a3cef460 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55e1a3cef648 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55e1a3d1d6a0 <col:24, line:291:5>
|   `-ReturnStmt 0x55e1a3d1d690 <line:290:9, col:79>
|     `-BinaryOperator 0x55e1a3d1d670 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55e1a3d1d548 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55e1a3d1d4a0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55e1a3d1d480 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55e1a3d1d378 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55e1a3d1d360 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55e1a3d1d348 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55e1a3d1d318 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55e1a3d0ab90
|       | |   |       `-CXXThisExpr 0x55e1a3d1d308 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55e1a3d1d468 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55e1a3d1d450 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55e1a3d1d418 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55e1a3d1d3e8 <col:28, col:35> '<bound member function type>' ->size 0x55e1a3cd0148
|       | |           `-ImplicitCastExpr 0x55e1a3d1d438 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55e1a3d1d3d0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55e1a3d1d3a0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55e1a3d0ab90
|       | |                 `-CXXThisExpr 0x55e1a3d1d390 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55e1a3d1d530 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55e1a3d1d518 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55e1a3d1d500 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55e1a3d1d4d0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55e1a3d1bdd0
|       |         `-CXXThisExpr 0x55e1a3d1d4c0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55e1a3d1d650 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55e1a3d1d638 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e1a3d1d620 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e1a3d1d5e0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e1a3d1d5c8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e1a3d1d578 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e1a3d1be80
|         |     |   `-CXXThisExpr 0x55e1a3d1d568 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e1a3d1d5a8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55e1a3d1d600 <col:79> 'int' 0
|-CXXMethodDecl 0x55e1a3cef708 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55e1a3d1d878 <col:32, line:296:5>
|   `-ReturnStmt 0x55e1a3d1d868 <line:295:9, col:49>
|     `-BinaryOperator 0x55e1a3d1d848 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55e1a3d1d728 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55e1a3d1d710 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55e1a3d1d6f8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55e1a3d1d6c8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55e1a3d1bdd0
|       |       `-CXXThisExpr 0x55e1a3d1d6b8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55e1a3d1d828 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55e1a3d1d810 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e1a3d1d7f8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e1a3d1d7b8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e1a3d1d7a0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e1a3d1d750 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e1a3d1be80
|         |     |   `-CXXThisExpr 0x55e1a3d1d740 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e1a3d1d780 <col:43> 'int' 0
|         `-IntegerLiteral 0x55e1a3d1d7d8 <col:49> 'int' 0
|-CXXMethodDecl 0x55e1a3cef7f8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55e1a3d1da88 <col:19, line:306:5>
|   |-IfStmt 0x55e1a3d1d9a8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55e1a3d1d8e8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55e1a3d1d8d0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55e1a3d1d8a0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e1a3d0ab90
|   | |     `-CXXThisExpr 0x55e1a3d1d890 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55e1a3d1d988 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55e1a3d1d958 <col:13, col:20> '<bound member function type>' ->clear 0x55e1a3cd2b48
|   |     `-ImplicitCastExpr 0x55e1a3d1d940 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55e1a3d1d910 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e1a3d0ab90
|   |         `-CXXThisExpr 0x55e1a3d1d900 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55e1a3d1da30 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55e1a3d1da00 <col:9, col:16> '<bound member function type>' .clear 0x55e1a3d1b958
|   |   `-MemberExpr 0x55e1a3d1d9d0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55e1a3d1bd70
|   |     `-CXXThisExpr 0x55e1a3d1d9c0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55e1a3d1da78 <line:305:9, col:17>
|     `-UnaryOperator 0x55e1a3d1da60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e1a3d1da50 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e1a3cefa78 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55e1a3cef980 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55e1a3cefbf8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55e1a3cefb30 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55e1a3ceff78 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55e1a3cefca0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55e1a3cefed8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55e1a3cefd48 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55e1a3cefdc0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55e1a3d1dda8 <col:67, line:327:5>
|     |-WhileStmt 0x55e1a3d1dd58 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55e1a3d1db70 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55e1a3d1daf0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e1a3c3be68 0x55e1a3a85448 0x55e1a3a85120 0x55e1a3a76900 0x55e1a3a765b0 0x55e1a3a75ea0 0x55e1a3a48810 0x55e1a39d4cd0
|     | | |-DeclRefExpr 0x55e1a3d1dab0 <col:16> 'Iter' lvalue ParmVar 0x55e1a3cefd48 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55e1a3d1dad0 <col:25> 'Iter' lvalue ParmVar 0x55e1a3cefdc0 'end' 'Iter'
|     | `-CompoundStmt 0x55e1a3d1dd38 <col:30, line:325:9>
|     |   |-CallExpr 0x55e1a3d1dcd8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55e1a3d1dbb8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55e1a3d1dca8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55e1a3d1dc38 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|     |   |   `-DeclRefExpr 0x55e1a3d1dc18 <col:24> 'Iter' lvalue ParmVar 0x55e1a3cefd48 'begin' 'Iter'
|     |   `-UnaryOperator 0x55e1a3d1dd20 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55e1a3d1dd00 <col:15> 'Iter' lvalue ParmVar 0x55e1a3cefd48 'begin' 'Iter'
|     `-ReturnStmt 0x55e1a3d1dd98 <line:326:9, col:17>
|       `-UnaryOperator 0x55e1a3d1dd80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d1dd70 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e1a3cf0080 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55e1a3cefff0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55e1a3cf01c8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55e1a3cf0138 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55e1a3cf0290 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55e1a3d1de88 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55e1a3d1de28 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55e1a3d1ddd8 <col:9> '<bound member function type>' ->reset_from 0x55e1a3d1c1f8
|   | | `-CXXThisExpr 0x55e1a3d1ddc8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55e1a3d1de08 <col:20> 'int' 0
|   `-ReturnStmt 0x55e1a3d1de78 <line:352:9, col:17>
|     `-UnaryOperator 0x55e1a3d1de60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e1a3d1de50 <col:17> 'Args *' this
|-VarDecl 0x55e1a3cf0348 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e1a3cf03b0 <col:38> 'int' 1
|-VarDecl 0x55e1a3cf0440 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e1a3cf04a8 <col:39> 'int' 2
|-VarDecl 0x55e1a3cf0538 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e1a3cf05a0 <col:39> 'int' 4
|-VarDecl 0x55e1a3cf0630 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e1a3cf0698 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55e1a3cf0a18 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55e1a3cf0710 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e1a3cf0978 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e1a3cf07c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf0868 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d1f908 <col:43, line:371:5>
|     `-ReturnStmt 0x55e1a3d1f8f8 <line:370:9, col:34>
|       `-CallExpr 0x55e1a3d1f8c0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d1deb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d1df38 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf07c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d1df58 <col:30> 'int' 0
|         `-DeclRefExpr 0x55e1a3d1f8a0 <col:33> 'T' lvalue ParmVar 0x55e1a3cf0868 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf0d48 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55e1a3cf0a80 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e1a3cf0ca8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e1a3cf0b30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf0bd8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d1fa58 <col:45, line:375:5>
|     `-ReturnStmt 0x55e1a3d1fa48 <line:374:9, col:42>
|       `-CallExpr 0x55e1a3d1fa10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d1f930 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d1f9b0 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf0b30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d1f9d0 <col:30> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e1a3d1f9f0 <col:41> 'T' lvalue ParmVar 0x55e1a3cf0bd8 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf1078 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55e1a3cf0db0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55e1a3cf0fd8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55e1a3cf0e60 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55e1a3cf0f08 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55e1a3d1fba8 <col:45, line:379:5>
| |   `-ReturnStmt 0x55e1a3d1fb98 <line:378:9, col:43>
| |     `-CallExpr 0x55e1a3d1fb60 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55e1a3d1fa80 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55e1a3d1fb00 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf0e60 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55e1a3d1fb20 <col:30> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int'
| |       `-DeclRefExpr 0x55e1a3d1fb40 <col:42> 'T' lvalue ParmVar 0x55e1a3cf0f08 'x' 'T &'
| `-CXXMethodDecl 0x55e1a3d4fb58 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e1a3d4f970 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55e1a3d4fa48 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x55e1a3cf13a8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55e1a3cf10e0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e1a3cf1308 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e1a3cf1190 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf1238 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d1fda8 <col:46, line:383:5>
|     `-ReturnStmt 0x55e1a3d1fd98 <line:382:9, col:55>
|       `-CallExpr 0x55e1a3d1fd60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d1fbd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d1fc50 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf1190 'keyword' 'const char *'
|         |-BinaryOperator 0x55e1a3d1fd20 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e1a3d1fcd0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e1a3d1fcb0 <col:30> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e1a3d1fd08 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e1a3d1fce8 <col:42> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e1a3d1fd40 <col:54> 'T' lvalue ParmVar 0x55e1a3cf1238 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf17a8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55e1a3cf1410 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e1a3cf1708 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55e1a3cf14c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf1540 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cf15e8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d1fee8 <col:54, line:388:5>
|     |-CallExpr 0x55e1a3d1fe70 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e1a3d1fdc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e1a3d1fe00 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e1a3d1fe10 <col:30> 'const char *' lvalue ParmVar 0x55e1a3cf14c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e1a3d1fe30 <col:39> 'int' lvalue ParmVar 0x55e1a3cf1540 'flags' 'int'
|     | `-DeclRefExpr 0x55e1a3d1fe50 <col:46> 'T' lvalue ParmVar 0x55e1a3cf15e8 'x' 'T &'
|     `-ReturnStmt 0x55e1a3d1fed8 <line:387:9, col:17>
|       `-UnaryOperator 0x55e1a3d1fec0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d1feb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cf1c58 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55e1a3cf1818 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e1a3cf1898 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e1a3cf1bb8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e1a3cf1958 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf19f8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55e1a3cf1a98 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e1a3d20058 <col:74, line:403:5>
|     `-ReturnStmt 0x55e1a3d20048 <line:402:9, col:56>
|       `-CallExpr 0x55e1a3d20008 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d1ff18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d1ff88 <col:28> 'const char *' lvalue ParmVar 0x55e1a3cf1958 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d1ffa8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e1a3d1ffc8 <col:40> 'T' lvalue ParmVar 0x55e1a3cf19f8 'x' 'T &'
|         `-DeclRefExpr 0x55e1a3d1ffe8 <col:43> 'const V' lvalue ParmVar 0x55e1a3cf1a98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e1a3cf20c8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e1a3cf1cc8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e1a3cf1d48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e1a3cf2028 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e1a3cf1e08 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf1ea8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55e1a3cf1f48 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e1a3d201c0 <col:76, line:407:5>
|     `-ReturnStmt 0x55e1a3d201b0 <line:406:9, col:65>
|       `-CallExpr 0x55e1a3d20170 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d20080 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d200f0 <col:28> 'const char *' lvalue ParmVar 0x55e1a3cf1e08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d20110 <col:37> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int'
|         |-DeclRefExpr 0x55e1a3d20130 <col:49> 'T' lvalue ParmVar 0x55e1a3cf1ea8 'x' 'T &'
|         `-DeclRefExpr 0x55e1a3d20150 <col:52> 'const V' lvalue ParmVar 0x55e1a3cf1f48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e1a3cf2618 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55e1a3cf2138 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e1a3cf21b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e1a3cf2578 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e1a3cf2278 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf22f8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cf2398 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55e1a3cf2438 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e1a3d20328 <col:85, line:412:5>
|     |-CallExpr 0x55e1a3d202a8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e1a3d201d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e1a3d20218 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e1a3d20228 <col:37> 'const char *' lvalue ParmVar 0x55e1a3cf2278 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e1a3d20248 <col:46> 'int' lvalue ParmVar 0x55e1a3cf22f8 'flags' 'int'
|     | |-DeclRefExpr 0x55e1a3d20268 <col:53> 'T' lvalue ParmVar 0x55e1a3cf2398 'x' 'T &'
|     | `-DeclRefExpr 0x55e1a3d20288 <col:56> 'const V' lvalue ParmVar 0x55e1a3cf2438 'default_value' 'const V &'
|     `-ReturnStmt 0x55e1a3d20318 <line:411:9, col:17>
|       `-UnaryOperator 0x55e1a3d20300 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d202f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cf2aa8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55e1a3cf2690 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf2708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf2a08 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf27c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf2840 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf28e8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d204a8 <col:53, line:425:5>
|     `-ReturnStmt 0x55e1a3d20498 <line:424:9, col:42>
|       `-CallExpr 0x55e1a3d20458 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d20358 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d203d8 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf27c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d203f8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e1a3d20418 <col:33> 'P' lvalue ParmVar 0x55e1a3cf2840 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d20438 <col:41> 'T' lvalue ParmVar 0x55e1a3cf28e8 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf2ef8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55e1a3cf2b18 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf2b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf2e58 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf2c58 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf2cd0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf2d78 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d20620 <col:55, line:429:5>
|     `-ReturnStmt 0x55e1a3d20610 <line:428:9, col:50>
|       `-CallExpr 0x55e1a3d205d0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d204d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d20550 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf2c58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d20570 <col:30> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e1a3d20590 <col:41> 'P' lvalue ParmVar 0x55e1a3cf2cd0 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d205b0 <col:49> 'T' lvalue ParmVar 0x55e1a3cf2d78 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf3348 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55e1a3cf2f68 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf2fe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf32a8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf30a8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf3120 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf31c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d20798 <col:55, line:433:5>
|     `-ReturnStmt 0x55e1a3d20788 <line:432:9, col:51>
|       `-CallExpr 0x55e1a3d20748 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d20648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d206c8 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf30a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d206e8 <col:30> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int'
|         |-DeclRefExpr 0x55e1a3d20708 <col:42> 'P' lvalue ParmVar 0x55e1a3cf3120 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d20728 <col:50> 'T' lvalue ParmVar 0x55e1a3cf31c8 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf3798 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55e1a3cf33b8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf3438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf36f8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf34f8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf3570 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf3618 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d209c0 <col:56, line:437:5>
|     `-ReturnStmt 0x55e1a3d209b0 <line:436:9, col:63>
|       `-CallExpr 0x55e1a3d20970 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d207c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d20840 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf34f8 'keyword' 'const char *'
|         |-BinaryOperator 0x55e1a3d20910 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e1a3d208c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e1a3d208a0 <col:30> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e1a3d208f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e1a3d208d8 <col:42> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e1a3d20930 <col:54> 'P' lvalue ParmVar 0x55e1a3cf3570 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d20950 <col:62> 'T' lvalue ParmVar 0x55e1a3cf3618 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf3cc8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55e1a3cf3808 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf3888 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf3c28 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf3948 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf39c8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cf3a40 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf3ae8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d20b28 <col:64, line:442:5>
|     |-CallExpr 0x55e1a3d20aa8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e1a3d209d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e1a3d20a18 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e1a3d20a28 <col:30> 'const char *' lvalue ParmVar 0x55e1a3cf3948 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e1a3d20a48 <col:39> 'int' lvalue ParmVar 0x55e1a3cf39c8 'flags' 'int'
|     | |-DeclRefExpr 0x55e1a3d20a68 <col:46> 'P' lvalue ParmVar 0x55e1a3cf3a40 'parser' 'P'
|     | `-DeclRefExpr 0x55e1a3d20a88 <col:54> 'T' lvalue ParmVar 0x55e1a3cf3ae8 'x' 'T &'
|     `-ReturnStmt 0x55e1a3d20b18 <line:441:9, col:17>
|       `-UnaryOperator 0x55e1a3d20b00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d20af0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cf42c8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55e1a3cf3d40 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf3db8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e1a3cf3e38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e1a3cf4228 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e1a3cf3f00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf3f78 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf4018 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55e1a3cf40e8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e1a3d20cc0 <col:84, line:458:5>
|     `-ReturnStmt 0x55e1a3d20cb0 <line:457:9, col:64>
|       `-CallExpr 0x55e1a3d20c68 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d20b58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d20bc8 <col:28> 'const char *' lvalue ParmVar 0x55e1a3cf3f00 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d20be8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e1a3d20c08 <col:40> 'P' lvalue ParmVar 0x55e1a3cf3f78 'parser' 'P'
|         |-DeclRefExpr 0x55e1a3d20c28 <col:48> 'T' lvalue ParmVar 0x55e1a3cf4018 'x' 'T &'
|         `-DeclRefExpr 0x55e1a3d20c48 <col:51> 'const V' lvalue ParmVar 0x55e1a3cf40e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e1a3cf4848 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e1a3cf4340 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf43b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e1a3cf4438 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e1a3cf47a8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e1a3cf4500 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf4578 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf4618 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55e1a3cf46b8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e1a3d20e50 <col:86, line:462:5>
|     `-ReturnStmt 0x55e1a3d20e40 <line:461:9, col:73>
|       `-CallExpr 0x55e1a3d20df8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d20ce8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d20d58 <col:28> 'const char *' lvalue ParmVar 0x55e1a3cf4500 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d20d78 <col:37> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int'
|         |-DeclRefExpr 0x55e1a3d20d98 <col:49> 'P' lvalue ParmVar 0x55e1a3cf4578 'parser' 'P'
|         |-DeclRefExpr 0x55e1a3d20db8 <col:57> 'T' lvalue ParmVar 0x55e1a3cf4618 'x' 'T &'
|         `-DeclRefExpr 0x55e1a3d20dd8 <col:60> 'const V' lvalue ParmVar 0x55e1a3cf46b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e1a3cf4ea8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55e1a3cf48c0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf4938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e1a3cf49b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e1a3cf4e08 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e1a3cf4a80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf4b00 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cf4b78 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf4c18 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55e1a3cf4cb8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e1a3d20fe0 <col:95, line:467:5>
|     |-CallExpr 0x55e1a3d20f58 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e1a3d20e68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e1a3d20ea8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e1a3d20eb8 <col:37> 'const char *' lvalue ParmVar 0x55e1a3cf4a80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e1a3d20ed8 <col:46> 'int' lvalue ParmVar 0x55e1a3cf4b00 'flags' 'int'
|     | |-DeclRefExpr 0x55e1a3d20ef8 <col:53> 'P' lvalue ParmVar 0x55e1a3cf4b78 'parser' 'P'
|     | |-DeclRefExpr 0x55e1a3d20f18 <col:61> 'T' lvalue ParmVar 0x55e1a3cf4c18 'x' 'T &'
|     | `-DeclRefExpr 0x55e1a3d20f38 <col:64> 'const V' lvalue ParmVar 0x55e1a3cf4cb8 'default_value' 'const V &'
|     `-ReturnStmt 0x55e1a3d20fd0 <line:466:9, col:17>
|       `-UnaryOperator 0x55e1a3d20fb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d20fa8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cf5488 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55e1a3cf4f28 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf4fa8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e1a3cf5028 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e1a3cf53e8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e1a3cf50f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf5168 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf5208 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e1a3cf52a8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e1a3d21188 <col:63, line:481:5>
|     `-ReturnStmt 0x55e1a3d21178 <line:480:9, col:47>
|       `-CallExpr 0x55e1a3d21130 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d21010 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d21090 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf50f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d210b0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e1a3d210d0 <col:33> 'P' lvalue ParmVar 0x55e1a3cf5168 'parser' 'P'
|         |-DeclRefExpr 0x55e1a3d210f0 <col:41> 'T1' lvalue ParmVar 0x55e1a3cf5208 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e1a3d21110 <col:45> 'T2' lvalue ParmVar 0x55e1a3cf52a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e1a3cf5a08 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55e1a3cf5500 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf5578 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e1a3cf55f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e1a3cf5968 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e1a3cf56c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf5738 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf57d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e1a3cf5878 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e1a3d21328 <col:65, line:485:5>
|     `-ReturnStmt 0x55e1a3d21318 <line:484:9, col:55>
|       `-CallExpr 0x55e1a3d212d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d211b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d21230 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf56c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d21250 <col:30> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e1a3d21270 <col:41> 'P' lvalue ParmVar 0x55e1a3cf5738 'parser' 'P'
|         |-DeclRefExpr 0x55e1a3d21290 <col:49> 'T1' lvalue ParmVar 0x55e1a3cf57d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e1a3d212b0 <col:53> 'T2' lvalue ParmVar 0x55e1a3cf5878 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e1a3cf5f88 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55e1a3cf5a80 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf5af8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e1a3cf5b78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e1a3cf5ee8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e1a3cf5c40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf5cb8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf5d58 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e1a3cf5df8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e1a3d214c8 <col:65, line:489:5>
|     `-ReturnStmt 0x55e1a3d214b8 <line:488:9, col:56>
|       `-CallExpr 0x55e1a3d21470 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d21350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d213d0 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf5c40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d213f0 <col:30> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int'
|         |-DeclRefExpr 0x55e1a3d21410 <col:42> 'P' lvalue ParmVar 0x55e1a3cf5cb8 'parser' 'P'
|         |-DeclRefExpr 0x55e1a3d21430 <col:50> 'T1' lvalue ParmVar 0x55e1a3cf5d58 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e1a3d21450 <col:54> 'T2' lvalue ParmVar 0x55e1a3cf5df8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e1a3cf6508 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55e1a3cf6000 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf6078 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e1a3cf60f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| |-CXXMethodDecl 0x55e1a3cf6468 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
| | |-ParmVarDecl 0x55e1a3cf61c0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55e1a3cf6238 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55e1a3cf62d8 <col:50, col:54> col:54 referenced x1 'T1 &'
| | |-ParmVarDecl 0x55e1a3cf6378 <col:58, col:62> col:62 referenced x2 'T2 &'
| | `-CompoundStmt 0x55e1a3d21718 <col:66, line:493:5>
| |   `-ReturnStmt 0x55e1a3d21708 <line:492:9, col:68>
| |     `-CallExpr 0x55e1a3d216c0 <col:16, col:68> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55e1a3d214f0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55e1a3d21570 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf61c0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55e1a3d21640 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55e1a3d215f0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55e1a3d215d0 <col:30> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55e1a3d21628 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55e1a3d21608 <col:42> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55e1a3d21660 <col:54> 'P' lvalue ParmVar 0x55e1a3cf6238 'parser' 'P'
| |       |-DeclRefExpr 0x55e1a3d21680 <col:62> 'T1' lvalue ParmVar 0x55e1a3cf62d8 'x1' 'T1 &'
| |       `-DeclRefExpr 0x55e1a3d216a0 <col:66> 'T2' lvalue ParmVar 0x55e1a3cf6378 'x2' 'T2 &'
| `-CXXMethodDecl 0x55e1a3d4f498 <line:491:5, line:493:5> line:491:11 used read_mp 'Args &(const char *, IPPrefixArg, IPAddress &, IPAddress &)'
|   |-TemplateArgument type 'IPPrefixArg'
|   |-TemplateArgument type 'IPAddress'
|   |-TemplateArgument type 'IPAddress'
|   |-ParmVarDecl 0x55e1a3d4f110 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3d4f1b8 <col:40, col:42> col:42 parser 'IPPrefixArg':'IPPrefixArg'
|   |-ParmVarDecl 0x55e1a3d4f288 <col:50, col:54> col:54 x1 'IPAddress &'
|   `-ParmVarDecl 0x55e1a3d4f358 <col:58, col:62> col:62 x2 'IPAddress &'
|-FunctionTemplateDecl 0x55e1a3cf77b8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55e1a3cf6580 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf65f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e1a3cf6678 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e1a3cf7718 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e1a3cf7390 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf7410 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cf7488 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf7528 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e1a3cf75c8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e1a3d218a8 <col:74, line:498:5>
|     |-CallExpr 0x55e1a3d21820 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e1a3d21730 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e1a3d21770 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e1a3d21780 <col:30> 'const char *' lvalue ParmVar 0x55e1a3cf7390 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e1a3d217a0 <col:39> 'int' lvalue ParmVar 0x55e1a3cf7410 'flags' 'int'
|     | |-DeclRefExpr 0x55e1a3d217c0 <col:46> 'P' lvalue ParmVar 0x55e1a3cf7488 'parser' 'P'
|     | |-DeclRefExpr 0x55e1a3d217e0 <col:54> 'T1' lvalue ParmVar 0x55e1a3cf7528 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55e1a3d21800 <col:58> 'T2' lvalue ParmVar 0x55e1a3cf75c8 'x2' 'T2 &'
|     `-ReturnStmt 0x55e1a3d21898 <line:497:9, col:17>
|       `-UnaryOperator 0x55e1a3d21880 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d21870 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cf7b18 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55e1a3cf7838 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e1a3cf7a78 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e1a3cf78f0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf7968 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55e1a3d219f0 <col:52, line:509:5>
|     `-ReturnStmt 0x55e1a3d219e0 <line:508:9, col:44>
|       `-CallExpr 0x55e1a3d219a8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d218d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d21948 <col:26> 'const char *' lvalue ParmVar 0x55e1a3cf78f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d21968 <col:35> 'int' 0
|         `-DeclRefExpr 0x55e1a3d21988 <col:38> 'P' lvalue ParmVar 0x55e1a3cf7968 'parser' 'P'
|-FunctionTemplateDecl 0x55e1a3cf7e18 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55e1a3cf7b80 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e1a3cf7d78 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e1a3cf7c30 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf7ca8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e1a3d21b30 <col:54, line:513:5>
|     `-ReturnStmt 0x55e1a3d21b20 <line:512:9, col:52>
|       `-CallExpr 0x55e1a3d21ae8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d21a18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d21a88 <col:26> 'const char *' lvalue ParmVar 0x55e1a3cf7c30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d21aa8 <col:35> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e1a3d21ac8 <col:46> 'P' lvalue ParmVar 0x55e1a3cf7ca8 'parser' 'P'
|-FunctionTemplateDecl 0x55e1a3cf8118 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55e1a3cf7e80 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e1a3cf8078 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e1a3cf7f30 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf7fa8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e1a3d21c70 <col:54, line:517:5>
|     `-ReturnStmt 0x55e1a3d21c60 <line:516:9, col:53>
|       `-CallExpr 0x55e1a3d21c28 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d21b58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d21bc8 <col:26> 'const char *' lvalue ParmVar 0x55e1a3cf7f30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d21be8 <col:35> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int'
|         `-DeclRefExpr 0x55e1a3d21c08 <col:47> 'P' lvalue ParmVar 0x55e1a3cf7fa8 'parser' 'P'
|-FunctionTemplateDecl 0x55e1a3cf8418 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e1a3cf8180 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e1a3cf8378 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e1a3cf8230 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf82a8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55e1a3d21e60 <col:55, line:521:5>
|     `-ReturnStmt 0x55e1a3d21e50 <line:520:9, col:65>
|       `-CallExpr 0x55e1a3d21e18 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d21c98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d21d08 <col:26> 'const char *' lvalue ParmVar 0x55e1a3cf8230 'keyword' 'const char *'
|         |-BinaryOperator 0x55e1a3d21dd8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55e1a3d21d88 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e1a3d21d68 <col:35> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e1a3d21dc0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e1a3d21da0 <col:47> 'const int' lvalue Var 0x55e1a3cf0440 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e1a3d21df8 <col:59> 'P' lvalue ParmVar 0x55e1a3cf82a8 'parser' 'P'
|-FunctionTemplateDecl 0x55e1a3cf87e8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55e1a3cf8480 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e1a3cf8748 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e1a3cf8530 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf85b0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cf8628 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55e1a3d21fa0 <col:63, line:526:5>
|     |-CallExpr 0x55e1a3d21f28 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e1a3d21e78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55e1a3d21eb8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55e1a3d21ec8 <col:35> 'const char *' lvalue ParmVar 0x55e1a3cf8530 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e1a3d21ee8 <col:44> 'int' lvalue ParmVar 0x55e1a3cf85b0 'flags' 'int'
|     | `-DeclRefExpr 0x55e1a3d21f08 <col:51> 'P' lvalue ParmVar 0x55e1a3cf8628 'parser' 'P'
|     `-ReturnStmt 0x55e1a3d21f90 <line:525:9, col:17>
|       `-UnaryOperator 0x55e1a3d21f78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d21f68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cf8c38 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55e1a3cf8858 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf88d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf8b98 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf8998 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf8a10 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf8ab8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d220f8 <col:58, line:541:5>
|     `-ReturnStmt 0x55e1a3d220e8 <line:540:9, col:39>
|       `-CallExpr 0x55e1a3d220b0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d21fd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d22050 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf8998 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d22070 <col:30> 'P' lvalue ParmVar 0x55e1a3cf8a10 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d22090 <col:38> 'T' lvalue ParmVar 0x55e1a3cf8ab8 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf9088 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55e1a3cf8ca8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf8d28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf8fe8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf8de8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf8e60 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf8f08 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d22230 <col:60, line:545:5>
|     `-ReturnStmt 0x55e1a3d22220 <line:544:9, col:41>
|       `-CallExpr 0x55e1a3d221e8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d22120 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d22188 <col:23> 'const char *' lvalue ParmVar 0x55e1a3cf8de8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d221a8 <col:32> 'P' lvalue ParmVar 0x55e1a3cf8e60 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d221c8 <col:40> 'T' lvalue ParmVar 0x55e1a3cf8f08 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf94d8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55e1a3cf90f8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf9178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf9438 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf9238 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf92b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf9358 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d22368 <col:60, line:549:5>
|     `-ReturnStmt 0x55e1a3d22358 <line:548:9, col:41>
|       `-CallExpr 0x55e1a3d22320 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d22258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d222c0 <col:23> 'const char *' lvalue ParmVar 0x55e1a3cf9238 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d222e0 <col:32> 'P' lvalue ParmVar 0x55e1a3cf92b0 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d22300 <col:40> 'T' lvalue ParmVar 0x55e1a3cf9358 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf9928 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e1a3cf9548 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf95c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf9888 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf9688 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf9700 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf97a8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d224a0 <col:61, line:553:5>
|     `-ReturnStmt 0x55e1a3d22490 <line:552:9, col:42>
|       `-CallExpr 0x55e1a3d22458 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d22390 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d223f8 <col:24> 'const char *' lvalue ParmVar 0x55e1a3cf9688 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d22418 <col:33> 'P' lvalue ParmVar 0x55e1a3cf9700 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d22438 <col:41> 'T' lvalue ParmVar 0x55e1a3cf97a8 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cf9e08 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55e1a3cf9998 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cf9a18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cf9d68 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e1a3cf9ad8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf9b58 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cf9bd0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cf9c78 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d22618 <col:69, line:557:5>
|     `-ReturnStmt 0x55e1a3d22608 <line:556:9, col:46>
|       `-CallExpr 0x55e1a3d225c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d224c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d22548 <col:21> 'const char *' lvalue ParmVar 0x55e1a3cf9ad8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d22568 <col:30> 'int' lvalue ParmVar 0x55e1a3cf9b58 'flags' 'int'
|         |-DeclRefExpr 0x55e1a3d22588 <col:37> 'P' lvalue ParmVar 0x55e1a3cf9bd0 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d225a8 <col:45> 'T' lvalue ParmVar 0x55e1a3cf9c78 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cfa118 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55e1a3cf9e80 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e1a3cfa078 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e1a3cf9f30 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cf9fa8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55e1a3d22758 <col:56, line:571:5>
|     `-ReturnStmt 0x55e1a3d22748 <line:570:9, col:48>
|       `-CallExpr 0x55e1a3d22710 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d22640 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d226b0 <col:30> 'const char *' lvalue ParmVar 0x55e1a3cf9f30 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d226d0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55e1a3d226f0 <col:42> 'P' lvalue ParmVar 0x55e1a3cf9fa8 'parser' 'P'
|-FunctionTemplateDecl 0x55e1a3cfa4a8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55e1a3cfa180 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e1a3cfa408 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e1a3cfa230 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfa2b0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cfa328 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e1a3d22928 <col:67, line:576:5>
|     |-CallExpr 0x55e1a3d228b0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e1a3d22770 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e1a3d227b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e1a3d227c0 <col:39> 'const char *' lvalue ParmVar 0x55e1a3cfa230 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e1a3d22870 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e1a3d22820 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e1a3d227e0 <col:48> 'int' lvalue ParmVar 0x55e1a3cfa2b0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e1a3d22858 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e1a3d22838 <col:56> 'const int' lvalue Var 0x55e1a3cf0630 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55e1a3d22890 <col:68> 'P' lvalue ParmVar 0x55e1a3cfa328 'parser' 'P'
|     `-ReturnStmt 0x55e1a3d22918 <line:575:9, col:17>
|       `-UnaryOperator 0x55e1a3d22900 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d228f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cfa8f8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55e1a3cfa518 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cfa598 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cfa858 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e1a3cfa658 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfa6d0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cfa778 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d22a98 <col:62, line:592:5>
|     `-ReturnStmt 0x55e1a3d22a88 <line:591:9, col:51>
|       `-CallExpr 0x55e1a3d22a48 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d22958 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d229c8 <col:30> 'const char *' lvalue ParmVar 0x55e1a3cfa658 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d229e8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55e1a3d22a08 <col:42> 'P' lvalue ParmVar 0x55e1a3cfa6d0 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d22a28 <col:50> 'T' lvalue ParmVar 0x55e1a3cfa778 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cfadd8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55e1a3cfa968 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cfa9e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cfad38 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e1a3cfaaa8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfab28 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cfaba0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cfac48 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d22c90 <col:73, line:597:5>
|     |-CallExpr 0x55e1a3d22c10 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e1a3d22ab0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e1a3d22af0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e1a3d22b00 <col:39> 'const char *' lvalue ParmVar 0x55e1a3cfaaa8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e1a3d22bb0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e1a3d22b60 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e1a3d22b20 <col:48> 'int' lvalue ParmVar 0x55e1a3cfab28 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e1a3d22b98 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e1a3d22b78 <col:56> 'const int' lvalue Var 0x55e1a3cf0630 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e1a3d22bd0 <col:68> 'P' lvalue ParmVar 0x55e1a3cfaba0 'parser' 'P'
|     | `-DeclRefExpr 0x55e1a3d22bf0 <col:76> 'T' lvalue ParmVar 0x55e1a3cfac48 'x' 'T &'
|     `-ReturnStmt 0x55e1a3d22c80 <line:596:9, col:17>
|       `-UnaryOperator 0x55e1a3d22c68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d22c58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cfb388 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55e1a3cfae50 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cfaec8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cfb2e8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e1a3cfaf88 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfb000 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cfb1c0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e1a3d22e00 <col:65, line:614:5>
|     `-ReturnStmt 0x55e1a3d22df0 <line:613:9, col:46>
|       `-CallExpr 0x55e1a3d22db0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d22cc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d22d30 <col:25> 'const char *' lvalue ParmVar 0x55e1a3cfaf88 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d22d50 <col:34> 'int' 0
|         |-DeclRefExpr 0x55e1a3d22d70 <col:37> 'P' lvalue ParmVar 0x55e1a3cfb000 'parser' 'P'
|         `-DeclRefExpr 0x55e1a3d22d90 <col:45> 'Vector<T>' lvalue ParmVar 0x55e1a3cfb1c0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e1a3cfb7b8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55e1a3cfb3f8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e1a3cfb718 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55e1a3cfb4b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfb600 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e1a3d23020 <col:55, line:618:5>
|     `-ReturnStmt 0x55e1a3d23010 <line:617:9, col:55>
|       `-CallExpr 0x55e1a3d22fd0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d22e28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d22e98 <col:25> 'const char *' lvalue ParmVar 0x55e1a3cfb4b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e1a3d22eb8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55e1a3d22f90 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e1a3d22fb0 <col:54> 'Vector<T>' lvalue ParmVar 0x55e1a3cfb600 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e1a3cfbd88 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55e1a3cfb820 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cfb898 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cfbce8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e1a3cfb958 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfb9d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cfba50 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cfbba0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e1a3d23218 <col:76, line:623:5>
|     |-CallExpr 0x55e1a3d23198 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e1a3d23038 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55e1a3d23078 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55e1a3d23088 <col:34> 'const char *' lvalue ParmVar 0x55e1a3cfb958 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e1a3d23138 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e1a3d230e8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e1a3d230a8 <col:43> 'int' lvalue ParmVar 0x55e1a3cfb9d8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e1a3d23120 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e1a3d23100 <col:51> 'const int' lvalue Var 0x55e1a3cf0630 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e1a3d23158 <col:63> 'P' lvalue ParmVar 0x55e1a3cfba50 'parser' 'P'
|     | `-DeclRefExpr 0x55e1a3d23178 <col:71> 'Vector<T>' lvalue ParmVar 0x55e1a3cfbba0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55e1a3d23208 <line:622:9, col:17>
|       `-UnaryOperator 0x55e1a3d231f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d231e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cfc2c8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55e1a3cfbe00 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cfbe78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cfc228 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55e1a3cfbf38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfbfb8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cfc100 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e1a3d23480 <col:66, line:627:5>
|     `-ReturnStmt 0x55e1a3d23470 <line:626:9, col:59>
|       `-CallExpr 0x55e1a3d23430 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e1a3d23248 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e1a3d232b8 <col:25> 'const char *' lvalue ParmVar 0x55e1a3cfbf38 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e1a3d232d8 <col:34> 'int' lvalue ParmVar 0x55e1a3cfbfb8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55e1a3d233f0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e1a3d23410 <col:58> 'Vector<T>' lvalue ParmVar 0x55e1a3cfc100 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55e1a3cfc358 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55e1a3d23500 <col:25, line:633:5>
|   `-ReturnStmt 0x55e1a3d234f0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55e1a3d234d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e1a3d234a8 <col:16> 'const bool' lvalue ->_status 0x55e1a3d0a9f8
|         `-CXXThisExpr 0x55e1a3d23498 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e1a3cfc4d8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55e1a3cfc410 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55e1a3d235e8 <col:27, line:639:5>
|   |-BinaryOperator 0x55e1a3d23590 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e1a3d23518 <col:9> 'bool' lvalue ParmVar 0x55e1a3cfc410 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e1a3d23578 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e1a3d23548 <col:13> 'bool' lvalue ->_status 0x55e1a3d0a9f8
|   |     `-CXXThisExpr 0x55e1a3d23538 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e1a3d235d8 <line:638:9, col:17>
|     `-UnaryOperator 0x55e1a3d235c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e1a3d235b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e1a3cfc658 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e1a3cfc598 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55e1a3d236d8 <col:39, line:644:5>
|   |-BinaryOperator 0x55e1a3d23680 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e1a3d23608 <col:9> 'bool' lvalue ParmVar 0x55e1a3cfc598 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e1a3d23668 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e1a3d23638 <col:13> 'const bool' lvalue ->_status 0x55e1a3d0a9f8
|   |     `-CXXThisExpr 0x55e1a3d23628 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e1a3d236c8 <line:643:9, col:17>
|     `-UnaryOperator 0x55e1a3d236b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e1a3d236a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e1a3cfc720 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55e1a3d23780 <col:30, line:651:5>
|   `-ReturnStmt 0x55e1a3d23770 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55e1a3d23758 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e1a3d23728 <col:16> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|         `-ImplicitCastExpr 0x55e1a3d23708 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55e1a3d236f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e1a3cfc868 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55e1a3cfc7d8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55e1a3d23888 <col:32, line:658:5>
|   |-BinaryOperator 0x55e1a3d23830 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e1a3d23798 <col:9> 'bool' lvalue ParmVar 0x55e1a3cfc7d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e1a3d23818 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e1a3d237e8 <col:13> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|   |     `-ImplicitCastExpr 0x55e1a3d237c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e1a3d237b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e1a3d23878 <line:657:9, col:17>
|     `-UnaryOperator 0x55e1a3d23860 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e1a3d23850 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e1a3cfc9b8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e1a3cfc928 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55e1a3d23998 <col:44, line:663:5>
|   |-BinaryOperator 0x55e1a3d23940 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e1a3d238a8 <col:9> 'bool' lvalue ParmVar 0x55e1a3cfc928 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e1a3d23928 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e1a3d238f8 <col:13> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|   |     `-ImplicitCastExpr 0x55e1a3d238d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e1a3d238c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e1a3d23988 <line:662:9, col:17>
|     `-UnaryOperator 0x55e1a3d23970 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e1a3d23960 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e1a3cfca80 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55e1a3cfcb48 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55e1a3cfcc10 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55e1a3cfccd8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55e1a3cfcfe8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55e1a3cfcd78 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e1a3cfcf48 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55e1a3cfce58 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d23d50 <col:19, line:706:5>
|     `-IfStmt 0x55e1a3d23d28 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55e1a3d23a98 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55e1a3d23c58 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55e1a3d23c28 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55e1a3d23be8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55e1a3d23af0 <col:42> '<bound member function type>' ->simple_slot 0x55e1a3d1ceb0
|       |     | `-CXXThisExpr 0x55e1a3d23ae0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55e1a3d23b88 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55e1a3d23b40 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55e1a3a89ee8
|       |     | `-DeclRefExpr 0x55e1a3d23b20 <col:55> 'T' lvalue ParmVar 0x55e1a3cfce58 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55e1a3d23bc8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55e1a3d23d18 <line:705:13, col:34>
|         `-CallExpr 0x55e1a3d23cf0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55e1a3d23c78 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55e1a3d23cd0 <col:33> 'T' lvalue ParmVar 0x55e1a3cfce58 'x' 'T &'
|-FunctionTemplateDecl 0x55e1a3cfd2b8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55e1a3cfd048 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e1a3cfd218 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55e1a3cfd128 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55e1a3d24130 <col:31, line:717:5>
|     |-DeclStmt 0x55e1a3d23e90 <line:713:9, col:23>
|     | `-VarDecl 0x55e1a3d23d78 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55e1a3d23e68 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e1a3d23df0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e1a3d23e48 <col:21> 'T' lvalue ParmVar 0x55e1a3cfd128 'x' 'T &'
|     |-IfStmt 0x55e1a3d240e0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55e1a3d23f88 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55e1a3d240c0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e1a3d24060 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e1a3d23ff0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|     |   | `-DeclRefExpr 0x55e1a3d23fd0 <col:14> 'T *' lvalue Var 0x55e1a3d23d78 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55e1a3d240a0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55e1a3d24118 <line:716:9, col:16>
|       `-DeclRefExpr 0x55e1a3d240f8 <col:16> 'T *' lvalue Var 0x55e1a3d23d78 's' 'T *'
|-FunctionTemplateDecl 0x55e1a3cfd6c8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55e1a3cfd318 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e1a3cfd398 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e1a3cfd628 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55e1a3cfd478 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55e1a3cfd518 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55e1a3d24440 <col:37, line:726:5>
|     |-IfStmt 0x55e1a3d243d0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55e1a3d243f0 <line:723:13, col:26>
|     | | `-VarDecl 0x55e1a3d24198 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55e1a3d24288 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55e1a3d24210 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55e1a3d24268 <col:25> 'T' lvalue ParmVar 0x55e1a3cfd478 'x' 'T &'
|     | |-DeclRefExpr 0x55e1a3d242b0 <col:16> 'T *' lvalue Var 0x55e1a3d24198 's' 'T *'
|     | `-BinaryOperator 0x55e1a3d243b0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e1a3d24360 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e1a3d242f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|     |   | `-DeclRefExpr 0x55e1a3d242d0 <col:14> 'T *' lvalue Var 0x55e1a3d24198 's' 'T *'
|     |   `-DeclRefExpr 0x55e1a3d24390 <col:18> 'const V' lvalue ParmVar 0x55e1a3cfd518 'value' 'const V &'
|     `-ReturnStmt 0x55e1a3d24430 <line:725:9, col:17>
|       `-UnaryOperator 0x55e1a3d24418 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e1a3d24408 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e1a3cfdac8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55e1a3cfd730 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e1a3cfda28 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55e1a3cfd7e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfd860 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cfd908 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55e1a3d25260 <col:65, line:737:5>
|     |-DeclStmt 0x55e1a3d244d8 <line:732:9, col:26>
|     | `-VarDecl 0x55e1a3d24470 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e1a3d25228 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55e1a3d25248 <line:733:13, col:58>
|       | `-VarDecl 0x55e1a3d24500 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e1a3d246e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e1a3d246b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e1a3d24698 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e1a3d24678 <col:26, col:58> 'String' (CXXTemporary 0x55e1a3d24678)
|       |           `-CXXMemberCallExpr 0x55e1a3d24608 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e1a3d24578 <col:26> '<bound member function type>' ->find 0x55e1a3d1c4c8
|       |             | `-CXXThisExpr 0x55e1a3d24568 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e1a3d24640 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e1a3d245a8 <col:31> 'const char *' lvalue ParmVar 0x55e1a3cfd7e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e1a3d24658 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e1a3d245c8 <col:40> 'int' lvalue ParmVar 0x55e1a3cfd860 'flags' 'int'
|       |             `-DeclRefExpr 0x55e1a3d245e8 <col:47> 'Args::Slot *' lvalue Var 0x55e1a3d24470 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e1a3d24798 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e1a3d24780 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e1a3d24760 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e1a3d24730 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e1a3a4ceb8
|       |       `-ImplicitCastExpr 0x55e1a3d24718 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e1a3d246f8 <col:20> 'String' lvalue Var 0x55e1a3d24500 'str' 'String'
|       `-CompoundStmt 0x55e1a3d25208 <col:61, line:736:9>
|         |-DeclStmt 0x55e1a3d24c50 <line:734:13, col:76>
|         | `-VarDecl 0x55e1a3d247e8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e1a3d24c20 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e1a3d24b90 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e1a3d24bd8 <col:60> 'T' lvalue ParmVar 0x55e1a3cfd908 'variable' 'T &'
|         |     `-UnaryOperator 0x55e1a3d24c08 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e1a3d24bf8 <col:71> 'Args *' this
|         `-CallExpr 0x55e1a3d251d8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55e1a3d24c78 <col:13> '<bound member function type>' ->postparse 0x55e1a3d1c6d8
|           | `-CXXThisExpr 0x55e1a3d24c68 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e1a3d25198 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e1a3d24ca8 <col:23> 'T *' lvalue Var 0x55e1a3d247e8 's' 'T *'
|           | `-CallExpr 0x55e1a3d25158 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e1a3d24f30 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55e1a3d25030 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55e1a3d25050 <col:86> 'String' lvalue Var 0x55e1a3d24500 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e1a3d25100 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e1a3d25090 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|           |   | `-DeclRefExpr 0x55e1a3d25070 <col:92> 'T *' lvalue Var 0x55e1a3d247e8 's' 'T *'
|           |   `-UnaryOperator 0x55e1a3d25140 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e1a3d25130 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55e1a3d251b8 <col:103> 'Args::Slot *' lvalue Var 0x55e1a3d24470 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e1a3cfe018 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e1a3cfdb38 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e1a3cfdbb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e1a3cfdf78 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e1a3cfdc78 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfdcf8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cfdd98 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55e1a3cfde38 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55e1a3d26100 <col:88, line:745:5>
|     |-DeclStmt 0x55e1a3d252f8 <line:741:9, col:26>
|     | `-VarDecl 0x55e1a3d25290 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e1a3d25518 <line:742:9, col:55>
|     | `-VarDecl 0x55e1a3d25320 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e1a3d25500 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e1a3d254d0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e1a3d254b8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e1a3d25498 <col:22, col:54> 'String' (CXXTemporary 0x55e1a3d25498)
|     |           `-CXXMemberCallExpr 0x55e1a3d25428 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e1a3d25398 <col:22> '<bound member function type>' ->find 0x55e1a3d1c4c8
|     |             | `-CXXThisExpr 0x55e1a3d25388 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e1a3d25460 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e1a3d253c8 <col:27> 'const char *' lvalue ParmVar 0x55e1a3cfdc78 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e1a3d25478 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e1a3d253e8 <col:36> 'int' lvalue ParmVar 0x55e1a3cfdcf8 'flags' 'int'
|     |             `-DeclRefExpr 0x55e1a3d25408 <col:43> 'Args::Slot *' lvalue Var 0x55e1a3d25290 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e1a3d258f0 <line:743:9, col:72>
|     | `-VarDecl 0x55e1a3d25568 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e1a3d258c0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e1a3d25830 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e1a3d25878 <col:56> 'T' lvalue ParmVar 0x55e1a3cfdd98 'variable' 'T &'
|     |     `-UnaryOperator 0x55e1a3d258a8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e1a3d25898 <col:67> 'Args *' this
|     `-CallExpr 0x55e1a3d260d0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55e1a3d25918 <col:9> '<bound member function type>' ->postparse 0x55e1a3d1c6d8
|       | `-CXXThisExpr 0x55e1a3d25908 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e1a3d26090 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e1a3d25948 <col:19> 'T *' lvalue Var 0x55e1a3d25568 's' 'T *'
|       | `-ParenExpr 0x55e1a3d26070 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55e1a3d26040 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e1a3d26028 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e1a3d26010 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e1a3d25ff0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e1a3d25fc0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e1a3a4ceb8
|       |     |       `-ImplicitCastExpr 0x55e1a3d25fa8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e1a3d25968 <col:25> 'String' lvalue Var 0x55e1a3d25320 'str' 'String'
|       |     |-CallExpr 0x55e1a3d25e18 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e1a3d25bf0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55e1a3d25cf0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55e1a3d25d10 <col:89> 'String' lvalue Var 0x55e1a3d25320 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e1a3d25dc0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e1a3d25d50 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|       |     | | `-DeclRefExpr 0x55e1a3d25d30 <col:95> 'T *' lvalue Var 0x55e1a3d25568 's' 'T *'
|       |     | `-UnaryOperator 0x55e1a3d25e00 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e1a3d25df0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55e1a3d25f88 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55e1a3d25f68 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e1a3d25f38 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e1a3d25ee8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e1a3d25e78 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|       |         | | `-DeclRefExpr 0x55e1a3d25e58 <col:109> 'T *' lvalue Var 0x55e1a3d25568 's' 'T *'
|       |         | `-DeclRefExpr 0x55e1a3d25f18 <col:113> 'const V' lvalue ParmVar 0x55e1a3cfde38 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e1a3d25f58 <col:120> 'bool' true
|       `-DeclRefExpr 0x55e1a3d260b0 <col:128> 'Args::Slot *' lvalue Var 0x55e1a3d25290 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e1a3cfe548 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55e1a3cfe090 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cfe108 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3cfe4a8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e1a3cfe1c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfe248 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cfe2c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cfe368 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55e1a3d26cf8 <col:75, line:754:5>
|     |-DeclStmt 0x55e1a3d261a8 <line:749:9, col:26>
|     | `-VarDecl 0x55e1a3d26140 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e1a3d26cc0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55e1a3d26ce0 <line:750:13, col:58>
|       | `-VarDecl 0x55e1a3d261d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e1a3d263b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e1a3d26380 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e1a3d26368 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e1a3d26348 <col:26, col:58> 'String' (CXXTemporary 0x55e1a3d26348)
|       |           `-CXXMemberCallExpr 0x55e1a3d262d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e1a3d26248 <col:26> '<bound member function type>' ->find 0x55e1a3d1c4c8
|       |             | `-CXXThisExpr 0x55e1a3d26238 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e1a3d26310 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e1a3d26278 <col:31> 'const char *' lvalue ParmVar 0x55e1a3cfe1c8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e1a3d26328 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e1a3d26298 <col:40> 'int' lvalue ParmVar 0x55e1a3cfe248 'flags' 'int'
|       |             `-DeclRefExpr 0x55e1a3d262b8 <col:47> 'Args::Slot *' lvalue Var 0x55e1a3d26140 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e1a3d26468 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e1a3d26450 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e1a3d26430 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e1a3d26400 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e1a3a4ceb8
|       |       `-ImplicitCastExpr 0x55e1a3d263e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e1a3d263c8 <col:20> 'String' lvalue Var 0x55e1a3d261d0 'str' 'String'
|       `-CompoundStmt 0x55e1a3d26ca0 <col:61, line:753:9>
|         |-DeclStmt 0x55e1a3d26840 <line:751:13, col:63>
|         | `-VarDecl 0x55e1a3d264b8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e1a3d26810 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e1a3d26780 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e1a3d267c8 <col:47> 'T' lvalue ParmVar 0x55e1a3cfe368 'variable' 'T &'
|         |     `-UnaryOperator 0x55e1a3d267f8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e1a3d267e8 <col:58> 'Args *' this
|         `-CallExpr 0x55e1a3d26c70 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55e1a3d26868 <col:13> '<bound member function type>' ->postparse 0x55e1a3d1c6d8
|           | `-CXXThisExpr 0x55e1a3d26858 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e1a3d26c30 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e1a3d26898 <col:23> 'T *' lvalue Var 0x55e1a3d264b8 's' 'T *'
|           | `-CallExpr 0x55e1a3d26bf0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e1a3d26a80 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e1a3d26ac8 <col:56> 'P' lvalue ParmVar 0x55e1a3cfe2c0 'parser' 'P'
|           |   |-DeclRefExpr 0x55e1a3d26ae8 <col:64> 'String' lvalue Var 0x55e1a3d261d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e1a3d26b98 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e1a3d26b28 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|           |   | `-DeclRefExpr 0x55e1a3d26b08 <col:70> 'T *' lvalue Var 0x55e1a3d264b8 's' 'T *'
|           |   `-UnaryOperator 0x55e1a3d26bd8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e1a3d26bc8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55e1a3d26c50 <col:81> 'Args::Slot *' lvalue Var 0x55e1a3d26140 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e1a3cfeba8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e1a3cfe5c0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e1a3cfe638 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55e1a3cfe6b8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e1a3cfeb08 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e1a3cfe780 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfe800 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cfe878 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cfe918 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55e1a3cfe9b8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55e1a3d29dd8 <col:98, line:762:5>
|     |-DeclStmt 0x55e1a3d26d90 <line:758:9, col:26>
|     | `-VarDecl 0x55e1a3d26d28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e1a3d26fb0 <line:759:9, col:55>
|     | `-VarDecl 0x55e1a3d26db8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e1a3d26f98 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e1a3d26f68 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e1a3d26f50 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e1a3d26f30 <col:22, col:54> 'String' (CXXTemporary 0x55e1a3d26f30)
|     |           `-CXXMemberCallExpr 0x55e1a3d26ec0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e1a3d26e30 <col:22> '<bound member function type>' ->find 0x55e1a3d1c4c8
|     |             | `-CXXThisExpr 0x55e1a3d26e20 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e1a3d26ef8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e1a3d26e60 <col:27> 'const char *' lvalue ParmVar 0x55e1a3cfe780 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e1a3d26f10 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e1a3d26e80 <col:36> 'int' lvalue ParmVar 0x55e1a3cfe800 'flags' 'int'
|     |             `-DeclRefExpr 0x55e1a3d26ea0 <col:43> 'Args::Slot *' lvalue Var 0x55e1a3d26d28 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e1a3d273d0 <line:760:9, col:59>
|     | `-VarDecl 0x55e1a3d27008 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e1a3d273a0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e1a3d27310 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e1a3d27358 <col:43> 'T' lvalue ParmVar 0x55e1a3cfe918 'variable' 'T &'
|     |     `-UnaryOperator 0x55e1a3d27388 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e1a3d27378 <col:54> 'Args *' this
|     `-CallExpr 0x55e1a3d29da8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55e1a3d273f8 <col:9> '<bound member function type>' ->postparse 0x55e1a3d1c6d8
|       | `-CXXThisExpr 0x55e1a3d273e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e1a3d29d68 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e1a3d27428 <col:19> 'T *' lvalue Var 0x55e1a3d27008 's' 'T *'
|       | `-ParenExpr 0x55e1a3d29d48 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55e1a3d29d18 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e1a3d29d00 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e1a3d29ce8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e1a3d29cc8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e1a3d29c98 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e1a3a4ceb8
|       |     |       `-ImplicitCastExpr 0x55e1a3d29c80 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e1a3d27448 <col:25> 'String' lvalue Var 0x55e1a3d26db8 'str' 'String'
|       |     |-CallExpr 0x55e1a3d277a0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e1a3d27630 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55e1a3d27678 <col:59> 'P' lvalue ParmVar 0x55e1a3cfe878 'parser' 'P'
|       |     | |-DeclRefExpr 0x55e1a3d27698 <col:67> 'String' lvalue Var 0x55e1a3d26db8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e1a3d27748 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e1a3d276d8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|       |     | | `-DeclRefExpr 0x55e1a3d276b8 <col:73> 'T *' lvalue Var 0x55e1a3d27008 's' 'T *'
|       |     | `-UnaryOperator 0x55e1a3d27788 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e1a3d27778 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55e1a3d29c60 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55e1a3d29c40 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e1a3d29c10 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e1a3d27870 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e1a3d27800 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|       |         | | `-DeclRefExpr 0x55e1a3d277e0 <col:87> 'T *' lvalue Var 0x55e1a3d27008 's' 'T *'
|       |         | `-DeclRefExpr 0x55e1a3d29bf0 <col:91> 'const V' lvalue ParmVar 0x55e1a3cfe9b8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e1a3d29c30 <col:98> 'bool' true
|       `-DeclRefExpr 0x55e1a3d29d88 <col:106> 'Args::Slot *' lvalue Var 0x55e1a3d26d28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e1a3cff218 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55e1a3cfec28 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3cfeca8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e1a3cfed28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e1a3cff178 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e1a3cfedf0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3cfee70 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3cfeee8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3cfef88 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55e1a3cff028 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55e1a3d2adb8 <col:60, line:773:5>
|     |-DeclStmt 0x55e1a3d29e80 <line:767:9, col:26>
|     | `-VarDecl 0x55e1a3d29e18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e1a3d2ad80 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55e1a3d2ada0 <line:768:13, col:58>
|       | `-VarDecl 0x55e1a3d29ea8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e1a3d2a088 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e1a3d2a058 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e1a3d2a040 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e1a3d2a020 <col:26, col:58> 'String' (CXXTemporary 0x55e1a3d2a020)
|       |           `-CXXMemberCallExpr 0x55e1a3d29fb0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e1a3d29f20 <col:26> '<bound member function type>' ->find 0x55e1a3d1c4c8
|       |             | `-CXXThisExpr 0x55e1a3d29f10 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e1a3d29fe8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e1a3d29f50 <col:31> 'const char *' lvalue ParmVar 0x55e1a3cfedf0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e1a3d2a000 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e1a3d29f70 <col:40> 'int' lvalue ParmVar 0x55e1a3cfee70 'flags' 'int'
|       |             `-DeclRefExpr 0x55e1a3d29f90 <col:47> 'Args::Slot *' lvalue Var 0x55e1a3d29e18 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e1a3d2a140 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e1a3d2a128 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e1a3d2a108 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e1a3d2a0d8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e1a3a4ceb8
|       |       `-ImplicitCastExpr 0x55e1a3d2a0c0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e1a3d2a0a0 <col:20> 'String' lvalue Var 0x55e1a3d29ea8 'str' 'String'
|       `-CompoundStmt 0x55e1a3d2ad58 <col:61, line:772:9>
|         |-DeclStmt 0x55e1a3d2a480 <line:769:13, col:66>
|         | `-VarDecl 0x55e1a3d2a198 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55e1a3d2a450 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e1a3d2a3c0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e1a3d2a408 <col:49> 'T1' lvalue ParmVar 0x55e1a3cfef88 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55e1a3d2a438 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e1a3d2a428 <col:61> 'Args *' this
|         |-DeclStmt 0x55e1a3d2a7f0 <line:770:13, col:66>
|         | `-VarDecl 0x55e1a3d2a508 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55e1a3d2a7c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e1a3d2a730 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e1a3d2a778 <col:49> 'T2' lvalue ParmVar 0x55e1a3cff028 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55e1a3d2a7a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e1a3d2a798 <col:61> 'Args *' this
|         `-CallExpr 0x55e1a3d2ad28 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55e1a3d2a818 <col:13> '<bound member function type>' ->postparse 0x55e1a3d1c6d8
|           | `-CXXThisExpr 0x55e1a3d2a808 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e1a3d2ace8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55e1a3d2a888 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55e1a3d2a848 <col:23> 'T1 *' lvalue Var 0x55e1a3d2a198 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55e1a3d2a868 <col:29> 'T2 *' lvalue Var 0x55e1a3d2a508 's2' 'T2 *'
|           | `-CallExpr 0x55e1a3d2aca0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e1a3d2aa70 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e1a3d2aab8 <col:63> 'P' lvalue ParmVar 0x55e1a3cfeee8 'parser' 'P'
|           |   |-DeclRefExpr 0x55e1a3d2aad8 <col:71> 'String' lvalue Var 0x55e1a3d29ea8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e1a3d2ab88 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e1a3d2ab18 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|           |   | `-DeclRefExpr 0x55e1a3d2aaf8 <col:77> 'T1 *' lvalue Var 0x55e1a3d2a198 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55e1a3d2ac48 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e1a3d2abd8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|           |   | `-DeclRefExpr 0x55e1a3d2abb8 <col:82> 'T2 *' lvalue Var 0x55e1a3d2a508 's2' 'T2 *'
|           |   `-UnaryOperator 0x55e1a3d2ac88 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e1a3d2ac78 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55e1a3d2ad08 <col:94> 'Args::Slot *' lvalue Var 0x55e1a3d29e18 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e1a3d07e68 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55e1a3cff298 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e1a3d07dc8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e1a3d07ba8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3d07c28 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3d07ca0 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e1a3d2b2d0 <col:67, line:780:5>
|     |-DeclStmt 0x55e1a3d2ae50 <line:777:9, col:26>
|     | `-VarDecl 0x55e1a3d2ade8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e1a3d2b298 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55e1a3d2b2b8 <line:778:13, col:58>
|       | `-VarDecl 0x55e1a3d2ae78 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e1a3d2b058 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e1a3d2b028 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e1a3d2b010 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e1a3d2aff0 <col:26, col:58> 'String' (CXXTemporary 0x55e1a3d2aff0)
|       |           `-CXXMemberCallExpr 0x55e1a3d2af80 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e1a3d2aef0 <col:26> '<bound member function type>' ->find 0x55e1a3d1c4c8
|       |             | `-CXXThisExpr 0x55e1a3d2aee0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e1a3d2afb8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e1a3d2af20 <col:31> 'const char *' lvalue ParmVar 0x55e1a3d07ba8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e1a3d2afd0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e1a3d2af40 <col:40> 'int' lvalue ParmVar 0x55e1a3d07c28 'flags' 'int'
|       |             `-DeclRefExpr 0x55e1a3d2af60 <col:47> 'Args::Slot *' lvalue Var 0x55e1a3d2ade8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e1a3d2b110 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e1a3d2b0f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e1a3d2b0d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e1a3d2b0a8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e1a3a4ceb8
|       |       `-ImplicitCastExpr 0x55e1a3d2b090 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e1a3d2b070 <col:20> 'String' lvalue Var 0x55e1a3d2ae78 'str' 'String'
|       `-CallExpr 0x55e1a3d2b268 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55e1a3d2b138 <col:13> '<bound member function type>' ->postparse 0x55e1a3d1c6d8
|         | `-CXXThisExpr 0x55e1a3d2b128 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55e1a3d2b218 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55e1a3d2b188 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55e1a3d2b168 <col:23> 'P' lvalue ParmVar 0x55e1a3d07ca0 'parser' 'P'
|         | |-DeclRefExpr 0x55e1a3d2b1d0 <col:36> 'String' lvalue Var 0x55e1a3d2ae78 'str' 'String'
|         | `-UnaryOperator 0x55e1a3d2b200 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55e1a3d2b1f0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55e1a3d2b248 <col:49> 'Args::Slot *' lvalue Var 0x55e1a3d2ade8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e1a3d08208 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e1a3d07ed8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e1a3d08168 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e1a3d07f90 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3d08010 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3d08088 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55e1a3d2bc40 <col:71, line:792:5>
|     |-DeclStmt 0x55e1a3d2b368 <line:784:9, col:26>
|     | `-VarDecl 0x55e1a3d2b300 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e1a3d2b438 <line:785:9, col:29>
|     | `-VarDecl 0x55e1a3d2b398 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e1a3d2b420 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e1a3d2b400 <col:28> 'int' 1
|     |-WhileStmt 0x55e1a3d2baf0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55e1a3d2bb10 <line:786:16, col:61>
|     | | `-VarDecl 0x55e1a3d2b460 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e1a3d2b640 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e1a3d2b610 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e1a3d2b5f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e1a3d2b5d8 <col:29, col:61> 'String' (CXXTemporary 0x55e1a3d2b5d8)
|     | |           `-CXXMemberCallExpr 0x55e1a3d2b568 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e1a3d2b4d8 <col:29> '<bound member function type>' ->find 0x55e1a3d1c4c8
|     | |             | `-CXXThisExpr 0x55e1a3d2b4c8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e1a3d2b5a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e1a3d2b508 <col:34> 'const char *' lvalue ParmVar 0x55e1a3d07f90 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e1a3d2b5b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e1a3d2b528 <col:43> 'int' lvalue ParmVar 0x55e1a3d08010 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e1a3d2b548 <col:50> 'Args::Slot *' lvalue Var 0x55e1a3d2b300 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e1a3d2b6f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e1a3d2b6e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e1a3d2b6c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e1a3d2b690 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e1a3a4ceb8
|     | |       `-ImplicitCastExpr 0x55e1a3d2b678 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e1a3d2b658 <col:23> 'String' lvalue Var 0x55e1a3d2b460 'str' 'String'
|     | `-CompoundStmt 0x55e1a3d2bac8 <col:64, line:790:9>
|     |   |-CallExpr 0x55e1a3d2b850 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55e1a3d2b720 <col:13> '<bound member function type>' ->postparse 0x55e1a3d1c6d8
|     |   | | `-CXXThisExpr 0x55e1a3d2b710 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e1a3d2b800 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e1a3d2b770 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e1a3d2b750 <col:23> 'P' lvalue ParmVar 0x55e1a3d08088 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e1a3d2b7b8 <col:36> 'String' lvalue Var 0x55e1a3d2b460 'str' 'String'
|     |   | | `-UnaryOperator 0x55e1a3d2b7e8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e1a3d2b7d8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55e1a3d2b830 <col:49> 'Args::Slot *' lvalue Var 0x55e1a3d2b300 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e1a3d2b9e8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e1a3d2b880 <col:13> 'int' lvalue Var 0x55e1a3d2b398 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e1a3d2b9d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e1a3d2b9b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e1a3d2b918 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e1a3d2b8f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e1a3d2b8e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e1a3d2b8a0 <col:28> 'int' lvalue Var 0x55e1a3d2b398 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e1a3d2b8c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e1a3d2b998 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e1a3d2b968 <col:49> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|     |   |         `-ImplicitCastExpr 0x55e1a3d2b948 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e1a3d2b938 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e1a3d2ba98 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e1a3d2ba08 <col:13> 'int' lvalue ParmVar 0x55e1a3d08010 'flags' 'int'
|     |     `-UnaryOperator 0x55e1a3d2ba80 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e1a3d2ba68 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e1a3d2ba48 <col:23> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e1a3d2bc20 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e1a3d2bb58 <col:9> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|       | `-ImplicitCastExpr 0x55e1a3d2bb38 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e1a3d2bb28 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e1a3d2bc00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e1a3d2bbe0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e1a3d2bbc8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e1a3d2bb88 <col:25> 'int' lvalue Var 0x55e1a3d2b398 'read_status' 'int'
|           `-IntegerLiteral 0x55e1a3d2bba8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e1a3d086e8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e1a3d08278 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3d082f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3d08648 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e1a3d083b8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3d08438 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3d084b0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3d08558 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55e1a3d2cbd0 <col:84, line:805:5>
|     |-DeclStmt 0x55e1a3d2bce8 <line:796:9, col:26>
|     | `-VarDecl 0x55e1a3d2bc80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e1a3d2bdb8 <line:797:9, col:29>
|     | `-VarDecl 0x55e1a3d2bd18 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e1a3d2bda0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e1a3d2bd80 <col:28> 'int' 1
|     |-DeclStmt 0x55e1a3d2c0f0 <line:798:9, col:71>
|     | `-VarDecl 0x55e1a3d2be08 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e1a3d2c0c0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e1a3d2c030 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55e1a3d2c078 <col:55> 'T' lvalue ParmVar 0x55e1a3d08558 'variable' 'T &'
|     |     `-UnaryOperator 0x55e1a3d2c0a8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e1a3d2c098 <col:66> 'Args *' this
|     |-WhileStmt 0x55e1a3d2ca80 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55e1a3d2caa0 <line:799:16, col:61>
|     | | `-VarDecl 0x55e1a3d2c118 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e1a3d2c2f8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e1a3d2c2c8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e1a3d2c2b0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e1a3d2c290 <col:29, col:61> 'String' (CXXTemporary 0x55e1a3d2c290)
|     | |           `-CXXMemberCallExpr 0x55e1a3d2c220 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e1a3d2c190 <col:29> '<bound member function type>' ->find 0x55e1a3d1c4c8
|     | |             | `-CXXThisExpr 0x55e1a3d2c180 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e1a3d2c258 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e1a3d2c1c0 <col:34> 'const char *' lvalue ParmVar 0x55e1a3d083b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e1a3d2c270 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e1a3d2c1e0 <col:43> 'int' lvalue ParmVar 0x55e1a3d08438 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e1a3d2c200 <col:50> 'Args::Slot *' lvalue Var 0x55e1a3d2bc80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e1a3d2c3b0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e1a3d2c398 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e1a3d2c378 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e1a3d2c348 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e1a3a4ceb8
|     | |       `-ImplicitCastExpr 0x55e1a3d2c330 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e1a3d2c310 <col:23> 'String' lvalue Var 0x55e1a3d2c118 'str' 'String'
|     | `-CompoundStmt 0x55e1a3d2ca58 <col:64, line:803:9>
|     |   |-CallExpr 0x55e1a3d2c7e0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55e1a3d2c3d8 <col:13> '<bound member function type>' ->postparse 0x55e1a3d1c6d8
|     |   | | `-CXXThisExpr 0x55e1a3d2c3c8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55e1a3d2c7a0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55e1a3d2c408 <col:23> 'T *' lvalue Var 0x55e1a3d2be08 's' 'T *'
|     |   | | `-CallExpr 0x55e1a3d2c760 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55e1a3d2c5f0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55e1a3d2c638 <col:56> 'P' lvalue ParmVar 0x55e1a3d084b0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55e1a3d2c658 <col:64> 'String' lvalue Var 0x55e1a3d2c118 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55e1a3d2c708 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55e1a3d2c698 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|     |   | |   | `-DeclRefExpr 0x55e1a3d2c678 <col:70> 'T *' lvalue Var 0x55e1a3d2be08 's' 'T *'
|     |   | |   `-UnaryOperator 0x55e1a3d2c748 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55e1a3d2c738 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55e1a3d2c7c0 <col:81> 'Args::Slot *' lvalue Var 0x55e1a3d2bc80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e1a3d2c978 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e1a3d2c810 <col:13> 'int' lvalue Var 0x55e1a3d2bd18 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e1a3d2c960 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e1a3d2c940 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e1a3d2c8a8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e1a3d2c888 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e1a3d2c870 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e1a3d2c830 <col:28> 'int' lvalue Var 0x55e1a3d2bd18 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e1a3d2c850 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e1a3d2c928 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e1a3d2c8f8 <col:49> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|     |   |         `-ImplicitCastExpr 0x55e1a3d2c8d8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e1a3d2c8c8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e1a3d2ca28 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e1a3d2c998 <col:13> 'int' lvalue ParmVar 0x55e1a3d08438 'flags' 'int'
|     |     `-UnaryOperator 0x55e1a3d2ca10 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e1a3d2c9f8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e1a3d2c9d8 <col:23> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e1a3d2cbb0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e1a3d2cae8 <col:9> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|       | `-ImplicitCastExpr 0x55e1a3d2cac8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e1a3d2cab8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e1a3d2cb90 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e1a3d2cb70 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e1a3d2cb58 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e1a3d2cb18 <col:25> 'int' lvalue Var 0x55e1a3d2bd18 'read_status' 'int'
|           `-IntegerLiteral 0x55e1a3d2cb38 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e1a3d08cc8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55e1a3d08760 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e1a3d087d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e1a3d08c28 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e1a3d08898 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e1a3d08918 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55e1a3d08990 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55e1a3d08ae0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55e1a3d2d9d8 <col:87, line:821:5>
|     |-DeclStmt 0x55e1a3d2cc80 <line:809:9, col:26>
|     | `-VarDecl 0x55e1a3d2cc18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e1a3d2cd50 <line:810:9, col:29>
|     | `-VarDecl 0x55e1a3d2ccb0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e1a3d2cd38 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e1a3d2cd18 <col:28> 'int' 1
|     |-DeclStmt 0x55e1a3d2cf98 <line:811:9, col:38>
|     | `-VarDecl 0x55e1a3d2ce80 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55e1a3d2cf70 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e1a3d2cef8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e1a3d2cf50 <col:29> 'Vector<T>' lvalue ParmVar 0x55e1a3d08ae0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55e1a3d2d888 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55e1a3d2d8a8 <line:812:16, col:61>
|     | | `-VarDecl 0x55e1a3d2cfc0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e1a3d2d1a0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e1a3d2d170 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e1a3d2d158 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e1a3d2d138 <col:29, col:61> 'String' (CXXTemporary 0x55e1a3d2d138)
|     | |           `-CXXMemberCallExpr 0x55e1a3d2d0c8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e1a3d2d038 <col:29> '<bound member function type>' ->find 0x55e1a3d1c4c8
|     | |             | `-CXXThisExpr 0x55e1a3d2d028 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e1a3d2d100 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e1a3d2d068 <col:34> 'const char *' lvalue ParmVar 0x55e1a3d08898 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e1a3d2d118 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e1a3d2d088 <col:43> 'int' lvalue ParmVar 0x55e1a3d08918 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e1a3d2d0a8 <col:50> 'Args::Slot *' lvalue Var 0x55e1a3d2cc18 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e1a3d2d258 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e1a3d2d240 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e1a3d2d220 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e1a3d2d1f0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e1a3a4ceb8
|     | |       `-ImplicitCastExpr 0x55e1a3d2d1d8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e1a3d2d1b8 <col:23> 'String' lvalue Var 0x55e1a3d2cfc0 'str' 'String'
|     | `-CompoundStmt 0x55e1a3d2d850 <col:64, line:819:9>
|     |   |-DeclStmt 0x55e1a3d2d318 <line:813:13, col:23>
|     |   | `-VarDecl 0x55e1a3d2d280 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55e1a3d2d2f8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55e1a3d2d498 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55e1a3d2d340 <col:13> '<bound member function type>' ->postparse 0x55e1a3d1c6d8
|     |   | | `-CXXThisExpr 0x55e1a3d2d330 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e1a3d2d440 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e1a3d2d390 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e1a3d2d370 <col:23> 'P' lvalue ParmVar 0x55e1a3d08990 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e1a3d2d3d8 <col:36> 'String' lvalue Var 0x55e1a3d2cfc0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55e1a3d2d3f8 <col:41> 'T' lvalue Var 0x55e1a3d2d280 'sx' 'T'
|     |   | | `-UnaryOperator 0x55e1a3d2d428 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e1a3d2d418 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55e1a3d2d478 <col:53> 'Args::Slot *' lvalue Var 0x55e1a3d2cc18 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55e1a3d2d5f0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55e1a3d2d528 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55e1a3d2d4f8 <col:17> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|     |   | |   `-ImplicitCastExpr 0x55e1a3d2d4d8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55e1a3d2d4c8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55e1a3d2d5c8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55e1a3d2d560 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55e1a3d2d540 <col:17> 'Vector<T> *' lvalue Var 0x55e1a3d2ce80 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55e1a3d2d5a8 <col:30> 'T' lvalue Var 0x55e1a3d2d280 'sx' 'T'
|     |   |-BinaryOperator 0x55e1a3d2d770 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e1a3d2d608 <col:13> 'int' lvalue Var 0x55e1a3d2ccb0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e1a3d2d758 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e1a3d2d738 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e1a3d2d6a0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e1a3d2d680 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e1a3d2d668 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e1a3d2d628 <col:28> 'int' lvalue Var 0x55e1a3d2ccb0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e1a3d2d648 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e1a3d2d720 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e1a3d2d6f0 <col:49> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|     |   |         `-ImplicitCastExpr 0x55e1a3d2d6d0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e1a3d2d6c0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e1a3d2d820 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e1a3d2d790 <col:13> 'int' lvalue ParmVar 0x55e1a3d08918 'flags' 'int'
|     |     `-UnaryOperator 0x55e1a3d2d808 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e1a3d2d7f0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e1a3d2d7d0 <col:23> 'const int' lvalue Var 0x55e1a3cf0348 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e1a3d2d9b8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e1a3d2d8f0 <col:9> 'bool' lvalue ->_read_status 0x55e1a3bffb80
|       | `-ImplicitCastExpr 0x55e1a3d2d8d0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e1a3d2d8c0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e1a3d2d998 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e1a3d2d978 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e1a3d2d960 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e1a3d2d920 <col:25> 'int' lvalue Var 0x55e1a3d2ccb0 'read_status' 'int'
|           `-IntegerLiteral 0x55e1a3d2d940 <col:40> 'int' 1
|-AccessSpecDecl 0x55e1a3d08d40 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55e1a3d08d68 prev 0x55e1a3c053b8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55e1a3d08e60 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55e1a3d08f50 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55e1a3d2da10 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55e1a3d09040 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55e1a3d2da20 <col:25, line:830:9>
| |-CXXMethodDecl 0x55e1a3d09140 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55e1a3d091f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55e1a3d09298 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e1a3d09298
| | `-ParmVarDecl 0x55e1a3d093a8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55e1a3d09b68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e1a3d09b68
|   `-ParmVarDecl 0x55e1a3d09c78 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55e1a3d09418 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55e1a3d09578 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55e1a3d09770 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55e1a3d09620 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55e1a3d09698 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55e1a3d2dc00 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55e1a3d09a28 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55e1a3d2da70 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e1a3d2da30 <col:20> 'void *' lvalue ParmVar 0x55e1a3d09620 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55e1a3d09a90 '_slot' 'char *'
| | | `-CXXNewExpr 0x55e1a3d2daf8 <col:32, col:45> 'char *' array Function 0x55e1a386fb28 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55e1a3d2dae0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55e1a3d2dab0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55e1a3d09698 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55e1a3d09af0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55e1a3d2dbc0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e1a3d2db80 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55e1a3d09698 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55e1a3d2dc80 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55e1a3d09870 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55e1a3d09040 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55e1a3d2dd08 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55e1a3d2dce8 <line:840:13, col:22> 'void' array Function 0x55e1a386fe88 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55e1a3d2dcd0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55e1a3d2dca0 <col:22> 'char *' lvalue ->_slot 0x55e1a3d09a90
| |         `-CXXThisExpr 0x55e1a3d2dc90 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55e1a3d09970 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55e1a3d09140 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55e1a3d2def8 <col:22, line:844:9>
| |   `-CallExpr 0x55e1a3d2de60 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55e1a3d2de48 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55e1a3d2de28 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55e1a397b908 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55e1a3d2de98 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55e1a3d2dd78 <col:20> 'void *' lvalue ->_ptr 0x55e1a3d09a28
| |     |   `-CXXThisExpr 0x55e1a3d2dd68 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55e1a3d2dec8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55e1a3d2deb0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55e1a3d2ddb8 <col:26> 'char *' lvalue ->_slot 0x55e1a3d09a90
| |     |     `-CXXThisExpr 0x55e1a3d2dda8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55e1a3d2dee0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55e1a3d2ddf8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55e1a3d09af0
| |         `-CXXThisExpr 0x55e1a3d2dde8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55e1a3d09a28 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55e1a3d09a90 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55e1a3d09af0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55e1a3d09ce8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e1a3d09ce8
| | `-ParmVarDecl 0x55e1a3d09df8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55e1a3d09e98 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e1a3d09e98
|   `-ParmVarDecl 0x55e1a3d09fa8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55e1a3d0a148 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55e1a3d0a018 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55e1a3d0a0b8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55e1a3d0a3e0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55e1a3d0a5d8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55e1a3d0a4a8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55e1a3d0a758 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55e1a3d2df30 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55e1a3d2df10 <col:20> 'T *' lvalue ParmVar 0x55e1a3d0a4a8 'ptr' 'T *'
|   | `-CompoundStmt 0x55e1a3d2df80 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55e1a3d0a6a8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55e1a3d09140 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55e1a3d2e130 <col:22, line:857:9>
|   |   `-CallExpr 0x55e1a3d2e100 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55e1a3d2df90 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55e1a3a34038 0x55e1a39de368
|   |     |-CXXOperatorCallExpr 0x55e1a3d2e090 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55e1a3d2e020 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e1a3c40fe8 0x55e1a3c40c08 0x55e1a3c40838 0x55e1a3c40458 0x55e1a3c40078 0x55e1a3c3fca8
|   |     | `-MemberExpr 0x55e1a3d2dff0 <col:29> 'T *' lvalue ->_ptr 0x55e1a3d0a758
|   |     |   `-CXXThisExpr 0x55e1a3d2dfe0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55e1a3d2e0d0 <col:35> 'T' lvalue ->_slot 0x55e1a3d0a7b8
|   |       `-CXXThisExpr 0x55e1a3d2e0c0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55e1a3d0a758 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55e1a3d0a7b8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55e1a3d0a820 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55e1a3d0a920 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55e1a3d0a970 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3d0a900 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55e1a3d0a8e0 <col:31> 'int' 48
|-FieldDecl 0x55e1a3d0a998 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55e1a3d0a9f8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55e1a3d0aa58 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55e1a3d0ab90 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55e1a3d1bd70 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55e1a3d1bdd0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55e1a3d1be80 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55e1a3d1c0a8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55e1a3d1bfb0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55e1a3d1c1f8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55e1a3d1c168 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55e1a3d1c4c8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55e1a3d1c2b8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55e1a3d1c338 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55e1a3d1c3e0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55e1a3d1c6d8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55e1a3d1c590 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55e1a3d1c608 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55e1a3d1c7a8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55e1a3d1c8f8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55e1a3d1c860 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55e1a3d1cc88 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55e1a3d1c9b8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55e1a3d1ca38 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55e1a3d1cae0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55e1a3d1cb98 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55e1a3d1ceb0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55e1a3d1cd60 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55e1a3d1cdd8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55e1a3d1d1c8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55e1a3d1cf60 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55e1a3d1d128 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55e1a3d1d038 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPrefixArg
         0 |   _Bool allow_bare_address
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3a91080 <../dummy_inc/click/ipaddress.hh:382:1, line:396:1> line:382:7 referenced class IPPrefixArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e1a3a91198 <col:1, col:7> col:7 implicit referenced class IPPrefixArg
|-AccessSpecDecl 0x55e1a3a91228 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x55e1a3a91338 <line:383:5, line:385:5> line:383:5 used IPPrefixArg 'void (bool)'
| |-ParmVarDecl 0x55e1a3a91260 <col:17, col:44> col:22 used allow_bare_address_ 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55e1a3a91b70 <col:44> 'bool' false
| |-CXXCtorInitializer Field 0x55e1a3a91b08 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x55e1a3a91c00 <line:384:23> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x55e1a3a91bc0 <col:23> 'bool' lvalue ParmVar 0x55e1a3a91260 'allow_bare_address_' 'bool'
| `-CompoundStmt 0x55e1a3a91c48 <col:44, line:385:5>
|-CXXMethodDecl 0x55e1a3a91688 <line:386:5, line:388:46> line:386:10 used parse 'bool (const String &, IPAddress &, IPAddress &, const ArgContext &) const'
| |-ParmVarDecl 0x55e1a3a913f8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55e1a3a91470 <line:387:9, col:20> col:20 result_addr 'IPAddress &'
| |-ParmVarDecl 0x55e1a3a914e8 <col:33, col:44> col:44 result_mask 'IPAddress &'
| `-ParmVarDecl 0x55e1a3a91560 <line:388:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55e1a3a91b80 <col:34> 'const ArgContext' lvalue Var 0x55e1a3a7efe0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55e1a3a91a38 <line:389:5, line:394:5> line:389:10 parse 'bool (const String &, struct in_addr &, struct in_addr &, const ArgContext &) const'
| |-ParmVarDecl 0x55e1a3a91758 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x55e1a3a917e8 <line:390:9, col:25> col:25 used result_addr 'struct in_addr &'
| |-ParmVarDecl 0x55e1a3a91878 <col:38, col:54> col:54 used result_mask 'struct in_addr &'
| |-ParmVarDecl 0x55e1a3a918f0 <line:391:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55e1a3a91ba0 <col:34> 'const ArgContext' lvalue Var 0x55e1a3a7efe0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55e1a3a91e58 <col:52, line:394:5>
|   `-ReturnStmt 0x55e1a3a91e48 <line:392:2, line:393:56>
|     `-CXXMemberCallExpr 0x55e1a3a91e08 <line:392:9, line:393:56> 'bool'
|       |-MemberExpr 0x55e1a3a91dd8 <line:392:9> '<bound member function type>' ->parse 0x55e1a3a91688
|       | `-CXXThisExpr 0x55e1a3a91dc8 <col:9> 'const IPPrefixArg *' implicit this
|       |-DeclRefExpr 0x55e1a3a91cc8 <col:15> 'const String' lvalue ParmVar 0x55e1a3a91758 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55e1a3a91d18 <col:20, col:61> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55e1a3a91ce8 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55e1a3a917e8 'result_addr' 'struct in_addr &'
|       |-CXXReinterpretCastExpr 0x55e1a3a91d78 <line:393:8, col:49> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55e1a3a91d48 <col:38> 'struct in_addr':'in_addr' lvalue ParmVar 0x55e1a3a91878 'result_mask' 'struct in_addr &'
|       `-DeclRefExpr 0x55e1a3a91da8 <col:52> 'const ArgContext' lvalue ParmVar 0x55e1a3a918f0 'args' 'const ArgContext &'
|-FieldDecl 0x55e1a3a91b08 <line:395:5, col:10> col:10 referenced allow_bare_address 'bool'
|-CXXConstructorDecl 0x55e1a3d4eb18 <line:382:7> col:7 implicit constexpr IPPrefixArg 'void (const IPPrefixArg &)' inline default trivial noexcept-unevaluated 0x55e1a3d4eb18
| `-ParmVarDecl 0x55e1a3d4ec28 <col:7> col:7 'const IPPrefixArg &'
|-CXXConstructorDecl 0x55e1a3d4ecc8 <col:7> col:7 implicit used constexpr IPPrefixArg 'void (IPPrefixArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e1a3d4edd8 <col:7> col:7 used 'IPPrefixArg &&'
| |-CXXCtorInitializer Field 0x55e1a3a91b08 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x55e1a3d4f760 <col:7> 'bool' <LValueToRValue>
| |   `-MemberExpr 0x55e1a3d4f730 <col:7> 'bool' xvalue .allow_bare_address 0x55e1a3a91b08
| |     `-CXXStaticCastExpr 0x55e1a3d4f700 <col:7> 'IPPrefixArg' xvalue static_cast<class IPPrefixArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e1a3d4f6d0 <col:7> 'IPPrefixArg' lvalue ParmVar 0x55e1a3d4edd8 '' 'IPPrefixArg &&'
| `-CompoundStmt 0x55e1a3d4f7a8 <col:7>
`-CXXDestructorDecl 0x55e1a3d4ee78 <col:7> col:7 implicit referenced ~IPPrefixArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPrefixArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPPrefixArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3a3cd60 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e1a3a3ce78 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55e1a3a3cf08 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55e1a3a3cfd8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55e1a3a3d0c0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55e1a3a3d2d8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e1a3a3d180 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3a3d488 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e1a3a3d390 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e1a3a3d5d0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e1a3a3d540 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e1a3a3d718 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e1a3a3d688 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3a3d860 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e1a3a3d7d0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3a3d928 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55e1a3a3da70 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55e1a3a3d9e0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e1a3a3db38 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55e1a3a3dc80 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55e1a3a3dbf0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e1a3a3ddf8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e1a3a3dd38 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3a3df40 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e1a3a3deb0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3a3e008 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55e1a3a3e1c8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e1a3a3e0b8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e1a3a3e130 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3a3e418 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e1a3a3e288 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e1a3a3e300 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e1a3a3e4c8 <col:86> "" ""
|-CXXMethodDecl 0x55e1a3a3e738 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55e1a3a3e5a8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55e1a3a3e620 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3a3e8e8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e1a3a3e7f8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e1a3a3ea98 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e1a3a3e9a0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e1a3a3ed68 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e1a3a3eb50 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e1a3a3ebc8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e1a3a3ec40 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3a3f048 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e1a3a3ee30 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e1a3a3eea8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e1a3a3ef20 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e1a3a3f100 <col:115> "" ""
|-AccessSpecDecl 0x55e1a3a3f170 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55e1a3a3f1a8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3a406c0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e1a3a406c0
| `-ParmVarDecl 0x55e1a3a407c8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55e1a3a40868 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e1a3a40868
| `-ParmVarDecl 0x55e1a3a40978 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55e1a3a75fa8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e1a3c67da0 <col:7>
|-CXXConstructorDecl 0x55e1a3a76080 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e1a3a76080
| `-ParmVarDecl 0x55e1a3a76198 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55e1a3a76208 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e1a3a76208
| `-ParmVarDecl 0x55e1a3a76318 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55e1a3c6a7a0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3c56948 prev 0x55e1a3c4bb50 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e1a3c56a40 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55e1a3c56b30 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55e1a3c56c58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55e1a3c56dd8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55e1a3c56f58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55e1a3c570d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55e1a3c67f08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e1a3c68778 <col:11>
|-CXXDestructorDecl 0x55e1a3c67fe0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e1a3c68118 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e1a3c68118
| `-ParmVarDecl 0x55e1a3c68228 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55e1a3c682c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e1a3c682c8
| `-ParmVarDecl 0x55e1a3c683d8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55e1a3c6b198 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e1a3c6b2a8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55e1a3c6b528 <col:11>
|   `-ReturnStmt 0x55e1a3c6b518 <col:11>
|     `-UnaryOperator 0x55e1a3c6b500 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e1a3c6b4f0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55e1a3c6b318 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e1a3c6b318
  `-ParmVarDecl 0x55e1a3c6b428 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3c57140 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e1a3c57258 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55e1a3c572f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55e1a3c57360 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55e1a3c573c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55e1a3c57430 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55e1a3c57490 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55e1a3c57550 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55e1a3c575b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55e1a3c57610 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55e1a3c67e18 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55e1a3c572f8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55e1a3c68788 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55e1a3c687e0 <col:12>
|-CXXConstructorDecl 0x55e1a3c68448 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e1a3c68448
| `-ParmVarDecl 0x55e1a3c68558 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55e1a3c685f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e1a3c685f8
| `-ParmVarDecl 0x55e1a3c68708 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55e1a3c6a880 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3c45260 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e1a3c45378 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55e1a3c45408 <col:16, col:22> col:16 public
|-EnumDecl 0x55e1a3c45430 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55e1a3c45530 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55e1a3c45610 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c45510 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55e1a3c454f0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55e1a3c455c0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55e1a3c45628 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3c455a0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55e1a3c45580 <col:22> 'int' 64
|-CXXMethodDecl 0x55e1a3c45968 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e1a3c45650 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e1a3c456d0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55e1a3c45748 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e1a3c457c0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e1a3c45a28 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c45c28 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55e1a3c45aa0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55e1a3c45b18 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e1a3c45cd8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c45e38 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55e1a3c45d48 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e1a3c45ee0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55e1a3c46240 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55e1a3c461d0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55e1a3c46170 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55e1a3c46130 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55e1a371d2d0 'void'
|       |-PointerType 0x55e1a39c5600 'unsigned char *'
|       | `-BuiltinType 0x55e1a371d3d0 'unsigned char'
|       |-TypedefType 0x55e1a37c1b70 'size_t' sugar
|       | |-Typedef 0x55e1a378db20 'size_t'
|       | `-BuiltinType 0x55e1a371d430 'unsigned long'
|       `-PointerType 0x55e1a371dad0 'void *'
|         `-BuiltinType 0x55e1a371d2d0 'void'
|-CXXMethodDecl 0x55e1a3c466b8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55e1a3c462b0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55e1a3c46328 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e1a3c463c0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55e1a3c46440 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55e1a3c60db0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55e1a3c60d98 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55e1a3c60d60 <col:58> 'int' 0
| |-ParmVarDecl 0x55e1a3c464c0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55e1a3c60dd8 <col:76> 'int' 0
| |-ParmVarDecl 0x55e1a3c46540 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55e1a3c60df8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55e1a3c46788 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c46808 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e1a3c468c8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55e1a3c46968 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c469c0 <col:30>
|-CXXMethodDecl 0x55e1a3c46a38 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55e1a3c46ad8 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c46b30 <col:30>
|-CXXMethodDecl 0x55e1a3c46ba8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55e1a3c46c48 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c46cf8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55e1a3c46d98 <col:20>
| |-OptimizeNoneAttr 0x55e1a3c46df0 <col:30>
| `-WarnUnusedResultAttr 0x55e1a3c46e18 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c46e70 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e1a3c46f10 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c46f68 <col:30>
|-CXXMethodDecl 0x55e1a3c46fb8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e1a3c47058 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c470b0 <col:30>
|-CXXMethodDecl 0x55e1a3c470f8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55e1a3c47198 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c471f0 <col:30>
|-CXXMethodDecl 0x55e1a3c47238 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e1a3c472f8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e1a3c473c0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e1a3c47488 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e1a3c47548 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e1a3c47668 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55e1a3c60ec0 <col:54, line:99:5>
|   `-ReturnStmt 0x55e1a3c60eb0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55e1a3c60e98 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55e1a3c60e68 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e1a3c57948
|         `-CXXThisExpr 0x55e1a3c60e58 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e1a3c47808 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55e1a3c47718 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55e1a3c60f70 <col:67, line:103:5>
|   `-BinaryOperator 0x55e1a3c60f50 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e1a3c60ee8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e1a3c57948
|     | `-CXXThisExpr 0x55e1a3c60ed8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e1a3c60f38 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55e1a3c60f18 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55e1a3c47718 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55e1a3c47900 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55e1a3c60ff0 <col:33, line:107:5>
|   `-ReturnStmt 0x55e1a3c60fe0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55e1a3c60fc8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55e1a3c60f98 <col:16> 'void *' lvalue ->_destructor_argument 0x55e1a3c579b0
|         `-CXXThisExpr 0x55e1a3c60f88 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e1a3c479c0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55e1a3c61620 <col:25, line:113:5>
|   |-ParenExpr 0x55e1a3c61368 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55e1a3c61338 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c610a8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e1a3c61080 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55e1a3c61048 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55e1a3c61018 <col:24> '<bound member function type>' ->shared 0x55e1a3c46a38
|   |   |       `-ImplicitCastExpr 0x55e1a3c61068 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55e1a3c61008 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e1a3c61108 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c610e8 <col:42> 'int' 0
|   |   `-CallExpr 0x55e1a3c61298 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c61280 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c61260 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c612d8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c61178 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55e1a3c612f0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c611a0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c61308 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c611d8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55e1a3c61320 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c61248 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c61230 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c611f8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55e1a3c61568 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55e1a3c61398 <col:2> 'unsigned char *' lvalue ->_head 0x55e1a3c57750
|   | | `-CXXThisExpr 0x55e1a3c61388 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55e1a3c61550 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55e1a3c61530 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55e1a3c613d8 <col:10> 'unsigned char *' lvalue ->_data 0x55e1a3c577b8
|   |     | `-CXXThisExpr 0x55e1a3c613c8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55e1a3c61518 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55e1a3c614f8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55e1a3c61418 <col:18> 'unsigned char *' lvalue ->_tail 0x55e1a3c57820
|   |         | `-CXXThisExpr 0x55e1a3c61408 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55e1a3c614e0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55e1a3c614c0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55e1a3c61458 <col:26> 'unsigned char *' lvalue ->_end 0x55e1a3c57888
|   |             | `-CXXThisExpr 0x55e1a3c61448 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55e1a3c614a8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55e1a3c61488 <col:33> 'int' 0
|   `-BinaryOperator 0x55e1a3c61600 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e1a3c61598 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e1a3c57948
|     | `-CXXThisExpr 0x55e1a3c61588 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e1a3c615e8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55e1a3c615c8 <col:16> 'int' 0
|-CXXMethodDecl 0x55e1a3c47b00 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e1a3c47a70 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e1a3c47ba8 <col:20>
| |-OptimizeNoneAttr 0x55e1a3c47c00 <col:30>
| `-WarnUnusedResultAttr 0x55e1a3c47c28 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c47cf8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e1a3c47c68 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e1a3c47da0 <col:20>
| |-OptimizeNoneAttr 0x55e1a3c47df8 <col:30>
| `-WarnUnusedResultAttr 0x55e1a3c47e20 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c47f58 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e1a3c47e60 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e1a3c48000 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c48100 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55e1a3c48070 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e1a3c481a8 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c48200 <col:30>
|-CXXMethodDecl 0x55e1a3c482c8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e1a3c48238 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e1a3c48370 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c48470 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e1a3c483e0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e1a3c48518 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c48618 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55e1a3c48588 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e1a3c486c0 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c48718 <col:30>
|-CXXMethodDecl 0x55e1a3c488a8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55e1a3c48758 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55e1a3c487d0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55e1a3c60e18 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55e1a3c48958 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55e1a3c48b58 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e1a3c489d0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55e1a3c48a48 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3c48d68 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e1a3c48c18 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e1a3c48c90 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3c48f78 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55e1a3c48e28 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55e1a3c48ea8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55e1a3c60e28 <col:39> 'int' 0
|-CXXMethodDecl 0x55e1a3c49048 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55e1a3c49110 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e1a3c491d8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e1a3c49298 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e1a3c49360 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55e1a3c494a8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55e1a3c49418 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55e1a3c49678 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e1a3c49568 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55e1a3c495e0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3c49748 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55e1a3c49808 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55e1a3c498a8 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c49900 <col:30>
|-CXXMethodDecl 0x55e1a3c49950 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e1a3c499f0 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c49a48 <col:30>
|-CXXMethodDecl 0x55e1a3c49a98 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e1a3c49b58 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e1a3c49c20 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55e1a3c49cc0 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c49d18 <col:30>
|-CXXMethodDecl 0x55e1a3c49e68 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e1a3c49d58 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55e1a3c49dd0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3c49fb8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55e1a3c49f28 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3c4a090 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55e1a3c4a150 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55e1a3c4a1f0 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4a248 <col:30>
|-CXXMethodDecl 0x55e1a3c4a298 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e1a3c4a338 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4a390 <col:30>
|-CXXMethodDecl 0x55e1a3c4a3e0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e1a3c4a4a8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55e1a3c4a548 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4a5a0 <col:30>
|-CXXMethodDecl 0x55e1a3c4a5e8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55e1a3c4a708 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55e1a3c4a878 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55e1a3c4a7b8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55e1a3c4a968 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55e1a3c4aa08 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4aa60 <col:30>
|-CXXMethodDecl 0x55e1a3c4aab0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e1a3c4ab70 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e1a3c4ada8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55e1a3c4ac20 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55e1a3c4ac98 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e1a3c4ae58 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4aeb0 <col:30>
|-CXXMethodDecl 0x55e1a3c4af58 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55e1a3c4aff8 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4b050 <col:30>
|-CXXMethodDecl 0x55e1a3c4b0a0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55e1a3c4b140 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4b198 <col:30>
|-CXXMethodDecl 0x55e1a3c4b1e0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55e1a3c4b280 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4b2d8 <col:30>
|-CXXMethodDecl 0x55e1a3c4b3d8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55e1a3c4b310 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55e1a3c4b480 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4b4d8 <col:30>
|-CXXMethodDecl 0x55e1a3c4b698 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55e1a3c4b510 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55e1a3c4b588 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e1a3c4b748 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4b7a0 <col:30>
|-CXXMethodDecl 0x55e1a3c4b848 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55e1a3c4b968 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55e1a3c4ba88 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55e1a3c4bb28 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55e1a3c4bb50 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55e1a3c4bc78 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55e1a3c4bd18 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4bd70 <col:30>
|-CXXMethodDecl 0x55e1a3c4be18 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55e1a3c4beb8 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4bf10 <col:30>
|-AccessSpecDecl 0x55e1a3c4bf38 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55e1a3c4bf60 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55e1a3c4c060 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55e1a3c4c0b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3c4c040 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55e1a3c4c020 <col:14> 'int' 48
|-CXXMethodDecl 0x55e1a3c4c118 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55e1a3c4c1b8 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4c210 <col:30>
|-CXXMethodDecl 0x55e1a3c4c288 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55e1a3c4c328 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4c380 <col:30>
|-CXXMethodDecl 0x55e1a3c4c448 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55e1a3c4c3b8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55e1a3c4c5e8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55e1a3c4c788 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55e1a3c4c698 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55e1a3c4c830 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55e1a3c4c930 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e1a3c4cce0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c4c910 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55e1a3c4c8f0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55e1a3c4c9c0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e1a3c4ccf8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c4c9a0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55e1a3c4c980 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e1a3c4ca50 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e1a3c4cd10 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c4ca30 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55e1a3c4ca10 <col:14> 'int' 2
| |-EnumConstantDecl 0x55e1a3c4cae0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e1a3c4cd28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c4cac0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55e1a3c4caa0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55e1a3c4cb70 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e1a3c4cd40 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c4cb50 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55e1a3c4cb30 <col:13> 'int' 4
| |-EnumConstantDecl 0x55e1a3c4cc00 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e1a3c4cd58 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c4cbe0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55e1a3c4cbc0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55e1a3c4cc90 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55e1a3c4cd70 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3c4cc70 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55e1a3c4cc50 <col:14> 'int' 6
|-CXXMethodDecl 0x55e1a3c4cdd8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55e1a3c4ce78 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4ced0 <col:30>
|-CXXMethodDecl 0x55e1a3c4cfc8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55e1a3c4cf08 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55e1a3c4d070 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4d0c8 <col:30>
|-CXXMethodDecl 0x55e1a3c4d138 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55e1a3c4d260 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55e1a3c4d3d8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55e1a3c4d310 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55e1a3c4d4a0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55e1a3c4d568 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55e1a3c4d6a8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55e1a3c4d618 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55e1a3c4d750 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55e1a3c4d850 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e1a3c4da50 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c4d830 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55e1a3c4d810 <col:23> 'int' 0
| |-EnumConstantDecl 0x55e1a3c4d8e0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e1a3c4da68 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c4d8c0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55e1a3c4d8a0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55e1a3c4d970 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e1a3c4da80 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c4d950 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55e1a3c4d930 <col:24> 'int' 0
| `-EnumConstantDecl 0x55e1a3c4da00 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55e1a3c4da98 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3c4d9e0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55e1a3c4d9c0 <col:47> 'int' 16
|-CXXMethodDecl 0x55e1a3c4daf8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55e1a3c4dc68 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55e1a3c4dba8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55e1a3c4dd10 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4dd68 <col:30>
|-CXXMethodDecl 0x55e1a3c4ddb8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55e1a3c61740 <col:18, col:36>
|   `-ReturnStmt 0x55e1a3c61730 <col:20, col:33>
|     `-ImplicitCastExpr 0x55e1a3c61718 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e1a3c616f8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55e1a3c616c8 <col:27> '<bound member function type>' ->xanno 0x55e1a3c4be18
|           `-CXXThisExpr 0x55e1a3c616b8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55e1a3c4deb0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55e1a3c61850 <col:30, col:48>
|   `-ReturnStmt 0x55e1a3c61840 <col:32, col:45>
|     `-ImplicitCastExpr 0x55e1a3c61828 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e1a3c61808 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55e1a3c617d8 <col:39> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|           `-CXXThisExpr 0x55e1a3c617c8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e1a3c4df98 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55e1a3c619e8 <col:24, col:50>
|   `-ReturnStmt 0x55e1a3c619d8 <col:26, col:47>
|     `-UnaryOperator 0x55e1a3c619c0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e1a3c619a0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e1a3c61988 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e1a3c61938 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55e1a3c56c58
|         |   `-CXXMemberCallExpr 0x55e1a3c61918 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e1a3c618e8 <col:34> '<bound member function type>' ->xanno 0x55e1a3c4be18
|         |       `-CXXThisExpr 0x55e1a3c618d8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e1a3c61968 <col:46> 'int' 0
|-CXXMethodDecl 0x55e1a3c4e0a0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55e1a3c61bb8 <col:36, col:62>
|   `-ReturnStmt 0x55e1a3c61ba8 <col:38, col:59>
|     `-UnaryOperator 0x55e1a3c61b90 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e1a3c61b70 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e1a3c61b58 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e1a3c61ad0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55e1a3c56c58
|         |   `-CXXMemberCallExpr 0x55e1a3c61ab0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e1a3c61a80 <col:46> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|         |       `-CXXThisExpr 0x55e1a3c61a70 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e1a3c61b00 <col:58> 'int' 0
|-CXXMethodDecl 0x55e1a3c4e1b8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55e1a3c61d50 <col:26, col:53>
|   `-ReturnStmt 0x55e1a3c61d40 <col:28, col:50>
|     `-UnaryOperator 0x55e1a3c61d28 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e1a3c61d08 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e1a3c61cf0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e1a3c61ca0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55e1a3c56f58
|         |   `-CXXMemberCallExpr 0x55e1a3c61c80 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e1a3c61c50 <col:36> '<bound member function type>' ->xanno 0x55e1a3c4be18
|         |       `-CXXThisExpr 0x55e1a3c61c40 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e1a3c61cd0 <col:49> 'int' 0
|-CXXMethodDecl 0x55e1a3c4e2d8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55e1a3c61f28 <col:38, col:65>
|   `-ReturnStmt 0x55e1a3c61f18 <col:40, col:62>
|     `-UnaryOperator 0x55e1a3c61f00 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e1a3c61ee0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e1a3c61ec8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e1a3c61e38 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55e1a3c56f58
|         |   `-CXXMemberCallExpr 0x55e1a3c61e18 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e1a3c61de8 <col:48> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|         |       `-CXXThisExpr 0x55e1a3c61dd8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e1a3c61e68 <col:61> 'int' 0
|-CXXMethodDecl 0x55e1a3c4e488 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55e1a3c4e390 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55e1a3c625f8 <col:34, line:463:5>
|   |-ParenExpr 0x55e1a3c62440 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e1a3c62410 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c62078 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c62048 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c61f98 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c61f80 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c61f40 <col:23> 'int' lvalue ParmVar 0x55e1a3c4e390 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c61f60 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c62028 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c61ff8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c61fb8 <col:33> 'int' lvalue ParmVar 0x55e1a3c4e390 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e1a3c62010 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e1a3c61fd8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e1a3c620d8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c620b8 <col:56> 'int' 0
|   |   `-CallExpr 0x55e1a3c62370 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c62358 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c62338 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c623b0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c621c8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e1a3c623c8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c621f8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c623e0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c62230 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55e1a3c623f8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c62320 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c62308 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c622c8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55e1a3c625e8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55e1a3c625d0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55e1a3c625b0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e1a3c62580 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e1a3c62530 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55e1a3c56c58
|         |   `-CXXMemberCallExpr 0x55e1a3c62510 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e1a3c624e0 <col:9> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|         |       `-CXXThisExpr 0x55e1a3c624d0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55e1a3c62598 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55e1a3c62560 <col:21> 'int' lvalue ParmVar 0x55e1a3c4e390 'i' 'int'
|-CXXMethodDecl 0x55e1a3c4e6d8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55e1a3c4e548 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55e1a3c4e5c0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55e1a3c62c88 <col:40, line:472:5>
|   |-ParenExpr 0x55e1a3c62aa0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e1a3c62a70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c62750 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c62720 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c62670 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c62658 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c62618 <col:23> 'int' lvalue ParmVar 0x55e1a3c4e548 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c62638 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c62700 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c626d0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c62690 <col:33> 'int' lvalue ParmVar 0x55e1a3c4e548 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e1a3c626e8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e1a3c626b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e1a3c627b0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c62790 <col:56> 'int' 0
|   |   `-CallExpr 0x55e1a3c629d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c629b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c62998 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c62a10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c62820 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e1a3c62a28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c62850 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c62a40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c62888 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55e1a3c62a58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c62980 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c62968 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c62928 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55e1a3c62c68 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55e1a3c62c10 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55e1a3c62be0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55e1a3c62b90 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55e1a3c56c58
|     | |   `-CXXMemberCallExpr 0x55e1a3c62b70 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55e1a3c62b40 <col:2> '<bound member function type>' ->xanno 0x55e1a3c4be18
|     | |       `-CXXThisExpr 0x55e1a3c62b30 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55e1a3c62bf8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55e1a3c62bc0 <col:14> 'int' lvalue ParmVar 0x55e1a3c4e548 'i' 'int'
|     `-ImplicitCastExpr 0x55e1a3c62c50 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55e1a3c62c30 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55e1a3c4e5c0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55e1a3c4e898 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55e1a3c4e7a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e1a3c63408 <col:36, line:485:5>
|   |-ParenExpr 0x55e1a3c63170 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e1a3c63140 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c62e20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c62df0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c62d00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c62ce8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c62ca8 <col:23> 'int' lvalue ParmVar 0x55e1a3c4e7a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c62cc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c62dd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c62db8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c62d20 <col:33> 'int' lvalue ParmVar 0x55e1a3c4e7a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c62d98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c62d80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c62d40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e1a3c62d60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e1a3c62e80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c62e60 <col:60> 'int' 0
|   |   `-CallExpr 0x55e1a3c630a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c63088 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c63068 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c630e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c62ef0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e1a3c630f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c62f28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c63110 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c62f60 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55e1a3c63128 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c63050 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c63038 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c62ff8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55e1a3c633f8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55e1a3c633e0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55e1a3c633c8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e1a3c63398 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55e1a3c63338 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e1a3c63308 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e1a3c63280 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e1a3c56b30
|             |   `-CXXMemberCallExpr 0x55e1a3c63260 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e1a3c63230 <col:61> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|             |       `-CXXThisExpr 0x55e1a3c63220 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e1a3c63320 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e1a3c632b0 <col:74> 'int' lvalue ParmVar 0x55e1a3c4e7a0 'i' 'int'
|-CXXMethodDecl 0x55e1a3c4eae8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55e1a3c4e958 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e1a3c4e9d0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55e1a3c63b58 <col:42, line:500:5>
|   |-ParenExpr 0x55e1a3c638f0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e1a3c638c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c635a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c63570 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c63480 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c63468 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c63428 <col:23> 'int' lvalue ParmVar 0x55e1a3c4e958 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c63448 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c63550 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c63538 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c634a0 <col:33> 'int' lvalue ParmVar 0x55e1a3c4e958 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c63518 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c63500 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c634c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e1a3c634e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e1a3c63600 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c635e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e1a3c63820 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c63808 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c637e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c63860 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c63670 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e1a3c63878 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c636a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c63890 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c636e0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55e1a3c638a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c637d0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c637b8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c63778 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55e1a3c63b38 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55e1a3c63ae8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e1a3c63ab8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e1a3c63a60 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e1a3c63a30 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e1a3c639e0 <col:48, col:57> 'char [48]' lvalue ->c 0x55e1a3c56b30
|     |     |   `-CXXMemberCallExpr 0x55e1a3c639c0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e1a3c63990 <col:48> '<bound member function type>' ->xanno 0x55e1a3c4be18
|     |     |       `-CXXThisExpr 0x55e1a3c63980 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e1a3c63a48 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e1a3c63a10 <col:61> 'int' lvalue ParmVar 0x55e1a3c4e958 'i' 'int'
|     `-ImplicitCastExpr 0x55e1a3c63b20 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55e1a3c63b00 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55e1a3c4e9d0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55e1a3c4eca8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55e1a3c4ebb0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e1a3c642b8 <col:35, line:513:5>
|   |-ParenExpr 0x55e1a3c63fc8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e1a3c63f98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c63cf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c63cc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c63bd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c63bb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c63b78 <col:23> 'int' lvalue ParmVar 0x55e1a3c4ebb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c63b98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c63ca0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c63c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c63bf0 <col:33> 'int' lvalue ParmVar 0x55e1a3c4ebb0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c63c68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c63c50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c63c10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e1a3c63c30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e1a3c63d50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c63d30 <col:60> 'int' 0
|   |   `-CallExpr 0x55e1a3c63ef8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c63ee0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c63ec0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c63f38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c63dc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e1a3c63f50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c63df8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c63f68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c63e30 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55e1a3c63f80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c63ea8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c63e90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c63e50 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55e1a3c642a8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55e1a3c64290 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55e1a3c64278 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e1a3c64248 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55e1a3c641c0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e1a3c64190 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e1a3c64140 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e1a3c56b30
|             |   `-CXXMemberCallExpr 0x55e1a3c64120 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e1a3c640f0 <col:60> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|             |       `-CXXThisExpr 0x55e1a3c640e0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e1a3c641a8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e1a3c64170 <col:73> 'int' lvalue ParmVar 0x55e1a3c4ebb0 'i' 'int'
|-CXXMethodDecl 0x55e1a3c4eef8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55e1a3c4ed68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e1a3c4ede0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55e1a3c649d8 <col:41, line:528:5>
|   |-ParenExpr 0x55e1a3c64760 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e1a3c64730 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c64450 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c64420 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c64330 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c64318 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c642d8 <col:23> 'int' lvalue ParmVar 0x55e1a3c4ed68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c642f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c64400 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c643e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c64350 <col:33> 'int' lvalue ParmVar 0x55e1a3c4ed68 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c643c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c643b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c64370 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e1a3c64390 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e1a3c644b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c64490 <col:60> 'int' 0
|   |   `-CallExpr 0x55e1a3c64690 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c64678 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c64658 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c646d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c64520 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e1a3c646e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c64558 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c64700 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c64590 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55e1a3c64718 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c64640 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c64628 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c645e8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55e1a3c649b8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55e1a3c64968 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e1a3c64938 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e1a3c648e0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e1a3c648a0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e1a3c64850 <col:47, col:56> 'char [48]' lvalue ->c 0x55e1a3c56b30
|     |     |   `-CXXMemberCallExpr 0x55e1a3c64830 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e1a3c64800 <col:47> '<bound member function type>' ->xanno 0x55e1a3c4be18
|     |     |       `-CXXThisExpr 0x55e1a3c647f0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e1a3c648b8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e1a3c64880 <col:60> 'int' lvalue ParmVar 0x55e1a3c4ed68 'i' 'int'
|     `-ImplicitCastExpr 0x55e1a3c649a0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55e1a3c64980 <col:65> 'int16_t':'short' lvalue ParmVar 0x55e1a3c4ede0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55e1a3c4f0b8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55e1a3c4efc0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e1a3c650a8 <col:36, line:541:5>
|   |-ParenExpr 0x55e1a3c64e48 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e1a3c64e18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c64b70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c64b40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c64a50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c64a38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c649f8 <col:23> 'int' lvalue ParmVar 0x55e1a3c4efc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c64a18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c64b20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c64b08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c64a70 <col:33> 'int' lvalue ParmVar 0x55e1a3c4efc0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c64ae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c64ad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c64a90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e1a3c64ab0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e1a3c64bd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c64bb0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e1a3c64d78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c64d60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c64d40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c64db8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c64c40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e1a3c64dd0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c64c78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c64de8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c64cb0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55e1a3c64e00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c64d28 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c64d10 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c64cd0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55e1a3c65098 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55e1a3c65080 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55e1a3c65068 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e1a3c65038 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55e1a3c64fe0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e1a3c64fb0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e1a3c64f60 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e1a3c56b30
|             |   `-CXXMemberCallExpr 0x55e1a3c64f40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e1a3c64f10 <col:61> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|             |       `-CXXThisExpr 0x55e1a3c64f00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e1a3c64fc8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e1a3c64f90 <col:74> 'int' lvalue ParmVar 0x55e1a3c4efc0 'i' 'int'
|-CXXMethodDecl 0x55e1a3c4f288 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55e1a3c4f178 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55e1a3c4f1f0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e1a3c4f338 <col:20>
| `-OptimizeNoneAttr 0x55e1a3c4f390 <col:30>
|-CXXMethodDecl 0x55e1a3c4f4c8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55e1a3c4f3d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e1a3c65778 <col:35, line:562:5>
|   |-ParenExpr 0x55e1a3c65518 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e1a3c654e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c65240 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c65210 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c65120 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c65108 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c650c8 <col:23> 'int' lvalue ParmVar 0x55e1a3c4f3d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c650e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c651f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c651d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c65140 <col:33> 'int' lvalue ParmVar 0x55e1a3c4f3d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c651b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c651a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c65160 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e1a3c65180 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e1a3c652a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c65280 <col:60> 'int' 0
|   |   `-CallExpr 0x55e1a3c65448 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c65430 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c65410 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c65488 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c65310 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e1a3c654a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c65348 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c654b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c65380 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55e1a3c654d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c653f8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c653e0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c653a0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55e1a3c65768 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55e1a3c65750 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55e1a3c65738 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e1a3c65708 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55e1a3c656b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e1a3c65680 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e1a3c65630 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e1a3c56b30
|             |   `-CXXMemberCallExpr 0x55e1a3c65610 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e1a3c655e0 <col:60> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|             |       `-CXXThisExpr 0x55e1a3c655d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e1a3c65698 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e1a3c65660 <col:73> 'int' lvalue ParmVar 0x55e1a3c4f3d0 'i' 'int'
|-CXXMethodDecl 0x55e1a3c4f6d8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55e1a3c4f588 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e1a3c4f600 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55e1a3c65e58 <col:41, line:577:5>
|   |-ParenExpr 0x55e1a3c65be8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e1a3c65bb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c65910 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c658e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c657f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c657d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c65798 <col:23> 'int' lvalue ParmVar 0x55e1a3c4f588 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c657b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c658c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c658a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c65810 <col:33> 'int' lvalue ParmVar 0x55e1a3c4f588 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c65888 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c65870 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c65830 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e1a3c65850 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e1a3c65970 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c65950 <col:60> 'int' 0
|   |   `-CallExpr 0x55e1a3c65b18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c65b00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c65ae0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c65b58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c659e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e1a3c65b70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c65a18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c65b88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c65a50 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55e1a3c65ba0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c65ac8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c65ab0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c65a70 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55e1a3c65e38 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55e1a3c65de8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e1a3c65db8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55e1a3c65d58 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e1a3c65d28 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e1a3c65cd8 <col:47, col:56> 'char [48]' lvalue ->c 0x55e1a3c56b30
|     |     |   `-CXXMemberCallExpr 0x55e1a3c65cb8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e1a3c65c88 <col:47> '<bound member function type>' ->xanno 0x55e1a3c4be18
|     |     |       `-CXXThisExpr 0x55e1a3c65c78 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e1a3c65d40 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e1a3c65d08 <col:60> 'int' lvalue ParmVar 0x55e1a3c4f588 'i' 'int'
|     `-ImplicitCastExpr 0x55e1a3c65e20 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e1a3c65e00 <col:65> 'int32_t':'int' lvalue ParmVar 0x55e1a3c4f600 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55e1a3c4f898 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55e1a3c4f7a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e1a3c66588 <col:36, line:591:5>
|   |-ParenExpr 0x55e1a3c662c8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e1a3c66298 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c65ff0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c65fc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c65ed0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c65eb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c65e78 <col:23> 'int' lvalue ParmVar 0x55e1a3c4f7a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c65e98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c65fa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c65f88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c65ef0 <col:33> 'int' lvalue ParmVar 0x55e1a3c4f7a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c65f68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c65f50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c65f10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e1a3c65f30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e1a3c66050 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c66030 <col:60> 'int' 0
|   |   `-CallExpr 0x55e1a3c661f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c661e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c661c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c66238 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c660c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e1a3c66250 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c660f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c66268 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c66130 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55e1a3c66280 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c661a8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c66190 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c66150 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55e1a3c66578 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55e1a3c66560 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55e1a3c66548 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e1a3c66518 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55e1a3c66490 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e1a3c66460 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e1a3c66410 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e1a3c56b30
|             |   `-CXXMemberCallExpr 0x55e1a3c663f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e1a3c663c0 <col:61> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|             |       `-CXXThisExpr 0x55e1a3c663b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e1a3c66478 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e1a3c66440 <col:74> 'int' lvalue ParmVar 0x55e1a3c4f7a0 'i' 'int'
|-CXXMethodDecl 0x55e1a3c4fae8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55e1a3c4f958 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e1a3c4f9d0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55e1a3c66c68 <col:42, line:606:5>
|   |-ParenExpr 0x55e1a3c669f8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e1a3c669c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c66720 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c666f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c66600 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c665e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c665a8 <col:23> 'int' lvalue ParmVar 0x55e1a3c4f958 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c665c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c666d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e1a3c666b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c66620 <col:33> 'int' lvalue ParmVar 0x55e1a3c4f958 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c66698 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c66680 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c66640 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e1a3c66660 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e1a3c66780 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c66760 <col:60> 'int' 0
|   |   `-CallExpr 0x55e1a3c66928 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c66910 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c668f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c66968 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c667f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e1a3c66980 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c66828 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c66998 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c66860 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55e1a3c669b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c668d8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c668c0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c66880 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55e1a3c66c48 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55e1a3c66bf8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e1a3c66bc8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55e1a3c66b68 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e1a3c66b38 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e1a3c66ae8 <col:48, col:57> 'char [48]' lvalue ->c 0x55e1a3c56b30
|     |     |   `-CXXMemberCallExpr 0x55e1a3c66ac8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e1a3c66a98 <col:48> '<bound member function type>' ->xanno 0x55e1a3c4be18
|     |     |       `-CXXThisExpr 0x55e1a3c66a88 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e1a3c66b50 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e1a3c66b18 <col:61> 'int' lvalue ParmVar 0x55e1a3c4f958 'i' 'int'
|     `-ImplicitCastExpr 0x55e1a3c66c30 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55e1a3c66c10 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55e1a3c4f9d0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55e1a3c4fc80 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55e1a3c4fbb0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55e1a3c674d8 <col:33, line:620:5>
|   |-ParenExpr 0x55e1a3c67250 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e1a3c67220 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c66e70 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c66e40 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c66ce0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c66cc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c66c88 <col:23> 'int' lvalue ParmVar 0x55e1a3c4fbb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c66ca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c66e20 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e1a3c66e08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c66d00 <col:33> 'int' lvalue ParmVar 0x55e1a3c4fbb0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c66de8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c66dd0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c66d20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e1a3c66da8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e1a3c66d90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e1a3c66d58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e1a3c66ed0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c66eb0 <col:79> 'int' 0
|   |   `-CallExpr 0x55e1a3c67180 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c67168 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c67148 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c671c0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c66fb8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e1a3c671d8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c67000 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c671f0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c67038 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55e1a3c67208 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c67130 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c67118 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c670d8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55e1a3c674c8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55e1a3c674b0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55e1a3c67498 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e1a3c67468 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55e1a3c673e0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e1a3c673b0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e1a3c67360 <col:67, col:76> 'char const[48]' lvalue ->c 0x55e1a3c56b30
|             |   `-CXXMemberCallExpr 0x55e1a3c67340 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e1a3c67310 <col:67> '<bound member function type>' ->xanno 0x55e1a3c4bc78
|             |       `-CXXThisExpr 0x55e1a3c67300 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e1a3c673c8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e1a3c67390 <col:80> 'int' lvalue ParmVar 0x55e1a3c4fbb0 'i' 'int'
|-CXXMethodDecl 0x55e1a3c4fe98 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55e1a3c4fd40 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e1a3c4fdc0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55e1a3c67d00 <col:45, line:635:5>
|   |-ParenExpr 0x55e1a3c67a48 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e1a3c67a18 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e1a3c676e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e1a3c676b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e1a3c67550 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e1a3c67538 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e1a3c674f8 <col:23> 'int' lvalue ParmVar 0x55e1a3c4fd40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e1a3c67518 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e1a3c67690 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e1a3c67678 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e1a3c67570 <col:33> 'int' lvalue ParmVar 0x55e1a3c4fd40 'i' 'int'
|   |   |     `-BinaryOperator 0x55e1a3c67658 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e1a3c67640 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e1a3c67590 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e1a3c4c060 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e1a3c67618 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e1a3c67600 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e1a3c675c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e1a3c67740 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e1a3c67720 <col:79> 'int' 0
|   |   `-CallExpr 0x55e1a3c67978 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e1a3c67960 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e1a3c67940 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e1a37b8980 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e1a3c679b8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c677b0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e1a3c679d0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e1a3c677f8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e1a3c679e8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e1a3c67830 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55e1a3c67a00 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e1a3c67928 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e1a3c67910 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e1a3c678c8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55e1a3c67ce0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55e1a3c67c48 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e1a3c67c18 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55e1a3c67bb8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e1a3c67b88 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e1a3c67b38 <col:54, col:63> 'char [48]' lvalue ->c 0x55e1a3c56b30
|     |     |   `-CXXMemberCallExpr 0x55e1a3c67b18 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e1a3c67ae8 <col:54> '<bound member function type>' ->xanno 0x55e1a3c4be18
|     |     |       `-CXXThisExpr 0x55e1a3c67ad8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e1a3c67ba0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e1a3c67b68 <col:67> 'int' lvalue ParmVar 0x55e1a3c4fd40 'i' 'int'
|     `-CXXConstCastExpr 0x55e1a3c67cb0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55e1a3c67c98 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55e1a3c67c60 <col:91> 'const void *' lvalue ParmVar 0x55e1a3c4fdc0 'x' 'const void *'
|-CXXMethodDecl 0x55e1a3c4ff68 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55e1a3c67d88 <col:34, line:640:5>
|   `-ReturnStmt 0x55e1a3c67d78 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55e1a3c67d60 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55e1a3c67d30 <col:16> 'Packet *' lvalue ->_data_packet 0x55e1a3c576e8
|         `-CXXThisExpr 0x55e1a3c67d20 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e1a3c500a8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55e1a3c50018 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e1a3c60e48 <col:46> 'bool' true
|-CXXMethodDecl 0x55e1a3c50228 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55e1a3c50160 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55e1a3c502d0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55e1a3c50a80 <line:660:22> "" ""
| |-EnumConstantDecl 0x55e1a3c503d0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50af0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c503b0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55e1a3c50390 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e1a3c45530 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e1a3c50460 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50b08 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c50440 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55e1a3c50420 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e1a3c455c0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e1a3c504f0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50b20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c504d0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e1a3c504b0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e1a3c50580 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50b38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c50560 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55e1a3c50540 <col:19> 'int' 16
| |-EnumConstantDecl 0x55e1a3c50610 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50b50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c505f0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55e1a3c505d0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55e1a3c506a0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50b68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c50680 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e1a3c50660 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e1a3c50730 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50b80 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c50710 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55e1a3c506f0 <col:19> 'int' EnumConstant 0x55e1a3c50580 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e1a3c507c0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50b98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c507a0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55e1a3c50780 <col:19> 'int' EnumConstant 0x55e1a3c506a0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e1a3c50890 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50bb0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c50870 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55e1a3c50850 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e1a3c50810 <col:23> 'int' EnumConstant 0x55e1a3c507c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e1a3c50830 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e1a3c50960 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e1a3c50bc8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3c50940 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55e1a3c50920 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e1a3c508e0 <col:23> 'int' EnumConstant 0x55e1a3c507c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e1a3c50900 <col:40> 'int' 4
| `-EnumConstantDecl 0x55e1a3c50a30 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55e1a3c50be0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e1a3c50a10 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55e1a3c509f0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55e1a3c509b0 <col:23> 'int' EnumConstant 0x55e1a3c507c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55e1a3c509d0 <col:40> 'int' 8
|-CXXMethodDecl 0x55e1a3c50c20 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55e1a3c50cc0 <col:68> "" ""
|-CXXMethodDecl 0x55e1a3c50d58 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55e1a3c50df8 <col:45> "" ""
|-CXXMethodDecl 0x55e1a3c50e90 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e1a3c50f30 <col:57> "" ""
|-CXXMethodDecl 0x55e1a3c50fc8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55e1a3c51068 <col:45> "" ""
|-CXXMethodDecl 0x55e1a3c51100 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e1a3c511a0 <col:57> "" ""
|-CXXMethodDecl 0x55e1a3c51230 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e1a3c512d0 <col:51> "" ""
|-CXXMethodDecl 0x55e1a3c51360 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e1a3c51400 <col:63> "" ""
|-CXXMethodDecl 0x55e1a3c51490 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e1a3c51530 <col:53> "" ""
|-CXXMethodDecl 0x55e1a3c515c0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e1a3c51660 <col:65> "" ""
|-CXXMethodDecl 0x55e1a3c51778 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c516e8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55e1a3c51820 <col:61> "" ""
|-CXXMethodDecl 0x55e1a3c519b8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e1a3c518a8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55e1a3c51920 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e1a3c51a68 <col:67> "" ""
|-CXXMethodDecl 0x55e1a3c51b80 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c51af0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e1a3c51c28 <col:63> "" ""
|-CXXMethodDecl 0x55e1a3c51dc0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e1a3c51cb0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e1a3c51d28 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e1a3c51e70 <col:69> "" ""
|-CXXMethodDecl 0x55e1a3c51f88 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c51ef8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e1a3c52030 <col:63> "" ""
|-CXXMethodDecl 0x55e1a3c54708 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e1a3c545f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e1a3c54670 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e1a3c547b8 <col:69> "" ""
|-CXXMethodDecl 0x55e1a3c548d0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c54840 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55e1a3c54978 <col:62> "" ""
|-CXXMethodDecl 0x55e1a3c54b10 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e1a3c54a00 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e1a3c54a78 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55e1a3c54bc0 <col:68> "" ""
|-CXXMethodDecl 0x55e1a3c54cd8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c54c48 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e1a3c54d80 <col:63> "" ""
|-CXXMethodDecl 0x55e1a3c54f18 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55e1a3c54e08 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e1a3c54e80 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55e1a3c54fc8 <col:69> "" ""
|-CXXMethodDecl 0x55e1a3c55058 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e1a3c550f8 <col:64> "" ""
|-CXXMethodDecl 0x55e1a3c55188 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e1a3c55228 <col:52> "" ""
|-CXXMethodDecl 0x55e1a3c552b8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e1a3c55358 <col:67> "" ""
|-CXXMethodDecl 0x55e1a3c553e8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e1a3c55488 <col:55> "" ""
|-CXXMethodDecl 0x55e1a3c555a0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c55510 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e1a3c55648 <col:58> "" ""
|-CXXMethodDecl 0x55e1a3c557e0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e1a3c556d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e1a3c55748 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e1a3c55890 <col:62> "" ""
|-CXXMethodDecl 0x55e1a3c559a8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c55918 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e1a3c55a50 <col:58> "" ""
|-CXXMethodDecl 0x55e1a3c55be8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55e1a3c55ad8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e1a3c55b50 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55e1a3c55c98 <col:62> "" ""
|-CXXMethodDecl 0x55e1a3c55db0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c55d20 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55e1a3c55e58 <col:60> "" ""
|-CXXMethodDecl 0x55e1a3c55ff0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e1a3c55ee0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55e1a3c55f58 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e1a3c560a0 <col:64> "" ""
|-CXXMethodDecl 0x55e1a3c561b8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c56128 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e1a3c56260 <col:58> "" ""
|-CXXMethodDecl 0x55e1a3c563f8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e1a3c562e8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e1a3c56360 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55e1a3c564a8 <col:62> "" ""
|-CXXMethodDecl 0x55e1a3c565c0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e1a3c56530 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55e1a3c56668 <col:59> "" ""
|-CXXMethodDecl 0x55e1a3c56800 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e1a3c566f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e1a3c56768 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e1a3c568b0 <col:63> "" ""
|-AccessSpecDecl 0x55e1a3c56920 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55e1a3c56948 prev 0x55e1a3c4bb50 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e1a3c56a40 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55e1a3c56b30 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55e1a3c56c58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55e1a3c56dd8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55e1a3c56f58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55e1a3c570d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55e1a3c67f08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e1a3c68778 <col:11>
| |-CXXDestructorDecl 0x55e1a3c67fe0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55e1a3c68118 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e1a3c68118
| | `-ParmVarDecl 0x55e1a3c68228 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55e1a3c682c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e1a3c682c8
| | `-ParmVarDecl 0x55e1a3c683d8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55e1a3c6b198 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e1a3c6b2a8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55e1a3c6b528 <col:11>
| |   `-ReturnStmt 0x55e1a3c6b518 <col:11>
| |     `-UnaryOperator 0x55e1a3c6b500 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e1a3c6b4f0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55e1a3c6b318 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e1a3c6b318
|   `-ParmVarDecl 0x55e1a3c6b428 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55e1a3c57140 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e1a3c57258 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55e1a3c572f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55e1a3c57360 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55e1a3c573c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55e1a3c57430 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55e1a3c57490 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55e1a3c57550 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55e1a3c575b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55e1a3c57610 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55e1a3c67e18 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55e1a3c572f8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55e1a3c68788 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55e1a3c687e0 <col:12>
| |-CXXConstructorDecl 0x55e1a3c68448 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e1a3c68448
| | `-ParmVarDecl 0x55e1a3c68558 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55e1a3c685f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e1a3c685f8
| | `-ParmVarDecl 0x55e1a3c68708 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55e1a3c6a880 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55e1a3c57688 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55e1a3c576e8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55e1a3c57750 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55e1a3c577b8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55e1a3c57820 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55e1a3c57888 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55e1a3c578e8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55e1a3c57948 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55e1a3c579b0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55e1a3c57a38 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55e1a3c57688 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55e1a3c67db0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e1a3c578e8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55e1a3c687f0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55e1a3c68850 <col:21, line:755:5>
|-CXXConstructorDecl 0x55e1a3c57bd8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55e1a3c57b18 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55e1a3c57cd0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55e1a3c57eb8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55e1a3c57dc0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55e1a3c58188 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55e1a3c57f70 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e1a3c57fe8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e1a3c58060 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3c583a8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55e1a3c58258 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55e1a3c582d0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55e1a3c60988 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55e1a3c58468 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55e1a3c584e0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55e1a3c58558 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55e1a3c60ae0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e1a3c60a50 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e1a3c60c28 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e1a3c60b98 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55e1a3c60d20 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IPAddress>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IPAddress * _ptr
        24 |   class IPAddress _slot
        24 |     uint32_t _addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3d382c0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e1a3d383d8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55e1a3d38468 <col:16, col:22> col:16 public
|-EnumDecl 0x55e1a3d38490 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55e1a3d38590 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e1a3d387e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3d38570 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e1a3d38550 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e1a3d38620 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e1a3d387f8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3d38600 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55e1a3d385e0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55e1a3d386b0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e1a3d38810 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3d38690 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55e1a3d38670 <col:24> 'int' 34
| |-EnumConstantDecl 0x55e1a3d38740 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e1a3d38828 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e1a3d38720 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55e1a3d38700 <col:25> 'int' 95
| `-EnumConstantDecl 0x55e1a3d38790 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55e1a3d3a1a0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e1a3d3a5d8 <col:7>
|-CXXConstructorDecl 0x55e1a3d3a2a8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55e1a3d3a2a8
| `-ParmVarDecl 0x55e1a3d3a3b8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55e1a3d3a458 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e1a3d3a568 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55e1a3d97670 <col:7>
`-CXXDestructorDecl 0x55e1a3d3c708 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e1a3d38858 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55e1a3d389b8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55e1a3d38a48 <col:32, col:38> col:32 public
|-TypedefDecl 0x55e1a3d38a80 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55e1a3871e80 'uint32_t' sugar
|   |-Typedef 0x55e1a3786408 'uint32_t'
|   `-TypedefType 0x55e1a375f440 '__uint32_t' sugar
|     |-Typedef 0x55e1a375f038 '__uint32_t'
|     `-BuiltinType 0x55e1a371d410 'unsigned int'
|-CXXConstructorDecl 0x55e1a3d38bc8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55e1a3d38af0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55e1a3d3a0a8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e1a3d3a5e8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e1a3d39960 'base' 'int'
| | `-ImplicitCastExpr 0x55e1a3d3a148 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55e1a3d3a108 <col:16> 'int' lvalue ParmVar 0x55e1a3d38af0 'b' 'int'
| `-CompoundStmt 0x55e1a3d3a658 <col:19, line:1046:5>
|-CXXMethodDecl 0x55e1a3d390c0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55e1a3d38c90 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55e1a3d38d10 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55e1a3d38d88 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55e1a3d38e08 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55e1a3d38ec8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55e1a3d38f48 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55e1a3d39518 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55e1a3d39190 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e1a3d39478 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e1a3d39238 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55e1a3d392d8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55e1a3d39350 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e1a3d3a0c8 <col:82> 'const ArgContext' lvalue Var 0x55e1a3d2e158 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e1a3d3b588 <col:94, line:1067:5>
| |   |-DeclStmt 0x55e1a3d3a7e8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55e1a3d3a678 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55e1a3d3a7a0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55e1a3d3aa08 <line:1055:9, col:91>
| |   | `-VarDecl 0x55e1a3d3a818 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55e1a3d3a9e0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55e1a3d3a9c0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55e1a3d3a970 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55e1a3d3a950 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55e1a3d3a8f8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55e1a3d3a8a8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55e1a3d3a8d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55e1a3d3a938 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55e1a3d3a918 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55e1a3d3a9a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55e1a3d3ab68 <line:1056:9, col:27>
| |   | `-VarDecl 0x55e1a3d3ab00 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55e1a3d3afb0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55e1a3d3aee0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55e1a3d3ae60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e1a3c3be68 0x55e1a3a85448 0x55e1a3a85120 0x55e1a3a76900 0x55e1a3a765b0 0x55e1a3a75ea0 0x55e1a3a48810 0x55e1a39d4cd0
| |   | | |-CallExpr 0x55e1a3d3ada0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55e1a3d3ab90 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55e1a3d3ac40 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e1a3d3ac10 <col:19, col:23> '<bound member function type>' .begin 0x55e1a3a65b08
| |   | | | |   `-DeclRefExpr 0x55e1a3d3abf0 <col:19> 'const String' lvalue ParmVar 0x55e1a3d39238 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55e1a3d3acb0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e1a3d3ac80 <col:32, col:36> '<bound member function type>' .end 0x55e1a3a65d20
| |   | | | |   `-DeclRefExpr 0x55e1a3d3ac60 <col:32> 'const String' lvalue ParmVar 0x55e1a3d39238 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55e1a3d3acd0 <col:43> 'const bool' lvalue Var 0x55e1a3d3a678 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55e1a3d3ad38 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55e1a3d3ad18 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55e1a3d3ad60 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e1a3d3ab00 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55e1a3d3ad80 <col:73> 'const int' lvalue Var 0x55e1a3d3a818 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55e1a3d3ae40 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55e1a3d3ae10 <col:16, col:20> '<bound member function type>' .end 0x55e1a3a65d20
| |   | |     `-DeclRefExpr 0x55e1a3d3adf0 <col:16> 'const String' lvalue ParmVar 0x55e1a3d39238 'str' 'const String &'
| |   | `-BinaryOperator 0x55e1a3d3af90 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55e1a3d3af28 <col:13> 'int' lvalue ->status 0x55e1a3d399c8
| |   |   | `-CXXThisExpr 0x55e1a3d3af18 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55e1a3d3af78 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55e1a3d3af58 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e1a3d38620 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55e1a3d3b200 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55e1a3d3b0e8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55e1a3d3b0d0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55e1a3d3b0b8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55e1a3d3afd8 <col:13> 'int' lvalue ->status 0x55e1a3d399c8
| |   | | |     `-CXXThisExpr 0x55e1a3d3afc8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55e1a3d3b098 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55e1a3d3b068 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55e1a3d3b018 <col:23> 'int' lvalue ->status 0x55e1a3d399c8
| |   | |   |   `-CXXThisExpr 0x55e1a3d3b008 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55e1a3d3b080 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55e1a3d3b048 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e1a3d386b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55e1a3d3b1e0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55e1a3d3b180 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55e1a3d3b128 <col:13, col:18> '<bound member function type>' .error 0x55e1a3bff190
| |   |   | | `-DeclRefExpr 0x55e1a3d3b108 <col:13> 'const ArgContext' lvalue ParmVar 0x55e1a3d39350 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55e1a3d3b1a8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55e1a3d3b158 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55e1a3d3b1d0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55e1a3d3b1c0 <col:20> 'bool' false
| |   |-DeclStmt 0x55e1a3d3b3d8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55e1a3d3b380 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55e1a3d3b310 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55e1a3d3b538 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55e1a3d3b3f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55e1a3a08c98
| |   | |-DeclRefExpr 0x55e1a3d3b438 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e1a3d3ab00 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55e1a3d3b508 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55e1a3d3b480 <col:64> 'V' lvalue ParmVar 0x55e1a3d392d8 'result' 'V &'
| |   `-ReturnStmt 0x55e1a3d3b578 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55e1a3d3b568 <col:16> 'bool' true
| `-CXXMethodDecl 0x55e1a3d9cdf8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e1a3d9cbd0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55e1a3d9cca8 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55e1a3d9cd10 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e1a3d9eb90 <col:94, line:1067:5>
|     |-DeclStmt 0x55e1a3d9d608 <line:1054:9, col:64>
|     | `-VarDecl 0x55e1a3d9d428 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55e1a3d9d598 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55e1a3d9d568 <col:36, col:55> 'const bool' lvalue Var 0x55e1a39f8c08 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55e1a3d9d7e8 <line:1055:9, col:91>
|     | `-VarDecl 0x55e1a3d9d620 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55e1a3d9d768 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55e1a3d9d750 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55e1a3d9d730 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55e1a3d9d710 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55e1a3d9d6f0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55e1a3d9d6b8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55e1a3d9d698 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55e1a3d3a8d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55e1a3d9d6d8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55e1a3d3a918 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55e1a3d3a9a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55e1a3d9d980 <line:1056:9, col:27>
|     | `-VarDecl 0x55e1a3d9d918 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55e1a3d9de08 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55e1a3d9ddb0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55e1a3d9dc68 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55e1a3d9dc38 <col:13> '<bound member function type>' ->parse 0x55e1a3d390c0
|     | | | | `-CXXThisExpr 0x55e1a3d9dc28 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55e1a3d9dac8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e1a3d9da98 <col:19, col:23> '<bound member function type>' .begin 0x55e1a3a65b08
|     | | | |   `-DeclRefExpr 0x55e1a3d9da78 <col:19> 'const String' lvalue ParmVar 0x55e1a3d9cbd0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55e1a3d9db38 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e1a3d9db08 <col:32, col:36> '<bound member function type>' .end 0x55e1a3a65d20
|     | | | |   `-DeclRefExpr 0x55e1a3d9dae8 <col:32> 'const String' lvalue ParmVar 0x55e1a3d9cbd0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55e1a3d9dcd8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55e1a3d9dcb8 <col:43> 'const bool' lvalue Var 0x55e1a3d9d428 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55e1a3d9dbc0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55e1a3d9dba8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55e1a3d9db88 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55e1a3d9dcf0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55e1a3d9dbe8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55e1a3d9d918 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55e1a3d9dd28 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55e1a3d9dd08 <col:73> 'const int' lvalue Var 0x55e1a3d9d620 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55e1a3d9dd90 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55e1a3d9dd60 <col:16, col:20> '<bound member function type>' .end 0x55e1a3a65d20
|     | |     `-DeclRefExpr 0x55e1a3d9dd40 <col:16> 'const String' lvalue ParmVar 0x55e1a3d9cbd0 'str' 'const String &'
|     | `-BinaryOperator 0x55e1a3d9dde8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55e1a3d3af28 <col:13> 'int' lvalue ->status 0x55e1a3d399c8
|     |   | `-CXXThisExpr 0x55e1a3d3af18 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55e1a3d9ddd0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55e1a3d3af58 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e1a3d38620 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55e1a3d9df80 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55e1a3d9dea0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55e1a3d9de88 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55e1a3d9de70 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55e1a3d3afd8 <col:13> 'int' lvalue ->status 0x55e1a3d399c8
|     | | |     `-CXXThisExpr 0x55e1a3d3afc8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55e1a3d9de50 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55e1a3d9de20 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55e1a3d3b018 <col:23> 'int' lvalue ->status 0x55e1a3d399c8
|     | |   |   `-CXXThisExpr 0x55e1a3d3b008 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55e1a3d9de38 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55e1a3d3b048 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e1a3d386b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55e1a3d9df60 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55e1a3d9df10 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55e1a3d9dee0 <col:13, col:18> '<bound member function type>' .error 0x55e1a3bff190
|     |   | | `-DeclRefExpr 0x55e1a3d9dec0 <col:13> 'const ArgContext' lvalue ParmVar 0x55e1a3d9cd10 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55e1a3d9df38 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55e1a3d3b158 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55e1a3d9df50 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55e1a3d3b1c0 <col:20> 'bool' false
|     |-DeclStmt 0x55e1a3d9e4c8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55e1a3d9e470 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55e1a3d9e420 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55e1a3d9e400 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55e1a3d9e390 'type'
|     |       `-ElaboratedType 0x55e1a3d9e340 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55e1a3d9e320 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55e1a39f8d60 'unsigned_type'
|     |           `-BuiltinType 0x55e1a371d410 'unsigned int'
|     |-CallExpr 0x55e1a3d9eb20 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55e1a3d9eb08 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55e1a3d9ea88 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55e1a3d9e968 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55e1a3a08c98 'extract_integer')
|     | |-ImplicitCastExpr 0x55e1a3d9eb68 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55e1a3d9eb50 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55e1a3d9e528 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55e1a3d9d918 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55e1a3d9e5f8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55e1a3d9e5a8 <col:64> 'int':'int' lvalue ParmVar 0x55e1a3d9cca8 'result' 'int &'
|     `-ReturnStmt 0x55e1a3d9eb80 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55e1a3d3b568 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55e1a3d398d8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55e1a3d39588 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e1a3d39838 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e1a3d39638 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55e1a3d396d8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55e1a3d39750 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e1a3d3a0e8 <col:71> 'const ArgContext' lvalue Var 0x55e1a3d2e158 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e1a3d3bd28 <col:83, line:1083:5>
| |   |-DeclStmt 0x55e1a3d3b678 <line:1071:9, col:12>
| |   | `-VarDecl 0x55e1a3d3b610 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55e1a3d3bd00 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55e1a3d3b908 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55e1a3d3b790 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55e1a3d3b758 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55e1a3d3b6a0 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55e1a3d3b6f8 <col:31> 'const String' lvalue ParmVar 0x55e1a3d39638 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55e1a3d3b718 <col:36> 'V' lvalue Var 0x55e1a3d3b610 'x' 'V'
| |     | |   `-DeclRefExpr 0x55e1a3d3b738 <col:39> 'const ArgContext' lvalue ParmVar 0x55e1a3d39750 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55e1a3d3b8e8 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55e1a3d3b8c8 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55e1a3d3b8b0 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55e1a3d3b898 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55e1a3d3b7b8 <col:17> 'int' lvalue ->status 0x55e1a3d399c8
| |     |     |     `-CXXThisExpr 0x55e1a3d3b7a8 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55e1a3d3b878 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55e1a3d3b848 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55e1a3d3b7f8 <col:27> 'int' lvalue ->status 0x55e1a3d399c8
| |     |       |   `-CXXThisExpr 0x55e1a3d3b7e8 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55e1a3d3b860 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55e1a3d3b828 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e1a3d386b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55e1a3d3b938 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55e1a3d3b928 <col:20> 'bool' false
| |     `-IfStmt 0x55e1a3d3bcd8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55e1a3d3b9d8 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55e1a3d3b9a8 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55e1a3d3b958 <col:18> 'int' lvalue ->status 0x55e1a3d399c8
| |       | |   `-CXXThisExpr 0x55e1a3d3b948 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55e1a3d3b9c0 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55e1a3d3b988 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e1a3d386b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55e1a3d3bc18 <col:42, line:1079:9>
| |       | |-CallExpr 0x55e1a3d3bbc0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55e1a3d3ba08 <line:1076:13> '<bound member function type>' ->range_error 0x55e1a3d39fd8
| |       | | | `-CXXThisExpr 0x55e1a3d3b9f8 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55e1a3d3ba38 <col:25> 'const ArgContext' lvalue ParmVar 0x55e1a3d39750 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55e1a3d3bb20 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55e1a3d3bb98 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55e1a3d3bb78 <col:43> 'V' lvalue Var 0x55e1a3d3b610 'x' 'V'
| |       | `-ReturnStmt 0x55e1a3d3bc08 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55e1a3d3bbf8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55e1a3d3bcb8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55e1a3d3bc78 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55e1a3d3bc38 <col:13> 'V' lvalue ParmVar 0x55e1a3d396d8 'result' 'V &'
| |         | `-DeclRefExpr 0x55e1a3d3bc58 <col:22> 'V' lvalue Var 0x55e1a3d3b610 'x' 'V'
| |         `-ReturnStmt 0x55e1a3d3bca8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55e1a3d3bc98 <col:20> 'bool' true
| `-CXXMethodDecl 0x55e1a3d9c7b8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e1a3d9c590 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55e1a3d9c668 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55e1a3d9c6d0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e1a3d9d408 <col:83, line:1083:5>
|     |-DeclStmt 0x55e1a3d9ca40 <line:1071:9, col:12>
|     | `-VarDecl 0x55e1a3d9c9d8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55e1a3d9d3e0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55e1a3d9d070 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55e1a3d9cf98 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55e1a3d9cf60 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55e1a3d9cf18 <col:14> '<bound member function type>' ->parse_saturating 0x55e1a3d9cdf8
|       | |   | `-CXXThisExpr 0x55e1a3d9cf08 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55e1a3d9cab0 <col:31> 'const String' lvalue ParmVar 0x55e1a3d9c590 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55e1a3d9cad0 <col:36> 'int':'int' lvalue Var 0x55e1a3d9c9d8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55e1a3d9caf0 <col:39> 'const ArgContext' lvalue ParmVar 0x55e1a3d9c6d0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55e1a3d9d050 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55e1a3d9d030 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55e1a3d9d018 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55e1a3d9d000 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55e1a3d3b7b8 <col:17> 'int' lvalue ->status 0x55e1a3d399c8
|       |     |     `-CXXThisExpr 0x55e1a3d3b7a8 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55e1a3d9cfe0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55e1a3d9cfb0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55e1a3d3b7f8 <col:27> 'int' lvalue ->status 0x55e1a3d399c8
|       |       |   `-CXXThisExpr 0x55e1a3d3b7e8 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55e1a3d9cfc8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55e1a3d3b828 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e1a3d386b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55e1a3d9d090 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55e1a3d3b928 <col:20> 'bool' false
|       `-IfStmt 0x55e1a3d9d3b8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55e1a3d9d0d0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55e1a3d9d0a0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55e1a3d3b958 <col:18> 'int' lvalue ->status 0x55e1a3d399c8
|         | |   `-CXXThisExpr 0x55e1a3d3b948 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55e1a3d9d0b8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55e1a3d3b988 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e1a3d386b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55e1a3d9d2f0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55e1a3d9d260 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55e1a3d3ba08 <line:1076:13> '<bound member function type>' ->range_error 0x55e1a3d39fd8
|         | | | `-CXXThisExpr 0x55e1a3d3b9f8 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55e1a3d9d0f0 <col:25> 'const ArgContext' lvalue ParmVar 0x55e1a3d9c6d0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55e1a3d9d2c8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55e1a3d9d298 <col:31, col:50> 'const bool' lvalue Var 0x55e1a39f8c08 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55e1a3d9d238 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55e1a3d9d220 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55e1a3d9d208 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55e1a3d9d1e8 <col:43> 'int':'int' lvalue Var 0x55e1a3d9c9d8 'x' 'int':'int'
|         | `-ReturnStmt 0x55e1a3d9d2e0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55e1a3d3bbf8 <col:20> 'bool' false
|         `-CompoundStmt 0x55e1a3d9d398 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55e1a3d9d368 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55e1a3d9d310 <col:13> 'int':'int' lvalue ParmVar 0x55e1a3d9c668 'result' 'int &'
|           | `-ImplicitCastExpr 0x55e1a3d9d350 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55e1a3d9d330 <col:22> 'int':'int' lvalue Var 0x55e1a3d9c9d8 'x' 'int':'int'
|           `-ReturnStmt 0x55e1a3d9d388 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55e1a3d3bc98 <col:20> 'bool' true
|-FieldDecl 0x55e1a3d39960 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55e1a3d399c8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55e1a3d39a18 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55e1a3d39cd0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55e1a3d39a58 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55e1a3d39ad8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55e1a3d39b50 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55e1a3d39bd0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55e1a3d39fd8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55e1a3d39da0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55e1a3d39e18 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55e1a3d39eb0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55e1a3d3c588 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55e1a3d3c588
| `-ParmVarDecl 0x55e1a3d3c698 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55e1a3d3c818 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e1a3d3c928 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e1a3d97680 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e1a3d97650 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55e1a3d97620 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e1a3d975f0 <col:7> 'IntArg' lvalue ParmVar 0x55e1a3d3c928 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e1a3d39960 'base' 'int'
| | `-ImplicitCastExpr 0x55e1a3d97778 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e1a3d97748 <col:7> 'int' xvalue .base 0x55e1a3d39960
| |     `-CXXStaticCastExpr 0x55e1a3d97718 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e1a3d976e8 <col:7> 'IntArg' lvalue ParmVar 0x55e1a3d3c928 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e1a3d399c8 'status' 'int'
| | `-ImplicitCastExpr 0x55e1a3d97848 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e1a3d97818 <col:7> 'int' xvalue .status 0x55e1a3d399c8
| |     `-CXXStaticCastExpr 0x55e1a3d977e8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e1a3d977b8 <col:7> 'IntArg' lvalue ParmVar 0x55e1a3d3c928 '' 'IntArg &&'
| `-CompoundStmt 0x55e1a3d978a0 <col:7>
`-CXXDestructorDecl 0x55e1a3d967e0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e1a3d40e50 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e1a3d410a8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55e1a3d96708 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e1a3d96c80 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55e1a3d96c60 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55e1a3d96cf0 <col:19>
|-CXXConstructorDecl 0x55e1a3d968e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55e1a3d968e8
| `-ParmVarDecl 0x55e1a3d969f8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55e1a3d96a98 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e1a3d96ba8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e1a3d978b0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e1a3d975d0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55e1a3d975a0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55e1a3d97570 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55e1a3d96ba8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55e1a3d97920 <col:19>
`-CXXDestructorDecl 0x55e1a3d96d30 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
