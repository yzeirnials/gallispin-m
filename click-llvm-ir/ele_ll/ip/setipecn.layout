
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad8c1a48 prev 0x55cdad8b91e8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cdad8c1b40 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55cdad8c1bd0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55cdad8c1c48 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55cdad8c1d08 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55cdad8c1dd0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55cdad8c1f48 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55cdad8c1e80 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55cdad8c1ff0 <col:24>
| `-OptimizeNoneAttr 0x55cdad8c2048 <col:34>
|-CXXMethodDecl 0x55cdad8c2090 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55cdad8c2348 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55cdad8c2140 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55cdad8c21b8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55cdad8c2238 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55cdad8c2400 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55cdad8c2438 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55cdad8c24a0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55cdad8c2528 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55cdad8c2848 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55cdad8c25e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55cdad8c2658 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55cdad8c26d0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55cdad8c2750 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55cdad8c2960 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55cdad8ca2d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55cdad8ca2d8
| `-ParmVarDecl 0x55cdad8ca3e8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55cdad8ca488 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55cdad8ca488
| `-ParmVarDecl 0x55cdad8ca598 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55cdad999040 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad8b4a60 prev 0x55cdad8b47e0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cdad8b4b58 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55cdad8b4be8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55cdad8b4c48 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55cdad8b4d38 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55cdad8b4e38 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55cdad8b5008 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55cdad8b4eb8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55cdad8b4f30 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55cdad8b5198 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55cdad8b50d0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55cdad8b5240 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55cdad8b5378 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55cdad8b52b0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55cdad8b5518 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55cdad8b5458 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55cdad8b56b8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55cdad8b55f8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55cdad8b5760 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55cdad8b5860 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55cdad8b5940 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8b5840 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55cdad8b5820 <col:26> 'int' 1
| `-EnumConstantDecl 0x55cdad8b58f0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55cdad8b5958 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad8b58d0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55cdad8b58b0 <col:44> 'int' 2
|-CXXMethodDecl 0x55cdad8b5aa0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55cdad8b5988 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55cdad8b5a08 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55cdad8b5bf8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55cdad8b5b68 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55cdad8b5e38 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55cdad8b5cb8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55cdad8b5d30 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55cdad8b5ee8 <col:20>
| `-OptimizeNoneAttr 0x55cdad8b5f40 <col:30>
|-CXXMethodDecl 0x55cdad8b6048 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55cdad8b5f80 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55cdad8b60f0 <col:20>
| `-OptimizeNoneAttr 0x55cdad8b6148 <col:30>
|-CXXMethodDecl 0x55cdad8b6198 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55cdad8b6260 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55cdad8b6378 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55cdad8b6400 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55cdad8b6488 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55cdad8b6510 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55cdad8b6598 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55cdad8b6628 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55cdad8b66e8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55cdad8b6770 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55cdad8b67f8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55cdad8b6880 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55cdad8b6908 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55cdad8b6990 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55cdad8b6a20 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55cdad8b6ae0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55cdad8b6b70 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55cdad8b6cc0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55cdad8b6c28 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55cdad8b6e50 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55cdad8b6d80 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55cdad8b7100 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55cdad8b6f08 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55cdad8b6f88 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55cdad8b7008 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55cdad8b71b8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55cdad8b72c0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55cdad8b7550 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8b72a0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55cdad8b7280 <col:33> 'int' 0
| |-EnumConstantDecl 0x55cdad8b7350 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55cdad8b7568 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8b7330 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55cdad8b7310 <col:32> 'int' 20
| |-EnumConstantDecl 0x55cdad8b73e0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55cdad8b7580 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8b73c0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55cdad8b73a0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55cdad8b7470 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55cdad8b7598 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8b7450 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55cdad8b7430 <col:35> 'int' 100
| `-EnumConstantDecl 0x55cdad8b7500 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55cdad8b75b0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad8b74e0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55cdad8b74c0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55cdad8b75f0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55cdad8b7a30 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55cdad8b78a0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55cdad8b7918 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad8b7b00 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55cdad8b7c80 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55cdad8b7bb0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad8b7e88 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55cdad8b7d38 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55cdad8b7db0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad8b7f88 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55cdad8b8028 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55cdad8b80f0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cdad8b8180 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55cdad8b83b0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8b8160 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55cdad8b8140 <col:36> 'int' EnumConstant 0x55cdad8b80f0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cdad8b81d0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cdad8b8220 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cdad8b8270 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cdad8b82c0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cdad8b8310 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55cdad8b8360 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55cdad8b8498 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55cdad8b83d8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55cdad8b8560 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55cdad8b8620 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55cdad8b86e0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55cdad8b87a0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55cdad8b88b8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55cdad8b8980 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55cdad8b8b00 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55cdad8b8a30 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55cdad8b8c28 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55cdad8b8e28 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55cdad8b8cd8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55cdad8b8d58 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55cdad8c6778 <col:54, line:127:5>
|   |-ParenExpr 0x55cdad8c6628 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55cdad8c65f8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad8c62e8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55cdad8c62c0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55cdad8c62a8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55cdad8c6290 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55cdad8c6260 <col:31> 'Router *' lvalue ->_router 0x55cdad8c4140
|   |   |         `-CXXThisExpr 0x55cdad8c6250 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55cdad8c6348 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad8c6328 <col:48> 'int' 0
|   |   `-CallExpr 0x55cdad8c6558 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55cdad8c6540 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad8c6520 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad8c6598 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad8c63b8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55cdad8c65b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad8c63d8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55cdad8c65c8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad8c6410 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55cdad8c65e0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad8c6508 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad8c64f0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad8c64a8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55cdad8c66c0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55cdad8c6658 <col:9> 'Router *' lvalue ->_router 0x55cdad8c4140
|   | | `-CXXThisExpr 0x55cdad8c6648 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55cdad8c66a8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55cdad8c6688 <col:19> 'Router *' lvalue ParmVar 0x55cdad8b8cd8 'r' 'Router *'
|   `-BinaryOperator 0x55cdad8c6758 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55cdad8c66f0 <col:9> 'int' lvalue ->_eindex 0x55cdad8c41a8
|     | `-CXXThisExpr 0x55cdad8c66e0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55cdad8c6740 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad8c6720 <col:19> 'int' lvalue ParmVar 0x55cdad8b8d58 'eindex' 'int'
|-CXXMethodDecl 0x55cdad8b8fb0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55cdad8b8ee8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55cdad8b9080 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55cdad8b9148 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55cdad8b91e8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55cdad8b9438 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55cdad8b92b0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55cdad8b9330 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55cdad8b94e8 <col:20>
| `-OptimizeNoneAttr 0x55cdad8b9540 <col:30>
|-CXXMethodDecl 0x55cdad8b9648 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55cdad8b9580 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55cdad8b96f0 <col:20>
| `-OptimizeNoneAttr 0x55cdad8b9748 <col:30>
|-CXXMethodDecl 0x55cdad8b9818 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55cdad8b9788 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55cdad8b98c0 <col:20>
| `-OptimizeNoneAttr 0x55cdad8b9918 <col:30>
|-CXXMethodDecl 0x55cdad8b9aa8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55cdad8b9950 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55cdad8b99d0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55cdad8b9c38 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55cdad8b9b70 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55cdad8b9d88 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55cdad8b9cf8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55cdad8b9ed8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55cdad8b9e48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55cdad8ba028 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55cdad8b9f98 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55cdad8ba2e8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55cdad8ba0e0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55cdad8ba160 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55cdad8ba208 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55cdad8ba3c0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55cdad8ba480 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55cdad8ba750 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55cdad8ba600 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55cdad8ba678 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad8ba878 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55cdad8baa50 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55cdad8ba930 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55cdad8ba9b0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55cdad8bac38 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55cdad8bab18 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55cdad8bab98 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55cdad8bafa8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55cdad8bacf8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55cdad8bad70 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55cdad8badf0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55cdad8c5d60 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55cdad8c5d40 <col:106> 'int' 0
| `-ParmVarDecl 0x55cdad8bae68 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cdad8c5d98 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cdad8c5d78 <col:126> 'int' 0
|-CXXMethodDecl 0x55cdad8bb348 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55cdad8bb078 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55cdad8bb110 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55cdad8bb190 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55cdad8bb208 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cdad8c5dd0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cdad8c5db0 <col:114> 'int' 0
|-CXXMethodDecl 0x55cdad8bb6d8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55cdad8bb420 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55cdad8bb498 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55cdad8bb518 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55cdad8c5de8 <col:96> 'int' 0
| `-ParmVarDecl 0x55cdad8bb590 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cdad8c5e28 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cdad8c5e08 <col:116> 'int' 0
|-CXXMethodDecl 0x55cdad8bba58 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55cdad8bb7a8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55cdad8bb820 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad8bb8a0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55cdad8c5e60 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55cdad8c5e40 <col:109> 'int' 0
| `-ParmVarDecl 0x55cdad8bb918 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cdad8c5e98 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cdad8c5e78 <col:129> 'int' 0
|-CXXMethodDecl 0x55cdad8bbdd8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55cdad8bbb28 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55cdad8bbba0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad8bbc20 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55cdad8bbc98 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cdad8c5ed0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cdad8c5eb0 <col:117> 'int' 0
|-CXXMethodDecl 0x55cdad8bc168 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55cdad8bbeb0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8bbf28 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad8bbfa8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55cdad8c5ee8 <col:99> 'int' 0
| `-ParmVarDecl 0x55cdad8bc020 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cdad8c5f28 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cdad8c5f08 <col:119> 'int' 0
|-CXXMethodDecl 0x55cdad8bc588 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55cdad8bc238 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55cdad8bc2b8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55cdad8bc330 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad8bc3b0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55cdad8c5f60 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55cdad8c5f40 <col:108> 'int' 0
| `-ParmVarDecl 0x55cdad8bc430 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55cdad8c5f98 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55cdad8c5f78 <col:141> 'int' 0
|-CXXMethodDecl 0x55cdad8bc9a8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55cdad8bc660 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55cdad8bc6e0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55cdad8bc758 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad8bc7d8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55cdad8bc858 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55cdad8c5fb0 <col:121> 'int' 0
|-CXXMethodDecl 0x55cdad8bcdd8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55cdad8bca88 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55cdad8bcb08 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55cdad8bcb80 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad8bcc00 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55cdad8c5fd0 <col:98> 'int' 0
| `-ParmVarDecl 0x55cdad8bcc80 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55cdad8c5ff0 <col:123> 'int' 0
|-CXXMethodDecl 0x55cdad8bd0a0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55cdad8bceb0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55cdad8bcf30 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55cdad8bcfb0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55cdad8c6010 <col:80> 'int' 0
|-EnumDecl 0x55cdad8bd158 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55cdad8bd260 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55cdad8bd4f0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8bd240 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55cdad8bd220 <col:42> 'int' 1
| |-EnumConstantDecl 0x55cdad8bd2f0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55cdad8bd508 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8bd2d0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55cdad8bd2b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55cdad8bd380 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55cdad8bd520 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8bd360 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55cdad8bd340 <col:44> 'int' 4
| |-EnumConstantDecl 0x55cdad8bd410 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55cdad8bd538 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8bd3f0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55cdad8bd3d0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55cdad8bd4a0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55cdad8bd550 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad8bd480 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55cdad8bd460 <col:34> 'int' 6
|-CXXMethodDecl 0x55cdad8bd808 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55cdad8bd578 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55cdad8bd618 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55cdad8bd698 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55cdad8bd710 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55cdad8c60c8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55cdad8c60b0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55cdad8c6098 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55cdad8c6078 <col:98, col:105> 'String' (CXXTemporary 0x55cdad8c6078)
|           `-CXXTemporaryObjectExpr 0x55cdad8c6040 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55cdad8bdaa8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55cdad8bd8d8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55cdad8bd950 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55cdad8bd9c8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55cdad8c6178 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55cdad8c6160 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55cdad8c6148 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55cdad8c6128 <col:94, col:101> 'String' (CXXTemporary 0x55cdad8c6128)
| |         `-CXXTemporaryObjectExpr 0x55cdad8c60f0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55cdad8c6960 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55cdad8c68d8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55cdad8c68a8 <col:9> '<bound member function type>' ->add_task_handlers 0x55cdad8bd808
|     | `-CXXThisExpr 0x55cdad8c6898 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55cdad8c6918 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55cdad8c6818 <col:27> 'Task *' lvalue ParmVar 0x55cdad8bd8d8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55cdad8c6930 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55cdad8c6838 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55cdad8bd950 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55cdad8c6948 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55cdad8c6858 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55cdad8bd4a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55cdad8c6878 <col:62> 'const String' lvalue ParmVar 0x55cdad8bd9c8 'prefix' 'const String &'
|-CXXMethodDecl 0x55cdad8bdcb8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55cdad8bdb70 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55cdad8bdbe8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55cdad8c6228 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55cdad8c6210 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55cdad8c61f8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55cdad8c61d8 <col:70, col:77> 'String' (CXXTemporary 0x55cdad8c61d8)
| |         `-CXXTemporaryObjectExpr 0x55cdad8c61a0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55cdad8c6b38 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55cdad8c6ab0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55cdad8c6a80 <col:9> '<bound member function type>' ->add_task_handlers 0x55cdad8bd808
|     | `-CXXThisExpr 0x55cdad8c6a70 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55cdad8c6af0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55cdad8c69f0 <col:27> 'Task *' lvalue ParmVar 0x55cdad8bdb70 'task' 'Task *'
|     |-ImplicitCastExpr 0x55cdad8c6b08 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55cdad8c6a10 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55cdad8c6b20 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55cdad8c6a30 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55cdad8bd4a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55cdad8c6a50 <col:57> 'const String' lvalue ParmVar 0x55cdad8bdbe8 'prefix' 'const String &'
|-CXXMethodDecl 0x55cdad8bdf98 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55cdad8bdd80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8bde00 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8bde78 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55cdad8be248 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55cdad8be068 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8be0e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8be168 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55cdad8be538 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55cdad8be318 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8be398 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8be410 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55cdad8be7e8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55cdad8be608 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8be688 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8be708 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55cdad8bea98 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55cdad8be8b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8be938 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8be9b8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55cdad8bed48 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55cdad8beb68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8bebe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8bec60 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55cdad8beff8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55cdad8bee18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8bee98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8bef18 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55cdad8bf308 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55cdad8bf120 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8bf1a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8bf220 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55cdad8bf5e8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55cdad8bf3d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8bf458 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8bf500 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55cdad8bf8c8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55cdad8bf6b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8bf738 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8bf7e0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55cdad8bfb30 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55cdad8bf998 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55cdad8bfa18 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55cdad8bfa90 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55cdad8bfdd8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55cdad8bfc00 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55cdad8bfc80 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55cdad8bfcf8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55cdad8c0088 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55cdad8bfea8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8bff28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8bffa8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55cdad8c0338 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55cdad8c0158 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8c01d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8c0250 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55cdad8c05e8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55cdad8c0408 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8c0488 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8c0500 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55cdad8c08b8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55cdad8c06b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8c0738 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cdad8c07d8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55cdad8c0be8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55cdad8c0988 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cdad8c0a08 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55cdad8c0a80 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55cdad8c0af8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cdad8c6240 <col:93> 'bool' false
|-CXXMethodDecl 0x55cdad8c0dd0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55cdad8c0cb8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55cdad8c0d38 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55cdad8c0fa8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55cdad8c0e90 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55cdad8c0f10 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55cdad8c1288 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55cdad8c1068 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55cdad8c10e0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55cdad8c1160 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55cdad8c11d8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad8c1578 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55cdad8c1358 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55cdad8c13d0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55cdad8c1450 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55cdad8c14c8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad8c17b0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55cdad8c1650 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55cdad8c16d0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55cdad8c1998 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55cdad8c1878 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55cdad8c18f8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55cdad8c1a48 prev 0x55cdad8b91e8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55cdad8c1b40 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55cdad8c1bd0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55cdad8c1c48 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55cdad8c1d08 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55cdad8c1dd0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55cdad8c1f48 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55cdad8c1e80 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55cdad8c1ff0 <col:24>
| | `-OptimizeNoneAttr 0x55cdad8c2048 <col:34>
| |-CXXMethodDecl 0x55cdad8c2090 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55cdad8c2348 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55cdad8c2140 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55cdad8c21b8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55cdad8c2238 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55cdad8c2400 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55cdad8c2438 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55cdad8c24a0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55cdad8c2528 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55cdad8c2848 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55cdad8c25e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55cdad8c2658 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55cdad8c26d0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55cdad8c2750 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55cdad8c2960 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55cdad8ca2d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55cdad8ca2d8
| | `-ParmVarDecl 0x55cdad8ca3e8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55cdad8ca488 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55cdad8ca488
| | `-ParmVarDecl 0x55cdad8ca598 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55cdad999040 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55cdad8c29d8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55cdad8c2a78 <col:38> "" ""
|-CXXMethodDecl 0x55cdad8c2b08 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55cdad8c2ba8 <col:44> "" ""
|-AccessSpecDecl 0x55cdad8c2c18 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55cdad8c2c40 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55cdad8c2d40 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55cdad8c2d90 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad8c2d20 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55cdad8c2d00 <col:27> 'int' 4
|-FieldDecl 0x55cdad8c2e48 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55cdad8c2ff8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55cdad8c30b0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55cdad8c4140 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55cdad8c41a8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55cdad8c42f8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55cdad8c4238 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55cdad8c44a8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55cdad8c43b8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55cdad8c4688 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55cdad8c4568 <col:20> col:23 'int'
| `-ParmVarDecl 0x55cdad8c45e8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55cdad8c4930 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad8c4750 <col:23> col:26 'int'
| |-ParmVarDecl 0x55cdad8c47d0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55cdad8c4848 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55cdad8c49e8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55cdad8c4ab0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55cdad8c4b00 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55cdad8c4b50 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55cdad8c4d30 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55cdad8c4be0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55cdad8c4c58 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad8c4fd8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55cdad8c4df8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55cdad8c4e78 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55cdad8c4ef0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad8c51f8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55cdad8c50a8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55cdad8c5128 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55cdad8c5530 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55cdad8c52b8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55cdad8c5338 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55cdad8c53b0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55cdad8c5430 <col:57> col:60 'int'
|-CXXMethodDecl 0x55cdad8c5718 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55cdad8c5600 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55cdad8c5680 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55cdad8c5868 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55cdad8c57d8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55cdad8c5be8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55cdad8c5928 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55cdad8c59a8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55cdad8c5a20 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55cdad8c5aa0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55cdad8c5d00 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetIPECN
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned char _ecn
           | [sizeof=112, dsize=109, align=8,
           |  nvsize=109, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad8cd448 <../elements/ip/setipecn.hh:22:1, line:40:1> line:22:7 class SetIPECN definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55cdad8cd5a8 <col:1, col:7> col:7 implicit referenced class SetIPECN
|-AccessSpecDecl 0x55cdad8cd638 <col:35, col:41> col:35 public
|-CXXConstructorDecl 0x55cdad8cd6c0 <line:24:5, col:14> col:5 SetIPECN 'void ()'
|-CXXDestructorDecl 0x55cdad8cd7b0 <line:25:5, col:15> col:5 ~SetIPECN 'void ()' noexcept-unevaluated 0x55cdad8cd7b0
| `-Overrides: [ 0x55cdad8b4d38 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55cdad8cd8e0 <line:27:5, col:57> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55cdad8b6198 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55cdad8ce430 <col:36, col:57>
|   `-ReturnStmt 0x55cdad8ce420 <col:38, col:45>
|     `-ImplicitCastExpr 0x55cdad8ce408 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55cdad8ce3e8 <col:45> 'const char [9]' lvalue "SetIPECN"
|-CXXMethodDecl 0x55cdad8cd9a8 <line:28:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55cdad8b6260 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55cdad8ce490 <col:36, col:56>
|   `-ReturnStmt 0x55cdad8ce480 <col:38, col:45>
|     `-ImplicitCastExpr 0x55cdad8ce468 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55cdad8ce448 <col:45> 'const char []' lvalue Var 0x55cdad8b6510 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55cdad8cdc80 <line:30:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55cdad8b7a30 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55cdad8cdb30 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55cdad8cdba8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad8cdd50 <line:31:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55cdad8ba480 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55cdad8ce4c8 <col:39, col:54>
|   `-ReturnStmt 0x55cdad8ce4b8 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55cdad8ce4a8 <col:48> 'bool' true
|-CXXMethodDecl 0x55cdad8cde10 <line:32:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55cdad8b7b00 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55cdad8cdf50 <line:34:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55cdad8b5378 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55cdad8cdec0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55cdad8cdff8 <line:36:3, col:10> col:3 private
|-FieldDecl 0x55cdad8ce038 <line:38:5, col:19> col:19 _ecn 'unsigned char'
|-CXXConstructorDecl 0x55cdad8ce0b8 <line:22:7> col:7 implicit SetIPECN 'void (const SetIPECN &)' inline default_delete noexcept-unevaluated 0x55cdad8ce0b8
| `-ParmVarDecl 0x55cdad8ce1c8 <col:7> col:7 'const SetIPECN &'
`-CXXMethodDecl 0x55cdad8ce268 <col:7> col:7 implicit operator= 'SetIPECN &(const SetIPECN &)' inline default_delete noexcept-unevaluated 0x55cdad8ce268
  `-ParmVarDecl 0x55cdad8ce378 <col:7> col:7 'const SetIPECN &'

Layout: <CGRecordLayout
  LLVMType:%class.SetIPECN = type { %class.Element.base, i8, [3 x i8] }
  NonVirtualBaseLLVMType:%class.SetIPECN.base = type { %class.Element.base, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad6878f0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55cdad687a08 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55cdad687aa8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55cdad687b08 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55cdad687b68 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55cdad687c18 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad687f20 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cdad688038 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55cdad6880e0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55cdad688148 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55cdad6881d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55cdad68e270 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cdad68e6a8 <col:12>
|-CXXConstructorDecl 0x55cdad68e378 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cdad68e488 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55cdad6880e0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55cdad690c30 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55cdad690c00 <col:12> 'const char *const' lvalue .data 0x55cdad6880e0
| |     `-DeclRefExpr 0x55cdad690be0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad68e488 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55cdad688148 'length' 'int'
| | `-ImplicitCastExpr 0x55cdad690cc0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55cdad690c90 <col:12> 'const int' lvalue .length 0x55cdad688148
| |     `-DeclRefExpr 0x55cdad690c70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad68e488 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55cdad6881d8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55cdad690d50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55cdad690d20 <col:12> 'String::memo_t *const' lvalue .memo 0x55cdad6881d8
| |     `-DeclRefExpr 0x55cdad690d00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad68e488 '' 'const String::rep_t &'
| `-CompoundStmt 0x55cdad690da8 <col:12>
|-CXXConstructorDecl 0x55cdad68e528 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cdad68e528
| `-ParmVarDecl 0x55cdad68e638 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55cdad693b90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55cdad69f5a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cdad69f6b8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55cdad69fbd0 <col:12>
|   |-BinaryOperator 0x55cdad69f9e8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55cdad69f9a0 <col:12> 'const char *' lvalue ->data 0x55cdad6880e0
|   | | `-CXXThisExpr 0x55cdad69f990 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55cdad69f9d0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55cdad69f960 <col:12> 'const char *const' lvalue .data 0x55cdad6880e0
|   |     `-DeclRefExpr 0x55cdad69f940 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad69f6b8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55cdad69fab0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55cdad69fa68 <col:12> 'int' lvalue ->length 0x55cdad688148
|   | | `-CXXThisExpr 0x55cdad69fa58 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55cdad69fa98 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55cdad69fa28 <col:12> 'const int' lvalue .length 0x55cdad688148
|   |     `-DeclRefExpr 0x55cdad69fa08 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad69f6b8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55cdad69fb78 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55cdad69fb30 <col:12> 'String::memo_t *' lvalue ->memo 0x55cdad6881d8
|   | | `-CXXThisExpr 0x55cdad69fb20 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55cdad69fb60 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55cdad69faf0 <col:12> 'String::memo_t *const' lvalue .memo 0x55cdad6881d8
|   |     `-DeclRefExpr 0x55cdad69fad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad69f6b8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55cdad69fbc0 <col:12>
|     `-UnaryOperator 0x55cdad69fba8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cdad69fb98 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55cdad69f728 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cdad69f728
  `-ParmVarDecl 0x55cdad69f838 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad67ee60 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cdad67ef78 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55cdad67f008 <col:16, col:22> col:16 public
|-TypedefDecl 0x55cdad67f048 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55cdad353fd0 'const char *'
|   `-QualType 0x55cdad353521 'const char' const
|     `-BuiltinType 0x55cdad353520 'char'
|-TypedefDecl 0x55cdad67f0d0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55cdad67f0a0 'String::const_iterator' sugar
|   |-Typedef 0x55cdad67f048 'const_iterator'
|   `-PointerType 0x55cdad353fd0 'const char *'
|     `-QualType 0x55cdad353521 'const char' const
|       `-BuiltinType 0x55cdad353520 'char'
|-TypedefDecl 0x55cdad67f240 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55cdad67f1b0 'int (String::*)() const'
|   |-RecordType 0x55cdad67eef0 'String'
|   | `-CXXRecord 0x55cdad67ee60 'String'
|   `-ParenType 0x55cdad67f150 'int () const' sugar
|     `-FunctionProtoType 0x55cdad653cf0 'int () const' const cdecl
|       `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad67f2a8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55cdad4a88d0 'int64_t' sugar
|   |-Typedef 0x55cdad3bc390 'int64_t'
|   `-TypedefType 0x55cdad395630 '__int64_t' sugar
|     |-Typedef 0x55cdad395208 '__int64_t'
|     `-BuiltinType 0x55cdad3535a0 'long'
|-TypedefDecl 0x55cdad67f310 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55cdad4a87f0 'uint64_t' sugar
|   |-Typedef 0x55cdad3bc530 'uint64_t'
|   `-TypedefType 0x55cdad3956c0 '__uint64_t' sugar
|     |-Typedef 0x55cdad395278 '__uint64_t'
|     `-BuiltinType 0x55cdad353640 'unsigned long'
|-TypedefDecl 0x55cdad67f3a0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55cdad67f370 'String::intmax_t' sugar
|   |-Typedef 0x55cdad67f2a8 'intmax_t'
|   `-TypedefType 0x55cdad4a88d0 'int64_t' sugar
|     |-Typedef 0x55cdad3bc390 'int64_t'
|     `-TypedefType 0x55cdad395630 '__int64_t' sugar
|       |-Typedef 0x55cdad395208 '__int64_t'
|       `-BuiltinType 0x55cdad3535a0 'long'
|-TypedefDecl 0x55cdad67f430 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55cdad67f400 'String::uintmax_t' sugar
|   |-Typedef 0x55cdad67f310 'uintmax_t'
|   `-TypedefType 0x55cdad4a87f0 'uint64_t' sugar
|     |-Typedef 0x55cdad3bc530 'uint64_t'
|     `-TypedefType 0x55cdad3956c0 '__uint64_t' sugar
|       |-Typedef 0x55cdad395278 '__uint64_t'
|       `-BuiltinType 0x55cdad353640 'unsigned long'
|-CXXConstructorDecl 0x55cdad67f4f0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55cdad67f698 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55cdad67f5d8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55cdad67f848 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55cdad67f788 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55cdad67f9a0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55cdad67f910 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55cdad67fbb8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55cdad67fa68 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55cdad67fae8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55cdad67fdd8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55cdad67fc88 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55cdad67fd08 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55cdad67fff8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55cdad67fea8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55cdad67ff28 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55cdad680218 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55cdad6800c8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55cdad680148 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55cdad6803a8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55cdad6802e0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55cdad680528 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55cdad680468 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55cdad6806b8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55cdad6805f0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55cdad680810 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55cdad680780 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55cdad680968 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55cdad6808d8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55cdad680ac0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55cdad680a30 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55cdad680c48 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55cdad680b88 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55cdad680dd8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55cdad680d10 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55cdad680f68 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55cdad680ea0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55cdad6810f8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55cdad681030 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55cdad6811f0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55cdad681318 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55cdad681498 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55cdad6813d0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55cdad6815e8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55cdad681558 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55cdad6816a0 <col:63> "" ""
|-CXXMethodDecl 0x55cdad6817e8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55cdad681728 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55cdad6819f8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55cdad6818a8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55cdad681928 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55cdad681c18 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55cdad681ac0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55cdad681b40 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55cdad681ef8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55cdad681cd8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55cdad681d58 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55cdad68dd40 <col:55> 'int' 10
| `-ParmVarDecl 0x55cdad681dd0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cdad68dd60 <col:76> 'bool' true
|-CXXMethodDecl 0x55cdad6821d8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55cdad681fc0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55cdad682040 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55cdad68dd70 <col:56> 'int' 10
| `-ParmVarDecl 0x55cdad6820b8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cdad68dd90 <col:77> 'bool' true
|-CXXMethodDecl 0x55cdad6822e0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55cdad6823a8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55cdad682470 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55cdad682510 <col:20>
| `-OptimizeNoneAttr 0x55cdad682568 <col:30>
|-CXXConversionDecl 0x55cdad682658 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55cdad682728 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55cdad6827e8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55cdad6828d8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55cdad682998 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55cdad682b18 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55cdad682a50 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55cdad682c68 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55cdad682bd8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55cdad682d58 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55cdad682e18 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55cdad683068 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55cdad682ed0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55cdad682f50 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55cdad6832c8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55cdad683130 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55cdad6831b0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55cdad683398 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55cdad6835a8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55cdad683450 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55cdad6834d0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55cdad6837c8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55cdad683670 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55cdad6836f0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55cdad683958 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55cdad683890 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55cdad683a48 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55cdad683bb8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55cdad683af8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55cdad683dc8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55cdad683c78 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55cdad683cf8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55cdad683fe0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55cdad683e88 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55cdad683f00 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55cdad684170 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55cdad6840a0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55cdad684390 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55cdad684230 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55cdad6842b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55cdad6844e0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55cdad684450 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55cdad6846b8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55cdad6845a0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55cdad684620 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55cdad684808 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55cdad684778 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55cdad684a20 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55cdad6848c0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55cdad684940 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55cdad68dda0 <col:39> 'int' 0
|-CXXMethodDecl 0x55cdad684c40 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55cdad684ae0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55cdad684b60 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55cdad68ddc0 <col:48> 'int' 0
|-CXXMethodDecl 0x55cdad684e20 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55cdad684d00 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55cdad684d80 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55cdad68dde0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55cdad684ef0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55cdad684fb0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55cdad685070 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55cdad685130 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55cdad6851f0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55cdad685398 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55cdad6852a0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55cdad685518 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55cdad685450 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55cdad6856f0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55cdad6855d8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55cdad685868 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55cdad6857a8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55cdad6859b0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55cdad685920 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55cdad685b00 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55cdad685a70 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55cdad685cd8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55cdad685bc0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55cdad685c40 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55cdad685eb8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55cdad685da0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55cdad685e20 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55cdad686008 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55cdad685f78 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55cdad686218 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55cdad6860c8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55cdad686148 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55cdad686378 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55cdad6862e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55cdad6864d0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55cdad686438 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55cdad686578 <col:57> "" ""
|-CXXMethodDecl 0x55cdad686688 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55cdad6865f8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55cdad6867d8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55cdad686748 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55cdad686958 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55cdad686890 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55cdad686a20 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55cdad686ae0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55cdad686ba0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55cdad686c40 <col:49> "" ""
|-CXXMethodDecl 0x55cdad686cd0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55cdad686d90 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55cdad686e80 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55cdad686f48 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55cdad687008 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55cdad6870c8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55cdad6871c0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55cdad687288 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55cdad687350 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55cdad687528 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55cdad687408 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55cdad687488 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55cdad687750 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55cdad6875f0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55cdad687670 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55cdad687860 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55cdad6878c8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55cdad6878f0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55cdad687a08 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55cdad687aa8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55cdad687b08 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55cdad687b68 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55cdad687c18 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55cdad687c80 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55cdad687eb8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55cdad687f08 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad687e98 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55cdad687da8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55cdad687d50 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55cdad687d90 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55cdad687d70 <col:32> 'int' 8
|-CXXRecordDecl 0x55cdad687f20 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55cdad688038 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55cdad6880e0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55cdad688148 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55cdad6881d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55cdad68e270 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55cdad68e6a8 <col:12>
| |-CXXConstructorDecl 0x55cdad68e378 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55cdad68e488 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55cdad6880e0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55cdad690c30 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55cdad690c00 <col:12> 'const char *const' lvalue .data 0x55cdad6880e0
| | |     `-DeclRefExpr 0x55cdad690be0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad68e488 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55cdad688148 'length' 'int'
| | | `-ImplicitCastExpr 0x55cdad690cc0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55cdad690c90 <col:12> 'const int' lvalue .length 0x55cdad688148
| | |     `-DeclRefExpr 0x55cdad690c70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad68e488 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55cdad6881d8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55cdad690d50 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55cdad690d20 <col:12> 'String::memo_t *const' lvalue .memo 0x55cdad6881d8
| | |     `-DeclRefExpr 0x55cdad690d00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad68e488 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55cdad690da8 <col:12>
| |-CXXConstructorDecl 0x55cdad68e528 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cdad68e528
| | `-ParmVarDecl 0x55cdad68e638 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55cdad693b90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55cdad69f5a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55cdad69f6b8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55cdad69fbd0 <col:12>
| |   |-BinaryOperator 0x55cdad69f9e8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55cdad69f9a0 <col:12> 'const char *' lvalue ->data 0x55cdad6880e0
| |   | | `-CXXThisExpr 0x55cdad69f990 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55cdad69f9d0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55cdad69f960 <col:12> 'const char *const' lvalue .data 0x55cdad6880e0
| |   |     `-DeclRefExpr 0x55cdad69f940 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad69f6b8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55cdad69fab0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55cdad69fa68 <col:12> 'int' lvalue ->length 0x55cdad688148
| |   | | `-CXXThisExpr 0x55cdad69fa58 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55cdad69fa98 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55cdad69fa28 <col:12> 'const int' lvalue .length 0x55cdad688148
| |   |     `-DeclRefExpr 0x55cdad69fa08 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad69f6b8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55cdad69fb78 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55cdad69fb30 <col:12> 'String::memo_t *' lvalue ->memo 0x55cdad6881d8
| |   | | `-CXXThisExpr 0x55cdad69fb20 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55cdad69fb60 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55cdad69faf0 <col:12> 'String::memo_t *const' lvalue .memo 0x55cdad6881d8
| |   |     `-DeclRefExpr 0x55cdad69fad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cdad69f6b8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55cdad69fbc0 <col:12>
| |     `-UnaryOperator 0x55cdad69fba8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55cdad69fb98 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55cdad69f728 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cdad69f728
|   `-ParmVarDecl 0x55cdad69f838 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55cdad688250 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55cdad688498 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55cdad6882b8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55cdad688338 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55cdad6883b0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55cdad68e230 <col:79, line:261:5>
|   |-BinaryOperator 0x55cdad68dea8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55cdad68de40 <col:2, col:5> 'const char *' lvalue .data 0x55cdad6880e0
|   | | `-MemberExpr 0x55cdad68de10 <col:2> 'String::rep_t' lvalue ->_r 0x55cdad688250
|   | |   `-CXXThisExpr 0x55cdad68de00 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55cdad68de90 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55cdad68de70 <col:12> 'const char *' lvalue ParmVar 0x55cdad6882b8 'data' 'const char *'
|   |-BinaryOperator 0x55cdad68df70 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55cdad68df08 <col:2, col:5> 'int' lvalue .length 0x55cdad688148
|   | | `-MemberExpr 0x55cdad68ded8 <col:2> 'String::rep_t' lvalue ->_r 0x55cdad688250
|   | |   `-CXXThisExpr 0x55cdad68dec8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55cdad68df58 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55cdad68df38 <col:14> 'int' lvalue ParmVar 0x55cdad688338 'length' 'int'
|   `-IfStmt 0x55cdad68e218 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55cdad68e090 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55cdad68e078 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55cdad68e058 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55cdad68e038 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55cdad68dfd0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55cdad6881d8
|     |       | `-MemberExpr 0x55cdad68dfa0 <col:7> 'String::rep_t' lvalue ->_r 0x55cdad688250
|     |       |   `-CXXThisExpr 0x55cdad68df90 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55cdad68e020 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55cdad68e000 <col:17> 'String::memo_t *' lvalue ParmVar 0x55cdad6883b0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55cdad68e1f0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55cdad68e1d8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55cdad68e0e0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55cdad676ec8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55cdad68e148 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55cdad687aa8
|         `-ImplicitCastExpr 0x55cdad68e130 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55cdad68e110 <col:27> 'String::memo_t *' lvalue ParmVar 0x55cdad6883b0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55cdad688748 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55cdad688568 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55cdad6885e8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55cdad688660 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55cdad688250 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55cdad68e6b8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55cdad68e848 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55cdad68e7b0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55cdad68e720 <col:2> '<bound member function type>' ->assign_memo 0x55cdad688498
|     | `-ImplicitCastExpr 0x55cdad68e7e8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55cdad68e710 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55cdad68e800 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55cdad68e750 <col:14> 'const char *' lvalue ParmVar 0x55cdad688568 'data' 'const char *'
|     |-ImplicitCastExpr 0x55cdad68e818 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55cdad68e770 <col:20> 'int' lvalue ParmVar 0x55cdad6885e8 'length' 'int'
|     `-ImplicitCastExpr 0x55cdad68e830 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad68e790 <col:28> 'String::memo_t *' lvalue ParmVar 0x55cdad688660 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55cdad6888d8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55cdad688818 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55cdad68eaa0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55cdad68ea20 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55cdad68e870 <col:2> '<bound member function type>' ->assign_memo 0x55cdad688498
|     | `-CXXThisExpr 0x55cdad68e860 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55cdad68ea58 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55cdad68e8f0 <col:14, col:19> 'const char *' lvalue .data 0x55cdad6880e0
|     |   `-MemberExpr 0x55cdad68e8c0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55cdad688250
|     |     `-DeclRefExpr 0x55cdad68e8a0 <col:14> 'const String' lvalue ParmVar 0x55cdad688818 'x' 'const String &'
|     |-ImplicitCastExpr 0x55cdad68ea70 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55cdad68e970 <col:25, col:30> 'int' lvalue .length 0x55cdad688148
|     |   `-MemberExpr 0x55cdad68e940 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55cdad688250
|     |     `-DeclRefExpr 0x55cdad68e920 <col:25> 'const String' lvalue ParmVar 0x55cdad688818 'x' 'const String &'
|     `-ImplicitCastExpr 0x55cdad68ea88 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55cdad68e9f0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55cdad6881d8
|         `-MemberExpr 0x55cdad68e9c0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55cdad688250
|           `-DeclRefExpr 0x55cdad68e9a0 <col:38> 'const String' lvalue ParmVar 0x55cdad688818 'x' 'const String &'
|-CXXMethodDecl 0x55cdad6889a0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55cdad68f460 <col:31, line:278:5>
|   `-IfStmt 0x55cdad68f448 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55cdad68eb40 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55cdad68eb28 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55cdad68eaf8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55cdad6881d8
|     |     `-MemberExpr 0x55cdad68eac8 <col:6> 'String::rep_t' lvalue ->_r 0x55cdad688250
|     |       `-CXXThisExpr 0x55cdad68eab8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55cdad68f420 <col:15, line:277:2>
|       |-ParenExpr 0x55cdad68eff0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55cdad68efc0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55cdad68ec50 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55cdad68ec38 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55cdad68ec20 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55cdad68ebe0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55cdad687aa8
|       |   |       `-ImplicitCastExpr 0x55cdad68ebc8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55cdad68eb98 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55cdad6881d8
|       |   |           `-MemberExpr 0x55cdad68eb68 <col:27> 'String::rep_t' lvalue ->_r 0x55cdad688250
|       |   |             `-CXXThisExpr 0x55cdad68eb58 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55cdad68ecb0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55cdad68ec90 <col:54> 'int' 0
|       |   `-CallExpr 0x55cdad68ef20 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55cdad68ef08 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55cdad68ee88 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55cdad68ef60 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55cdad68ed98 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55cdad68ef78 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55cdad68edc8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55cdad68ef90 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55cdad68ee00 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55cdad68efa8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55cdad68ee70 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55cdad68ee58 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55cdad68ee20 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55cdad68f340 <line:274:6, line:275:22>
|       | |-CallExpr 0x55cdad68f200 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55cdad68f1e8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55cdad68f160 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55cdad678310 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55cdad68f130 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55cdad687aa8
|       | |   `-ImplicitCastExpr 0x55cdad68f118 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55cdad68f0e8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55cdad6881d8
|       | |       `-MemberExpr 0x55cdad68f0b8 <col:40> 'String::rep_t' lvalue ->_r 0x55cdad688250
|       | |         `-CXXThisExpr 0x55cdad68f0a8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55cdad68f300 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55cdad68f2e8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55cdad68f228 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55cdad68d180 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55cdad68f328 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55cdad68f288 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55cdad6881d8
|       |       `-MemberExpr 0x55cdad68f258 <col:15> 'String::rep_t' lvalue ->_r 0x55cdad688250
|       |         `-CXXThisExpr 0x55cdad68f248 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55cdad68f400 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55cdad68f398 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55cdad6881d8
|         | `-MemberExpr 0x55cdad68f368 <col:6> 'String::rep_t' lvalue ->_r 0x55cdad688250
|         |   `-CXXThisExpr 0x55cdad68f358 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55cdad68f3e8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55cdad68f3c8 <col:16> 'int' 0
|-CXXMethodDecl 0x55cdad688c38 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55cdad688a58 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55cdad688ad8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55cdad688b50 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55cdad688d10 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55cdad688f60 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55cdad688dc8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55cdad688e48 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55cdad688ec0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55cdad689148 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55cdad689030 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55cdad6890b0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55cdad689248 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55cdad68f538 <col:41, line:286:5>
|   `-ReturnStmt 0x55cdad68f528 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55cdad68f4f8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55cdad68f4c0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55cdad68f4a8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55cdad68f488 <col:46> 'int' 1
|-CXXMethodDecl 0x55cdad6894e8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55cdad689300 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55cdad689380 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55cdad689400 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55cdad68d180 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55cdad6895b0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55cdad68d250 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55cdad68d420 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55cdad68d308 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55cdad68d388 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55cdad68d4e0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55cdad68d5a8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55cdad68d6a8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55cdad68d720 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55cdad68d798 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55cdad68d800 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55cdad68d900 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55cdad68d950 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad68d8e0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55cdad68d8c0 <col:22> 'int' 14
|-CXXMethodDecl 0x55cdad68db68 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55cdad68d980 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55cdad68da00 <col:38> col:41 'int'
| `-ParmVarDecl 0x55cdad68da80 <col:43> col:46 'int'
|-FriendDecl 0x55cdad68dc70 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55cdad68dd00 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cdad7507c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55cdad750998 prev 0x55cdad7507c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55cdad750a28 <col:46, col:52> col:46 public
|-TypedefDecl 0x55cdad750a50 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad7523b0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55cdad752360 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55cdad752340 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55cdad750c68 'type'
|     `-SubstTemplateTypeParmType 0x55cdad750c30 'String' sugar
|       |-TemplateTypeParmType 0x55cdad643710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad6436c0 'T'
|       `-RecordType 0x55cdad67eef0 'String'
|         `-CXXRecord 0x55cdad67ee60 'String'
|-TypedefDecl 0x55cdad752468 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55cdad752430 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55cdad752410 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55cdad7523b0 'type'
|     `-ElaboratedType 0x55cdad752360 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55cdad752340 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55cdad750c68 'type'
|         `-SubstTemplateTypeParmType 0x55cdad750c30 'String' sugar
|           |-TemplateTypeParmType 0x55cdad643710 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55cdad6436c0 'T'
|           `-RecordType 0x55cdad67eef0 'String'
|             `-CXXRecord 0x55cdad67ee60 'String'
|-CXXMethodDecl 0x55cdad7525e8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55cdad7524f8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55cdad7526d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55cdad7527b8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55cdad7527b8
|-CXXMethodDecl 0x55cdad752a88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55cdad752990 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55cdad752cc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55cdad752b40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cdad752bb8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cdad752e98 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55cdad752d88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cdad752e00 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cdad752ff8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55cdad7530c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55cdad8fd5e0 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55cdad753188 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55cdad753200 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cdad8fd838 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55cdad8fd6b0 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55cdad8fd728 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cdad8fd9f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55cdad8fd908 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cdad8fdbb8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55cdad8fdac0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cdad8fdc70 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55cdad8fdd20 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55cdad8fdf58 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55cdad8fddd0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cdad8fde48 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cdad8fe1f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55cdad8fe100 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55cdad8fe2c0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55cdad8fe310 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55cdad8fe360 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cdad8b76a0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55cdad74f228 prev 0x55cdad8b76a0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55cdad750730 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55cdad7506e0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55cdad7506c0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55cdad750570 'type'
|     `-SubstTemplateTypeParmType 0x55cdad750400 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55cdad6194c0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55cdad619468 'F'
|       `-RecordType 0x55cdad750060 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55cdad74ff80 'typed_array_memory'
|-FieldDecl 0x55cdad8fe3b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55cdad8fe400 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55cdad8fe438 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55cdad74f2c0 'String' sugar
|   |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55cdad6509d8 'T'
|   `-RecordType 0x55cdad67eef0 'String'
|     `-CXXRecord 0x55cdad67ee60 'String'
|-TypedefDecl 0x55cdad8fe4c8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55cdad8fe490 'String &'
|   `-SubstTemplateTypeParmType 0x55cdad74f2c0 'String' sugar
|     |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cdad6509d8 'T'
|     `-RecordType 0x55cdad67eef0 'String'
|       `-CXXRecord 0x55cdad67ee60 'String'
|-TypedefDecl 0x55cdad8fe558 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55cdad8fe520 'const String &'
|   `-QualType 0x55cdad74f2c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55cdad74f2c0 'String' sugar
|       |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad6509d8 'T'
|       `-RecordType 0x55cdad67eef0 'String'
|         `-CXXRecord 0x55cdad67ee60 'String'
|-TypedefDecl 0x55cdad8fe5e8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55cdad8fe5b0 'String *'
|   `-SubstTemplateTypeParmType 0x55cdad74f2c0 'String' sugar
|     |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cdad6509d8 'T'
|     `-RecordType 0x55cdad67eef0 'String'
|       `-CXXRecord 0x55cdad67ee60 'String'
|-TypedefDecl 0x55cdad8fe678 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55cdad8fe640 'const String *'
|   `-QualType 0x55cdad74f2c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55cdad74f2c0 'String' sugar
|       |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad6509d8 'T'
|       `-RecordType 0x55cdad67eef0 'String'
|         `-CXXRecord 0x55cdad67ee60 'String'
|-TypedefDecl 0x55cdad8ff2d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55cdad8ff280 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55cdad8ff260 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55cdad8ff198 'type'
|     `-LValueReferenceType 0x55cdad8ff160 'const String &'
|       `-QualType 0x55cdad8fef01 'const String' const
|         `-SubstTemplateTypeParmType 0x55cdad8fef00 'String' sugar
|           |-TemplateTypeParmType 0x55cdad623410 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55cdad6233b8 'T'
|           `-RecordType 0x55cdad67eef0 'String'
|             `-CXXRecord 0x55cdad67ee60 'String'
|-TypedefDecl 0x55cdad8ff338 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55cdad8fe520 'const String &'
|   `-QualType 0x55cdad74f2c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55cdad74f2c0 'String' sugar
|       |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad6509d8 'T'
|       `-RecordType 0x55cdad67eef0 'String'
|         `-CXXRecord 0x55cdad67ee60 'String'
|-TypedefDecl 0x55cdad8ff390 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad8ff3f8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55cdad8fe5b0 'String *'
|   `-SubstTemplateTypeParmType 0x55cdad74f2c0 'String' sugar
|     |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cdad6509d8 'T'
|     `-RecordType 0x55cdad67eef0 'String'
|       `-CXXRecord 0x55cdad67ee60 'String'
|-TypedefDecl 0x55cdad8ff460 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55cdad8fe640 'const String *'
|   `-QualType 0x55cdad74f2c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55cdad74f2c0 'String' sugar
|       |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad6509d8 'T'
|       `-RecordType 0x55cdad67eef0 'String'
|         `-CXXRecord 0x55cdad67ee60 'String'
|-EnumDecl 0x55cdad8ff4b8 <line:134:5> col:5
| `-EnumConstantDecl 0x55cdad8ff5b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55cdad8ff590 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55cdad6520b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55cdad652090 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55cdad652070 <col:40> 'int' 1
|-CXXConstructorDecl 0x55cdad8ff638 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55cdad8ff8c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55cdad8ff6f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cdad8ff790 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55cdad8ffb58 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55cdad8ffa40 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55cdad8ffe18 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55cdad8ffd00 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55cdad900130 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55cdad900010 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55cdad900440 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55cdad900320 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55cdad900730 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55cdad900578 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cdad9005f0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55cdad900858 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55cdad900908 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad900960 <col:30> Inherited
|-CXXMethodDecl 0x55cdad9009a8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55cdad900a58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad900ab0 <col:30> Inherited
|-CXXMethodDecl 0x55cdad900b78 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55cdad900c28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad900c80 <col:30> Inherited
|-CXXMethodDecl 0x55cdad900cc8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55cdad900d78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad900dd0 <col:30> Inherited
|-CXXMethodDecl 0x55cdad900e18 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55cdad900ec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad900f20 <col:30> Inherited
|-CXXMethodDecl 0x55cdad900f68 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55cdad901018 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad901070 <col:30> Inherited
|-CXXMethodDecl 0x55cdad901098 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cdad901148 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cdad9011f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55cdad9013b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55cdad9012a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cdad901320 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55cdad901508 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55cdad901478 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad9016b8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55cdad9015c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cdad901770 <col:20>
| `-OptimizeNoneAttr 0x55cdad9017c8 <col:30>
|-CXXMethodDecl 0x55cdad9018e8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55cdad9017f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cdad9019a0 <col:20>
| `-OptimizeNoneAttr 0x55cdad9019f8 <col:30>
|-CXXMethodDecl 0x55cdad901ab0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cdad901a20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad901bf8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cdad901b68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad901d28 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55cdad901e28 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55cdad901ef8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55cdad901fc8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55cdad902108 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cdad902078 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad902250 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cdad9021c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad902398 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55cdad902308 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cdad902450 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55cdad902550 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55cdad9024c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cdad902608 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55cdad9026c8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55cdad9027c8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55cdad902948 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55cdad902888 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55cdad903108 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55cdad902a00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55cdad903068 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55cdad902f68 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55cdad9031e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55cdad903338 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55cdad9032a8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55cdad9033f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55cdad903638 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55cdad9034b0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55cdad903528 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55cdad9037c8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55cdad903708 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55cdad9039d8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55cdad903890 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55cdad903908 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55cdad903a98 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55cdad903cf8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55cdad903c00 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55cdad903dc8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55cdad903dc8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad9840c8 prev 0x55cdad834f78 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cdad9841c0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55cdad984250 <col:22, col:28> col:22 public
|-EnumDecl 0x55cdad984278 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55cdad984398 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cdad984378 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55cdad984360 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55cdad984340 <col:14> 'int' 999
| |-EnumConstantDecl 0x55cdad984440 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cdad984420 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55cdad984408 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55cdad9843e8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55cdad9844d0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cdad9844b0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55cdad984490 <col:17> 'int' 0
| |-EnumConstantDecl 0x55cdad984560 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cdad984540 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55cdad984520 <col:13> 'int' 1
| |-EnumConstantDecl 0x55cdad9845f0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cdad9845d0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55cdad9845b0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55cdad984680 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cdad984660 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55cdad984640 <col:13> 'int' 3
| |-EnumConstantDecl 0x55cdad984710 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cdad9846f0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55cdad9846d0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55cdad9847a0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cdad984780 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55cdad984760 <col:14> 'int' 5
| |-EnumConstantDecl 0x55cdad984830 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cdad984810 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55cdad9847f0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55cdad9848c0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55cdad9848a0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55cdad984880 <col:13> 'int' 7
|-VarDecl 0x55cdad984930 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55cdad9849b8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55cdad984a40 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55cdad984ac8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55cdad984b50 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55cdad984bd8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55cdad984c60 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55cdad984ce8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55cdad984d70 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55cdad984df8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55cdad984e80 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55cdad984f80 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55cdad98a278 '_nerrors' 'int'
| | `-IntegerLiteral 0x55cdad98aa08 <line:128:13> 'int' 0
| `-CompoundStmt 0x55cdad98aa78 <col:16, line:129:5>
|-CXXDestructorDecl 0x55cdad985070 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55cdad98aa88 <col:29, line:132:5>
|-CXXMethodDecl 0x55cdad985228 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55cdad985160 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad9852f0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55cdad9853d8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55cdad98aae0 <col:44, line:161:5>
|   `-ReturnStmt 0x55cdad98aad0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55cdad98aab8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad98aa98 <col:9> 'ErrorHandler *' lvalue Var 0x55cdad98a2d8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad985518 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55cdad985488 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cdad9855e0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55cdad98ab40 <col:43, line:173:5>
|   `-ReturnStmt 0x55cdad98ab30 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55cdad98ab18 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad98aaf8 <col:9> 'ErrorHandler *' lvalue Var 0x55cdad98a350 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55cdad985698 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55cdad985718 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55cdad985828 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55cdad985798 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55cdad985978 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55cdad9858e8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55cdad985ad0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55cdad985a38 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55cdad985c28 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55cdad985b90 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55cdad985d80 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55cdad985ce8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55cdad985f90 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cdad985e38 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55cdad985eb8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55cdad986168 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cdad986050 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55cdad9860d0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55cdad986388 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cdad986228 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55cdad9862a8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55cdad986568 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cdad986448 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55cdad9864c8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55cdad986748 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cdad986628 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55cdad9866a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55cdad9868d0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55cdad986808 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55cdad986aa0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55cdad986988 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55cdad986a00 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55cdad98ad98 <col:57, line:234:5>
|   `-ReturnStmt 0x55cdad98ad88 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55cdad98ad70 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55cdad98ad18 <col:9, col:41> 'int'
|         |-MemberExpr 0x55cdad98ace8 <col:9> '<bound member function type>' ->xmessage 0x55cdad9868d0
|         | `-CXXThisExpr 0x55cdad98acd8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55cdad98ad58 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55cdad98ad40 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55cdad98acb8 <col:18, col:40> 'String' (CXXTemporary 0x55cdad98acb8)
|               `-CallExpr 0x55cdad98ac80 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55cdad98ac68 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55cdad98abe0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55cdad988a98 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55cdad98ac00 <col:31> 'const String' lvalue ParmVar 0x55cdad986a00 'str' 'const String &'
|                 `-DeclRefExpr 0x55cdad98ac20 <col:36> 'const String' lvalue ParmVar 0x55cdad986988 'anno' 'const String &'
|-CXXMethodDecl 0x55cdad986d80 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55cdad986b60 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55cdad986be0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55cdad986c58 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55cdad98b028 <col:68, line:243:5>
|   `-ReturnStmt 0x55cdad98b018 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55cdad98b000 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55cdad98afa0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55cdad98af70 <col:9> '<bound member function type>' ->xmessage 0x55cdad986aa0
|         | `-CXXThisExpr 0x55cdad98af60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55cdad98ae38 <col:18> 'const String' lvalue ParmVar 0x55cdad986b60 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55cdad98afe8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55cdad98afd0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55cdad98af40 <col:24, col:40> 'String' (CXXTemporary 0x55cdad98af40)
|               `-CXXMemberCallExpr 0x55cdad98aed8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55cdad98ae68 <col:24> '<bound member function type>' ->vformat 0x55cdad987f60
|                 | `-CXXThisExpr 0x55cdad98ae58 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55cdad98af08 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55cdad98ae98 <col:32> 'const char *' lvalue ParmVar 0x55cdad986be0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55cdad98af20 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55cdad98aeb8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55cdad986c58 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cdad987020 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55cdad986e48 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55cdad986ec0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55cdad986f38 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55cdad98b368 <col:23, line:254:5>
|   `-ReturnStmt 0x55cdad98b358 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55cdad98b340 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55cdad98b2e0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55cdad98b2b0 <col:9> '<bound member function type>' ->xmessage 0x55cdad986aa0
|         | `-CXXThisExpr 0x55cdad98b2a0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55cdad98b328 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55cdad98b310 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55cdad98b260 <col:18, col:65> 'String' (CXXTemporary 0x55cdad98b260)
|         |     `-CallExpr 0x55cdad98b1f8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55cdad98b1e0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55cdad98b0c8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55cdad988a98 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55cdad98b0e8 <col:31> 'const String' lvalue ParmVar 0x55cdad986ec0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55cdad98b240 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55cdad98b228 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55cdad98b1c0 <col:37, col:64> 'String' (CXXTemporary 0x55cdad98b1c0)
|         |             `-CallExpr 0x55cdad98b190 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55cdad98b178 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55cdad98b108 <col:37> 'String (const String &)' lvalue CXXMethod 0x55cdad9890e8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55cdad98b128 <col:56> 'const String' lvalue ParmVar 0x55cdad986e48 'landmark' 'const String &'
|         `-DeclRefExpr 0x55cdad98b280 <col:68> 'const String' lvalue ParmVar 0x55cdad986f38 'str' 'const String &'
|-CXXMethodDecl 0x55cdad9873a0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55cdad9870e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55cdad987160 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55cdad9871e0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55cdad987258 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55cdad98b620 <col:34, line:267:5>
|   `-ReturnStmt 0x55cdad98b610 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55cdad98b5f8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55cdad98b590 <col:9, col:51> 'int'
|         |-MemberExpr 0x55cdad98b560 <col:9> '<bound member function type>' ->xmessage 0x55cdad987020
|         | `-CXXThisExpr 0x55cdad98b550 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55cdad98b408 <col:18> 'const String' lvalue ParmVar 0x55cdad9870e8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55cdad98b428 <col:28> 'const String' lvalue ParmVar 0x55cdad987160 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55cdad98b5e0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55cdad98b5c8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55cdad98b530 <col:34, col:50> 'String' (CXXTemporary 0x55cdad98b530)
|               `-CXXMemberCallExpr 0x55cdad98b4c8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55cdad98b458 <col:34> '<bound member function type>' ->vformat 0x55cdad987f60
|                 | `-CXXThisExpr 0x55cdad98b448 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55cdad98b4f8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55cdad98b488 <col:42> 'const char *' lvalue ParmVar 0x55cdad9871e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55cdad98b510 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55cdad98b4a8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55cdad987258 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cdad9874b0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55cdad98b6a0 <col:25, line:288:5>
|   `-ReturnStmt 0x55cdad98b690 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55cdad98b678 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55cdad98b648 <col:9> 'const int' lvalue ->_nerrors 0x55cdad98a278
|         `-CXXThisExpr 0x55cdad98b638 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55cdad9876c0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55cdad987568 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55cdad9875e8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55cdad9879a8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55cdad987788 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55cdad987808 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55cdad987880 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cdad987b40 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55cdad987a78 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55cdad987d88 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55cdad987c00 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55cdad987c78 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55cdad98b900 <col:58, line:357:5>
|   `-ReturnStmt 0x55cdad98b8f0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55cdad98b8d8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55cdad98b8a8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55cdad98b890 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55cdad98b870 <col:9, col:29> 'String' (CXXTemporary 0x55cdad98b870)
|             `-CallExpr 0x55cdad98b800 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55cdad98b7e8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55cdad98b768 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55cdad9879a8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55cdad98b708 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55cdad98b838 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55cdad98b728 <col:21> 'const char *' lvalue ParmVar 0x55cdad987c00 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55cdad98b850 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55cdad98b748 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55cdad987c78 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cdad987f60 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55cdad987e50 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55cdad987ec8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cdad9880b8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55cdad988028 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55cdad988200 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55cdad988170 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55cdad9884a0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55cdad9882b8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55cdad988338 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55cdad9883b0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55cdad988600 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55cdad988570 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55cdad98ba18 <col:37, line:441:5>
|   `-IfStmt 0x55cdad98ba00 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55cdad98b988 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55cdad98b958 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55cdad98b918 <col:6> 'int' lvalue ParmVar 0x55cdad988570 'level' 'int'
|     | `-ImplicitCastExpr 0x55cdad98b970 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55cdad98b938 <col:15> 'ErrorHandler::Level' EnumConstant 0x55cdad984680 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55cdad98b9e8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55cdad98b9b8 <col:8> 'int' lvalue ->_nerrors 0x55cdad98a278
|         `-CXXThisExpr 0x55cdad98b9a8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55cdad9886c8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55cdad98bab0 <col:26, line:448:5>
|   `-BinaryOperator 0x55cdad98ba90 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55cdad98ba40 <col:2> 'int' lvalue ->_nerrors 0x55cdad98a278
|     | `-CXXThisExpr 0x55cdad98ba30 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55cdad98ba70 <col:13> 'int' 0
|-CXXMethodDecl 0x55cdad988890 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55cdad988780 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55cdad9887f8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55cdad988a98 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55cdad988950 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55cdad9889c8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55cdad988d48 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55cdad988b58 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55cdad988bd8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55cdad988c58 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55cdad988e00 <col:59> 0 0
|-CXXMethodDecl 0x55cdad988f98 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55cdad988e78 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55cdad988ef8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55cdad98c120 <col:70, line:534:5>
|   |-DeclStmt 0x55cdad98bc20 <line:528:2, col:20>
|   | |-VarDecl 0x55cdad98bad8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55cdad98bb40 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55cdad98bb78 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55cdad98bbe0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55cdad98bcf0 <line:529:2, col:23>
|   | `-VarDecl 0x55cdad98bc50 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55cdad98bcd8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55cdad98bcb8 <col:18> 'const char *' lvalue ParmVar 0x55cdad988e78 'begin' 'const char *'
|   |-DoStmt 0x55cdad98c0b8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55cdad98bfe8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55cdad98bfd0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55cdad98bfb0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55cdad98bd08 <col:6> 'const char *' lvalue Var 0x55cdad98bc50 'x' 'const char *'
|   | |     `-CallExpr 0x55cdad98bf00 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55cdad98bee8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55cdad98bea0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55cdad98a750 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55cdad98bf68 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55cdad98bf50 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55cdad98bdc0 <col:20, col:27> 'String' (CXXTemporary 0x55cdad98bdc0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55cdad98bd88 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55cdad98bf80 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55cdad98bde0 <col:30> 'const char *' lvalue Var 0x55cdad98bc50 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55cdad98bf98 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55cdad98be00 <col:33> 'const char *' lvalue ParmVar 0x55cdad988ef8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55cdad98be40 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55cdad98be20 <col:39> 'String' lvalue Var 0x55cdad98bad8 'name' 'String'
|   | |       |-UnaryOperator 0x55cdad98be78 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55cdad98be58 <col:46> 'String' lvalue Var 0x55cdad98bb78 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55cdad98be90 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55cdad98c0a0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55cdad98c088 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55cdad98c068 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55cdad98c038 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|   |         `-ImplicitCastExpr 0x55cdad98c020 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55cdad98c000 <col:11> 'String' lvalue Var 0x55cdad98bad8 'name' 'String'
|   `-ReturnStmt 0x55cdad98c110 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55cdad98c0f8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad98c0d8 <col:9> 'const char *' lvalue Var 0x55cdad98bc50 'x' 'const char *'
|-CXXMethodDecl 0x55cdad9890e8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55cdad989058 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55cdad98c728 <col:55, line:550:5>
|   `-IfStmt 0x55cdad98c700 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55cdad98c360 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55cdad98c348 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55cdad98c330 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55cdad98c310 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55cdad98c2e0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|     | |       `-DeclRefExpr 0x55cdad98c180 <col:6> 'const String' lvalue ParmVar 0x55cdad989058 'x' 'const String &'
|     | `-BinaryOperator 0x55cdad98c2c0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55cdad98c290 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55cdad98c240 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55cdad98c228 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55cdad98c1e0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55cdad69be90 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55cdad98c1a0 <col:11> 'const String' lvalue ParmVar 0x55cdad989058 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55cdad98c1c0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55cdad98c2a8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55cdad98c278 <col:19> 'char' 123
|     |-ReturnStmt 0x55cdad98c3d0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55cdad98c3a0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55cdad98c380 <col:13> 'const String' lvalue ParmVar 0x55cdad989058 'x' 'const String &'
|     `-IfStmt 0x55cdad98c6d8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55cdad98c468 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cdad98c450 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cdad98c430 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cdad98c400 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|       |       `-DeclRefExpr 0x55cdad98c3e0 <col:11> 'const String' lvalue ParmVar 0x55cdad989058 'x' 'const String &'
|       |-ReturnStmt 0x55cdad98c5f0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55cdad98c5d8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55cdad98c5a8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55cdad98c590 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55cdad98c570 <col:13, col:29> 'String' (CXXTemporary 0x55cdad98c570)
|       |         `-CallExpr 0x55cdad98c520 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55cdad98c508 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55cdad98c480 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55cdad988890 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55cdad98c550 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55cdad98c4a0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55cdad98c4c0 <col:28> 'const String' lvalue ParmVar 0x55cdad989058 'x' 'const String &'
|       `-ReturnStmt 0x55cdad98c6c8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55cdad98c6b0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55cdad98c680 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55cdad98c668 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55cdad98c648 <col:13, col:20> 'String' (CXXTemporary 0x55cdad98c648)
|                 `-CXXTemporaryObjectExpr 0x55cdad98c610 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55cdad9892b0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55cdad9891a0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55cdad989218 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cdad98a9f8 <col:71> 'bool' false
|-CXXRecordDecl 0x55cdad989360 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55cdad989658 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55cdad9895f0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55cdad989590 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55cdad989550 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55cdad67eef0 'String'
|       | `-CXXRecord 0x55cdad67ee60 'String'
|       |-BuiltinType 0x55cdad353580 'int'
|       `-DecayedType 0x55cdad835fc0 '__va_list_tag *' sugar
|         |-TypedefType 0x55cdad835f90 'va_list' sugar
|         | |-Typedef 0x55cdad570fb0 'va_list'
|         | `-TypedefType 0x55cdad570f60 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55cdad4a8b88 '__gnuc_va_list'
|         |   `-TypedefType 0x55cdad4a8af0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55cdad394d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55cdad394ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55cdad3542d0 '__va_list_tag'
|         |         `-CXXRecord 0x55cdad354238 '__va_list_tag'
|         `-PointerType 0x55cdad576850 '__va_list_tag *'
|           `-RecordType 0x55cdad3542d0 '__va_list_tag'
|             `-CXXRecord 0x55cdad354238 '__va_list_tag'
|-EnumDecl 0x55cdad9896b0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55cdad9897b0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cdad989d20 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad989790 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55cdad989770 <col:16> 'int' 1
| |-EnumConstantDecl 0x55cdad989840 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cdad989d38 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad989820 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55cdad989800 <col:21> 'int' 2
| |-EnumConstantDecl 0x55cdad9898d0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cdad989d50 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad9898b0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55cdad989890 <col:22> 'int' 4
| |-EnumConstantDecl 0x55cdad989960 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cdad989d68 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad989940 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55cdad989920 <col:17> 'int' 8
| |-EnumConstantDecl 0x55cdad9899f0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cdad989d80 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad9899d0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55cdad9899b0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55cdad989a80 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cdad989d98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad989a60 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55cdad989a40 <col:19> 'int' 32
| |-EnumConstantDecl 0x55cdad989b10 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cdad989db0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad989af0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55cdad989ad0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55cdad989ba0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cdad989dc8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad989b80 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55cdad989b60 <col:14> 'int' 128
| |-EnumConstantDecl 0x55cdad989c30 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cdad989de0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad989c10 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55cdad989bf0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55cdad989cc0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55cdad989df8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad989ca0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55cdad989c80 <col:12> 'int' 1024
|-CXXMethodDecl 0x55cdad98a008 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55cdad989e20 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55cdad989ec0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55cdad98a190 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55cdad98a0c8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55cdad98a238 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55cdad98a278 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55cdad98a2d8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55cdad98a350 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55cdad98a750 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55cdad98a3c8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55cdad98a448 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55cdad98a4c8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55cdad98a540 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55cdad98a5b8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55cdad98a630 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55cdad98a878 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55cdad98a878
| `-ParmVarDecl 0x55cdad98a988 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55cdad98ca88 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55cdad98ca88
  `-ParmVarDecl 0x55cdad98cb98 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad835008 prev 0x55cdad87a148 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cdad835100 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55cdad835190 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55cdad8352c8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55cdad8351c8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55cdad8366f0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55cdad8366d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55cdad836268 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55cdad836780 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55cdad836740 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55cdad8351c8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55cdad8362d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55cdad836800 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55cdad8367c0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55cdad836330 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55cdad836840 <col:54> 'bool' false
| `-CompoundStmt 0x55cdad836948 <col:61, line:38:5>
|   `-BinaryOperator 0x55cdad836928 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55cdad8368c0 <col:9> 'const Element *' lvalue ->_context 0x55cdad836208
|     | `-CXXThisExpr 0x55cdad8368b0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55cdad836910 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55cdad8368f0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55cdad8354d8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad835388 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55cdad835400 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55cdad836728 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55cdad836708 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55cdad836208 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55cdad8369a0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55cdad836960 <col:20> 'const Element *' lvalue ParmVar 0x55cdad835388 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55cdad836268 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55cdad836a20 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55cdad8369e0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55cdad835400 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55cdad8362d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55cdad836aa0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55cdad836a60 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55cdad836330 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55cdad836ae0 <col:73> 'bool' false
| `-CompoundStmt 0x55cdad836b58 <col:80, line:46:5>
|-CXXMethodDecl 0x55cdad835608 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55cdad836bd0 <col:36, line:51:5>
|   `-ReturnStmt 0x55cdad836bc0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55cdad836ba8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55cdad836b78 <col:16> 'const Element *const' lvalue ->_context 0x55cdad836208
|         `-CXXThisExpr 0x55cdad836b68 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55cdad8356f8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55cdad836c50 <col:32, line:57:5>
|   `-ReturnStmt 0x55cdad836c40 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55cdad836c28 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55cdad836bf8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55cdad836268
|         `-CXXThisExpr 0x55cdad836be8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55cdad8357b8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55cdad835940 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55cdad835870 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55cdad835a90 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55cdad835a00 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55cdad835be0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55cdad835b50 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55cdad835de8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55cdad835c98 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55cdad835d10 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55cdad836118 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55cdad835ea8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55cdad835f28 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55cdad835ff0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55cdad8361d0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55cdad836208 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55cdad836268 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55cdad8362d0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55cdad836330 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55cdad836380 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55cdad836380
| `-ParmVarDecl 0x55cdad836498 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55cdad836538 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55cdad836538
| `-ParmVarDecl 0x55cdad836648 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55cdad999b60 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cdad9428d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55cdad942aa8 prev 0x55cdad9428d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55cdad942b38 <col:46, col:52> col:46 public
|-TypedefDecl 0x55cdad942b60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad944730 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55cdad9446e0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55cdad943010 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55cdad942f10 'type'
|     `-TemplateSpecializationType 0x55cdad942ea0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55cdad942d80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55cdad942d60 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55cdad942d40 <col:24> 'unsigned long' 4
|       `-RecordType 0x55cdad942e80 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55cdad942da0 'char_array'
|-TypedefDecl 0x55cdad9447e8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55cdad9447b0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55cdad944790 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55cdad944730 'type'
|     `-ElaboratedType 0x55cdad9446e0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55cdad943010 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55cdad942f10 'type'
|         `-TemplateSpecializationType 0x55cdad942ea0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55cdad942d80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55cdad942d60 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55cdad942d40 <col:24> 'unsigned long' 4
|           `-RecordType 0x55cdad942e80 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55cdad942da0 'char_array'
|-CXXMethodDecl 0x55cdad944968 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55cdad944878 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55cdad944a58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55cdad944b38 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55cdad944e08 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55cdad944d10 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55cdad945048 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55cdad944ec0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cdad944f38 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cdad945218 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55cdad945108 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cdad945180 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cdad945378 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55cdad945448 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55cdad945698 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55cdad945508 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55cdad945580 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cdad9458f8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55cdad945768 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55cdad9457e0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cdad945ab8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55cdad9459c8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cdad945c78 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55cdad945b80 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cdad945d30 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55cdad945de0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55cdad946018 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55cdad945e90 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cdad945f08 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cdad94c6e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55cdad9461c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55cdad94c7b0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55cdad94c800 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55cdad94c850 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cdad9412d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55cdad9414e8 prev 0x55cdad9412d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55cdad942840 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55cdad9427f0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55cdad9427d0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55cdad942680 'type'
|     `-SubstTemplateTypeParmType 0x55cdad9424a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55cdad618d40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad618ce8 'T'
|       `-RecordType 0x55cdad941ff0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55cdad941f08 'sized_array_memory'
|-FieldDecl 0x55cdad94c8a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55cdad94c8f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55cdad94c928 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55cdad941580 'int' sugar
|   |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55cdad6509d8 'T'
|   `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad94c9b8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55cdad94c980 'int &'
|   `-SubstTemplateTypeParmType 0x55cdad941580 'int' sugar
|     |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cdad6509d8 'T'
|     `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad94ca78 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55cdad94ca40 'const int &'
|   `-QualType 0x55cdad941581 'const int' const
|     `-SubstTemplateTypeParmType 0x55cdad941580 'int' sugar
|       |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad6509d8 'T'
|       `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad94cb08 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55cdad94cad0 'int *'
|   `-SubstTemplateTypeParmType 0x55cdad941580 'int' sugar
|     |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cdad6509d8 'T'
|     `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad94cb98 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55cdad94cb60 'const int *'
|   `-QualType 0x55cdad941581 'const int' const
|     `-SubstTemplateTypeParmType 0x55cdad941580 'int' sugar
|       |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad6509d8 'T'
|       `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad94d780 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55cdad94d730 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55cdad94d710 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55cdad94d6a0 'type'
|     `-SubstTemplateTypeParmType 0x55cdad94d460 'int' sugar
|       |-TemplateTypeParmType 0x55cdad623b40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad623af0 'T'
|       `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad94d7e8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55cdad94ca40 'const int &'
|   `-QualType 0x55cdad941581 'const int' const
|     `-SubstTemplateTypeParmType 0x55cdad941580 'int' sugar
|       |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad6509d8 'T'
|       `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad94d840 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad94d8a8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55cdad94cad0 'int *'
|   `-SubstTemplateTypeParmType 0x55cdad941580 'int' sugar
|     |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cdad6509d8 'T'
|     `-BuiltinType 0x55cdad353580 'int'
|-TypedefDecl 0x55cdad94d910 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55cdad94cb60 'const int *'
|   `-QualType 0x55cdad941581 'const int' const
|     `-SubstTemplateTypeParmType 0x55cdad941580 'int' sugar
|       |-TemplateTypeParmType 0x55cdad650a30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cdad6509d8 'T'
|       `-BuiltinType 0x55cdad353580 'int'
|-EnumDecl 0x55cdad94d968 <line:134:5> col:5
| `-EnumConstantDecl 0x55cdad94da60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55cdad94da40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55cdad6520b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55cdad652090 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55cdad652070 <col:40> 'int' 1
|-CXXConstructorDecl 0x55cdad94dae8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55cdad94dd38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55cdad94dba0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cdad94dc40 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55cdad94dff8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55cdad94dee0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55cdad94e2b8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55cdad94e1a0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55cdad94e600 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55cdad94e4e0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55cdad94e910 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55cdad94e7f0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55cdad94ec00 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55cdad94ea48 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cdad94eac0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55cdad94ed28 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55cdad94ee08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad94ee60 <col:30> Inherited
|-CXXMethodDecl 0x55cdad94eea8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55cdad94ef58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad94efb0 <col:30> Inherited
|-CXXMethodDecl 0x55cdad94f078 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55cdad94f128 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad94f180 <col:30> Inherited
|-CXXMethodDecl 0x55cdad94f1c8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55cdad94f278 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad94f2d0 <col:30> Inherited
|-CXXMethodDecl 0x55cdad94f318 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55cdad94f3c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad94f420 <col:30> Inherited
|-CXXMethodDecl 0x55cdad94f468 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55cdad94f518 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cdad94f570 <col:30> Inherited
|-CXXMethodDecl 0x55cdad94f598 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cdad94f648 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cdad94f6f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55cdad94f8b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55cdad94f7a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cdad94f820 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55cdad94fa08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55cdad94f978 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad94fbb8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55cdad94fac0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cdad94fc70 <col:20>
| `-OptimizeNoneAttr 0x55cdad94fcc8 <col:30>
|-CXXMethodDecl 0x55cdad94fde8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55cdad94fcf0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cdad94fea0 <col:20>
| `-OptimizeNoneAttr 0x55cdad94fef8 <col:30>
|-CXXMethodDecl 0x55cdad94ffb0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cdad94ff20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad9500f8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cdad950068 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad950228 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55cdad950358 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55cdad950428 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55cdad9504f8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55cdad950638 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cdad9505a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad950780 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cdad9506f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cdad9508c8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55cdad950838 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cdad950980 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55cdad950a80 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55cdad9509f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cdad950b38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55cdad950bf8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55cdad950cf8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55cdad950e78 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55cdad950db8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55cdad951638 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55cdad950f30 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55cdad951598 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55cdad951498 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55cdad951718 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55cdad951868 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55cdad9517d8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55cdad951920 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55cdad951b68 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55cdad9519e0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55cdad951a58 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55cdad951d28 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55cdad951c38 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55cdad951f78 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55cdad951df0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55cdad951e68 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55cdad952038 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55cdad952298 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55cdad9521a0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55cdad952368 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad93f448 prev 0x55cdad83bb68 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cdad93f540 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55cdad93f630 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55cdad9640f0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55cdad93f720 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55cdad964100 <col:25, line:830:9>
|-CXXMethodDecl 0x55cdad93f820 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55cdad93f8d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55cdad93f978 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55cdad93f978
| `-ParmVarDecl 0x55cdad93fa88 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55cdad940248 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55cdad940248
  `-ParmVarDecl 0x55cdad940358 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad83b978 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55cdad83bad8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55cdad83bb68 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55cdad91fe70 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55cdad91ff78 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55cdad91fea8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55cdad953928 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55cdad953908 <col:31> 'int' 0
|-CXXConstructorDecl 0x55cdad920298 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad920110 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55cdad920188 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55cdad953960 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55cdad953940 <col:59> 'int' 0
|-CXXConstructorDecl 0x55cdad920470 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad920360 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55cdad9203d8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55cdad953998 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55cdad953978 <col:55> 'int' 0
|-CXXConstructorDecl 0x55cdad920828 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55cdad920610 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55cdad920688 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55cdad920700 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55cdad9539d0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55cdad9539b0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55cdad9209e8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55cdad920928 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55cdad920ae0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55cdad920cc8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55cdad920bd0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55cdad920db8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55cdad953d80 <col:24, line:291:5>
|   `-ReturnStmt 0x55cdad953d70 <line:290:9, col:79>
|     `-BinaryOperator 0x55cdad953d50 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55cdad953c28 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55cdad953b80 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55cdad953b60 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55cdad953a58 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55cdad953a40 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55cdad953a28 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55cdad9539f8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55cdad941270
|       | |   |       `-CXXThisExpr 0x55cdad9539e8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55cdad953b48 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55cdad953b30 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55cdad953af8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55cdad953ac8 <col:28, col:35> '<bound member function type>' ->size 0x55cdad901098
|       | |           `-ImplicitCastExpr 0x55cdad953b18 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55cdad953ab0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55cdad953a80 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55cdad941270
|       | |                 `-CXXThisExpr 0x55cdad953a70 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55cdad953c10 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55cdad953bf8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55cdad953be0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55cdad953bb0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55cdad9524b0
|       |         `-CXXThisExpr 0x55cdad953ba0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55cdad953d30 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55cdad953d18 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55cdad953d00 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55cdad953cc0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55cdad953ca8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55cdad953c58 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55cdad952560
|         |     |   `-CXXThisExpr 0x55cdad953c48 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55cdad953c88 <col:73> 'int' 0
|         `-IntegerLiteral 0x55cdad953ce0 <col:79> 'int' 0
|-CXXMethodDecl 0x55cdad920e78 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55cdad953f58 <col:32, line:296:5>
|   `-ReturnStmt 0x55cdad953f48 <line:295:9, col:49>
|     `-BinaryOperator 0x55cdad953f28 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55cdad953e08 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55cdad953df0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55cdad953dd8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55cdad953da8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55cdad9524b0
|       |       `-CXXThisExpr 0x55cdad953d98 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55cdad953f08 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55cdad953ef0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55cdad953ed8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55cdad953e98 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55cdad953e80 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55cdad953e30 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55cdad952560
|         |     |   `-CXXThisExpr 0x55cdad953e20 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55cdad953e60 <col:43> 'int' 0
|         `-IntegerLiteral 0x55cdad953eb8 <col:49> 'int' 0
|-CXXMethodDecl 0x55cdad920f68 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55cdad954168 <col:19, line:306:5>
|   |-IfStmt 0x55cdad954088 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55cdad953fc8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55cdad953fb0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55cdad953f80 <col:13> 'Vector<String> *' lvalue ->_conf 0x55cdad941270
|   | |     `-CXXThisExpr 0x55cdad953f70 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55cdad954068 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55cdad954038 <col:13, col:20> '<bound member function type>' ->clear 0x55cdad903a98
|   |     `-ImplicitCastExpr 0x55cdad954020 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55cdad953ff0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55cdad941270
|   |         `-CXXThisExpr 0x55cdad953fe0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55cdad954110 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55cdad9540e0 <col:9, col:16> '<bound member function type>' .clear 0x55cdad952038
|   |   `-MemberExpr 0x55cdad9540b0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55cdad952450
|   |     `-CXXThisExpr 0x55cdad9540a0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55cdad954158 <line:305:9, col:17>
|     `-UnaryOperator 0x55cdad954140 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cdad954130 <col:17> 'Args *' this
|-CXXMethodDecl 0x55cdad9211e8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55cdad9210f0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55cdad921368 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55cdad9212a0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55cdad9216e8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55cdad921410 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55cdad921648 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55cdad9214b8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55cdad921530 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55cdad954488 <col:67, line:327:5>
|     |-WhileStmt 0x55cdad954438 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55cdad954250 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55cdad9541d0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55cdad872618 0x55cdad6bbbf8 0x55cdad6bb8d0 0x55cdad6ac0a0 0x55cdad6abd50 0x55cdad6ab640 0x55cdad67dfb0 0x55cdad60b480
|     | | |-DeclRefExpr 0x55cdad954190 <col:16> 'Iter' lvalue ParmVar 0x55cdad9214b8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55cdad9541b0 <col:25> 'Iter' lvalue ParmVar 0x55cdad921530 'end' 'Iter'
|     | `-CompoundStmt 0x55cdad954418 <col:30, line:325:9>
|     |   |-CallExpr 0x55cdad9543b8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55cdad954298 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55cdad954388 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55cdad954318 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|     |   |   `-DeclRefExpr 0x55cdad9542f8 <col:24> 'Iter' lvalue ParmVar 0x55cdad9214b8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55cdad954400 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55cdad9543e0 <col:15> 'Iter' lvalue ParmVar 0x55cdad9214b8 'begin' 'Iter'
|     `-ReturnStmt 0x55cdad954478 <line:326:9, col:17>
|       `-UnaryOperator 0x55cdad954460 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad954450 <col:17> 'Args *' this
|-CXXMethodDecl 0x55cdad9217f0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55cdad921760 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55cdad921938 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55cdad9218a8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55cdad921a00 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55cdad954568 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55cdad954508 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55cdad9544b8 <col:9> '<bound member function type>' ->reset_from 0x55cdad9528d8
|   | | `-CXXThisExpr 0x55cdad9544a8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55cdad9544e8 <col:20> 'int' 0
|   `-ReturnStmt 0x55cdad954558 <line:352:9, col:17>
|     `-UnaryOperator 0x55cdad954540 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cdad954530 <col:17> 'Args *' this
|-VarDecl 0x55cdad921ab8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55cdad921b20 <col:38> 'int' 1
|-VarDecl 0x55cdad921bb0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55cdad921c18 <col:39> 'int' 2
|-VarDecl 0x55cdad921ca8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55cdad921d10 <col:39> 'int' 4
|-VarDecl 0x55cdad921da0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55cdad921e08 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55cdad922188 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55cdad921e80 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cdad9220e8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55cdad921f30 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad921fd8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55cdad955fe8 <col:43, line:371:5>
|     `-ReturnStmt 0x55cdad955fd8 <line:370:9, col:34>
|       `-CallExpr 0x55cdad955fa0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad954598 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad954618 <col:21> 'const char *' lvalue ParmVar 0x55cdad921f30 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad954638 <col:30> 'int' 0
|         `-DeclRefExpr 0x55cdad955f80 <col:33> 'T' lvalue ParmVar 0x55cdad921fd8 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad9224b8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55cdad9221f0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cdad922418 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55cdad9222a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad922348 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55cdad956138 <col:45, line:375:5>
|     `-ReturnStmt 0x55cdad956128 <line:374:9, col:42>
|       `-CallExpr 0x55cdad9560f0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad956010 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad956090 <col:21> 'const char *' lvalue ParmVar 0x55cdad9222a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad9560b0 <col:30> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55cdad9560d0 <col:41> 'T' lvalue ParmVar 0x55cdad922348 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad9227e8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55cdad922520 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cdad922748 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55cdad9225d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad922678 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55cdad956288 <col:45, line:379:5>
|     `-ReturnStmt 0x55cdad956278 <line:378:9, col:43>
|       `-CallExpr 0x55cdad956240 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad956160 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad9561e0 <col:21> 'const char *' lvalue ParmVar 0x55cdad9225d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad956200 <col:30> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int'
|         `-DeclRefExpr 0x55cdad956220 <col:42> 'T' lvalue ParmVar 0x55cdad922678 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad922b18 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55cdad922850 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cdad922a78 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55cdad922900 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad9229a8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55cdad956488 <col:46, line:383:5>
|     `-ReturnStmt 0x55cdad956478 <line:382:9, col:55>
|       `-CallExpr 0x55cdad956440 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad9562b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad956330 <col:21> 'const char *' lvalue ParmVar 0x55cdad922900 'keyword' 'const char *'
|         |-BinaryOperator 0x55cdad956400 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55cdad9563b0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55cdad956390 <col:30> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55cdad9563e8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55cdad9563c8 <col:42> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55cdad956420 <col:54> 'T' lvalue ParmVar 0x55cdad9229a8 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad922f18 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55cdad922b80 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cdad922e78 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55cdad922c30 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad922cb0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad922d58 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55cdad9565c8 <col:54, line:388:5>
|     |-CallExpr 0x55cdad956550 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cdad9564a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55cdad9564e0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55cdad9564f0 <col:30> 'const char *' lvalue ParmVar 0x55cdad922c30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cdad956510 <col:39> 'int' lvalue ParmVar 0x55cdad922cb0 'flags' 'int'
|     | `-DeclRefExpr 0x55cdad956530 <col:46> 'T' lvalue ParmVar 0x55cdad922d58 'x' 'T &'
|     `-ReturnStmt 0x55cdad9565b8 <line:387:9, col:17>
|       `-UnaryOperator 0x55cdad9565a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad956590 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad9233c8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55cdad922f88 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cdad923008 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cdad923328 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55cdad9230c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad923168 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55cdad923208 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cdad956738 <col:74, line:403:5>
|     `-ReturnStmt 0x55cdad956728 <line:402:9, col:56>
|       `-CallExpr 0x55cdad9566e8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad9565f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad956668 <col:28> 'const char *' lvalue ParmVar 0x55cdad9230c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad956688 <col:37> 'int' 0
|         |-DeclRefExpr 0x55cdad9566a8 <col:40> 'T' lvalue ParmVar 0x55cdad923168 'x' 'T &'
|         `-DeclRefExpr 0x55cdad9566c8 <col:43> 'const V' lvalue ParmVar 0x55cdad923208 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55cdad923838 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55cdad923438 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cdad9234b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cdad923798 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55cdad923578 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad923618 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55cdad9236b8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cdad9568a0 <col:76, line:407:5>
|     `-ReturnStmt 0x55cdad956890 <line:406:9, col:65>
|       `-CallExpr 0x55cdad956850 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad956760 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad9567d0 <col:28> 'const char *' lvalue ParmVar 0x55cdad923578 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad9567f0 <col:37> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int'
|         |-DeclRefExpr 0x55cdad956810 <col:49> 'T' lvalue ParmVar 0x55cdad923618 'x' 'T &'
|         `-DeclRefExpr 0x55cdad956830 <col:52> 'const V' lvalue ParmVar 0x55cdad9236b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55cdad923d88 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55cdad9238a8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cdad923928 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cdad923ce8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55cdad9239e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad923a68 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad923b08 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55cdad923ba8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cdad956a08 <col:85, line:412:5>
|     |-CallExpr 0x55cdad956988 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cdad9568b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55cdad9568f8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55cdad956908 <col:37> 'const char *' lvalue ParmVar 0x55cdad9239e8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cdad956928 <col:46> 'int' lvalue ParmVar 0x55cdad923a68 'flags' 'int'
|     | |-DeclRefExpr 0x55cdad956948 <col:53> 'T' lvalue ParmVar 0x55cdad923b08 'x' 'T &'
|     | `-DeclRefExpr 0x55cdad956968 <col:56> 'const V' lvalue ParmVar 0x55cdad923ba8 'default_value' 'const V &'
|     `-ReturnStmt 0x55cdad9569f8 <line:411:9, col:17>
|       `-UnaryOperator 0x55cdad9569e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad9569d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad924218 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55cdad923e00 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad923e78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad924178 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cdad923f38 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad923fb0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad924058 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55cdad956b88 <col:53, line:425:5>
|     `-ReturnStmt 0x55cdad956b78 <line:424:9, col:42>
|       `-CallExpr 0x55cdad956b38 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad956a38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad956ab8 <col:21> 'const char *' lvalue ParmVar 0x55cdad923f38 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad956ad8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55cdad956af8 <col:33> 'P' lvalue ParmVar 0x55cdad923fb0 'parser' 'P'
|         `-DeclRefExpr 0x55cdad956b18 <col:41> 'T' lvalue ParmVar 0x55cdad924058 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad924668 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55cdad924288 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad924308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad9245c8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cdad9243c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad924440 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad9244e8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55cdad956d00 <col:55, line:429:5>
|     `-ReturnStmt 0x55cdad956cf0 <line:428:9, col:50>
|       `-CallExpr 0x55cdad956cb0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad956bb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad956c30 <col:21> 'const char *' lvalue ParmVar 0x55cdad9243c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad956c50 <col:30> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55cdad956c70 <col:41> 'P' lvalue ParmVar 0x55cdad924440 'parser' 'P'
|         `-DeclRefExpr 0x55cdad956c90 <col:49> 'T' lvalue ParmVar 0x55cdad9244e8 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad924ab8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55cdad9246d8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad924758 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad924a18 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cdad924818 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad924890 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad924938 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55cdad956e78 <col:55, line:433:5>
|     `-ReturnStmt 0x55cdad956e68 <line:432:9, col:51>
|       `-CallExpr 0x55cdad956e28 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad956d28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad956da8 <col:21> 'const char *' lvalue ParmVar 0x55cdad924818 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad956dc8 <col:30> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int'
|         |-DeclRefExpr 0x55cdad956de8 <col:42> 'P' lvalue ParmVar 0x55cdad924890 'parser' 'P'
|         `-DeclRefExpr 0x55cdad956e08 <col:50> 'T' lvalue ParmVar 0x55cdad924938 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad924f08 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55cdad924b28 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad924ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55cdad924e68 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55cdad924c68 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55cdad924ce0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55cdad924d88 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55cdad9570a0 <col:56, line:437:5>
| |   `-ReturnStmt 0x55cdad957090 <line:436:9, col:63>
| |     `-CallExpr 0x55cdad957050 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55cdad956ea0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55cdad956f20 <col:21> 'const char *' lvalue ParmVar 0x55cdad924c68 'keyword' 'const char *'
| |       |-BinaryOperator 0x55cdad956ff0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55cdad956fa0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55cdad956f80 <col:30> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55cdad956fd8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55cdad956fb8 <col:42> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55cdad957010 <col:54> 'P' lvalue ParmVar 0x55cdad924ce0 'parser' 'P'
| |       `-DeclRefExpr 0x55cdad957030 <col:62> 'T' lvalue ParmVar 0x55cdad924d88 'x' 'T &'
| `-CXXMethodDecl 0x55cdad99a618 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, AnyArg, String &)'
|   |-TemplateArgument type 'AnyArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55cdad99a380 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55cdad99a428 <col:40, col:42> col:42 parser 'AnyArg':'AnyArg'
|   `-ParmVarDecl 0x55cdad99a4f8 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x55cdad925438 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55cdad924f78 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad924ff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad925398 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cdad9250b8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad925138 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad9251b0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad925258 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55cdad957208 <col:64, line:442:5>
|     |-CallExpr 0x55cdad957188 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cdad9570b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55cdad9570f8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55cdad957108 <col:30> 'const char *' lvalue ParmVar 0x55cdad9250b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cdad957128 <col:39> 'int' lvalue ParmVar 0x55cdad925138 'flags' 'int'
|     | |-DeclRefExpr 0x55cdad957148 <col:46> 'P' lvalue ParmVar 0x55cdad9251b0 'parser' 'P'
|     | `-DeclRefExpr 0x55cdad957168 <col:54> 'T' lvalue ParmVar 0x55cdad925258 'x' 'T &'
|     `-ReturnStmt 0x55cdad9571f8 <line:441:9, col:17>
|       `-UnaryOperator 0x55cdad9571e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad9571d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad925a38 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55cdad9254b0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad925528 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55cdad9255a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55cdad925998 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55cdad925670 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad9256e8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad925788 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55cdad925858 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cdad9573a0 <col:84, line:458:5>
|     `-ReturnStmt 0x55cdad957390 <line:457:9, col:64>
|       `-CallExpr 0x55cdad957348 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad957238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad9572a8 <col:28> 'const char *' lvalue ParmVar 0x55cdad925670 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad9572c8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55cdad9572e8 <col:40> 'P' lvalue ParmVar 0x55cdad9256e8 'parser' 'P'
|         |-DeclRefExpr 0x55cdad957308 <col:48> 'T' lvalue ParmVar 0x55cdad925788 'x' 'T &'
|         `-DeclRefExpr 0x55cdad957328 <col:51> 'const V' lvalue ParmVar 0x55cdad925858 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55cdad925fb8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55cdad925ab0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad925b28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55cdad925ba8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55cdad925f18 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55cdad925c70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad925ce8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad925d88 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55cdad925e28 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cdad957530 <col:86, line:462:5>
|     `-ReturnStmt 0x55cdad957520 <line:461:9, col:73>
|       `-CallExpr 0x55cdad9574d8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad9573c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad957438 <col:28> 'const char *' lvalue ParmVar 0x55cdad925c70 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad957458 <col:37> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int'
|         |-DeclRefExpr 0x55cdad957478 <col:49> 'P' lvalue ParmVar 0x55cdad925ce8 'parser' 'P'
|         |-DeclRefExpr 0x55cdad957498 <col:57> 'T' lvalue ParmVar 0x55cdad925d88 'x' 'T &'
|         `-DeclRefExpr 0x55cdad9574b8 <col:60> 'const V' lvalue ParmVar 0x55cdad925e28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55cdad926618 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55cdad926030 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad9260a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55cdad926128 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55cdad926578 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55cdad9261f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad926270 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad9262e8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad926388 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55cdad926428 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cdad9576c0 <col:95, line:467:5>
|     |-CallExpr 0x55cdad957638 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cdad957548 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55cdad957588 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55cdad957598 <col:37> 'const char *' lvalue ParmVar 0x55cdad9261f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cdad9575b8 <col:46> 'int' lvalue ParmVar 0x55cdad926270 'flags' 'int'
|     | |-DeclRefExpr 0x55cdad9575d8 <col:53> 'P' lvalue ParmVar 0x55cdad9262e8 'parser' 'P'
|     | |-DeclRefExpr 0x55cdad9575f8 <col:61> 'T' lvalue ParmVar 0x55cdad926388 'x' 'T &'
|     | `-DeclRefExpr 0x55cdad957618 <col:64> 'const V' lvalue ParmVar 0x55cdad926428 'default_value' 'const V &'
|     `-ReturnStmt 0x55cdad9576b0 <line:466:9, col:17>
|       `-UnaryOperator 0x55cdad957698 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad957688 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad926bf8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55cdad926698 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad926718 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cdad926798 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cdad926b58 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cdad926860 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad9268d8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad926978 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cdad926a18 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cdad957868 <col:63, line:481:5>
|     `-ReturnStmt 0x55cdad957858 <line:480:9, col:47>
|       `-CallExpr 0x55cdad957810 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad9576f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad957770 <col:21> 'const char *' lvalue ParmVar 0x55cdad926860 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad957790 <col:30> 'int' 0
|         |-DeclRefExpr 0x55cdad9577b0 <col:33> 'P' lvalue ParmVar 0x55cdad9268d8 'parser' 'P'
|         |-DeclRefExpr 0x55cdad9577d0 <col:41> 'T1' lvalue ParmVar 0x55cdad926978 'x1' 'T1 &'
|         `-DeclRefExpr 0x55cdad9577f0 <col:45> 'T2' lvalue ParmVar 0x55cdad926a18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55cdad927178 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55cdad926c70 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad926ce8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cdad926d68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cdad9270d8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cdad926e30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad926ea8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad926f48 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cdad926fe8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cdad957a08 <col:65, line:485:5>
|     `-ReturnStmt 0x55cdad9579f8 <line:484:9, col:55>
|       `-CallExpr 0x55cdad9579b0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad957890 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad957910 <col:21> 'const char *' lvalue ParmVar 0x55cdad926e30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad957930 <col:30> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55cdad957950 <col:41> 'P' lvalue ParmVar 0x55cdad926ea8 'parser' 'P'
|         |-DeclRefExpr 0x55cdad957970 <col:49> 'T1' lvalue ParmVar 0x55cdad926f48 'x1' 'T1 &'
|         `-DeclRefExpr 0x55cdad957990 <col:53> 'T2' lvalue ParmVar 0x55cdad926fe8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55cdad9276f8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55cdad9271f0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad927268 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cdad9272e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cdad927658 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cdad9273b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad927428 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad9274c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cdad927568 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cdad957ba8 <col:65, line:489:5>
|     `-ReturnStmt 0x55cdad957b98 <line:488:9, col:56>
|       `-CallExpr 0x55cdad957b50 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad957a30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad957ab0 <col:21> 'const char *' lvalue ParmVar 0x55cdad9273b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad957ad0 <col:30> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int'
|         |-DeclRefExpr 0x55cdad957af0 <col:42> 'P' lvalue ParmVar 0x55cdad927428 'parser' 'P'
|         |-DeclRefExpr 0x55cdad957b10 <col:50> 'T1' lvalue ParmVar 0x55cdad9274c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55cdad957b30 <col:54> 'T2' lvalue ParmVar 0x55cdad927568 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55cdad927c78 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55cdad927770 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad9277e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cdad927868 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cdad927bd8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cdad927930 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad9279a8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad927a48 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cdad927ae8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cdad957df8 <col:66, line:493:5>
|     `-ReturnStmt 0x55cdad957de8 <line:492:9, col:68>
|       `-CallExpr 0x55cdad957da0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad957bd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad957c50 <col:21> 'const char *' lvalue ParmVar 0x55cdad927930 'keyword' 'const char *'
|         |-BinaryOperator 0x55cdad957d20 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55cdad957cd0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55cdad957cb0 <col:30> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55cdad957d08 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55cdad957ce8 <col:42> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55cdad957d40 <col:54> 'P' lvalue ParmVar 0x55cdad9279a8 'parser' 'P'
|         |-DeclRefExpr 0x55cdad957d60 <col:62> 'T1' lvalue ParmVar 0x55cdad927a48 'x1' 'T1 &'
|         `-DeclRefExpr 0x55cdad957d80 <col:66> 'T2' lvalue ParmVar 0x55cdad927ae8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55cdad92dd78 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55cdad927cf0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad927d68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cdad927de8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cdad92dcd8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cdad92d950 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92d9d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad92da48 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad92dae8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cdad92db88 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cdad957f88 <col:74, line:498:5>
|     |-CallExpr 0x55cdad957f00 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cdad957e10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55cdad957e50 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55cdad957e60 <col:30> 'const char *' lvalue ParmVar 0x55cdad92d950 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cdad957e80 <col:39> 'int' lvalue ParmVar 0x55cdad92d9d0 'flags' 'int'
|     | |-DeclRefExpr 0x55cdad957ea0 <col:46> 'P' lvalue ParmVar 0x55cdad92da48 'parser' 'P'
|     | |-DeclRefExpr 0x55cdad957ec0 <col:54> 'T1' lvalue ParmVar 0x55cdad92dae8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55cdad957ee0 <col:58> 'T2' lvalue ParmVar 0x55cdad92db88 'x2' 'T2 &'
|     `-ReturnStmt 0x55cdad957f78 <line:497:9, col:17>
|       `-UnaryOperator 0x55cdad957f60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad957f50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad92e0d8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55cdad92ddf8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cdad92e038 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cdad92deb0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92df28 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55cdad9580d0 <col:52, line:509:5>
|     `-ReturnStmt 0x55cdad9580c0 <line:508:9, col:44>
|       `-CallExpr 0x55cdad958088 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad957fb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad958028 <col:26> 'const char *' lvalue ParmVar 0x55cdad92deb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad958048 <col:35> 'int' 0
|         `-DeclRefExpr 0x55cdad958068 <col:38> 'P' lvalue ParmVar 0x55cdad92df28 'parser' 'P'
|-FunctionTemplateDecl 0x55cdad92e3d8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55cdad92e140 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cdad92e338 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cdad92e1f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92e268 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55cdad958210 <col:54, line:513:5>
|     `-ReturnStmt 0x55cdad958200 <line:512:9, col:52>
|       `-CallExpr 0x55cdad9581c8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad9580f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad958168 <col:26> 'const char *' lvalue ParmVar 0x55cdad92e1f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad958188 <col:35> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55cdad9581a8 <col:46> 'P' lvalue ParmVar 0x55cdad92e268 'parser' 'P'
|-FunctionTemplateDecl 0x55cdad92e6d8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55cdad92e440 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cdad92e638 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cdad92e4f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92e568 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55cdad958350 <col:54, line:517:5>
|     `-ReturnStmt 0x55cdad958340 <line:516:9, col:53>
|       `-CallExpr 0x55cdad958308 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad958238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad9582a8 <col:26> 'const char *' lvalue ParmVar 0x55cdad92e4f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad9582c8 <col:35> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int'
|         `-DeclRefExpr 0x55cdad9582e8 <col:47> 'P' lvalue ParmVar 0x55cdad92e568 'parser' 'P'
|-FunctionTemplateDecl 0x55cdad92e9d8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55cdad92e740 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cdad92e938 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cdad92e7f0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92e868 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55cdad958540 <col:55, line:521:5>
|     `-ReturnStmt 0x55cdad958530 <line:520:9, col:65>
|       `-CallExpr 0x55cdad9584f8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad958378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad9583e8 <col:26> 'const char *' lvalue ParmVar 0x55cdad92e7f0 'keyword' 'const char *'
|         |-BinaryOperator 0x55cdad9584b8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55cdad958468 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55cdad958448 <col:35> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55cdad9584a0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55cdad958480 <col:47> 'const int' lvalue Var 0x55cdad921bb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55cdad9584d8 <col:59> 'P' lvalue ParmVar 0x55cdad92e868 'parser' 'P'
|-FunctionTemplateDecl 0x55cdad92eda8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55cdad92ea40 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cdad92ed08 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55cdad92eaf0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92eb70 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad92ebe8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55cdad958680 <col:63, line:526:5>
|     |-CallExpr 0x55cdad958608 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cdad958558 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55cdad958598 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55cdad9585a8 <col:35> 'const char *' lvalue ParmVar 0x55cdad92eaf0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cdad9585c8 <col:44> 'int' lvalue ParmVar 0x55cdad92eb70 'flags' 'int'
|     | `-DeclRefExpr 0x55cdad9585e8 <col:51> 'P' lvalue ParmVar 0x55cdad92ebe8 'parser' 'P'
|     `-ReturnStmt 0x55cdad958670 <line:525:9, col:17>
|       `-UnaryOperator 0x55cdad958658 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad958648 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad92f1f8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55cdad92ee18 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad92ee98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad92f158 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cdad92ef58 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92efd0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad92f078 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55cdad9587d8 <col:58, line:541:5>
|     `-ReturnStmt 0x55cdad9587c8 <line:540:9, col:39>
|       `-CallExpr 0x55cdad958790 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad9586b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad958730 <col:21> 'const char *' lvalue ParmVar 0x55cdad92ef58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad958750 <col:30> 'P' lvalue ParmVar 0x55cdad92efd0 'parser' 'P'
|         `-DeclRefExpr 0x55cdad958770 <col:38> 'T' lvalue ParmVar 0x55cdad92f078 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad92f648 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55cdad92f268 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad92f2e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad92f5a8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cdad92f3a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92f420 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad92f4c8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55cdad958910 <col:60, line:545:5>
|     `-ReturnStmt 0x55cdad958900 <line:544:9, col:41>
|       `-CallExpr 0x55cdad9588c8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad958800 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad958868 <col:23> 'const char *' lvalue ParmVar 0x55cdad92f3a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad958888 <col:32> 'P' lvalue ParmVar 0x55cdad92f420 'parser' 'P'
|         `-DeclRefExpr 0x55cdad9588a8 <col:40> 'T' lvalue ParmVar 0x55cdad92f4c8 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad92fa98 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55cdad92f6b8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad92f738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad92f9f8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cdad92f7f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92f870 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad92f918 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55cdad958a48 <col:60, line:549:5>
|     `-ReturnStmt 0x55cdad958a38 <line:548:9, col:41>
|       `-CallExpr 0x55cdad958a00 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad958938 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad9589a0 <col:23> 'const char *' lvalue ParmVar 0x55cdad92f7f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad9589c0 <col:32> 'P' lvalue ParmVar 0x55cdad92f870 'parser' 'P'
|         `-DeclRefExpr 0x55cdad9589e0 <col:40> 'T' lvalue ParmVar 0x55cdad92f918 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad92fee8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55cdad92fb08 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad92fb88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad92fe48 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cdad92fc48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad92fcc0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad92fd68 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55cdad958b80 <col:61, line:553:5>
|     `-ReturnStmt 0x55cdad958b70 <line:552:9, col:42>
|       `-CallExpr 0x55cdad958b38 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad958a70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad958ad8 <col:24> 'const char *' lvalue ParmVar 0x55cdad92fc48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad958af8 <col:33> 'P' lvalue ParmVar 0x55cdad92fcc0 'parser' 'P'
|         `-DeclRefExpr 0x55cdad958b18 <col:41> 'T' lvalue ParmVar 0x55cdad92fd68 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad9303c8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55cdad92ff58 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad92ffd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad930328 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cdad930098 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad930118 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad930190 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad930238 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55cdad958cf8 <col:69, line:557:5>
|     `-ReturnStmt 0x55cdad958ce8 <line:556:9, col:46>
|       `-CallExpr 0x55cdad958ca8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad958ba8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad958c28 <col:21> 'const char *' lvalue ParmVar 0x55cdad930098 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad958c48 <col:30> 'int' lvalue ParmVar 0x55cdad930118 'flags' 'int'
|         |-DeclRefExpr 0x55cdad958c68 <col:37> 'P' lvalue ParmVar 0x55cdad930190 'parser' 'P'
|         `-DeclRefExpr 0x55cdad958c88 <col:45> 'T' lvalue ParmVar 0x55cdad930238 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad9306d8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55cdad930440 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cdad930638 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cdad9304f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad930568 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55cdad958e38 <col:56, line:571:5>
|     `-ReturnStmt 0x55cdad958e28 <line:570:9, col:48>
|       `-CallExpr 0x55cdad958df0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad958d20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad958d90 <col:30> 'const char *' lvalue ParmVar 0x55cdad9304f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad958db0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55cdad958dd0 <col:42> 'P' lvalue ParmVar 0x55cdad930568 'parser' 'P'
|-FunctionTemplateDecl 0x55cdad930a68 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55cdad930740 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cdad9309c8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55cdad9307f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad930870 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad9308e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55cdad959008 <col:67, line:576:5>
|     |-CallExpr 0x55cdad958f90 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cdad958e50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55cdad958e90 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55cdad958ea0 <col:39> 'const char *' lvalue ParmVar 0x55cdad9307f0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55cdad958f50 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55cdad958f00 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55cdad958ec0 <col:48> 'int' lvalue ParmVar 0x55cdad930870 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55cdad958f38 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55cdad958f18 <col:56> 'const int' lvalue Var 0x55cdad921da0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55cdad958f70 <col:68> 'P' lvalue ParmVar 0x55cdad9308e8 'parser' 'P'
|     `-ReturnStmt 0x55cdad958ff8 <line:575:9, col:17>
|       `-UnaryOperator 0x55cdad958fe0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad958fd0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad930eb8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55cdad930ad8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad930b58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad930e18 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cdad930c18 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad930c90 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad930d38 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55cdad959178 <col:62, line:592:5>
|     `-ReturnStmt 0x55cdad959168 <line:591:9, col:51>
|       `-CallExpr 0x55cdad959128 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad959038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad9590a8 <col:30> 'const char *' lvalue ParmVar 0x55cdad930c18 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad9590c8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55cdad9590e8 <col:42> 'P' lvalue ParmVar 0x55cdad930c90 'parser' 'P'
|         `-DeclRefExpr 0x55cdad959108 <col:50> 'T' lvalue ParmVar 0x55cdad930d38 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad931398 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55cdad930f28 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad930fa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad9312f8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cdad931068 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad9310e8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad931160 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad931208 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55cdad959370 <col:73, line:597:5>
|     |-CallExpr 0x55cdad9592f0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cdad959190 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55cdad9591d0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55cdad9591e0 <col:39> 'const char *' lvalue ParmVar 0x55cdad931068 'keyword' 'const char *'
|     | |-BinaryOperator 0x55cdad959290 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55cdad959240 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55cdad959200 <col:48> 'int' lvalue ParmVar 0x55cdad9310e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55cdad959278 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55cdad959258 <col:56> 'const int' lvalue Var 0x55cdad921da0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55cdad9592b0 <col:68> 'P' lvalue ParmVar 0x55cdad931160 'parser' 'P'
|     | `-DeclRefExpr 0x55cdad9592d0 <col:76> 'T' lvalue ParmVar 0x55cdad931208 'x' 'T &'
|     `-ReturnStmt 0x55cdad959360 <line:596:9, col:17>
|       `-UnaryOperator 0x55cdad959348 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad959338 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad931948 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55cdad931410 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad931488 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad9318a8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55cdad931548 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad9315c0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad931780 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55cdad9594e0 <col:65, line:614:5>
|     `-ReturnStmt 0x55cdad9594d0 <line:613:9, col:46>
|       `-CallExpr 0x55cdad959490 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad9593a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad959410 <col:25> 'const char *' lvalue ParmVar 0x55cdad931548 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad959430 <col:34> 'int' 0
|         |-DeclRefExpr 0x55cdad959450 <col:37> 'P' lvalue ParmVar 0x55cdad9315c0 'parser' 'P'
|         `-DeclRefExpr 0x55cdad959470 <col:45> 'Vector<T>' lvalue ParmVar 0x55cdad931780 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55cdad931d78 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55cdad9319b8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cdad931cd8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55cdad931a70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad931bc0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55cdad959700 <col:55, line:618:5>
|     `-ReturnStmt 0x55cdad9596f0 <line:617:9, col:55>
|       `-CallExpr 0x55cdad9596b0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad959508 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad959578 <col:25> 'const char *' lvalue ParmVar 0x55cdad931a70 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cdad959598 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55cdad959670 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55cdad959690 <col:54> 'Vector<T>' lvalue ParmVar 0x55cdad931bc0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55cdad932348 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55cdad931de0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad931e58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad9322a8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55cdad931f18 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad931f98 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad932010 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad932160 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55cdad9598f8 <col:76, line:623:5>
|     |-CallExpr 0x55cdad959878 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cdad959718 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55cdad959758 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55cdad959768 <col:34> 'const char *' lvalue ParmVar 0x55cdad931f18 'keyword' 'const char *'
|     | |-BinaryOperator 0x55cdad959818 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55cdad9597c8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55cdad959788 <col:43> 'int' lvalue ParmVar 0x55cdad931f98 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55cdad959800 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55cdad9597e0 <col:51> 'const int' lvalue Var 0x55cdad921da0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55cdad959838 <col:63> 'P' lvalue ParmVar 0x55cdad932010 'parser' 'P'
|     | `-DeclRefExpr 0x55cdad959858 <col:71> 'Vector<T>' lvalue ParmVar 0x55cdad932160 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55cdad9598e8 <line:622:9, col:17>
|       `-UnaryOperator 0x55cdad9598d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad9598c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad932888 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55cdad9323c0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad932438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad9327e8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55cdad9324f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad932578 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad9326c0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55cdad959b60 <col:66, line:627:5>
|     `-ReturnStmt 0x55cdad959b50 <line:626:9, col:59>
|       `-CallExpr 0x55cdad959b10 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cdad959928 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cdad959998 <col:25> 'const char *' lvalue ParmVar 0x55cdad9324f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cdad9599b8 <col:34> 'int' lvalue ParmVar 0x55cdad932578 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55cdad959ad0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55cdad959af0 <col:58> 'Vector<T>' lvalue ParmVar 0x55cdad9326c0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55cdad932918 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55cdad959be0 <col:25, line:633:5>
|   `-ReturnStmt 0x55cdad959bd0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55cdad959bb8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55cdad959b88 <col:16> 'const bool' lvalue ->_status 0x55cdad9410d8
|         `-CXXThisExpr 0x55cdad959b78 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55cdad932a98 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55cdad9329d0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55cdad959cc8 <col:27, line:639:5>
|   |-BinaryOperator 0x55cdad959c70 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55cdad959bf8 <col:9> 'bool' lvalue ParmVar 0x55cdad9329d0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55cdad959c58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55cdad959c28 <col:13> 'bool' lvalue ->_status 0x55cdad9410d8
|   |     `-CXXThisExpr 0x55cdad959c18 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55cdad959cb8 <line:638:9, col:17>
|     `-UnaryOperator 0x55cdad959ca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cdad959c90 <col:17> 'Args *' this
|-CXXMethodDecl 0x55cdad932c18 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55cdad932b58 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55cdad959db8 <col:39, line:644:5>
|   |-BinaryOperator 0x55cdad959d60 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55cdad959ce8 <col:9> 'bool' lvalue ParmVar 0x55cdad932b58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55cdad959d48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55cdad959d18 <col:13> 'const bool' lvalue ->_status 0x55cdad9410d8
|   |     `-CXXThisExpr 0x55cdad959d08 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55cdad959da8 <line:643:9, col:17>
|     `-UnaryOperator 0x55cdad959d90 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cdad959d80 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55cdad932ce0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55cdad959e60 <col:30, line:651:5>
|   `-ReturnStmt 0x55cdad959e50 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55cdad959e38 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55cdad959e08 <col:16> 'bool' lvalue ->_read_status 0x55cdad836330
|         `-ImplicitCastExpr 0x55cdad959de8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55cdad959dd8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55cdad932e28 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55cdad932d98 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55cdad959f68 <col:32, line:658:5>
|   |-BinaryOperator 0x55cdad959f10 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55cdad959e78 <col:9> 'bool' lvalue ParmVar 0x55cdad932d98 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55cdad959ef8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55cdad959ec8 <col:13> 'bool' lvalue ->_read_status 0x55cdad836330
|   |     `-ImplicitCastExpr 0x55cdad959ea8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55cdad959e98 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55cdad959f58 <line:657:9, col:17>
|     `-UnaryOperator 0x55cdad959f40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cdad959f30 <col:17> 'Args *' this
|-CXXMethodDecl 0x55cdad932f78 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55cdad932ee8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55cdad95a078 <col:44, line:663:5>
|   |-BinaryOperator 0x55cdad95a020 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55cdad959f88 <col:9> 'bool' lvalue ParmVar 0x55cdad932ee8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55cdad95a008 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55cdad959fd8 <col:13> 'bool' lvalue ->_read_status 0x55cdad836330
|   |     `-ImplicitCastExpr 0x55cdad959fb8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55cdad959fa8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55cdad95a068 <line:662:9, col:17>
|     `-UnaryOperator 0x55cdad95a050 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cdad95a040 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55cdad933040 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55cdad933108 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55cdad9331d0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55cdad933298 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55cdad9335a8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55cdad933338 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cdad933508 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55cdad933418 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55cdad95a430 <col:19, line:706:5>
|     `-IfStmt 0x55cdad95a408 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55cdad95a178 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55cdad95a338 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55cdad95a308 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55cdad95a2c8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55cdad95a1d0 <col:42> '<bound member function type>' ->simple_slot 0x55cdad953590
|       |     | `-CXXThisExpr 0x55cdad95a1c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55cdad95a268 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55cdad95a220 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55cdad6c0698
|       |     | `-DeclRefExpr 0x55cdad95a200 <col:55> 'T' lvalue ParmVar 0x55cdad933418 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55cdad95a2a8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55cdad95a3f8 <line:705:13, col:34>
|         `-CallExpr 0x55cdad95a3d0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55cdad95a358 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55cdad95a3b0 <col:33> 'T' lvalue ParmVar 0x55cdad933418 'x' 'T &'
|-FunctionTemplateDecl 0x55cdad933878 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55cdad933608 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cdad9337d8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55cdad9336e8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55cdad95a810 <col:31, line:717:5>
|     |-DeclStmt 0x55cdad95a570 <line:713:9, col:23>
|     | `-VarDecl 0x55cdad95a458 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55cdad95a548 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55cdad95a4d0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55cdad95a528 <col:21> 'T' lvalue ParmVar 0x55cdad9336e8 'x' 'T &'
|     |-IfStmt 0x55cdad95a7c0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55cdad95a668 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55cdad95a7a0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55cdad95a740 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55cdad95a6d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|     |   | `-DeclRefExpr 0x55cdad95a6b0 <col:14> 'T *' lvalue Var 0x55cdad95a458 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55cdad95a780 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55cdad95a7f8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55cdad95a7d8 <col:16> 'T *' lvalue Var 0x55cdad95a458 's' 'T *'
|-FunctionTemplateDecl 0x55cdad933c88 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55cdad9338d8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cdad933958 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cdad933be8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55cdad933a38 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55cdad933ad8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55cdad95ab20 <col:37, line:726:5>
|     |-IfStmt 0x55cdad95aab0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55cdad95aad0 <line:723:13, col:26>
|     | | `-VarDecl 0x55cdad95a878 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55cdad95a968 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55cdad95a8f0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55cdad95a948 <col:25> 'T' lvalue ParmVar 0x55cdad933a38 'x' 'T &'
|     | |-DeclRefExpr 0x55cdad95a990 <col:16> 'T *' lvalue Var 0x55cdad95a878 's' 'T *'
|     | `-BinaryOperator 0x55cdad95aa90 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55cdad95aa40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55cdad95a9d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|     |   | `-DeclRefExpr 0x55cdad95a9b0 <col:14> 'T *' lvalue Var 0x55cdad95a878 's' 'T *'
|     |   `-DeclRefExpr 0x55cdad95aa70 <col:18> 'const V' lvalue ParmVar 0x55cdad933ad8 'value' 'const V &'
|     `-ReturnStmt 0x55cdad95ab10 <line:725:9, col:17>
|       `-UnaryOperator 0x55cdad95aaf8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cdad95aae8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cdad934088 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55cdad933cf0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cdad933fe8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55cdad933da0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad933e20 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad933ec8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55cdad95b940 <col:65, line:737:5>
|     |-DeclStmt 0x55cdad95abb8 <line:732:9, col:26>
|     | `-VarDecl 0x55cdad95ab50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55cdad95b908 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55cdad95b928 <line:733:13, col:58>
|       | `-VarDecl 0x55cdad95abe0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55cdad95adc0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55cdad95ad90 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55cdad95ad78 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55cdad95ad58 <col:26, col:58> 'String' (CXXTemporary 0x55cdad95ad58)
|       |           `-CXXMemberCallExpr 0x55cdad95ace8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55cdad95ac58 <col:26> '<bound member function type>' ->find 0x55cdad952ba8
|       |             | `-CXXThisExpr 0x55cdad95ac48 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55cdad95ad20 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cdad95ac88 <col:31> 'const char *' lvalue ParmVar 0x55cdad933da0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55cdad95ad38 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cdad95aca8 <col:40> 'int' lvalue ParmVar 0x55cdad933e20 'flags' 'int'
|       |             `-DeclRefExpr 0x55cdad95acc8 <col:47> 'Args::Slot *' lvalue Var 0x55cdad95ab50 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55cdad95ae78 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cdad95ae60 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cdad95ae40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cdad95ae10 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|       |       `-ImplicitCastExpr 0x55cdad95adf8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55cdad95add8 <col:20> 'String' lvalue Var 0x55cdad95abe0 'str' 'String'
|       `-CompoundStmt 0x55cdad95b8e8 <col:61, line:736:9>
|         |-DeclStmt 0x55cdad95b330 <line:734:13, col:76>
|         | `-VarDecl 0x55cdad95aec8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55cdad95b300 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55cdad95b270 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55cdad95b2b8 <col:60> 'T' lvalue ParmVar 0x55cdad933ec8 'variable' 'T &'
|         |     `-UnaryOperator 0x55cdad95b2e8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55cdad95b2d8 <col:71> 'Args *' this
|         `-CallExpr 0x55cdad95b8b8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55cdad95b358 <col:13> '<bound member function type>' ->postparse 0x55cdad952db8
|           | `-CXXThisExpr 0x55cdad95b348 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55cdad95b878 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55cdad95b388 <col:23> 'T *' lvalue Var 0x55cdad95aec8 's' 'T *'
|           | `-CallExpr 0x55cdad95b838 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55cdad95b610 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55cdad95b710 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55cdad95b730 <col:86> 'String' lvalue Var 0x55cdad95abe0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55cdad95b7e0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55cdad95b770 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|           |   | `-DeclRefExpr 0x55cdad95b750 <col:92> 'T *' lvalue Var 0x55cdad95aec8 's' 'T *'
|           |   `-UnaryOperator 0x55cdad95b820 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55cdad95b810 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55cdad95b898 <col:103> 'Args::Slot *' lvalue Var 0x55cdad95ab50 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cdad9345d8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55cdad9340f8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cdad934178 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cdad934538 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55cdad934238 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad9342b8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad934358 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55cdad9343f8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55cdad95c7e0 <col:88, line:745:5>
|     |-DeclStmt 0x55cdad95b9d8 <line:741:9, col:26>
|     | `-VarDecl 0x55cdad95b970 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cdad95bbf8 <line:742:9, col:55>
|     | `-VarDecl 0x55cdad95ba00 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55cdad95bbe0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55cdad95bbb0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55cdad95bb98 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55cdad95bb78 <col:22, col:54> 'String' (CXXTemporary 0x55cdad95bb78)
|     |           `-CXXMemberCallExpr 0x55cdad95bb08 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55cdad95ba78 <col:22> '<bound member function type>' ->find 0x55cdad952ba8
|     |             | `-CXXThisExpr 0x55cdad95ba68 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55cdad95bb40 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55cdad95baa8 <col:27> 'const char *' lvalue ParmVar 0x55cdad934238 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55cdad95bb58 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55cdad95bac8 <col:36> 'int' lvalue ParmVar 0x55cdad9342b8 'flags' 'int'
|     |             `-DeclRefExpr 0x55cdad95bae8 <col:43> 'Args::Slot *' lvalue Var 0x55cdad95b970 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55cdad95bfd0 <line:743:9, col:72>
|     | `-VarDecl 0x55cdad95bc48 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55cdad95bfa0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55cdad95bf10 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55cdad95bf58 <col:56> 'T' lvalue ParmVar 0x55cdad934358 'variable' 'T &'
|     |     `-UnaryOperator 0x55cdad95bf88 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55cdad95bf78 <col:67> 'Args *' this
|     `-CallExpr 0x55cdad95c7b0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55cdad95bff8 <col:9> '<bound member function type>' ->postparse 0x55cdad952db8
|       | `-CXXThisExpr 0x55cdad95bfe8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55cdad95c770 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55cdad95c028 <col:19> 'T *' lvalue Var 0x55cdad95bc48 's' 'T *'
|       | `-ParenExpr 0x55cdad95c750 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55cdad95c720 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55cdad95c708 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55cdad95c6f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55cdad95c6d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55cdad95c6a0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|       |     |       `-ImplicitCastExpr 0x55cdad95c688 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55cdad95c048 <col:25> 'String' lvalue Var 0x55cdad95ba00 'str' 'String'
|       |     |-CallExpr 0x55cdad95c4f8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55cdad95c2d0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55cdad95c3d0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55cdad95c3f0 <col:89> 'String' lvalue Var 0x55cdad95ba00 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55cdad95c4a0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55cdad95c430 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|       |     | | `-DeclRefExpr 0x55cdad95c410 <col:95> 'T *' lvalue Var 0x55cdad95bc48 's' 'T *'
|       |     | `-UnaryOperator 0x55cdad95c4e0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55cdad95c4d0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55cdad95c668 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55cdad95c648 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55cdad95c618 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55cdad95c5c8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55cdad95c558 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|       |         | | `-DeclRefExpr 0x55cdad95c538 <col:109> 'T *' lvalue Var 0x55cdad95bc48 's' 'T *'
|       |         | `-DeclRefExpr 0x55cdad95c5f8 <col:113> 'const V' lvalue ParmVar 0x55cdad9343f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55cdad95c638 <col:120> 'bool' true
|       `-DeclRefExpr 0x55cdad95c790 <col:128> 'Args::Slot *' lvalue Var 0x55cdad95b970 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cdad934b08 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55cdad934650 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad9346c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad934a68 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cdad934788 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad934808 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad934880 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad934928 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55cdad95d3d8 <col:75, line:754:5>
|     |-DeclStmt 0x55cdad95c888 <line:749:9, col:26>
|     | `-VarDecl 0x55cdad95c820 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55cdad95d3a0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55cdad95d3c0 <line:750:13, col:58>
|       | `-VarDecl 0x55cdad95c8b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55cdad95ca90 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55cdad95ca60 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55cdad95ca48 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55cdad95ca28 <col:26, col:58> 'String' (CXXTemporary 0x55cdad95ca28)
|       |           `-CXXMemberCallExpr 0x55cdad95c9b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55cdad95c928 <col:26> '<bound member function type>' ->find 0x55cdad952ba8
|       |             | `-CXXThisExpr 0x55cdad95c918 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55cdad95c9f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cdad95c958 <col:31> 'const char *' lvalue ParmVar 0x55cdad934788 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55cdad95ca08 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cdad95c978 <col:40> 'int' lvalue ParmVar 0x55cdad934808 'flags' 'int'
|       |             `-DeclRefExpr 0x55cdad95c998 <col:47> 'Args::Slot *' lvalue Var 0x55cdad95c820 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55cdad95cb48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cdad95cb30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cdad95cb10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cdad95cae0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|       |       `-ImplicitCastExpr 0x55cdad95cac8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55cdad95caa8 <col:20> 'String' lvalue Var 0x55cdad95c8b0 'str' 'String'
|       `-CompoundStmt 0x55cdad95d380 <col:61, line:753:9>
|         |-DeclStmt 0x55cdad95cf20 <line:751:13, col:63>
|         | `-VarDecl 0x55cdad95cb98 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55cdad95cef0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55cdad95ce60 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55cdad95cea8 <col:47> 'T' lvalue ParmVar 0x55cdad934928 'variable' 'T &'
|         |     `-UnaryOperator 0x55cdad95ced8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55cdad95cec8 <col:58> 'Args *' this
|         `-CallExpr 0x55cdad95d350 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55cdad95cf48 <col:13> '<bound member function type>' ->postparse 0x55cdad952db8
|           | `-CXXThisExpr 0x55cdad95cf38 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55cdad95d310 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55cdad95cf78 <col:23> 'T *' lvalue Var 0x55cdad95cb98 's' 'T *'
|           | `-CallExpr 0x55cdad95d2d0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55cdad95d160 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55cdad95d1a8 <col:56> 'P' lvalue ParmVar 0x55cdad934880 'parser' 'P'
|           |   |-DeclRefExpr 0x55cdad95d1c8 <col:64> 'String' lvalue Var 0x55cdad95c8b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55cdad95d278 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55cdad95d208 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|           |   | `-DeclRefExpr 0x55cdad95d1e8 <col:70> 'T *' lvalue Var 0x55cdad95cb98 's' 'T *'
|           |   `-UnaryOperator 0x55cdad95d2b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55cdad95d2a8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55cdad95d330 <col:81> 'Args::Slot *' lvalue Var 0x55cdad95c820 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cdad935168 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55cdad934b80 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cdad934bf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55cdad934c78 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55cdad9350c8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55cdad934d40 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad934dc0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad934e38 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad934ed8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55cdad934f78 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55cdad9604b8 <col:98, line:762:5>
|     |-DeclStmt 0x55cdad95d470 <line:758:9, col:26>
|     | `-VarDecl 0x55cdad95d408 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cdad95d690 <line:759:9, col:55>
|     | `-VarDecl 0x55cdad95d498 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55cdad95d678 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55cdad95d648 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55cdad95d630 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55cdad95d610 <col:22, col:54> 'String' (CXXTemporary 0x55cdad95d610)
|     |           `-CXXMemberCallExpr 0x55cdad95d5a0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55cdad95d510 <col:22> '<bound member function type>' ->find 0x55cdad952ba8
|     |             | `-CXXThisExpr 0x55cdad95d500 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55cdad95d5d8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55cdad95d540 <col:27> 'const char *' lvalue ParmVar 0x55cdad934d40 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55cdad95d5f0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55cdad95d560 <col:36> 'int' lvalue ParmVar 0x55cdad934dc0 'flags' 'int'
|     |             `-DeclRefExpr 0x55cdad95d580 <col:43> 'Args::Slot *' lvalue Var 0x55cdad95d408 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55cdad95dab0 <line:760:9, col:59>
|     | `-VarDecl 0x55cdad95d6e8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55cdad95da80 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55cdad95d9f0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55cdad95da38 <col:43> 'T' lvalue ParmVar 0x55cdad934ed8 'variable' 'T &'
|     |     `-UnaryOperator 0x55cdad95da68 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55cdad95da58 <col:54> 'Args *' this
|     `-CallExpr 0x55cdad960488 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55cdad95dad8 <col:9> '<bound member function type>' ->postparse 0x55cdad952db8
|       | `-CXXThisExpr 0x55cdad95dac8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55cdad960448 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55cdad95db08 <col:19> 'T *' lvalue Var 0x55cdad95d6e8 's' 'T *'
|       | `-ParenExpr 0x55cdad960428 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55cdad9603f8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55cdad9603e0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55cdad9603c8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55cdad9603a8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55cdad960378 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|       |     |       `-ImplicitCastExpr 0x55cdad960360 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55cdad95db28 <col:25> 'String' lvalue Var 0x55cdad95d498 'str' 'String'
|       |     |-CallExpr 0x55cdad95de80 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55cdad95dd10 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55cdad95dd58 <col:59> 'P' lvalue ParmVar 0x55cdad934e38 'parser' 'P'
|       |     | |-DeclRefExpr 0x55cdad95dd78 <col:67> 'String' lvalue Var 0x55cdad95d498 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55cdad95de28 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55cdad95ddb8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|       |     | | `-DeclRefExpr 0x55cdad95dd98 <col:73> 'T *' lvalue Var 0x55cdad95d6e8 's' 'T *'
|       |     | `-UnaryOperator 0x55cdad95de68 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55cdad95de58 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55cdad960340 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55cdad960320 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55cdad9602f0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55cdad95df50 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55cdad95dee0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|       |         | | `-DeclRefExpr 0x55cdad95dec0 <col:87> 'T *' lvalue Var 0x55cdad95d6e8 's' 'T *'
|       |         | `-DeclRefExpr 0x55cdad9602d0 <col:91> 'const V' lvalue ParmVar 0x55cdad934f78 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55cdad960310 <col:98> 'bool' true
|       `-DeclRefExpr 0x55cdad960468 <col:106> 'Args::Slot *' lvalue Var 0x55cdad95d408 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cdad9357d8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55cdad9351e8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad935268 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cdad9352e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cdad935738 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cdad9353b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad935430 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad9354a8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad935548 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55cdad9355e8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55cdad961498 <col:60, line:773:5>
|     |-DeclStmt 0x55cdad960560 <line:767:9, col:26>
|     | `-VarDecl 0x55cdad9604f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55cdad961460 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55cdad961480 <line:768:13, col:58>
|       | `-VarDecl 0x55cdad960588 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55cdad960768 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55cdad960738 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55cdad960720 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55cdad960700 <col:26, col:58> 'String' (CXXTemporary 0x55cdad960700)
|       |           `-CXXMemberCallExpr 0x55cdad960690 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55cdad960600 <col:26> '<bound member function type>' ->find 0x55cdad952ba8
|       |             | `-CXXThisExpr 0x55cdad9605f0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55cdad9606c8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cdad960630 <col:31> 'const char *' lvalue ParmVar 0x55cdad9353b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55cdad9606e0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cdad960650 <col:40> 'int' lvalue ParmVar 0x55cdad935430 'flags' 'int'
|       |             `-DeclRefExpr 0x55cdad960670 <col:47> 'Args::Slot *' lvalue Var 0x55cdad9604f8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55cdad960820 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cdad960808 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cdad9607e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cdad9607b8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|       |       `-ImplicitCastExpr 0x55cdad9607a0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55cdad960780 <col:20> 'String' lvalue Var 0x55cdad960588 'str' 'String'
|       `-CompoundStmt 0x55cdad961438 <col:61, line:772:9>
|         |-DeclStmt 0x55cdad960b60 <line:769:13, col:66>
|         | `-VarDecl 0x55cdad960878 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55cdad960b30 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55cdad960aa0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55cdad960ae8 <col:49> 'T1' lvalue ParmVar 0x55cdad935548 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55cdad960b18 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55cdad960b08 <col:61> 'Args *' this
|         |-DeclStmt 0x55cdad960ed0 <line:770:13, col:66>
|         | `-VarDecl 0x55cdad960be8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55cdad960ea0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55cdad960e10 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55cdad960e58 <col:49> 'T2' lvalue ParmVar 0x55cdad9355e8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55cdad960e88 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55cdad960e78 <col:61> 'Args *' this
|         `-CallExpr 0x55cdad961408 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55cdad960ef8 <col:13> '<bound member function type>' ->postparse 0x55cdad952db8
|           | `-CXXThisExpr 0x55cdad960ee8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55cdad9613c8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55cdad960f68 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55cdad960f28 <col:23> 'T1 *' lvalue Var 0x55cdad960878 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55cdad960f48 <col:29> 'T2 *' lvalue Var 0x55cdad960be8 's2' 'T2 *'
|           | `-CallExpr 0x55cdad961380 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55cdad961150 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55cdad961198 <col:63> 'P' lvalue ParmVar 0x55cdad9354a8 'parser' 'P'
|           |   |-DeclRefExpr 0x55cdad9611b8 <col:71> 'String' lvalue Var 0x55cdad960588 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55cdad961268 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55cdad9611f8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|           |   | `-DeclRefExpr 0x55cdad9611d8 <col:77> 'T1 *' lvalue Var 0x55cdad960878 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55cdad961328 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55cdad9612b8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|           |   | `-DeclRefExpr 0x55cdad961298 <col:82> 'T2 *' lvalue Var 0x55cdad960be8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55cdad961368 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55cdad961358 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55cdad9613e8 <col:94> 'Args::Slot *' lvalue Var 0x55cdad9604f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cdad93e548 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55cdad935858 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cdad93e4a8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55cdad93e288 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad93e308 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad93e380 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55cdad9619b0 <col:67, line:780:5>
|     |-DeclStmt 0x55cdad961530 <line:777:9, col:26>
|     | `-VarDecl 0x55cdad9614c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55cdad961978 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55cdad961998 <line:778:13, col:58>
|       | `-VarDecl 0x55cdad961558 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55cdad961738 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55cdad961708 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55cdad9616f0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55cdad9616d0 <col:26, col:58> 'String' (CXXTemporary 0x55cdad9616d0)
|       |           `-CXXMemberCallExpr 0x55cdad961660 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55cdad9615d0 <col:26> '<bound member function type>' ->find 0x55cdad952ba8
|       |             | `-CXXThisExpr 0x55cdad9615c0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55cdad961698 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cdad961600 <col:31> 'const char *' lvalue ParmVar 0x55cdad93e288 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55cdad9616b0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cdad961620 <col:40> 'int' lvalue ParmVar 0x55cdad93e308 'flags' 'int'
|       |             `-DeclRefExpr 0x55cdad961640 <col:47> 'Args::Slot *' lvalue Var 0x55cdad9614c8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55cdad9617f0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cdad9617d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cdad9617b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cdad961788 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|       |       `-ImplicitCastExpr 0x55cdad961770 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55cdad961750 <col:20> 'String' lvalue Var 0x55cdad961558 'str' 'String'
|       `-CallExpr 0x55cdad961948 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55cdad961818 <col:13> '<bound member function type>' ->postparse 0x55cdad952db8
|         | `-CXXThisExpr 0x55cdad961808 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55cdad9618f8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55cdad961868 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55cdad961848 <col:23> 'P' lvalue ParmVar 0x55cdad93e380 'parser' 'P'
|         | |-DeclRefExpr 0x55cdad9618b0 <col:36> 'String' lvalue Var 0x55cdad961558 'str' 'String'
|         | `-UnaryOperator 0x55cdad9618e0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55cdad9618d0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55cdad961928 <col:49> 'Args::Slot *' lvalue Var 0x55cdad9614c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cdad93e8e8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55cdad93e5b8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cdad93e848 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55cdad93e670 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad93e6f0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad93e768 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55cdad962320 <col:71, line:792:5>
|     |-DeclStmt 0x55cdad961a48 <line:784:9, col:26>
|     | `-VarDecl 0x55cdad9619e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cdad961b18 <line:785:9, col:29>
|     | `-VarDecl 0x55cdad961a78 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55cdad961b00 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55cdad961ae0 <col:28> 'int' 1
|     |-WhileStmt 0x55cdad9621d0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55cdad9621f0 <line:786:16, col:61>
|     | | `-VarDecl 0x55cdad961b40 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55cdad961d20 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55cdad961cf0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55cdad961cd8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55cdad961cb8 <col:29, col:61> 'String' (CXXTemporary 0x55cdad961cb8)
|     | |           `-CXXMemberCallExpr 0x55cdad961c48 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55cdad961bb8 <col:29> '<bound member function type>' ->find 0x55cdad952ba8
|     | |             | `-CXXThisExpr 0x55cdad961ba8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55cdad961c80 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cdad961be8 <col:34> 'const char *' lvalue ParmVar 0x55cdad93e670 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55cdad961c98 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cdad961c08 <col:43> 'int' lvalue ParmVar 0x55cdad93e6f0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55cdad961c28 <col:50> 'Args::Slot *' lvalue Var 0x55cdad9619e0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55cdad961dd8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55cdad961dc0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55cdad961da0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55cdad961d70 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|     | |       `-ImplicitCastExpr 0x55cdad961d58 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55cdad961d38 <col:23> 'String' lvalue Var 0x55cdad961b40 'str' 'String'
|     | `-CompoundStmt 0x55cdad9621a8 <col:64, line:790:9>
|     |   |-CallExpr 0x55cdad961f30 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55cdad961e00 <col:13> '<bound member function type>' ->postparse 0x55cdad952db8
|     |   | | `-CXXThisExpr 0x55cdad961df0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55cdad961ee0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55cdad961e50 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55cdad961e30 <col:23> 'P' lvalue ParmVar 0x55cdad93e768 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55cdad961e98 <col:36> 'String' lvalue Var 0x55cdad961b40 'str' 'String'
|     |   | | `-UnaryOperator 0x55cdad961ec8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55cdad961eb8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55cdad961f10 <col:49> 'Args::Slot *' lvalue Var 0x55cdad9619e0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55cdad9620c8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55cdad961f60 <col:13> 'int' lvalue Var 0x55cdad961a78 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55cdad9620b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55cdad962090 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55cdad961ff8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55cdad961fd8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55cdad961fc0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55cdad961f80 <col:28> 'int' lvalue Var 0x55cdad961a78 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55cdad961fa0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55cdad962078 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55cdad962048 <col:49> 'bool' lvalue ->_read_status 0x55cdad836330
|     |   |         `-ImplicitCastExpr 0x55cdad962028 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55cdad962018 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55cdad962178 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55cdad9620e8 <col:13> 'int' lvalue ParmVar 0x55cdad93e6f0 'flags' 'int'
|     |     `-UnaryOperator 0x55cdad962160 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55cdad962148 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55cdad962128 <col:23> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55cdad962300 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55cdad962238 <col:9> 'bool' lvalue ->_read_status 0x55cdad836330
|       | `-ImplicitCastExpr 0x55cdad962218 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55cdad962208 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55cdad9622e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55cdad9622c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55cdad9622a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55cdad962268 <col:25> 'int' lvalue Var 0x55cdad961a78 'read_status' 'int'
|           `-IntegerLiteral 0x55cdad962288 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55cdad93edc8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55cdad93e958 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad93e9d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad93ed28 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cdad93ea98 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad93eb18 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad93eb90 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad93ec38 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55cdad9632b0 <col:84, line:805:5>
|     |-DeclStmt 0x55cdad9623c8 <line:796:9, col:26>
|     | `-VarDecl 0x55cdad962360 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cdad962498 <line:797:9, col:29>
|     | `-VarDecl 0x55cdad9623f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55cdad962480 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55cdad962460 <col:28> 'int' 1
|     |-DeclStmt 0x55cdad9627d0 <line:798:9, col:71>
|     | `-VarDecl 0x55cdad9624e8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55cdad9627a0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55cdad962710 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55cdad962758 <col:55> 'T' lvalue ParmVar 0x55cdad93ec38 'variable' 'T &'
|     |     `-UnaryOperator 0x55cdad962788 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55cdad962778 <col:66> 'Args *' this
|     |-WhileStmt 0x55cdad963160 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55cdad963180 <line:799:16, col:61>
|     | | `-VarDecl 0x55cdad9627f8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55cdad9629d8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55cdad9629a8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55cdad962990 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55cdad962970 <col:29, col:61> 'String' (CXXTemporary 0x55cdad962970)
|     | |           `-CXXMemberCallExpr 0x55cdad962900 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55cdad962870 <col:29> '<bound member function type>' ->find 0x55cdad952ba8
|     | |             | `-CXXThisExpr 0x55cdad962860 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55cdad962938 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cdad9628a0 <col:34> 'const char *' lvalue ParmVar 0x55cdad93ea98 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55cdad962950 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cdad9628c0 <col:43> 'int' lvalue ParmVar 0x55cdad93eb18 'flags' 'int'
|     | |             `-DeclRefExpr 0x55cdad9628e0 <col:50> 'Args::Slot *' lvalue Var 0x55cdad962360 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55cdad962a90 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55cdad962a78 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55cdad962a58 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55cdad962a28 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|     | |       `-ImplicitCastExpr 0x55cdad962a10 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55cdad9629f0 <col:23> 'String' lvalue Var 0x55cdad9627f8 'str' 'String'
|     | `-CompoundStmt 0x55cdad963138 <col:64, line:803:9>
|     |   |-CallExpr 0x55cdad962ec0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55cdad962ab8 <col:13> '<bound member function type>' ->postparse 0x55cdad952db8
|     |   | | `-CXXThisExpr 0x55cdad962aa8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55cdad962e80 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55cdad962ae8 <col:23> 'T *' lvalue Var 0x55cdad9624e8 's' 'T *'
|     |   | | `-CallExpr 0x55cdad962e40 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55cdad962cd0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55cdad962d18 <col:56> 'P' lvalue ParmVar 0x55cdad93eb90 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55cdad962d38 <col:64> 'String' lvalue Var 0x55cdad9627f8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55cdad962de8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55cdad962d78 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|     |   | |   | `-DeclRefExpr 0x55cdad962d58 <col:70> 'T *' lvalue Var 0x55cdad9624e8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55cdad962e28 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55cdad962e18 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55cdad962ea0 <col:81> 'Args::Slot *' lvalue Var 0x55cdad962360 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55cdad963058 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55cdad962ef0 <col:13> 'int' lvalue Var 0x55cdad9623f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55cdad963040 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55cdad963020 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55cdad962f88 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55cdad962f68 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55cdad962f50 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55cdad962f10 <col:28> 'int' lvalue Var 0x55cdad9623f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55cdad962f30 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55cdad963008 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55cdad962fd8 <col:49> 'bool' lvalue ->_read_status 0x55cdad836330
|     |   |         `-ImplicitCastExpr 0x55cdad962fb8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55cdad962fa8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55cdad963108 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55cdad963078 <col:13> 'int' lvalue ParmVar 0x55cdad93eb18 'flags' 'int'
|     |     `-UnaryOperator 0x55cdad9630f0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55cdad9630d8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55cdad9630b8 <col:23> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55cdad963290 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55cdad9631c8 <col:9> 'bool' lvalue ->_read_status 0x55cdad836330
|       | `-ImplicitCastExpr 0x55cdad9631a8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55cdad963198 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55cdad963270 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55cdad963250 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55cdad963238 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55cdad9631f8 <col:25> 'int' lvalue Var 0x55cdad9623f8 'read_status' 'int'
|           `-IntegerLiteral 0x55cdad963218 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55cdad93f3a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55cdad93ee40 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cdad93eeb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cdad93f308 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55cdad93ef78 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cdad93eff8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55cdad93f070 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55cdad93f1c0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55cdad9640b8 <col:87, line:821:5>
|     |-DeclStmt 0x55cdad963360 <line:809:9, col:26>
|     | `-VarDecl 0x55cdad9632f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cdad963430 <line:810:9, col:29>
|     | `-VarDecl 0x55cdad963390 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55cdad963418 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55cdad9633f8 <col:28> 'int' 1
|     |-DeclStmt 0x55cdad963678 <line:811:9, col:38>
|     | `-VarDecl 0x55cdad963560 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55cdad963650 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55cdad9635d8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55cdad963630 <col:29> 'Vector<T>' lvalue ParmVar 0x55cdad93f1c0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55cdad963f68 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55cdad963f88 <line:812:16, col:61>
|     | | `-VarDecl 0x55cdad9636a0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55cdad963880 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55cdad963850 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55cdad963838 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55cdad963818 <col:29, col:61> 'String' (CXXTemporary 0x55cdad963818)
|     | |           `-CXXMemberCallExpr 0x55cdad9637a8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55cdad963718 <col:29> '<bound member function type>' ->find 0x55cdad952ba8
|     | |             | `-CXXThisExpr 0x55cdad963708 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55cdad9637e0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cdad963748 <col:34> 'const char *' lvalue ParmVar 0x55cdad93ef78 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55cdad9637f8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cdad963768 <col:43> 'int' lvalue ParmVar 0x55cdad93eff8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55cdad963788 <col:50> 'Args::Slot *' lvalue Var 0x55cdad9632f8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55cdad963938 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55cdad963920 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55cdad963900 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55cdad9638d0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55cdad682658
|     | |       `-ImplicitCastExpr 0x55cdad9638b8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55cdad963898 <col:23> 'String' lvalue Var 0x55cdad9636a0 'str' 'String'
|     | `-CompoundStmt 0x55cdad963f30 <col:64, line:819:9>
|     |   |-DeclStmt 0x55cdad9639f8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55cdad963960 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55cdad9639d8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55cdad963b78 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55cdad963a20 <col:13> '<bound member function type>' ->postparse 0x55cdad952db8
|     |   | | `-CXXThisExpr 0x55cdad963a10 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55cdad963b20 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55cdad963a70 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55cdad963a50 <col:23> 'P' lvalue ParmVar 0x55cdad93f070 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55cdad963ab8 <col:36> 'String' lvalue Var 0x55cdad9636a0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55cdad963ad8 <col:41> 'T' lvalue Var 0x55cdad963960 'sx' 'T'
|     |   | | `-UnaryOperator 0x55cdad963b08 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55cdad963af8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55cdad963b58 <col:53> 'Args::Slot *' lvalue Var 0x55cdad9632f8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55cdad963cd0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55cdad963c08 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55cdad963bd8 <col:17> 'bool' lvalue ->_read_status 0x55cdad836330
|     |   | |   `-ImplicitCastExpr 0x55cdad963bb8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55cdad963ba8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55cdad963ca8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55cdad963c40 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55cdad963c20 <col:17> 'Vector<T> *' lvalue Var 0x55cdad963560 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55cdad963c88 <col:30> 'T' lvalue Var 0x55cdad963960 'sx' 'T'
|     |   |-BinaryOperator 0x55cdad963e50 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55cdad963ce8 <col:13> 'int' lvalue Var 0x55cdad963390 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55cdad963e38 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55cdad963e18 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55cdad963d80 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55cdad963d60 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55cdad963d48 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55cdad963d08 <col:28> 'int' lvalue Var 0x55cdad963390 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55cdad963d28 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55cdad963e00 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55cdad963dd0 <col:49> 'bool' lvalue ->_read_status 0x55cdad836330
|     |   |         `-ImplicitCastExpr 0x55cdad963db0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55cdad963da0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55cdad963f00 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55cdad963e70 <col:13> 'int' lvalue ParmVar 0x55cdad93eff8 'flags' 'int'
|     |     `-UnaryOperator 0x55cdad963ee8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55cdad963ed0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55cdad963eb0 <col:23> 'const int' lvalue Var 0x55cdad921ab8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55cdad964098 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55cdad963fd0 <col:9> 'bool' lvalue ->_read_status 0x55cdad836330
|       | `-ImplicitCastExpr 0x55cdad963fb0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55cdad963fa0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55cdad964078 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55cdad964058 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55cdad964040 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55cdad964000 <col:25> 'int' lvalue Var 0x55cdad963390 'read_status' 'int'
|           `-IntegerLiteral 0x55cdad964020 <col:40> 'int' 1
|-AccessSpecDecl 0x55cdad93f420 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55cdad93f448 prev 0x55cdad83bb68 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55cdad93f540 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55cdad93f630 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55cdad9640f0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55cdad93f720 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55cdad964100 <col:25, line:830:9>
| |-CXXMethodDecl 0x55cdad93f820 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55cdad93f8d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55cdad93f978 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55cdad93f978
| | `-ParmVarDecl 0x55cdad93fa88 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55cdad940248 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55cdad940248
|   `-ParmVarDecl 0x55cdad940358 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55cdad93faf8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55cdad93fc58 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55cdad93fe50 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55cdad93fd00 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55cdad93fd78 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55cdad9642e0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55cdad940108 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55cdad964150 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55cdad964110 <col:20> 'void *' lvalue ParmVar 0x55cdad93fd00 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55cdad940170 '_slot' 'char *'
| | | `-CXXNewExpr 0x55cdad9641d8 <col:32, col:45> 'char *' array Function 0x55cdad4a62d8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55cdad9641c0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55cdad964190 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55cdad93fd78 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55cdad9401d0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55cdad9642a0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55cdad964260 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55cdad93fd78 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55cdad964360 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55cdad93ff50 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55cdad93f720 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55cdad9643e8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55cdad9643c8 <line:840:13, col:22> 'void' array Function 0x55cdad4a6638 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55cdad9643b0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55cdad964380 <col:22> 'char *' lvalue ->_slot 0x55cdad940170
| |         `-CXXThisExpr 0x55cdad964370 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55cdad940050 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55cdad93f820 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55cdad9645d8 <col:22, line:844:9>
| |   `-CallExpr 0x55cdad964540 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55cdad964528 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55cdad964508 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55cdad5b20b8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55cdad964578 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55cdad964458 <col:20> 'void *' lvalue ->_ptr 0x55cdad940108
| |     |   `-CXXThisExpr 0x55cdad964448 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55cdad9645a8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55cdad964590 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55cdad964498 <col:26> 'char *' lvalue ->_slot 0x55cdad940170
| |     |     `-CXXThisExpr 0x55cdad964488 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55cdad9645c0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55cdad9644d8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55cdad9401d0
| |         `-CXXThisExpr 0x55cdad9644c8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55cdad940108 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55cdad940170 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55cdad9401d0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55cdad9403c8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55cdad9403c8
| | `-ParmVarDecl 0x55cdad9404d8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55cdad940578 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55cdad940578
|   `-ParmVarDecl 0x55cdad940688 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55cdad940828 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55cdad9406f8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55cdad940798 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55cdad940ac0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55cdad940cb8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55cdad940b88 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55cdad940e38 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55cdad964610 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55cdad9645f0 <col:20> 'T *' lvalue ParmVar 0x55cdad940b88 'ptr' 'T *'
|   | `-CompoundStmt 0x55cdad964660 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55cdad940d88 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55cdad93f820 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55cdad964810 <col:22, line:857:9>
|   |   `-CallExpr 0x55cdad9647e0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55cdad964670 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55cdad66a7e8 0x55cdad614b18
|   |     |-CXXOperatorCallExpr 0x55cdad964770 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55cdad964700 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cdad877798 0x55cdad8773b8 0x55cdad876fe8 0x55cdad876c08 0x55cdad876828 0x55cdad876458
|   |     | `-MemberExpr 0x55cdad9646d0 <col:29> 'T *' lvalue ->_ptr 0x55cdad940e38
|   |     |   `-CXXThisExpr 0x55cdad9646c0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55cdad9647b0 <col:35> 'T' lvalue ->_slot 0x55cdad940e98
|   |       `-CXXThisExpr 0x55cdad9647a0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55cdad940e38 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55cdad940e98 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55cdad940f00 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55cdad941000 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55cdad941050 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad940fe0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55cdad940fc0 <col:31> 'int' 48
|-FieldDecl 0x55cdad941078 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55cdad9410d8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55cdad941138 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55cdad941270 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55cdad952450 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55cdad9524b0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55cdad952560 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55cdad952788 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55cdad952690 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55cdad9528d8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55cdad952848 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55cdad952ba8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55cdad952998 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55cdad952a18 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55cdad952ac0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55cdad952db8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55cdad952c70 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55cdad952ce8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55cdad952e88 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55cdad952fd8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55cdad952f40 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55cdad953368 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55cdad953098 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55cdad953118 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55cdad9531c0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55cdad953278 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55cdad953590 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55cdad953440 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55cdad9534b8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55cdad9538a8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55cdad953640 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55cdad953808 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55cdad953718 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnyArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad97f650 <../dummy_inc/click/args.hh:1326:1, line:1338:1> line:1326:7 referenced class AnyArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cdad97f768 <col:1, col:7> col:7 implicit class AnyArg
|-AccessSpecDecl 0x55cdad97f7f8 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x55cdad97f9a8 <line:1327:5, line:1329:5> line:1327:17 parse 'bool (const String &, const ArgContext &)' static
| |-ParmVarDecl 0x55cdad97f830 <col:23, col:36> col:37 'const String &'
| |-ParmVarDecl 0x55cdad97f8a8 <col:39, col:60> col:58 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55cdad9800b8 <col:60> 'const ArgContext' lvalue Var 0x55cdad964838 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55cdad980138 <col:72, line:1329:5>
|   `-ReturnStmt 0x55cdad980128 <line:1328:9, col:16>
|     `-CXXBoolLiteralExpr 0x55cdad980118 <col:16> 'bool' true
|-CXXMethodDecl 0x55cdad97fc38 <line:1330:5, line:1333:5> line:1330:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55cdad97fa68 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55cdad97fae0 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55cdad97fb58 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55cdad9800d8 <col:79> 'const ArgContext' lvalue Var 0x55cdad964838 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55cdad980518 <col:91, line:1333:5>
|   |-CXXOperatorCallExpr 0x55cdad9804c0 <line:1331:9, col:18> 'String' lvalue
|   | |-ImplicitCastExpr 0x55cdad9804a8 <col:16> 'String &(*)(const String &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55cdad980488 <col:16> 'String &(const String &)' lvalue CXXMethod 0x55cdad69ec70 'operator=' 'String &(const String &)'
|   | |-DeclRefExpr 0x55cdad980150 <col:9> 'String' lvalue ParmVar 0x55cdad97fae0 'result' 'String &'
|   | `-DeclRefExpr 0x55cdad980170 <col:18> 'const String' lvalue ParmVar 0x55cdad97fa68 'str' 'const String &'
|   `-ReturnStmt 0x55cdad980508 <line:1332:9, col:16>
|     `-CXXBoolLiteralExpr 0x55cdad9804f8 <col:16> 'bool' true
|-CXXMethodDecl 0x55cdad97ffe8 <line:1334:5, line:1337:5> line:1334:17 parse 'bool (const String &, Vector<String> &, const ArgContext &)' static
| |-ParmVarDecl 0x55cdad97fd00 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55cdad97fe50 <col:42, col:58> col:58 used result 'Vector<String> &'
| |-ParmVarDecl 0x55cdad97fec8 <col:66, col:87> col:85 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55cdad9800f8 <col:87> 'const ArgContext' lvalue Var 0x55cdad964838 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55cdad980650 <col:99, line:1337:5>
|   |-CXXMemberCallExpr 0x55cdad980608 <line:1335:9, col:29> 'void'
|   | |-MemberExpr 0x55cdad9805d8 <col:9, col:16> '<bound member function type>' .push_back 0x55cdad902948
|   | | `-DeclRefExpr 0x55cdad980538 <col:9> 'Vector<String>':'Vector<String>' lvalue ParmVar 0x55cdad97fe50 'result' 'Vector<String> &'
|   | `-DeclRefExpr 0x55cdad9805b8 <col:26> 'const String' lvalue ParmVar 0x55cdad97fd00 'str' 'const String &'
|   `-ReturnStmt 0x55cdad980640 <line:1336:9, col:16>
|     `-CXXBoolLiteralExpr 0x55cdad980630 <col:16> 'bool' true
|-CXXConstructorDecl 0x55cdad999d30 <line:1326:7> col:7 implicit referenced constexpr AnyArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55cdad999e38 <col:7> col:7 implicit constexpr AnyArg 'void (const AnyArg &)' inline default trivial noexcept-unevaluated 0x55cdad999e38
| `-ParmVarDecl 0x55cdad999f48 <col:7> col:7 'const AnyArg &'
|-CXXConstructorDecl 0x55cdad999fe8 <col:7> col:7 implicit used constexpr AnyArg 'void (AnyArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cdad99a0f8 <col:7> col:7 'AnyArg &&'
| `-CompoundStmt 0x55cdad99a820 <col:7>
`-CXXDestructorDecl 0x55cdad99a198 <col:7> col:7 implicit referenced ~AnyArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnyArg = type { i8 }
  NonVirtualBaseLLVMType:%class.AnyArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad673510 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cdad673628 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55cdad6736b8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55cdad673788 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55cdad673870 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55cdad673a88 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55cdad673930 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad673c38 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55cdad673b40 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55cdad673d80 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55cdad673cf0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55cdad673ec8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55cdad673e38 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad674010 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55cdad673f80 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad6740d8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55cdad674220 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55cdad674190 <col:28> col:31 'int'
|-CXXMethodDecl 0x55cdad6742e8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55cdad674430 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55cdad6743a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55cdad6745a8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55cdad6744e8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad6746f0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55cdad674660 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad6747b8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55cdad674978 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55cdad674868 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cdad6748e0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad674bc8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55cdad674a38 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cdad674ab0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cdad674c78 <col:86> "" ""
|-CXXMethodDecl 0x55cdad674ee8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55cdad674d58 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55cdad674dd0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad675098 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55cdad674fa8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55cdad675248 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55cdad675150 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55cdad675518 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55cdad675300 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55cdad675378 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cdad6753f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad6757f8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55cdad6755e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55cdad675658 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cdad6756d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cdad6758b0 <col:115> "" ""
|-AccessSpecDecl 0x55cdad675920 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55cdad675958 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad675e60 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55cdad675e60
| `-ParmVarDecl 0x55cdad675f68 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55cdad676008 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55cdad676008
| `-ParmVarDecl 0x55cdad676118 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55cdad6ab748 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cdad89e550 <col:7>
|-CXXConstructorDecl 0x55cdad6ab820 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55cdad6ab820
| `-ParmVarDecl 0x55cdad6ab938 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55cdad6ab9a8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55cdad6ab9a8
| `-ParmVarDecl 0x55cdad6abab8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55cdad8a0f50 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad88d0f8 prev 0x55cdad882300 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cdad88d1f0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55cdad88d2e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55cdad88d408 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55cdad88d588 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55cdad88d708 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55cdad88d888 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55cdad89e6b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cdad89ef28 <col:11>
|-CXXDestructorDecl 0x55cdad89e790 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55cdad89e8c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55cdad89e8c8
| `-ParmVarDecl 0x55cdad89e9d8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55cdad89ea78 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55cdad89ea78
| `-ParmVarDecl 0x55cdad89eb88 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55cdad8a1948 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cdad8a1a58 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55cdad8a1cd8 <col:11>
|   `-ReturnStmt 0x55cdad8a1cc8 <col:11>
|     `-UnaryOperator 0x55cdad8a1cb0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cdad8a1ca0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55cdad8a1ac8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55cdad8a1ac8
  `-ParmVarDecl 0x55cdad8a1bd8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad88d8f0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cdad88da08 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55cdad88daa8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55cdad88db10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55cdad88db78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55cdad88dbe0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55cdad88dc40 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55cdad88dd00 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55cdad88dd60 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55cdad88ddc0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55cdad89e5c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55cdad88daa8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55cdad89ef38 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55cdad89ef90 <col:12>
|-CXXConstructorDecl 0x55cdad89ebf8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55cdad89ebf8
| `-ParmVarDecl 0x55cdad89ed08 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55cdad89eda8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55cdad89eda8
| `-ParmVarDecl 0x55cdad89eeb8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55cdad8a1030 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad87ba10 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cdad87bb28 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55cdad87bbb8 <col:16, col:22> col:16 public
|-EnumDecl 0x55cdad87bbe0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55cdad87bce0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55cdad87bdc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad87bcc0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55cdad87bca0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55cdad87bd70 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55cdad87bdd8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad87bd50 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55cdad87bd30 <col:22> 'int' 64
|-CXXMethodDecl 0x55cdad87c118 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55cdad87be00 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cdad87be80 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55cdad87bef8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cdad87bf70 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cdad87c1d8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87c3d8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55cdad87c250 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55cdad87c2c8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cdad87c488 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87c5e8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55cdad87c4f8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cdad87c690 <col:72> warn_unused_result ""
|-TypedefDecl 0x55cdad87c9f0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55cdad87c980 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55cdad87c920 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55cdad87c8e0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55cdad3534e0 'void'
|       |-PointerType 0x55cdad5fbdb0 'unsigned char *'
|       | `-BuiltinType 0x55cdad3535e0 'unsigned char'
|       |-TypedefType 0x55cdad3f8380 'size_t' sugar
|       | |-Typedef 0x55cdad3c3be0 'size_t'
|       | `-BuiltinType 0x55cdad353640 'unsigned long'
|       `-PointerType 0x55cdad353ce0 'void *'
|         `-BuiltinType 0x55cdad3534e0 'void'
|-CXXMethodDecl 0x55cdad87ce68 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55cdad87ca60 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55cdad87cad8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cdad87cb70 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55cdad87cbf0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55cdad897560 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55cdad897548 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55cdad897510 <col:58> 'int' 0
| |-ParmVarDecl 0x55cdad87cc70 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55cdad897588 <col:76> 'int' 0
| |-ParmVarDecl 0x55cdad87ccf0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55cdad8975a8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55cdad87cf38 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87cfb8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55cdad87d078 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55cdad87d118 <col:20>
| `-OptimizeNoneAttr 0x55cdad87d170 <col:30>
|-CXXMethodDecl 0x55cdad87d1e8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55cdad87d288 <col:20>
| `-OptimizeNoneAttr 0x55cdad87d2e0 <col:30>
|-CXXMethodDecl 0x55cdad87d358 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55cdad87d3f8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87d4a8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55cdad87d548 <col:20>
| |-OptimizeNoneAttr 0x55cdad87d5a0 <col:30>
| `-WarnUnusedResultAttr 0x55cdad87d5c8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87d620 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55cdad87d6c0 <col:20>
| `-OptimizeNoneAttr 0x55cdad87d718 <col:30>
|-CXXMethodDecl 0x55cdad87d768 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55cdad87d808 <col:20>
| `-OptimizeNoneAttr 0x55cdad87d860 <col:30>
|-CXXMethodDecl 0x55cdad87d8a8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55cdad87d948 <col:20>
| `-OptimizeNoneAttr 0x55cdad87d9a0 <col:30>
|-CXXMethodDecl 0x55cdad87d9e8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55cdad87daa8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55cdad87db70 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55cdad87dc38 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55cdad87dcf8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55cdad87de18 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55cdad897670 <col:54, line:99:5>
|   `-ReturnStmt 0x55cdad897660 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55cdad897648 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55cdad897618 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55cdad88e0f8
|         `-CXXThisExpr 0x55cdad897608 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55cdad87dfb8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55cdad87dec8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55cdad897720 <col:67, line:103:5>
|   `-BinaryOperator 0x55cdad897700 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55cdad897698 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55cdad88e0f8
|     | `-CXXThisExpr 0x55cdad897688 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55cdad8976e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad8976c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55cdad87dec8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55cdad87e0b0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55cdad8977a0 <col:33, line:107:5>
|   `-ReturnStmt 0x55cdad897790 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55cdad897778 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55cdad897748 <col:16> 'void *' lvalue ->_destructor_argument 0x55cdad88e160
|         `-CXXThisExpr 0x55cdad897738 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55cdad87e170 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55cdad897dd0 <col:25, line:113:5>
|   |-ParenExpr 0x55cdad897b18 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55cdad897ae8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad897858 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55cdad897830 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55cdad8977f8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55cdad8977c8 <col:24> '<bound member function type>' ->shared 0x55cdad87d1e8
|   |   |       `-ImplicitCastExpr 0x55cdad897818 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55cdad8977b8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55cdad8978b8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad897898 <col:42> 'int' 0
|   |   `-CallExpr 0x55cdad897a48 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55cdad897a30 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad897a10 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad897a88 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad897928 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55cdad897aa0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad897950 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad897ab8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad897988 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55cdad897ad0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad8979f8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad8979e0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad8979a8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55cdad897d18 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55cdad897b48 <col:2> 'unsigned char *' lvalue ->_head 0x55cdad88df00
|   | | `-CXXThisExpr 0x55cdad897b38 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55cdad897d00 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55cdad897ce0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55cdad897b88 <col:10> 'unsigned char *' lvalue ->_data 0x55cdad88df68
|   |     | `-CXXThisExpr 0x55cdad897b78 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55cdad897cc8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55cdad897ca8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55cdad897bc8 <col:18> 'unsigned char *' lvalue ->_tail 0x55cdad88dfd0
|   |         | `-CXXThisExpr 0x55cdad897bb8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55cdad897c90 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55cdad897c70 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55cdad897c08 <col:26> 'unsigned char *' lvalue ->_end 0x55cdad88e038
|   |             | `-CXXThisExpr 0x55cdad897bf8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55cdad897c58 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55cdad897c38 <col:33> 'int' 0
|   `-BinaryOperator 0x55cdad897db0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55cdad897d48 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55cdad88e0f8
|     | `-CXXThisExpr 0x55cdad897d38 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55cdad897d98 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55cdad897d78 <col:16> 'int' 0
|-CXXMethodDecl 0x55cdad87e2b0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55cdad87e220 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cdad87e358 <col:20>
| |-OptimizeNoneAttr 0x55cdad87e3b0 <col:30>
| `-WarnUnusedResultAttr 0x55cdad87e3d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87e4a8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55cdad87e418 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cdad87e550 <col:20>
| |-OptimizeNoneAttr 0x55cdad87e5a8 <col:30>
| `-WarnUnusedResultAttr 0x55cdad87e5d0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87e708 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55cdad87e610 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cdad87e7b0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87e8b0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55cdad87e820 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cdad87e958 <col:20>
| `-OptimizeNoneAttr 0x55cdad87e9b0 <col:30>
|-CXXMethodDecl 0x55cdad87ea78 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55cdad87e9e8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cdad87eb20 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87ec20 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55cdad87eb90 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cdad87ecc8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87edc8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55cdad87ed38 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cdad87ee70 <col:20>
| `-OptimizeNoneAttr 0x55cdad87eec8 <col:30>
|-CXXMethodDecl 0x55cdad87f058 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55cdad87ef08 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55cdad87ef80 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55cdad8975c8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55cdad87f108 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55cdad87f308 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55cdad87f180 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55cdad87f1f8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad87f518 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55cdad87f3c8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cdad87f440 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad87f728 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55cdad87f5d8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55cdad87f658 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55cdad8975d8 <col:39> 'int' 0
|-CXXMethodDecl 0x55cdad87f7f8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55cdad87f8c0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55cdad87f988 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55cdad87fa48 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55cdad87fb10 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55cdad87fc58 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55cdad87fbc8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55cdad87fe28 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55cdad87fd18 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55cdad87fd90 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad87fef8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55cdad87ffb8 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55cdad880058 <col:20>
| `-OptimizeNoneAttr 0x55cdad8800b0 <col:30>
|-CXXMethodDecl 0x55cdad880100 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55cdad8801a0 <col:20>
| `-OptimizeNoneAttr 0x55cdad8801f8 <col:30>
|-CXXMethodDecl 0x55cdad880248 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55cdad880308 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55cdad8803d0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55cdad880470 <col:20>
| `-OptimizeNoneAttr 0x55cdad8804c8 <col:30>
|-CXXMethodDecl 0x55cdad880618 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55cdad880508 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55cdad880580 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad880768 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55cdad8806d8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad880840 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55cdad880900 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55cdad8809a0 <col:20>
| `-OptimizeNoneAttr 0x55cdad8809f8 <col:30>
|-CXXMethodDecl 0x55cdad880a48 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55cdad880ae8 <col:20>
| `-OptimizeNoneAttr 0x55cdad880b40 <col:30>
|-CXXMethodDecl 0x55cdad880b90 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55cdad880c58 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55cdad880cf8 <col:20>
| `-OptimizeNoneAttr 0x55cdad880d50 <col:30>
|-CXXMethodDecl 0x55cdad880d98 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55cdad880eb8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55cdad881028 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55cdad880f68 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55cdad881118 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55cdad8811b8 <col:20>
| `-OptimizeNoneAttr 0x55cdad881210 <col:30>
|-CXXMethodDecl 0x55cdad881260 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55cdad881320 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55cdad881558 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55cdad8813d0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55cdad881448 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cdad881608 <col:20>
| `-OptimizeNoneAttr 0x55cdad881660 <col:30>
|-CXXMethodDecl 0x55cdad881708 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55cdad8817a8 <col:20>
| `-OptimizeNoneAttr 0x55cdad881800 <col:30>
|-CXXMethodDecl 0x55cdad881850 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55cdad8818f0 <col:20>
| `-OptimizeNoneAttr 0x55cdad881948 <col:30>
|-CXXMethodDecl 0x55cdad881990 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55cdad881a30 <col:20>
| `-OptimizeNoneAttr 0x55cdad881a88 <col:30>
|-CXXMethodDecl 0x55cdad881b88 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55cdad881ac0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55cdad881c30 <col:20>
| `-OptimizeNoneAttr 0x55cdad881c88 <col:30>
|-CXXMethodDecl 0x55cdad881e48 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55cdad881cc0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55cdad881d38 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cdad881ef8 <col:20>
| `-OptimizeNoneAttr 0x55cdad881f50 <col:30>
|-CXXMethodDecl 0x55cdad881ff8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55cdad882118 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55cdad882238 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55cdad8822d8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55cdad882300 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55cdad882428 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55cdad8824c8 <col:20>
| `-OptimizeNoneAttr 0x55cdad882520 <col:30>
|-CXXMethodDecl 0x55cdad8825c8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55cdad882668 <col:20>
| `-OptimizeNoneAttr 0x55cdad8826c0 <col:30>
|-AccessSpecDecl 0x55cdad8826e8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55cdad882710 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55cdad882810 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55cdad882860 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad8827f0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55cdad8827d0 <col:14> 'int' 48
|-CXXMethodDecl 0x55cdad8828c8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55cdad882968 <col:20>
| `-OptimizeNoneAttr 0x55cdad8829c0 <col:30>
|-CXXMethodDecl 0x55cdad882a38 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55cdad882ad8 <col:20>
| `-OptimizeNoneAttr 0x55cdad882b30 <col:30>
|-CXXMethodDecl 0x55cdad882bf8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55cdad882b68 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55cdad882d98 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55cdad882f38 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55cdad882e48 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55cdad882fe0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55cdad8830e0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cdad883490 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8830c0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55cdad8830a0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55cdad883170 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cdad8834a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad883150 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55cdad883130 <col:14> 'int' 1
| |-EnumConstantDecl 0x55cdad883200 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cdad8834c0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8831e0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55cdad8831c0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55cdad883290 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cdad8834d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad883270 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55cdad883250 <col:14> 'int' 3
| |-EnumConstantDecl 0x55cdad883320 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cdad8834f0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad883300 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55cdad8832e0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55cdad8833b0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cdad883508 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad883390 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55cdad883370 <col:13> 'int' 5
| `-EnumConstantDecl 0x55cdad883440 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55cdad883520 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad883420 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55cdad883400 <col:14> 'int' 6
|-CXXMethodDecl 0x55cdad883588 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55cdad883628 <col:20>
| `-OptimizeNoneAttr 0x55cdad883680 <col:30>
|-CXXMethodDecl 0x55cdad883778 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55cdad8836b8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55cdad883820 <col:20>
| `-OptimizeNoneAttr 0x55cdad883878 <col:30>
|-CXXMethodDecl 0x55cdad8838e8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55cdad883a10 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55cdad883b88 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55cdad883ac0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55cdad883c50 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55cdad883d18 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55cdad883e58 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55cdad883dc8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55cdad883f00 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55cdad884000 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55cdad884200 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad883fe0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55cdad883fc0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55cdad884090 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55cdad884218 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad884070 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55cdad884050 <col:45> 'int' 4
| |-EnumConstantDecl 0x55cdad884120 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55cdad884230 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad884100 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55cdad8840e0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55cdad8841b0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55cdad884248 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad884190 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55cdad884170 <col:47> 'int' 16
|-CXXMethodDecl 0x55cdad8842a8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55cdad884418 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55cdad884358 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55cdad8844c0 <col:20>
| `-OptimizeNoneAttr 0x55cdad884518 <col:30>
|-CXXMethodDecl 0x55cdad884568 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55cdad897ef0 <col:18, col:36>
|   `-ReturnStmt 0x55cdad897ee0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55cdad897ec8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55cdad897ea8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55cdad897e78 <col:27> '<bound member function type>' ->xanno 0x55cdad8825c8
|           `-CXXThisExpr 0x55cdad897e68 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55cdad884660 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55cdad898000 <col:30, col:48>
|   `-ReturnStmt 0x55cdad897ff0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55cdad897fd8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55cdad897fb8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55cdad897f88 <col:39> '<bound member function type>' ->xanno 0x55cdad882428
|           `-CXXThisExpr 0x55cdad897f78 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55cdad884748 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55cdad898198 <col:24, col:50>
|   `-ReturnStmt 0x55cdad898188 <col:26, col:47>
|     `-UnaryOperator 0x55cdad898170 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55cdad898150 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55cdad898138 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cdad8980e8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55cdad88d408
|         |   `-CXXMemberCallExpr 0x55cdad8980c8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55cdad898098 <col:34> '<bound member function type>' ->xanno 0x55cdad8825c8
|         |       `-CXXThisExpr 0x55cdad898088 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55cdad898118 <col:46> 'int' 0
|-CXXMethodDecl 0x55cdad884850 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55cdad898368 <col:36, col:62>
|   `-ReturnStmt 0x55cdad898358 <col:38, col:59>
|     `-UnaryOperator 0x55cdad898340 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55cdad898320 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55cdad898308 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cdad898280 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55cdad88d408
|         |   `-CXXMemberCallExpr 0x55cdad898260 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55cdad898230 <col:46> '<bound member function type>' ->xanno 0x55cdad882428
|         |       `-CXXThisExpr 0x55cdad898220 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55cdad8982b0 <col:58> 'int' 0
|-CXXMethodDecl 0x55cdad884968 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55cdad898500 <col:26, col:53>
|   `-ReturnStmt 0x55cdad8984f0 <col:28, col:50>
|     `-UnaryOperator 0x55cdad8984d8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55cdad8984b8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55cdad8984a0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cdad898450 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55cdad88d708
|         |   `-CXXMemberCallExpr 0x55cdad898430 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55cdad898400 <col:36> '<bound member function type>' ->xanno 0x55cdad8825c8
|         |       `-CXXThisExpr 0x55cdad8983f0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55cdad898480 <col:49> 'int' 0
|-CXXMethodDecl 0x55cdad884a88 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55cdad8986d8 <col:38, col:65>
|   `-ReturnStmt 0x55cdad8986c8 <col:40, col:62>
|     `-UnaryOperator 0x55cdad8986b0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55cdad898690 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55cdad898678 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cdad8985e8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55cdad88d708
|         |   `-CXXMemberCallExpr 0x55cdad8985c8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55cdad898598 <col:48> '<bound member function type>' ->xanno 0x55cdad882428
|         |       `-CXXThisExpr 0x55cdad898588 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55cdad898618 <col:61> 'int' 0
|-CXXMethodDecl 0x55cdad884c38 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55cdad884b40 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55cdad898da8 <col:34, line:463:5>
|   |-ParenExpr 0x55cdad898bf0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55cdad898bc0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad898828 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad8987f8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad898748 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad898730 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad8986f0 <col:23> 'int' lvalue ParmVar 0x55cdad884b40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad898710 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad8987d8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad8987a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad898768 <col:33> 'int' lvalue ParmVar 0x55cdad884b40 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55cdad8987c0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55cdad898788 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55cdad898888 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad898868 <col:56> 'int' 0
|   |   `-CallExpr 0x55cdad898b20 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55cdad898b08 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad898ae8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad898b60 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad898978 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55cdad898b78 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad8989a8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad898b90 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad8989e0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55cdad898ba8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad898ad0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad898ab8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad898a78 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55cdad898d98 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55cdad898d80 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55cdad898d60 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55cdad898d30 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cdad898ce0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55cdad88d408
|         |   `-CXXMemberCallExpr 0x55cdad898cc0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55cdad898c90 <col:9> '<bound member function type>' ->xanno 0x55cdad882428
|         |       `-CXXThisExpr 0x55cdad898c80 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55cdad898d48 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55cdad898d10 <col:21> 'int' lvalue ParmVar 0x55cdad884b40 'i' 'int'
|-CXXMethodDecl 0x55cdad884e88 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55cdad884cf8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55cdad884d70 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55cdad899438 <col:40, line:472:5>
|   |-ParenExpr 0x55cdad899250 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55cdad899220 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad898f00 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad898ed0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad898e20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad898e08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad898dc8 <col:23> 'int' lvalue ParmVar 0x55cdad884cf8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad898de8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad898eb0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad898e80 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad898e40 <col:33> 'int' lvalue ParmVar 0x55cdad884cf8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55cdad898e98 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55cdad898e60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55cdad898f60 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad898f40 <col:56> 'int' 0
|   |   `-CallExpr 0x55cdad899180 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55cdad899168 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad899148 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad8991c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad898fd0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55cdad8991d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad899000 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad8991f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad899038 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55cdad899208 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad899130 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad899118 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad8990d8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55cdad899418 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55cdad8993c0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55cdad899390 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55cdad899340 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55cdad88d408
|     | |   `-CXXMemberCallExpr 0x55cdad899320 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55cdad8992f0 <col:2> '<bound member function type>' ->xanno 0x55cdad8825c8
|     | |       `-CXXThisExpr 0x55cdad8992e0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55cdad8993a8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55cdad899370 <col:14> 'int' lvalue ParmVar 0x55cdad884cf8 'i' 'int'
|     `-ImplicitCastExpr 0x55cdad899400 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad8993e0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55cdad884d70 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55cdad885048 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55cdad884f50 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55cdad899bb8 <col:36, line:485:5>
|   |-ParenExpr 0x55cdad899920 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cdad8998f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad8995d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad8995a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad8994b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad899498 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad899458 <col:23> 'int' lvalue ParmVar 0x55cdad884f50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad899478 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad899580 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad899568 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad8994d0 <col:33> 'int' lvalue ParmVar 0x55cdad884f50 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad899548 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad899530 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad8994f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cdad899510 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55cdad899630 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad899610 <col:60> 'int' 0
|   |   `-CallExpr 0x55cdad899850 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cdad899838 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad899818 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad899890 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad8996a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55cdad8998a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad8996d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad8998c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad899710 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55cdad8998d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad899800 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad8997e8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad8997a8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55cdad899ba8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55cdad899b90 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55cdad899b78 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cdad899b48 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55cdad899ae8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cdad899ab8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cdad899a30 <col:61, col:70> 'char const[48]' lvalue ->c 0x55cdad88d2e0
|             |   `-CXXMemberCallExpr 0x55cdad899a10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cdad8999e0 <col:61> '<bound member function type>' ->xanno 0x55cdad882428
|             |       `-CXXThisExpr 0x55cdad8999d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cdad899ad0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cdad899a60 <col:74> 'int' lvalue ParmVar 0x55cdad884f50 'i' 'int'
|-CXXMethodDecl 0x55cdad885298 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55cdad885108 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cdad885180 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55cdad89a308 <col:42, line:500:5>
|   |-ParenExpr 0x55cdad89a0a0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cdad89a070 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad899d50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad899d20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad899c30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad899c18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad899bd8 <col:23> 'int' lvalue ParmVar 0x55cdad885108 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad899bf8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad899d00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad899ce8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad899c50 <col:33> 'int' lvalue ParmVar 0x55cdad885108 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad899cc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad899cb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad899c70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cdad899c90 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55cdad899db0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad899d90 <col:60> 'int' 0
|   |   `-CallExpr 0x55cdad899fd0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cdad899fb8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad899f98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89a010 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad899e20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55cdad89a028 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad899e58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89a040 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad899e90 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55cdad89a058 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad899f80 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad899f68 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad899f28 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55cdad89a2e8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55cdad89a298 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cdad89a268 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55cdad89a210 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cdad89a1e0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cdad89a190 <col:48, col:57> 'char [48]' lvalue ->c 0x55cdad88d2e0
|     |     |   `-CXXMemberCallExpr 0x55cdad89a170 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cdad89a140 <col:48> '<bound member function type>' ->xanno 0x55cdad8825c8
|     |     |       `-CXXThisExpr 0x55cdad89a130 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cdad89a1f8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cdad89a1c0 <col:61> 'int' lvalue ParmVar 0x55cdad885108 'i' 'int'
|     `-ImplicitCastExpr 0x55cdad89a2d0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad89a2b0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55cdad885180 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55cdad885458 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55cdad885360 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55cdad89aa68 <col:35, line:513:5>
|   |-ParenExpr 0x55cdad89a778 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cdad89a748 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad89a4a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad89a470 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad89a380 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad89a368 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad89a328 <col:23> 'int' lvalue ParmVar 0x55cdad885360 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad89a348 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad89a450 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad89a438 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad89a3a0 <col:33> 'int' lvalue ParmVar 0x55cdad885360 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad89a418 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad89a400 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad89a3c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cdad89a3e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55cdad89a500 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad89a4e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55cdad89a6a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cdad89a690 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad89a670 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89a6e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89a570 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55cdad89a700 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89a5a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89a718 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad89a5e0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55cdad89a730 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad89a658 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad89a640 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad89a600 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55cdad89aa58 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55cdad89aa40 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55cdad89aa28 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cdad89a9f8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55cdad89a970 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cdad89a940 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cdad89a8f0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55cdad88d2e0
|             |   `-CXXMemberCallExpr 0x55cdad89a8d0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cdad89a8a0 <col:60> '<bound member function type>' ->xanno 0x55cdad882428
|             |       `-CXXThisExpr 0x55cdad89a890 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cdad89a958 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cdad89a920 <col:73> 'int' lvalue ParmVar 0x55cdad885360 'i' 'int'
|-CXXMethodDecl 0x55cdad8856a8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55cdad885518 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cdad885590 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55cdad89b188 <col:41, line:528:5>
|   |-ParenExpr 0x55cdad89af10 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cdad89aee0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad89ac00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad89abd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad89aae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad89aac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad89aa88 <col:23> 'int' lvalue ParmVar 0x55cdad885518 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad89aaa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad89abb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad89ab98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad89ab00 <col:33> 'int' lvalue ParmVar 0x55cdad885518 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad89ab78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad89ab60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad89ab20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cdad89ab40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55cdad89ac60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad89ac40 <col:60> 'int' 0
|   |   `-CallExpr 0x55cdad89ae40 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cdad89ae28 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad89ae08 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89ae80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89acd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55cdad89ae98 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89ad08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89aeb0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad89ad40 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55cdad89aec8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad89adf0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad89add8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad89ad98 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55cdad89b168 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55cdad89b118 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cdad89b0e8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55cdad89b090 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cdad89b050 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cdad89b000 <col:47, col:56> 'char [48]' lvalue ->c 0x55cdad88d2e0
|     |     |   `-CXXMemberCallExpr 0x55cdad89afe0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cdad89afb0 <col:47> '<bound member function type>' ->xanno 0x55cdad8825c8
|     |     |       `-CXXThisExpr 0x55cdad89afa0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cdad89b068 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cdad89b030 <col:60> 'int' lvalue ParmVar 0x55cdad885518 'i' 'int'
|     `-ImplicitCastExpr 0x55cdad89b150 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad89b130 <col:65> 'int16_t':'short' lvalue ParmVar 0x55cdad885590 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55cdad885868 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55cdad885770 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55cdad89b858 <col:36, line:541:5>
|   |-ParenExpr 0x55cdad89b5f8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cdad89b5c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad89b320 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad89b2f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad89b200 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad89b1e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad89b1a8 <col:23> 'int' lvalue ParmVar 0x55cdad885770 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad89b1c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad89b2d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad89b2b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad89b220 <col:33> 'int' lvalue ParmVar 0x55cdad885770 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad89b298 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad89b280 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad89b240 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cdad89b260 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55cdad89b380 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad89b360 <col:60> 'int' 0
|   |   `-CallExpr 0x55cdad89b528 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cdad89b510 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad89b4f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89b568 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89b3f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55cdad89b580 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89b428 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89b598 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad89b460 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55cdad89b5b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad89b4d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad89b4c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad89b480 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55cdad89b848 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55cdad89b830 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55cdad89b818 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cdad89b7e8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55cdad89b790 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cdad89b760 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cdad89b710 <col:61, col:70> 'char const[48]' lvalue ->c 0x55cdad88d2e0
|             |   `-CXXMemberCallExpr 0x55cdad89b6f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cdad89b6c0 <col:61> '<bound member function type>' ->xanno 0x55cdad882428
|             |       `-CXXThisExpr 0x55cdad89b6b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cdad89b778 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cdad89b740 <col:74> 'int' lvalue ParmVar 0x55cdad885770 'i' 'int'
|-CXXMethodDecl 0x55cdad885a38 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55cdad885928 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55cdad8859a0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cdad885ae8 <col:20>
| `-OptimizeNoneAttr 0x55cdad885b40 <col:30>
|-CXXMethodDecl 0x55cdad885c78 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55cdad885b80 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55cdad89bf28 <col:35, line:562:5>
|   |-ParenExpr 0x55cdad89bcc8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cdad89bc98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad89b9f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad89b9c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad89b8d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad89b8b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad89b878 <col:23> 'int' lvalue ParmVar 0x55cdad885b80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad89b898 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad89b9a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad89b988 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad89b8f0 <col:33> 'int' lvalue ParmVar 0x55cdad885b80 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad89b968 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad89b950 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad89b910 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cdad89b930 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55cdad89ba50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad89ba30 <col:60> 'int' 0
|   |   `-CallExpr 0x55cdad89bbf8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cdad89bbe0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad89bbc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89bc38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89bac0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55cdad89bc50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89baf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89bc68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad89bb30 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55cdad89bc80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad89bba8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad89bb90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad89bb50 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55cdad89bf18 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55cdad89bf00 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55cdad89bee8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cdad89beb8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55cdad89be60 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cdad89be30 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cdad89bde0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55cdad88d2e0
|             |   `-CXXMemberCallExpr 0x55cdad89bdc0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cdad89bd90 <col:60> '<bound member function type>' ->xanno 0x55cdad882428
|             |       `-CXXThisExpr 0x55cdad89bd80 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cdad89be48 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cdad89be10 <col:73> 'int' lvalue ParmVar 0x55cdad885b80 'i' 'int'
|-CXXMethodDecl 0x55cdad885e88 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55cdad885d38 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cdad885db0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55cdad89c608 <col:41, line:577:5>
|   |-ParenExpr 0x55cdad89c398 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cdad89c368 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad89c0c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad89c090 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad89bfa0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad89bf88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad89bf48 <col:23> 'int' lvalue ParmVar 0x55cdad885d38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad89bf68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad89c070 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad89c058 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad89bfc0 <col:33> 'int' lvalue ParmVar 0x55cdad885d38 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad89c038 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad89c020 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad89bfe0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cdad89c000 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55cdad89c120 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad89c100 <col:60> 'int' 0
|   |   `-CallExpr 0x55cdad89c2c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cdad89c2b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad89c290 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89c308 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89c190 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55cdad89c320 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89c1c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89c338 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad89c200 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55cdad89c350 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad89c278 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad89c260 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad89c220 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55cdad89c5e8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55cdad89c598 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cdad89c568 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55cdad89c508 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cdad89c4d8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cdad89c488 <col:47, col:56> 'char [48]' lvalue ->c 0x55cdad88d2e0
|     |     |   `-CXXMemberCallExpr 0x55cdad89c468 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cdad89c438 <col:47> '<bound member function type>' ->xanno 0x55cdad8825c8
|     |     |       `-CXXThisExpr 0x55cdad89c428 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cdad89c4f0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cdad89c4b8 <col:60> 'int' lvalue ParmVar 0x55cdad885d38 'i' 'int'
|     `-ImplicitCastExpr 0x55cdad89c5d0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad89c5b0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55cdad885db0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55cdad886048 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55cdad885f50 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55cdad89cd38 <col:36, line:591:5>
|   |-ParenExpr 0x55cdad89ca78 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cdad89ca48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad89c7a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad89c770 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad89c680 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad89c668 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad89c628 <col:23> 'int' lvalue ParmVar 0x55cdad885f50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad89c648 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad89c750 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad89c738 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad89c6a0 <col:33> 'int' lvalue ParmVar 0x55cdad885f50 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad89c718 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad89c700 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad89c6c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cdad89c6e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55cdad89c800 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad89c7e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55cdad89c9a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cdad89c990 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad89c970 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89c9e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89c870 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55cdad89ca00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89c8a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89ca18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad89c8e0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55cdad89ca30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad89c958 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad89c940 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad89c900 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55cdad89cd28 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55cdad89cd10 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55cdad89ccf8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cdad89ccc8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55cdad89cc40 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cdad89cc10 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cdad89cbc0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55cdad88d2e0
|             |   `-CXXMemberCallExpr 0x55cdad89cba0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cdad89cb70 <col:61> '<bound member function type>' ->xanno 0x55cdad882428
|             |       `-CXXThisExpr 0x55cdad89cb60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cdad89cc28 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cdad89cbf0 <col:74> 'int' lvalue ParmVar 0x55cdad885f50 'i' 'int'
|-CXXMethodDecl 0x55cdad886298 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55cdad886108 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cdad886180 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55cdad89d418 <col:42, line:606:5>
|   |-ParenExpr 0x55cdad89d1a8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cdad89d178 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad89ced0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad89cea0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad89cdb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad89cd98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad89cd58 <col:23> 'int' lvalue ParmVar 0x55cdad886108 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad89cd78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad89ce80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cdad89ce68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad89cdd0 <col:33> 'int' lvalue ParmVar 0x55cdad886108 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad89ce48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad89ce30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad89cdf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cdad89ce10 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55cdad89cf30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad89cf10 <col:60> 'int' 0
|   |   `-CallExpr 0x55cdad89d0d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cdad89d0c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad89d0a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89d118 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89cfa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55cdad89d130 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89cfd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89d148 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad89d010 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55cdad89d160 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad89d088 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad89d070 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad89d030 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55cdad89d3f8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55cdad89d3a8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cdad89d378 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55cdad89d318 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cdad89d2e8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cdad89d298 <col:48, col:57> 'char [48]' lvalue ->c 0x55cdad88d2e0
|     |     |   `-CXXMemberCallExpr 0x55cdad89d278 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cdad89d248 <col:48> '<bound member function type>' ->xanno 0x55cdad8825c8
|     |     |       `-CXXThisExpr 0x55cdad89d238 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cdad89d300 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cdad89d2c8 <col:61> 'int' lvalue ParmVar 0x55cdad886108 'i' 'int'
|     `-ImplicitCastExpr 0x55cdad89d3e0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55cdad89d3c0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55cdad886180 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55cdad886430 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55cdad886360 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55cdad89dc88 <col:33, line:620:5>
|   |-ParenExpr 0x55cdad89da00 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55cdad89d9d0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad89d620 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad89d5f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad89d490 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad89d478 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad89d438 <col:23> 'int' lvalue ParmVar 0x55cdad886360 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad89d458 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad89d5d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55cdad89d5b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad89d4b0 <col:33> 'int' lvalue ParmVar 0x55cdad886360 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad89d598 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad89d580 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad89d4d0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55cdad89d558 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55cdad89d540 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55cdad89d508 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55cdad89d680 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad89d660 <col:79> 'int' 0
|   |   `-CallExpr 0x55cdad89d930 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55cdad89d918 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad89d8f8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89d970 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89d768 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55cdad89d988 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89d7b0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89d9a0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad89d7e8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55cdad89d9b8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad89d8e0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad89d8c8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad89d888 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55cdad89dc78 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55cdad89dc60 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55cdad89dc48 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cdad89dc18 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55cdad89db90 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cdad89db60 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cdad89db10 <col:67, col:76> 'char const[48]' lvalue ->c 0x55cdad88d2e0
|             |   `-CXXMemberCallExpr 0x55cdad89daf0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cdad89dac0 <col:67> '<bound member function type>' ->xanno 0x55cdad882428
|             |       `-CXXThisExpr 0x55cdad89dab0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cdad89db78 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cdad89db40 <col:80> 'int' lvalue ParmVar 0x55cdad886360 'i' 'int'
|-CXXMethodDecl 0x55cdad886648 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55cdad8864f0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cdad886570 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55cdad89e4b0 <col:45, line:635:5>
|   |-ParenExpr 0x55cdad89e1f8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55cdad89e1c8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55cdad89de90 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cdad89de60 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cdad89dd00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cdad89dce8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cdad89dca8 <col:23> 'int' lvalue ParmVar 0x55cdad8864f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cdad89dcc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cdad89de40 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55cdad89de28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cdad89dd20 <col:33> 'int' lvalue ParmVar 0x55cdad8864f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55cdad89de08 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cdad89ddf0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cdad89dd40 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cdad882810 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55cdad89ddc8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55cdad89ddb0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55cdad89dd78 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55cdad89def0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cdad89ded0 <col:79> 'int' 0
|   |   `-CallExpr 0x55cdad89e128 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55cdad89e110 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cdad89e0f0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cdad3ef0e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cdad89e168 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89df60 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55cdad89e180 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cdad89dfa8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cdad89e198 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cdad89dfe0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55cdad89e1b0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cdad89e0d8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cdad89e0c0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cdad89e078 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55cdad89e490 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55cdad89e3f8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cdad89e3c8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55cdad89e368 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cdad89e338 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cdad89e2e8 <col:54, col:63> 'char [48]' lvalue ->c 0x55cdad88d2e0
|     |     |   `-CXXMemberCallExpr 0x55cdad89e2c8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cdad89e298 <col:54> '<bound member function type>' ->xanno 0x55cdad8825c8
|     |     |       `-CXXThisExpr 0x55cdad89e288 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cdad89e350 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cdad89e318 <col:67> 'int' lvalue ParmVar 0x55cdad8864f0 'i' 'int'
|     `-CXXConstCastExpr 0x55cdad89e460 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55cdad89e448 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55cdad89e410 <col:91> 'const void *' lvalue ParmVar 0x55cdad886570 'x' 'const void *'
|-CXXMethodDecl 0x55cdad886718 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55cdad89e538 <col:34, line:640:5>
|   `-ReturnStmt 0x55cdad89e528 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55cdad89e510 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55cdad89e4e0 <col:16> 'Packet *' lvalue ->_data_packet 0x55cdad88de98
|         `-CXXThisExpr 0x55cdad89e4d0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55cdad886858 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55cdad8867c8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cdad8975f8 <col:46> 'bool' true
|-CXXMethodDecl 0x55cdad8869d8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55cdad886910 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55cdad886a80 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55cdad887230 <line:660:22> "" ""
| |-EnumConstantDecl 0x55cdad886b80 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad8872a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad886b60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55cdad886b40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55cdad87bce0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55cdad886c10 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad8872b8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad886bf0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55cdad886bd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55cdad87bd70 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55cdad886ca0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad8872d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad886c80 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55cdad886c60 <col:21> 'int' 0
| |-EnumConstantDecl 0x55cdad886d30 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad8872e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad886d10 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55cdad886cf0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55cdad886dc0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad887300 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad886da0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55cdad886d80 <col:21> 'int' 16
| |-EnumConstantDecl 0x55cdad886e50 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad887318 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad886e30 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55cdad886e10 <col:19> 'int' 32
| |-EnumConstantDecl 0x55cdad886ee0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad887330 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad886ec0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55cdad886ea0 <col:19> 'int' EnumConstant 0x55cdad886d30 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55cdad886f70 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad887348 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad886f50 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55cdad886f30 <col:19> 'int' EnumConstant 0x55cdad886e50 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55cdad887040 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad887360 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad887020 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55cdad887000 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55cdad886fc0 <col:23> 'int' EnumConstant 0x55cdad886f70 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55cdad886fe0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55cdad887110 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cdad887378 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cdad8870f0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55cdad8870d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55cdad887090 <col:23> 'int' EnumConstant 0x55cdad886f70 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55cdad8870b0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55cdad8871e0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55cdad887390 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cdad8871c0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55cdad8871a0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55cdad887160 <col:23> 'int' EnumConstant 0x55cdad886f70 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55cdad887180 <col:40> 'int' 8
|-CXXMethodDecl 0x55cdad8873d0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55cdad887470 <col:68> "" ""
|-CXXMethodDecl 0x55cdad887508 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55cdad8875a8 <col:45> "" ""
|-CXXMethodDecl 0x55cdad887640 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55cdad8876e0 <col:57> "" ""
|-CXXMethodDecl 0x55cdad887778 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55cdad887818 <col:45> "" ""
|-CXXMethodDecl 0x55cdad8878b0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55cdad887950 <col:57> "" ""
|-CXXMethodDecl 0x55cdad8879e0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55cdad887a80 <col:51> "" ""
|-CXXMethodDecl 0x55cdad887b10 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55cdad887bb0 <col:63> "" ""
|-CXXMethodDecl 0x55cdad887c40 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55cdad887ce0 <col:53> "" ""
|-CXXMethodDecl 0x55cdad887d70 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55cdad887e10 <col:65> "" ""
|-CXXMethodDecl 0x55cdad887f28 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55cdad887e98 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55cdad887fd0 <col:61> "" ""
|-CXXMethodDecl 0x55cdad888168 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55cdad888058 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55cdad8880d0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55cdad888218 <col:67> "" ""
|-CXXMethodDecl 0x55cdad888330 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55cdad8882a0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55cdad8883d8 <col:63> "" ""
|-CXXMethodDecl 0x55cdad888570 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55cdad888460 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55cdad8884d8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55cdad888620 <col:69> "" ""
|-CXXMethodDecl 0x55cdad888738 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55cdad8886a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55cdad8887e0 <col:63> "" ""
|-CXXMethodDecl 0x55cdad88aeb8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55cdad88ada8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55cdad88ae20 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cdad88af68 <col:69> "" ""
|-CXXMethodDecl 0x55cdad88b080 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55cdad88aff0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55cdad88b128 <col:62> "" ""
|-CXXMethodDecl 0x55cdad88b2c0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55cdad88b1b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55cdad88b228 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55cdad88b370 <col:68> "" ""
|-CXXMethodDecl 0x55cdad88b488 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55cdad88b3f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55cdad88b530 <col:63> "" ""
|-CXXMethodDecl 0x55cdad88b6c8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55cdad88b5b8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55cdad88b630 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55cdad88b778 <col:69> "" ""
|-CXXMethodDecl 0x55cdad88b808 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55cdad88b8a8 <col:64> "" ""
|-CXXMethodDecl 0x55cdad88b938 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55cdad88b9d8 <col:52> "" ""
|-CXXMethodDecl 0x55cdad88ba68 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55cdad88bb08 <col:67> "" ""
|-CXXMethodDecl 0x55cdad88bb98 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55cdad88bc38 <col:55> "" ""
|-CXXMethodDecl 0x55cdad88bd50 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55cdad88bcc0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55cdad88bdf8 <col:58> "" ""
|-CXXMethodDecl 0x55cdad88bf90 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55cdad88be80 <col:33> col:36 'int'
| |-ParmVarDecl 0x55cdad88bef8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55cdad88c040 <col:62> "" ""
|-CXXMethodDecl 0x55cdad88c158 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55cdad88c0c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55cdad88c200 <col:58> "" ""
|-CXXMethodDecl 0x55cdad88c398 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55cdad88c288 <col:33> col:36 'int'
| |-ParmVarDecl 0x55cdad88c300 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55cdad88c448 <col:62> "" ""
|-CXXMethodDecl 0x55cdad88c560 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55cdad88c4d0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55cdad88c608 <col:60> "" ""
|-CXXMethodDecl 0x55cdad88c7a0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55cdad88c690 <col:34> col:37 'int'
| |-ParmVarDecl 0x55cdad88c708 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55cdad88c850 <col:64> "" ""
|-CXXMethodDecl 0x55cdad88c968 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55cdad88c8d8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55cdad88ca10 <col:58> "" ""
|-CXXMethodDecl 0x55cdad88cba8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55cdad88ca98 <col:33> col:36 'int'
| |-ParmVarDecl 0x55cdad88cb10 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55cdad88cc58 <col:62> "" ""
|-CXXMethodDecl 0x55cdad88cd70 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55cdad88cce0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55cdad88ce18 <col:59> "" ""
|-CXXMethodDecl 0x55cdad88cfb0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55cdad88cea0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55cdad88cf18 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cdad88d060 <col:63> "" ""
|-AccessSpecDecl 0x55cdad88d0d0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55cdad88d0f8 prev 0x55cdad882300 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55cdad88d1f0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55cdad88d2e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55cdad88d408 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55cdad88d588 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55cdad88d708 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55cdad88d888 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55cdad89e6b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55cdad89ef28 <col:11>
| |-CXXDestructorDecl 0x55cdad89e790 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55cdad89e8c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55cdad89e8c8
| | `-ParmVarDecl 0x55cdad89e9d8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55cdad89ea78 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55cdad89ea78
| | `-ParmVarDecl 0x55cdad89eb88 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55cdad8a1948 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55cdad8a1a58 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55cdad8a1cd8 <col:11>
| |   `-ReturnStmt 0x55cdad8a1cc8 <col:11>
| |     `-UnaryOperator 0x55cdad8a1cb0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55cdad8a1ca0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55cdad8a1ac8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55cdad8a1ac8
|   `-ParmVarDecl 0x55cdad8a1bd8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55cdad88d8f0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55cdad88da08 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55cdad88daa8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55cdad88db10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55cdad88db78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55cdad88dbe0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55cdad88dc40 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55cdad88dd00 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55cdad88dd60 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55cdad88ddc0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55cdad89e5c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55cdad88daa8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55cdad89ef38 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55cdad89ef90 <col:12>
| |-CXXConstructorDecl 0x55cdad89ebf8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55cdad89ebf8
| | `-ParmVarDecl 0x55cdad89ed08 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55cdad89eda8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55cdad89eda8
| | `-ParmVarDecl 0x55cdad89eeb8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55cdad8a1030 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55cdad88de38 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55cdad88de98 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55cdad88df00 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55cdad88df68 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55cdad88dfd0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55cdad88e038 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55cdad88e098 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55cdad88e0f8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55cdad88e160 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55cdad88e1e8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55cdad88de38 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55cdad89e560 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55cdad88e098 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55cdad89efa0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55cdad89f000 <col:21, line:755:5>
|-CXXConstructorDecl 0x55cdad88e388 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55cdad88e2c8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55cdad88e480 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55cdad88e668 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55cdad88e570 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55cdad88e938 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55cdad88e720 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cdad88e798 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cdad88e810 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad88eb58 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55cdad88ea08 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55cdad88ea80 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55cdad897138 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55cdad88ec18 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55cdad88ec90 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55cdad88ed08 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55cdad897290 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55cdad897200 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad8973d8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55cdad897348 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55cdad8974d0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad89f0a0 prev 0x55cdad87b960 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55cdad89f1d8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55cdad89f268 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55cdad89f310 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55cdad89f3b0 <col:20>
| `-OptimizeNoneAttr 0x55cdad89f408 <col:30>
|-CXXMethodDecl 0x55cdad89f458 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55cdad89f4f8 <col:20>
| `-OptimizeNoneAttr 0x55cdad89f550 <col:30>
|-CXXMethodDecl 0x55cdad89f5a0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55cdad89f668 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55cdad89f730 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55cdad89f848 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55cdad89f910 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55cdad89f9b0 <col:20>
| `-OptimizeNoneAttr 0x55cdad89fa08 <col:30>
|-CXXMethodDecl 0x55cdad89fa78 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55cdad89fb18 <col:20>
| `-OptimizeNoneAttr 0x55cdad89fb70 <col:30>
|-CXXMethodDecl 0x55cdad89fc18 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55cdad89fcb8 <col:20>
| `-OptimizeNoneAttr 0x55cdad89fd10 <col:30>
|-CXXMethodDecl 0x55cdad89fd60 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55cdad89fe78 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55cdad89ff98 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55cdad8a00b8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55cdad8a0180 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55cdad8a0220 <col:62> "" ""
|-AccessSpecDecl 0x55cdad8a0290 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55cdad8a02f0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55cdad8a0ee8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55cdad8a1110 <col:29, col:31>
|-CXXMethodDecl 0x55cdad8a03b8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55cdad8a04f8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55cdad8a0468 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55cdad8a05f0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55cdad8a1120 <col:23, col:25>
|-CXXMethodDecl 0x55cdad8a07a8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55cdad8a06e0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55cdad8a0a78 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55cdad8a0860 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cdad8a08d8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cdad8a0950 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cdad8a0c08 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55cdad8a0b40 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55cdad8a0d00 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55cdad8a0d68 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55cdad8a0d68
  `-ParmVarDecl 0x55cdad8a0e78 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad5e9638 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cdad5e9758 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55cdad5e9820 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55cdad6b9df0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cdad6bf108 <col:8>
|-CXXConstructorDecl 0x55cdad6b9ef8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55cdad6b9ef8
| `-ParmVarDecl 0x55cdad6ba008 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55cdad6ba0a8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cdad6ba1b8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55cdad5e9820 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55cdad6bf320 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55cdad6bf2f0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55cdad5e9820
| |     `-CXXStaticCastExpr 0x55cdad6bf2c0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55cdad6bf290 <col:8> 'in_addr' lvalue ParmVar 0x55cdad6ba1b8 '' 'in_addr &&'
| `-CompoundStmt 0x55cdad6bf368 <col:8>
`-CXXDestructorDecl 0x55cdad6bf5a0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cdad6b1ad8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55cdad6b1bf8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55cdad6b1ce0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55cdad6b1cc0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55cdad6b1c88 <col:22> 'int' 4
|-FieldDecl 0x55cdad6b1d88 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55cdad6b1d68 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55cdad6b1d30 <col:21> 'int' 4
|-FieldDecl 0x55cdad6b1de8 <line:33:5, col:13> col:13 referenced ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55cdad6b1e48 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55cdad6b1ea8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55cdad6b1f08 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55cdad6b1f68 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55cdad6b1fc8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55cdad6b2028 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55cdad6b2098 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55cdad6b2108 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cdad9df128 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55cdad9df528 prev 0x55cdad9df128 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55cdad9df720 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55cdad9df628 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55cdad9e1118 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55cdad9df8a0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55cdad9e10d8 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55cdad9e1098 <col:20> 'String *' lvalue ParmVar 0x55cdad9df628 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55cdad9df900 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55cdad9e1178 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55cdad964660 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55cdad9df7e0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55cdad93f820 Slot::store 'void ()' ]
| `-CompoundStmt 0x55cdad9e18b8 <col:22, line:857:9>
|   `-CallExpr 0x55cdad9e1870 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55cdad9e1858 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55cdad9e17d8 <col:13> 'void (String &, const String &)' lvalue Function 0x55cdad9e16b8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55cdad614b18 'assign_consume')
|     |-UnaryOperator 0x55cdad9e1308 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55cdad9e12f0 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55cdad9e12c0 <col:29> 'String *' lvalue ->_ptr 0x55cdad9df8a0
|     |     `-CXXThisExpr 0x55cdad9e12b0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55cdad9e18a0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55cdad9e1330 <col:35> 'String':'String' lvalue ->_slot 0x55cdad9df900
|         `-CXXThisExpr 0x55cdad9e1320 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55cdad9df8a0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55cdad9df900 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55cdad9df978 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55cdad9df978
| `-ParmVarDecl 0x55cdad9e0540 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55cdad9e05d8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55cdad9e05d8
| `-ParmVarDecl 0x55cdad9e06e8 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55cdad9e0788 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55cdad9e0788
| `-ParmVarDecl 0x55cdad9e0898 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55cdad9e0908 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55cdad9e0908
| `-ParmVarDecl 0x55cdad9e0a18 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55cdad9e0aa0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55cdad93f720 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55cdad9e11e0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
