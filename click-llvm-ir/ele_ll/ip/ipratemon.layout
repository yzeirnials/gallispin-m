
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class FixedEWMAXParameters<5, 10, unsigned int, int> (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct IPRateMonitor::EWMAParameters (empty)
         0 |   class FixedEWMAXParameters<5, 10, unsigned int, int> (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class DirectEWMAX<struct IPRateMonitor::EWMAParameters>
         0 |   struct IPRateMonitor::EWMAParameters (base) (empty)
         0 |     class FixedEWMAXParameters<5, 10, unsigned int, int> (base) (empty)
         0 |   DirectEWMAX<struct IPRateMonitor::EWMAParameters>::value_type _avg
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class RateEWMAX<struct IPRateMonitor::EWMAParameters>
         0 |   struct IPRateMonitor::EWMAParameters (base) (empty)
         0 |     class FixedEWMAXParameters<5, 10, unsigned int, int> (base) (empty)
         0 |   unsigned int _current_epoch
         4 |   RateEWMAX<struct IPRateMonitor::EWMAParameters>::value_type [2] _current
        12 |   DirectEWMAX<struct IPRateMonitor::EWMAParameters> [2] _avg
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct IPRateMonitor::Counter
         0 |   class RateEWMAX<struct IPRateMonitor::EWMAParameters> fwd_and_rev_rate
         0 |     struct IPRateMonitor::EWMAParameters (base) (empty)
         0 |       class FixedEWMAXParameters<5, 10, unsigned int, int> (base) (empty)
         0 |     unsigned int _current_epoch
         4 |     RateEWMAX<struct IPRateMonitor::EWMAParameters>::value_type [2] _current
        12 |     DirectEWMAX<struct IPRateMonitor::EWMAParameters> [2] _avg
        24 |   struct IPRateMonitor::Stats * next_level
        32 |   unsigned int anno_this
           | [sizeof=40, dsize=36, align=8,
           |  nvsize=36, nvalign=8]

*** Dumping AST Record Layout
         0 | struct IPRateMonitor::Stats
         0 |   struct IPRateMonitor::Counter * _parent
         8 |   struct IPRateMonitor::Stats * _prev
        16 |   struct IPRateMonitor::Stats * _next
        24 |   struct IPRateMonitor::Counter *[256] counter
      2072 |   class IPRateMonitor * _rm
           | [sizeof=2080, dsize=2080, align=8,
           |  nvsize=2080, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0a18868 prev 0x559ba0a10008 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba0a18960 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x559ba0a189f0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x559ba0a18a68 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x559ba0a18b28 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x559ba0a18bf0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x559ba0a18d68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x559ba0a18ca0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x559ba0a18e10 <col:24>
| `-OptimizeNoneAttr 0x559ba0a18e68 <col:34>
|-CXXMethodDecl 0x559ba0a18eb0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x559ba0a19168 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x559ba0a18f60 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x559ba0a18fd8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x559ba0a19058 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x559ba0a19220 <line:229:7, col:14> col:7 private
|-FieldDecl 0x559ba0a19258 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x559ba0a192c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x559ba0a19348 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x559ba0a19668 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x559ba0a19400 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x559ba0a19478 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x559ba0a194f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x559ba0a19570 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x559ba0a19780 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x559ba0a210f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x559ba0a210f8
| `-ParmVarDecl 0x559ba0a21208 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x559ba0a212a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x559ba0a212a8
| `-ParmVarDecl 0x559ba0a213b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x559ba0b33020 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0a0b880 prev 0x559ba0a0b600 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ba0a0b978 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x559ba0a0ba08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x559ba0a0ba68 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x559ba0a0bb58 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x559ba0a0bc58 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x559ba0a0be28 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x559ba0a0bcd8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x559ba0a0bd50 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x559ba0a0bfb8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x559ba0a0bef0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x559ba0a0c060 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x559ba0a0c198 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x559ba0a0c0d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x559ba0a0c338 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x559ba0a0c278 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x559ba0a0c4d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x559ba0a0c418 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x559ba0a0c580 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x559ba0a0c680 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x559ba0a0c760 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a0c660 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x559ba0a0c640 <col:26> 'int' 1
| `-EnumConstantDecl 0x559ba0a0c710 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x559ba0a0c778 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0a0c6f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x559ba0a0c6d0 <col:44> 'int' 2
|-CXXMethodDecl 0x559ba0a0c8c0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x559ba0a0c7a8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x559ba0a0c828 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x559ba0a0ca18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x559ba0a0c988 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x559ba0a0cc58 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x559ba0a0cad8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x559ba0a0cb50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x559ba0a0cd08 <col:20>
| `-OptimizeNoneAttr 0x559ba0a0cd60 <col:30>
|-CXXMethodDecl 0x559ba0a0ce68 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x559ba0a0cda0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x559ba0a0cf10 <col:20>
| `-OptimizeNoneAttr 0x559ba0a0cf68 <col:30>
|-CXXMethodDecl 0x559ba0a0cfb8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x559ba0a0d080 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x559ba0a0d198 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x559ba0a0d220 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x559ba0a0d2a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x559ba0a0d330 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x559ba0a0d3b8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x559ba0a0d448 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x559ba0a0d508 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x559ba0a0d590 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x559ba0a0d618 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x559ba0a0d6a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x559ba0a0d728 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x559ba0a0d7b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x559ba0a0d840 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x559ba0a0d900 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x559ba0a0d990 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x559ba0a0dae0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x559ba0a0da48 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x559ba0a0dc70 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x559ba0a0dba0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x559ba0a0df20 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x559ba0a0dd28 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x559ba0a0dda8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x559ba0a0de28 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x559ba0a0dfd8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x559ba0a0e0e0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559ba0a0e370 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a0e0c0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x559ba0a0e0a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x559ba0a0e170 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559ba0a0e388 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a0e150 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x559ba0a0e130 <col:32> 'int' 20
| |-EnumConstantDecl 0x559ba0a0e200 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559ba0a0e3a0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a0e1e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x559ba0a0e1c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x559ba0a0e290 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559ba0a0e3b8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a0e270 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x559ba0a0e250 <col:35> 'int' 100
| `-EnumConstantDecl 0x559ba0a0e320 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x559ba0a0e3d0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0a0e300 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x559ba0a0e2e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x559ba0a0e410 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x559ba0a0e850 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559ba0a0e6c0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x559ba0a0e738 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a0e920 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x559ba0a0eaa0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x559ba0a0e9d0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a0eca8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559ba0a0eb58 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x559ba0a0ebd0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a0eda8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x559ba0a0ee48 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x559ba0a0ef10 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ba0a0efa0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x559ba0a0f1d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a0ef80 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x559ba0a0ef60 <col:36> 'int' EnumConstant 0x559ba0a0ef10 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ba0a0eff0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ba0a0f040 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ba0a0f090 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ba0a0f0e0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ba0a0f130 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x559ba0a0f180 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x559ba0a0f2b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x559ba0a0f1f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x559ba0a0f380 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x559ba0a0f440 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x559ba0a0f500 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x559ba0a0f5c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x559ba0a0f6d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x559ba0a0f7a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x559ba0a0f920 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x559ba0a0f850 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x559ba0a0fa48 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x559ba0a0fc48 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x559ba0a0faf8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x559ba0a0fb78 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x559ba0a1d598 <col:54, line:127:5>
|   |-ParenExpr 0x559ba0a1d448 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x559ba0a1d418 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x559ba0a1d108 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x559ba0a1d0e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x559ba0a1d0c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x559ba0a1d0b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x559ba0a1d080 <col:31> 'Router *' lvalue ->_router 0x559ba0a1af60
|   |   |         `-CXXThisExpr 0x559ba0a1d070 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x559ba0a1d168 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba0a1d148 <col:48> 'int' 0
|   |   `-CallExpr 0x559ba0a1d378 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x559ba0a1d360 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba0a1d340 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba0a1d3b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba0a1d1d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x559ba0a1d3d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba0a1d1f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x559ba0a1d3e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba0a1d230 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x559ba0a1d400 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba0a1d328 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba0a1d310 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba0a1d2c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x559ba0a1d4e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x559ba0a1d478 <col:9> 'Router *' lvalue ->_router 0x559ba0a1af60
|   | | `-CXXThisExpr 0x559ba0a1d468 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x559ba0a1d4c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559ba0a1d4a8 <col:19> 'Router *' lvalue ParmVar 0x559ba0a0faf8 'r' 'Router *'
|   `-BinaryOperator 0x559ba0a1d578 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x559ba0a1d510 <col:9> 'int' lvalue ->_eindex 0x559ba0a1afc8
|     | `-CXXThisExpr 0x559ba0a1d500 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x559ba0a1d560 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x559ba0a1d540 <col:19> 'int' lvalue ParmVar 0x559ba0a0fb78 'eindex' 'int'
|-CXXMethodDecl 0x559ba0a0fdd0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x559ba0a0fd08 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x559ba0a0fea0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x559ba0a0ff68 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x559ba0a10008 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x559ba0a10258 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x559ba0a100d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x559ba0a10150 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x559ba0a10308 <col:20>
| `-OptimizeNoneAttr 0x559ba0a10360 <col:30>
|-CXXMethodDecl 0x559ba0a10468 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559ba0a103a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x559ba0a10510 <col:20>
| `-OptimizeNoneAttr 0x559ba0a10568 <col:30>
|-CXXMethodDecl 0x559ba0a10638 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559ba0a105a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x559ba0a106e0 <col:20>
| `-OptimizeNoneAttr 0x559ba0a10738 <col:30>
|-CXXMethodDecl 0x559ba0a108c8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x559ba0a10770 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x559ba0a107f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x559ba0a10a58 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x559ba0a10990 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x559ba0a10ba8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x559ba0a10b18 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x559ba0a10cf8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x559ba0a10c68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x559ba0a10e48 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x559ba0a10db8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x559ba0a11108 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x559ba0a10f00 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x559ba0a10f80 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x559ba0a11028 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x559ba0a111e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x559ba0a112a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x559ba0a11570 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559ba0a11420 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x559ba0a11498 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a11698 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x559ba0a11870 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x559ba0a11750 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x559ba0a117d0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x559ba0a11a58 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x559ba0a11938 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x559ba0a119b8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x559ba0a11dc8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x559ba0a11b18 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559ba0a11b90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559ba0a11c10 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559ba0a1cb80 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559ba0a1cb60 <col:106> 'int' 0
| `-ParmVarDecl 0x559ba0a11c88 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ba0a1cbb8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ba0a1cb98 <col:126> 'int' 0
|-CXXMethodDecl 0x559ba0a12168 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559ba0a11e98 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559ba0a11f30 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559ba0a11fb0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x559ba0a12028 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ba0a1cbf0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ba0a1cbd0 <col:114> 'int' 0
|-CXXMethodDecl 0x559ba0a124f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559ba0a12240 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x559ba0a122b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559ba0a12338 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x559ba0a1cc08 <col:96> 'int' 0
| `-ParmVarDecl 0x559ba0a123b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ba0a1cc48 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ba0a1cc28 <col:116> 'int' 0
|-CXXMethodDecl 0x559ba0a12878 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x559ba0a125c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x559ba0a12640 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a126c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559ba0a1cc80 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559ba0a1cc60 <col:109> 'int' 0
| `-ParmVarDecl 0x559ba0a12738 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ba0a1ccb8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ba0a1cc98 <col:129> 'int' 0
|-CXXMethodDecl 0x559ba0a12bf8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559ba0a12948 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x559ba0a129c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a12a40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x559ba0a12ab8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ba0a1ccf0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ba0a1ccd0 <col:117> 'int' 0
|-CXXMethodDecl 0x559ba0a12f88 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559ba0a12cd0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a12d48 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a12dc8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x559ba0a1cd08 <col:99> 'int' 0
| `-ParmVarDecl 0x559ba0a12e40 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ba0a1cd48 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ba0a1cd28 <col:119> 'int' 0
|-CXXMethodDecl 0x559ba0a133a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x559ba0a13058 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x559ba0a130d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x559ba0a13150 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a131d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559ba0a1cd80 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559ba0a1cd60 <col:108> 'int' 0
| `-ParmVarDecl 0x559ba0a13250 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x559ba0a1cdb8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x559ba0a1cd98 <col:141> 'int' 0
|-CXXMethodDecl 0x559ba0a137c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x559ba0a13480 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x559ba0a13500 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x559ba0a13578 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a135f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x559ba0a13678 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x559ba0a1cdd0 <col:121> 'int' 0
|-CXXMethodDecl 0x559ba0a13bf8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x559ba0a138a8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x559ba0a13928 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x559ba0a139a0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a13a20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x559ba0a1cdf0 <col:98> 'int' 0
| `-ParmVarDecl 0x559ba0a13aa0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x559ba0a1ce10 <col:123> 'int' 0
|-CXXMethodDecl 0x559ba0a13ec0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x559ba0a13cd0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559ba0a13d50 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x559ba0a13dd0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x559ba0a1ce30 <col:80> 'int' 0
|-EnumDecl 0x559ba0a13f78 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x559ba0a14080 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559ba0a14310 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a14060 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x559ba0a14040 <col:42> 'int' 1
| |-EnumConstantDecl 0x559ba0a14110 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559ba0a14328 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a140f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x559ba0a140d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x559ba0a141a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559ba0a14340 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a14180 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x559ba0a14160 <col:44> 'int' 4
| |-EnumConstantDecl 0x559ba0a14230 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559ba0a14358 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a14210 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x559ba0a141f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x559ba0a142c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x559ba0a14370 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0a142a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x559ba0a14280 <col:34> 'int' 6
|-CXXMethodDecl 0x559ba0a14628 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x559ba0a14398 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x559ba0a14438 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x559ba0a144b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x559ba0a14530 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x559ba0a1cee8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x559ba0a1ced0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x559ba0a1ceb8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x559ba0a1ce98 <col:98, col:105> 'String' (CXXTemporary 0x559ba0a1ce98)
|           `-CXXTemporaryObjectExpr 0x559ba0a1ce60 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x559ba0a148c8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x559ba0a146f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x559ba0a14770 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x559ba0a147e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x559ba0a1cf98 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x559ba0a1cf80 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x559ba0a1cf68 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x559ba0a1cf48 <col:94, col:101> 'String' (CXXTemporary 0x559ba0a1cf48)
| |         `-CXXTemporaryObjectExpr 0x559ba0a1cf10 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x559ba0a1d780 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x559ba0a1d6f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x559ba0a1d6c8 <col:9> '<bound member function type>' ->add_task_handlers 0x559ba0a14628
|     | `-CXXThisExpr 0x559ba0a1d6b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x559ba0a1d738 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x559ba0a1d638 <col:27> 'Task *' lvalue ParmVar 0x559ba0a146f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x559ba0a1d750 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x559ba0a1d658 <col:33> 'NotifierSignal *' lvalue ParmVar 0x559ba0a14770 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x559ba0a1d768 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559ba0a1d678 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x559ba0a142c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559ba0a1d698 <col:62> 'const String' lvalue ParmVar 0x559ba0a147e8 'prefix' 'const String &'
|-CXXMethodDecl 0x559ba0a14ad8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x559ba0a14990 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x559ba0a14a08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x559ba0a1d048 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x559ba0a1d030 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x559ba0a1d018 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x559ba0a1cff8 <col:70, col:77> 'String' (CXXTemporary 0x559ba0a1cff8)
| |         `-CXXTemporaryObjectExpr 0x559ba0a1cfc0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x559ba0a1d958 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x559ba0a1d8d0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x559ba0a1d8a0 <col:9> '<bound member function type>' ->add_task_handlers 0x559ba0a14628
|     | `-CXXThisExpr 0x559ba0a1d890 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x559ba0a1d910 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x559ba0a1d810 <col:27> 'Task *' lvalue ParmVar 0x559ba0a14990 'task' 'Task *'
|     |-ImplicitCastExpr 0x559ba0a1d928 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x559ba0a1d830 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x559ba0a1d940 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559ba0a1d850 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x559ba0a142c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559ba0a1d870 <col:57> 'const String' lvalue ParmVar 0x559ba0a14a08 'prefix' 'const String &'
|-CXXMethodDecl 0x559ba0a14db8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x559ba0a14ba0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a14c20 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a14c98 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x559ba0a15068 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x559ba0a14e88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a14f08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a14f88 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x559ba0a15358 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x559ba0a15138 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a151b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a15230 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x559ba0a15608 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x559ba0a15428 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a154a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a15528 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x559ba0a158b8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x559ba0a156d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a15758 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a157d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x559ba0a15b68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x559ba0a15988 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a15a08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a15a80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x559ba0a15e18 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x559ba0a15c38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a15cb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a15d38 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x559ba0a16128 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x559ba0a15f40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a15fc0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a16040 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x559ba0a16408 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x559ba0a161f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a16278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a16320 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x559ba0a166e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x559ba0a164d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a16558 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a16600 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x559ba0a16950 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x559ba0a167b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x559ba0a16838 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x559ba0a168b0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x559ba0a16bf8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x559ba0a16a20 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x559ba0a16aa0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x559ba0a16b18 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x559ba0a16ea8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x559ba0a16cc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a16d48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a16dc8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x559ba0a17158 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x559ba0a16f78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a16ff8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a17070 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x559ba0a17408 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x559ba0a17228 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a172a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a17320 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x559ba0a176d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x559ba0a174d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a17558 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ba0a175f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x559ba0a17a08 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x559ba0a177a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ba0a17828 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x559ba0a178a0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x559ba0a17918 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ba0a1d060 <col:93> 'bool' false
|-CXXMethodDecl 0x559ba0a17bf0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559ba0a17ad8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x559ba0a17b58 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x559ba0a17dc8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559ba0a17cb0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x559ba0a17d30 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x559ba0a180a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559ba0a17e88 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x559ba0a17f00 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x559ba0a17f80 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x559ba0a17ff8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a18398 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559ba0a18178 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x559ba0a181f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x559ba0a18270 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x559ba0a182e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a185d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x559ba0a18470 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x559ba0a184f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x559ba0a187b8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x559ba0a18698 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x559ba0a18718 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x559ba0a18868 prev 0x559ba0a10008 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559ba0a18960 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x559ba0a189f0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x559ba0a18a68 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x559ba0a18b28 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x559ba0a18bf0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x559ba0a18d68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x559ba0a18ca0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x559ba0a18e10 <col:24>
| | `-OptimizeNoneAttr 0x559ba0a18e68 <col:34>
| |-CXXMethodDecl 0x559ba0a18eb0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x559ba0a19168 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x559ba0a18f60 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x559ba0a18fd8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x559ba0a19058 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x559ba0a19220 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x559ba0a19258 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x559ba0a192c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x559ba0a19348 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x559ba0a19668 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x559ba0a19400 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x559ba0a19478 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x559ba0a194f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x559ba0a19570 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x559ba0a19780 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x559ba0a210f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x559ba0a210f8
| | `-ParmVarDecl 0x559ba0a21208 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x559ba0a212a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x559ba0a212a8
| | `-ParmVarDecl 0x559ba0a213b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x559ba0b33020 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559ba0a197f8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x559ba0a19898 <col:38> "" ""
|-CXXMethodDecl 0x559ba0a19928 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x559ba0a199c8 <col:44> "" ""
|-AccessSpecDecl 0x559ba0a19a38 <line:260:3, col:10> col:3 private
|-EnumDecl 0x559ba0a19a60 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x559ba0a19b60 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x559ba0a19bb0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0a19b40 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x559ba0a19b20 <col:27> 'int' 4
|-FieldDecl 0x559ba0a19c68 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x559ba0a19e18 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x559ba0a19ed0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x559ba0a1af60 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x559ba0a1afc8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x559ba0a1b118 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x559ba0a1b058 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x559ba0a1b2c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x559ba0a1b1d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x559ba0a1b4a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x559ba0a1b388 <col:20> col:23 'int'
| `-ParmVarDecl 0x559ba0a1b408 <col:25> col:28 'int'
|-CXXMethodDecl 0x559ba0a1b750 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a1b570 <col:23> col:26 'int'
| |-ParmVarDecl 0x559ba0a1b5f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x559ba0a1b668 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x559ba0a1b808 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x559ba0a1b8d0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x559ba0a1b920 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x559ba0a1b970 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x559ba0a1bb50 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x559ba0a1ba00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x559ba0a1ba78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a1bdf8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x559ba0a1bc18 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x559ba0a1bc98 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x559ba0a1bd10 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a1c018 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x559ba0a1bec8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x559ba0a1bf48 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x559ba0a1c350 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x559ba0a1c0d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x559ba0a1c158 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x559ba0a1c1d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x559ba0a1c250 <col:57> col:60 'int'
|-CXXMethodDecl 0x559ba0a1c538 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559ba0a1c420 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x559ba0a1c4a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x559ba0a1c688 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x559ba0a1c5f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x559ba0a1ca08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x559ba0a1c748 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x559ba0a1c7c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x559ba0a1c840 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x559ba0a1c8c0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x559ba0a1cb20 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPRateMonitor
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _count_packets
       109 |   _Bool _anno_packets
       112 |   int _thresh
       120 |   size_t _memmax
       128 |   unsigned int _ratio
       136 |   class Spinlock * _lock
       144 |   struct IPRateMonitor::Stats * _base
       152 |   unsigned long _resettime
       160 |   size_t _alloced_mem
       168 |   struct IPRateMonitor::Stats * _first
       176 |   struct IPRateMonitor::Stats * _last
       184 |   struct IPRateMonitor::Stats * _prev_deleted
       192 |   struct IPRateMonitor::Stats * _next_deleted
           | [sizeof=200, dsize=200, align=8,
           |  nvsize=200, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0b2ae18 prev 0x559ba0a7b278 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ba0b2af10 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x559ba0b2afa0 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x559ba0b2b000 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x559ba0b2b0f0 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x559ba0b2b1f0 <line:51:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x559ba0b2b2b0 <line:52:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x559ba0b2b370 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x559ba0b2b458 <line:54:5, col:26> col:17 nested 'bool () const' inline
`-CXXConstructorDecl 0x559ba0b2b578 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x559ba0b2b578
  `-ParmVarDecl 0x559ba0b2b688 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0a7b918 <../dummy_inc/click/ewma.hh:212:1, line:242:1> line:213:7 class FixedEWMAXParameters definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-TemplateArgument integral 5
|-TemplateArgument integral 10
|-TemplateArgument type 'unsigned int'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x559ba0a7bb68 prev 0x559ba0a7b918 <col:1, col:7> col:7 implicit class FixedEWMAXParameters
|-AccessSpecDecl 0x559ba0a7bbf8 <col:30, col:36> col:30 public
|-TypedefDecl 0x559ba0a7bc58 <line:215:5, col:15> col:15 referenced value_type 'unsigned int':'unsigned int'
| `-SubstTemplateTypeParmType 0x559ba0a7bc20 'unsigned int' sugar
|   |-TemplateTypeParmType 0x559ba098e990 'T' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x559ba098e940 'T'
|   `-BuiltinType 0x559ba04a8620 'unsigned int'
|-TypedefDecl 0x559ba0a7bce8 <line:216:5, col:15> col:15 referenced signed_value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x559ba0a7bcb0 'int' sugar
|   |-TemplateTypeParmType 0x559ba098ea20 'U' dependent depth 0 index 3
|   | `-TemplateTypeParm 0x559ba098e9d0 'U'
|   `-BuiltinType 0x559ba04a8580 'int'
|-CXXMethodDecl 0x559ba0a7bd40 <line:220:5, line:222:5> line:220:21 stability_shift 'unsigned int ()' static
|-CXXMethodDecl 0x559ba0a7bdf0 <line:226:5, line:229:5> line:226:21 scale 'unsigned int ()' static
|-CXXMethodDecl 0x559ba0a7bf08 <line:232:5, line:234:5> line:232:23 scaled_one 'FixedEWMAXParameters<5, 10, unsigned int, int>::value_type ()' static
|-CXXMethodDecl 0x559ba0a7bfb8 <line:238:5, line:240:5> line:238:21 compensation 'unsigned int ()' static
|-CXXConstructorDecl 0x559ba0a87768 <line:213:7> col:7 implicit used constexpr FixedEWMAXParameters 'void (const FixedEWMAXParameters<5, 10, unsigned int, int> &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0a87878 <col:7> col:7 'const FixedEWMAXParameters<5, 10, unsigned int, int> &'
| `-CompoundStmt 0x559ba0a88a80 <col:7>
|-CXXConstructorDecl 0x559ba0a87918 <col:7> col:7 implicit constexpr FixedEWMAXParameters 'void (FixedEWMAXParameters<5, 10, unsigned int, int> &&)' inline default trivial noexcept-unevaluated 0x559ba0a87918
| `-ParmVarDecl 0x559ba0a87a28 <col:7> col:7 'FixedEWMAXParameters<5, 10, unsigned int, int> &&'
|-CXXDestructorDecl 0x559ba0a87c18 <col:7> col:7 implicit ~FixedEWMAXParameters 'void () noexcept' inline default trivial
`-CXXConstructorDecl 0x559ba0a88960 <col:7> col:7 implicit constexpr FixedEWMAXParameters 'void ()' inline default trivial noexcept-unevaluated 0x559ba0a88960

Layout: <CGRecordLayout
  LLVMType:%class.FixedEWMAXParameters = type { i8 }
  NonVirtualBaseLLVMType:%class.FixedEWMAXParameters = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0a7b750 <../elements/ip/ipratemon.hh:78:5, line:90:5> line:78:12 referenced struct EWMAParameters definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'FixedEWMAXParameters<stability_shift, scale>':'FixedEWMAXParameters<5, 10, unsigned int, int>'
|-CXXRecordDecl 0x559ba0a7c0b0 <col:5, col:12> col:12 implicit struct EWMAParameters
|-EnumDecl 0x559ba0a7c140 <line:79:2, line:81:2> line:79:2
| `-EnumConstantDecl 0x559ba0a7c240 <line:80:6, col:19> col:6 referenced rate_count 'IPRateMonitor::EWMAParameters::(anonymous enum at ../elements/ip/ipratemon.hh:79:2)'
|   `-ImplicitCastExpr 0x559ba0a7c290 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0a7c220 <col:19> 'int' Int: 2
|       `-IntegerLiteral 0x559ba0a7c200 <col:19> 'int' 2
|-CXXMethodDecl 0x559ba0a7c300 <line:83:2, line:85:2> line:83:18 used epoch 'unsigned int ()' static
| `-CompoundStmt 0x559ba0a87320 <col:26, line:85:2>
|   `-ReturnStmt 0x559ba0a87310 <line:84:6, col:32>
|     `-BinaryOperator 0x559ba0a872f0 <col:13, col:32> 'click_jiffies_t':'unsigned int' '>>'
|       |-CallExpr 0x559ba0a872b0 <col:13, col:27> 'click_jiffies_t':'unsigned int'
|       | `-ImplicitCastExpr 0x559ba0a87298 <col:13> 'click_jiffies_t (*)()' <FunctionToPointerDecay>
|       |   `-DeclRefExpr 0x559ba0a87278 <col:13> 'click_jiffies_t ()' lvalue Function 0x559ba075f028 'click_jiffies' 'click_jiffies_t ()'
|       `-IntegerLiteral 0x559ba0a872d0 <col:32> 'int' 3
|-CXXMethodDecl 0x559ba0a7c3c8 <line:87:2, line:89:2> line:87:18 used epoch_frequency 'unsigned int ()' static
| `-CompoundStmt 0x559ba0a873c0 <col:36, line:89:2>
|   `-ReturnStmt 0x559ba0a873b0 <line:88:6, col:21>
|     `-ImplicitCastExpr 0x559ba0a87398 <col:13, col:21> 'unsigned int' <IntegralCast>
|       `-BinaryOperator 0x559ba0a87378 <col:13, col:21> 'int' '>>'
|         |-IntegerLiteral 0x559ba0a87338 <col:13> 'int' 1000
|         `-IntegerLiteral 0x559ba0a87358 <col:21> 'int' 3
|-CXXConstructorDecl 0x559ba0a87a98 <line:78:12> col:12 implicit used constexpr EWMAParameters 'void (const IPRateMonitor::EWMAParameters &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0a87ba8 <col:12> col:12 used 'const IPRateMonitor::EWMAParameters &'
| |-CXXCtorInitializer 'FixedEWMAXParameters<stability_shift, scale>':'FixedEWMAXParameters<5, 10, unsigned int, int>'
| | `-CXXConstructExpr 0x559ba0a88a90 <col:12> 'FixedEWMAXParameters<stability_shift, scale>':'FixedEWMAXParameters<5, 10, unsigned int, int>' 'void (const FixedEWMAXParameters<5, 10, unsigned int, int> &) noexcept'
| |   `-ImplicitCastExpr 0x559ba0a88a60 <col:12> 'const FixedEWMAXParameters<stability_shift, scale>':'const FixedEWMAXParameters<5, 10, unsigned int, int>' lvalue <UncheckedDerivedToBase (FixedEWMAXParameters)>
| |     `-DeclRefExpr 0x559ba0a88a40 <col:12> 'const IPRateMonitor::EWMAParameters' lvalue ParmVar 0x559ba0a87ba8 '' 'const IPRateMonitor::EWMAParameters &'
| `-CompoundStmt 0x559ba0a88b38 <col:12>
|-CXXConstructorDecl 0x559ba0a87d28 <col:12> col:12 implicit constexpr EWMAParameters 'void (IPRateMonitor::EWMAParameters &&)' inline default trivial noexcept-unevaluated 0x559ba0a87d28
| `-ParmVarDecl 0x559ba0a87e38 <col:12> col:12 'IPRateMonitor::EWMAParameters &&'
|-CXXDestructorDecl 0x559ba0a88058 <col:12> col:12 implicit ~EWMAParameters 'void () noexcept' inline default trivial
`-CXXConstructorDecl 0x559ba0a88880 <col:12> col:12 implicit constexpr EWMAParameters 'void ()' inline default trivial noexcept-unevaluated 0x559ba0a88880

Layout: <CGRecordLayout
  LLVMType:%"struct.IPRateMonitor::EWMAParameters" = type { i8 }
  NonVirtualBaseLLVMType:%"struct.IPRateMonitor::EWMAParameters" = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0a7e958 <../dummy_inc/click/ewma.hh:73:1, line:135:1> line:74:7 class DirectEWMAX definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPRateMonitor::EWMAParameters':'IPRateMonitor::EWMAParameters'
|-TemplateArgument type 'IPRateMonitor::EWMAParameters'
|-CXXRecordDecl 0x559ba0a7ec98 prev 0x559ba0a7e958 <col:1, col:7> col:7 implicit class DirectEWMAX
|-AccessSpecDecl 0x559ba0a7ed28 <col:32, col:38> col:32 public
|-TypedefDecl 0x559ba0a7ede0 <line:76:5, col:36> col:36 value_type 'typename EWMAParameters::value_type':'unsigned int'
| `-ElaboratedType 0x559ba0a7ed90 'typename EWMAParameters::value_type' sugar
|   `-TypedefType 0x559ba0a7bea0 'FixedEWMAXParameters<5, 10, unsigned int, int>::value_type' sugar
|     |-Typedef 0x559ba0a7bc58 'value_type'
|     `-SubstTemplateTypeParmType 0x559ba0a7bc20 'unsigned int' sugar
|       |-TemplateTypeParmType 0x559ba098e990 'T' dependent depth 0 index 2
|       | `-TemplateTypeParm 0x559ba098e940 'T'
|       `-BuiltinType 0x559ba04a8620 'unsigned int'
|-CXXConstructorDecl 0x559ba0a7ee70 <line:79:5, line:81:5> line:79:5 DirectEWMAX 'void ()'
|-CXXConstructorDecl 0x559ba0a7f048 <line:84:5, line:86:5> line:84:5 DirectEWMAX 'void (DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type)'
| `-ParmVarDecl 0x559ba0a7ef60 <col:17, col:28> col:28 scaled_value 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type':'unsigned int'
|-CXXMethodDecl 0x559ba0a7f158 <line:90:5, line:92:5> line:90:16 scaled_average 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type () const'
|-CXXMethodDecl 0x559ba0a7f228 <line:96:5, line:98:5> line:96:16 unscaled_average 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type () const'
|-CXXMethodDecl 0x559ba0a7f2d8 <line:101:5, line:103:5> line:101:10 clear 'void ()'
|-CXXMethodDecl 0x559ba0a7f428 <line:106:5, line:108:5> line:106:17 assign 'void (DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type)' inline
| `-ParmVarDecl 0x559ba0a7f398 <col:24, col:35> col:35 scaled_value 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type':'unsigned int'
|-CXXMethodDecl 0x559ba0a82cc0 <line:112:5, col:36> col:17 update 'void (DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type)' inline
| `-ParmVarDecl 0x559ba0a7f4f0 <col:24, col:35> col:35 x 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type':'unsigned int'
|-CXXMethodDecl 0x559ba0a82ec8 <line:119:5, col:43> col:10 update_n 'void (DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type, unsigned int)'
| |-ParmVarDecl 0x559ba0a82d88 <col:19, col:30> col:30 x 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type':'unsigned int'
| `-ParmVarDecl 0x559ba0a82df0 <col:33, col:42> col:42 n 'unsigned int'
|-CXXMethodDecl 0x559ba0a82f88 <line:124:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x559ba0a830d8 <line:129:5, col:69> col:17 update_with 'void (DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type)' inline
| |-ParmVarDecl 0x559ba0a83048 <col:29, col:40> col:40 x 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type':'unsigned int'
| `-DeprecatedAttr 0x559ba0a831b8 <col:58> Inherited "" ""
|-AccessSpecDecl 0x559ba0a83228 <line:131:3, col:10> col:3 private
|-FieldDecl 0x559ba0a83260 <line:133:5, col:16> col:16 referenced _avg 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type':'unsigned int'
|-CXXConstructorDecl 0x559ba0a87ed8 <line:74:7> col:7 implicit used constexpr DirectEWMAX 'void (const DirectEWMAX<IPRateMonitor::EWMAParameters> &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0a87fe8 <col:7> col:7 used 'const DirectEWMAX<IPRateMonitor::EWMAParameters> &'
| |-CXXCtorInitializer 'IPRateMonitor::EWMAParameters':'IPRateMonitor::EWMAParameters'
| | `-CXXConstructExpr 0x559ba0a88f80 <col:7> 'IPRateMonitor::EWMAParameters':'IPRateMonitor::EWMAParameters' 'void (const IPRateMonitor::EWMAParameters &) noexcept'
| |   `-ImplicitCastExpr 0x559ba0a88f60 <col:7> 'const IPRateMonitor::EWMAParameters':'const IPRateMonitor::EWMAParameters' lvalue <UncheckedDerivedToBase (EWMAParameters)>
| |     `-DeclRefExpr 0x559ba0a88f40 <col:7> 'const DirectEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a87fe8 '' 'const DirectEWMAX<IPRateMonitor::EWMAParameters> &'
| |-CXXCtorInitializer Field 0x559ba0a83260 '_avg' 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type':'unsigned int'
| | `-ImplicitCastExpr 0x559ba0a89050 <col:7> 'DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x559ba0a89008 <col:7> 'const DirectEWMAX<IPRateMonitor::EWMAParameters>::value_type':'const unsigned int' lvalue ._avg 0x559ba0a83260
| |     `-DeclRefExpr 0x559ba0a88fe8 <col:7> 'const DirectEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a87fe8 '' 'const DirectEWMAX<IPRateMonitor::EWMAParameters> &'
| `-CompoundStmt 0x559ba0a890a0 <col:7>
|-CXXConstructorDecl 0x559ba0a88168 <col:7> col:7 implicit constexpr DirectEWMAX 'void (DirectEWMAX<IPRateMonitor::EWMAParameters> &&)' inline default trivial noexcept-unevaluated 0x559ba0a88168
| `-ParmVarDecl 0x559ba0a88278 <col:7> col:7 'DirectEWMAX<IPRateMonitor::EWMAParameters> &&'
`-CXXDestructorDecl 0x559ba0a88438 <col:7> col:7 implicit referenced ~DirectEWMAX 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.DirectEWMAX = type { i32 }
  NonVirtualBaseLLVMType:%class.DirectEWMAX = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0a7d680 <../dummy_inc/click/ewma.hh:372:1, line:440:1> line:373:7 class RateEWMAX definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-public 'IPRateMonitor::EWMAParameters':'IPRateMonitor::EWMAParameters'
|-TemplateArgument type 'IPRateMonitor::EWMAParameters'
|-CXXRecordDecl 0x559ba0a7dc78 prev 0x559ba0a7d680 <col:1, col:7> col:7 implicit class RateEWMAX
|-AccessSpecDecl 0x559ba0a7dd08 <col:30, col:36> col:30 public
|-TypedefDecl 0x559ba0a7ddc0 <line:375:5, col:36> col:36 value_type 'typename EWMAParameters::value_type':'unsigned int'
| `-ElaboratedType 0x559ba0a7dd70 'typename EWMAParameters::value_type' sugar
|   `-TypedefType 0x559ba0a7bea0 'FixedEWMAXParameters<5, 10, unsigned int, int>::value_type' sugar
|     |-Typedef 0x559ba0a7bc58 'value_type'
|     `-SubstTemplateTypeParmType 0x559ba0a7bc20 'unsigned int' sugar
|       |-TemplateTypeParmType 0x559ba098e990 'T' dependent depth 0 index 2
|       | `-TemplateTypeParm 0x559ba098e940 'T'
|       `-BuiltinType 0x559ba04a8620 'unsigned int'
|-TypedefDecl 0x559ba0a7deb0 <line:376:5, col:43> col:43 signed_value_type 'typename EWMAParameters::signed_value_type':'int'
| `-ElaboratedType 0x559ba0a7de60 'typename EWMAParameters::signed_value_type' sugar
|   `-TypedefType 0x559ba0a7de40 'FixedEWMAXParameters<5, 10, unsigned int, int>::signed_value_type' sugar
|     |-Typedef 0x559ba0a7bce8 'signed_value_type'
|     `-SubstTemplateTypeParmType 0x559ba0a7bcb0 'int' sugar
|       |-TemplateTypeParmType 0x559ba098ea20 'U' dependent depth 0 index 3
|       | `-TemplateTypeParm 0x559ba098e9d0 'U'
|       `-BuiltinType 0x559ba04a8580 'int'
|-CXXConstructorDecl 0x559ba0a7df40 <line:379:5, line:383:5> line:379:5 used RateEWMAX 'void ()'
|-CXXMethodDecl 0x559ba0a7e0e8 <line:392:5, line:395:5> line:392:23 used scaled_average 'RateEWMAX<IPRateMonitor::EWMAParameters>::signed_value_type (unsigned int) const'
| `-ParmVarDecl 0x559ba0a7e020 <col:38, col:57> col:47 ratenum 'unsigned int'
|-CXXMethodDecl 0x559ba0a7e238 <line:399:5, line:401:5> line:399:14 scale 'unsigned int (unsigned int) const'
| `-ParmVarDecl 0x559ba0a7e1a0 <col:20, col:39> col:29 ratenum 'unsigned int'
|-CXXMethodDecl 0x559ba0a7e388 <line:410:5, col:43> col:16 rate 'int (unsigned int) const' inline
| `-ParmVarDecl 0x559ba0a7e2f0 <col:21, col:40> col:30 ratenum 'unsigned int'
|-CXXMethodDecl 0x559ba0a7e588 <line:420:5, col:69> col:17 used update 'void (RateEWMAX<IPRateMonitor::EWMAParameters>::signed_value_type, unsigned int)' inline
| |-ParmVarDecl 0x559ba0a7e450 <col:24, col:42> col:42 delta 'RateEWMAX<IPRateMonitor::EWMAParameters>::signed_value_type':'int'
| `-ParmVarDecl 0x559ba0a7e4b8 <col:49, col:68> col:58 ratenum 'unsigned int'
|-CXXMethodDecl 0x559ba0a7e6d8 <line:430:5, col:47> col:12 unparse_rate 'String (unsigned int) const'
| `-ParmVarDecl 0x559ba0a7e648 <col:25, col:44> col:34 ratenum 'unsigned int'
|-AccessSpecDecl 0x559ba0a7e790 <line:432:3, col:10> col:3 private
|-FieldDecl 0x559ba0a7e7b8 <line:434:5, col:14> col:14 referenced _current_epoch 'unsigned int'
|-FieldDecl 0x559ba0a7e8f8 <line:435:5, col:38> col:16 referenced _current 'RateEWMAX<IPRateMonitor::EWMAParameters>::value_type [2]'
|-FieldDecl 0x559ba0a832c8 <line:436:5, col:38> col:20 referenced _avg 'DirectEWMAX<IPRateMonitor::EWMAParameters> [2]'
|-CXXMethodDecl 0x559ba0a833a8 <line:438:5, col:41> col:17 update_time 'void (unsigned int)' inline
| `-ParmVarDecl 0x559ba0a83318 <col:29, col:38> col:38 now 'unsigned int'
|-CXXConstructorDecl 0x559ba0a882e8 <line:373:7> col:7 implicit used constexpr RateEWMAX 'void (const RateEWMAX<IPRateMonitor::EWMAParameters> &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0a883c8 <col:7> col:7 used 'const RateEWMAX<IPRateMonitor::EWMAParameters> &'
| |-CXXCtorInitializer 'IPRateMonitor::EWMAParameters':'IPRateMonitor::EWMAParameters'
| | `-CXXConstructExpr 0x559ba0a88b48 <col:7> 'IPRateMonitor::EWMAParameters':'IPRateMonitor::EWMAParameters' 'void (const IPRateMonitor::EWMAParameters &) noexcept'
| |   `-ImplicitCastExpr 0x559ba0a88860 <col:7> 'const IPRateMonitor::EWMAParameters':'const IPRateMonitor::EWMAParameters' lvalue <UncheckedDerivedToBase (EWMAParameters)>
| |     `-DeclRefExpr 0x559ba0a88840 <col:7> 'const RateEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a883c8 '' 'const RateEWMAX<IPRateMonitor::EWMAParameters> &'
| |-CXXCtorInitializer Field 0x559ba0a7e7b8 '_current_epoch' 'unsigned int'
| | `-ImplicitCastExpr 0x559ba0a88c18 <col:7> 'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x559ba0a88bd0 <col:7> 'const unsigned int' lvalue ._current_epoch 0x559ba0a7e7b8
| |     `-DeclRefExpr 0x559ba0a88bb0 <col:7> 'const RateEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a883c8 '' 'const RateEWMAX<IPRateMonitor::EWMAParameters> &'
| |-CXXCtorInitializer Field 0x559ba0a7e8f8 '_current' 'RateEWMAX<IPRateMonitor::EWMAParameters>::value_type [2]'
| | `-ArrayInitLoopExpr 0x559ba0a88d98 <col:7> 'RateEWMAX<IPRateMonitor::EWMAParameters>::value_type [2]'
| |   |-OpaqueValueExpr 0x559ba0a88cf8 <col:7> 'RateEWMAX<IPRateMonitor::EWMAParameters>::value_type const[2]' lvalue
| |   | `-MemberExpr 0x559ba0a88c78 <col:7> 'RateEWMAX<IPRateMonitor::EWMAParameters>::value_type const[2]' lvalue ._current 0x559ba0a7e8f8
| |   |   `-DeclRefExpr 0x559ba0a88c58 <col:7> 'const RateEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a883c8 '' 'const RateEWMAX<IPRateMonitor::EWMAParameters> &'
| |   `-ImplicitCastExpr 0x559ba0a88d80 <col:7> 'RateEWMAX<IPRateMonitor::EWMAParameters>::value_type':'unsigned int' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x559ba0a88d60 <col:7> 'const RateEWMAX<IPRateMonitor::EWMAParameters>::value_type':'const unsigned int' lvalue
| |       |-ImplicitCastExpr 0x559ba0a88d48 <col:7> 'const RateEWMAX<IPRateMonitor::EWMAParameters>::value_type *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x559ba0a88cf8 <col:7> 'RateEWMAX<IPRateMonitor::EWMAParameters>::value_type const[2]' lvalue
| |       |   `-MemberExpr 0x559ba0a88c78 <col:7> 'RateEWMAX<IPRateMonitor::EWMAParameters>::value_type const[2]' lvalue ._current 0x559ba0a7e8f8
| |       |     `-DeclRefExpr 0x559ba0a88c58 <col:7> 'const RateEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a883c8 '' 'const RateEWMAX<IPRateMonitor::EWMAParameters> &'
| |       `-ArrayInitIndexExpr 0x559ba0a88d10 <<invalid sloc>> 'unsigned long'
| |-CXXCtorInitializer Field 0x559ba0a832c8 '_avg' 'DirectEWMAX<IPRateMonitor::EWMAParameters> [2]'
| | `-ArrayInitLoopExpr 0x559ba0a890e0 <col:7> 'DirectEWMAX<IPRateMonitor::EWMAParameters> [2]'
| |   |-OpaqueValueExpr 0x559ba0a88e88 <col:7> 'DirectEWMAX<IPRateMonitor::EWMAParameters> const[2]' lvalue
| |   | `-MemberExpr 0x559ba0a88e00 <col:7> 'DirectEWMAX<IPRateMonitor::EWMAParameters> const[2]' lvalue ._avg 0x559ba0a832c8
| |   |   `-DeclRefExpr 0x559ba0a88de0 <col:7> 'const RateEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a883c8 '' 'const RateEWMAX<IPRateMonitor::EWMAParameters> &'
| |   `-CXXConstructExpr 0x559ba0a890b0 <col:7> 'DirectEWMAX<IPRateMonitor::EWMAParameters>':'DirectEWMAX<IPRateMonitor::EWMAParameters>' 'void (const DirectEWMAX<IPRateMonitor::EWMAParameters> &) noexcept'
| |     `-ArraySubscriptExpr 0x559ba0a88f20 <col:7> 'const DirectEWMAX<IPRateMonitor::EWMAParameters>':'const DirectEWMAX<IPRateMonitor::EWMAParameters>' lvalue
| |       |-ImplicitCastExpr 0x559ba0a88f08 <col:7> 'const DirectEWMAX<IPRateMonitor::EWMAParameters> *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x559ba0a88e88 <col:7> 'DirectEWMAX<IPRateMonitor::EWMAParameters> const[2]' lvalue
| |       |   `-MemberExpr 0x559ba0a88e00 <col:7> 'DirectEWMAX<IPRateMonitor::EWMAParameters> const[2]' lvalue ._avg 0x559ba0a832c8
| |       |     `-DeclRefExpr 0x559ba0a88de0 <col:7> 'const RateEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a883c8 '' 'const RateEWMAX<IPRateMonitor::EWMAParameters> &'
| |       `-ArrayInitIndexExpr 0x559ba0a88ea0 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x559ba0a89148 <col:7>
`-CXXConstructorDecl 0x559ba0a88548 <col:7> col:7 implicit constexpr RateEWMAX 'void (RateEWMAX<IPRateMonitor::EWMAParameters> &&)' inline default trivial noexcept-unevaluated 0x559ba0a88548
  `-ParmVarDecl 0x559ba0a88658 <col:7> col:7 'RateEWMAX<IPRateMonitor::EWMAParameters> &&'

Layout: <CGRecordLayout
  LLVMType:%class.RateEWMAX = type { i32, [2 x i32], [2 x %class.DirectEWMAX] }
  NonVirtualBaseLLVMType:%class.RateEWMAX = type { i32, [2 x i32], [2 x %class.DirectEWMAX] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0a7d9e0 prev 0x559ba0a7d930 <../elements/ip/ipratemon.hh:116:3, line:128:3> line:116:10 referenced struct Counter definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x559ba0a7dad8 <col:3, col:10> col:10 implicit referenced struct Counter
|-FieldDecl 0x559ba0a83478 <line:119:5, col:12> col:12 referenced fwd_and_rev_rate 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>'
|-FieldDecl 0x559ba0a83508 <line:120:5, col:12> col:12 referenced next_level 'IPRateMonitor::Stats *'
|-FieldDecl 0x559ba0a83570 <line:121:5, col:14> col:14 referenced anno_this 'unsigned int'
|-CXXConstructorDecl 0x559ba0a83620 <line:122:7, line:124:7> line:122:7 Counter 'void ()'
| |-CXXCtorInitializer Field 0x559ba0a83478 'fwd_and_rev_rate' 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>'
| | `-CXXConstructExpr 0x559ba0a886c8 <col:7> 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>' 'void ()'
| |-CXXCtorInitializer Field 0x559ba0a83508 'next_level' 'IPRateMonitor::Stats *'
| | `-ImplicitCastExpr 0x559ba0a87628 <line:123:17> 'IPRateMonitor::Stats *' <NullToPointer>
| |   `-IntegerLiteral 0x559ba0a875e8 <col:17> 'int' 0
| |-CXXCtorInitializer Field 0x559ba0a83570 'anno_this' 'unsigned int'
| | `-ImplicitCastExpr 0x559ba0a876a8 <col:31> 'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559ba0a87668 <col:31> 'int' 0
| `-CompoundStmt 0x559ba0a88730 <col:34, line:124:7>
`-CXXConstructorDecl 0x559ba0a83828 <line:125:7, line:127:7> line:125:7 Counter 'void (const IPRateMonitor::MyEWMA &)'
  |-ParmVarDecl 0x559ba0a83738 <col:15, col:29> col:29 used ewma 'const IPRateMonitor::MyEWMA &'
  |-CXXCtorInitializer Field 0x559ba0a83478 'fwd_and_rev_rate' 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>'
  | `-CXXConstructExpr 0x559ba0a89158 <line:126:6, col:27> 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>' 'void (const RateEWMAX<IPRateMonitor::EWMAParameters> &) noexcept'
  |   `-DeclRefExpr 0x559ba0a88740 <col:23> 'const IPRateMonitor::MyEWMA':'const RateEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a83738 'ewma' 'const IPRateMonitor::MyEWMA &'
  |-CXXCtorInitializer Field 0x559ba0a83508 'next_level' 'IPRateMonitor::Stats *'
  | `-ImplicitCastExpr 0x559ba0a891f0 <col:41> 'IPRateMonitor::Stats *' <NullToPointer>
  |   `-IntegerLiteral 0x559ba0a891b0 <col:41> 'int' 0
  |-CXXCtorInitializer Field 0x559ba0a83570 'anno_this' 'unsigned int'
  | `-ImplicitCastExpr 0x559ba0a89270 <col:55> 'unsigned int' <IntegralCast>
  |   `-IntegerLiteral 0x559ba0a89230 <col:55> 'int' 0
  `-CompoundStmt 0x559ba0a892c8 <col:58, line:127:7>

Layout: <CGRecordLayout
  LLVMType:%"struct.IPRateMonitor::Counter" = type <{ %class.RateEWMAX, [4 x i8], %"struct.IPRateMonitor::Stats"*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"struct.IPRateMonitor::Counter.base" = type <{ %class.RateEWMAX, [4 x i8], %"struct.IPRateMonitor::Stats"*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0a838f0 prev 0x559ba0a7d878 <../elements/ip/ipratemon.hh:130:3, line:143:3> line:130:10 referenced struct Stats definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ba0a839e8 <col:3, col:10> col:10 implicit referenced struct Stats
|-EnumDecl 0x559ba0a83a78 <line:132:5, col:31> col:5
| `-EnumConstantDecl 0x559ba0a83b80 <col:12, col:27> col:12 referenced MAX_COUNTERS 'IPRateMonitor::Stats::(anonymous enum at ../elements/ip/ipratemon.hh:132:5)'
|   `-ImplicitCastExpr 0x559ba0a83bd0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0a83b60 <col:27> 'int' Int: 256
|       `-IntegerLiteral 0x559ba0a83b40 <col:27> 'int' 256
|-FieldDecl 0x559ba0a83bf8 <line:134:5, col:14> col:14 referenced _parent 'IPRateMonitor::Counter *'
|-FieldDecl 0x559ba0a83c58 <line:135:5, col:12> col:12 referenced _prev 'IPRateMonitor::Stats *'
|-FieldDecl 0x559ba0a83cb8 <col:5, col:20> col:20 referenced _next 'IPRateMonitor::Stats *'
|-FieldDecl 0x559ba0a83db8 <line:137:5, col:34> col:14 referenced counter 'IPRateMonitor::Counter *[256]'
|-CXXConstructorDecl 0x559ba0a83ef8 <line:138:5, col:27> col:5 used Stats 'void (IPRateMonitor *)'
| `-ParmVarDecl 0x559ba0a83e18 <col:11, col:26> col:26 m 'IPRateMonitor *'
|-CXXDestructorDecl 0x559ba0a83ff0 <line:139:5, col:12> col:5 used ~Stats 'void () noexcept'
|-AccessSpecDecl 0x559ba0a840d0 <line:141:3, col:10> col:3 private
|-FieldDecl 0x559ba0a84108 <line:142:5, col:20> col:20 _rm 'IPRateMonitor *'
`-CXXConstructorDecl 0x559ba0a95ad8 <line:130:10> col:10 implicit constexpr Stats 'void (const IPRateMonitor::Stats &)' inline default trivial noexcept-unevaluated 0x559ba0a95ad8
  `-ParmVarDecl 0x559ba0a95be8 <col:10> col:10 'const IPRateMonitor::Stats &'

Layout: <CGRecordLayout
  LLVMType:%"struct.IPRateMonitor::Stats" = type { %"struct.IPRateMonitor::Counter"*, %"struct.IPRateMonitor::Stats"*, %"struct.IPRateMonitor::Stats"*, [256 x %"struct.IPRateMonitor::Counter"*], %class.IPRateMonitor* }
  NonVirtualBaseLLVMType:%"struct.IPRateMonitor::Stats" = type { %"struct.IPRateMonitor::Counter"*, %"struct.IPRateMonitor::Stats"*, %"struct.IPRateMonitor::Stats"*, [256 x %"struct.IPRateMonitor::Counter"*], %class.IPRateMonitor* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0a7b330 <../elements/ip/ipratemon.hh:70:1, line:193:1> line:70:7 class IPRateMonitor definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x559ba0a7b488 <col:1, col:7> col:7 implicit referenced class IPRateMonitor
|-AccessSpecDecl 0x559ba0a7b518 <line:71:1, col:7> col:1 public
|-EnumDecl 0x559ba0a7b540 <line:73:5, line:76:5> line:73:5
| |-EnumConstantDecl 0x559ba0a7b640 <line:74:2, col:20> col:2 referenced stability_shift 'IPRateMonitor::(anonymous enum at ../elements/ip/ipratemon.hh:73:5)'
| | `-ImplicitCastExpr 0x559ba0a7b720 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a7b620 <col:20> 'int' Int: 5
| |     `-IntegerLiteral 0x559ba0a7b600 <col:20> 'int' 5
| `-EnumConstantDecl 0x559ba0a7b6d0 <line:75:2, col:10> col:2 referenced scale 'IPRateMonitor::(anonymous enum at ../elements/ip/ipratemon.hh:73:5)'
|   `-ImplicitCastExpr 0x559ba0a7b738 <col:10> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0a7b6b0 <col:10> 'int' Int: 10
|       `-IntegerLiteral 0x559ba0a7b690 <col:10> 'int' 10
|-CXXRecordDecl 0x559ba0a7b750 <line:78:5, line:90:5> line:78:12 referenced struct EWMAParameters definition
| |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-public 'FixedEWMAXParameters<stability_shift, scale>':'FixedEWMAXParameters<5, 10, unsigned int, int>'
| |-CXXRecordDecl 0x559ba0a7c0b0 <col:5, col:12> col:12 implicit struct EWMAParameters
| |-EnumDecl 0x559ba0a7c140 <line:79:2, line:81:2> line:79:2
| | `-EnumConstantDecl 0x559ba0a7c240 <line:80:6, col:19> col:6 referenced rate_count 'IPRateMonitor::EWMAParameters::(anonymous enum at ../elements/ip/ipratemon.hh:79:2)'
| |   `-ImplicitCastExpr 0x559ba0a7c290 <col:19> 'unsigned int' <IntegralCast>
| |     `-ConstantExpr 0x559ba0a7c220 <col:19> 'int' Int: 2
| |       `-IntegerLiteral 0x559ba0a7c200 <col:19> 'int' 2
| |-CXXMethodDecl 0x559ba0a7c300 <line:83:2, line:85:2> line:83:18 used epoch 'unsigned int ()' static
| | `-CompoundStmt 0x559ba0a87320 <col:26, line:85:2>
| |   `-ReturnStmt 0x559ba0a87310 <line:84:6, col:32>
| |     `-BinaryOperator 0x559ba0a872f0 <col:13, col:32> 'click_jiffies_t':'unsigned int' '>>'
| |       |-CallExpr 0x559ba0a872b0 <col:13, col:27> 'click_jiffies_t':'unsigned int'
| |       | `-ImplicitCastExpr 0x559ba0a87298 <col:13> 'click_jiffies_t (*)()' <FunctionToPointerDecay>
| |       |   `-DeclRefExpr 0x559ba0a87278 <col:13> 'click_jiffies_t ()' lvalue Function 0x559ba075f028 'click_jiffies' 'click_jiffies_t ()'
| |       `-IntegerLiteral 0x559ba0a872d0 <col:32> 'int' 3
| |-CXXMethodDecl 0x559ba0a7c3c8 <line:87:2, line:89:2> line:87:18 used epoch_frequency 'unsigned int ()' static
| | `-CompoundStmt 0x559ba0a873c0 <col:36, line:89:2>
| |   `-ReturnStmt 0x559ba0a873b0 <line:88:6, col:21>
| |     `-ImplicitCastExpr 0x559ba0a87398 <col:13, col:21> 'unsigned int' <IntegralCast>
| |       `-BinaryOperator 0x559ba0a87378 <col:13, col:21> 'int' '>>'
| |         |-IntegerLiteral 0x559ba0a87338 <col:13> 'int' 1000
| |         `-IntegerLiteral 0x559ba0a87358 <col:21> 'int' 3
| |-CXXConstructorDecl 0x559ba0a87a98 <line:78:12> col:12 implicit used constexpr EWMAParameters 'void (const IPRateMonitor::EWMAParameters &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559ba0a87ba8 <col:12> col:12 used 'const IPRateMonitor::EWMAParameters &'
| | |-CXXCtorInitializer 'FixedEWMAXParameters<stability_shift, scale>':'FixedEWMAXParameters<5, 10, unsigned int, int>'
| | | `-CXXConstructExpr 0x559ba0a88a90 <col:12> 'FixedEWMAXParameters<stability_shift, scale>':'FixedEWMAXParameters<5, 10, unsigned int, int>' 'void (const FixedEWMAXParameters<5, 10, unsigned int, int> &) noexcept'
| | |   `-ImplicitCastExpr 0x559ba0a88a60 <col:12> 'const FixedEWMAXParameters<stability_shift, scale>':'const FixedEWMAXParameters<5, 10, unsigned int, int>' lvalue <UncheckedDerivedToBase (FixedEWMAXParameters)>
| | |     `-DeclRefExpr 0x559ba0a88a40 <col:12> 'const IPRateMonitor::EWMAParameters' lvalue ParmVar 0x559ba0a87ba8 '' 'const IPRateMonitor::EWMAParameters &'
| | `-CompoundStmt 0x559ba0a88b38 <col:12>
| |-CXXConstructorDecl 0x559ba0a87d28 <col:12> col:12 implicit constexpr EWMAParameters 'void (IPRateMonitor::EWMAParameters &&)' inline default trivial noexcept-unevaluated 0x559ba0a87d28
| | `-ParmVarDecl 0x559ba0a87e38 <col:12> col:12 'IPRateMonitor::EWMAParameters &&'
| |-CXXDestructorDecl 0x559ba0a88058 <col:12> col:12 implicit ~EWMAParameters 'void () noexcept' inline default trivial
| `-CXXConstructorDecl 0x559ba0a88880 <col:12> col:12 implicit constexpr EWMAParameters 'void ()' inline default trivial noexcept-unevaluated 0x559ba0a88880
|-CXXConstructorDecl 0x559ba0a7c4e0 <line:93:5, col:19> col:5 IPRateMonitor 'void ()'
|-CXXDestructorDecl 0x559ba0a7c5d0 <line:94:5, col:20> col:5 ~IPRateMonitor 'void ()' noexcept-unevaluated 0x559ba0a7c5d0
| `-Overrides: [ 0x559ba0a0bb58 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x559ba0a7c700 <line:96:3, col:60> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x559ba0a0cfb8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x559ba0a87428 <col:34, col:60>
|   `-ReturnStmt 0x559ba0a87418 <col:36, col:43>
|     `-ImplicitCastExpr 0x559ba0a87400 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x559ba0a873d8 <col:43> 'const char [14]' lvalue "IPRateMonitor"
|-CXXMethodDecl 0x559ba0a7c7c8 <line:97:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x559ba0a0d080 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x559ba0a87488 <col:34, col:54>
|   `-ReturnStmt 0x559ba0a87478 <col:36, col:43>
|     `-ImplicitCastExpr 0x559ba0a87460 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x559ba0a87440 <col:43> 'const char [8]' lvalue "1-2/1-2"
|-CXXMethodDecl 0x559ba0a7caa0 <line:99:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x559ba0a0e850 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x559ba0a7c950 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x559ba0a7c9c8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a7cbf8 <line:100:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x559ba0a0eaa0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x559ba0a7cb60 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a7cd40 <line:101:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x559ba0a0f2b8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x559ba0a7ccb0 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x559ba0a7ce08 <line:103:3, line:105:3> line:103:8 set_resettime 'void ()'
| `-CompoundStmt 0x559ba0a875d0 <col:24, line:105:3>
|   `-BinaryOperator 0x559ba0a875b0 <line:104:7, col:42> 'unsigned long' lvalue '='
|     |-MemberExpr 0x559ba0a874b0 <col:7> 'unsigned long' lvalue ->_resettime 0x559ba0a84ec0
|     | `-CXXThisExpr 0x559ba0a874a0 <col:7> 'IPRateMonitor *' implicit this
|     `-ImplicitCastExpr 0x559ba0a87598 <col:20, col:42> 'unsigned long' <IntegralCast>
|       `-CallExpr 0x559ba0a87578 <col:20, col:42> 'unsigned int'
|         `-ImplicitCastExpr 0x559ba0a87560 <col:20, col:36> 'unsigned int (*)()' <FunctionToPointerDecay>
|           `-DeclRefExpr 0x559ba0a87530 <col:20, col:36> 'unsigned int ()' lvalue CXXMethod 0x559ba0a7c300 'epoch' 'unsigned int ()'
|-CXXMethodDecl 0x559ba0a7d0a8 <line:106:3, col:67> col:8 set_anno_level 'void (unsigned int, unsigned int, unsigned int)'
| |-ParmVarDecl 0x559ba0a7cec0 <col:23, col:32> col:32 addr 'unsigned int'
| |-ParmVarDecl 0x559ba0a7cf40 <col:38, col:47> col:47 level 'unsigned int'
| `-ParmVarDecl 0x559ba0a7cfc0 <col:54, col:63> col:63 when 'unsigned int'
|-CXXMethodDecl 0x559ba0a7d288 <line:108:3, col:32> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x559ba0a0be28 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x559ba0a7d178 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x559ba0a7d1f0 <col:23, col:31> col:31 p 'Packet *'
|-CXXMethodDecl 0x559ba0a7d3e0 <line:109:3, col:24> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x559ba0a0bfb8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x559ba0a7d350 <col:16, col:20> col:20 port 'int'
|-CXXMethodDecl 0x559ba0a7d5c0 <line:111:3, col:29> col:7 llrpc 'int (unsigned int, void *)'
| |-Overrides: [ 0x559ba0a185d0 Element::llrpc 'int (unsigned int, void *)' ]
| |-ParmVarDecl 0x559ba0a7d4a0 <col:13> col:21 'unsigned int'
| `-ParmVarDecl 0x559ba0a7d520 <col:23, col:28> col:29 'void *'
|-TypedefDecl 0x559ba0a7d820 <line:113:3, col:37> col:37 referenced MyEWMA 'RateEWMAX<IPRateMonitor::EWMAParameters>':'RateEWMAX<IPRateMonitor::EWMAParameters>'
| `-TemplateSpecializationType 0x559ba0a7d780 'RateEWMAX<IPRateMonitor::EWMAParameters>' sugar RateEWMAX
|   |-TemplateArgument type 'IPRateMonitor::EWMAParameters'
|   `-RecordType 0x559ba0a7d760 'RateEWMAX<IPRateMonitor::EWMAParameters>'
|     `-ClassTemplateSpecialization 0x559ba0a7d680 'RateEWMAX'
|-CXXRecordDecl 0x559ba0a7d878 <line:114:3, col:10> col:10 referenced struct Stats
|-CXXRecordDecl 0x559ba0a7d930 <col:17, col:24> col:24 struct Counter
|-CXXRecordDecl 0x559ba0a7d9e0 prev 0x559ba0a7d930 <line:116:3, line:128:3> line:116:10 referenced struct Counter definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x559ba0a7dad8 <col:3, col:10> col:10 implicit referenced struct Counter
| |-FieldDecl 0x559ba0a83478 <line:119:5, col:12> col:12 referenced fwd_and_rev_rate 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>'
| |-FieldDecl 0x559ba0a83508 <line:120:5, col:12> col:12 referenced next_level 'IPRateMonitor::Stats *'
| |-FieldDecl 0x559ba0a83570 <line:121:5, col:14> col:14 referenced anno_this 'unsigned int'
| |-CXXConstructorDecl 0x559ba0a83620 <line:122:7, line:124:7> line:122:7 Counter 'void ()'
| | |-CXXCtorInitializer Field 0x559ba0a83478 'fwd_and_rev_rate' 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>'
| | | `-CXXConstructExpr 0x559ba0a886c8 <col:7> 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>' 'void ()'
| | |-CXXCtorInitializer Field 0x559ba0a83508 'next_level' 'IPRateMonitor::Stats *'
| | | `-ImplicitCastExpr 0x559ba0a87628 <line:123:17> 'IPRateMonitor::Stats *' <NullToPointer>
| | |   `-IntegerLiteral 0x559ba0a875e8 <col:17> 'int' 0
| | |-CXXCtorInitializer Field 0x559ba0a83570 'anno_this' 'unsigned int'
| | | `-ImplicitCastExpr 0x559ba0a876a8 <col:31> 'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x559ba0a87668 <col:31> 'int' 0
| | `-CompoundStmt 0x559ba0a88730 <col:34, line:124:7>
| `-CXXConstructorDecl 0x559ba0a83828 <line:125:7, line:127:7> line:125:7 Counter 'void (const IPRateMonitor::MyEWMA &)'
|   |-ParmVarDecl 0x559ba0a83738 <col:15, col:29> col:29 used ewma 'const IPRateMonitor::MyEWMA &'
|   |-CXXCtorInitializer Field 0x559ba0a83478 'fwd_and_rev_rate' 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>'
|   | `-CXXConstructExpr 0x559ba0a89158 <line:126:6, col:27> 'IPRateMonitor::MyEWMA':'RateEWMAX<IPRateMonitor::EWMAParameters>' 'void (const RateEWMAX<IPRateMonitor::EWMAParameters> &) noexcept'
|   |   `-DeclRefExpr 0x559ba0a88740 <col:23> 'const IPRateMonitor::MyEWMA':'const RateEWMAX<IPRateMonitor::EWMAParameters>' lvalue ParmVar 0x559ba0a83738 'ewma' 'const IPRateMonitor::MyEWMA &'
|   |-CXXCtorInitializer Field 0x559ba0a83508 'next_level' 'IPRateMonitor::Stats *'
|   | `-ImplicitCastExpr 0x559ba0a891f0 <col:41> 'IPRateMonitor::Stats *' <NullToPointer>
|   |   `-IntegerLiteral 0x559ba0a891b0 <col:41> 'int' 0
|   |-CXXCtorInitializer Field 0x559ba0a83570 'anno_this' 'unsigned int'
|   | `-ImplicitCastExpr 0x559ba0a89270 <col:55> 'unsigned int' <IntegralCast>
|   |   `-IntegerLiteral 0x559ba0a89230 <col:55> 'int' 0
|   `-CompoundStmt 0x559ba0a892c8 <col:58, line:127:7>
|-CXXRecordDecl 0x559ba0a838f0 prev 0x559ba0a7d878 <line:130:3, line:143:3> line:130:10 referenced struct Stats definition
| |-DefinitionData has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x559ba0a839e8 <col:3, col:10> col:10 implicit referenced struct Stats
| |-EnumDecl 0x559ba0a83a78 <line:132:5, col:31> col:5
| | `-EnumConstantDecl 0x559ba0a83b80 <col:12, col:27> col:12 referenced MAX_COUNTERS 'IPRateMonitor::Stats::(anonymous enum at ../elements/ip/ipratemon.hh:132:5)'
| |   `-ImplicitCastExpr 0x559ba0a83bd0 <col:27> 'unsigned int' <IntegralCast>
| |     `-ConstantExpr 0x559ba0a83b60 <col:27> 'int' Int: 256
| |       `-IntegerLiteral 0x559ba0a83b40 <col:27> 'int' 256
| |-FieldDecl 0x559ba0a83bf8 <line:134:5, col:14> col:14 referenced _parent 'IPRateMonitor::Counter *'
| |-FieldDecl 0x559ba0a83c58 <line:135:5, col:12> col:12 referenced _prev 'IPRateMonitor::Stats *'
| |-FieldDecl 0x559ba0a83cb8 <col:5, col:20> col:20 referenced _next 'IPRateMonitor::Stats *'
| |-FieldDecl 0x559ba0a83db8 <line:137:5, col:34> col:14 referenced counter 'IPRateMonitor::Counter *[256]'
| |-CXXConstructorDecl 0x559ba0a83ef8 <line:138:5, col:27> col:5 used Stats 'void (IPRateMonitor *)'
| | `-ParmVarDecl 0x559ba0a83e18 <col:11, col:26> col:26 m 'IPRateMonitor *'
| |-CXXDestructorDecl 0x559ba0a83ff0 <line:139:5, col:12> col:5 used ~Stats 'void () noexcept'
| |-AccessSpecDecl 0x559ba0a840d0 <line:141:3, col:10> col:3 private
| |-FieldDecl 0x559ba0a84108 <line:142:5, col:20> col:20 _rm 'IPRateMonitor *'
| `-CXXConstructorDecl 0x559ba0a95ad8 <line:130:10> col:10 implicit constexpr Stats 'void (const IPRateMonitor::Stats &)' inline default trivial noexcept-unevaluated 0x559ba0a95ad8
|   `-ParmVarDecl 0x559ba0a95be8 <col:10> col:10 'const IPRateMonitor::Stats &'
|-AccessSpecDecl 0x559ba0a84158 <line:145:1, col:10> col:1 protected
|-FriendDecl 0x559ba0a841d0 <line:148:3, col:17> col:10 'struct Stats':'IPRateMonitor::Stats'
|-CXXMethodDecl 0x559ba0a842e8 <line:149:3, col:48> col:8 set_prev 'void (IPRateMonitor::Stats *)'
| |-ParmVarDecl 0x559ba0a84220 <col:17, col:24> col:24 used s 'IPRateMonitor::Stats *'
| `-CompoundStmt 0x559ba0a89370 <col:27, col:48>
|   `-BinaryOperator 0x559ba0a89350 <col:29, col:45> 'IPRateMonitor::Stats *' lvalue '='
|     |-MemberExpr 0x559ba0a892e8 <col:29> 'IPRateMonitor::Stats *' lvalue ->_prev_deleted 0x559ba0a85058
|     | `-CXXThisExpr 0x559ba0a892d8 <col:29> 'IPRateMonitor *' implicit this
|     `-ImplicitCastExpr 0x559ba0a89338 <col:45> 'IPRateMonitor::Stats *' <LValueToRValue>
|       `-DeclRefExpr 0x559ba0a89318 <col:45> 'IPRateMonitor::Stats *' lvalue ParmVar 0x559ba0a84220 's' 'IPRateMonitor::Stats *'
|-CXXMethodDecl 0x559ba0a84430 <line:150:3, col:48> col:8 set_next 'void (IPRateMonitor::Stats *)'
| |-ParmVarDecl 0x559ba0a843a0 <col:17, col:24> col:24 used s 'IPRateMonitor::Stats *'
| `-CompoundStmt 0x559ba0a89420 <col:27, col:48>
|   `-BinaryOperator 0x559ba0a89400 <col:29, col:45> 'IPRateMonitor::Stats *' lvalue '='
|     |-MemberExpr 0x559ba0a89398 <col:29> 'IPRateMonitor::Stats *' lvalue ->_next_deleted 0x559ba0a850b8
|     | `-CXXThisExpr 0x559ba0a89388 <col:29> 'IPRateMonitor *' implicit this
|     `-ImplicitCastExpr 0x559ba0a893e8 <col:45> 'IPRateMonitor::Stats *' <LValueToRValue>
|       `-DeclRefExpr 0x559ba0a893c8 <col:45> 'IPRateMonitor::Stats *' lvalue ParmVar 0x559ba0a843a0 's' 'IPRateMonitor::Stats *'
|-CXXMethodDecl 0x559ba0a84578 <line:151:3, col:42> col:8 set_first 'void (IPRateMonitor::Stats *)'
| |-ParmVarDecl 0x559ba0a844e8 <col:18, col:25> col:25 used s 'IPRateMonitor::Stats *'
| `-CompoundStmt 0x559ba0a894d0 <col:28, col:42>
|   `-BinaryOperator 0x559ba0a894b0 <col:30, col:39> 'IPRateMonitor::Stats *' lvalue '='
|     |-MemberExpr 0x559ba0a89448 <col:30> 'IPRateMonitor::Stats *' lvalue ->_first 0x559ba0a84f80
|     | `-CXXThisExpr 0x559ba0a89438 <col:30> 'IPRateMonitor *' implicit this
|     `-ImplicitCastExpr 0x559ba0a89498 <col:39> 'IPRateMonitor::Stats *' <LValueToRValue>
|       `-DeclRefExpr 0x559ba0a89478 <col:39> 'IPRateMonitor::Stats *' lvalue ParmVar 0x559ba0a844e8 's' 'IPRateMonitor::Stats *'
|-CXXMethodDecl 0x559ba0a846c0 <line:152:3, col:40> col:8 set_last 'void (IPRateMonitor::Stats *)'
| |-ParmVarDecl 0x559ba0a84630 <col:17, col:24> col:24 used s 'IPRateMonitor::Stats *'
| `-CompoundStmt 0x559ba0a89580 <col:27, col:40>
|   `-BinaryOperator 0x559ba0a89560 <col:29, col:37> 'IPRateMonitor::Stats *' lvalue '='
|     |-MemberExpr 0x559ba0a894f8 <col:29> 'IPRateMonitor::Stats *' lvalue ->_last 0x559ba0a84fe0
|     | `-CXXThisExpr 0x559ba0a894e8 <col:29> 'IPRateMonitor *' implicit this
|     `-ImplicitCastExpr 0x559ba0a89548 <col:37> 'IPRateMonitor::Stats *' <LValueToRValue>
|       `-DeclRefExpr 0x559ba0a89528 <col:37> 'IPRateMonitor::Stats *' lvalue ParmVar 0x559ba0a84630 's' 'IPRateMonitor::Stats *'
|-CXXMethodDecl 0x559ba0a84838 <line:153:3, col:59> col:8 update_alloced_mem 'void (ssize_t)'
| |-ParmVarDecl 0x559ba0a84778 <col:27, col:35> col:35 used m 'ssize_t':'long'
| `-CompoundStmt 0x559ba0a89658 <col:38, col:59>
|   `-CompoundAssignOperator 0x559ba0a89628 <col:40, col:56> 'size_t':'unsigned long' lvalue '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|     |-MemberExpr 0x559ba0a895a8 <col:40> 'size_t':'unsigned long' lvalue ->_alloced_mem 0x559ba0a84f20
|     | `-CXXThisExpr 0x559ba0a89598 <col:40> 'IPRateMonitor *' implicit this
|     `-ImplicitCastExpr 0x559ba0a89610 <col:56> 'unsigned long' <IntegralCast>
|       `-ImplicitCastExpr 0x559ba0a895f8 <col:56> 'ssize_t':'long' <LValueToRValue>
|         `-DeclRefExpr 0x559ba0a895d8 <col:56> 'ssize_t':'long' lvalue ParmVar 0x559ba0a84778 'm' 'ssize_t':'long'
|-AccessSpecDecl 0x559ba0a848e0 <line:155:1, col:8> col:1 private
|-EnumDecl 0x559ba0a84908 <line:157:3, col:70> col:3
| |-EnumConstantDecl 0x559ba0a84a10 <col:10, col:22> col:10 MAX_SHIFT 'IPRateMonitor::(anonymous enum at ../elements/ip/ipratemon.hh:157:3)'
| | `-ImplicitCastExpr 0x559ba0a84b80 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a849f0 <col:22> 'int' Int: 24
| |     `-IntegerLiteral 0x559ba0a849d0 <col:22> 'int' 24
| |-EnumConstantDecl 0x559ba0a84aa0 <col:26, col:47> col:26 PERIODIC_FOLD_INIT 'IPRateMonitor::(anonymous enum at ../elements/ip/ipratemon.hh:157:3)'
| | `-ImplicitCastExpr 0x559ba0a84b98 <col:47> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0a84a80 <col:47> 'int' Int: 8192
| |     `-IntegerLiteral 0x559ba0a84a60 <col:47> 'int' 8192
| `-EnumConstantDecl 0x559ba0a84b30 <col:53, col:66> col:53 MEMMAX_MIN 'IPRateMonitor::(anonymous enum at ../elements/ip/ipratemon.hh:157:3)'
|   `-ImplicitCastExpr 0x559ba0a84bb0 <col:66> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0a84b10 <col:66> 'int' Int: 100
|       `-IntegerLiteral 0x559ba0a84af0 <col:66> 'int' 100
|-FieldDecl 0x559ba0a84bd8 <line:160:3, col:8> col:8 referenced _count_packets 'bool'
|-FieldDecl 0x559ba0a84c38 <line:161:3, col:8> col:8 referenced _anno_packets 'bool'
|-FieldDecl 0x559ba0a84ca0 <line:162:3, col:7> col:7 referenced _thresh 'int'
|-FieldDecl 0x559ba0a84d00 <line:163:3, col:10> col:10 referenced _memmax 'size_t':'unsigned long'
|-FieldDecl 0x559ba0a84d68 <line:164:3, col:16> col:16 _ratio 'unsigned int'
|-FieldDecl 0x559ba0a84df8 <line:165:3, col:13> col:13 _lock 'Spinlock *'
|-FieldDecl 0x559ba0a84e58 <line:167:3, col:10> col:10 referenced _base 'IPRateMonitor::Stats *'
|-FieldDecl 0x559ba0a84ec0 <line:168:3, col:21> col:21 referenced _resettime 'unsigned long'
|-FieldDecl 0x559ba0a84f20 <line:169:3, col:10> col:10 referenced _alloced_mem 'size_t':'unsigned long'
|-FieldDecl 0x559ba0a84f80 <line:170:3, col:10> col:10 referenced _first 'IPRateMonitor::Stats *'
|-FieldDecl 0x559ba0a84fe0 <col:3, col:19> col:19 referenced _last 'IPRateMonitor::Stats *'
|-FieldDecl 0x559ba0a85058 <line:172:3, col:10> col:10 referenced _prev_deleted 'IPRateMonitor::Stats *'
|-FieldDecl 0x559ba0a850b8 <col:3, col:26> col:26 referenced _next_deleted 'IPRateMonitor::Stats *'
|-CXXMethodDecl 0x559ba0a85308 <line:174:3, col:41> col:8 update_rates 'void (Packet *, bool, bool)'
| |-ParmVarDecl 0x559ba0a85130 <col:21, col:28> col:29 'Packet *'
| |-ParmVarDecl 0x559ba0a851a8 <col:31> col:35 'bool'
| `-ParmVarDecl 0x559ba0a85220 <col:37> col:41 'bool'
|-CXXMethodDecl 0x559ba0a856c8 <line:175:3, col:50> col:8 used update 'void (unsigned int, int, Packet *, bool, bool)'
| |-ParmVarDecl 0x559ba0a853d8 <col:15> col:23 'unsigned int'
| |-ParmVarDecl 0x559ba0a85458 <col:25> col:28 'int'
| |-ParmVarDecl 0x559ba0a854d0 <col:30, col:37> col:38 'Packet *'
| |-ParmVarDecl 0x559ba0a85548 <col:40> col:44 'bool'
| `-ParmVarDecl 0x559ba0a855c0 <col:46> col:50 'bool'
|-CXXMethodDecl 0x559ba0a857b0 <line:176:3, col:20> col:8 forced_fold 'void ()'
|-CXXMethodDecl 0x559ba0a858f8 <line:177:3, col:16> col:8 used fold 'void (int)'
| `-ParmVarDecl 0x559ba0a85868 <col:13> col:16 'int'
|-CXXMethodDecl 0x559ba0a85c28 <line:178:3, col:57> col:12 used make_counter 'IPRateMonitor::Counter *(IPRateMonitor::Stats *, unsigned char, IPRateMonitor::MyEWMA *)'
| |-ParmVarDecl 0x559ba0a859b0 <col:25, col:31> col:32 'IPRateMonitor::Stats *'
| |-ParmVarDecl 0x559ba0a85a30 <col:34, col:43> col:47 'unsigned char'
| `-ParmVarDecl 0x559ba0a85b08 <col:49, col:56> col:57 'IPRateMonitor::MyEWMA *'
|-CXXMethodDecl 0x559ba0a85d78 <line:180:3, col:25> col:8 show_agelist 'void ()'
|-CXXMethodDecl 0x559ba0a85f78 <line:182:3, col:40> col:10 print 'String (IPRateMonitor::Stats *, String)'
| |-ParmVarDecl 0x559ba0a85e28 <col:16, col:23> col:23 s 'IPRateMonitor::Stats *'
| `-ParmVarDecl 0x559ba0a85ea0 <col:26, col:38> col:33 ip 'String' cinit destroyed
|   `-ExprWithCleanups 0x559ba0a87218 <col:38> 'String'
|     `-CXXBindTemporaryExpr 0x559ba0a871f8 <col:38> 'String' (CXXTemporary 0x559ba0a871f8)
|       `-CXXConstructExpr 0x559ba0a871c0 <col:38> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x559ba0a871a8 <col:38> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x559ba0a87188 <col:38> 'String' (CXXTemporary 0x559ba0a87188)
|             `-ImplicitCastExpr 0x559ba0a87168 <col:38> 'String' <ConstructorConversion>
|               `-CXXConstructExpr 0x559ba0a87138 <col:38> 'String' 'void (const char *)'
|                 `-ImplicitCastExpr 0x559ba0a87120 <col:38> 'const char *' <ArrayToPointerDecay>
|                   `-StringLiteral 0x559ba0a87108 <col:38> 'const char [1]' lvalue ""
|-CXXMethodDecl 0x559ba0a86048 <line:184:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x559ba0a0e920 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x559ba0a86210 <line:185:3, col:53> col:17 look_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559ba0a860f8 <col:35, col:44> col:44 e 'Element *'
| `-ParmVarDecl 0x559ba0a86178 <col:47, col:52> col:53 'void *'
|-CXXMethodDecl 0x559ba0a863e8 <line:186:3, col:53> col:17 what_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559ba0a862d0 <col:35, col:44> col:44 e 'Element *'
| `-ParmVarDecl 0x559ba0a86350 <col:47, col:52> col:53 'void *'
|-CXXMethodDecl 0x559ba0a866c8 <line:187:3, line:188:55> line:187:14 reset_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559ba0a864a8 <line:188:6, col:19> col:20 'const String &'
| |-ParmVarDecl 0x559ba0a86520 <col:22, col:30> col:31 'Element *'
| |-ParmVarDecl 0x559ba0a865a0 <col:33, col:38> col:39 'void *'
| `-ParmVarDecl 0x559ba0a86618 <col:41, col:54> col:55 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a869b8 <line:189:3, line:190:55> line:189:14 memmax_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559ba0a86798 <line:190:6, col:19> col:20 'const String &'
| |-ParmVarDecl 0x559ba0a86810 <col:22, col:30> col:31 'Element *'
| |-ParmVarDecl 0x559ba0a86890 <col:33, col:38> col:39 'void *'
| `-ParmVarDecl 0x559ba0a86908 <col:41, col:54> col:55 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0a86ca8 <line:191:3, line:192:55> line:191:14 anno_level_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559ba0a86a88 <line:192:6, col:19> col:20 'const String &'
| |-ParmVarDecl 0x559ba0a86b00 <col:22, col:30> col:31 'Element *'
| |-ParmVarDecl 0x559ba0a86b80 <col:33, col:38> col:39 'void *'
| `-ParmVarDecl 0x559ba0a86bf8 <col:41, col:54> col:55 'ErrorHandler *'
|-CXXConstructorDecl 0x559ba0a86d98 <line:70:7> col:7 implicit IPRateMonitor 'void (const IPRateMonitor &)' inline default_delete noexcept-unevaluated 0x559ba0a86d98
| `-ParmVarDecl 0x559ba0a86ea8 <col:7> col:7 'const IPRateMonitor &'
`-CXXMethodDecl 0x559ba0a86f48 <col:7> col:7 implicit operator= 'IPRateMonitor &(const IPRateMonitor &)' inline default_delete noexcept-unevaluated 0x559ba0a86f48
  `-ParmVarDecl 0x559ba0a87058 <col:7> col:7 'const IPRateMonitor &'

Layout: <CGRecordLayout
  LLVMType:%class.IPRateMonitor = type { %class.Element.base, i8, i8, i32, i64, i32, %class.Spinlock*, %"struct.IPRateMonitor::Stats"*, i64, i64, %"struct.IPRateMonitor::Stats"*, %"struct.IPRateMonitor::Stats"*, %"struct.IPRateMonitor::Stats"*, %"struct.IPRateMonitor::Stats"* }
  NonVirtualBaseLLVMType:%class.IPRateMonitor = type { %class.Element.base, i8, i8, i32, i64, i32, %class.Spinlock*, %"struct.IPRateMonitor::Stats"*, i64, i64, %"struct.IPRateMonitor::Stats"*, %"struct.IPRateMonitor::Stats"*, %"struct.IPRateMonitor::Stats"*, %"struct.IPRateMonitor::Stats"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba07e4230 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x559ba07e4348 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x559ba07e43e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x559ba07e4448 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x559ba07e44a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x559ba07e4558 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba07e4860 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba07e4978 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x559ba07e4a20 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x559ba07e4a88 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x559ba07e4b18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x559ba07e70b0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559ba07e9758 <col:12>
|-CXXConstructorDecl 0x559ba07e71b8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba07e72c8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x559ba07e4a20 'data' 'const char *'
| | `-ImplicitCastExpr 0x559ba07ebce0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x559ba07ebcb0 <col:12> 'const char *const' lvalue .data 0x559ba07e4a20
| |     `-DeclRefExpr 0x559ba07ebc90 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07e72c8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x559ba07e4a88 'length' 'int'
| | `-ImplicitCastExpr 0x559ba07ebd70 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559ba07ebd40 <col:12> 'const int' lvalue .length 0x559ba07e4a88
| |     `-DeclRefExpr 0x559ba07ebd20 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07e72c8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x559ba07e4b18 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x559ba07ebe00 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x559ba07ebdd0 <col:12> 'String::memo_t *const' lvalue .memo 0x559ba07e4b18
| |     `-DeclRefExpr 0x559ba07ebdb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07e72c8 '' 'const String::rep_t &'
| `-CompoundStmt 0x559ba07ebe58 <col:12>
|-CXXConstructorDecl 0x559ba07e95d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559ba07e95d8
| `-ParmVarDecl 0x559ba07e96e8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x559ba07f0ba0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559ba07fa5a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba07fa6b8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x559ba07fabd0 <col:12>
|   |-BinaryOperator 0x559ba07fa9e8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x559ba07fa9a0 <col:12> 'const char *' lvalue ->data 0x559ba07e4a20
|   | | `-CXXThisExpr 0x559ba07fa990 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559ba07fa9d0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x559ba07fa960 <col:12> 'const char *const' lvalue .data 0x559ba07e4a20
|   |     `-DeclRefExpr 0x559ba07fa940 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07fa6b8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x559ba07faab0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x559ba07faa68 <col:12> 'int' lvalue ->length 0x559ba07e4a88
|   | | `-CXXThisExpr 0x559ba07faa58 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559ba07faa98 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x559ba07faa28 <col:12> 'const int' lvalue .length 0x559ba07e4a88
|   |     `-DeclRefExpr 0x559ba07faa08 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07fa6b8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x559ba07fab78 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x559ba07fab30 <col:12> 'String::memo_t *' lvalue ->memo 0x559ba07e4b18
|   | | `-CXXThisExpr 0x559ba07fab20 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559ba07fab60 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x559ba07faaf0 <col:12> 'String::memo_t *const' lvalue .memo 0x559ba07e4b18
|   |     `-DeclRefExpr 0x559ba07faad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07fa6b8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x559ba07fabc0 <col:12>
|     `-UnaryOperator 0x559ba07faba8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ba07fab98 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x559ba07fa728 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559ba07fa728
  `-ParmVarDecl 0x559ba07fa838 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba07da710 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ba07da828 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x559ba07da8b8 <col:16, col:22> col:16 public
|-TypedefDecl 0x559ba07da8f8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x559ba04a8fd0 'const char *'
|   `-QualType 0x559ba04a8521 'const char' const
|     `-BuiltinType 0x559ba04a8520 'char'
|-TypedefDecl 0x559ba07da980 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x559ba07da950 'String::const_iterator' sugar
|   |-Typedef 0x559ba07da8f8 'const_iterator'
|   `-PointerType 0x559ba04a8fd0 'const char *'
|     `-QualType 0x559ba04a8521 'const char' const
|       `-BuiltinType 0x559ba04a8520 'char'
|-TypedefDecl 0x559ba07daaf0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x559ba07daa60 'int (String::*)() const'
|   |-RecordType 0x559ba07da7a0 'String'
|   | `-CXXRecord 0x559ba07da710 'String'
|   `-ParenType 0x559ba07daa00 'int () const' sugar
|     `-FunctionProtoType 0x559ba07b0540 'int () const' const cdecl
|       `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba07dab58 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x559ba05ff800 'int64_t' sugar
|   |-Typedef 0x559ba0511390 'int64_t'
|   `-TypedefType 0x559ba04ea630 '__int64_t' sugar
|     |-Typedef 0x559ba04ea208 '__int64_t'
|     `-BuiltinType 0x559ba04a85a0 'long'
|-TypedefDecl 0x559ba07dabc0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x559ba05ff720 'uint64_t' sugar
|   |-Typedef 0x559ba0511530 'uint64_t'
|   `-TypedefType 0x559ba04ea6c0 '__uint64_t' sugar
|     |-Typedef 0x559ba04ea278 '__uint64_t'
|     `-BuiltinType 0x559ba04a8640 'unsigned long'
|-TypedefDecl 0x559ba07dac50 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x559ba07dac20 'String::intmax_t' sugar
|   |-Typedef 0x559ba07dab58 'intmax_t'
|   `-TypedefType 0x559ba05ff800 'int64_t' sugar
|     |-Typedef 0x559ba0511390 'int64_t'
|     `-TypedefType 0x559ba04ea630 '__int64_t' sugar
|       |-Typedef 0x559ba04ea208 '__int64_t'
|       `-BuiltinType 0x559ba04a85a0 'long'
|-TypedefDecl 0x559ba07dace0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x559ba07dacb0 'String::uintmax_t' sugar
|   |-Typedef 0x559ba07dabc0 'uintmax_t'
|   `-TypedefType 0x559ba05ff720 'uint64_t' sugar
|     |-Typedef 0x559ba0511530 'uint64_t'
|     `-TypedefType 0x559ba04ea6c0 '__uint64_t' sugar
|       |-Typedef 0x559ba04ea278 '__uint64_t'
|       `-BuiltinType 0x559ba04a8640 'unsigned long'
|-CXXConstructorDecl 0x559ba07dada0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x559ba07daf48 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x559ba07dae88 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x559ba07db0f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x559ba07db038 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x559ba07db250 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x559ba07db1c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x559ba07db468 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x559ba07db318 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x559ba07db398 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x559ba07db688 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x559ba07db538 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x559ba07db5b8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x559ba07db8a8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x559ba07db758 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x559ba07db7d8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x559ba07dbac8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x559ba07db978 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x559ba07db9f8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x559ba07dbc58 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x559ba07dbb90 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x559ba07dbdd8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x559ba07dbd18 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x559ba07dbf68 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x559ba07dbea0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x559ba07dc0c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x559ba07dc030 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x559ba07dc218 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x559ba07dc188 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x559ba07dc370 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x559ba07dc2e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x559ba07dc4f8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x559ba07dc438 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x559ba07dc688 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x559ba07dc5c0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x559ba07dc818 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x559ba07dc750 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x559ba07dc9a8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x559ba07dc8e0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x559ba07dcaa0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x559ba07dcbc8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x559ba07dcd48 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x559ba07dcc80 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x559ba07dce98 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x559ba07dce08 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x559ba07dcf40 <col:63> "" ""
|-CXXMethodDecl 0x559ba07dd088 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x559ba07dcfc8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x559ba07dd298 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x559ba07dd148 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x559ba07dd1c8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x559ba07dd4b8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x559ba07dd360 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x559ba07dd3e0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x559ba07dd798 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x559ba07dd578 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x559ba07dd5f8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x559ba07e6b80 <col:55> 'int' 10
| `-ParmVarDecl 0x559ba07dd670 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ba07e6ba0 <col:76> 'bool' true
|-CXXMethodDecl 0x559ba07dda78 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x559ba07dd860 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x559ba07dd8e0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x559ba07e6bb0 <col:56> 'int' 10
| `-ParmVarDecl 0x559ba07dd958 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ba07e6bd0 <col:77> 'bool' true
|-CXXMethodDecl 0x559ba07ddb80 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x559ba07ddc48 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x559ba07ddd10 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x559ba07dddb0 <col:20>
| `-OptimizeNoneAttr 0x559ba07dde08 <col:30>
|-CXXConversionDecl 0x559ba07ddef8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x559ba07ddfc8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x559ba07de088 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x559ba07de178 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x559ba07de238 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x559ba07df418 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x559ba07df350 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x559ba07df568 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x559ba07df4d8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x559ba07df658 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x559ba07df718 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x559ba07df968 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x559ba07df7d0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x559ba07df850 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x559ba07dfbc8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x559ba07dfa30 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x559ba07dfab0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x559ba07dfc98 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x559ba07dfea8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x559ba07dfd50 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x559ba07dfdd0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x559ba07e00c8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x559ba07dff70 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x559ba07dfff0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x559ba07e0258 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x559ba07e0190 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x559ba07e0348 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x559ba07e04b8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x559ba07e03f8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x559ba07e06c8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x559ba07e0578 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x559ba07e05f8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x559ba07e08e0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x559ba07e0788 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x559ba07e0800 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x559ba07e0a70 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x559ba07e09a0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x559ba07e0c90 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x559ba07e0b30 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x559ba07e0bb0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x559ba07e0de0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x559ba07e0d50 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x559ba07e0fb8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x559ba07e0ea0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x559ba07e0f20 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x559ba07e1108 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x559ba07e1078 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x559ba07e1320 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x559ba07e11c0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x559ba07e1240 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x559ba07e6be0 <col:39> 'int' 0
|-CXXMethodDecl 0x559ba07e1540 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x559ba07e13e0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x559ba07e1460 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x559ba07e6c00 <col:48> 'int' 0
|-CXXMethodDecl 0x559ba07e1720 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x559ba07e1600 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x559ba07e1680 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x559ba07e6c20 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x559ba07e17f0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x559ba07e18b0 <line:130:5, col:20> col:12 used upper 'String () const'
|-CXXMethodDecl 0x559ba07e1970 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x559ba07e1a30 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x559ba07e1af0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x559ba07e1c98 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x559ba07e1ba0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x559ba07e1e18 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x559ba07e1d50 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x559ba07e1f98 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x559ba07e1ed8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x559ba07e2118 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x559ba07e2050 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x559ba07e2260 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x559ba07e21d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x559ba07e23b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x559ba07e2320 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x559ba07e2588 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x559ba07e2470 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x559ba07e24f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x559ba07e2768 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x559ba07e2650 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x559ba07e26d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x559ba07e28b8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x559ba07e2828 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x559ba07e2ac8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x559ba07e2978 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x559ba07e29f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x559ba07e2c28 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x559ba07e2b90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x559ba07e2d80 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x559ba07e2ce8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x559ba07e2e28 <col:57> "" ""
|-CXXMethodDecl 0x559ba07e2f38 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x559ba07e2ea8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x559ba07e3088 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x559ba07e2ff8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x559ba07e3208 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x559ba07e3140 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x559ba07e3360 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x559ba07e3420 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x559ba07e34e0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x559ba07e3580 <col:49> "" ""
|-CXXMethodDecl 0x559ba07e3610 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x559ba07e36d0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x559ba07e37c0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x559ba07e3888 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x559ba07e3948 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x559ba07e3a08 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x559ba07e3b00 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x559ba07e3bc8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x559ba07e3c90 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x559ba07e3e68 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x559ba07e3d48 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x559ba07e3dc8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x559ba07e4090 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x559ba07e3f30 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x559ba07e3fb0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x559ba07e41a0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x559ba07e4208 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x559ba07e4230 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x559ba07e4348 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x559ba07e43e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x559ba07e4448 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x559ba07e44a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x559ba07e4558 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x559ba07e45c0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x559ba07e47f8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x559ba07e4848 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba07e47d8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x559ba07e46e8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x559ba07e4690 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x559ba07e46d0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x559ba07e46b0 <col:32> 'int' 8
|-CXXRecordDecl 0x559ba07e4860 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559ba07e4978 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x559ba07e4a20 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x559ba07e4a88 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x559ba07e4b18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x559ba07e70b0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x559ba07e9758 <col:12>
| |-CXXConstructorDecl 0x559ba07e71b8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559ba07e72c8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x559ba07e4a20 'data' 'const char *'
| | | `-ImplicitCastExpr 0x559ba07ebce0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x559ba07ebcb0 <col:12> 'const char *const' lvalue .data 0x559ba07e4a20
| | |     `-DeclRefExpr 0x559ba07ebc90 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07e72c8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x559ba07e4a88 'length' 'int'
| | | `-ImplicitCastExpr 0x559ba07ebd70 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x559ba07ebd40 <col:12> 'const int' lvalue .length 0x559ba07e4a88
| | |     `-DeclRefExpr 0x559ba07ebd20 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07e72c8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x559ba07e4b18 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x559ba07ebe00 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x559ba07ebdd0 <col:12> 'String::memo_t *const' lvalue .memo 0x559ba07e4b18
| | |     `-DeclRefExpr 0x559ba07ebdb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07e72c8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x559ba07ebe58 <col:12>
| |-CXXConstructorDecl 0x559ba07e95d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559ba07e95d8
| | `-ParmVarDecl 0x559ba07e96e8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x559ba07f0ba0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x559ba07fa5a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559ba07fa6b8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x559ba07fabd0 <col:12>
| |   |-BinaryOperator 0x559ba07fa9e8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x559ba07fa9a0 <col:12> 'const char *' lvalue ->data 0x559ba07e4a20
| |   | | `-CXXThisExpr 0x559ba07fa990 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559ba07fa9d0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x559ba07fa960 <col:12> 'const char *const' lvalue .data 0x559ba07e4a20
| |   |     `-DeclRefExpr 0x559ba07fa940 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07fa6b8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x559ba07faab0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x559ba07faa68 <col:12> 'int' lvalue ->length 0x559ba07e4a88
| |   | | `-CXXThisExpr 0x559ba07faa58 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559ba07faa98 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x559ba07faa28 <col:12> 'const int' lvalue .length 0x559ba07e4a88
| |   |     `-DeclRefExpr 0x559ba07faa08 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07fa6b8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x559ba07fab78 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x559ba07fab30 <col:12> 'String::memo_t *' lvalue ->memo 0x559ba07e4b18
| |   | | `-CXXThisExpr 0x559ba07fab20 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559ba07fab60 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x559ba07faaf0 <col:12> 'String::memo_t *const' lvalue .memo 0x559ba07e4b18
| |   |     `-DeclRefExpr 0x559ba07faad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ba07fa6b8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x559ba07fabc0 <col:12>
| |     `-UnaryOperator 0x559ba07faba8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x559ba07fab98 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x559ba07fa728 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559ba07fa728
|   `-ParmVarDecl 0x559ba07fa838 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x559ba07e4b90 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x559ba07e4dd8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x559ba07e4bf8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x559ba07e4c78 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x559ba07e4cf0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x559ba07e7070 <col:79, line:261:5>
|   |-BinaryOperator 0x559ba07e6ce8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x559ba07e6c80 <col:2, col:5> 'const char *' lvalue .data 0x559ba07e4a20
|   | | `-MemberExpr 0x559ba07e6c50 <col:2> 'String::rep_t' lvalue ->_r 0x559ba07e4b90
|   | |   `-CXXThisExpr 0x559ba07e6c40 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x559ba07e6cd0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559ba07e6cb0 <col:12> 'const char *' lvalue ParmVar 0x559ba07e4bf8 'data' 'const char *'
|   |-BinaryOperator 0x559ba07e6db0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x559ba07e6d48 <col:2, col:5> 'int' lvalue .length 0x559ba07e4a88
|   | | `-MemberExpr 0x559ba07e6d18 <col:2> 'String::rep_t' lvalue ->_r 0x559ba07e4b90
|   | |   `-CXXThisExpr 0x559ba07e6d08 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x559ba07e6d98 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559ba07e6d78 <col:14> 'int' lvalue ParmVar 0x559ba07e4c78 'length' 'int'
|   `-IfStmt 0x559ba07e7058 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x559ba07e6ed0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x559ba07e6eb8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x559ba07e6e98 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x559ba07e6e78 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x559ba07e6e10 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x559ba07e4b18
|     |       | `-MemberExpr 0x559ba07e6de0 <col:7> 'String::rep_t' lvalue ->_r 0x559ba07e4b90
|     |       |   `-CXXThisExpr 0x559ba07e6dd0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x559ba07e6e60 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x559ba07e6e40 <col:17> 'String::memo_t *' lvalue ParmVar 0x559ba07e4cf0 'memo' 'String::memo_t *'
|     `-CallExpr 0x559ba07e7030 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x559ba07e7018 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559ba07e6f20 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x559ba07d3388 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x559ba07e6f88 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x559ba07e43e8
|         `-ImplicitCastExpr 0x559ba07e6f70 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559ba07e6f50 <col:27> 'String::memo_t *' lvalue ParmVar 0x559ba07e4cf0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x559ba07e5088 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x559ba07e4ea8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x559ba07e4f28 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x559ba07e4fa0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x559ba07e4b90 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x559ba07e9768 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x559ba07e98f8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x559ba07e9860 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x559ba07e97d0 <col:2> '<bound member function type>' ->assign_memo 0x559ba07e4dd8
|     | `-ImplicitCastExpr 0x559ba07e9898 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x559ba07e97c0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x559ba07e98b0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x559ba07e9800 <col:14> 'const char *' lvalue ParmVar 0x559ba07e4ea8 'data' 'const char *'
|     |-ImplicitCastExpr 0x559ba07e98c8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x559ba07e9820 <col:20> 'int' lvalue ParmVar 0x559ba07e4f28 'length' 'int'
|     `-ImplicitCastExpr 0x559ba07e98e0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559ba07e9840 <col:28> 'String::memo_t *' lvalue ParmVar 0x559ba07e4fa0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x559ba07e5218 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x559ba07e5158 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x559ba07e9b50 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x559ba07e9ad0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x559ba07e9920 <col:2> '<bound member function type>' ->assign_memo 0x559ba07e4dd8
|     | `-CXXThisExpr 0x559ba07e9910 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x559ba07e9b08 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x559ba07e99a0 <col:14, col:19> 'const char *' lvalue .data 0x559ba07e4a20
|     |   `-MemberExpr 0x559ba07e9970 <col:14, col:16> 'String::rep_t' lvalue ._r 0x559ba07e4b90
|     |     `-DeclRefExpr 0x559ba07e9950 <col:14> 'const String' lvalue ParmVar 0x559ba07e5158 'x' 'const String &'
|     |-ImplicitCastExpr 0x559ba07e9b20 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x559ba07e9a20 <col:25, col:30> 'int' lvalue .length 0x559ba07e4a88
|     |   `-MemberExpr 0x559ba07e99f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x559ba07e4b90
|     |     `-DeclRefExpr 0x559ba07e99d0 <col:25> 'const String' lvalue ParmVar 0x559ba07e5158 'x' 'const String &'
|     `-ImplicitCastExpr 0x559ba07e9b38 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x559ba07e9aa0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x559ba07e4b18
|         `-MemberExpr 0x559ba07e9a70 <col:38, col:40> 'String::rep_t' lvalue ._r 0x559ba07e4b90
|           `-DeclRefExpr 0x559ba07e9a50 <col:38> 'const String' lvalue ParmVar 0x559ba07e5158 'x' 'const String &'
|-CXXMethodDecl 0x559ba07e52e0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x559ba07ea510 <col:31, line:278:5>
|   `-IfStmt 0x559ba07ea4f8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x559ba07e9bf0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x559ba07e9bd8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x559ba07e9ba8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x559ba07e4b18
|     |     `-MemberExpr 0x559ba07e9b78 <col:6> 'String::rep_t' lvalue ->_r 0x559ba07e4b90
|     |       `-CXXThisExpr 0x559ba07e9b68 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x559ba07ea4d0 <col:15, line:277:2>
|       |-ParenExpr 0x559ba07ea0a0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x559ba07ea070 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x559ba07e9d00 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x559ba07e9ce8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x559ba07e9cd0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x559ba07e9c90 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x559ba07e43e8
|       |   |       `-ImplicitCastExpr 0x559ba07e9c78 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x559ba07e9c48 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x559ba07e4b18
|       |   |           `-MemberExpr 0x559ba07e9c18 <col:27> 'String::rep_t' lvalue ->_r 0x559ba07e4b90
|       |   |             `-CXXThisExpr 0x559ba07e9c08 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x559ba07e9d60 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x559ba07e9d40 <col:54> 'int' 0
|       |   `-CallExpr 0x559ba07e9fd0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x559ba07e9fb8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x559ba07e9f38 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x559ba07ea010 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x559ba07e9e48 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x559ba07ea028 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x559ba07e9e78 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x559ba07ea040 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x559ba07e9eb0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x559ba07ea058 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x559ba07e9f20 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x559ba07e9f08 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x559ba07e9ed0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x559ba07ea3f0 <line:274:6, line:275:22>
|       | |-CallExpr 0x559ba07ea2b0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x559ba07ea298 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x559ba07ea210 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x559ba07d67f0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x559ba07ea1e0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x559ba07e43e8
|       | |   `-ImplicitCastExpr 0x559ba07ea1c8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x559ba07ea198 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x559ba07e4b18
|       | |       `-MemberExpr 0x559ba07ea168 <col:40> 'String::rep_t' lvalue ->_r 0x559ba07e4b90
|       | |         `-CXXThisExpr 0x559ba07ea158 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x559ba07ea3b0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x559ba07ea398 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x559ba07ea2d8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x559ba07e5fb8 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x559ba07ea3d8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x559ba07ea338 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x559ba07e4b18
|       |       `-MemberExpr 0x559ba07ea308 <col:15> 'String::rep_t' lvalue ->_r 0x559ba07e4b90
|       |         `-CXXThisExpr 0x559ba07ea2f8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x559ba07ea4b0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x559ba07ea448 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x559ba07e4b18
|         | `-MemberExpr 0x559ba07ea418 <col:6> 'String::rep_t' lvalue ->_r 0x559ba07e4b90
|         |   `-CXXThisExpr 0x559ba07ea408 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x559ba07ea498 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x559ba07ea478 <col:16> 'int' 0
|-CXXMethodDecl 0x559ba07e5578 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x559ba07e5398 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x559ba07e5418 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x559ba07e5490 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x559ba07e5650 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x559ba07e58a0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x559ba07e5708 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x559ba07e5788 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x559ba07e5800 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x559ba07e5a88 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x559ba07e5970 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x559ba07e59f0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x559ba07e5b88 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x559ba07ea5e8 <col:41, line:286:5>
|   `-ReturnStmt 0x559ba07ea5d8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x559ba07ea5a8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x559ba07ea570 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x559ba07ea558 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x559ba07ea538 <col:46> 'int' 1
|-CXXMethodDecl 0x559ba07e5e28 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x559ba07e5c40 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x559ba07e5cc0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x559ba07e5d40 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x559ba07e5fb8 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x559ba07e5ef0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x559ba07e6088 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x559ba07e6258 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x559ba07e6140 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x559ba07e61c0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x559ba07e6318 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x559ba07e63e0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x559ba07e64e8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x559ba07e6560 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x559ba07e65d8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x559ba07e6640 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x559ba07e6740 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x559ba07e6790 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba07e6720 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x559ba07e6700 <col:22> 'int' 14
|-CXXMethodDecl 0x559ba07e69a8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x559ba07e67c0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x559ba07e6840 <col:38> col:41 'int'
| `-ParmVarDecl 0x559ba07e68c0 <col:43> col:46 'int'
|-FriendDecl 0x559ba07e6ab0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x559ba07e6b40 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0a513f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x559ba0a515c8 prev 0x559ba0a513f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x559ba0a51658 <col:46, col:52> col:46 public
|-TypedefDecl 0x559ba0a51680 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0a52fe0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x559ba0a52f90 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x559ba0a52f70 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x559ba0a51898 'type'
|     `-SubstTemplateTypeParmType 0x559ba0a51860 'String' sugar
|       |-TemplateTypeParmType 0x559ba079fb20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba079fad0 'T'
|       `-RecordType 0x559ba07da7a0 'String'
|         `-CXXRecord 0x559ba07da710 'String'
|-TypedefDecl 0x559ba0a53098 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x559ba0a53060 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x559ba0a53040 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x559ba0a52fe0 'type'
|     `-ElaboratedType 0x559ba0a52f90 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x559ba0a52f70 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x559ba0a51898 'type'
|         `-SubstTemplateTypeParmType 0x559ba0a51860 'String' sugar
|           |-TemplateTypeParmType 0x559ba079fb20 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x559ba079fad0 'T'
|           `-RecordType 0x559ba07da7a0 'String'
|             `-CXXRecord 0x559ba07da710 'String'
|-CXXMethodDecl 0x559ba0a53218 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x559ba0a53128 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x559ba0a53308 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x559ba0a533e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x559ba0a533e8
|-CXXMethodDecl 0x559ba0a536b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x559ba0a535c0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x559ba0a538f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559ba0a53770 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ba0a537e8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ba0a53ac8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559ba0a539b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ba0a53a30 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ba0a53c28 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x559ba0a53cf8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x559ba0a53f48 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559ba0a53db8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x559ba0a53e30 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ba0a541a8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x559ba0a54018 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x559ba0a54090 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ba0a54368 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x559ba0a54278 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ba0a54528 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x559ba0a54430 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ba0a545e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559ba0a54690 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x559ba0a548c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559ba0a54740 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ba0a547b8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ba0a54b68 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x559ba0a54a70 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x559ba0a54c30 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x559ba0a54c80 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x559ba0a54cd0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0a0e4c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x559ba0a4fe58 prev 0x559ba0a0e4c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x559ba0a51360 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x559ba0a51310 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x559ba0a512f0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x559ba0a511a0 'type'
|     `-SubstTemplateTypeParmType 0x559ba0a51030 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x559ba0773e60 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x559ba0773e08 'F'
|       `-RecordType 0x559ba0a50c90 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x559ba0a50bb0 'typed_array_memory'
|-FieldDecl 0x559ba0a54d20 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x559ba0a54d70 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x559ba0a54da8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x559ba0a4fef0 'String' sugar
|   |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|   `-RecordType 0x559ba07da7a0 'String'
|     `-CXXRecord 0x559ba07da710 'String'
|-TypedefDecl 0x559ba0a54e38 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x559ba0a54e00 'String &'
|   `-SubstTemplateTypeParmType 0x559ba0a4fef0 'String' sugar
|     |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|     `-RecordType 0x559ba07da7a0 'String'
|       `-CXXRecord 0x559ba07da710 'String'
|-TypedefDecl 0x559ba0a54ec8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x559ba0a54e90 'const String &'
|   `-QualType 0x559ba0a4fef1 'const String' const
|     `-SubstTemplateTypeParmType 0x559ba0a4fef0 'String' sugar
|       |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|       `-RecordType 0x559ba07da7a0 'String'
|         `-CXXRecord 0x559ba07da710 'String'
|-TypedefDecl 0x559ba0a54f58 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x559ba0a54f20 'String *'
|   `-SubstTemplateTypeParmType 0x559ba0a4fef0 'String' sugar
|     |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|     `-RecordType 0x559ba07da7a0 'String'
|       `-CXXRecord 0x559ba07da710 'String'
|-TypedefDecl 0x559ba0a55000 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x559ba0a54fb0 'const String *'
|   `-QualType 0x559ba0a4fef1 'const String' const
|     `-SubstTemplateTypeParmType 0x559ba0a4fef0 'String' sugar
|       |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|       `-RecordType 0x559ba07da7a0 'String'
|         `-CXXRecord 0x559ba07da710 'String'
|-TypedefDecl 0x559ba0a55c60 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x559ba0a55c10 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x559ba0a55bf0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x559ba0a55b28 'type'
|     `-LValueReferenceType 0x559ba0a55af0 'const String &'
|       `-QualType 0x559ba0a55891 'const String' const
|         `-SubstTemplateTypeParmType 0x559ba0a55890 'String' sugar
|           |-TemplateTypeParmType 0x559ba077f030 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x559ba077efd8 'T'
|           `-RecordType 0x559ba07da7a0 'String'
|             `-CXXRecord 0x559ba07da710 'String'
|-TypedefDecl 0x559ba0a55cc8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x559ba0a54e90 'const String &'
|   `-QualType 0x559ba0a4fef1 'const String' const
|     `-SubstTemplateTypeParmType 0x559ba0a4fef0 'String' sugar
|       |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|       `-RecordType 0x559ba07da7a0 'String'
|         `-CXXRecord 0x559ba07da710 'String'
|-TypedefDecl 0x559ba0a55d20 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0a55d88 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x559ba0a54f20 'String *'
|   `-SubstTemplateTypeParmType 0x559ba0a4fef0 'String' sugar
|     |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|     `-RecordType 0x559ba07da7a0 'String'
|       `-CXXRecord 0x559ba07da710 'String'
|-TypedefDecl 0x559ba0a55df0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x559ba0a54fb0 'const String *'
|   `-QualType 0x559ba0a4fef1 'const String' const
|     `-SubstTemplateTypeParmType 0x559ba0a4fef0 'String' sugar
|       |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|       `-RecordType 0x559ba07da7a0 'String'
|         `-CXXRecord 0x559ba07da710 'String'
|-EnumDecl 0x559ba0a55e48 <line:134:5> col:5
| `-EnumConstantDecl 0x559ba0a55f40 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x559ba0a55f20 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x559ba07ae4c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x559ba07ae4a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x559ba07ae480 <col:40> 'int' 1
|-CXXConstructorDecl 0x559ba0a55fc8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x559ba0a56258 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559ba0a56080 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ba0a56120 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x559ba0a564e8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x559ba0a563d0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x559ba0a567a8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x559ba0a56690 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x559ba0a56ac0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x559ba0a569a0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x559ba0a56dd0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x559ba0a56cb0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x559ba0a570c0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559ba0a56f08 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ba0a56f80 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559ba0a571e8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x559ba0a57298 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0a572f0 <col:30> Inherited
|-CXXMethodDecl 0x559ba0a57338 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x559ba0a573e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0a57440 <col:30> Inherited
|-CXXMethodDecl 0x559ba0a57508 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559ba0a575b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0a57610 <col:30> Inherited
|-CXXMethodDecl 0x559ba0a57658 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559ba0a57708 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0a57760 <col:30> Inherited
|-CXXMethodDecl 0x559ba0a577a8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559ba0a57858 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0a578b0 <col:30> Inherited
|-CXXMethodDecl 0x559ba0a578f8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559ba0a579a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0a57a00 <col:30> Inherited
|-CXXMethodDecl 0x559ba0a57a28 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559ba0a57ad8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559ba0a57b88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x559ba0a57d48 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559ba0a57c38 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ba0a57cb0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559ba0a57e98 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x559ba0a57e08 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0a58048 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x559ba0a57f50 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559ba0a58100 <col:20>
| `-OptimizeNoneAttr 0x559ba0a58158 <col:30>
|-CXXMethodDecl 0x559ba0a58278 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x559ba0a58180 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559ba0a58330 <col:20>
| `-OptimizeNoneAttr 0x559ba0a58388 <col:30>
|-CXXMethodDecl 0x559ba0a58440 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x559ba0a583b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0a58588 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559ba0a584f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0a586b8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x559ba0a587b8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x559ba0a58888 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x559ba0a58958 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x559ba0a58a98 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x559ba0a58a08 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0a58be0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559ba0a58b50 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0a58d28 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x559ba0a58c98 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559ba0a58de0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x559ba0a58ee0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x559ba0a58e50 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559ba0a58f98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x559ba0a59058 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x559ba0a59158 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x559ba0a592d8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x559ba0a59218 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x559ba0a59a98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x559ba0a59390 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x559ba0a599f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x559ba0a598f8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x559ba0a59b78 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559ba0a59cc8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x559ba0a59c38 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559ba0a59d80 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x559ba0a59fc8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559ba0a59e40 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x559ba0a59eb8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559ba0a5a158 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x559ba0a5a098 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x559ba0a5a368 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x559ba0a5a220 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x559ba0a5a298 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x559ba0a5a428 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x559ba0a5a688 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x559ba0a5a590 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x559ba0a5a758 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x559ba0a5a758

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0b19d98 prev 0x559ba0a97610 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ba0b19e90 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x559ba0b19f20 <col:22, col:28> col:22 public
|-EnumDecl 0x559ba0b19f48 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x559ba0b1a068 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ba0b1a048 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x559ba0b1a030 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x559ba0b1a010 <col:14> 'int' 999
| |-EnumConstantDecl 0x559ba0b1a110 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ba0b1a0f0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x559ba0b1a0d8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x559ba0b1a0b8 <col:14> 'int' 1
| |-EnumConstantDecl 0x559ba0b1a1a0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ba0b1a180 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x559ba0b1a160 <col:17> 'int' 0
| |-EnumConstantDecl 0x559ba0b1a230 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ba0b1a210 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x559ba0b1a1f0 <col:13> 'int' 1
| |-EnumConstantDecl 0x559ba0b1a2c0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ba0b1a2a0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x559ba0b1a280 <col:16> 'int' 2
| |-EnumConstantDecl 0x559ba0b1a350 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ba0b1a330 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x559ba0b1a310 <col:13> 'int' 3
| |-EnumConstantDecl 0x559ba0b1a3e0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ba0b1a3c0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x559ba0b1a3a0 <col:15> 'int' 4
| |-EnumConstantDecl 0x559ba0b1a470 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ba0b1a450 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x559ba0b1a430 <col:14> 'int' 5
| |-EnumConstantDecl 0x559ba0b1a500 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ba0b1a4e0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x559ba0b1a4c0 <col:12> 'int' 6
| `-EnumConstantDecl 0x559ba0b1a590 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x559ba0b1a570 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x559ba0b1a550 <col:13> 'int' 7
|-VarDecl 0x559ba0b1a600 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x559ba0b1a688 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x559ba0b1a710 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x559ba0b1a798 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x559ba0b1a820 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x559ba0b1a8a8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x559ba0b1a930 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x559ba0b1a9b8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x559ba0b1aa40 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x559ba0b1aac8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x559ba0b1ab50 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x559ba0b1ac50 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x559ba0b1ff78 '_nerrors' 'int'
| | `-IntegerLiteral 0x559ba0b20708 <line:128:13> 'int' 0
| `-CompoundStmt 0x559ba0b20778 <col:16, line:129:5>
|-CXXDestructorDecl 0x559ba0b1ad40 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x559ba0b20788 <col:29, line:132:5>
|-CXXMethodDecl 0x559ba0b1aef8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x559ba0b1ae30 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0b1afc0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x559ba0b1b0a8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x559ba0b207e0 <col:44, line:161:5>
|   `-ReturnStmt 0x559ba0b207d0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x559ba0b207b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x559ba0b20798 <col:9> 'ErrorHandler *' lvalue Var 0x559ba0b1ffd8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0b1b1e8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x559ba0b1b158 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ba0b1b2b0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x559ba0b20840 <col:43, line:173:5>
|   `-ReturnStmt 0x559ba0b20830 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x559ba0b20818 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x559ba0b207f8 <col:9> 'ErrorHandler *' lvalue Var 0x559ba0b20050 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x559ba0b1b368 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x559ba0b1b3e8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x559ba0b1b4f8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x559ba0b1b468 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1b648 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x559ba0b1b5b8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1b7a0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x559ba0b1b708 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1b8f8 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x559ba0b1b860 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1ba50 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x559ba0b1b9b8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1bca0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ba0b1bb08 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x559ba0b1bb88 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1be78 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ba0b1bd60 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x559ba0b1bde0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1c098 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ba0b1bf38 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x559ba0b1bfb8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1c278 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ba0b1c158 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x559ba0b1c1d8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1c458 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ba0b1c338 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x559ba0b1c3b8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1c5e0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x559ba0b1c518 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x559ba0b1c7b0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x559ba0b1c698 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x559ba0b1c710 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x559ba0b20a98 <col:57, line:234:5>
|   `-ReturnStmt 0x559ba0b20a88 <line:233:2, col:41>
|     `-ExprWithCleanups 0x559ba0b20a70 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x559ba0b20a18 <col:9, col:41> 'int'
|         |-MemberExpr 0x559ba0b209e8 <col:9> '<bound member function type>' ->xmessage 0x559ba0b1c5e0
|         | `-CXXThisExpr 0x559ba0b209d8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x559ba0b20a58 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x559ba0b20a40 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559ba0b209b8 <col:18, col:40> 'String' (CXXTemporary 0x559ba0b209b8)
|               `-CallExpr 0x559ba0b20980 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x559ba0b20968 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x559ba0b208e0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x559ba0b1e7a8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x559ba0b20900 <col:31> 'const String' lvalue ParmVar 0x559ba0b1c710 'str' 'const String &'
|                 `-DeclRefExpr 0x559ba0b20920 <col:36> 'const String' lvalue ParmVar 0x559ba0b1c698 'anno' 'const String &'
|-CXXMethodDecl 0x559ba0b1ca90 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x559ba0b1c870 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x559ba0b1c8f0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x559ba0b1c968 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559ba0b20d28 <col:68, line:243:5>
|   `-ReturnStmt 0x559ba0b20d18 <line:242:2, col:41>
|     `-ExprWithCleanups 0x559ba0b20d00 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x559ba0b20ca0 <col:9, col:41> 'int'
|         |-MemberExpr 0x559ba0b20c70 <col:9> '<bound member function type>' ->xmessage 0x559ba0b1c7b0
|         | `-CXXThisExpr 0x559ba0b20c60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x559ba0b20b38 <col:18> 'const String' lvalue ParmVar 0x559ba0b1c870 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x559ba0b20ce8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x559ba0b20cd0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559ba0b20c40 <col:24, col:40> 'String' (CXXTemporary 0x559ba0b20c40)
|               `-CXXMemberCallExpr 0x559ba0b20bd8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x559ba0b20b68 <col:24> '<bound member function type>' ->vformat 0x559ba0b1dc70
|                 | `-CXXThisExpr 0x559ba0b20b58 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x559ba0b20c08 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x559ba0b20b98 <col:32> 'const char *' lvalue ParmVar 0x559ba0b1c8f0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x559ba0b20c20 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x559ba0b20bb8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559ba0b1c968 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ba0b1cd30 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x559ba0b1cb58 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x559ba0b1cbd0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x559ba0b1cc48 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x559ba0b21068 <col:23, line:254:5>
|   `-ReturnStmt 0x559ba0b21058 <line:253:2, col:71>
|     `-ExprWithCleanups 0x559ba0b21040 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x559ba0b20fe0 <col:9, col:71> 'int'
|         |-MemberExpr 0x559ba0b20fb0 <col:9> '<bound member function type>' ->xmessage 0x559ba0b1c7b0
|         | `-CXXThisExpr 0x559ba0b20fa0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x559ba0b21028 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x559ba0b21010 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x559ba0b20f60 <col:18, col:65> 'String' (CXXTemporary 0x559ba0b20f60)
|         |     `-CallExpr 0x559ba0b20ef8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x559ba0b20ee0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x559ba0b20dc8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x559ba0b1e7a8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x559ba0b20de8 <col:31> 'const String' lvalue ParmVar 0x559ba0b1cbd0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x559ba0b20f40 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x559ba0b20f28 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x559ba0b20ec0 <col:37, col:64> 'String' (CXXTemporary 0x559ba0b20ec0)
|         |             `-CallExpr 0x559ba0b20e90 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x559ba0b20e78 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x559ba0b20e08 <col:37> 'String (const String &)' lvalue CXXMethod 0x559ba0b1edf8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x559ba0b20e28 <col:56> 'const String' lvalue ParmVar 0x559ba0b1cb58 'landmark' 'const String &'
|         `-DeclRefExpr 0x559ba0b20f80 <col:68> 'const String' lvalue ParmVar 0x559ba0b1cc48 'str' 'const String &'
|-CXXMethodDecl 0x559ba0b1d0b0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x559ba0b1cdf8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x559ba0b1ce70 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x559ba0b1cef0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x559ba0b1cf68 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559ba0b21320 <col:34, line:267:5>
|   `-ReturnStmt 0x559ba0b21310 <line:266:2, col:51>
|     `-ExprWithCleanups 0x559ba0b212f8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x559ba0b21290 <col:9, col:51> 'int'
|         |-MemberExpr 0x559ba0b21260 <col:9> '<bound member function type>' ->xmessage 0x559ba0b1cd30
|         | `-CXXThisExpr 0x559ba0b21250 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x559ba0b21108 <col:18> 'const String' lvalue ParmVar 0x559ba0b1cdf8 'landmark' 'const String &'
|         |-DeclRefExpr 0x559ba0b21128 <col:28> 'const String' lvalue ParmVar 0x559ba0b1ce70 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x559ba0b212e0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x559ba0b212c8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559ba0b21230 <col:34, col:50> 'String' (CXXTemporary 0x559ba0b21230)
|               `-CXXMemberCallExpr 0x559ba0b211c8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x559ba0b21158 <col:34> '<bound member function type>' ->vformat 0x559ba0b1dc70
|                 | `-CXXThisExpr 0x559ba0b21148 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x559ba0b211f8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x559ba0b21188 <col:42> 'const char *' lvalue ParmVar 0x559ba0b1cef0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x559ba0b21210 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x559ba0b211a8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559ba0b1cf68 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ba0b1d1c0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x559ba0b213a0 <col:25, line:288:5>
|   `-ReturnStmt 0x559ba0b21390 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x559ba0b21378 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x559ba0b21348 <col:9> 'const int' lvalue ->_nerrors 0x559ba0b1ff78
|         `-CXXThisExpr 0x559ba0b21338 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x559ba0b1d3d0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x559ba0b1d278 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x559ba0b1d2f8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1d6b8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x559ba0b1d498 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x559ba0b1d518 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x559ba0b1d590 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ba0b1d850 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x559ba0b1d788 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1da98 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x559ba0b1d910 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x559ba0b1d988 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559ba0b21600 <col:58, line:357:5>
|   `-ReturnStmt 0x559ba0b215f0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x559ba0b215d8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x559ba0b215a8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x559ba0b21590 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x559ba0b21570 <col:9, col:29> 'String' (CXXTemporary 0x559ba0b21570)
|             `-CallExpr 0x559ba0b21500 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x559ba0b214e8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x559ba0b21468 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x559ba0b1d6b8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x559ba0b21408 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x559ba0b21538 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x559ba0b21428 <col:21> 'const char *' lvalue ParmVar 0x559ba0b1d910 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x559ba0b21550 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x559ba0b21448 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559ba0b1d988 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ba0b1dc70 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x559ba0b1db60 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x559ba0b1dbd8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ba0b1ddc8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x559ba0b1dd38 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x559ba0b1df10 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x559ba0b1de80 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x559ba0b1e1b0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x559ba0b1dfc8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x559ba0b1e048 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x559ba0b1e0c0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x559ba0b1e310 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x559ba0b1e280 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x559ba0b21718 <col:37, line:441:5>
|   `-IfStmt 0x559ba0b21700 <line:439:2, line:440:8>
|     |-BinaryOperator 0x559ba0b21688 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x559ba0b21658 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x559ba0b21618 <col:6> 'int' lvalue ParmVar 0x559ba0b1e280 'level' 'int'
|     | `-ImplicitCastExpr 0x559ba0b21670 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x559ba0b21638 <col:15> 'ErrorHandler::Level' EnumConstant 0x559ba0b1a350 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x559ba0b216e8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x559ba0b216b8 <col:8> 'int' lvalue ->_nerrors 0x559ba0b1ff78
|         `-CXXThisExpr 0x559ba0b216a8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x559ba0b1e3d8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x559ba0b217b0 <col:26, line:448:5>
|   `-BinaryOperator 0x559ba0b21790 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x559ba0b21740 <col:2> 'int' lvalue ->_nerrors 0x559ba0b1ff78
|     | `-CXXThisExpr 0x559ba0b21730 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x559ba0b21770 <col:13> 'int' 0
|-CXXMethodDecl 0x559ba0b1e5a0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x559ba0b1e490 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x559ba0b1e508 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x559ba0b1e7a8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x559ba0b1e660 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x559ba0b1e6d8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x559ba0b1ea58 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x559ba0b1e868 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x559ba0b1e8e8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x559ba0b1e968 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x559ba0b1eb10 <col:59> 0 0
|-CXXMethodDecl 0x559ba0b1eca8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x559ba0b1eb88 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x559ba0b1ec08 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x559ba0b21e20 <col:70, line:534:5>
|   |-DeclStmt 0x559ba0b21920 <line:528:2, col:20>
|   | |-VarDecl 0x559ba0b217d8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x559ba0b21840 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x559ba0b21878 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x559ba0b218e0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x559ba0b219f0 <line:529:2, col:23>
|   | `-VarDecl 0x559ba0b21950 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x559ba0b219d8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559ba0b219b8 <col:18> 'const char *' lvalue ParmVar 0x559ba0b1eb88 'begin' 'const char *'
|   |-DoStmt 0x559ba0b21db8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x559ba0b21ce8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x559ba0b21cd0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x559ba0b21cb0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x559ba0b21a08 <col:6> 'const char *' lvalue Var 0x559ba0b21950 'x' 'const char *'
|   | |     `-CallExpr 0x559ba0b21c00 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x559ba0b21be8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x559ba0b21ba0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x559ba0b20450 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x559ba0b21c68 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x559ba0b21c50 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x559ba0b21ac0 <col:20, col:27> 'String' (CXXTemporary 0x559ba0b21ac0)
|   | |       |     `-CXXTemporaryObjectExpr 0x559ba0b21a88 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x559ba0b21c80 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x559ba0b21ae0 <col:30> 'const char *' lvalue Var 0x559ba0b21950 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x559ba0b21c98 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x559ba0b21b00 <col:33> 'const char *' lvalue ParmVar 0x559ba0b1ec08 'end' 'const char *'
|   | |       |-UnaryOperator 0x559ba0b21b40 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x559ba0b21b20 <col:39> 'String' lvalue Var 0x559ba0b217d8 'name' 'String'
|   | |       |-UnaryOperator 0x559ba0b21b78 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x559ba0b21b58 <col:46> 'String' lvalue Var 0x559ba0b21878 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x559ba0b21b90 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x559ba0b21da0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x559ba0b21d88 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x559ba0b21d68 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x559ba0b21d38 <col:11> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|   |         `-ImplicitCastExpr 0x559ba0b21d20 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x559ba0b21d00 <col:11> 'String' lvalue Var 0x559ba0b217d8 'name' 'String'
|   `-ReturnStmt 0x559ba0b21e10 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x559ba0b21df8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x559ba0b21dd8 <col:9> 'const char *' lvalue Var 0x559ba0b21950 'x' 'const char *'
|-CXXMethodDecl 0x559ba0b1edf8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x559ba0b1ed68 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x559ba0b22428 <col:55, line:550:5>
|   `-IfStmt 0x559ba0b22400 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x559ba0b22060 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x559ba0b22048 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559ba0b22030 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559ba0b22010 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559ba0b21fe0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|     | |       `-DeclRefExpr 0x559ba0b21e80 <col:6> 'const String' lvalue ParmVar 0x559ba0b1ed68 'x' 'const String &'
|     | `-BinaryOperator 0x559ba0b21fc0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x559ba0b21f90 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x559ba0b21f40 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x559ba0b21f28 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x559ba0b21ee0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x559ba07f6ea0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x559ba0b21ea0 <col:11> 'const String' lvalue ParmVar 0x559ba0b1ed68 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x559ba0b21ec0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x559ba0b21fa8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x559ba0b21f78 <col:19> 'char' 123
|     |-ReturnStmt 0x559ba0b220d0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x559ba0b220a0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x559ba0b22080 <col:13> 'const String' lvalue ParmVar 0x559ba0b1ed68 'x' 'const String &'
|     `-IfStmt 0x559ba0b223d8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x559ba0b22168 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ba0b22150 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ba0b22130 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ba0b22100 <col:11> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|       |       `-DeclRefExpr 0x559ba0b220e0 <col:11> 'const String' lvalue ParmVar 0x559ba0b1ed68 'x' 'const String &'
|       |-ReturnStmt 0x559ba0b222f0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x559ba0b222d8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x559ba0b222a8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x559ba0b22290 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x559ba0b22270 <col:13, col:29> 'String' (CXXTemporary 0x559ba0b22270)
|       |         `-CallExpr 0x559ba0b22220 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x559ba0b22208 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x559ba0b22180 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x559ba0b1e5a0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x559ba0b22250 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x559ba0b221a0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x559ba0b221c0 <col:28> 'const String' lvalue ParmVar 0x559ba0b1ed68 'x' 'const String &'
|       `-ReturnStmt 0x559ba0b223c8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x559ba0b223b0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x559ba0b22380 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x559ba0b22368 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x559ba0b22348 <col:13, col:20> 'String' (CXXTemporary 0x559ba0b22348)
|                 `-CXXTemporaryObjectExpr 0x559ba0b22310 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x559ba0b1efc0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x559ba0b1eeb0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x559ba0b1ef28 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ba0b206f8 <col:71> 'bool' false
|-CXXRecordDecl 0x559ba0b1f070 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x559ba0b1f368 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x559ba0b1f300 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x559ba0b1f2a0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x559ba0b1f260 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x559ba07da7a0 'String'
|       | `-CXXRecord 0x559ba07da710 'String'
|       |-BuiltinType 0x559ba04a8580 'int'
|       `-DecayedType 0x559ba0a98660 '__va_list_tag *' sugar
|         |-TypedefType 0x559ba0a98630 'va_list' sugar
|         | |-Typedef 0x559ba06c7ee0 'va_list'
|         | `-TypedefType 0x559ba06c7e90 '__gnuc_va_list' sugar
|         |   |-Typedef 0x559ba05ffab8 '__gnuc_va_list'
|         |   `-TypedefType 0x559ba05ffa20 '__builtin_va_list' sugar
|         |     |-Typedef 0x559ba04e9d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x559ba04e9ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x559ba04a92d0 '__va_list_tag'
|         |         `-CXXRecord 0x559ba04a9238 '__va_list_tag'
|         `-PointerType 0x559ba06cd780 '__va_list_tag *'
|           `-RecordType 0x559ba04a92d0 '__va_list_tag'
|             `-CXXRecord 0x559ba04a9238 '__va_list_tag'
|-EnumDecl 0x559ba0b1f3c0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x559ba0b1f4c0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ba0b1fa20 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0b1f4a0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x559ba0b1f480 <col:16> 'int' 1
| |-EnumConstantDecl 0x559ba0b1f550 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ba0b1fa38 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0b1f530 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x559ba0b1f510 <col:21> 'int' 2
| |-EnumConstantDecl 0x559ba0b1f5e0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ba0b1fa50 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0b1f5c0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x559ba0b1f5a0 <col:22> 'int' 4
| |-EnumConstantDecl 0x559ba0b1f670 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ba0b1fa68 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0b1f650 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x559ba0b1f630 <col:17> 'int' 8
| |-EnumConstantDecl 0x559ba0b1f700 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ba0b1fa80 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0b1f6e0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x559ba0b1f6c0 <col:22> 'int' 16
| |-EnumConstantDecl 0x559ba0b1f790 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ba0b1fa98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0b1f770 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x559ba0b1f750 <col:19> 'int' 32
| |-EnumConstantDecl 0x559ba0b1f820 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ba0b1fab0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0b1f800 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x559ba0b1f7e0 <col:17> 'int' 64
| |-EnumConstantDecl 0x559ba0b1f8b0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ba0b1fac8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0b1f890 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x559ba0b1f870 <col:14> 'int' 128
| |-EnumConstantDecl 0x559ba0b1f940 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ba0b1fae0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0b1f920 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x559ba0b1f900 <col:16> 'int' 256
| `-EnumConstantDecl 0x559ba0b1f9d0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x559ba0b1faf8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0b1f9b0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x559ba0b1f990 <col:12> 'int' 1024
|-CXXMethodDecl 0x559ba0b1fd08 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x559ba0b1fb20 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x559ba0b1fbc0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x559ba0b1fe90 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x559ba0b1fdc8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x559ba0b1ff38 <line:580:3, col:10> col:3 private
|-FieldDecl 0x559ba0b1ff78 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x559ba0b1ffd8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x559ba0b20050 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x559ba0b20450 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x559ba0b200c8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x559ba0b20148 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x559ba0b201c8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x559ba0b20240 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x559ba0b202b8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x559ba0b20330 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x559ba0b20578 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x559ba0b20578
| `-ParmVarDecl 0x559ba0b20688 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x559ba0b22788 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x559ba0b22788
  `-ParmVarDecl 0x559ba0b22898 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0a976a0 prev 0x559ba09d0f68 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba0a97798 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x559ba0a97828 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x559ba0a97968 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a97860 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x559ba0a98d90 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x559ba0a98d70 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x559ba0a98908 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x559ba0a98e20 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x559ba0a98de0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x559ba0a97860 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x559ba0a98970 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x559ba0a98ea0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x559ba0a98e60 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x559ba0a989d0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x559ba0a98ee0 <col:54> 'bool' false
| `-CompoundStmt 0x559ba0a98fe8 <col:61, line:38:5>
|   `-BinaryOperator 0x559ba0a98fc8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x559ba0a98f60 <col:9> 'const Element *' lvalue ->_context 0x559ba0a988a8
|     | `-CXXThisExpr 0x559ba0a98f50 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x559ba0a98fb0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x559ba0a98f90 <col:20> 'int' 0
|-CXXConstructorDecl 0x559ba0a97b78 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a97a28 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x559ba0a97aa0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x559ba0a98dc8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x559ba0a98da8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x559ba0a988a8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x559ba0a99040 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x559ba0a99000 <col:20> 'const Element *' lvalue ParmVar 0x559ba0a97a28 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x559ba0a98908 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x559ba0a990c0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x559ba0a99080 <col:36> 'ErrorHandler *' lvalue ParmVar 0x559ba0a97aa0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x559ba0a98970 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x559ba0a99140 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x559ba0a99100 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x559ba0a989d0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x559ba0a99180 <col:73> 'bool' false
| `-CompoundStmt 0x559ba0a991f8 <col:80, line:46:5>
|-CXXMethodDecl 0x559ba0a97ca8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x559ba0a99270 <col:36, line:51:5>
|   `-ReturnStmt 0x559ba0a99260 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x559ba0a99248 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x559ba0a99218 <col:16> 'const Element *const' lvalue ->_context 0x559ba0a988a8
|         `-CXXThisExpr 0x559ba0a99208 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x559ba0a97d98 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x559ba0a992f0 <col:32, line:57:5>
|   `-ReturnStmt 0x559ba0a992e0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x559ba0a992c8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x559ba0a99298 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x559ba0a98908
|         `-CXXThisExpr 0x559ba0a99288 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x559ba0a97e58 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x559ba0a97fe0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x559ba0a97f10 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x559ba0a98130 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x559ba0a980a0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559ba0a98280 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x559ba0a981f0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559ba0a98488 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x559ba0a98338 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x559ba0a983b0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x559ba0a987b8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x559ba0a98548 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x559ba0a985c8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x559ba0a98690 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x559ba0a98870 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x559ba0a988a8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x559ba0a98908 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x559ba0a98970 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x559ba0a989d0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x559ba0a98a20 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x559ba0a98a20
| `-ParmVarDecl 0x559ba0a98b38 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x559ba0a98bd8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x559ba0a98bd8
| `-ParmVarDecl 0x559ba0a98ce8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x559ba0b33d58 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0aba6d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x559ba0aba8a8 prev 0x559ba0aba6d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x559ba0aba938 <col:46, col:52> col:46 public
|-TypedefDecl 0x559ba0aba960 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac7120 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x559ba0ac70d0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x559ba0abae10 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x559ba0abad10 'type'
|     `-TemplateSpecializationType 0x559ba0abaca0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x559ba0abab80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x559ba0abab60 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x559ba0abab40 <col:24> 'unsigned long' 4
|       `-RecordType 0x559ba0abac80 'char_array<4>'
|         `-ClassTemplateSpecialization 0x559ba0ababa0 'char_array'
|-TypedefDecl 0x559ba0ac71d8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x559ba0ac71a0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x559ba0ac7180 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x559ba0ac7120 'type'
|     `-ElaboratedType 0x559ba0ac70d0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x559ba0abae10 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x559ba0abad10 'type'
|         `-TemplateSpecializationType 0x559ba0abaca0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x559ba0abab80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x559ba0abab60 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x559ba0abab40 <col:24> 'unsigned long' 4
|           `-RecordType 0x559ba0abac80 'char_array<4>'
|             `-ClassTemplateSpecialization 0x559ba0ababa0 'char_array'
|-CXXMethodDecl 0x559ba0ac7358 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x559ba0ac7268 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x559ba0ac7448 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x559ba0ac7528 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x559ba0ac77f8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x559ba0ac7700 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x559ba0ac7a38 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559ba0ac78b0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ba0ac7928 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ba0ac7c08 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559ba0ac7af8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ba0ac7b70 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ba0ac7d68 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x559ba0ac7e38 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x559ba0ac8088 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559ba0ac7ef8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x559ba0ac7f70 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ba0ac82e8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x559ba0ac8158 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x559ba0ac81d0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ba0ac84a8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x559ba0ac83b8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ba0ac8668 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x559ba0ac8570 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ba0ac8720 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559ba0ac87d0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x559ba0ac8a08 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559ba0ac8880 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ba0ac88f8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ba0ac8ca8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x559ba0ac8bb0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x559ba0ac8d70 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x559ba0ac8dc0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x559ba0ac8e10 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0ab90d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x559ba0ab92e8 prev 0x559ba0ab90d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x559ba0aba640 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x559ba0aba5f0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x559ba0aba5d0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x559ba0aba480 'type'
|     `-SubstTemplateTypeParmType 0x559ba0aba2a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x559ba07736e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba0773688 'T'
|       `-RecordType 0x559ba0ab9df0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x559ba0ab9d08 'sized_array_memory'
|-FieldDecl 0x559ba0ac8e60 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x559ba0ac8eb0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x559ba0ac8ee8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x559ba0ab9380 'int' sugar
|   |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|   `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac8f78 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x559ba0ac8f40 'int &'
|   `-SubstTemplateTypeParmType 0x559ba0ab9380 'int' sugar
|     |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|     `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac9038 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x559ba0ac9000 'const int &'
|   `-QualType 0x559ba0ab9381 'const int' const
|     `-SubstTemplateTypeParmType 0x559ba0ab9380 'int' sugar
|       |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|       `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac90c8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x559ba0ac9090 'int *'
|   `-SubstTemplateTypeParmType 0x559ba0ab9380 'int' sugar
|     |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|     `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac9158 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x559ba0ac9120 'const int *'
|   `-QualType 0x559ba0ab9381 'const int' const
|     `-SubstTemplateTypeParmType 0x559ba0ab9380 'int' sugar
|       |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|       `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac9d40 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x559ba0ac9cf0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x559ba0ac9cd0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x559ba0ac9c60 'type'
|     `-SubstTemplateTypeParmType 0x559ba0ac9a20 'int' sugar
|       |-TemplateTypeParmType 0x559ba077f760 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba077f710 'T'
|       `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac9da8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x559ba0ac9000 'const int &'
|   `-QualType 0x559ba0ab9381 'const int' const
|     `-SubstTemplateTypeParmType 0x559ba0ab9380 'int' sugar
|       |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|       `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac9e00 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac9e68 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x559ba0ac9090 'int *'
|   `-SubstTemplateTypeParmType 0x559ba0ab9380 'int' sugar
|     |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|     `-BuiltinType 0x559ba04a8580 'int'
|-TypedefDecl 0x559ba0ac9ed0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x559ba0ac9120 'const int *'
|   `-QualType 0x559ba0ab9381 'const int' const
|     `-SubstTemplateTypeParmType 0x559ba0ab9380 'int' sugar
|       |-TemplateTypeParmType 0x559ba07ad300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ba07ad2a8 'T'
|       `-BuiltinType 0x559ba04a8580 'int'
|-EnumDecl 0x559ba0ac9f28 <line:134:5> col:5
| `-EnumConstantDecl 0x559ba0aca020 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x559ba0aca000 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x559ba07ae4c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x559ba07ae4a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x559ba07ae480 <col:40> 'int' 1
|-CXXConstructorDecl 0x559ba0aca0a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x559ba0aca2f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559ba0aca160 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ba0aca200 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x559ba0aca5b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x559ba0aca4a0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x559ba0aca878 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x559ba0aca760 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x559ba0acabc0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x559ba0acaaa0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x559ba0acaed0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x559ba0acadb0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x559ba0acb1c0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559ba0acb008 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ba0acb080 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559ba0acb2e8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x559ba0acb3c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0acb420 <col:30> Inherited
|-CXXMethodDecl 0x559ba0acb468 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x559ba0acb518 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0acb570 <col:30> Inherited
|-CXXMethodDecl 0x559ba0acb638 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559ba0acb6e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0acb740 <col:30> Inherited
|-CXXMethodDecl 0x559ba0acb788 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559ba0acb838 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0acb890 <col:30> Inherited
|-CXXMethodDecl 0x559ba0acb8d8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559ba0acb988 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0acb9e0 <col:30> Inherited
|-CXXMethodDecl 0x559ba0acba28 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559ba0acbad8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ba0acbb30 <col:30> Inherited
|-CXXMethodDecl 0x559ba0acbb58 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559ba0acbc08 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559ba0acbcb8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x559ba0acbe78 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559ba0acbd68 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ba0acbde0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559ba0acbfc8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x559ba0acbf38 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0acc178 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x559ba0acc080 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559ba0acc230 <col:20>
| `-OptimizeNoneAttr 0x559ba0acc288 <col:30>
|-CXXMethodDecl 0x559ba0acc3a8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x559ba0acc2b0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559ba0acc460 <col:20>
| `-OptimizeNoneAttr 0x559ba0acc4b8 <col:30>
|-CXXMethodDecl 0x559ba0acc570 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x559ba0acc4e0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0acc6b8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559ba0acc628 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0acc7e8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x559ba0acc918 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x559ba0acc9e8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x559ba0accab8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x559ba0accbf8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x559ba0accb68 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0accd40 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559ba0acccb0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ba0acce88 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x559ba0accdf8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559ba0accf40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x559ba0acd040 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x559ba0accfb0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559ba0acd0f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x559ba0acd1b8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x559ba0acd2b8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x559ba0acd438 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x559ba0acd378 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x559ba0acdbf8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x559ba0acd4f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x559ba0acdb58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x559ba0acda58 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x559ba0acf298 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559ba0acf3e8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x559ba0acf358 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559ba0acf4a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x559ba0acf6e8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559ba0acf560 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x559ba0acf5d8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559ba0acf8a8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x559ba0acf7b8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x559ba0acfaf8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x559ba0acf970 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x559ba0acf9e8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x559ba0acfbb8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x559ba0acfe18 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x559ba0acfd20 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x559ba0acfee8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0ab7248 prev 0x559ba0a9e258 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ba0ab7340 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x559ba0ab7430 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x559ba0ae0970 <col:16, line:828:9>
|-CXXDestructorDecl 0x559ba0ab7520 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x559ba0ae0980 <col:25, line:830:9>
|-CXXMethodDecl 0x559ba0ab7620 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x559ba0ab76d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x559ba0ab7778 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x559ba0ab7778
| `-ParmVarDecl 0x559ba0ab7888 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x559ba0ab8048 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x559ba0ab8048
  `-ParmVarDecl 0x559ba0ab8158 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0a9e068 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x559ba0a9e1c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x559ba0a9e258 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x559ba0a9e310 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x559ba0a9e418 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x559ba0a9e348 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559ba0ad14a8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559ba0ad1488 <col:31> 'int' 0
|-CXXConstructorDecl 0x559ba0a9e738 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a9e5b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x559ba0a9e628 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559ba0ad14e0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559ba0ad14c0 <col:59> 'int' 0
|-CXXConstructorDecl 0x559ba0a9e910 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a9e800 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x559ba0a9e878 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559ba0ad1518 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559ba0ad14f8 <col:55> 'int' 0
|-CXXConstructorDecl 0x559ba0a9ecc8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559ba0a9eab0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x559ba0a9eb28 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x559ba0a9eba0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559ba0ad1550 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559ba0ad1530 <col:31> 'int' 0
|-CXXConstructorDecl 0x559ba0a9ee88 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x559ba0a9edc8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x559ba0a9ef80 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x559ba0a9f168 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x559ba0a9f070 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x559ba0a9f258 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x559ba0ad1900 <col:24, line:291:5>
|   `-ReturnStmt 0x559ba0ad18f0 <line:290:9, col:79>
|     `-BinaryOperator 0x559ba0ad18d0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x559ba0ad17a8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x559ba0ad1700 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x559ba0ad16e0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x559ba0ad15d8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x559ba0ad15c0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x559ba0ad15a8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x559ba0ad1578 <col:18> 'Vector<String> *const' lvalue ->_conf 0x559ba0ab9070
|       | |   |       `-CXXThisExpr 0x559ba0ad1568 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x559ba0ad16c8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x559ba0ad16b0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x559ba0ad1678 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x559ba0ad1648 <col:28, col:35> '<bound member function type>' ->size 0x559ba0a57a28
|       | |           `-ImplicitCastExpr 0x559ba0ad1698 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x559ba0ad1630 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x559ba0ad1600 <col:28> 'Vector<String> *const' lvalue ->_conf 0x559ba0ab9070
|       | |                 `-CXXThisExpr 0x559ba0ad15f0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x559ba0ad1790 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x559ba0ad1778 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x559ba0ad1760 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x559ba0ad1730 <col:47> 'Args::Slot *const' lvalue ->_slots 0x559ba0ad0030
|       |         `-CXXThisExpr 0x559ba0ad1720 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x559ba0ad18b0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x559ba0ad1898 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x559ba0ad1880 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x559ba0ad1840 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x559ba0ad1828 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x559ba0ad17d8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x559ba0ad00e0
|         |     |   `-CXXThisExpr 0x559ba0ad17c8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x559ba0ad1808 <col:73> 'int' 0
|         `-IntegerLiteral 0x559ba0ad1860 <col:79> 'int' 0
|-CXXMethodDecl 0x559ba0a9f318 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x559ba0ad1ad8 <col:32, line:296:5>
|   `-ReturnStmt 0x559ba0ad1ac8 <line:295:9, col:49>
|     `-BinaryOperator 0x559ba0ad1aa8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x559ba0ad1988 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x559ba0ad1970 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x559ba0ad1958 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x559ba0ad1928 <col:17> 'Args::Slot *const' lvalue ->_slots 0x559ba0ad0030
|       |       `-CXXThisExpr 0x559ba0ad1918 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x559ba0ad1a88 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x559ba0ad1a70 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x559ba0ad1a58 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x559ba0ad1a18 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x559ba0ad1a00 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x559ba0ad19b0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x559ba0ad00e0
|         |     |   `-CXXThisExpr 0x559ba0ad19a0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x559ba0ad19e0 <col:43> 'int' 0
|         `-IntegerLiteral 0x559ba0ad1a38 <col:49> 'int' 0
|-CXXMethodDecl 0x559ba0a9f408 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x559ba0ad1ce8 <col:19, line:306:5>
|   |-IfStmt 0x559ba0ad1c08 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x559ba0ad1b48 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x559ba0ad1b30 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x559ba0ad1b00 <col:13> 'Vector<String> *' lvalue ->_conf 0x559ba0ab9070
|   | |     `-CXXThisExpr 0x559ba0ad1af0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x559ba0ad1be8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x559ba0ad1bb8 <col:13, col:20> '<bound member function type>' ->clear 0x559ba0a5a428
|   |     `-ImplicitCastExpr 0x559ba0ad1ba0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x559ba0ad1b70 <col:13> 'Vector<String> *' lvalue ->_conf 0x559ba0ab9070
|   |         `-CXXThisExpr 0x559ba0ad1b60 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x559ba0ad1c90 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x559ba0ad1c60 <col:9, col:16> '<bound member function type>' .clear 0x559ba0acfbb8
|   |   `-MemberExpr 0x559ba0ad1c30 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x559ba0acffd0
|   |     `-CXXThisExpr 0x559ba0ad1c20 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x559ba0ad1cd8 <line:305:9, col:17>
|     `-UnaryOperator 0x559ba0ad1cc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ba0ad1cb0 <col:17> 'Args *' this
|-CXXMethodDecl 0x559ba0a9f688 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x559ba0a9f590 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x559ba0a9f808 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x559ba0a9f740 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x559ba0a9fb88 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x559ba0a9f8b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x559ba0a9fae8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x559ba0a9f958 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x559ba0a9f9d0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x559ba0ad2008 <col:67, line:327:5>
|     |-WhileStmt 0x559ba0ad1fb8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x559ba0ad1dd0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x559ba0ad1d50 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x559ba09c9438 0x559ba0812ef8 0x559ba0812bd0 0x559ba08087e0 0x559ba0808490 0x559ba0807d80 0x559ba07d8c20 0x559ba07623b0
|     | | |-DeclRefExpr 0x559ba0ad1d10 <col:16> 'Iter' lvalue ParmVar 0x559ba0a9f958 'begin' 'Iter'
|     | | `-DeclRefExpr 0x559ba0ad1d30 <col:25> 'Iter' lvalue ParmVar 0x559ba0a9f9d0 'end' 'Iter'
|     | `-CompoundStmt 0x559ba0ad1f98 <col:30, line:325:9>
|     |   |-CallExpr 0x559ba0ad1f38 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x559ba0ad1e18 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x559ba0ad1f08 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x559ba0ad1e98 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|     |   |   `-DeclRefExpr 0x559ba0ad1e78 <col:24> 'Iter' lvalue ParmVar 0x559ba0a9f958 'begin' 'Iter'
|     |   `-UnaryOperator 0x559ba0ad1f80 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x559ba0ad1f60 <col:15> 'Iter' lvalue ParmVar 0x559ba0a9f958 'begin' 'Iter'
|     `-ReturnStmt 0x559ba0ad1ff8 <line:326:9, col:17>
|       `-UnaryOperator 0x559ba0ad1fe0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad1fd0 <col:17> 'Args *' this
|-CXXMethodDecl 0x559ba0a9fc90 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x559ba0a9fc00 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x559ba0a9fdd8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x559ba0a9fd48 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x559ba0a9fea0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x559ba0ad20e8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x559ba0ad2088 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x559ba0ad2038 <col:9> '<bound member function type>' ->reset_from 0x559ba0ad0458
|   | | `-CXXThisExpr 0x559ba0ad2028 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x559ba0ad2068 <col:20> 'int' 0
|   `-ReturnStmt 0x559ba0ad20d8 <line:352:9, col:17>
|     `-UnaryOperator 0x559ba0ad20c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ba0ad20b0 <col:17> 'Args *' this
|-VarDecl 0x559ba0a9ff58 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x559ba0a9ffc0 <col:38> 'int' 1
|-VarDecl 0x559ba0aa0050 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x559ba0aa00b8 <col:39> 'int' 2
|-VarDecl 0x559ba0aa0148 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x559ba0aa01b0 <col:39> 'int' 4
|-VarDecl 0x559ba0aa0240 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x559ba0aa02a8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x559ba0aa0628 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x559ba0aa0320 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ba0aa0588 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x559ba0aa03d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa0478 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad2240 <col:43, line:371:5>
|     `-ReturnStmt 0x559ba0ad2230 <line:370:9, col:34>
|       `-CallExpr 0x559ba0ad21f8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad2118 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad2198 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa03d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad21b8 <col:30> 'int' 0
|         `-DeclRefExpr 0x559ba0ad21d8 <col:33> 'T' lvalue ParmVar 0x559ba0aa0478 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aa0958 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x559ba0aa0690 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ba0aa08b8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x559ba0aa0740 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa07e8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad2390 <col:45, line:375:5>
|     `-ReturnStmt 0x559ba0ad2380 <line:374:9, col:42>
|       `-CallExpr 0x559ba0ad2348 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad2268 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad22e8 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa0740 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad2308 <col:30> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int'
|         `-DeclRefExpr 0x559ba0ad2328 <col:41> 'T' lvalue ParmVar 0x559ba0aa07e8 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aa0c88 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x559ba0aa09c0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x559ba0aa0be8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x559ba0aa0a70 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x559ba0aa0b18 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x559ba0ad24e0 <col:45, line:379:5>
| |   `-ReturnStmt 0x559ba0ad24d0 <line:378:9, col:43>
| |     `-CallExpr 0x559ba0ad2498 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x559ba0ad23b8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x559ba0ad2438 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa0a70 'keyword' 'const char *'
| |       |-DeclRefExpr 0x559ba0ad2458 <col:30> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int'
| |       `-DeclRefExpr 0x559ba0ad2478 <col:42> 'T' lvalue ParmVar 0x559ba0aa0b18 'x' 'T &'
| |-CXXMethodDecl 0x559ba0b50488 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned long &)'
| | |-TemplateArgument type 'unsigned long'
| | |-ParmVarDecl 0x559ba0b36028 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x559ba0b50370 <col:39, col:42> col:42 x 'unsigned long &'
| `-CXXMethodDecl 0x559ba0b50908 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x559ba0b50720 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x559ba0b507f8 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x559ba0aa0fb8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x559ba0aa0cf0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x559ba0aa0f18 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x559ba0aa0da0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x559ba0aa0e48 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x559ba0ad26e0 <col:46, line:383:5>
| |   `-ReturnStmt 0x559ba0ad26d0 <line:382:9, col:55>
| |     `-CallExpr 0x559ba0ad2698 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x559ba0ad2508 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x559ba0ad2588 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa0da0 'keyword' 'const char *'
| |       |-BinaryOperator 0x559ba0ad2658 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x559ba0ad2608 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x559ba0ad25e8 <col:30> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x559ba0ad2640 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559ba0ad2620 <col:42> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x559ba0ad2678 <col:54> 'T' lvalue ParmVar 0x559ba0aa0e48 'x' 'T &'
| `-CXXMethodDecl 0x559ba0b35d08 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x559ba0b35b20 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x559ba0b35bf8 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x559ba0aa13b8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x559ba0aa1020 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ba0aa1318 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x559ba0aa10d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa1150 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aa11f8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad2820 <col:54, line:388:5>
|     |-CallExpr 0x559ba0ad27a8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0ad26f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x559ba0ad2738 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x559ba0ad2748 <col:30> 'const char *' lvalue ParmVar 0x559ba0aa10d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ba0ad2768 <col:39> 'int' lvalue ParmVar 0x559ba0aa1150 'flags' 'int'
|     | `-DeclRefExpr 0x559ba0ad2788 <col:46> 'T' lvalue ParmVar 0x559ba0aa11f8 'x' 'T &'
|     `-ReturnStmt 0x559ba0ad2810 <line:387:9, col:17>
|       `-UnaryOperator 0x559ba0ad27f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad27e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0aa1868 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x559ba0aa1428 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ba0aa14a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ba0aa17c8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x559ba0aa1568 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa1608 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x559ba0aa16a8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ba0ad2990 <col:74, line:403:5>
|     `-ReturnStmt 0x559ba0ad2980 <line:402:9, col:56>
|       `-CallExpr 0x559ba0ad2940 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad2850 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad28c0 <col:28> 'const char *' lvalue ParmVar 0x559ba0aa1568 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad28e0 <col:37> 'int' 0
|         |-DeclRefExpr 0x559ba0ad2900 <col:40> 'T' lvalue ParmVar 0x559ba0aa1608 'x' 'T &'
|         `-DeclRefExpr 0x559ba0ad2920 <col:43> 'const V' lvalue ParmVar 0x559ba0aa16a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559ba0aa1cd8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x559ba0aa18d8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ba0aa1958 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ba0aa1c38 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x559ba0aa1a18 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa1ab8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x559ba0aa1b58 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ba0ad2af8 <col:76, line:407:5>
|     `-ReturnStmt 0x559ba0ad2ae8 <line:406:9, col:65>
|       `-CallExpr 0x559ba0ad2aa8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad29b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad2a28 <col:28> 'const char *' lvalue ParmVar 0x559ba0aa1a18 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad2a48 <col:37> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int'
|         |-DeclRefExpr 0x559ba0ad2a68 <col:49> 'T' lvalue ParmVar 0x559ba0aa1ab8 'x' 'T &'
|         `-DeclRefExpr 0x559ba0ad2a88 <col:52> 'const V' lvalue ParmVar 0x559ba0aa1b58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559ba0aa2228 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x559ba0aa1d48 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ba0aa1dc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ba0aa2188 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x559ba0aa1e88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa1f08 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aa1fa8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x559ba0aa2048 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ba0ad2c60 <col:85, line:412:5>
|     |-CallExpr 0x559ba0ad2be0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0ad2b10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x559ba0ad2b50 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x559ba0ad2b60 <col:37> 'const char *' lvalue ParmVar 0x559ba0aa1e88 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ba0ad2b80 <col:46> 'int' lvalue ParmVar 0x559ba0aa1f08 'flags' 'int'
|     | |-DeclRefExpr 0x559ba0ad2ba0 <col:53> 'T' lvalue ParmVar 0x559ba0aa1fa8 'x' 'T &'
|     | `-DeclRefExpr 0x559ba0ad2bc0 <col:56> 'const V' lvalue ParmVar 0x559ba0aa2048 'default_value' 'const V &'
|     `-ReturnStmt 0x559ba0ad2c50 <line:411:9, col:17>
|       `-UnaryOperator 0x559ba0ad2c38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad2c28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0aa26b8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x559ba0aa22a0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa2318 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aa2618 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ba0aa23d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa2450 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa24f8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad2de0 <col:53, line:425:5>
|     `-ReturnStmt 0x559ba0ad2dd0 <line:424:9, col:42>
|       `-CallExpr 0x559ba0ad2d90 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad2c90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad2d10 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa23d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad2d30 <col:30> 'int' 0
|         |-DeclRefExpr 0x559ba0ad2d50 <col:33> 'P' lvalue ParmVar 0x559ba0aa2450 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad2d70 <col:41> 'T' lvalue ParmVar 0x559ba0aa24f8 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aa2b08 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x559ba0aa2728 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa27a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aa2a68 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ba0aa2868 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa28e0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa2988 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad2f58 <col:55, line:429:5>
|     `-ReturnStmt 0x559ba0ad2f48 <line:428:9, col:50>
|       `-CallExpr 0x559ba0ad2f08 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad2e08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad2e88 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa2868 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad2ea8 <col:30> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int'
|         |-DeclRefExpr 0x559ba0ad2ec8 <col:41> 'P' lvalue ParmVar 0x559ba0aa28e0 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad2ee8 <col:49> 'T' lvalue ParmVar 0x559ba0aa2988 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aa2f58 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x559ba0aa2b78 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa2bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aa2eb8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ba0aa2cb8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa2d30 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa2dd8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad30d0 <col:55, line:433:5>
|     `-ReturnStmt 0x559ba0ad30c0 <line:432:9, col:51>
|       `-CallExpr 0x559ba0ad3080 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad2f80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad3000 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa2cb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad3020 <col:30> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int'
|         |-DeclRefExpr 0x559ba0ad3040 <col:42> 'P' lvalue ParmVar 0x559ba0aa2d30 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad3060 <col:50> 'T' lvalue ParmVar 0x559ba0aa2dd8 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aa5e20 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x559ba0aa2fc8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa3048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x559ba0aa5d80 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x559ba0aa3108 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x559ba0aa3180 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x559ba0aa3228 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x559ba0ad32f8 <col:56, line:437:5>
| |   `-ReturnStmt 0x559ba0ad32e8 <line:436:9, col:63>
| |     `-CallExpr 0x559ba0ad32a8 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x559ba0ad30f8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x559ba0ad3178 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa3108 'keyword' 'const char *'
| |       |-BinaryOperator 0x559ba0ad3248 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x559ba0ad31f8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x559ba0ad31d8 <col:30> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x559ba0ad3230 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559ba0ad3210 <col:42> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x559ba0ad3268 <col:54> 'P' lvalue ParmVar 0x559ba0aa3180 'parser' 'P'
| |       `-DeclRefExpr 0x559ba0ad3288 <col:62> 'T' lvalue ParmVar 0x559ba0aa3228 'x' 'T &'
| |-CXXMethodDecl 0x559ba0b34898 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, WordArg, String &)'
| | |-TemplateArgument type 'WordArg'
| | |-TemplateArgument type 'String'
| | |-ParmVarDecl 0x559ba0b34600 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x559ba0b346a8 <col:40, col:42> col:42 parser 'WordArg':'WordArg'
| | `-ParmVarDecl 0x559ba0b34778 <col:50, col:53> col:53 x 'String &'
| `-CXXMethodDecl 0x559ba0b35398 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, FixedPointArg, unsigned int &)'
|   |-TemplateArgument type 'FixedPointArg'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559ba0b35100 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x559ba0b351a8 <col:40, col:42> col:42 parser 'FixedPointArg':'FixedPointArg'
|   `-ParmVarDecl 0x559ba0b35278 <col:50, col:53> col:53 x 'unsigned int &'
|-FunctionTemplateDecl 0x559ba0aa6348 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x559ba0aa5e90 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa5f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aa62a8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ba0aa5fc8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa6048 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aa60c0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa6168 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad3460 <col:64, line:442:5>
|     |-CallExpr 0x559ba0ad33e0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0ad3310 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x559ba0ad3350 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x559ba0ad3360 <col:30> 'const char *' lvalue ParmVar 0x559ba0aa5fc8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ba0ad3380 <col:39> 'int' lvalue ParmVar 0x559ba0aa6048 'flags' 'int'
|     | |-DeclRefExpr 0x559ba0ad33a0 <col:46> 'P' lvalue ParmVar 0x559ba0aa60c0 'parser' 'P'
|     | `-DeclRefExpr 0x559ba0ad33c0 <col:54> 'T' lvalue ParmVar 0x559ba0aa6168 'x' 'T &'
|     `-ReturnStmt 0x559ba0ad3450 <line:441:9, col:17>
|       `-UnaryOperator 0x559ba0ad3438 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad3428 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0aa6948 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x559ba0aa63c0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa6438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559ba0aa64b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559ba0aa68a8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x559ba0aa6580 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa65f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa6698 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x559ba0aa6768 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ba0ad35f8 <col:84, line:458:5>
|     `-ReturnStmt 0x559ba0ad35e8 <line:457:9, col:64>
|       `-CallExpr 0x559ba0ad35a0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad3490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad3500 <col:28> 'const char *' lvalue ParmVar 0x559ba0aa6580 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad3520 <col:37> 'int' 0
|         |-DeclRefExpr 0x559ba0ad3540 <col:40> 'P' lvalue ParmVar 0x559ba0aa65f8 'parser' 'P'
|         |-DeclRefExpr 0x559ba0ad3560 <col:48> 'T' lvalue ParmVar 0x559ba0aa6698 'x' 'T &'
|         `-DeclRefExpr 0x559ba0ad3580 <col:51> 'const V' lvalue ParmVar 0x559ba0aa6768 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559ba0aa6ec8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x559ba0aa69c0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa6a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559ba0aa6ab8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559ba0aa6e28 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x559ba0aa6b80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa6bf8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa6c98 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x559ba0aa6d38 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ba0ad3788 <col:86, line:462:5>
|     `-ReturnStmt 0x559ba0ad3778 <line:461:9, col:73>
|       `-CallExpr 0x559ba0ad3730 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad3620 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad3690 <col:28> 'const char *' lvalue ParmVar 0x559ba0aa6b80 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad36b0 <col:37> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int'
|         |-DeclRefExpr 0x559ba0ad36d0 <col:49> 'P' lvalue ParmVar 0x559ba0aa6bf8 'parser' 'P'
|         |-DeclRefExpr 0x559ba0ad36f0 <col:57> 'T' lvalue ParmVar 0x559ba0aa6c98 'x' 'T &'
|         `-DeclRefExpr 0x559ba0ad3710 <col:60> 'const V' lvalue ParmVar 0x559ba0aa6d38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559ba0aa7528 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x559ba0aa6f40 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa6fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559ba0aa7038 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559ba0aa7488 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x559ba0aa7100 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa7180 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aa71f8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa7298 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x559ba0aa7338 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ba0ad3918 <col:95, line:467:5>
|     |-CallExpr 0x559ba0ad3890 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0ad37a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x559ba0ad37e0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x559ba0ad37f0 <col:37> 'const char *' lvalue ParmVar 0x559ba0aa7100 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ba0ad3810 <col:46> 'int' lvalue ParmVar 0x559ba0aa7180 'flags' 'int'
|     | |-DeclRefExpr 0x559ba0ad3830 <col:53> 'P' lvalue ParmVar 0x559ba0aa71f8 'parser' 'P'
|     | |-DeclRefExpr 0x559ba0ad3850 <col:61> 'T' lvalue ParmVar 0x559ba0aa7298 'x' 'T &'
|     | `-DeclRefExpr 0x559ba0ad3870 <col:64> 'const V' lvalue ParmVar 0x559ba0aa7338 'default_value' 'const V &'
|     `-ReturnStmt 0x559ba0ad3908 <line:466:9, col:17>
|       `-UnaryOperator 0x559ba0ad38f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad38e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0aa7b08 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x559ba0aa75a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa7628 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ba0aa76a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ba0aa7a68 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ba0aa7770 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa77e8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa7888 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ba0aa7928 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ba0ad3ac0 <col:63, line:481:5>
|     `-ReturnStmt 0x559ba0ad3ab0 <line:480:9, col:47>
|       `-CallExpr 0x559ba0ad3a68 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad3948 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad39c8 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa7770 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad39e8 <col:30> 'int' 0
|         |-DeclRefExpr 0x559ba0ad3a08 <col:33> 'P' lvalue ParmVar 0x559ba0aa77e8 'parser' 'P'
|         |-DeclRefExpr 0x559ba0ad3a28 <col:41> 'T1' lvalue ParmVar 0x559ba0aa7888 'x1' 'T1 &'
|         `-DeclRefExpr 0x559ba0ad3a48 <col:45> 'T2' lvalue ParmVar 0x559ba0aa7928 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559ba0aa8088 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x559ba0aa7b80 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa7bf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ba0aa7c78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ba0aa7fe8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ba0aa7d40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa7db8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa7e58 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ba0aa7ef8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ba0ad3c60 <col:65, line:485:5>
|     `-ReturnStmt 0x559ba0ad3c50 <line:484:9, col:55>
|       `-CallExpr 0x559ba0ad3c08 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad3ae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad3b68 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa7d40 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad3b88 <col:30> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int'
|         |-DeclRefExpr 0x559ba0ad3ba8 <col:41> 'P' lvalue ParmVar 0x559ba0aa7db8 'parser' 'P'
|         |-DeclRefExpr 0x559ba0ad3bc8 <col:49> 'T1' lvalue ParmVar 0x559ba0aa7e58 'x1' 'T1 &'
|         `-DeclRefExpr 0x559ba0ad3be8 <col:53> 'T2' lvalue ParmVar 0x559ba0aa7ef8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559ba0aa8608 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x559ba0aa8100 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa8178 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ba0aa81f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ba0aa8568 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ba0aa82c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa8338 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa83d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ba0aa8478 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ba0ad3e00 <col:65, line:489:5>
|     `-ReturnStmt 0x559ba0ad3df0 <line:488:9, col:56>
|       `-CallExpr 0x559ba0ad3da8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad3c88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad3d08 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa82c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad3d28 <col:30> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int'
|         |-DeclRefExpr 0x559ba0ad3d48 <col:42> 'P' lvalue ParmVar 0x559ba0aa8338 'parser' 'P'
|         |-DeclRefExpr 0x559ba0ad3d68 <col:50> 'T1' lvalue ParmVar 0x559ba0aa83d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x559ba0ad3d88 <col:54> 'T2' lvalue ParmVar 0x559ba0aa8478 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559ba0aa8b88 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x559ba0aa8680 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa86f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ba0aa8778 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ba0aa8ae8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ba0aa8840 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa88b8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa8958 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ba0aa89f8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ba0ad4050 <col:66, line:493:5>
|     `-ReturnStmt 0x559ba0ad4040 <line:492:9, col:68>
|       `-CallExpr 0x559ba0ad3ff8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad3e28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad3ea8 <col:21> 'const char *' lvalue ParmVar 0x559ba0aa8840 'keyword' 'const char *'
|         |-BinaryOperator 0x559ba0ad3f78 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x559ba0ad3f28 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559ba0ad3f08 <col:30> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x559ba0ad3f60 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x559ba0ad3f40 <col:42> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x559ba0ad3f98 <col:54> 'P' lvalue ParmVar 0x559ba0aa88b8 'parser' 'P'
|         |-DeclRefExpr 0x559ba0ad3fb8 <col:62> 'T1' lvalue ParmVar 0x559ba0aa8958 'x1' 'T1 &'
|         `-DeclRefExpr 0x559ba0ad3fd8 <col:66> 'T2' lvalue ParmVar 0x559ba0aa89f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559ba0aa91e8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x559ba0aa8c00 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aa8c78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ba0aa8cf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ba0aa9148 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ba0aa8dc0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa8e40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aa8eb8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aa8f58 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ba0aa8ff8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ba0ad41e0 <col:74, line:498:5>
|     |-CallExpr 0x559ba0ad4158 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0ad4068 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x559ba0ad40a8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x559ba0ad40b8 <col:30> 'const char *' lvalue ParmVar 0x559ba0aa8dc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ba0ad40d8 <col:39> 'int' lvalue ParmVar 0x559ba0aa8e40 'flags' 'int'
|     | |-DeclRefExpr 0x559ba0ad40f8 <col:46> 'P' lvalue ParmVar 0x559ba0aa8eb8 'parser' 'P'
|     | |-DeclRefExpr 0x559ba0ad4118 <col:54> 'T1' lvalue ParmVar 0x559ba0aa8f58 'x1' 'T1 &'
|     | `-DeclRefExpr 0x559ba0ad4138 <col:58> 'T2' lvalue ParmVar 0x559ba0aa8ff8 'x2' 'T2 &'
|     `-ReturnStmt 0x559ba0ad41d0 <line:497:9, col:17>
|       `-UnaryOperator 0x559ba0ad41b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad41a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0aa9548 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x559ba0aa9268 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ba0aa94a8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ba0aa9320 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa9398 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x559ba0ad4328 <col:52, line:509:5>
|     `-ReturnStmt 0x559ba0ad4318 <line:508:9, col:44>
|       `-CallExpr 0x559ba0ad42e0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad4210 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad4280 <col:26> 'const char *' lvalue ParmVar 0x559ba0aa9320 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad42a0 <col:35> 'int' 0
|         `-DeclRefExpr 0x559ba0ad42c0 <col:38> 'P' lvalue ParmVar 0x559ba0aa9398 'parser' 'P'
|-FunctionTemplateDecl 0x559ba0aa9848 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x559ba0aa95b0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ba0aa97a8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ba0aa9660 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa96d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x559ba0ad4468 <col:54, line:513:5>
|     `-ReturnStmt 0x559ba0ad4458 <line:512:9, col:52>
|       `-CallExpr 0x559ba0ad4420 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad4350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad43c0 <col:26> 'const char *' lvalue ParmVar 0x559ba0aa9660 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad43e0 <col:35> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int'
|         `-DeclRefExpr 0x559ba0ad4400 <col:46> 'P' lvalue ParmVar 0x559ba0aa96d8 'parser' 'P'
|-FunctionTemplateDecl 0x559ba0aa9b48 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x559ba0aa98b0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ba0aa9aa8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ba0aa9960 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa99d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x559ba0ad45a8 <col:54, line:517:5>
|     `-ReturnStmt 0x559ba0ad4598 <line:516:9, col:53>
|       `-CallExpr 0x559ba0ad4560 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad4490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad4500 <col:26> 'const char *' lvalue ParmVar 0x559ba0aa9960 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad4520 <col:35> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int'
|         `-DeclRefExpr 0x559ba0ad4540 <col:47> 'P' lvalue ParmVar 0x559ba0aa99d8 'parser' 'P'
|-FunctionTemplateDecl 0x559ba0aa9e48 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x559ba0aa9bb0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ba0aa9da8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ba0aa9c60 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa9cd8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x559ba0ad4798 <col:55, line:521:5>
|     `-ReturnStmt 0x559ba0ad4788 <line:520:9, col:65>
|       `-CallExpr 0x559ba0ad4750 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad45d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad4640 <col:26> 'const char *' lvalue ParmVar 0x559ba0aa9c60 'keyword' 'const char *'
|         |-BinaryOperator 0x559ba0ad4710 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x559ba0ad46c0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559ba0ad46a0 <col:35> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x559ba0ad46f8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x559ba0ad46d8 <col:47> 'const int' lvalue Var 0x559ba0aa0050 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x559ba0ad4730 <col:59> 'P' lvalue ParmVar 0x559ba0aa9cd8 'parser' 'P'
|-FunctionTemplateDecl 0x559ba0aaa218 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x559ba0aa9eb0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ba0aaa178 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x559ba0aa9f60 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aa9fe0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aaa058 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x559ba0ad48d8 <col:63, line:526:5>
|     |-CallExpr 0x559ba0ad4860 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0ad47b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x559ba0ad47f0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x559ba0ad4800 <col:35> 'const char *' lvalue ParmVar 0x559ba0aa9f60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ba0ad4820 <col:44> 'int' lvalue ParmVar 0x559ba0aa9fe0 'flags' 'int'
|     | `-DeclRefExpr 0x559ba0ad4840 <col:51> 'P' lvalue ParmVar 0x559ba0aaa058 'parser' 'P'
|     `-ReturnStmt 0x559ba0ad48c8 <line:525:9, col:17>
|       `-UnaryOperator 0x559ba0ad48b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad48a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0aaa668 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x559ba0aaa288 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aaa308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aaa5c8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ba0aaa3c8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aaa440 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aaa4e8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad4a30 <col:58, line:541:5>
|     `-ReturnStmt 0x559ba0ad4a20 <line:540:9, col:39>
|       `-CallExpr 0x559ba0ad49e8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad4908 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad4988 <col:21> 'const char *' lvalue ParmVar 0x559ba0aaa3c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad49a8 <col:30> 'P' lvalue ParmVar 0x559ba0aaa440 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad49c8 <col:38> 'T' lvalue ParmVar 0x559ba0aaa4e8 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aaaab8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x559ba0aaa6d8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aaa758 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aaaa18 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ba0aaa818 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aaa890 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aaa938 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad4b68 <col:60, line:545:5>
|     `-ReturnStmt 0x559ba0ad4b58 <line:544:9, col:41>
|       `-CallExpr 0x559ba0ad4b20 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad4a58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad4ac0 <col:23> 'const char *' lvalue ParmVar 0x559ba0aaa818 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad4ae0 <col:32> 'P' lvalue ParmVar 0x559ba0aaa890 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad4b00 <col:40> 'T' lvalue ParmVar 0x559ba0aaa938 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aaaf08 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x559ba0aaab28 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aaaba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aaae68 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ba0aaac68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aaace0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aaad88 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad4ca0 <col:60, line:549:5>
|     `-ReturnStmt 0x559ba0ad4c90 <line:548:9, col:41>
|       `-CallExpr 0x559ba0ad4c58 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad4b90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad4bf8 <col:23> 'const char *' lvalue ParmVar 0x559ba0aaac68 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad4c18 <col:32> 'P' lvalue ParmVar 0x559ba0aaace0 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad4c38 <col:40> 'T' lvalue ParmVar 0x559ba0aaad88 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aab358 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x559ba0aaaf78 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aaaff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aab2b8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ba0aab0b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aab130 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aab1d8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad4dd8 <col:61, line:553:5>
|     `-ReturnStmt 0x559ba0ad4dc8 <line:552:9, col:42>
|       `-CallExpr 0x559ba0ad4d90 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad4cc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad4d30 <col:24> 'const char *' lvalue ParmVar 0x559ba0aab0b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad4d50 <col:33> 'P' lvalue ParmVar 0x559ba0aab130 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad4d70 <col:41> 'T' lvalue ParmVar 0x559ba0aab1d8 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aab838 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x559ba0aab3c8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aab448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aab798 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ba0aab508 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aab588 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aab600 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aab6a8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad4f50 <col:69, line:557:5>
|     `-ReturnStmt 0x559ba0ad4f40 <line:556:9, col:46>
|       `-CallExpr 0x559ba0ad4f00 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad4e00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad4e80 <col:21> 'const char *' lvalue ParmVar 0x559ba0aab508 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad4ea0 <col:30> 'int' lvalue ParmVar 0x559ba0aab588 'flags' 'int'
|         |-DeclRefExpr 0x559ba0ad4ec0 <col:37> 'P' lvalue ParmVar 0x559ba0aab600 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad4ee0 <col:45> 'T' lvalue ParmVar 0x559ba0aab6a8 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aabb48 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x559ba0aab8b0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ba0aabaa8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ba0aab960 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aab9d8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x559ba0ad5090 <col:56, line:571:5>
|     `-ReturnStmt 0x559ba0ad5080 <line:570:9, col:48>
|       `-CallExpr 0x559ba0ad5048 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad4f78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad4fe8 <col:30> 'const char *' lvalue ParmVar 0x559ba0aab960 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad5008 <col:39> 'int' 0
|         `-DeclRefExpr 0x559ba0ad5028 <col:42> 'P' lvalue ParmVar 0x559ba0aab9d8 'parser' 'P'
|-FunctionTemplateDecl 0x559ba0aabed8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x559ba0aabbb0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ba0aabe38 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x559ba0aabc60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aabce0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aabd58 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x559ba0ad5260 <col:67, line:576:5>
|     |-CallExpr 0x559ba0ad51e8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0ad50a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x559ba0ad50e8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x559ba0ad50f8 <col:39> 'const char *' lvalue ParmVar 0x559ba0aabc60 'keyword' 'const char *'
|     | |-BinaryOperator 0x559ba0ad51a8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x559ba0ad5158 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559ba0ad5118 <col:48> 'int' lvalue ParmVar 0x559ba0aabce0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x559ba0ad5190 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559ba0ad5170 <col:56> 'const int' lvalue Var 0x559ba0aa0240 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x559ba0ad51c8 <col:68> 'P' lvalue ParmVar 0x559ba0aabd58 'parser' 'P'
|     `-ReturnStmt 0x559ba0ad5250 <line:575:9, col:17>
|       `-UnaryOperator 0x559ba0ad5238 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad5228 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0aac328 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x559ba0aabf48 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aabfc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aac288 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ba0aac088 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aac100 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aac1a8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad53d0 <col:62, line:592:5>
|     `-ReturnStmt 0x559ba0ad53c0 <line:591:9, col:51>
|       `-CallExpr 0x559ba0ad5380 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad5290 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad5300 <col:30> 'const char *' lvalue ParmVar 0x559ba0aac088 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad5320 <col:39> 'int' 0
|         |-DeclRefExpr 0x559ba0ad5340 <col:42> 'P' lvalue ParmVar 0x559ba0aac100 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad5360 <col:50> 'T' lvalue ParmVar 0x559ba0aac1a8 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0aac808 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x559ba0aac398 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aac418 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aac768 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ba0aac4d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aac558 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aac5d0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aac678 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad55c8 <col:73, line:597:5>
|     |-CallExpr 0x559ba0ad5548 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0ad53e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x559ba0ad5428 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x559ba0ad5438 <col:39> 'const char *' lvalue ParmVar 0x559ba0aac4d8 'keyword' 'const char *'
|     | |-BinaryOperator 0x559ba0ad54e8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x559ba0ad5498 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559ba0ad5458 <col:48> 'int' lvalue ParmVar 0x559ba0aac558 'flags' 'int'
|     | | `-ImplicitCastExpr 0x559ba0ad54d0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559ba0ad54b0 <col:56> 'const int' lvalue Var 0x559ba0aa0240 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x559ba0ad5508 <col:68> 'P' lvalue ParmVar 0x559ba0aac5d0 'parser' 'P'
|     | `-DeclRefExpr 0x559ba0ad5528 <col:76> 'T' lvalue ParmVar 0x559ba0aac678 'x' 'T &'
|     `-ReturnStmt 0x559ba0ad55b8 <line:596:9, col:17>
|       `-UnaryOperator 0x559ba0ad55a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad5590 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0aacdb8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x559ba0aac880 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aac8f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aacd18 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x559ba0aac9b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aaca30 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aacbf0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559ba0ad5738 <col:65, line:614:5>
|     `-ReturnStmt 0x559ba0ad5728 <line:613:9, col:46>
|       `-CallExpr 0x559ba0ad56e8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad55f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad5668 <col:25> 'const char *' lvalue ParmVar 0x559ba0aac9b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad5688 <col:34> 'int' 0
|         |-DeclRefExpr 0x559ba0ad56a8 <col:37> 'P' lvalue ParmVar 0x559ba0aaca30 'parser' 'P'
|         `-DeclRefExpr 0x559ba0ad56c8 <col:45> 'Vector<T>' lvalue ParmVar 0x559ba0aacbf0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x559ba0aad1e8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x559ba0aace28 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ba0aad148 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x559ba0aacee0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aad030 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559ba0ad5950 <col:55, line:618:5>
|     `-ReturnStmt 0x559ba0ad5940 <line:617:9, col:55>
|       `-CallExpr 0x559ba0ad5900 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad5760 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad57d0 <col:25> 'const char *' lvalue ParmVar 0x559ba0aacee0 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ba0ad57f0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x559ba0ad58c0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x559ba0ad58e0 <col:54> 'Vector<T>' lvalue ParmVar 0x559ba0aad030 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x559ba0aad7b8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x559ba0aad250 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aad2c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aad718 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x559ba0aad388 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aad408 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aad480 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0aad5d0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559ba0ad5b48 <col:76, line:623:5>
|     |-CallExpr 0x559ba0ad5ac8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0ad5968 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x559ba0ad59a8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x559ba0ad59b8 <col:34> 'const char *' lvalue ParmVar 0x559ba0aad388 'keyword' 'const char *'
|     | |-BinaryOperator 0x559ba0ad5a68 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x559ba0ad5a18 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559ba0ad59d8 <col:43> 'int' lvalue ParmVar 0x559ba0aad408 'flags' 'int'
|     | | `-ImplicitCastExpr 0x559ba0ad5a50 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559ba0ad5a30 <col:51> 'const int' lvalue Var 0x559ba0aa0240 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x559ba0ad5a88 <col:63> 'P' lvalue ParmVar 0x559ba0aad480 'parser' 'P'
|     | `-DeclRefExpr 0x559ba0ad5aa8 <col:71> 'Vector<T>' lvalue ParmVar 0x559ba0aad5d0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x559ba0ad5b38 <line:622:9, col:17>
|       `-UnaryOperator 0x559ba0ad5b20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad5b10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0aadcf8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x559ba0aad830 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0aad8a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0aadc58 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x559ba0aad968 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0aad9e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0aadb30 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559ba0ad5db0 <col:66, line:627:5>
|     `-ReturnStmt 0x559ba0ad5da0 <line:626:9, col:59>
|       `-CallExpr 0x559ba0ad5d60 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ba0ad5b78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ba0ad5be8 <col:25> 'const char *' lvalue ParmVar 0x559ba0aad968 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ba0ad5c08 <col:34> 'int' lvalue ParmVar 0x559ba0aad9e8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x559ba0ad5d20 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x559ba0ad5d40 <col:58> 'Vector<T>' lvalue ParmVar 0x559ba0aadb30 'x' 'Vector<T> &'
|-CXXMethodDecl 0x559ba0ab30a0 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x559ba0ad5e30 <col:25, line:633:5>
|   `-ReturnStmt 0x559ba0ad5e20 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x559ba0ad5e08 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x559ba0ad5dd8 <col:16> 'const bool' lvalue ->_status 0x559ba0ab8ed8
|         `-CXXThisExpr 0x559ba0ad5dc8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x559ba0ab3218 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x559ba0ab3158 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x559ba0ad5f18 <col:27, line:639:5>
|   |-BinaryOperator 0x559ba0ad5ec0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559ba0ad5e48 <col:9> 'bool' lvalue ParmVar 0x559ba0ab3158 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559ba0ad5ea8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559ba0ad5e78 <col:13> 'bool' lvalue ->_status 0x559ba0ab8ed8
|   |     `-CXXThisExpr 0x559ba0ad5e68 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x559ba0ad5f08 <line:638:9, col:17>
|     `-UnaryOperator 0x559ba0ad5ef0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ba0ad5ee0 <col:17> 'Args *' this
|-CXXMethodDecl 0x559ba0ab3398 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x559ba0ab32d8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x559ba0ad6008 <col:39, line:644:5>
|   |-BinaryOperator 0x559ba0ad5fb0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559ba0ad5f38 <col:9> 'bool' lvalue ParmVar 0x559ba0ab32d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559ba0ad5f98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559ba0ad5f68 <col:13> 'const bool' lvalue ->_status 0x559ba0ab8ed8
|   |     `-CXXThisExpr 0x559ba0ad5f58 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x559ba0ad5ff8 <line:643:9, col:17>
|     `-UnaryOperator 0x559ba0ad5fe0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ba0ad5fd0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x559ba0ab3460 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x559ba0ad60b0 <col:30, line:651:5>
|   `-ReturnStmt 0x559ba0ad60a0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x559ba0ad6088 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x559ba0ad6058 <col:16> 'bool' lvalue ->_read_status 0x559ba0a989d0
|         `-ImplicitCastExpr 0x559ba0ad6038 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x559ba0ad6028 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x559ba0ab35a8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x559ba0ab3518 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x559ba0ad61b8 <col:32, line:658:5>
|   |-BinaryOperator 0x559ba0ad6160 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559ba0ad60c8 <col:9> 'bool' lvalue ParmVar 0x559ba0ab3518 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559ba0ad6148 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559ba0ad6118 <col:13> 'bool' lvalue ->_read_status 0x559ba0a989d0
|   |     `-ImplicitCastExpr 0x559ba0ad60f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x559ba0ad60e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x559ba0ad61a8 <line:657:9, col:17>
|     `-UnaryOperator 0x559ba0ad6190 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ba0ad6180 <col:17> 'Args *' this
|-CXXMethodDecl 0x559ba0ab36f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x559ba0ab3668 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x559ba0ad62c8 <col:44, line:663:5>
|   |-BinaryOperator 0x559ba0ad6270 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559ba0ad61d8 <col:9> 'bool' lvalue ParmVar 0x559ba0ab3668 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559ba0ad6258 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559ba0ad6228 <col:13> 'bool' lvalue ->_read_status 0x559ba0a989d0
|   |     `-ImplicitCastExpr 0x559ba0ad6208 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x559ba0ad61f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x559ba0ad62b8 <line:662:9, col:17>
|     `-UnaryOperator 0x559ba0ad62a0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ba0ad6290 <col:17> 'const Args *' this
|-CXXMethodDecl 0x559ba0ab37c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x559ba0ab3888 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x559ba0ab3950 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x559ba0ab3a18 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x559ba0ab3d28 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x559ba0ab3ab8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ba0ab3c88 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x559ba0ab3b98 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad6680 <col:19, line:706:5>
|     `-IfStmt 0x559ba0ad6658 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x559ba0ad63c8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x559ba0ad6588 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x559ba0ad6558 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x559ba0ad6518 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x559ba0ad6420 <col:42> '<bound member function type>' ->simple_slot 0x559ba0ad1110
|       |     | `-CXXThisExpr 0x559ba0ad6410 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x559ba0ad64b8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x559ba0ad6470 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x559ba0817578
|       |     | `-DeclRefExpr 0x559ba0ad6450 <col:55> 'T' lvalue ParmVar 0x559ba0ab3b98 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x559ba0ad64f8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x559ba0ad6648 <line:705:13, col:34>
|         `-CallExpr 0x559ba0ad6620 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x559ba0ad65a8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x559ba0ad6600 <col:33> 'T' lvalue ParmVar 0x559ba0ab3b98 'x' 'T &'
|-FunctionTemplateDecl 0x559ba0ab3ff8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x559ba0ab3d88 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ba0ab3f58 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x559ba0ab3e68 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x559ba0ad6a60 <col:31, line:717:5>
|     |-DeclStmt 0x559ba0ad67c0 <line:713:9, col:23>
|     | `-VarDecl 0x559ba0ad66a8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x559ba0ad6798 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x559ba0ad6720 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x559ba0ad6778 <col:21> 'T' lvalue ParmVar 0x559ba0ab3e68 'x' 'T &'
|     |-IfStmt 0x559ba0ad6a10 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x559ba0ad68b8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x559ba0ad69f0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x559ba0ad6990 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x559ba0ad6920 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|     |   | `-DeclRefExpr 0x559ba0ad6900 <col:14> 'T *' lvalue Var 0x559ba0ad66a8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x559ba0ad69d0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x559ba0ad6a48 <line:716:9, col:16>
|       `-DeclRefExpr 0x559ba0ad6a28 <col:16> 'T *' lvalue Var 0x559ba0ad66a8 's' 'T *'
|-FunctionTemplateDecl 0x559ba0ab4408 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x559ba0ab4058 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ba0ab40d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ba0ab4368 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x559ba0ab41b8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x559ba0ab4258 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x559ba0ad6d70 <col:37, line:726:5>
|     |-IfStmt 0x559ba0ad6d00 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x559ba0ad6d20 <line:723:13, col:26>
|     | | `-VarDecl 0x559ba0ad6ac8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x559ba0ad6bb8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x559ba0ad6b40 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x559ba0ad6b98 <col:25> 'T' lvalue ParmVar 0x559ba0ab41b8 'x' 'T &'
|     | |-DeclRefExpr 0x559ba0ad6be0 <col:16> 'T *' lvalue Var 0x559ba0ad6ac8 's' 'T *'
|     | `-BinaryOperator 0x559ba0ad6ce0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x559ba0ad6c90 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x559ba0ad6c20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|     |   | `-DeclRefExpr 0x559ba0ad6c00 <col:14> 'T *' lvalue Var 0x559ba0ad6ac8 's' 'T *'
|     |   `-DeclRefExpr 0x559ba0ad6cc0 <col:18> 'const V' lvalue ParmVar 0x559ba0ab4258 'value' 'const V &'
|     `-ReturnStmt 0x559ba0ad6d60 <line:725:9, col:17>
|       `-UnaryOperator 0x559ba0ad6d48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ba0ad6d38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ba0ab4808 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x559ba0ab4470 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ba0ab4768 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x559ba0ab4520 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0ab45a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0ab4648 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x559ba0ada510 <col:65, line:737:5>
|     |-DeclStmt 0x559ba0ad6e08 <line:732:9, col:26>
|     | `-VarDecl 0x559ba0ad6da0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559ba0ada4d8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x559ba0ada4f8 <line:733:13, col:58>
|       | `-VarDecl 0x559ba0ad6e30 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559ba0ad7010 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559ba0ad6fe0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559ba0ad6fc8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559ba0ad6fa8 <col:26, col:58> 'String' (CXXTemporary 0x559ba0ad6fa8)
|       |           `-CXXMemberCallExpr 0x559ba0ad6f38 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559ba0ad6ea8 <col:26> '<bound member function type>' ->find 0x559ba0ad0728
|       |             | `-CXXThisExpr 0x559ba0ad6e98 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559ba0ad6f70 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ba0ad6ed8 <col:31> 'const char *' lvalue ParmVar 0x559ba0ab4520 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559ba0ad6f88 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ba0ad6ef8 <col:40> 'int' lvalue ParmVar 0x559ba0ab45a0 'flags' 'int'
|       |             `-DeclRefExpr 0x559ba0ad6f18 <col:47> 'Args::Slot *' lvalue Var 0x559ba0ad6da0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559ba0ad70c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ba0ad70b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ba0ad7090 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ba0ad7060 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|       |       `-ImplicitCastExpr 0x559ba0ad7048 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559ba0ad7028 <col:20> 'String' lvalue Var 0x559ba0ad6e30 'str' 'String'
|       `-CompoundStmt 0x559ba0ada4b8 <col:61, line:736:9>
|         |-DeclStmt 0x559ba0ad9f00 <line:734:13, col:76>
|         | `-VarDecl 0x559ba0ad7118 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x559ba0ad9ed0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559ba0ad9e40 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559ba0ad9e88 <col:60> 'T' lvalue ParmVar 0x559ba0ab4648 'variable' 'T &'
|         |     `-UnaryOperator 0x559ba0ad9eb8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559ba0ad9ea8 <col:71> 'Args *' this
|         `-CallExpr 0x559ba0ada488 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x559ba0ad9f28 <col:13> '<bound member function type>' ->postparse 0x559ba0ad0938
|           | `-CXXThisExpr 0x559ba0ad9f18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x559ba0ada448 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x559ba0ad9f58 <col:23> 'T *' lvalue Var 0x559ba0ad7118 's' 'T *'
|           | `-CallExpr 0x559ba0ada408 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x559ba0ada1e0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x559ba0ada2e0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x559ba0ada300 <col:86> 'String' lvalue Var 0x559ba0ad6e30 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x559ba0ada3b0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559ba0ada340 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|           |   | `-DeclRefExpr 0x559ba0ada320 <col:92> 'T *' lvalue Var 0x559ba0ad7118 's' 'T *'
|           |   `-UnaryOperator 0x559ba0ada3f0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x559ba0ada3e0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x559ba0ada468 <col:103> 'Args::Slot *' lvalue Var 0x559ba0ad6da0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ba0ab4d58 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x559ba0ab4878 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ba0ab48f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ba0ab4cb8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x559ba0ab49b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0ab4a38 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0ab4ad8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x559ba0ab4b78 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x559ba0adb3b0 <col:88, line:745:5>
|     |-DeclStmt 0x559ba0ada5a8 <line:741:9, col:26>
|     | `-VarDecl 0x559ba0ada540 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ba0ada7c8 <line:742:9, col:55>
|     | `-VarDecl 0x559ba0ada5d0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x559ba0ada7b0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x559ba0ada780 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x559ba0ada768 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x559ba0ada748 <col:22, col:54> 'String' (CXXTemporary 0x559ba0ada748)
|     |           `-CXXMemberCallExpr 0x559ba0ada6d8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x559ba0ada648 <col:22> '<bound member function type>' ->find 0x559ba0ad0728
|     |             | `-CXXThisExpr 0x559ba0ada638 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x559ba0ada710 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559ba0ada678 <col:27> 'const char *' lvalue ParmVar 0x559ba0ab49b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x559ba0ada728 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559ba0ada698 <col:36> 'int' lvalue ParmVar 0x559ba0ab4a38 'flags' 'int'
|     |             `-DeclRefExpr 0x559ba0ada6b8 <col:43> 'Args::Slot *' lvalue Var 0x559ba0ada540 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x559ba0adaba0 <line:743:9, col:72>
|     | `-VarDecl 0x559ba0ada818 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x559ba0adab70 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x559ba0adaae0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x559ba0adab28 <col:56> 'T' lvalue ParmVar 0x559ba0ab4ad8 'variable' 'T &'
|     |     `-UnaryOperator 0x559ba0adab58 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x559ba0adab48 <col:67> 'Args *' this
|     `-CallExpr 0x559ba0adb380 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x559ba0adabc8 <col:9> '<bound member function type>' ->postparse 0x559ba0ad0938
|       | `-CXXThisExpr 0x559ba0adabb8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x559ba0adb340 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x559ba0adabf8 <col:19> 'T *' lvalue Var 0x559ba0ada818 's' 'T *'
|       | `-ParenExpr 0x559ba0adb320 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x559ba0adb2f0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x559ba0adb2d8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x559ba0adb2c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x559ba0adb2a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x559ba0adb270 <col:25> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|       |     |       `-ImplicitCastExpr 0x559ba0adb258 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x559ba0adac18 <col:25> 'String' lvalue Var 0x559ba0ada5d0 'str' 'String'
|       |     |-CallExpr 0x559ba0adb0c8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x559ba0adaea0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x559ba0adafa0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x559ba0adafc0 <col:89> 'String' lvalue Var 0x559ba0ada5d0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x559ba0adb070 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x559ba0adb000 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|       |     | | `-DeclRefExpr 0x559ba0adafe0 <col:95> 'T *' lvalue Var 0x559ba0ada818 's' 'T *'
|       |     | `-UnaryOperator 0x559ba0adb0b0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x559ba0adb0a0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x559ba0adb238 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x559ba0adb218 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x559ba0adb1e8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x559ba0adb198 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x559ba0adb128 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|       |         | | `-DeclRefExpr 0x559ba0adb108 <col:109> 'T *' lvalue Var 0x559ba0ada818 's' 'T *'
|       |         | `-DeclRefExpr 0x559ba0adb1c8 <col:113> 'const V' lvalue ParmVar 0x559ba0ab4b78 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x559ba0adb208 <col:120> 'bool' true
|       `-DeclRefExpr 0x559ba0adb360 <col:128> 'Args::Slot *' lvalue Var 0x559ba0ada540 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ba0ab5288 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x559ba0ab4dd0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0ab4e48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0ab51e8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ba0ab4f08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0ab4f88 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0ab5000 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0ab50a8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x559ba0adbfa8 <col:75, line:754:5>
|     |-DeclStmt 0x559ba0adb458 <line:749:9, col:26>
|     | `-VarDecl 0x559ba0adb3f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559ba0adbf70 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x559ba0adbf90 <line:750:13, col:58>
|       | `-VarDecl 0x559ba0adb480 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559ba0adb660 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559ba0adb630 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559ba0adb618 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559ba0adb5f8 <col:26, col:58> 'String' (CXXTemporary 0x559ba0adb5f8)
|       |           `-CXXMemberCallExpr 0x559ba0adb588 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559ba0adb4f8 <col:26> '<bound member function type>' ->find 0x559ba0ad0728
|       |             | `-CXXThisExpr 0x559ba0adb4e8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559ba0adb5c0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ba0adb528 <col:31> 'const char *' lvalue ParmVar 0x559ba0ab4f08 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559ba0adb5d8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ba0adb548 <col:40> 'int' lvalue ParmVar 0x559ba0ab4f88 'flags' 'int'
|       |             `-DeclRefExpr 0x559ba0adb568 <col:47> 'Args::Slot *' lvalue Var 0x559ba0adb3f0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559ba0adb718 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ba0adb700 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ba0adb6e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ba0adb6b0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|       |       `-ImplicitCastExpr 0x559ba0adb698 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559ba0adb678 <col:20> 'String' lvalue Var 0x559ba0adb480 'str' 'String'
|       `-CompoundStmt 0x559ba0adbf50 <col:61, line:753:9>
|         |-DeclStmt 0x559ba0adbaf0 <line:751:13, col:63>
|         | `-VarDecl 0x559ba0adb768 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x559ba0adbac0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559ba0adba30 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559ba0adba78 <col:47> 'T' lvalue ParmVar 0x559ba0ab50a8 'variable' 'T &'
|         |     `-UnaryOperator 0x559ba0adbaa8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559ba0adba98 <col:58> 'Args *' this
|         `-CallExpr 0x559ba0adbf20 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x559ba0adbb18 <col:13> '<bound member function type>' ->postparse 0x559ba0ad0938
|           | `-CXXThisExpr 0x559ba0adbb08 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x559ba0adbee0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x559ba0adbb48 <col:23> 'T *' lvalue Var 0x559ba0adb768 's' 'T *'
|           | `-CallExpr 0x559ba0adbea0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x559ba0adbd30 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x559ba0adbd78 <col:56> 'P' lvalue ParmVar 0x559ba0ab5000 'parser' 'P'
|           |   |-DeclRefExpr 0x559ba0adbd98 <col:64> 'String' lvalue Var 0x559ba0adb480 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x559ba0adbe48 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559ba0adbdd8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|           |   | `-DeclRefExpr 0x559ba0adbdb8 <col:70> 'T *' lvalue Var 0x559ba0adb768 's' 'T *'
|           |   `-UnaryOperator 0x559ba0adbe88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x559ba0adbe78 <col:74> 'Args *' this
|           `-DeclRefExpr 0x559ba0adbf00 <col:81> 'Args::Slot *' lvalue Var 0x559ba0adb3f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ba0ab58e8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x559ba0ab5300 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ba0ab5378 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x559ba0ab53f8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559ba0ab5848 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x559ba0ab54c0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0ab5540 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0ab55b8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0ab5658 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x559ba0ab56f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x559ba0adcd38 <col:98, line:762:5>
|     |-DeclStmt 0x559ba0adc040 <line:758:9, col:26>
|     | `-VarDecl 0x559ba0adbfd8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ba0adc260 <line:759:9, col:55>
|     | `-VarDecl 0x559ba0adc068 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x559ba0adc248 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x559ba0adc218 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x559ba0adc200 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x559ba0adc1e0 <col:22, col:54> 'String' (CXXTemporary 0x559ba0adc1e0)
|     |           `-CXXMemberCallExpr 0x559ba0adc170 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x559ba0adc0e0 <col:22> '<bound member function type>' ->find 0x559ba0ad0728
|     |             | `-CXXThisExpr 0x559ba0adc0d0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x559ba0adc1a8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559ba0adc110 <col:27> 'const char *' lvalue ParmVar 0x559ba0ab54c0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x559ba0adc1c0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559ba0adc130 <col:36> 'int' lvalue ParmVar 0x559ba0ab5540 'flags' 'int'
|     |             `-DeclRefExpr 0x559ba0adc150 <col:43> 'Args::Slot *' lvalue Var 0x559ba0adbfd8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x559ba0adc680 <line:760:9, col:59>
|     | `-VarDecl 0x559ba0adc2b8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x559ba0adc650 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x559ba0adc5c0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x559ba0adc608 <col:43> 'T' lvalue ParmVar 0x559ba0ab5658 'variable' 'T &'
|     |     `-UnaryOperator 0x559ba0adc638 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x559ba0adc628 <col:54> 'Args *' this
|     `-CallExpr 0x559ba0adcd08 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x559ba0adc6a8 <col:9> '<bound member function type>' ->postparse 0x559ba0ad0938
|       | `-CXXThisExpr 0x559ba0adc698 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x559ba0adccc8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x559ba0adc6d8 <col:19> 'T *' lvalue Var 0x559ba0adc2b8 's' 'T *'
|       | `-ParenExpr 0x559ba0adcca8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x559ba0adcc78 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x559ba0adcc60 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x559ba0adcc48 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x559ba0adcc28 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x559ba0adcbf8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|       |     |       `-ImplicitCastExpr 0x559ba0adcbe0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x559ba0adc6f8 <col:25> 'String' lvalue Var 0x559ba0adc068 'str' 'String'
|       |     |-CallExpr 0x559ba0adca50 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x559ba0adc8e0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x559ba0adc928 <col:59> 'P' lvalue ParmVar 0x559ba0ab55b8 'parser' 'P'
|       |     | |-DeclRefExpr 0x559ba0adc948 <col:67> 'String' lvalue Var 0x559ba0adc068 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x559ba0adc9f8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x559ba0adc988 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|       |     | | `-DeclRefExpr 0x559ba0adc968 <col:73> 'T *' lvalue Var 0x559ba0adc2b8 's' 'T *'
|       |     | `-UnaryOperator 0x559ba0adca38 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x559ba0adca28 <col:77> 'Args *' this
|       |     `-ParenExpr 0x559ba0adcbc0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x559ba0adcba0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x559ba0adcb70 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x559ba0adcb20 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x559ba0adcab0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|       |         | | `-DeclRefExpr 0x559ba0adca90 <col:87> 'T *' lvalue Var 0x559ba0adc2b8 's' 'T *'
|       |         | `-DeclRefExpr 0x559ba0adcb50 <col:91> 'const V' lvalue ParmVar 0x559ba0ab56f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x559ba0adcb90 <col:98> 'bool' true
|       `-DeclRefExpr 0x559ba0adcce8 <col:106> 'Args::Slot *' lvalue Var 0x559ba0adbfd8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ba0ab5f58 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x559ba0ab5968 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0ab59e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ba0ab5a68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ba0ab5eb8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ba0ab5b30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0ab5bb0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0ab5c28 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0ab5cc8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x559ba0ab5d68 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x559ba0addd18 <col:60, line:773:5>
|     |-DeclStmt 0x559ba0adcde0 <line:767:9, col:26>
|     | `-VarDecl 0x559ba0adcd78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559ba0addce0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x559ba0addd00 <line:768:13, col:58>
|       | `-VarDecl 0x559ba0adce08 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559ba0adcfe8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559ba0adcfb8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559ba0adcfa0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559ba0adcf80 <col:26, col:58> 'String' (CXXTemporary 0x559ba0adcf80)
|       |           `-CXXMemberCallExpr 0x559ba0adcf10 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559ba0adce80 <col:26> '<bound member function type>' ->find 0x559ba0ad0728
|       |             | `-CXXThisExpr 0x559ba0adce70 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559ba0adcf48 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ba0adceb0 <col:31> 'const char *' lvalue ParmVar 0x559ba0ab5b30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559ba0adcf60 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ba0adced0 <col:40> 'int' lvalue ParmVar 0x559ba0ab5bb0 'flags' 'int'
|       |             `-DeclRefExpr 0x559ba0adcef0 <col:47> 'Args::Slot *' lvalue Var 0x559ba0adcd78 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559ba0add0a0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ba0add088 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ba0add068 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ba0add038 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|       |       `-ImplicitCastExpr 0x559ba0add020 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559ba0add000 <col:20> 'String' lvalue Var 0x559ba0adce08 'str' 'String'
|       `-CompoundStmt 0x559ba0addcb8 <col:61, line:772:9>
|         |-DeclStmt 0x559ba0add3e0 <line:769:13, col:66>
|         | `-VarDecl 0x559ba0add0f8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x559ba0add3b0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559ba0add320 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559ba0add368 <col:49> 'T1' lvalue ParmVar 0x559ba0ab5cc8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x559ba0add398 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559ba0add388 <col:61> 'Args *' this
|         |-DeclStmt 0x559ba0add750 <line:770:13, col:66>
|         | `-VarDecl 0x559ba0add468 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x559ba0add720 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559ba0add690 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559ba0add6d8 <col:49> 'T2' lvalue ParmVar 0x559ba0ab5d68 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x559ba0add708 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559ba0add6f8 <col:61> 'Args *' this
|         `-CallExpr 0x559ba0addc88 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x559ba0add778 <col:13> '<bound member function type>' ->postparse 0x559ba0ad0938
|           | `-CXXThisExpr 0x559ba0add768 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x559ba0addc48 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x559ba0add7e8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x559ba0add7a8 <col:23> 'T1 *' lvalue Var 0x559ba0add0f8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x559ba0add7c8 <col:29> 'T2 *' lvalue Var 0x559ba0add468 's2' 'T2 *'
|           | `-CallExpr 0x559ba0addc00 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x559ba0add9d0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x559ba0adda18 <col:63> 'P' lvalue ParmVar 0x559ba0ab5c28 'parser' 'P'
|           |   |-DeclRefExpr 0x559ba0adda38 <col:71> 'String' lvalue Var 0x559ba0adce08 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x559ba0addae8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559ba0adda78 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|           |   | `-DeclRefExpr 0x559ba0adda58 <col:77> 'T1 *' lvalue Var 0x559ba0add0f8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x559ba0addba8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559ba0addb38 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|           |   | `-DeclRefExpr 0x559ba0addb18 <col:82> 'T2 *' lvalue Var 0x559ba0add468 's2' 'T2 *'
|           |   `-UnaryOperator 0x559ba0addbe8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x559ba0addbd8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x559ba0addc68 <col:94> 'Args::Slot *' lvalue Var 0x559ba0adcd78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ba0ab6348 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x559ba0ab5fd8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ba0ab62a8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x559ba0ab6090 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0ab6110 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0ab6188 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x559ba0ade230 <col:67, line:780:5>
|     |-DeclStmt 0x559ba0adddb0 <line:777:9, col:26>
|     | `-VarDecl 0x559ba0addd48 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559ba0ade1f8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x559ba0ade218 <line:778:13, col:58>
|       | `-VarDecl 0x559ba0adddd8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559ba0addfb8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559ba0addf88 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559ba0addf70 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559ba0addf50 <col:26, col:58> 'String' (CXXTemporary 0x559ba0addf50)
|       |           `-CXXMemberCallExpr 0x559ba0addee0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559ba0adde50 <col:26> '<bound member function type>' ->find 0x559ba0ad0728
|       |             | `-CXXThisExpr 0x559ba0adde40 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559ba0addf18 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ba0adde80 <col:31> 'const char *' lvalue ParmVar 0x559ba0ab6090 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559ba0addf30 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ba0addea0 <col:40> 'int' lvalue ParmVar 0x559ba0ab6110 'flags' 'int'
|       |             `-DeclRefExpr 0x559ba0addec0 <col:47> 'Args::Slot *' lvalue Var 0x559ba0addd48 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559ba0ade070 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ba0ade058 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ba0ade038 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ba0ade008 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|       |       `-ImplicitCastExpr 0x559ba0addff0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559ba0addfd0 <col:20> 'String' lvalue Var 0x559ba0adddd8 'str' 'String'
|       `-CallExpr 0x559ba0ade1c8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x559ba0ade098 <col:13> '<bound member function type>' ->postparse 0x559ba0ad0938
|         | `-CXXThisExpr 0x559ba0ade088 <col:13> 'Args *' implicit this
|         |-CallExpr 0x559ba0ade178 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x559ba0ade0e8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x559ba0ade0c8 <col:23> 'P' lvalue ParmVar 0x559ba0ab6188 'parser' 'P'
|         | |-DeclRefExpr 0x559ba0ade130 <col:36> 'String' lvalue Var 0x559ba0adddd8 'str' 'String'
|         | `-UnaryOperator 0x559ba0ade160 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x559ba0ade150 <col:42> 'Args *' this
|         `-DeclRefExpr 0x559ba0ade1a8 <col:49> 'Args::Slot *' lvalue Var 0x559ba0addd48 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ba0ab66e8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x559ba0ab63b8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ba0ab6648 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x559ba0ab6470 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0ab64f0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0ab6568 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x559ba0adeba0 <col:71, line:792:5>
|     |-DeclStmt 0x559ba0ade2c8 <line:784:9, col:26>
|     | `-VarDecl 0x559ba0ade260 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ba0ade398 <line:785:9, col:29>
|     | `-VarDecl 0x559ba0ade2f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x559ba0ade380 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x559ba0ade360 <col:28> 'int' 1
|     |-WhileStmt 0x559ba0adea50 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x559ba0adea70 <line:786:16, col:61>
|     | | `-VarDecl 0x559ba0ade3c0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x559ba0ade5a0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x559ba0ade570 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x559ba0ade558 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x559ba0ade538 <col:29, col:61> 'String' (CXXTemporary 0x559ba0ade538)
|     | |           `-CXXMemberCallExpr 0x559ba0ade4c8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x559ba0ade438 <col:29> '<bound member function type>' ->find 0x559ba0ad0728
|     | |             | `-CXXThisExpr 0x559ba0ade428 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x559ba0ade500 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ba0ade468 <col:34> 'const char *' lvalue ParmVar 0x559ba0ab6470 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x559ba0ade518 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ba0ade488 <col:43> 'int' lvalue ParmVar 0x559ba0ab64f0 'flags' 'int'
|     | |             `-DeclRefExpr 0x559ba0ade4a8 <col:50> 'Args::Slot *' lvalue Var 0x559ba0ade260 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x559ba0ade658 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559ba0ade640 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559ba0ade620 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559ba0ade5f0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|     | |       `-ImplicitCastExpr 0x559ba0ade5d8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x559ba0ade5b8 <col:23> 'String' lvalue Var 0x559ba0ade3c0 'str' 'String'
|     | `-CompoundStmt 0x559ba0adea28 <col:64, line:790:9>
|     |   |-CallExpr 0x559ba0ade7b0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x559ba0ade680 <col:13> '<bound member function type>' ->postparse 0x559ba0ad0938
|     |   | | `-CXXThisExpr 0x559ba0ade670 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x559ba0ade760 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x559ba0ade6d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x559ba0ade6b0 <col:23> 'P' lvalue ParmVar 0x559ba0ab6568 'parser' 'P'
|     |   | | |-DeclRefExpr 0x559ba0ade718 <col:36> 'String' lvalue Var 0x559ba0ade3c0 'str' 'String'
|     |   | | `-UnaryOperator 0x559ba0ade748 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x559ba0ade738 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x559ba0ade790 <col:49> 'Args::Slot *' lvalue Var 0x559ba0ade260 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x559ba0ade948 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x559ba0ade7e0 <col:13> 'int' lvalue Var 0x559ba0ade2f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x559ba0ade930 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x559ba0ade910 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x559ba0ade878 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x559ba0ade858 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x559ba0ade840 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x559ba0ade800 <col:28> 'int' lvalue Var 0x559ba0ade2f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x559ba0ade820 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x559ba0ade8f8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x559ba0ade8c8 <col:49> 'bool' lvalue ->_read_status 0x559ba0a989d0
|     |   |         `-ImplicitCastExpr 0x559ba0ade8a8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x559ba0ade898 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x559ba0ade9f8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x559ba0ade968 <col:13> 'int' lvalue ParmVar 0x559ba0ab64f0 'flags' 'int'
|     |     `-UnaryOperator 0x559ba0ade9e0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x559ba0ade9c8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x559ba0ade9a8 <col:23> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x559ba0adeb80 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x559ba0adeab8 <col:9> 'bool' lvalue ->_read_status 0x559ba0a989d0
|       | `-ImplicitCastExpr 0x559ba0adea98 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x559ba0adea88 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x559ba0adeb60 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x559ba0adeb40 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x559ba0adeb28 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x559ba0adeae8 <col:25> 'int' lvalue Var 0x559ba0ade2f8 'read_status' 'int'
|           `-IntegerLiteral 0x559ba0adeb08 <col:40> 'int' 1
|-FunctionTemplateDecl 0x559ba0ab6bc8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x559ba0ab6758 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0ab67d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0ab6b28 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ba0ab6898 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0ab6918 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0ab6990 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0ab6a38 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x559ba0adfb30 <col:84, line:805:5>
|     |-DeclStmt 0x559ba0adec48 <line:796:9, col:26>
|     | `-VarDecl 0x559ba0adebe0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ba0aded18 <line:797:9, col:29>
|     | `-VarDecl 0x559ba0adec78 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x559ba0aded00 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x559ba0adece0 <col:28> 'int' 1
|     |-DeclStmt 0x559ba0adf050 <line:798:9, col:71>
|     | `-VarDecl 0x559ba0aded68 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x559ba0adf020 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x559ba0adef90 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x559ba0adefd8 <col:55> 'T' lvalue ParmVar 0x559ba0ab6a38 'variable' 'T &'
|     |     `-UnaryOperator 0x559ba0adf008 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x559ba0adeff8 <col:66> 'Args *' this
|     |-WhileStmt 0x559ba0adf9e0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x559ba0adfa00 <line:799:16, col:61>
|     | | `-VarDecl 0x559ba0adf078 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x559ba0adf258 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x559ba0adf228 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x559ba0adf210 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x559ba0adf1f0 <col:29, col:61> 'String' (CXXTemporary 0x559ba0adf1f0)
|     | |           `-CXXMemberCallExpr 0x559ba0adf180 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x559ba0adf0f0 <col:29> '<bound member function type>' ->find 0x559ba0ad0728
|     | |             | `-CXXThisExpr 0x559ba0adf0e0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x559ba0adf1b8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ba0adf120 <col:34> 'const char *' lvalue ParmVar 0x559ba0ab6898 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x559ba0adf1d0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ba0adf140 <col:43> 'int' lvalue ParmVar 0x559ba0ab6918 'flags' 'int'
|     | |             `-DeclRefExpr 0x559ba0adf160 <col:50> 'Args::Slot *' lvalue Var 0x559ba0adebe0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x559ba0adf310 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559ba0adf2f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559ba0adf2d8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559ba0adf2a8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|     | |       `-ImplicitCastExpr 0x559ba0adf290 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x559ba0adf270 <col:23> 'String' lvalue Var 0x559ba0adf078 'str' 'String'
|     | `-CompoundStmt 0x559ba0adf9b8 <col:64, line:803:9>
|     |   |-CallExpr 0x559ba0adf740 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x559ba0adf338 <col:13> '<bound member function type>' ->postparse 0x559ba0ad0938
|     |   | | `-CXXThisExpr 0x559ba0adf328 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x559ba0adf700 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x559ba0adf368 <col:23> 'T *' lvalue Var 0x559ba0aded68 's' 'T *'
|     |   | | `-CallExpr 0x559ba0adf6c0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x559ba0adf550 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x559ba0adf598 <col:56> 'P' lvalue ParmVar 0x559ba0ab6990 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x559ba0adf5b8 <col:64> 'String' lvalue Var 0x559ba0adf078 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x559ba0adf668 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x559ba0adf5f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|     |   | |   | `-DeclRefExpr 0x559ba0adf5d8 <col:70> 'T *' lvalue Var 0x559ba0aded68 's' 'T *'
|     |   | |   `-UnaryOperator 0x559ba0adf6a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x559ba0adf698 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x559ba0adf720 <col:81> 'Args::Slot *' lvalue Var 0x559ba0adebe0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x559ba0adf8d8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x559ba0adf770 <col:13> 'int' lvalue Var 0x559ba0adec78 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x559ba0adf8c0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x559ba0adf8a0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x559ba0adf808 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x559ba0adf7e8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x559ba0adf7d0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x559ba0adf790 <col:28> 'int' lvalue Var 0x559ba0adec78 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x559ba0adf7b0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x559ba0adf888 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x559ba0adf858 <col:49> 'bool' lvalue ->_read_status 0x559ba0a989d0
|     |   |         `-ImplicitCastExpr 0x559ba0adf838 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x559ba0adf828 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x559ba0adf988 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x559ba0adf8f8 <col:13> 'int' lvalue ParmVar 0x559ba0ab6918 'flags' 'int'
|     |     `-UnaryOperator 0x559ba0adf970 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x559ba0adf958 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x559ba0adf938 <col:23> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x559ba0adfb10 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x559ba0adfa48 <col:9> 'bool' lvalue ->_read_status 0x559ba0a989d0
|       | `-ImplicitCastExpr 0x559ba0adfa28 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x559ba0adfa18 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x559ba0adfaf0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x559ba0adfad0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x559ba0adfab8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x559ba0adfa78 <col:25> 'int' lvalue Var 0x559ba0adec78 'read_status' 'int'
|           `-IntegerLiteral 0x559ba0adfa98 <col:40> 'int' 1
|-FunctionTemplateDecl 0x559ba0ab71a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x559ba0ab6c40 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ba0ab6cb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ba0ab7108 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x559ba0ab6d78 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ba0ab6df8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x559ba0ab6e70 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x559ba0ab6fc0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x559ba0ae0938 <col:87, line:821:5>
|     |-DeclStmt 0x559ba0adfbe0 <line:809:9, col:26>
|     | `-VarDecl 0x559ba0adfb78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ba0adfcb0 <line:810:9, col:29>
|     | `-VarDecl 0x559ba0adfc10 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x559ba0adfc98 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x559ba0adfc78 <col:28> 'int' 1
|     |-DeclStmt 0x559ba0adfef8 <line:811:9, col:38>
|     | `-VarDecl 0x559ba0adfde0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x559ba0adfed0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x559ba0adfe58 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x559ba0adfeb0 <col:29> 'Vector<T>' lvalue ParmVar 0x559ba0ab6fc0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x559ba0ae07e8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x559ba0ae0808 <line:812:16, col:61>
|     | | `-VarDecl 0x559ba0adff20 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x559ba0ae0100 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x559ba0ae00d0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x559ba0ae00b8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x559ba0ae0098 <col:29, col:61> 'String' (CXXTemporary 0x559ba0ae0098)
|     | |           `-CXXMemberCallExpr 0x559ba0ae0028 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x559ba0adff98 <col:29> '<bound member function type>' ->find 0x559ba0ad0728
|     | |             | `-CXXThisExpr 0x559ba0adff88 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x559ba0ae0060 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ba0adffc8 <col:34> 'const char *' lvalue ParmVar 0x559ba0ab6d78 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x559ba0ae0078 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ba0adffe8 <col:43> 'int' lvalue ParmVar 0x559ba0ab6df8 'flags' 'int'
|     | |             `-DeclRefExpr 0x559ba0ae0008 <col:50> 'Args::Slot *' lvalue Var 0x559ba0adfb78 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x559ba0ae01b8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559ba0ae01a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559ba0ae0180 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559ba0ae0150 <col:23> '<bound member function type>' .operator int (String::*)() const 0x559ba07ddef8
|     | |       `-ImplicitCastExpr 0x559ba0ae0138 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x559ba0ae0118 <col:23> 'String' lvalue Var 0x559ba0adff20 'str' 'String'
|     | `-CompoundStmt 0x559ba0ae07b0 <col:64, line:819:9>
|     |   |-DeclStmt 0x559ba0ae0278 <line:813:13, col:23>
|     |   | `-VarDecl 0x559ba0ae01e0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x559ba0ae0258 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x559ba0ae03f8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x559ba0ae02a0 <col:13> '<bound member function type>' ->postparse 0x559ba0ad0938
|     |   | | `-CXXThisExpr 0x559ba0ae0290 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x559ba0ae03a0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x559ba0ae02f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x559ba0ae02d0 <col:23> 'P' lvalue ParmVar 0x559ba0ab6e70 'parser' 'P'
|     |   | | |-DeclRefExpr 0x559ba0ae0338 <col:36> 'String' lvalue Var 0x559ba0adff20 'str' 'String'
|     |   | | |-DeclRefExpr 0x559ba0ae0358 <col:41> 'T' lvalue Var 0x559ba0ae01e0 'sx' 'T'
|     |   | | `-UnaryOperator 0x559ba0ae0388 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x559ba0ae0378 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x559ba0ae03d8 <col:53> 'Args::Slot *' lvalue Var 0x559ba0adfb78 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x559ba0ae0550 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x559ba0ae0488 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x559ba0ae0458 <col:17> 'bool' lvalue ->_read_status 0x559ba0a989d0
|     |   | |   `-ImplicitCastExpr 0x559ba0ae0438 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x559ba0ae0428 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x559ba0ae0528 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x559ba0ae04c0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x559ba0ae04a0 <col:17> 'Vector<T> *' lvalue Var 0x559ba0adfde0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x559ba0ae0508 <col:30> 'T' lvalue Var 0x559ba0ae01e0 'sx' 'T'
|     |   |-BinaryOperator 0x559ba0ae06d0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x559ba0ae0568 <col:13> 'int' lvalue Var 0x559ba0adfc10 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x559ba0ae06b8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x559ba0ae0698 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x559ba0ae0600 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x559ba0ae05e0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x559ba0ae05c8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x559ba0ae0588 <col:28> 'int' lvalue Var 0x559ba0adfc10 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x559ba0ae05a8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x559ba0ae0680 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x559ba0ae0650 <col:49> 'bool' lvalue ->_read_status 0x559ba0a989d0
|     |   |         `-ImplicitCastExpr 0x559ba0ae0630 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x559ba0ae0620 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x559ba0ae0780 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x559ba0ae06f0 <col:13> 'int' lvalue ParmVar 0x559ba0ab6df8 'flags' 'int'
|     |     `-UnaryOperator 0x559ba0ae0768 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x559ba0ae0750 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x559ba0ae0730 <col:23> 'const int' lvalue Var 0x559ba0a9ff58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x559ba0ae0918 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x559ba0ae0850 <col:9> 'bool' lvalue ->_read_status 0x559ba0a989d0
|       | `-ImplicitCastExpr 0x559ba0ae0830 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x559ba0ae0820 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x559ba0ae08f8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x559ba0ae08d8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x559ba0ae08c0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x559ba0ae0880 <col:25> 'int' lvalue Var 0x559ba0adfc10 'read_status' 'int'
|           `-IntegerLiteral 0x559ba0ae08a0 <col:40> 'int' 1
|-AccessSpecDecl 0x559ba0ab7220 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x559ba0ab7248 prev 0x559ba0a9e258 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x559ba0ab7340 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x559ba0ab7430 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x559ba0ae0970 <col:16, line:828:9>
| |-CXXDestructorDecl 0x559ba0ab7520 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x559ba0ae0980 <col:25, line:830:9>
| |-CXXMethodDecl 0x559ba0ab7620 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x559ba0ab76d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x559ba0ab7778 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x559ba0ab7778
| | `-ParmVarDecl 0x559ba0ab7888 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x559ba0ab8048 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x559ba0ab8048
|   `-ParmVarDecl 0x559ba0ab8158 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x559ba0ab78f8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x559ba0ab7a58 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x559ba0ab7c50 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x559ba0ab7b00 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x559ba0ab7b78 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x559ba0ae0b60 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x559ba0ab7f08 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x559ba0ae09d0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559ba0ae0990 <col:20> 'void *' lvalue ParmVar 0x559ba0ab7b00 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x559ba0ab7f70 '_slot' 'char *'
| | | `-CXXNewExpr 0x559ba0ae0a58 <col:32, col:45> 'char *' array Function 0x559ba05fd208 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x559ba0ae0a40 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x559ba0ae0a10 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x559ba0ab7b78 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x559ba0ab7fd0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x559ba0ae0b20 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x559ba0ae0ae0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x559ba0ab7b78 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x559ba0ae0be0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x559ba0ab7d50 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x559ba0ab7520 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x559ba0ae0c68 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x559ba0ae0c48 <line:840:13, col:22> 'void' array Function 0x559ba05fd568 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x559ba0ae0c30 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x559ba0ae0c00 <col:22> 'char *' lvalue ->_slot 0x559ba0ab7f70
| |         `-CXXThisExpr 0x559ba0ae0bf0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x559ba0ab7e50 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x559ba0ab7620 Slot::store 'void ()' ]
| | `-CompoundStmt 0x559ba0ae0e58 <col:22, line:844:9>
| |   `-CallExpr 0x559ba0ae0dc0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x559ba0ae0da8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559ba0ae0d88 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x559ba0708fe8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x559ba0ae0df8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x559ba0ae0cd8 <col:20> 'void *' lvalue ->_ptr 0x559ba0ab7f08
| |     |   `-CXXThisExpr 0x559ba0ae0cc8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x559ba0ae0e28 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x559ba0ae0e10 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x559ba0ae0d18 <col:26> 'char *' lvalue ->_slot 0x559ba0ab7f70
| |     |     `-CXXThisExpr 0x559ba0ae0d08 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x559ba0ae0e40 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x559ba0ae0d58 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x559ba0ab7fd0
| |         `-CXXThisExpr 0x559ba0ae0d48 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x559ba0ab7f08 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x559ba0ab7f70 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x559ba0ab7fd0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x559ba0ab81c8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x559ba0ab81c8
| | `-ParmVarDecl 0x559ba0ab82d8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x559ba0ab8378 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x559ba0ab8378
|   `-ParmVarDecl 0x559ba0ab8488 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x559ba0ab8628 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x559ba0ab84f8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x559ba0ab8598 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x559ba0ab88c0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x559ba0ab8ab8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x559ba0ab8988 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x559ba0ab8c38 '_ptr' 'T *'
|   | | `-ParenListExpr 0x559ba0ae0e90 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x559ba0ae0e70 <col:20> 'T *' lvalue ParmVar 0x559ba0ab8988 'ptr' 'T *'
|   | `-CompoundStmt 0x559ba0ae0ee0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x559ba0ab8b88 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x559ba0ab7620 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x559ba0ae1090 <col:22, line:857:9>
|   |   `-CallExpr 0x559ba0ae1060 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x559ba0ae0ef0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x559ba07c6cd8 0x559ba076f638
|   |     |-CXXOperatorCallExpr 0x559ba0ae0ff0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x559ba0ae0f80 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ba09ce5b8 0x559ba09ce1d8 0x559ba09cde08 0x559ba09cda28 0x559ba09cd648 0x559ba09cd278
|   |     | `-MemberExpr 0x559ba0ae0f50 <col:29> 'T *' lvalue ->_ptr 0x559ba0ab8c38
|   |     |   `-CXXThisExpr 0x559ba0ae0f40 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x559ba0ae1030 <col:35> 'T' lvalue ->_slot 0x559ba0ab8c98
|   |       `-CXXThisExpr 0x559ba0ae1020 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x559ba0ab8c38 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x559ba0ab8c98 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x559ba0ab8d00 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x559ba0ab8e00 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x559ba0ab8e50 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba0ab8de0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x559ba0ab8dc0 <col:31> 'int' 48
|-FieldDecl 0x559ba0ab8e78 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x559ba0ab8ed8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x559ba0ab8f38 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x559ba0ab9070 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x559ba0acffd0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x559ba0ad0030 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x559ba0ad00e0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x559ba0ad0308 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x559ba0ad0210 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x559ba0ad0458 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x559ba0ad03c8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x559ba0ad0728 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x559ba0ad0518 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x559ba0ad0598 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x559ba0ad0640 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x559ba0ad0938 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x559ba0ad07f0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x559ba0ad0868 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x559ba0ad0a08 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x559ba0ad0b58 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x559ba0ad0ac0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x559ba0ad0ee8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x559ba0ad0c18 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x559ba0ad0c98 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x559ba0ad0d40 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x559ba0ad0df8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x559ba0ad1110 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x559ba0ad0fc0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x559ba0ad1038 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x559ba0ad1428 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x559ba0ad11c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x559ba0ad1388 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x559ba0ad1298 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0afebd8 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba0afecf8 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x559ba0afed88 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x559ba0afef80 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x559ba0afedc0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x559ba0afee38 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x559ba0afeeb0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x559ba0aff050 <col:79> 'const ArgContext' lvalue Var 0x559ba0ae10b8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x559ba0aff1c8 <col:91, line:1372:5>
|   `-ReturnStmt 0x559ba0aff1b8 <line:1371:9, col:39>
|     `-CallExpr 0x559ba0aff168 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x559ba0aff150 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559ba0aff130 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x559ba0afeb20 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x559ba0aff0b8 <col:24> 'const String' lvalue ParmVar 0x559ba0afedc0 'str' 'const String &'
|       |-UnaryOperator 0x559ba0aff0f8 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x559ba0aff0d8 <col:30> 'String' lvalue ParmVar 0x559ba0afee38 'result' 'String &'
|       `-ImplicitCastExpr 0x559ba0aff1a0 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x559ba0aff110 <col:38> 'int' 0
|-CXXConstructorDecl 0x559ba0b33fb0 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x559ba0b340b8 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x559ba0b340b8
| `-ParmVarDecl 0x559ba0b341c8 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x559ba0b34268 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0b34378 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x559ba0b34aa0 <col:7>
`-CXXDestructorDecl 0x559ba0b34418 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class FixedPointArg
         0 |   class NumArg (base) (empty)
         0 |   int fraction_bits
         4 |   int exponent_delta
         8 |   int status
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0aeb880 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba0aeb998 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x559ba0aeba28 <col:16, col:22> col:16 public
|-EnumDecl 0x559ba0aeba50 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x559ba0aebb50 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559ba0aebdb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0aebb30 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x559ba0aebb10 <col:21> 'int' 0
| |-EnumConstantDecl 0x559ba0aebbe0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559ba0aebdc8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0aebbc0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x559ba0aebba0 <col:24> 'int' 22
| |-EnumConstantDecl 0x559ba0aebc80 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559ba0aebde0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0aebc60 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x559ba0aebc40 <col:24> 'int' 34
| |-EnumConstantDecl 0x559ba0aebd10 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559ba0aebdf8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba0aebcf0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x559ba0aebcd0 <col:25> 'int' 95
| `-EnumConstantDecl 0x559ba0aebd60 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x559ba0aed770 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559ba0aedba8 <col:7>
|-CXXConstructorDecl 0x559ba0aed878 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x559ba0aed878
| `-ParmVarDecl 0x559ba0aed988 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x559ba0aeda28 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0aedb38 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x559ba0b35650 <col:7>
`-CXXDestructorDecl 0x559ba0aefca8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0af53f0 <../dummy_inc/click/args.hh:1194:1, line:1207:1> line:1194:7 referenced class FixedPointArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x559ba0af5548 <col:1, col:7> col:7 implicit referenced class FixedPointArg
|-AccessSpecDecl 0x559ba0af55d8 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x559ba0af5770 <line:1195:5, line:1197:5> line:1195:14 used FixedPointArg 'void (int, int)'
| |-ParmVarDecl 0x559ba0af5618 <col:28, col:32> col:32 used b 'int'
| |-ParmVarDecl 0x559ba0af5698 <col:35, col:50> col:39 used exponent 'int' cinit
| | `-IntegerLiteral 0x559ba0af66d8 <col:50> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x559ba0af6878 <col:14> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x559ba0af62a0 'fraction_bits' 'int'
| | `-ImplicitCastExpr 0x559ba0af67b8 <line:1196:25> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x559ba0af6778 <col:25> 'int' lvalue ParmVar 0x559ba0af5618 'b' 'int'
| |-CXXCtorInitializer Field 0x559ba0af6308 'exponent_delta' 'int'
| | `-ImplicitCastExpr 0x559ba0af6838 <col:44> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x559ba0af67f8 <col:44> 'int' lvalue ParmVar 0x559ba0af5698 'exponent' 'int'
| `-CompoundStmt 0x559ba0af68f0 <col:54, line:1197:5>
|-CXXMethodDecl 0x559ba0af5a48 <line:1198:5, col:106> col:17 parse_saturating 'bool (const String &, uint32_t &, const ArgContext &)' inline
| |-ParmVarDecl 0x559ba0af5838 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x559ba0af58b0 <col:53, col:63> col:63 result 'uint32_t &'
| `-ParmVarDecl 0x559ba0af5928 <col:71, col:96> col:89 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x559ba0af66f8 <col:96> 'const ArgContext' lvalue Var 0x559ba0ae10b8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x559ba0af5ca0 <line:1199:5, col:88> col:10 parse 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x559ba0af5b10 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x559ba0af5b88 <col:35, col:45> col:45 result 'uint32_t &'
| `-ParmVarDecl 0x559ba0af5c00 <col:53, col:78> col:71 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x559ba0af6718 <col:78> 'const ArgContext' lvalue Var 0x559ba0ae10b8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x559ba0af5f78 <line:1200:5, col:98> col:10 parse_saturating 'bool (const String &, int32_t &, const ArgContext &)'
| |-ParmVarDecl 0x559ba0af5d68 <col:27, col:41> col:41 str 'const String &'
| |-ParmVarDecl 0x559ba0af5de0 <col:46, col:55> col:55 result 'int32_t &'
| `-ParmVarDecl 0x559ba0af5e58 <col:63, col:88> col:81 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x559ba0af6738 <col:88> 'const ArgContext' lvalue Var 0x559ba0ae10b8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x559ba0af61d0 <line:1201:5, col:87> col:10 parse 'bool (const String &, int32_t &, const ArgContext &)'
| |-ParmVarDecl 0x559ba0af6040 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x559ba0af60b8 <col:35, col:44> col:44 result 'int32_t &'
| `-ParmVarDecl 0x559ba0af6130 <col:52, col:77> col:70 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x559ba0af6758 <col:77> 'const ArgContext' lvalue Var 0x559ba0ae10b8 'blank_args' 'const ArgContext'
|-FieldDecl 0x559ba0af62a0 <line:1202:5, col:9> col:9 referenced fraction_bits 'int'
|-FieldDecl 0x559ba0af6308 <line:1203:5, col:9> col:9 referenced exponent_delta 'int'
|-FieldDecl 0x559ba0af6370 <line:1204:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x559ba0af63c0 <line:1205:3, col:10> col:3 private
|-CXXMethodDecl 0x559ba0af6608 <line:1206:5, col:72> col:10 used underparse 'bool (const String &, bool, uint32_t &)'
| |-ParmVarDecl 0x559ba0af63f8 <col:21, col:35> col:35 str 'const String &'
| |-ParmVarDecl 0x559ba0af6470 <col:40, col:45> col:45 is_signed 'bool'
| `-ParmVarDecl 0x559ba0af64e8 <col:56, col:66> col:66 result 'uint32_t &'
|-CXXConstructorDecl 0x559ba0b34bc8 <line:1194:7> col:7 implicit constexpr FixedPointArg 'void (const FixedPointArg &)' inline default trivial noexcept-unevaluated 0x559ba0b34bc8
| `-ParmVarDecl 0x559ba0b34cd8 <col:7> col:7 'const FixedPointArg &'
|-CXXConstructorDecl 0x559ba0b34d78 <col:7> col:7 implicit used constexpr FixedPointArg 'void (FixedPointArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0b34e88 <col:7> col:7 used 'FixedPointArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x559ba0b35660 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559ba0b35630 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x559ba0b35600 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x559ba0b355d0 <col:7> 'FixedPointArg' lvalue ParmVar 0x559ba0b34e88 '' 'FixedPointArg &&'
| |-CXXCtorInitializer Field 0x559ba0af62a0 'fraction_bits' 'int'
| | `-ImplicitCastExpr 0x559ba0b35758 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559ba0b35728 <col:7> 'int' xvalue .fraction_bits 0x559ba0af62a0
| |     `-CXXStaticCastExpr 0x559ba0b356f8 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x559ba0b356c8 <col:7> 'FixedPointArg' lvalue ParmVar 0x559ba0b34e88 '' 'FixedPointArg &&'
| |-CXXCtorInitializer Field 0x559ba0af6308 'exponent_delta' 'int'
| | `-ImplicitCastExpr 0x559ba0b35828 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559ba0b357f8 <col:7> 'int' xvalue .exponent_delta 0x559ba0af6308
| |     `-CXXStaticCastExpr 0x559ba0b357c8 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x559ba0b35798 <col:7> 'FixedPointArg' lvalue ParmVar 0x559ba0b34e88 '' 'FixedPointArg &&'
| |-CXXCtorInitializer Field 0x559ba0af6370 'status' 'int'
| | `-ImplicitCastExpr 0x559ba0b358f8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559ba0b358c8 <col:7> 'int' xvalue .status 0x559ba0af6370
| |     `-CXXStaticCastExpr 0x559ba0b35898 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x559ba0b35868 <col:7> 'FixedPointArg' lvalue ParmVar 0x559ba0b34e88 '' 'FixedPointArg &&'
| `-CompoundStmt 0x559ba0b35958 <col:7>
`-CXXDestructorDecl 0x559ba0b34f50 <col:7> col:7 implicit referenced ~FixedPointArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.FixedPointArg = type { i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.FixedPointArg = type { i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba07cfa18 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba07cfb38 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x559ba07cfbc8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x559ba07cfc98 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x559ba07cfd80 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x559ba07cff98 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x559ba07cfe40 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba07d0148 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x559ba07d0050 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x559ba07d0290 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x559ba07d0200 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x559ba07d03d8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x559ba07d0348 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba07d0520 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x559ba07d0490 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba07d05e8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x559ba07d0730 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x559ba07d06a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x559ba07d07f8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x559ba07d0940 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x559ba07d08b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x559ba07d0ab8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x559ba07d09f8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba07d0c00 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x559ba07d0b70 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba07d0cc8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x559ba07d0e88 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x559ba07d0d78 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559ba07d0df0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba07d10d8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x559ba07d0f48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ba07d0fc0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559ba07d1188 <col:86> "" ""
|-CXXMethodDecl 0x559ba07d13f8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x559ba07d1268 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x559ba07d12e0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba07d15a8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x559ba07d14b8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x559ba07d1758 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x559ba07d1660 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x559ba07d1a28 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x559ba07d1810 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x559ba07d1888 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559ba07d1900 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba07d1d08 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x559ba07d1af0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x559ba07d1b68 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ba07d1be0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559ba07d1dc0 <col:115> "" ""
|-AccessSpecDecl 0x559ba07d1e30 <line:84:3, col:10> col:3 private
|-FieldDecl 0x559ba07d1e68 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba07d2318 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x559ba07d2318
| `-ParmVarDecl 0x559ba07d2428 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x559ba07d24c8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x559ba07d24c8
| `-ParmVarDecl 0x559ba07d25d8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x559ba0807e88 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559ba09f5370 <col:7>
|-CXXConstructorDecl 0x559ba0807f60 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x559ba0807f60
| `-ParmVarDecl 0x559ba0808078 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x559ba08080e8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x559ba08080e8
| `-ParmVarDecl 0x559ba08081f8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x559ba09f7d70 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba09e3f18 prev 0x559ba09d9120 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba09e4010 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x559ba09e4100 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x559ba09e4228 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x559ba09e43a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x559ba09e4528 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x559ba09e46a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x559ba09f54d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559ba09f5d48 <col:11>
|-CXXDestructorDecl 0x559ba09f55b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x559ba09f56e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x559ba09f56e8
| `-ParmVarDecl 0x559ba09f57f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x559ba09f5898 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559ba09f5898
| `-ParmVarDecl 0x559ba09f59a8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x559ba09f8768 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba09f8878 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x559ba09f8af8 <col:11>
|   `-ReturnStmt 0x559ba09f8ae8 <col:11>
|     `-UnaryOperator 0x559ba09f8ad0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ba09f8ac0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x559ba09f88e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559ba09f88e8
  `-ParmVarDecl 0x559ba09f89f8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba09e4710 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba09e4828 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x559ba09e48c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x559ba09e4930 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x559ba09e4998 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x559ba09e4a00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x559ba09e4a60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x559ba09e4b20 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x559ba09e4b80 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x559ba09e4be0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x559ba09f53e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x559ba09e48c8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x559ba09f5d58 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x559ba09f5db0 <col:12>
|-CXXConstructorDecl 0x559ba09f5a18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x559ba09f5a18
| `-ParmVarDecl 0x559ba09f5b28 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x559ba09f5bc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x559ba09f5bc8
| `-ParmVarDecl 0x559ba09f5cd8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x559ba09f7e50 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba09d2830 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ba09d2948 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x559ba09d29d8 <col:16, col:22> col:16 public
|-EnumDecl 0x559ba09d2a00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x559ba09d2b00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x559ba09d2be0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09d2ae0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x559ba09d2ac0 <col:21> 'int' 28
| `-EnumConstantDecl 0x559ba09d2b90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x559ba09d2bf8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba09d2b70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x559ba09d2b50 <col:22> 'int' 64
|-CXXMethodDecl 0x559ba09d2f38 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x559ba09d2c20 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ba09d2ca0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x559ba09d2d18 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ba09d2d90 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ba09d2ff8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d31f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x559ba09d3070 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x559ba09d30e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ba09d32a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d3408 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x559ba09d3318 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ba09d34b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x559ba09d3810 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x559ba09d37a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x559ba09d3740 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x559ba09d3700 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x559ba04a84e0 'void'
|       |-PointerType 0x559ba0752ce0 'unsigned char *'
|       | `-BuiltinType 0x559ba04a85e0 'unsigned char'
|       |-TypedefType 0x559ba054f2b0 'size_t' sugar
|       | |-Typedef 0x559ba0518be0 'size_t'
|       | `-BuiltinType 0x559ba04a8640 'unsigned long'
|       `-PointerType 0x559ba04a8ce0 'void *'
|         `-BuiltinType 0x559ba04a84e0 'void'
|-CXXMethodDecl 0x559ba09d3c88 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x559ba09d3880 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x559ba09d38f8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ba09d3990 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x559ba09d3a10 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x559ba09ee380 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x559ba09ee368 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x559ba09ee330 <col:58> 'int' 0
| |-ParmVarDecl 0x559ba09d3a90 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x559ba09ee3a8 <col:76> 'int' 0
| |-ParmVarDecl 0x559ba09d3b10 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x559ba09ee3c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x559ba09d3d58 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d3dd8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x559ba09d3e98 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x559ba09d3f38 <col:20>
| `-OptimizeNoneAttr 0x559ba09d3f90 <col:30>
|-CXXMethodDecl 0x559ba09d4008 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x559ba09d40a8 <col:20>
| `-OptimizeNoneAttr 0x559ba09d4100 <col:30>
|-CXXMethodDecl 0x559ba09d4178 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x559ba09d4218 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d42c8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x559ba09d4368 <col:20>
| |-OptimizeNoneAttr 0x559ba09d43c0 <col:30>
| `-WarnUnusedResultAttr 0x559ba09d43e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d4440 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x559ba09d44e0 <col:20>
| `-OptimizeNoneAttr 0x559ba09d4538 <col:30>
|-CXXMethodDecl 0x559ba09d4588 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x559ba09d4628 <col:20>
| `-OptimizeNoneAttr 0x559ba09d4680 <col:30>
|-CXXMethodDecl 0x559ba09d46c8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x559ba09d4768 <col:20>
| `-OptimizeNoneAttr 0x559ba09d47c0 <col:30>
|-CXXMethodDecl 0x559ba09d4808 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x559ba09d48c8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x559ba09d4990 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559ba09d4a58 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559ba09d4b18 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559ba09d4c38 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x559ba09ee490 <col:54, line:99:5>
|   `-ReturnStmt 0x559ba09ee480 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x559ba09ee468 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x559ba09ee438 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x559ba09e4f18
|         `-CXXThisExpr 0x559ba09ee428 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x559ba09d4dd8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x559ba09d4ce8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x559ba09ee540 <col:67, line:103:5>
|   `-BinaryOperator 0x559ba09ee520 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x559ba09ee4b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x559ba09e4f18
|     | `-CXXThisExpr 0x559ba09ee4a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x559ba09ee508 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x559ba09ee4e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x559ba09d4ce8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x559ba09d4ed0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x559ba09ee5c0 <col:33, line:107:5>
|   `-ReturnStmt 0x559ba09ee5b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x559ba09ee598 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x559ba09ee568 <col:16> 'void *' lvalue ->_destructor_argument 0x559ba09e4f80
|         `-CXXThisExpr 0x559ba09ee558 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x559ba09d4f90 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x559ba09eebf0 <col:25, line:113:5>
|   |-ParenExpr 0x559ba09ee938 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x559ba09ee908 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09ee678 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x559ba09ee650 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x559ba09ee618 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x559ba09ee5e8 <col:24> '<bound member function type>' ->shared 0x559ba09d4008
|   |   |       `-ImplicitCastExpr 0x559ba09ee638 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x559ba09ee5d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x559ba09ee6d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09ee6b8 <col:42> 'int' 0
|   |   `-CallExpr 0x559ba09ee868 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x559ba09ee850 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09ee830 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09ee8a8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09ee748 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x559ba09ee8c0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09ee770 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09ee8d8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09ee7a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x559ba09ee8f0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09ee818 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09ee800 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09ee7c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x559ba09eeb38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x559ba09ee968 <col:2> 'unsigned char *' lvalue ->_head 0x559ba09e4d20
|   | | `-CXXThisExpr 0x559ba09ee958 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x559ba09eeb20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x559ba09eeb00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x559ba09ee9a8 <col:10> 'unsigned char *' lvalue ->_data 0x559ba09e4d88
|   |     | `-CXXThisExpr 0x559ba09ee998 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x559ba09eeae8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x559ba09eeac8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x559ba09ee9e8 <col:18> 'unsigned char *' lvalue ->_tail 0x559ba09e4df0
|   |         | `-CXXThisExpr 0x559ba09ee9d8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x559ba09eeab0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x559ba09eea90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x559ba09eea28 <col:26> 'unsigned char *' lvalue ->_end 0x559ba09e4e58
|   |             | `-CXXThisExpr 0x559ba09eea18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x559ba09eea78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x559ba09eea58 <col:33> 'int' 0
|   `-BinaryOperator 0x559ba09eebd0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x559ba09eeb68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x559ba09e4f18
|     | `-CXXThisExpr 0x559ba09eeb58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x559ba09eebb8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x559ba09eeb98 <col:16> 'int' 0
|-CXXMethodDecl 0x559ba09d50d0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x559ba09d5040 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ba09d5178 <col:20>
| |-OptimizeNoneAttr 0x559ba09d51d0 <col:30>
| `-WarnUnusedResultAttr 0x559ba09d51f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d52c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x559ba09d5238 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ba09d5370 <col:20>
| |-OptimizeNoneAttr 0x559ba09d53c8 <col:30>
| `-WarnUnusedResultAttr 0x559ba09d53f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d5528 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x559ba09d5430 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ba09d55d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d56d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x559ba09d5640 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ba09d5778 <col:20>
| `-OptimizeNoneAttr 0x559ba09d57d0 <col:30>
|-CXXMethodDecl 0x559ba09d5898 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x559ba09d5808 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ba09d5940 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d5a40 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x559ba09d59b0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ba09d5ae8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d5be8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x559ba09d5b58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ba09d5c90 <col:20>
| `-OptimizeNoneAttr 0x559ba09d5ce8 <col:30>
|-CXXMethodDecl 0x559ba09d5e78 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x559ba09d5d28 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x559ba09d5da0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x559ba09ee3e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x559ba09d5f28 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x559ba09d6128 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x559ba09d5fa0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x559ba09d6018 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba09d6338 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x559ba09d61e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559ba09d6260 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba09d6548 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x559ba09d63f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x559ba09d6478 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x559ba09ee3f8 <col:39> 'int' 0
|-CXXMethodDecl 0x559ba09d6618 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x559ba09d66e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559ba09d67a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x559ba09d6868 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559ba09d6930 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x559ba09d6a78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x559ba09d69e8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x559ba09d6c48 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x559ba09d6b38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x559ba09d6bb0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba09d6d18 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x559ba09d6dd8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x559ba09d6e78 <col:20>
| `-OptimizeNoneAttr 0x559ba09d6ed0 <col:30>
|-CXXMethodDecl 0x559ba09d6f20 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x559ba09d6fc0 <col:20>
| `-OptimizeNoneAttr 0x559ba09d7018 <col:30>
|-CXXMethodDecl 0x559ba09d7068 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x559ba09d7128 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559ba09d71f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x559ba09d7290 <col:20>
| `-OptimizeNoneAttr 0x559ba09d72e8 <col:30>
|-CXXMethodDecl 0x559ba09d7438 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x559ba09d7328 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x559ba09d73a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba09d7588 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x559ba09d74f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba09d7660 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x559ba09d7720 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x559ba09d77c0 <col:20>
| `-OptimizeNoneAttr 0x559ba09d7818 <col:30>
|-CXXMethodDecl 0x559ba09d7868 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x559ba09d7908 <col:20>
| `-OptimizeNoneAttr 0x559ba09d7960 <col:30>
|-CXXMethodDecl 0x559ba09d79b0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x559ba09d7a78 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x559ba09d7b18 <col:20>
| `-OptimizeNoneAttr 0x559ba09d7b70 <col:30>
|-CXXMethodDecl 0x559ba09d7bb8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x559ba09d7cd8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x559ba09d7e48 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x559ba09d7d88 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x559ba09d7f38 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x559ba09d7fd8 <col:20>
| `-OptimizeNoneAttr 0x559ba09d8030 <col:30>
|-CXXMethodDecl 0x559ba09d8080 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x559ba09d8140 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559ba09d8378 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x559ba09d81f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x559ba09d8268 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ba09d8428 <col:20>
| `-OptimizeNoneAttr 0x559ba09d8480 <col:30>
|-CXXMethodDecl 0x559ba09d8528 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x559ba09d85c8 <col:20>
| `-OptimizeNoneAttr 0x559ba09d8620 <col:30>
|-CXXMethodDecl 0x559ba09d8670 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x559ba09d8710 <col:20>
| `-OptimizeNoneAttr 0x559ba09d8768 <col:30>
|-CXXMethodDecl 0x559ba09d87b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x559ba09d8850 <col:20>
| `-OptimizeNoneAttr 0x559ba09d88a8 <col:30>
|-CXXMethodDecl 0x559ba09d89a8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x559ba09d88e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x559ba09d8a50 <col:20>
| `-OptimizeNoneAttr 0x559ba09d8aa8 <col:30>
|-CXXMethodDecl 0x559ba09d8c68 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x559ba09d8ae0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x559ba09d8b58 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ba09d8d18 <col:20>
| `-OptimizeNoneAttr 0x559ba09d8d70 <col:30>
|-CXXMethodDecl 0x559ba09d8e18 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x559ba09d8f38 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x559ba09d9058 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x559ba09d90f8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x559ba09d9120 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x559ba09d9248 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x559ba09d92e8 <col:20>
| `-OptimizeNoneAttr 0x559ba09d9340 <col:30>
|-CXXMethodDecl 0x559ba09d93e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x559ba09d9488 <col:20>
| `-OptimizeNoneAttr 0x559ba09d94e0 <col:30>
|-AccessSpecDecl 0x559ba09d9508 <line:344:3, col:9> col:3 public
|-EnumDecl 0x559ba09d9530 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x559ba09d9630 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x559ba09d9680 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba09d9610 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x559ba09d95f0 <col:14> 'int' 48
|-CXXMethodDecl 0x559ba09d96e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x559ba09d9788 <col:20>
| `-OptimizeNoneAttr 0x559ba09d97e0 <col:30>
|-CXXMethodDecl 0x559ba09d9858 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x559ba09d98f8 <col:20>
| `-OptimizeNoneAttr 0x559ba09d9950 <col:30>
|-CXXMethodDecl 0x559ba09d9a18 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x559ba09d9988 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x559ba09d9bb8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x559ba09d9d58 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x559ba09d9c68 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x559ba09d9e00 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x559ba09d9f00 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ba09da2b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09d9ee0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x559ba09d9ec0 <col:9> 'int' 0
| |-EnumConstantDecl 0x559ba09d9f90 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ba09da2c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09d9f70 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x559ba09d9f50 <col:14> 'int' 1
| |-EnumConstantDecl 0x559ba09da020 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ba09da2e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09da000 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x559ba09d9fe0 <col:14> 'int' 2
| |-EnumConstantDecl 0x559ba09da0b0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ba09da2f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09da090 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x559ba09da070 <col:14> 'int' 3
| |-EnumConstantDecl 0x559ba09da140 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ba09da310 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09da120 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x559ba09da100 <col:13> 'int' 4
| |-EnumConstantDecl 0x559ba09da1d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ba09da328 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09da1b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x559ba09da190 <col:13> 'int' 5
| `-EnumConstantDecl 0x559ba09da260 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x559ba09da340 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba09da240 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x559ba09da220 <col:14> 'int' 6
|-CXXMethodDecl 0x559ba09da3a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x559ba09da448 <col:20>
| `-OptimizeNoneAttr 0x559ba09da4a0 <col:30>
|-CXXMethodDecl 0x559ba09da598 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x559ba09da4d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x559ba09da640 <col:20>
| `-OptimizeNoneAttr 0x559ba09da698 <col:30>
|-CXXMethodDecl 0x559ba09da708 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x559ba09da830 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x559ba09da9a8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x559ba09da8e0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x559ba09daa70 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x559ba09dab38 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x559ba09dac78 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x559ba09dabe8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x559ba09dad20 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x559ba09dae20 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x559ba09db020 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09dae00 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x559ba09dade0 <col:23> 'int' 0
| |-EnumConstantDecl 0x559ba09daeb0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x559ba09db038 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09dae90 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x559ba09dae70 <col:45> 'int' 4
| |-EnumConstantDecl 0x559ba09daf40 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x559ba09db050 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09daf20 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x559ba09daf00 <col:24> 'int' 0
| `-EnumConstantDecl 0x559ba09dafd0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x559ba09db068 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba09dafb0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x559ba09daf90 <col:47> 'int' 16
|-CXXMethodDecl 0x559ba09db0c8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x559ba09db238 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x559ba09db178 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x559ba09db2e0 <col:20>
| `-OptimizeNoneAttr 0x559ba09db338 <col:30>
|-CXXMethodDecl 0x559ba09db388 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x559ba09eed10 <col:18, col:36>
|   `-ReturnStmt 0x559ba09eed00 <col:20, col:33>
|     `-ImplicitCastExpr 0x559ba09eece8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x559ba09eecc8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x559ba09eec98 <col:27> '<bound member function type>' ->xanno 0x559ba09d93e8
|           `-CXXThisExpr 0x559ba09eec88 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x559ba09db480 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x559ba09eee20 <col:30, col:48>
|   `-ReturnStmt 0x559ba09eee10 <col:32, col:45>
|     `-ImplicitCastExpr 0x559ba09eedf8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x559ba09eedd8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x559ba09eeda8 <col:39> '<bound member function type>' ->xanno 0x559ba09d9248
|           `-CXXThisExpr 0x559ba09eed98 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x559ba09db568 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x559ba09eefb8 <col:24, col:50>
|   `-ReturnStmt 0x559ba09eefa8 <col:26, col:47>
|     `-UnaryOperator 0x559ba09eef90 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559ba09eef70 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x559ba09eef58 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ba09eef08 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x559ba09e4228
|         |   `-CXXMemberCallExpr 0x559ba09eeee8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x559ba09eeeb8 <col:34> '<bound member function type>' ->xanno 0x559ba09d93e8
|         |       `-CXXThisExpr 0x559ba09eeea8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x559ba09eef38 <col:46> 'int' 0
|-CXXMethodDecl 0x559ba09db670 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x559ba09ef188 <col:36, col:62>
|   `-ReturnStmt 0x559ba09ef178 <col:38, col:59>
|     `-UnaryOperator 0x559ba09ef160 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559ba09ef140 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x559ba09ef128 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ba09ef0a0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x559ba09e4228
|         |   `-CXXMemberCallExpr 0x559ba09ef080 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559ba09ef050 <col:46> '<bound member function type>' ->xanno 0x559ba09d9248
|         |       `-CXXThisExpr 0x559ba09ef040 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x559ba09ef0d0 <col:58> 'int' 0
|-CXXMethodDecl 0x559ba09db788 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x559ba09ef320 <col:26, col:53>
|   `-ReturnStmt 0x559ba09ef310 <col:28, col:50>
|     `-UnaryOperator 0x559ba09ef2f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559ba09ef2d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x559ba09ef2c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ba09ef270 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x559ba09e4528
|         |   `-CXXMemberCallExpr 0x559ba09ef250 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x559ba09ef220 <col:36> '<bound member function type>' ->xanno 0x559ba09d93e8
|         |       `-CXXThisExpr 0x559ba09ef210 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x559ba09ef2a0 <col:49> 'int' 0
|-CXXMethodDecl 0x559ba09db8a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x559ba09ef4f8 <col:38, col:65>
|   `-ReturnStmt 0x559ba09ef4e8 <col:40, col:62>
|     `-UnaryOperator 0x559ba09ef4d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559ba09ef4b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x559ba09ef498 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ba09ef408 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x559ba09e4528
|         |   `-CXXMemberCallExpr 0x559ba09ef3e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559ba09ef3b8 <col:48> '<bound member function type>' ->xanno 0x559ba09d9248
|         |       `-CXXThisExpr 0x559ba09ef3a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x559ba09ef438 <col:61> 'int' 0
|-CXXMethodDecl 0x559ba09dba58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x559ba09db960 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x559ba09efbc8 <col:34, line:463:5>
|   |-ParenExpr 0x559ba09efa10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x559ba09ef9e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09ef648 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09ef618 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09ef568 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09ef550 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09ef510 <col:23> 'int' lvalue ParmVar 0x559ba09db960 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09ef530 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09ef5f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09ef5c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09ef588 <col:33> 'int' lvalue ParmVar 0x559ba09db960 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x559ba09ef5e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x559ba09ef5a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x559ba09ef6a8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09ef688 <col:56> 'int' 0
|   |   `-CallExpr 0x559ba09ef940 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x559ba09ef928 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09ef908 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09ef980 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09ef798 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x559ba09ef998 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09ef7c8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09ef9b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09ef800 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x559ba09ef9c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09ef8f0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09ef8d8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09ef898 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x559ba09efbb8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x559ba09efba0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x559ba09efb80 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x559ba09efb50 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ba09efb00 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x559ba09e4228
|         |   `-CXXMemberCallExpr 0x559ba09efae0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559ba09efab0 <col:9> '<bound member function type>' ->xanno 0x559ba09d9248
|         |       `-CXXThisExpr 0x559ba09efaa0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x559ba09efb68 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x559ba09efb30 <col:21> 'int' lvalue ParmVar 0x559ba09db960 'i' 'int'
|-CXXMethodDecl 0x559ba09dbca8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x559ba09dbb18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x559ba09dbb90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x559ba09f0258 <col:40, line:472:5>
|   |-ParenExpr 0x559ba09f0070 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x559ba09f0040 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09efd20 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09efcf0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09efc40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09efc28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09efbe8 <col:23> 'int' lvalue ParmVar 0x559ba09dbb18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09efc08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09efcd0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09efca0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09efc60 <col:33> 'int' lvalue ParmVar 0x559ba09dbb18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x559ba09efcb8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x559ba09efc80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x559ba09efd80 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09efd60 <col:56> 'int' 0
|   |   `-CallExpr 0x559ba09effa0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x559ba09eff88 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09eff68 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09effe0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09efdf0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x559ba09efff8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09efe20 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f0010 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09efe58 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x559ba09f0028 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09eff50 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09eff38 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09efef8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x559ba09f0238 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x559ba09f01e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x559ba09f01b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x559ba09f0160 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x559ba09e4228
|     | |   `-CXXMemberCallExpr 0x559ba09f0140 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x559ba09f0110 <col:2> '<bound member function type>' ->xanno 0x559ba09d93e8
|     | |       `-CXXThisExpr 0x559ba09f0100 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x559ba09f01c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x559ba09f0190 <col:14> 'int' lvalue ParmVar 0x559ba09dbb18 'i' 'int'
|     `-ImplicitCastExpr 0x559ba09f0220 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x559ba09f0200 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x559ba09dbb90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x559ba09dbe68 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x559ba09dbd70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559ba09f09d8 <col:36, line:485:5>
|   |-ParenExpr 0x559ba09f0740 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ba09f0710 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f03f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f03c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f02d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f02b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f0278 <col:23> 'int' lvalue ParmVar 0x559ba09dbd70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f0298 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f03a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09f0388 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f02f0 <col:33> 'int' lvalue ParmVar 0x559ba09dbd70 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f0368 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f0350 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f0310 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ba09f0330 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559ba09f0450 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f0430 <col:60> 'int' 0
|   |   `-CallExpr 0x559ba09f0670 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f0658 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f0638 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f06b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f04c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559ba09f06c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f04f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f06e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f0530 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x559ba09f06f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f0620 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f0608 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f05c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x559ba09f09c8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x559ba09f09b0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x559ba09f0998 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ba09f0968 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x559ba09f0908 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ba09f08d8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ba09f0850 <col:61, col:70> 'char const[48]' lvalue ->c 0x559ba09e4100
|             |   `-CXXMemberCallExpr 0x559ba09f0830 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ba09f0800 <col:61> '<bound member function type>' ->xanno 0x559ba09d9248
|             |       `-CXXThisExpr 0x559ba09f07f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ba09f08f0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ba09f0880 <col:74> 'int' lvalue ParmVar 0x559ba09dbd70 'i' 'int'
|-CXXMethodDecl 0x559ba09dc0b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x559ba09dbf28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ba09dbfa0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x559ba09f1128 <col:42, line:500:5>
|   |-ParenExpr 0x559ba09f0ec0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ba09f0e90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f0b70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f0b40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f0a50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f0a38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f09f8 <col:23> 'int' lvalue ParmVar 0x559ba09dbf28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f0a18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f0b20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09f0b08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f0a70 <col:33> 'int' lvalue ParmVar 0x559ba09dbf28 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f0ae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f0ad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f0a90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ba09f0ab0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559ba09f0bd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f0bb0 <col:60> 'int' 0
|   |   `-CallExpr 0x559ba09f0df0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f0dd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f0db8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f0e30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f0c40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559ba09f0e48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f0c78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f0e60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f0cb0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x559ba09f0e78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f0da0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f0d88 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f0d48 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x559ba09f1108 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x559ba09f10b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ba09f1088 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x559ba09f1030 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ba09f1000 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ba09f0fb0 <col:48, col:57> 'char [48]' lvalue ->c 0x559ba09e4100
|     |     |   `-CXXMemberCallExpr 0x559ba09f0f90 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ba09f0f60 <col:48> '<bound member function type>' ->xanno 0x559ba09d93e8
|     |     |       `-CXXThisExpr 0x559ba09f0f50 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ba09f1018 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ba09f0fe0 <col:61> 'int' lvalue ParmVar 0x559ba09dbf28 'i' 'int'
|     `-ImplicitCastExpr 0x559ba09f10f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x559ba09f10d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x559ba09dbfa0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x559ba09dc278 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x559ba09dc180 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x559ba09f1888 <col:35, line:513:5>
|   |-ParenExpr 0x559ba09f1598 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ba09f1568 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f12c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f1290 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f11a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f1188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f1148 <col:23> 'int' lvalue ParmVar 0x559ba09dc180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f1168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f1270 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09f1258 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f11c0 <col:33> 'int' lvalue ParmVar 0x559ba09dc180 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f1238 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f1220 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f11e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ba09f1200 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559ba09f1320 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f1300 <col:60> 'int' 0
|   |   `-CallExpr 0x559ba09f14c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f14b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f1490 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f1508 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f1390 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559ba09f1520 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f13c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f1538 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f1400 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x559ba09f1550 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f1478 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f1460 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f1420 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x559ba09f1878 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x559ba09f1860 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x559ba09f1848 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ba09f1818 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x559ba09f1790 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ba09f1760 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ba09f1710 <col:60, col:69> 'char const[48]' lvalue ->c 0x559ba09e4100
|             |   `-CXXMemberCallExpr 0x559ba09f16f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ba09f16c0 <col:60> '<bound member function type>' ->xanno 0x559ba09d9248
|             |       `-CXXThisExpr 0x559ba09f16b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ba09f1778 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ba09f1740 <col:73> 'int' lvalue ParmVar 0x559ba09dc180 'i' 'int'
|-CXXMethodDecl 0x559ba09dc4c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x559ba09dc338 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ba09dc3b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x559ba09f1fa8 <col:41, line:528:5>
|   |-ParenExpr 0x559ba09f1d30 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ba09f1d00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f1a20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f19f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f1900 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f18e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f18a8 <col:23> 'int' lvalue ParmVar 0x559ba09dc338 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f18c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f19d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09f19b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f1920 <col:33> 'int' lvalue ParmVar 0x559ba09dc338 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f1998 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f1980 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f1940 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ba09f1960 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559ba09f1a80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f1a60 <col:60> 'int' 0
|   |   `-CallExpr 0x559ba09f1c60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f1c48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f1c28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f1ca0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f1af0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559ba09f1cb8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f1b28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f1cd0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f1b60 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x559ba09f1ce8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f1c10 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f1bf8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f1bb8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x559ba09f1f88 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x559ba09f1f38 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ba09f1f08 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x559ba09f1eb0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ba09f1e70 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ba09f1e20 <col:47, col:56> 'char [48]' lvalue ->c 0x559ba09e4100
|     |     |   `-CXXMemberCallExpr 0x559ba09f1e00 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ba09f1dd0 <col:47> '<bound member function type>' ->xanno 0x559ba09d93e8
|     |     |       `-CXXThisExpr 0x559ba09f1dc0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ba09f1e88 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ba09f1e50 <col:60> 'int' lvalue ParmVar 0x559ba09dc338 'i' 'int'
|     `-ImplicitCastExpr 0x559ba09f1f70 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x559ba09f1f50 <col:65> 'int16_t':'short' lvalue ParmVar 0x559ba09dc3b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x559ba09dc688 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x559ba09dc590 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559ba09f2678 <col:36, line:541:5>
|   |-ParenExpr 0x559ba09f2418 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ba09f23e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f2140 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f2110 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f2020 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f2008 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f1fc8 <col:23> 'int' lvalue ParmVar 0x559ba09dc590 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f1fe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f20f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09f20d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f2040 <col:33> 'int' lvalue ParmVar 0x559ba09dc590 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f20b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f20a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f2060 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ba09f2080 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559ba09f21a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f2180 <col:60> 'int' 0
|   |   `-CallExpr 0x559ba09f2348 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f2330 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f2310 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f2388 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f2210 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559ba09f23a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f2248 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f23b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f2280 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x559ba09f23d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f22f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f22e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f22a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x559ba09f2668 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x559ba09f2650 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x559ba09f2638 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ba09f2608 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x559ba09f25b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ba09f2580 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ba09f2530 <col:61, col:70> 'char const[48]' lvalue ->c 0x559ba09e4100
|             |   `-CXXMemberCallExpr 0x559ba09f2510 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ba09f24e0 <col:61> '<bound member function type>' ->xanno 0x559ba09d9248
|             |       `-CXXThisExpr 0x559ba09f24d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ba09f2598 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ba09f2560 <col:74> 'int' lvalue ParmVar 0x559ba09dc590 'i' 'int'
|-CXXMethodDecl 0x559ba09dc858 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x559ba09dc748 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x559ba09dc7c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ba09dc908 <col:20>
| `-OptimizeNoneAttr 0x559ba09dc960 <col:30>
|-CXXMethodDecl 0x559ba09dca98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x559ba09dc9a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x559ba09f2d48 <col:35, line:562:5>
|   |-ParenExpr 0x559ba09f2ae8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ba09f2ab8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f2810 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f27e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f26f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f26d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f2698 <col:23> 'int' lvalue ParmVar 0x559ba09dc9a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f26b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f27c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09f27a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f2710 <col:33> 'int' lvalue ParmVar 0x559ba09dc9a0 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f2788 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f2770 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f2730 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ba09f2750 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559ba09f2870 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f2850 <col:60> 'int' 0
|   |   `-CallExpr 0x559ba09f2a18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f2a00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f29e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f2a58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f28e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559ba09f2a70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f2918 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f2a88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f2950 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x559ba09f2aa0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f29c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f29b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f2970 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x559ba09f2d38 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x559ba09f2d20 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x559ba09f2d08 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ba09f2cd8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x559ba09f2c80 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ba09f2c50 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ba09f2c00 <col:60, col:69> 'char const[48]' lvalue ->c 0x559ba09e4100
|             |   `-CXXMemberCallExpr 0x559ba09f2be0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ba09f2bb0 <col:60> '<bound member function type>' ->xanno 0x559ba09d9248
|             |       `-CXXThisExpr 0x559ba09f2ba0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ba09f2c68 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ba09f2c30 <col:73> 'int' lvalue ParmVar 0x559ba09dc9a0 'i' 'int'
|-CXXMethodDecl 0x559ba09dcca8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x559ba09dcb58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ba09dcbd0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x559ba09f3428 <col:41, line:577:5>
|   |-ParenExpr 0x559ba09f31b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ba09f3188 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f2ee0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f2eb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f2dc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f2da8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f2d68 <col:23> 'int' lvalue ParmVar 0x559ba09dcb58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f2d88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f2e90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09f2e78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f2de0 <col:33> 'int' lvalue ParmVar 0x559ba09dcb58 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f2e58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f2e40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f2e00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ba09f2e20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559ba09f2f40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f2f20 <col:60> 'int' 0
|   |   `-CallExpr 0x559ba09f30e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f30d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f30b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f3128 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f2fb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559ba09f3140 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f2fe8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f3158 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f3020 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x559ba09f3170 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f3098 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f3080 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f3040 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x559ba09f3408 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x559ba09f33b8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ba09f3388 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x559ba09f3328 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ba09f32f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ba09f32a8 <col:47, col:56> 'char [48]' lvalue ->c 0x559ba09e4100
|     |     |   `-CXXMemberCallExpr 0x559ba09f3288 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ba09f3258 <col:47> '<bound member function type>' ->xanno 0x559ba09d93e8
|     |     |       `-CXXThisExpr 0x559ba09f3248 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ba09f3310 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ba09f32d8 <col:60> 'int' lvalue ParmVar 0x559ba09dcb58 'i' 'int'
|     `-ImplicitCastExpr 0x559ba09f33f0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x559ba09f33d0 <col:65> 'int32_t':'int' lvalue ParmVar 0x559ba09dcbd0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x559ba09dce68 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x559ba09dcd70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559ba09f3b58 <col:36, line:591:5>
|   |-ParenExpr 0x559ba09f3898 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ba09f3868 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f35c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f3590 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f34a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f3488 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f3448 <col:23> 'int' lvalue ParmVar 0x559ba09dcd70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f3468 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f3570 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09f3558 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f34c0 <col:33> 'int' lvalue ParmVar 0x559ba09dcd70 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f3538 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f3520 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f34e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ba09f3500 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x559ba09f3620 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f3600 <col:60> 'int' 0
|   |   `-CallExpr 0x559ba09f37c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f37b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f3790 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f3808 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f3690 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x559ba09f3820 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f36c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f3838 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f3700 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x559ba09f3850 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f3778 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f3760 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f3720 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x559ba09f3b48 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x559ba09f3b30 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x559ba09f3b18 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ba09f3ae8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x559ba09f3a60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ba09f3a30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ba09f39e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x559ba09e4100
|             |   `-CXXMemberCallExpr 0x559ba09f39c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ba09f3990 <col:61> '<bound member function type>' ->xanno 0x559ba09d9248
|             |       `-CXXThisExpr 0x559ba09f3980 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ba09f3a48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ba09f3a10 <col:74> 'int' lvalue ParmVar 0x559ba09dcd70 'i' 'int'
|-CXXMethodDecl 0x559ba09dd0b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x559ba09dcf28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ba09dcfa0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x559ba09f4238 <col:42, line:606:5>
|   |-ParenExpr 0x559ba09f3fc8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ba09f3f98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f3cf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f3cc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f3bd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f3bb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f3b78 <col:23> 'int' lvalue ParmVar 0x559ba09dcf28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f3b98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f3ca0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ba09f3c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f3bf0 <col:33> 'int' lvalue ParmVar 0x559ba09dcf28 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f3c68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f3c50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f3c10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ba09f3c30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x559ba09f3d50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f3d30 <col:60> 'int' 0
|   |   `-CallExpr 0x559ba09f3ef8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f3ee0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f3ec0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f3f38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f3dc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x559ba09f3f50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f3df8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f3f68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f3e30 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x559ba09f3f80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f3ea8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f3e90 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f3e50 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x559ba09f4218 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x559ba09f41c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ba09f4198 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x559ba09f4138 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ba09f4108 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ba09f40b8 <col:48, col:57> 'char [48]' lvalue ->c 0x559ba09e4100
|     |     |   `-CXXMemberCallExpr 0x559ba09f4098 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ba09f4068 <col:48> '<bound member function type>' ->xanno 0x559ba09d93e8
|     |     |       `-CXXThisExpr 0x559ba09f4058 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ba09f4120 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ba09f40e8 <col:61> 'int' lvalue ParmVar 0x559ba09dcf28 'i' 'int'
|     `-ImplicitCastExpr 0x559ba09f4200 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x559ba09f41e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x559ba09dcfa0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x559ba09dd250 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x559ba09dd180 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x559ba09f4aa8 <col:33, line:620:5>
|   |-ParenExpr 0x559ba09f4820 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x559ba09f47f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f4440 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f4410 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f42b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f4298 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f4258 <col:23> 'int' lvalue ParmVar 0x559ba09dd180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f4278 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f43f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x559ba09f43d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f42d0 <col:33> 'int' lvalue ParmVar 0x559ba09dd180 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f43b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f43a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f42f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x559ba09f4378 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x559ba09f4360 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x559ba09f4328 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x559ba09f44a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f4480 <col:79> 'int' 0
|   |   `-CallExpr 0x559ba09f4750 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f4738 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f4718 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f4790 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f4588 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x559ba09f47a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f45d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f47c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f4608 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x559ba09f47d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f4700 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f46e8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f46a8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x559ba09f4a98 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x559ba09f4a80 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x559ba09f4a68 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ba09f4a38 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x559ba09f49b0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ba09f4980 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ba09f4930 <col:67, col:76> 'char const[48]' lvalue ->c 0x559ba09e4100
|             |   `-CXXMemberCallExpr 0x559ba09f4910 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ba09f48e0 <col:67> '<bound member function type>' ->xanno 0x559ba09d9248
|             |       `-CXXThisExpr 0x559ba09f48d0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ba09f4998 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ba09f4960 <col:80> 'int' lvalue ParmVar 0x559ba09dd180 'i' 'int'
|-CXXMethodDecl 0x559ba09dd468 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x559ba09dd310 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ba09dd390 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x559ba09f52d0 <col:45, line:635:5>
|   |-ParenExpr 0x559ba09f5018 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x559ba09f4fe8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x559ba09f4cb0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ba09f4c80 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ba09f4b20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ba09f4b08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ba09f4ac8 <col:23> 'int' lvalue ParmVar 0x559ba09dd310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ba09f4ae8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ba09f4c60 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x559ba09f4c48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ba09f4b40 <col:33> 'int' lvalue ParmVar 0x559ba09dd310 'i' 'int'
|   |   |     `-BinaryOperator 0x559ba09f4c28 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ba09f4c10 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ba09f4b60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ba09d9630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x559ba09f4be8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x559ba09f4bd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x559ba09f4b98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x559ba09f4d10 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ba09f4cf0 <col:79> 'int' 0
|   |   `-CallExpr 0x559ba09f4f48 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x559ba09f4f30 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ba09f4f10 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ba0546010 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ba09f4f88 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f4d80 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x559ba09f4fa0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ba09f4dc8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ba09f4fb8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ba09f4e00 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x559ba09f4fd0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ba09f4ef8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ba09f4ee0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ba09f4e98 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x559ba09f52b0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x559ba09f5218 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ba09f51e8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x559ba09f5188 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ba09f5158 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ba09f5108 <col:54, col:63> 'char [48]' lvalue ->c 0x559ba09e4100
|     |     |   `-CXXMemberCallExpr 0x559ba09f50e8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ba09f50b8 <col:54> '<bound member function type>' ->xanno 0x559ba09d93e8
|     |     |       `-CXXThisExpr 0x559ba09f50a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ba09f5170 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ba09f5138 <col:67> 'int' lvalue ParmVar 0x559ba09dd310 'i' 'int'
|     `-CXXConstCastExpr 0x559ba09f5280 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x559ba09f5268 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x559ba09f5230 <col:91> 'const void *' lvalue ParmVar 0x559ba09dd390 'x' 'const void *'
|-CXXMethodDecl 0x559ba09dd538 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x559ba09f5358 <col:34, line:640:5>
|   `-ReturnStmt 0x559ba09f5348 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x559ba09f5330 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x559ba09f5300 <col:16> 'Packet *' lvalue ->_data_packet 0x559ba09e4cb8
|         `-CXXThisExpr 0x559ba09f52f0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x559ba09dd678 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x559ba09dd5e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ba09ee418 <col:46> 'bool' true
|-CXXMethodDecl 0x559ba09dd7f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x559ba09dd730 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x559ba09dd8a0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x559ba09de050 <line:660:22> "" ""
| |-EnumConstantDecl 0x559ba09dd9a0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de0c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09dd980 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x559ba09dd960 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x559ba09d2b00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x559ba09dda30 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de0d8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09dda10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x559ba09dd9f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x559ba09d2b90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x559ba09ddac0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de0f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09ddaa0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x559ba09dda80 <col:21> 'int' 0
| |-EnumConstantDecl 0x559ba09ddb50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de108 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09ddb30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x559ba09ddb10 <col:19> 'int' 16
| |-EnumConstantDecl 0x559ba09ddbe0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de120 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09ddbc0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x559ba09ddba0 <col:21> 'int' 16
| |-EnumConstantDecl 0x559ba09ddc70 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de138 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09ddc50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x559ba09ddc30 <col:19> 'int' 32
| |-EnumConstantDecl 0x559ba09ddd00 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de150 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09ddce0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x559ba09ddcc0 <col:19> 'int' EnumConstant 0x559ba09ddb50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x559ba09ddd90 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de168 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09ddd70 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x559ba09ddd50 <col:19> 'int' EnumConstant 0x559ba09ddc70 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x559ba09dde60 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de180 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09dde40 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x559ba09dde20 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x559ba09ddde0 <col:23> 'int' EnumConstant 0x559ba09ddd90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x559ba09dde00 <col:40> 'int' 2
| |-EnumConstantDecl 0x559ba09ddf30 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ba09de198 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ba09ddf10 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x559ba09ddef0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x559ba09ddeb0 <col:23> 'int' EnumConstant 0x559ba09ddd90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x559ba09dded0 <col:40> 'int' 4
| `-EnumConstantDecl 0x559ba09de000 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x559ba09de1b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ba09ddfe0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x559ba09ddfc0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x559ba09ddf80 <col:23> 'int' EnumConstant 0x559ba09ddd90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x559ba09ddfa0 <col:40> 'int' 8
|-CXXMethodDecl 0x559ba09de1f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x559ba09de290 <col:68> "" ""
|-CXXMethodDecl 0x559ba09de328 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x559ba09de3c8 <col:45> "" ""
|-CXXMethodDecl 0x559ba09de460 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x559ba09de500 <col:57> "" ""
|-CXXMethodDecl 0x559ba09de598 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x559ba09de638 <col:45> "" ""
|-CXXMethodDecl 0x559ba09de6d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x559ba09de770 <col:57> "" ""
|-CXXMethodDecl 0x559ba09de800 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x559ba09de8a0 <col:51> "" ""
|-CXXMethodDecl 0x559ba09de930 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x559ba09de9d0 <col:63> "" ""
|-CXXMethodDecl 0x559ba09dea60 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x559ba09deb00 <col:53> "" ""
|-CXXMethodDecl 0x559ba09deb90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x559ba09dec30 <col:65> "" ""
|-CXXMethodDecl 0x559ba09ded48 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x559ba09decb8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x559ba09dedf0 <col:61> "" ""
|-CXXMethodDecl 0x559ba09def88 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x559ba09dee78 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x559ba09deef0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x559ba09df038 <col:67> "" ""
|-CXXMethodDecl 0x559ba09df150 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x559ba09df0c0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x559ba09df1f8 <col:63> "" ""
|-CXXMethodDecl 0x559ba09df390 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x559ba09df280 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559ba09df2f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x559ba09df440 <col:69> "" ""
|-CXXMethodDecl 0x559ba09df558 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x559ba09df4c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x559ba09df600 <col:63> "" ""
|-CXXMethodDecl 0x559ba09e1cd8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x559ba09e1bc8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559ba09e1c40 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559ba09e1d88 <col:69> "" ""
|-CXXMethodDecl 0x559ba09e1ea0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x559ba09e1e10 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x559ba09e1f48 <col:62> "" ""
|-CXXMethodDecl 0x559ba09e20e0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x559ba09e1fd0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559ba09e2048 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x559ba09e2190 <col:68> "" ""
|-CXXMethodDecl 0x559ba09e22a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x559ba09e2218 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x559ba09e2350 <col:63> "" ""
|-CXXMethodDecl 0x559ba09e24e8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x559ba09e23d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559ba09e2450 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x559ba09e2598 <col:69> "" ""
|-CXXMethodDecl 0x559ba09e2628 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x559ba09e26c8 <col:64> "" ""
|-CXXMethodDecl 0x559ba09e2758 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x559ba09e27f8 <col:52> "" ""
|-CXXMethodDecl 0x559ba09e2888 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x559ba09e2928 <col:67> "" ""
|-CXXMethodDecl 0x559ba09e29b8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x559ba09e2a58 <col:55> "" ""
|-CXXMethodDecl 0x559ba09e2b70 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x559ba09e2ae0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x559ba09e2c18 <col:58> "" ""
|-CXXMethodDecl 0x559ba09e2db0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x559ba09e2ca0 <col:33> col:36 'int'
| |-ParmVarDecl 0x559ba09e2d18 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x559ba09e2e60 <col:62> "" ""
|-CXXMethodDecl 0x559ba09e2f78 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x559ba09e2ee8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x559ba09e3020 <col:58> "" ""
|-CXXMethodDecl 0x559ba09e31b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x559ba09e30a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x559ba09e3120 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x559ba09e3268 <col:62> "" ""
|-CXXMethodDecl 0x559ba09e3380 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x559ba09e32f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x559ba09e3428 <col:60> "" ""
|-CXXMethodDecl 0x559ba09e35c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x559ba09e34b0 <col:34> col:37 'int'
| |-ParmVarDecl 0x559ba09e3528 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x559ba09e3670 <col:64> "" ""
|-CXXMethodDecl 0x559ba09e3788 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x559ba09e36f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x559ba09e3830 <col:58> "" ""
|-CXXMethodDecl 0x559ba09e39c8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x559ba09e38b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x559ba09e3930 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x559ba09e3a78 <col:62> "" ""
|-CXXMethodDecl 0x559ba09e3b90 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x559ba09e3b00 <col:33> col:36 'int'
| `-DeprecatedAttr 0x559ba09e3c38 <col:59> "" ""
|-CXXMethodDecl 0x559ba09e3dd0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x559ba09e3cc0 <col:33> col:36 'int'
| |-ParmVarDecl 0x559ba09e3d38 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559ba09e3e80 <col:63> "" ""
|-AccessSpecDecl 0x559ba09e3ef0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x559ba09e3f18 prev 0x559ba09d9120 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559ba09e4010 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x559ba09e4100 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x559ba09e4228 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x559ba09e43a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x559ba09e4528 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x559ba09e46a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x559ba09f54d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x559ba09f5d48 <col:11>
| |-CXXDestructorDecl 0x559ba09f55b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x559ba09f56e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x559ba09f56e8
| | `-ParmVarDecl 0x559ba09f57f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x559ba09f5898 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559ba09f5898
| | `-ParmVarDecl 0x559ba09f59a8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x559ba09f8768 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559ba09f8878 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x559ba09f8af8 <col:11>
| |   `-ReturnStmt 0x559ba09f8ae8 <col:11>
| |     `-UnaryOperator 0x559ba09f8ad0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x559ba09f8ac0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x559ba09f88e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559ba09f88e8
|   `-ParmVarDecl 0x559ba09f89f8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x559ba09e4710 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559ba09e4828 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x559ba09e48c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x559ba09e4930 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x559ba09e4998 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x559ba09e4a00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x559ba09e4a60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x559ba09e4b20 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x559ba09e4b80 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x559ba09e4be0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x559ba09f53e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x559ba09e48c8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x559ba09f5d58 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x559ba09f5db0 <col:12>
| |-CXXConstructorDecl 0x559ba09f5a18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x559ba09f5a18
| | `-ParmVarDecl 0x559ba09f5b28 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x559ba09f5bc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x559ba09f5bc8
| | `-ParmVarDecl 0x559ba09f5cd8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x559ba09f7e50 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x559ba09e4c58 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x559ba09e4cb8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x559ba09e4d20 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x559ba09e4d88 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x559ba09e4df0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x559ba09e4e58 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x559ba09e4eb8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x559ba09e4f18 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x559ba09e4f80 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x559ba09e5008 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x559ba09e4c58 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x559ba09f5380 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x559ba09e4eb8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x559ba09f5dc0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x559ba09f5e20 <col:21, line:755:5>
|-CXXConstructorDecl 0x559ba09e51a8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x559ba09e50e8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x559ba09e52a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x559ba09e5488 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x559ba09e5390 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x559ba09e5758 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x559ba09e5540 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ba09e55b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559ba09e5630 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba09e5978 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x559ba09e5828 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x559ba09e58a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x559ba09edf58 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x559ba09e5a38 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x559ba09e5ab0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x559ba09e5b28 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x559ba09ee0b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x559ba09ee020 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ba09ee1f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x559ba09ee168 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x559ba09ee2f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0aebe28 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x559ba0aebf88 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x559ba0aec018 <col:32, col:38> col:32 public
|-TypedefDecl 0x559ba0aec050 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x559ba05ff560 'uint32_t' sugar
|   |-Typedef 0x559ba05114c8 'uint32_t'
|   `-TypedefType 0x559ba04ea5a0 '__uint32_t' sugar
|     |-Typedef 0x559ba04ea198 '__uint32_t'
|     `-BuiltinType 0x559ba04a8620 'unsigned int'
|-CXXConstructorDecl 0x559ba0aec198 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x559ba0aec0c0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x559ba0aed678 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x559ba0aedbb8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x559ba0aecf30 'base' 'int'
| | `-ImplicitCastExpr 0x559ba0aed718 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x559ba0aed6d8 <col:16> 'int' lvalue ParmVar 0x559ba0aec0c0 'b' 'int'
| `-CompoundStmt 0x559ba0aedc28 <col:19, line:1046:5>
|-CXXMethodDecl 0x559ba0aec690 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x559ba0aec260 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x559ba0aec2e0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x559ba0aec358 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x559ba0aec3d8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x559ba0aec498 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x559ba0aec518 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x559ba0aecae8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x559ba0aec760 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x559ba0aeca48 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x559ba0aec808 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x559ba0aec8a8 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x559ba0aec920 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x559ba0aed698 <col:82> 'const ArgContext' lvalue Var 0x559ba0ae10b8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x559ba0aeeb58 <col:94, line:1067:5>
|     |-DeclStmt 0x559ba0aeddb8 <line:1054:9, col:64>
|     | `-VarDecl 0x559ba0aedc48 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x559ba0aedd70 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x559ba0aedfd8 <line:1055:9, col:91>
|     | `-VarDecl 0x559ba0aedde8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x559ba0aedfb0 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x559ba0aedf90 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x559ba0aedf40 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x559ba0aedf20 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x559ba0aedec8 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x559ba0aede78 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x559ba0aedea8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x559ba0aedf08 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x559ba0aedee8 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x559ba0aedf70 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x559ba0aee138 <line:1056:9, col:27>
|     | `-VarDecl 0x559ba0aee0d0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x559ba0aee580 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x559ba0aee4b0 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x559ba0aee430 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x559ba09c9438 0x559ba0812ef8 0x559ba0812bd0 0x559ba08087e0 0x559ba0808490 0x559ba0807d80 0x559ba07d8c20 0x559ba07623b0
|     | | |-CallExpr 0x559ba0aee370 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x559ba0aee160 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x559ba0aee210 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x559ba0aee1e0 <col:19, col:23> '<bound member function type>' .begin 0x559ba07f62b8
|     | | | |   `-DeclRefExpr 0x559ba0aee1c0 <col:19> 'const String' lvalue ParmVar 0x559ba0aec808 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x559ba0aee280 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x559ba0aee250 <col:32, col:36> '<bound member function type>' .end 0x559ba07f64d0
|     | | | |   `-DeclRefExpr 0x559ba0aee230 <col:32> 'const String' lvalue ParmVar 0x559ba0aec808 'str' 'const String &'
|     | | | |-DeclRefExpr 0x559ba0aee2a0 <col:43> 'const bool' lvalue Var 0x559ba0aedc48 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x559ba0aee308 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x559ba0aee2e8 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x559ba0aee330 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x559ba0aee0d0 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x559ba0aee350 <col:73> 'const int' lvalue Var 0x559ba0aedde8 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x559ba0aee410 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x559ba0aee3e0 <col:16, col:20> '<bound member function type>' .end 0x559ba07f64d0
|     | |     `-DeclRefExpr 0x559ba0aee3c0 <col:16> 'const String' lvalue ParmVar 0x559ba0aec808 'str' 'const String &'
|     | `-BinaryOperator 0x559ba0aee560 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x559ba0aee4f8 <col:13> 'int' lvalue ->status 0x559ba0aecf98
|     |   | `-CXXThisExpr 0x559ba0aee4e8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x559ba0aee548 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x559ba0aee528 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ba0aebbe0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x559ba0aee7d0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x559ba0aee6b8 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x559ba0aee6a0 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x559ba0aee688 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x559ba0aee5a8 <col:13> 'int' lvalue ->status 0x559ba0aecf98
|     | | |     `-CXXThisExpr 0x559ba0aee598 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x559ba0aee668 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x559ba0aee638 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x559ba0aee5e8 <col:23> 'int' lvalue ->status 0x559ba0aecf98
|     | |   |   `-CXXThisExpr 0x559ba0aee5d8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x559ba0aee650 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x559ba0aee618 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ba0aebc80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x559ba0aee7b0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x559ba0aee750 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x559ba0aee6f8 <col:13, col:18> '<bound member function type>' .error 0x559ba0a97fe0
|     |   | | `-DeclRefExpr 0x559ba0aee6d8 <col:13> 'const ArgContext' lvalue ParmVar 0x559ba0aec920 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x559ba0aee778 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x559ba0aee728 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x559ba0aee7a0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x559ba0aee790 <col:20> 'bool' false
|     |-DeclStmt 0x559ba0aee9a8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x559ba0aee950 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x559ba0aee8e0 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x559ba0aeeb08 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ba0aee9c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x559ba079a6d8
|     | |-DeclRefExpr 0x559ba0aeea08 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x559ba0aee0d0 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x559ba0aeead8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x559ba0aeea50 <col:64> 'V' lvalue ParmVar 0x559ba0aec8a8 'result' 'V &'
|     `-ReturnStmt 0x559ba0aeeb48 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x559ba0aeeb38 <col:16> 'bool' true
|-FunctionTemplateDecl 0x559ba0aecea8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x559ba0aecb58 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x559ba0aece08 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x559ba0aecc08 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x559ba0aecca8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x559ba0aecd20 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x559ba0aed6b8 <col:71> 'const ArgContext' lvalue Var 0x559ba0ae10b8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x559ba0aef2c8 <col:83, line:1083:5>
| |   |-DeclStmt 0x559ba0aeec20 <line:1071:9, col:12>
| |   | `-VarDecl 0x559ba0aeebb8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x559ba0aef2a0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x559ba0aeeeb0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x559ba0aeed38 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x559ba0aeed00 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x559ba0aeec48 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x559ba0aeeca0 <col:31> 'const String' lvalue ParmVar 0x559ba0aecc08 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x559ba0aeecc0 <col:36> 'V' lvalue Var 0x559ba0aeebb8 'x' 'V'
| |     | |   `-DeclRefExpr 0x559ba0aeece0 <col:39> 'const ArgContext' lvalue ParmVar 0x559ba0aecd20 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x559ba0aeee90 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x559ba0aeee70 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x559ba0aeee58 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x559ba0aeee40 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x559ba0aeed60 <col:17> 'int' lvalue ->status 0x559ba0aecf98
| |     |     |     `-CXXThisExpr 0x559ba0aeed50 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x559ba0aeee20 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x559ba0aeedf0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x559ba0aeeda0 <col:27> 'int' lvalue ->status 0x559ba0aecf98
| |     |       |   `-CXXThisExpr 0x559ba0aeed90 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x559ba0aeee08 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x559ba0aeedd0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ba0aebc80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x559ba0aeeee0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x559ba0aeeed0 <col:20> 'bool' false
| |     `-IfStmt 0x559ba0aef278 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x559ba0aeef80 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x559ba0aeef50 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x559ba0aeef00 <col:18> 'int' lvalue ->status 0x559ba0aecf98
| |       | |   `-CXXThisExpr 0x559ba0aeeef0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x559ba0aeef68 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x559ba0aeef30 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ba0aebc80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x559ba0aef1b8 <col:42, line:1079:9>
| |       | |-CallExpr 0x559ba0aef160 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x559ba0aeefb0 <line:1076:13> '<bound member function type>' ->range_error 0x559ba0aed5a8
| |       | | | `-CXXThisExpr 0x559ba0aeefa0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x559ba0aeefe0 <col:25> 'const ArgContext' lvalue ParmVar 0x559ba0aecd20 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x559ba0aef0c0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x559ba0aef138 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x559ba0aef118 <col:43> 'V' lvalue Var 0x559ba0aeebb8 'x' 'V'
| |       | `-ReturnStmt 0x559ba0aef1a8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x559ba0aef198 <col:20> 'bool' false
| |       `-CompoundStmt 0x559ba0aef258 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x559ba0aef218 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x559ba0aef1d8 <col:13> 'V' lvalue ParmVar 0x559ba0aecca8 'result' 'V &'
| |         | `-DeclRefExpr 0x559ba0aef1f8 <col:22> 'V' lvalue Var 0x559ba0aeebb8 'x' 'V'
| |         `-ReturnStmt 0x559ba0aef248 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x559ba0aef238 <col:20> 'bool' true
| `-CXXMethodDecl 0x559ba0bc0ad8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x559ba0bc08b8 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x559ba0bc0988 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x559ba0bc09f0 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x559ba0aed6b8 <col:71> 'const ArgContext' lvalue Var 0x559ba0ae10b8 'blank_args' 'const ArgContext'
|-FieldDecl 0x559ba0aecf30 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x559ba0aecf98 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x559ba0aecfe8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x559ba0aed2a0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x559ba0aed028 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x559ba0aed0a8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x559ba0aed120 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x559ba0aed1a0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x559ba0aed5a8 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x559ba0aed370 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x559ba0aed3e8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x559ba0aed480 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x559ba0aefb28 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x559ba0aefb28
| `-ParmVarDecl 0x559ba0aefc38 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x559ba0aefdb8 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x559ba0aefdb8
| `-ParmVarDecl 0x559ba0aefec8 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x559ba0bc0568 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba080cda0 prev 0x559ba0774a48 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba080ce98 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x559ba080cf28 <col:19, col:25> col:19 public
|-TypedefDecl 0x559ba080cf60 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x559ba05ff270 'uninitialized_type'
|   `-CXXRecord 0x559ba05ff1d8 'uninitialized_type'
|-CXXConstructorDecl 0x559ba080d020 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x559ba0810700 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x559ba08107a8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559ba0810768 <col:10> 'int' 0
| `-CompoundStmt 0x559ba08107f0 <col:13, line:22:5>
|-CXXConstructorDecl 0x559ba080d170 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x559ba080d0e0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x559ba0810700 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x559ba0810840 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x559ba0810800 <col:10> 'unsigned int' lvalue ParmVar 0x559ba080d0e0 'x' 'unsigned int'
| `-CompoundStmt 0x559ba0810888 <col:13, line:27:5>
|-CXXConstructorDecl 0x559ba080d2c8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x559ba080d238 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x559ba0810700 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x559ba08108f0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x559ba08108d8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x559ba0810898 <col:10> 'int' lvalue ParmVar 0x559ba080d238 'x' 'int'
| `-CompoundStmt 0x559ba0810938 <col:13, line:31:5>
|-CXXConstructorDecl 0x559ba080d420 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x559ba080d390 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x559ba0810700 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x559ba08109a0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x559ba0810988 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x559ba0810948 <col:10> 'unsigned long' lvalue ParmVar 0x559ba080d390 'x' 'unsigned long'
| `-CompoundStmt 0x559ba08109e8 <col:13, line:35:5>
|-CXXConstructorDecl 0x559ba080d578 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x559ba080d4e8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x559ba0810700 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x559ba0810a50 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x559ba0810a38 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x559ba08109f8 <col:10> 'long' lvalue ParmVar 0x559ba080d4e8 'x' 'long'
| `-CompoundStmt 0x559ba0810a98 <col:13, line:39:5>
|-CXXConstructorDecl 0x559ba080d738 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x559ba080d648 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x559ba0810700 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x559ba0810b18 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x559ba0810ac8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x559ba0740750
| |     `-DeclRefExpr 0x559ba0810aa8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x559ba080d648 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x559ba0810b60 <col:20, line:44:5>
|-CXXConstructorDecl 0x559ba080d8c8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x559ba080d800 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x559ba0810cc8 <col:51, line:56:5>
|   `-BinaryOperator 0x559ba0810ca8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x559ba0810b80 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x559ba0810700
|     | `-CXXThisExpr 0x559ba0810b70 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x559ba0810c90 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x559ba0810c78 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x559ba0810c58 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x559ba0810c28 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x559ba0810c10 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x559ba0810bb0 <col:47> 'const unsigned char *' lvalue ParmVar 0x559ba080d800 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x559ba080da18 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x559ba080d988 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x559ba080dbc8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x559ba080db08 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x559ba0810d38 <col:56, line:68:5>
|   `-CStyleCastExpr 0x559ba0810d10 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x559ba0810ce0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x559ba080db08 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x559ba080dd58 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x559ba080dc90 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x559ba080de48 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x559ba0811cf8 <col:46, line:83:5>
|   `-ReturnStmt 0x559ba0811ce8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x559ba0811cd0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x559ba0811ca0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x559ba0811b58 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x559ba0811a40 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x559ba0811928 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x559ba0810d60 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x559ba080df38 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x559ba0811da8 <col:31, line:88:5>
|   `-ReturnStmt 0x559ba0811d98 <line:87:2, col:10>
|     `-UnaryOperator 0x559ba0811d80 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x559ba0811d68 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x559ba0811d50 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x559ba0811d20 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x559ba0810700
|             `-CXXThisExpr 0x559ba0811d10 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x559ba080dff8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x559ba0811e28 <col:34, line:93:5>
|   `-ReturnStmt 0x559ba0811e18 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x559ba0811e00 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x559ba0811dd0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x559ba0810700
|         `-CXXThisExpr 0x559ba0811dc0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x559ba080e0c8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x559ba0811ea8 <col:38, line:101:5>
|   `-ReturnStmt 0x559ba0811e98 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x559ba0811e80 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x559ba0811e50 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x559ba0810700
|         `-CXXThisExpr 0x559ba0811e40 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x559ba080e198 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x559ba0812178 <col:38, line:108:5>
|   `-ReturnStmt 0x559ba0812168 <line:107:2, col:58>
|     `-BinaryOperator 0x559ba0812148 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x559ba0812060 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x559ba0812040 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x559ba0812028 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x559ba0811ed0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x559ba0810700
|       |   |   `-CXXThisExpr 0x559ba0811ec0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x559ba0812000 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x559ba0811fe8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x559ba0811f68 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x559ba074ec88 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x559ba0811f48 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x559ba0812120 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x559ba0812108 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559ba08120e8 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x559ba074ec88 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x559ba08120c8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x559ba080e258 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x559ba08123e8 <col:39, line:112:5>
|   `-ReturnStmt 0x559ba08123d8 <line:111:2, col:56>
|     `-BinaryOperator 0x559ba08123b8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x559ba08122d0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x559ba08122b0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x559ba0812298 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x559ba08121a0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x559ba0810700
|       |   |   `-CXXThisExpr 0x559ba0812190 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x559ba0812270 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x559ba0812258 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x559ba0812238 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x559ba074ec88 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x559ba0812218 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x559ba0812390 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x559ba0812378 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x559ba0812358 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x559ba074ec88 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x559ba0812338 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x559ba080e388 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x559ba080e490 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x559ba080f500 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x559ba080f5f0 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559ba080f6b0 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x559ba080f778 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x559ba080f978 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x559ba080f828 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x559ba080f8a0 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x559ba080faf8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x559ba080fa38 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x559ba080fc40 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x559ba080fbb0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x559ba080fde8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x559ba080fcf8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x559ba080ff30 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x559ba080fea0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x559ba0810078 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x559ba080ffe8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x559ba0810140 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x559ba0810200 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x559ba0810378 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x559ba08102b0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x559ba0810440 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x559ba0810528 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x559ba08105d0 <col:51> "" ""
|-TypedefDecl 0x559ba0810670 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x559ba0774ae0 'IPAddress'
|   `-CXXRecord 0x559ba080cda0 'IPAddress'
|-AccessSpecDecl 0x559ba08106c8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x559ba0810700 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x559ba0810da8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x559ba0810da8
| `-ParmVarDecl 0x559ba0810eb8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x559ba0810f58 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0811068 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x559ba0810700 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x559ba0811c48 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x559ba0811c00 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x559ba0810700
| |     `-CXXStaticCastExpr 0x559ba0811bd0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x559ba0811ba0 <col:7> 'IPAddress' lvalue ParmVar 0x559ba0811068 '' 'IPAddress &&'
| `-CompoundStmt 0x559ba0811c90 <col:7>
`-CXXDestructorDecl 0x559ba0811958 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba08192e0 prev 0x559ba080cb68 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba08193d8 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x559ba0819468 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x559ba0819890 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x559ba08194a8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x559ba0819528 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x559ba0819660 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x559ba0819710 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x559ba0819b58 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x559ba0819960 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x559ba08199d8 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x559ba0819a78 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x559ba081e478 <col:34> 'const ArgContext' lvalue Var 0x559ba080cb00 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x559ba081dec8 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x559ba0819c20 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x559ba0819d10 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x559ba0819d88 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x559ba081e498 <col:34> 'const ArgContext' lvalue Var 0x559ba080cb00 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x559ba081e678 <col:46, line:375:5>
|   `-ReturnStmt 0x559ba081e668 <line:374:2, col:63>
|     `-CallExpr 0x559ba081e630 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x559ba081e618 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559ba081e5d0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x559ba0819b58 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x559ba081e530 <col:15> 'const String' lvalue ParmVar 0x559ba0819c20 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x559ba081e580 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x559ba081e550 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x559ba0819d10 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x559ba081e5b0 <col:59> 'const ArgContext' lvalue ParmVar 0x559ba0819d88 'args' 'const ArgContext &'
|-CXXMethodDecl 0x559ba081e3a8 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x559ba081df90 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x559ba081e210 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x559ba081e288 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x559ba081e4b8 <col:34> 'const ArgContext' lvalue Var 0x559ba080cb00 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x559ba0bc21d0 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x559ba0bc22d8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x559ba0bc22d8
| `-ParmVarDecl 0x559ba0bc23e8 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x559ba0bc2488 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x559ba0bc2488
| `-ParmVarDecl 0x559ba0bc2598 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x559ba0bc2638 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned long>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned long * _ptr
        24 |   unsigned long _slot
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0740568 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba0740688 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x559ba0740750 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x559ba08110f0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559ba0815fe8 <col:8>
|-CXXConstructorDecl 0x559ba08111f8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x559ba08111f8
| `-ParmVarDecl 0x559ba0811308 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x559ba08113a8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba08114b8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x559ba0740750 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x559ba0816200 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x559ba08161d0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x559ba0740750
| |     `-CXXStaticCastExpr 0x559ba08161a0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x559ba0816170 <col:8> 'in_addr' lvalue ParmVar 0x559ba08114b8 '' 'in_addr &&'
| `-CompoundStmt 0x559ba0816248 <col:8>
`-CXXDestructorDecl 0x559ba0816480 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0768270 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x559ba0768388 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x559ba0768470 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x559ba0768450 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x559ba0768418 <col:22> 'int' 4
|-FieldDecl 0x559ba0768518 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x559ba07684f8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x559ba07684c0 <col:21> 'int' 4
|-FieldDecl 0x559ba0768578 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x559ba07685d8 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x559ba0768638 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x559ba0768698 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x559ba07686f8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x559ba0768758 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x559ba07687b8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x559ba0768828 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x559ba0768898 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0c15008 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x559ba0c15408 prev 0x559ba0c15008 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x559ba0c15600 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x559ba0c15508 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x559ba0c16548 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x559ba0c15780 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x559ba0c16508 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x559ba0c164c8 <col:20> 'String *' lvalue ParmVar 0x559ba0c15508 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x559ba0c157e0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x559ba0c165a8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x559ba0ae0ee0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x559ba0c156c0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x559ba0ab7620 Slot::store 'void ()' ]
| `-CompoundStmt 0x559ba0c16ce8 <col:22, line:857:9>
|   `-CallExpr 0x559ba0c16ca0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x559ba0c16c88 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x559ba0c16c08 <col:13> 'void (String &, const String &)' lvalue Function 0x559ba0c16ae8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x559ba076f638 'assign_consume')
|     |-UnaryOperator 0x559ba0c16738 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x559ba0c16720 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x559ba0c166f0 <col:29> 'String *' lvalue ->_ptr 0x559ba0c15780
|     |     `-CXXThisExpr 0x559ba0c166e0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x559ba0c16cd0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x559ba0c16760 <col:35> 'String':'String' lvalue ->_slot 0x559ba0c157e0
|         `-CXXThisExpr 0x559ba0c16750 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x559ba0c15780 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x559ba0c157e0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x559ba0c15858 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x559ba0c15858
| `-ParmVarDecl 0x559ba0c15968 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x559ba0c15a08 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x559ba0c15a08
| `-ParmVarDecl 0x559ba0c15b18 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x559ba0c15bb8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x559ba0c15bb8
| `-ParmVarDecl 0x559ba0c15cc8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x559ba0c15d38 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x559ba0c15d38
| `-ParmVarDecl 0x559ba0c15e48 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x559ba0c15ed0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x559ba0ab7520 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x559ba0c16610 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0af4430 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x559ba0af4688 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x559ba0c2a338 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559ba0c2a7d0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x559ba0c2a7b0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x559ba0c2a840 <col:19>
|-CXXConstructorDecl 0x559ba0c2a438 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x559ba0c2a438
| `-ParmVarDecl 0x559ba0c2a548 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x559ba0c2a5e8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0c2a6f8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559ba0c2b3c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559ba0c2b0f0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x559ba0c2b0c0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x559ba0c2b090 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x559ba0c2a6f8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x559ba0c2b430 <col:19>
`-CXXDestructorDecl 0x559ba0c2a880 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned long>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0af4760 <../dummy_inc/click/args.hh:1184:1, col:62> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned long'
|-CXXRecordDecl 0x559ba0af49b8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x559ba0c36718 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559ba0c36bb0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x559ba0c36b90 <<invalid sloc>> 'int'
| `-CompoundStmt 0x559ba0c36c20 <col:19>
|-CXXConstructorDecl 0x559ba0c36818 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned long> &)' inline default trivial noexcept-unevaluated 0x559ba0c36818
| `-ParmVarDecl 0x559ba0c36928 <col:19> col:19 'const DefaultArg<unsigned long> &'
|-CXXConstructorDecl 0x559ba0c369c8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned long> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0c36ad8 <col:19> col:19 used 'DefaultArg<unsigned long> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559ba0c374c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559ba0c374a0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x559ba0c37470 <col:19> 'DefaultArg<unsigned long>' xvalue static_cast<struct DefaultArg<unsigned long> &&> <NoOp>
| |       `-DeclRefExpr 0x559ba0c37440 <col:19> 'DefaultArg<unsigned long>' lvalue ParmVar 0x559ba0c36ad8 '' 'DefaultArg<unsigned long> &&'
| `-CompoundStmt 0x559ba0c37530 <col:19>
`-CXXDestructorDecl 0x559ba0c36c60 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ba0af94c0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ba0af95d8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x559ba0af9668 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x559ba0af98a8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x559ba0af96a0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x559ba0af9720 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x559ba0af9798 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x559ba0af9ac0 <col:81> 'const ArgContext' lvalue Var 0x559ba0ae10b8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x559ba0af9a00 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x559ba0af9970 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x559ba0af9c18 <col:35, line:1261:5>
|   `-ReturnStmt 0x559ba0af9c08 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x559ba0af9bf0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x559ba0af9bc0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x559ba0af9ba8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x559ba0af9b80 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x559ba0af9b60 <col:16, col:24> 'String' (CXXTemporary 0x559ba0af9b60)
|               `-CXXConstructExpr 0x559ba0af9b28 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x559ba0af9b10 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x559ba0af9af0 <col:23> 'bool' lvalue ParmVar 0x559ba0af9970 'x' 'bool'
|-CXXConstructorDecl 0x559ba0c46218 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x559ba0c462f0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x559ba0c46428 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x559ba0c46428
| `-ParmVarDecl 0x559ba0c46538 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x559ba0c465d8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x559ba0c466e8 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x559ba0c47340 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ba0af9c58 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x559ba0af9eb8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x559ba0c46128 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x559ba0c46758 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x559ba0c46758
| `-ParmVarDecl 0x559ba0c46868 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x559ba0c46908 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ba0c46a18 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x559ba0c47350 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559ba0c47320 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x559ba0c472f0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x559ba0c472c0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x559ba0c46a18 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x559ba0c473c0 <col:19>
`-CXXDestructorDecl 0x559ba0c46ab8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
