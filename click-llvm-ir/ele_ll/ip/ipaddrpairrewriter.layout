
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct libdivide_u32_t
         0 |   uint32_t magic
         4 |   uint8_t more
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPFlowID
         0 |   class IPAddress _saddr
         0 |     uint32_t _addr
         4 |   class IPAddress _daddr
         4 |     uint32_t _addr
         8 |   uint16_t _sport
        10 |   uint16_t _dport
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPRewriterEntry
         0 |   class IPFlowID _flowid
         0 |     class IPAddress _saddr
         0 |       uint32_t _addr
         4 |     class IPAddress _daddr
         4 |       uint32_t _addr
         8 |     uint16_t _sport
        10 |     uint16_t _dport
   12:0-23 |   uint32_t _output
        15 |   uint8_t _direction
        16 |   class IPRewriterEntry * _hashnext
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPRewriterFlow *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | union IPRewriterInput::(anonymous at ../elements/ip/iprewriterbase.hh:23:5)
         0 |   class IPRewriterPattern * pattern
         0 |   class IPMapper * mapper
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPRewriterInput
         0 |   class IPRewriterBase * owner
         8 |   int owner_input
        12 |   int kind
        16 |   int foutput
        24 |   class IPRewriterBase * reply_element
        32 |   int routput
        36 |   uint32_t count
        40 |   uint32_t failures
        48 |   union IPRewriterInput::(anonymous at ../elements/ip/iprewriterbase.hh:23:5) u
        48 |     class IPRewriterPattern * pattern
        48 |     class IPMapper * mapper
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class IPRewriterEntry * _element
         8 |   class IPRewriterEntry ** _pprev
        16 |   HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >::bucket_count_type _bucket
        24 |   const HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > (base)
         0 |     class IPRewriterEntry * _element
         8 |     class IPRewriterEntry ** _pprev
        16 |     HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >::bucket_count_type _bucket
        24 |     const HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPRewriterFlow
         0 |   class IPRewriterEntry [2] _e
        48 |   uint16_t _ip_csum_delta
        50 |   uint16_t _udp_csum_delta
        52 |   click_jiffies_t _expiry_j
   56:0-31 |   size_t _place
        60 |   uint8_t _ip_p
        61 |   uint8_t _tflags
        62 |   _Bool _guaranteed
        63 |   uint8_t _reply_anno
        64 |   class IPRewriterInput * _owner
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddrPairRewriter::IPAddrPairFlow
         0 |   class IPRewriterFlow (base)
         0 |     class IPRewriterEntry [2] _e
        48 |     uint16_t _ip_csum_delta
        50 |     uint16_t _udp_csum_delta
        52 |     click_jiffies_t _expiry_j
   56:0-31 |     size_t _place
        60 |     uint8_t _ip_p
        61 |     uint8_t _tflags
        62 |     _Bool _guaranteed
        63 |     uint8_t _reply_anno
        64 |     class IPRewriterInput * _owner
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f83232c0 prev 0x5557f8298d48 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f83233b8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5557f8323448 <col:19, col:25> col:19 public
|-TypedefDecl 0x5557f8323480 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5557f810f6f0 'uninitialized_type'
|   `-CXXRecord 0x5557f810f658 'uninitialized_type'
|-CXXConstructorDecl 0x5557f8323540 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5557f832ae00 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f832aea8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f832ae68 <col:10> 'int' 0
| `-CompoundStmt 0x5557f832aef0 <col:13, line:22:5>
|-CXXConstructorDecl 0x5557f8323690 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5557f8323600 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5557f832ae00 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f832af40 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5557f832af00 <col:10> 'unsigned int' lvalue ParmVar 0x5557f8323600 'x' 'unsigned int'
| `-CompoundStmt 0x5557f832af88 <col:13, line:27:5>
|-CXXConstructorDecl 0x5557f83237e8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5557f8323758 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5557f832ae00 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f832aff0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5557f832afd8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5557f832af98 <col:10> 'int' lvalue ParmVar 0x5557f8323758 'x' 'int'
| `-CompoundStmt 0x5557f832b038 <col:13, line:31:5>
|-CXXConstructorDecl 0x5557f8323940 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5557f83238b0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5557f832ae00 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f832b0a0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5557f832b088 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5557f832b048 <col:10> 'unsigned long' lvalue ParmVar 0x5557f83238b0 'x' 'unsigned long'
| `-CompoundStmt 0x5557f832b0e8 <col:13, line:35:5>
|-CXXConstructorDecl 0x5557f8323a98 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5557f8323a08 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5557f832ae00 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f832b150 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5557f832b138 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5557f832b0f8 <col:10> 'long' lvalue ParmVar 0x5557f8323a08 'x' 'long'
| `-CompoundStmt 0x5557f832b198 <col:13, line:39:5>
|-CXXConstructorDecl 0x5557f8323c58 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5557f8323b68 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5557f832ae00 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f832b218 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5557f832b1c8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5557f8251af0
| |     `-DeclRefExpr 0x5557f832b1a8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5557f8323b68 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5557f832b260 <col:20, line:44:5>
|-CXXConstructorDecl 0x5557f8328f30 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5557f8323d20 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5557f832b3c8 <col:51, line:56:5>
|   `-BinaryOperator 0x5557f832b3a8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5557f832b280 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5557f832ae00
|     | `-CXXThisExpr 0x5557f832b270 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5557f832b390 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5557f832b378 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5557f832b358 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5557f832b328 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5557f832b310 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5557f832b2b0 <col:47> 'const unsigned char *' lvalue ParmVar 0x5557f8323d20 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5557f8329080 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5557f8328ff0 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5557f8329228 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5557f8329168 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5557f832b438 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5557f832b410 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5557f832b3e0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5557f8329168 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5557f83293b8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5557f83292f0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5557f83294a8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5557f832c3f8 <col:46, line:83:5>
|   `-ReturnStmt 0x5557f832c3e8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5557f832c3d0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5557f832c3a0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f832c258 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5557f832c140 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5557f832c028 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5557f832b460 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5557f8329598 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5557f832c4a8 <col:31, line:88:5>
|   `-ReturnStmt 0x5557f832c498 <line:87:2, col:10>
|     `-UnaryOperator 0x5557f832c480 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5557f832c468 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5557f832c450 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5557f832c420 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5557f832ae00
|             `-CXXThisExpr 0x5557f832c410 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5557f8329658 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5557f832c528 <col:34, line:93:5>
|   `-ReturnStmt 0x5557f832c518 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5557f832c500 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5557f832c4d0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5557f832ae00
|         `-CXXThisExpr 0x5557f832c4c0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5557f8329728 <line:99:5, line:101:5> line:99:12 used operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5557f832c5a8 <col:38, line:101:5>
|   `-ReturnStmt 0x5557f832c598 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5557f832c580 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5557f832c550 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5557f832ae00
|         `-CXXThisExpr 0x5557f832c540 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5557f83297f8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5557f832c878 <col:38, line:108:5>
|   `-ReturnStmt 0x5557f832c868 <line:107:2, col:58>
|     `-BinaryOperator 0x5557f832c848 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5557f832c760 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5557f832c740 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5557f832c728 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5557f832c5d0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5557f832ae00
|       |   |   `-CXXThisExpr 0x5557f832c5c0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5557f832c700 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5557f832c6e8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5557f832c668 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5557f825efd8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5557f832c648 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5557f832c820 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5557f832c808 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5557f832c7e8 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5557f825efd8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5557f832c7c8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5557f83298b8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5557f832cae8 <col:39, line:112:5>
|   `-ReturnStmt 0x5557f832cad8 <line:111:2, col:56>
|     `-BinaryOperator 0x5557f832cab8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5557f832c9d0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5557f832c9b0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5557f832c998 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5557f832c8a0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5557f832ae00
|       |   |   `-CXXThisExpr 0x5557f832c890 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5557f832c970 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5557f832c958 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5557f832c938 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5557f825efd8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5557f832c918 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5557f832ca90 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5557f832ca78 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5557f832ca58 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5557f825efd8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5557f832ca38 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5557f83299e8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5557f8329af0 <line:115:5, col:38> col:12 used operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5557f8329c00 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5557f8329cf0 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5557f8329db0 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f8329e78 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5557f832a078 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5557f8329f28 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5557f8329fa0 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5557f832a1f8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5557f832a138 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5557f832a340 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5557f832a2b0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5557f832a4e8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5557f832a3f8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5557f832a630 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5557f832a5a0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5557f832a778 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5557f832a6e8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5557f832a840 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5557f832a900 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5557f832aa78 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5557f832a9b0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5557f832ab40 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5557f832ac28 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5557f832acd0 <col:51> "" ""
|-TypedefDecl 0x5557f832ad70 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5557f8298de0 'IPAddress'
|   `-CXXRecord 0x5557f83232c0 'IPAddress'
|-AccessSpecDecl 0x5557f832adc8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5557f832ae00 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5557f832b4a8 <line:15:7> col:7 implicit used constexpr IPAddress 'void (const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f832b5b8 <col:7> col:7 used 'const IPAddress &'
| |-CXXCtorInitializer Field 0x5557f832ae00 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f85c9ac8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5557f85c9a80 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x5557f832ae00
| |     `-DeclRefExpr 0x5557f85c9a60 <col:7> 'const IPAddress' lvalue ParmVar 0x5557f832b5b8 '' 'const IPAddress &'
| `-CompoundStmt 0x5557f85c9b10 <col:7>
|-CXXConstructorDecl 0x5557f832b658 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f832b768 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5557f832ae00 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f832c348 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5557f832c300 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5557f832ae00
| |     `-CXXStaticCastExpr 0x5557f832c2d0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5557f832c2a0 <col:7> 'IPAddress' lvalue ParmVar 0x5557f832b768 '' 'IPAddress &&'
| `-CompoundStmt 0x5557f832c390 <col:7>
|-CXXDestructorDecl 0x5557f832c058 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5557f85ca3b8 <col:7> col:7 implicit used operator= 'IPAddress &(const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f85ca4c8 <col:7> col:7 used 'const IPAddress &'
| `-CompoundStmt 0x5557f85ca820 <col:7>
|   |-BinaryOperator 0x5557f85ca7c8 <col:7> 'uint32_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x5557f85ca780 <col:7> 'uint32_t':'unsigned int' lvalue ->_addr 0x5557f832ae00
|   | | `-CXXThisExpr 0x5557f85ca770 <col:7> 'IPAddress *' this
|   | `-ImplicitCastExpr 0x5557f85ca7b0 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-MemberExpr 0x5557f85ca740 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x5557f832ae00
|   |     `-DeclRefExpr 0x5557f85ca720 <col:7> 'const IPAddress' lvalue ParmVar 0x5557f85ca4c8 '' 'const IPAddress &'
|   `-ReturnStmt 0x5557f85ca810 <col:7>
|     `-UnaryOperator 0x5557f85ca7f8 <col:7> 'IPAddress' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f85ca7e8 <col:7> 'IPAddress *' this
`-CXXMethodDecl 0x5557f85ca538 <col:7> col:7 implicit operator= 'IPAddress &(IPAddress &&)' inline default trivial noexcept-unevaluated 0x5557f85ca538
  `-ParmVarDecl 0x5557f85ca648 <col:7> col:7 'IPAddress &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85c7070 <../dummy_inc/click/ipflowid.hh:9:1, line:143:1> line:9:7 referenced class IPFlowID definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f85c7188 <col:1, col:7> col:7 implicit referenced class IPFlowID
|-AccessSpecDecl 0x5557f85c7218 <col:18, col:24> col:18 public
|-TypedefDecl 0x5557f85c7250 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5557f810f6f0 'uninitialized_type'
|   `-CXXRecord 0x5557f810f658 'uninitialized_type'
|-CXXConstructorDecl 0x5557f85c7310 <line:17:5, line:19:5> line:17:5 used IPFlowID 'void ()'
| |-CXXCtorInitializer Field 0x5557f85c9218 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5557f85c97e8 <line:18:4, col:11> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5557f85c9278 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5557f85c9850 <col:14, col:21> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5557f85c92d8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5557f85c98e0 <col:31> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x5557f85c98a0 <col:31> 'int' 0
| |-CXXCtorInitializer Field 0x5557f85c9338 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5557f85c9960 <col:42> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x5557f85c9920 <col:42> 'int' 0
| `-CompoundStmt 0x5557f85c99c0 <col:45, line:19:5>
|-CXXConstructorDecl 0x5557f85c7678 <line:26:5, line:28:5> line:26:5 used IPFlowID 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x5557f85c73c8 <col:14, col:24> col:24 used saddr 'IPAddress'
| |-ParmVarDecl 0x5557f85c7440 <col:31, col:40> col:40 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x5557f85c74b8 <col:47, col:57> col:57 used daddr 'IPAddress'
| |-ParmVarDecl 0x5557f85c7530 <col:64, col:73> col:73 used dport 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x5557f85c9218 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5557f85c9b20 <line:27:4, col:16> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x5557f85c9a10 <col:11> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x5557f85c99d0 <col:11> 'IPAddress' lvalue ParmVar 0x5557f85c73c8 'saddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x5557f85c9278 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5557f85c9bd0 <col:19, col:31> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x5557f85c9bb8 <col:26> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x5557f85c9b78 <col:26> 'IPAddress' lvalue ParmVar 0x5557f85c74b8 'daddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x5557f85c92d8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5557f85c9c68 <col:41> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x5557f85c9c28 <col:41> 'uint16_t':'unsigned short' lvalue ParmVar 0x5557f85c7440 'sport' 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x5557f85c9338 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5557f85c9ce8 <col:56> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x5557f85c9ca8 <col:56> 'uint16_t':'unsigned short' lvalue ParmVar 0x5557f85c7530 'dport' 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5557f85c9d48 <col:63, line:28:5>
|-CXXConstructorDecl 0x5557f85c7898 <line:37:5, col:60> col:14 IPFlowID 'void (const Packet *, bool)'
| |-ParmVarDecl 0x5557f85c7750 <col:23, col:37> col:37 p 'const Packet *'
| `-ParmVarDecl 0x5557f85c77c8 <col:40, col:55> col:45 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f85c97b0 <col:55> 'bool' false
|-CXXConstructorDecl 0x5557f85c7aa8 <line:47:5, col:64> col:14 IPFlowID 'void (const click_ip *, bool)'
| |-ParmVarDecl 0x5557f85c7960 <col:23, col:39> col:39 iph 'const click_ip *'
| `-ParmVarDecl 0x5557f85c79d8 <col:44, col:59> col:49 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f85c97c0 <col:59> 'bool' false
|-CXXConstructorDecl 0x5557f85c7c00 <line:50:5, line:52:5> line:50:12 IPFlowID 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5557f85c7b70 <col:21, col:47> col:47 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x5557f85c9218 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5557f85c9d58 <col:12> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5557f85c9278 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5557f85c9da8 <col:12> 'IPAddress' 'void ()'
| `-CompoundStmt 0x5557f85c9e60 <col:55, line:52:5>
|   `-CStyleCastExpr 0x5557f85c9e38 <line:51:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5557f85c9e08 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5557f85c7b70 'unused' 'const uninitialized_type &'
|-TypedefDecl 0x5557f85c7db8 <line:55:5, col:60> col:35 referenced unspecified_bool_type 'IPAddress (IPFlowID::*)() const'
| `-MemberPointerType 0x5557f85c7d30 'IPAddress (IPFlowID::*)() const'
|   |-RecordType 0x5557f85c7100 'IPFlowID'
|   | `-CXXRecord 0x5557f85c7070 'IPFlowID'
|   `-ParenType 0x5557f85c7cd0 'IPAddress () const' sugar
|     `-FunctionProtoType 0x5557f84efa00 'IPAddress () const' const cdecl
|       `-RecordType 0x5557f8298de0 'IPAddress'
|         `-CXXRecord 0x5557f83232c0 'IPAddress'
|-CXXConversionDecl 0x5557f85c7ef8 <line:57:5, line:59:5> line:57:5 operator IPAddress (IPFlowID::*)() const 'IPFlowID::unspecified_bool_type () const'
| `-CompoundStmt 0x5557f85ca110 <col:44, line:59:5>
|   `-ReturnStmt 0x5557f85ca100 <line:58:2, col:47>
|     `-ConditionalOperator 0x5557f85ca0d0 <col:9, col:47> 'IPAddress (IPFlowID::*)() const'
|       |-BinaryOperator 0x5557f85c9ff8 <col:9, col:19> 'bool' '||'
|       | |-ImplicitCastExpr 0x5557f85c9fc8 <col:9> 'bool' <IntegralToBoolean>
|       | | `-ImplicitCastExpr 0x5557f85c9f48 <col:9> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       | |   `-CXXMemberCallExpr 0x5557f85c9f28 <col:9> 'uint32_t':'unsigned int'
|       | |     `-MemberExpr 0x5557f85c9ef8 <col:9> '<bound member function type>' .operator unsigned int 0x5557f8329728
|       | |       `-MemberExpr 0x5557f85c9e88 <col:9> 'const IPAddress' lvalue ->_saddr 0x5557f85c9218
|       | |         `-CXXThisExpr 0x5557f85c9e78 <col:9> 'const IPFlowID *' implicit this
|       | `-ImplicitCastExpr 0x5557f85c9fe0 <col:19> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5557f85c9fb0 <col:19> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       |     `-CXXMemberCallExpr 0x5557f85c9f90 <col:19> 'uint32_t':'unsigned int'
|       |       `-MemberExpr 0x5557f85c9f60 <col:19> '<bound member function type>' .operator unsigned int 0x5557f8329728
|       |         `-MemberExpr 0x5557f85c9ec8 <col:19> 'const IPAddress' lvalue ->_daddr 0x5557f85c9278
|       |           `-CXXThisExpr 0x5557f85c9eb8 <col:19> 'const IPFlowID *' implicit this
|       |-UnaryOperator 0x5557f85ca080 <col:28, col:39> 'IPAddress (IPFlowID::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5557f85ca050 <col:29, col:39> 'IPAddress () const' CXXMethod 0x5557f85c8020 'saddr' 'IPAddress () const'
|       `-ImplicitCastExpr 0x5557f85ca0b8 <col:47> 'IPAddress (IPFlowID::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5557f85ca098 <col:47> 'int' 0
|-CXXMethodDecl 0x5557f85c8020 <line:63:5, line:65:5> line:63:15 used saddr 'IPAddress () const'
| `-CompoundStmt 0x5557f85ca1a8 <col:29, line:65:5>
|   `-ReturnStmt 0x5557f85ca198 <line:64:2, col:9>
|     `-CXXConstructExpr 0x5557f85ca168 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x5557f85ca138 <col:9> 'const IPAddress' lvalue ->_saddr 0x5557f85c9218
|         `-CXXThisExpr 0x5557f85ca128 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5557f85c8138 <line:67:5, line:69:5> line:67:14 used sport 'uint16_t () const'
| `-CompoundStmt 0x5557f85ca228 <col:28, line:69:5>
|   `-ReturnStmt 0x5557f85ca218 <line:68:2, col:9>
|     `-ImplicitCastExpr 0x5557f85ca200 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x5557f85ca1d0 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x5557f85c92d8
|         `-CXXThisExpr 0x5557f85ca1c0 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5557f85c81f8 <line:71:5, line:73:5> line:71:15 used daddr 'IPAddress () const'
| `-CompoundStmt 0x5557f85ca2c0 <col:29, line:73:5>
|   `-ReturnStmt 0x5557f85ca2b0 <line:72:2, col:9>
|     `-CXXConstructExpr 0x5557f85ca280 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x5557f85ca250 <col:9> 'const IPAddress' lvalue ->_daddr 0x5557f85c9278
|         `-CXXThisExpr 0x5557f85ca240 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5557f85c82b8 <line:75:5, line:77:5> line:75:14 used dport 'uint16_t () const'
| `-CompoundStmt 0x5557f85ca340 <col:28, line:77:5>
|   `-ReturnStmt 0x5557f85ca330 <line:76:2, col:9>
|     `-ImplicitCastExpr 0x5557f85ca318 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x5557f85ca2e8 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x5557f85c9338
|         `-CXXThisExpr 0x5557f85ca2d8 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5557f85c83f8 <line:80:5, line:82:5> line:80:10 set_saddr 'void (IPAddress)'
| |-ParmVarDecl 0x5557f85c8368 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x5557f85ca8e8 <col:33, line:82:5>
|   `-CXXOperatorCallExpr 0x5557f85ca8b0 <line:81:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x5557f85ca898 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5557f85ca6d0 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5557f85ca3b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x5557f85ca368 <col:2> 'IPAddress' lvalue ->_saddr 0x5557f85c9218
|     | `-CXXThisExpr 0x5557f85ca358 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5557f85ca6b8 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x5557f85ca398 <col:11> 'IPAddress' lvalue ParmVar 0x5557f85c8368 'a' 'IPAddress'
|-CXXMethodDecl 0x5557f85c85a8 <line:85:5, line:87:5> line:85:10 set_sport 'void (uint16_t)'
| |-ParmVarDecl 0x5557f85c84b0 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5557f85ca998 <col:32, line:87:5>
|   `-BinaryOperator 0x5557f85ca978 <line:86:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x5557f85ca910 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x5557f85c92d8
|     | `-CXXThisExpr 0x5557f85ca900 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5557f85ca960 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5557f85ca940 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5557f85c84b0 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5557f85c86f0 <line:89:5, line:91:5> line:89:10 set_daddr 'void (IPAddress)'
| |-ParmVarDecl 0x5557f85c8660 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x5557f85caa98 <col:33, line:91:5>
|   `-CXXOperatorCallExpr 0x5557f85caa60 <line:90:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x5557f85caa48 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5557f85caa28 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5557f85ca3b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x5557f85ca9c0 <col:2> 'IPAddress' lvalue ->_daddr 0x5557f85c9278
|     | `-CXXThisExpr 0x5557f85ca9b0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5557f85caa10 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x5557f85ca9f0 <col:11> 'IPAddress' lvalue ParmVar 0x5557f85c8660 'a' 'IPAddress'
|-CXXMethodDecl 0x5557f85c8838 <line:94:5, line:96:5> line:94:10 set_dport 'void (uint16_t)'
| |-ParmVarDecl 0x5557f85c87a8 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5557f85cab48 <col:32, line:96:5>
|   `-BinaryOperator 0x5557f85cab28 <line:95:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x5557f85caac0 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x5557f85c9338
|     | `-CXXThisExpr 0x5557f85caab0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5557f85cab10 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5557f85caaf0 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5557f85c87a8 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5557f85c8b00 <line:103:5, line:108:5> line:103:10 assign 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x5557f85c88f0 <col:17, col:27> col:27 used saddr 'IPAddress'
| |-ParmVarDecl 0x5557f85c8968 <col:34, col:43> col:43 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x5557f85c89e0 <col:50, col:60> col:60 used daddr 'IPAddress'
| |-ParmVarDecl 0x5557f85c8a58 <col:67, col:76> col:76 used dport 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5557f85cae60 <col:83, line:108:5>
|   |-CXXOperatorCallExpr 0x5557f85cac10 <line:104:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x5557f85cabf8 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5557f85cabd8 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5557f85ca3b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x5557f85cab70 <col:2> 'IPAddress' lvalue ->_saddr 0x5557f85c9218
|   | | `-CXXThisExpr 0x5557f85cab60 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x5557f85cabc0 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x5557f85caba0 <col:11> 'IPAddress' lvalue ParmVar 0x5557f85c88f0 'saddr' 'IPAddress'
|   |-CXXOperatorCallExpr 0x5557f85cacf8 <line:105:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x5557f85cace0 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5557f85cacc0 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5557f85ca3b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x5557f85cac58 <col:2> 'IPAddress' lvalue ->_daddr 0x5557f85c9278
|   | | `-CXXThisExpr 0x5557f85cac48 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x5557f85caca8 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x5557f85cac88 <col:11> 'IPAddress' lvalue ParmVar 0x5557f85c89e0 'daddr' 'IPAddress'
|   |-BinaryOperator 0x5557f85cada8 <line:106:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x5557f85cad40 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x5557f85c92d8
|   | | `-CXXThisExpr 0x5557f85cad30 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x5557f85cad90 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-DeclRefExpr 0x5557f85cad70 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5557f85c8968 'sport' 'uint16_t':'unsigned short'
|   `-BinaryOperator 0x5557f85cae40 <line:107:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x5557f85cadd8 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x5557f85c9338
|     | `-CXXThisExpr 0x5557f85cadc8 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5557f85cae28 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5557f85cae08 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5557f85c8a58 'dport' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5557f85c8c08 <line:113:5, line:115:5> line:113:14 used reverse 'IPFlowID () const'
| `-CompoundStmt 0x5557f85cb998 <col:30, line:115:5>
|   `-ReturnStmt 0x5557f85cb988 <line:114:2, col:48>
|     `-ExprWithCleanups 0x5557f85cb970 <col:9, col:48> 'IPFlowID'
|       `-CXXConstructExpr 0x5557f85cb940 <col:9, col:48> 'IPFlowID' 'void (IPFlowID &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f85cb4f8 <col:9, col:48> 'IPFlowID' xvalue
|           `-CXXTemporaryObjectExpr 0x5557f85cb368 <col:9, col:48> 'IPFlowID' 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
|             |-CXXConstructExpr 0x5557f85cb2d8 <col:18> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x5557f85caeb0 <col:18> 'const IPAddress' lvalue ->_daddr 0x5557f85c9278
|             |   `-CXXThisExpr 0x5557f85caea0 <col:18> 'const IPFlowID *' implicit this
|             |-ImplicitCastExpr 0x5557f85cb308 <col:26> 'uint16_t':'unsigned short' <LValueToRValue>
|             | `-MemberExpr 0x5557f85caef0 <col:26> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x5557f85c9338
|             |   `-CXXThisExpr 0x5557f85caee0 <col:26> 'const IPFlowID *' implicit this
|             |-CXXConstructExpr 0x5557f85cb320 <col:34> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x5557f85caf30 <col:34> 'const IPAddress' lvalue ->_saddr 0x5557f85c9218
|             |   `-CXXThisExpr 0x5557f85caf20 <col:34> 'const IPFlowID *' implicit this
|             `-ImplicitCastExpr 0x5557f85cb350 <col:42> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-MemberExpr 0x5557f85caf70 <col:42> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x5557f85c92d8
|                 `-CXXThisExpr 0x5557f85caf60 <col:42> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5557f85c8cc8 <line:116:5, col:59> col:21 rev 'IPFlowID () const' inline
| `-DeprecatedAttr 0x5557f85c8d68 <col:48> "" ""
|-CXXMethodDecl 0x5557f85c8df8 <line:122:5, col:34> col:23 hashcode 'hashcode_t () const' inline
|-CXXMethodDecl 0x5557f85c8eb8 <line:127:5, col:22> col:12 used unparse 'String () const'
|-CXXConversionDecl 0x5557f85c8f88 <line:129:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5557f85c9030 <col:51> "" ""
|-CXXMethodDecl 0x5557f85c90d0 <line:130:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5557f85c9170 <col:44> "" ""
|-AccessSpecDecl 0x5557f85c91e0 <line:132:3, col:12> col:3 protected
|-FieldDecl 0x5557f85c9218 <line:135:5, col:15> col:15 referenced _saddr 'IPAddress'
|-FieldDecl 0x5557f85c9278 <line:136:5, col:15> col:15 referenced _daddr 'IPAddress'
|-FieldDecl 0x5557f85c92d8 <line:137:5, col:14> col:14 referenced _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f85c9338 <line:138:5, col:14> col:14 referenced _dport 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5557f85c9470 <line:140:5, col:26> col:9 unparse 'int (char *) const'
| `-ParmVarDecl 0x5557f85c93a0 <col:17, col:23> col:23 s 'char *'
|-FriendDecl 0x5557f85c9758 <line:141:5, col:76> col:25
| `-FunctionDecl 0x5557f85c9698 parent 0x5557f7fb6278 <col:5, col:76> col:25 operator<< 'StringAccum &(StringAccum &, const IPFlowID &)'
|   |-ParmVarDecl 0x5557f85c9528 <col:36, col:49> col:49 sa 'StringAccum &'
|   `-ParmVarDecl 0x5557f85c95c8 <col:53, col:69> col:69 flow_id 'const IPFlowID &'
|-CXXConstructorDecl 0x5557f85cafa0 <line:9:7> col:7 implicit constexpr IPFlowID 'void (const IPFlowID &)' inline default trivial noexcept-unevaluated 0x5557f85cafa0
| `-ParmVarDecl 0x5557f85cb0b8 <col:7> col:7 'const IPFlowID &'
|-CXXConstructorDecl 0x5557f85cb158 <col:7> col:7 implicit used constexpr IPFlowID 'void (IPFlowID &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f85cb268 <col:7> col:7 used 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5557f85c9218 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5557f85cb5e8 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x5557f85cb5a0 <col:7> 'IPAddress' xvalue ._saddr 0x5557f85c9218
| |     `-CXXStaticCastExpr 0x5557f85cb570 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5557f85cb540 <col:7> 'IPFlowID' lvalue ParmVar 0x5557f85cb268 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5557f85c9278 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5557f85cb6e8 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x5557f85cb6a0 <col:7> 'IPAddress' xvalue ._daddr 0x5557f85c9278
| |     `-CXXStaticCastExpr 0x5557f85cb670 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5557f85cb640 <col:7> 'IPFlowID' lvalue ParmVar 0x5557f85cb268 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5557f85c92d8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5557f85cb7e8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x5557f85cb7a0 <col:7> 'uint16_t':'unsigned short' xvalue ._sport 0x5557f85c92d8
| |     `-CXXStaticCastExpr 0x5557f85cb770 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5557f85cb740 <col:7> 'IPFlowID' lvalue ParmVar 0x5557f85cb268 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5557f85c9338 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5557f85cb8d0 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x5557f85cb888 <col:7> 'uint16_t':'unsigned short' xvalue ._dport 0x5557f85c9338
| |     `-CXXStaticCastExpr 0x5557f85cb858 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5557f85cb828 <col:7> 'IPFlowID' lvalue ParmVar 0x5557f85cb268 '' 'IPFlowID &&'
| `-CompoundStmt 0x5557f85cb930 <col:7>
|-CXXDestructorDecl 0x5557f85cb3b8 <col:7> col:7 implicit referenced ~IPFlowID 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5557f85d38e0 <col:7> col:7 implicit used operator= 'IPFlowID &(const IPFlowID &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f85d39e8 <col:7> col:7 used 'const IPFlowID &'
| `-CompoundStmt 0x5557f85d4548 <col:7>
|   |-CXXMemberCallExpr 0x5557f85d41d8 <col:7> 'IPAddress' lvalue
|   | |-MemberExpr 0x5557f85d4190 <col:7> '<bound member function type>' .operator= 0x5557f85ca3b8
|   | | `-MemberExpr 0x5557f85d40a0 <col:7> 'IPAddress' lvalue ->_saddr 0x5557f85c9218
|   | |   `-CXXThisExpr 0x5557f85d4090 <col:7> 'IPFlowID *' this
|   | `-MemberExpr 0x5557f85d4160 <col:7> 'const IPAddress' lvalue ._saddr 0x5557f85c9218
|   |   `-DeclRefExpr 0x5557f85d4140 <col:7> 'const IPFlowID' lvalue ParmVar 0x5557f85d39e8 '' 'const IPFlowID &'
|   |-CXXMemberCallExpr 0x5557f85d4358 <col:7> 'IPAddress' lvalue
|   | |-MemberExpr 0x5557f85d4310 <col:7> '<bound member function type>' .operator= 0x5557f85ca3b8
|   | | `-MemberExpr 0x5557f85d4220 <col:7> 'IPAddress' lvalue ->_daddr 0x5557f85c9278
|   | |   `-CXXThisExpr 0x5557f85d4210 <col:7> 'IPFlowID *' this
|   | `-MemberExpr 0x5557f85d42e0 <col:7> 'const IPAddress' lvalue ._daddr 0x5557f85c9278
|   |   `-DeclRefExpr 0x5557f85d42c0 <col:7> 'const IPFlowID' lvalue ParmVar 0x5557f85d39e8 '' 'const IPFlowID &'
|   |-BinaryOperator 0x5557f85d4428 <col:7> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x5557f85d43e0 <col:7> 'uint16_t':'unsigned short' lvalue ->_sport 0x5557f85c92d8
|   | | `-CXXThisExpr 0x5557f85d43d0 <col:7> 'IPFlowID *' this
|   | `-ImplicitCastExpr 0x5557f85d4410 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-MemberExpr 0x5557f85d43a0 <col:7> 'const uint16_t':'const unsigned short' lvalue ._sport 0x5557f85c92d8
|   |     `-DeclRefExpr 0x5557f85d4380 <col:7> 'const IPFlowID' lvalue ParmVar 0x5557f85d39e8 '' 'const IPFlowID &'
|   |-BinaryOperator 0x5557f85d44f0 <col:7> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x5557f85d44a8 <col:7> 'uint16_t':'unsigned short' lvalue ->_dport 0x5557f85c9338
|   | | `-CXXThisExpr 0x5557f85d4498 <col:7> 'IPFlowID *' this
|   | `-ImplicitCastExpr 0x5557f85d44d8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-MemberExpr 0x5557f85d4468 <col:7> 'const uint16_t':'const unsigned short' lvalue ._dport 0x5557f85c9338
|   |     `-DeclRefExpr 0x5557f85d4448 <col:7> 'const IPFlowID' lvalue ParmVar 0x5557f85d39e8 '' 'const IPFlowID &'
|   `-ReturnStmt 0x5557f85d4538 <col:7>
|     `-UnaryOperator 0x5557f85d4520 <col:7> 'IPFlowID' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f85d4510 <col:7> 'IPFlowID *' this
`-CXXMethodDecl 0x5557f85d3a58 <col:7> col:7 implicit operator= 'IPFlowID &(IPFlowID &&)' inline default trivial noexcept-unevaluated 0x5557f85d3a58
  `-ParmVarDecl 0x5557f85d3b68 <col:7> col:7 'IPFlowID &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  NonVirtualBaseLLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85d23a0 prev 0x5557f85cef70 <../elements/ip/iprwmapping.hh:16:1, line:65:1> line:16:7 referenced class IPRewriterEntry definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f85d2498 <col:1, col:7> col:7 implicit referenced class IPRewriterEntry
|-AccessSpecDecl 0x5557f85d2528 <col:25, col:31> col:25 public
|-TypedefDecl 0x5557f85d2560 <line:18:5, col:22> col:22 referenced key_type 'IPFlowID'
| `-RecordType 0x5557f85c7100 'IPFlowID'
|   `-CXXRecord 0x5557f85c7070 'IPFlowID'
|-TypedefDecl 0x5557f85d25c8 <line:19:5, col:29> col:29 referenced key_const_reference 'const IPFlowID &'
| `-LValueReferenceType 0x5557f85c9590 'const IPFlowID &'
|   `-QualType 0x5557f85c7101 'const IPFlowID' const
|     `-RecordType 0x5557f85c7100 'IPFlowID'
|       `-CXXRecord 0x5557f85c7070 'IPFlowID'
|-CXXConstructorDecl 0x5557f85d2680 <line:21:5, line:22:5> line:21:5 IPRewriterEntry 'void ()'
| |-CXXCtorInitializer Field 0x5557f85d30e0 '_flowid' 'IPFlowID'
| | `-CXXConstructExpr 0x5557f85d33e8 <col:5> 'IPFlowID' 'void ()'
| `-CompoundStmt 0x5557f85d3440 <col:23, line:22:5>
|-CXXMethodDecl 0x5557f85d2948 <line:24:5, line:30:5> line:24:10 initialize 'void (const IPFlowID &, uint32_t, bool)'
| |-ParmVarDecl 0x5557f85d2738 <col:21, col:37> col:37 used flowid 'const IPFlowID &'
| |-ParmVarDecl 0x5557f85d27b0 <col:45, col:54> col:54 used output 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557f85d2828 <col:62, col:67> col:67 used direction 'bool'
| `-CompoundStmt 0x5557f85d4808 <col:78, line:30:5>
|   |-ParenExpr 0x5557f85d3860 <line:25:2, col:164> 'void'
|   | `-ConditionalOperator 0x5557f85d3830 <col:3, col:163> 'void'
|   |   |-CXXStaticCastExpr 0x5557f85d34f0 <col:3, col:41> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f85d34c0 <col:23, col:33> 'bool' '<='
|   |   |   |-ImplicitCastExpr 0x5557f85d3490 <col:23> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x5557f85d3450 <col:23> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f85d27b0 'output' 'uint32_t':'unsigned int'
|   |   |   `-ImplicitCastExpr 0x5557f85d34a8 <col:33> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x5557f85d3470 <col:33> 'int' 16777215
|   |   |-CXXFunctionalCastExpr 0x5557f85d3550 <col:45, col:52> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f85d3530 <col:51> 'int' 0
|   |   `-CallExpr 0x5557f85d3790 <col:56, col:163> 'void'
|   |     |-ImplicitCastExpr 0x5557f85d3778 <col:56> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f85d3758 <col:56> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f85d37d0 <col:71> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f85d35c0 <col:71> 'const char [19]' lvalue "output <= 0xFFFFFF"
|   |     |-ImplicitCastExpr 0x5557f85d37e8 <col:93> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f85d35f0 <col:93> 'const char [30]' lvalue "../elements/ip/iprwmapping.hh"
|   |     |-ImplicitCastExpr 0x5557f85d3800 <col:126> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f85d3628 <col:126> 'int' 25
|   |     `-ImplicitCastExpr 0x5557f85d3818 <col:130, col:144> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f85d3740 <col:130, col:144> 'const char [67]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f85d3728 <col:144> 'const char [67]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f85d36c8 <col:144> 'const char [67]' lvalue "void IPRewriterEntry::initialize(const IPFlowID &, uint32_t, bool)"
|   |-CXXOperatorCallExpr 0x5557f85d45f0 <line:26:2, col:12> 'IPFlowID' lvalue
|   | |-ImplicitCastExpr 0x5557f85d45d8 <col:10> 'IPFlowID &(*)(const IPFlowID &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5557f85d4028 <col:10> 'IPFlowID &(const IPFlowID &) noexcept' lvalue CXXMethod 0x5557f85d38e0 'operator=' 'IPFlowID &(const IPFlowID &) noexcept'
|   | |-MemberExpr 0x5557f85d3890 <col:2> 'IPFlowID' lvalue ->_flowid 0x5557f85d30e0
|   | | `-CXXThisExpr 0x5557f85d3880 <col:2> 'IPRewriterEntry *' implicit this
|   | `-DeclRefExpr 0x5557f85d38c0 <col:12> 'const IPFlowID' lvalue ParmVar 0x5557f85d2738 'flowid' 'const IPFlowID &'
|   |-BinaryOperator 0x5557f85d46a0 <line:27:2, col:12> 'uint32_t':'unsigned int' lvalue bitfield '='
|   | |-MemberExpr 0x5557f85d4638 <col:2> 'uint32_t':'unsigned int' lvalue bitfield ->_output 0x5557f85d3180
|   | | `-CXXThisExpr 0x5557f85d4628 <col:2> 'IPRewriterEntry *' implicit this
|   | `-ImplicitCastExpr 0x5557f85d4688 <col:12> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5557f85d4668 <col:12> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f85d27b0 'output' 'uint32_t':'unsigned int'
|   |-BinaryOperator 0x5557f85d4750 <line:28:2, col:15> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5557f85d46d0 <col:2> 'uint8_t':'unsigned char' lvalue ->_direction 0x5557f85d31e0
|   | | `-CXXThisExpr 0x5557f85d46c0 <col:2> 'IPRewriterEntry *' implicit this
|   | `-ImplicitCastExpr 0x5557f85d4738 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x5557f85d4720 <col:15> 'bool' <LValueToRValue>
|   |     `-DeclRefExpr 0x5557f85d4700 <col:15> 'bool' lvalue ParmVar 0x5557f85d2828 'direction' 'bool'
|   `-BinaryOperator 0x5557f85d47e8 <line:29:2, col:14> 'IPRewriterEntry *' lvalue '='
|     |-MemberExpr 0x5557f85d4780 <col:2> 'IPRewriterEntry *' lvalue ->_hashnext 0x5557f85d3240
|     | `-CXXThisExpr 0x5557f85d4770 <col:2> 'IPRewriterEntry *' implicit this
|     `-ImplicitCastExpr 0x5557f85d47d0 <col:14> 'IPRewriterEntry *' <NullToPointer>
|       `-IntegerLiteral 0x5557f85d47b0 <col:14> 'int' 0
|-CXXMethodDecl 0x5557f85d2a78 <line:32:5, line:34:5> line:32:21 used flowid 'const IPFlowID &() const'
| `-CompoundStmt 0x5557f85d4890 <col:36, line:34:5>
|   `-ReturnStmt 0x5557f85d4880 <line:33:2, col:9>
|     `-MemberExpr 0x5557f85d4850 <col:9> 'const IPFlowID' lvalue ->_flowid 0x5557f85d30e0
|       `-CXXThisExpr 0x5557f85d4840 <col:9> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x5557f85d2b38 <line:35:5, col:40> col:21 rewritten_flowid 'IPFlowID () const' inline
|-CXXMethodDecl 0x5557f85d2bf8 <line:37:5, line:39:5> line:37:10 direction 'bool () const'
| `-CompoundStmt 0x5557f85d4928 <col:28, line:39:5>
|   `-ReturnStmt 0x5557f85d4918 <line:38:2, col:9>
|     `-ImplicitCastExpr 0x5557f85d4900 <col:9> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x5557f85d48e8 <col:9> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x5557f85d48b8 <col:9> 'const uint8_t':'const unsigned char' lvalue ->_direction 0x5557f85d31e0
|           `-CXXThisExpr 0x5557f85d48a8 <col:9> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x5557f85d2cc0 <line:41:5, line:43:5> line:41:9 output 'int () const'
| `-CompoundStmt 0x5557f85d49c0 <col:24, line:43:5>
|   `-ReturnStmt 0x5557f85d49b0 <line:42:2, col:9>
|     `-ImplicitCastExpr 0x5557f85d4998 <col:9> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5557f85d4980 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x5557f85d4950 <col:9> 'const uint32_t':'const unsigned int' lvalue bitfield ->_output 0x5557f85d3180
|           `-CXXThisExpr 0x5557f85d4940 <col:9> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x5557f85d2dd8 <line:45:5, line:47:5> line:45:21 flow 'IPRewriterFlow *()'
| `-CompoundStmt 0x5557f85d4ac8 <col:28, line:47:5>
|   `-ReturnStmt 0x5557f85d4ab8 <line:46:2, col:61>
|     `-CXXReinterpretCastExpr 0x5557f85d4a88 <col:9, col:61> 'IPRewriterFlow *' reinterpret_cast<class IPRewriterFlow *> <BitCast>
|       `-BinaryOperator 0x5557f85d4a58 <col:44, col:51> 'IPRewriterEntry *' '-'
|         |-CXXThisExpr 0x5557f85d49d8 <col:44> 'IPRewriterEntry *' this
|         `-ImplicitCastExpr 0x5557f85d4a40 <col:51> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x5557f85d4a28 <col:51> 'uint8_t':'unsigned char' <LValueToRValue>
|             `-MemberExpr 0x5557f85d49f8 <col:51> 'uint8_t':'unsigned char' lvalue ->_direction 0x5557f85d31e0
|               `-CXXThisExpr 0x5557f85d49e8 <col:51> 'IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x5557f85d2ef8 <line:48:5, line:50:5> line:48:27 flow 'const IPRewriterFlow *() const'
| `-CompoundStmt 0x5557f85d4bd0 <col:40, line:50:5>
|   `-ReturnStmt 0x5557f85d4bc0 <line:49:2, col:67>
|     `-CXXReinterpretCastExpr 0x5557f85d4b90 <col:9, col:67> 'const IPRewriterFlow *' reinterpret_cast<const class IPRewriterFlow *> <BitCast>
|       `-BinaryOperator 0x5557f85d4b60 <col:50, col:57> 'const IPRewriterEntry *' '-'
|         |-CXXThisExpr 0x5557f85d4ae0 <col:50> 'const IPRewriterEntry *' this
|         `-ImplicitCastExpr 0x5557f85d4b48 <col:57> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x5557f85d4b30 <col:57> 'uint8_t':'unsigned char' <LValueToRValue>
|             `-MemberExpr 0x5557f85d4b00 <col:57> 'const uint8_t':'const unsigned char' lvalue ->_direction 0x5557f85d31e0
|               `-CXXThisExpr 0x5557f85d4af0 <col:57> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x5557f85d3008 <line:52:5, line:54:5> line:52:25 used hashkey 'IPRewriterEntry::key_const_reference () const'
| `-CompoundStmt 0x5557f85d4c38 <col:41, line:54:5>
|   `-ReturnStmt 0x5557f85d4c28 <line:53:2, col:9>
|     `-MemberExpr 0x5557f85d4bf8 <col:9> 'const IPFlowID' lvalue ->_flowid 0x5557f85d30e0
|       `-CXXThisExpr 0x5557f85d4be8 <col:9> 'const IPRewriterEntry *' implicit this
|-AccessSpecDecl 0x5557f85d30a8 <line:56:3, col:10> col:3 private
|-FieldDecl 0x5557f85d30e0 <line:58:5, col:14> col:14 referenced _flowid 'IPFlowID'
|-FieldDecl 0x5557f85d3180 <line:59:5, col:24> col:14 referenced _output 'uint32_t':'unsigned int'
| `-ConstantExpr 0x5557f85d3160 <col:24> 'int' Int: 24
|   `-IntegerLiteral 0x5557f85d3130 <col:24> 'int' 24
|-FieldDecl 0x5557f85d31e0 <line:60:5, col:13> col:13 referenced _direction 'uint8_t':'unsigned char'
|-FieldDecl 0x5557f85d3240 <line:61:5, col:22> col:22 referenced _hashnext 'IPRewriterEntry *'
|-FriendDecl 0x5557f85d3390 <line:63:5, col:55> col:12 'class HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|-CXXConstructorDecl 0x5557f8629e18 <line:16:7> col:7 implicit constexpr IPRewriterEntry 'void (const IPRewriterEntry &)' inline default trivial noexcept-unevaluated 0x5557f8629e18
| `-ParmVarDecl 0x5557f8629f28 <col:7> col:7 'const IPRewriterEntry &'
|-CXXConstructorDecl 0x5557f8629fc8 <col:7> col:7 implicit constexpr IPRewriterEntry 'void (IPRewriterEntry &&)' inline default trivial noexcept-unevaluated 0x5557f8629fc8
| `-ParmVarDecl 0x5557f862a0d8 <col:7> col:7 'IPRewriterEntry &&'
`-CXXDestructorDecl 0x5557f862a2c8 <col:7> col:7 implicit ~IPRewriterEntry 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterEntry = type { %class.IPFlowID, [3 x i8], i8, %class.IPRewriterEntry* }
  NonVirtualBaseLLVMType:%class.IPRewriterEntry = type { %class.IPFlowID, [3 x i8], i8, %class.IPRewriterEntry* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:24 IsSigned:0 StorageSize:24 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85338e8 prev 0x5557f852b058 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5557f85339e0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5557f8533a70 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5557f8533ae8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5557f8533ba8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5557f8533c70 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5557f8533de8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5557f8533d20 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5557f8533e90 <col:24>
| `-OptimizeNoneAttr 0x5557f8533ee8 <col:34>
|-CXXMethodDecl 0x5557f8533f30 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5557f85341e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5557f8533fe0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5557f8534058 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5557f85340d8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5557f85342b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5557f85342e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5557f8534350 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5557f85343d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5557f85346f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5557f8534490 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5557f8534508 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5557f8534580 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5557f8534600 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5557f8534810 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5557f84a2e98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5557f84a2e98
| `-ParmVarDecl 0x5557f84a2fa8 <col:11> col:11 'const Element::Port &'
`-CXXConstructorDecl 0x5557f84a3048 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5557f84a3048
  `-ParmVarDecl 0x5557f84a3158 <col:11> col:11 'Element::Port &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85268a0 prev 0x5557f8526620 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f8526998 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5557f8526a28 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5557f8526a88 <line:31:5, col:13> col:5 Element 'void ()'
|-CXXDestructorDecl 0x5557f8526b78 <line:32:5, col:22> col:13 ~Element 'void ()' virtual noexcept-unevaluated 0x5557f8526b78
|-VarDecl 0x5557f8526c78 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5557f8526e48 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5557f8526cf8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5557f8526d70 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5557f8526fd8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5557f8526f10 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5557f8527080 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5557f85271b8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5557f85270f0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5557f8527358 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5557f8527298 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5557f85274f8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5557f8527438 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5557f85275a0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5557f85276a0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5557f8527780 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8527680 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5557f8527660 <col:26> 'int' 1
| `-EnumConstantDecl 0x5557f8527730 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5557f8527798 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f8527710 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5557f85276f0 <col:44> 'int' 2
|-CXXMethodDecl 0x5557f85278e0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5557f85277c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5557f8527848 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5557f8527a38 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5557f85279a8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5557f8527c78 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5557f8527af8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5557f8527b70 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5557f8527d28 <col:20>
| `-OptimizeNoneAttr 0x5557f8527d80 <col:30>
|-CXXMethodDecl 0x5557f8527e88 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5557f8527dc0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5557f8527f30 <col:20>
| `-OptimizeNoneAttr 0x5557f8527f88 <col:30>
|-CXXMethodDecl 0x5557f8527fd8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5557f85280a0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5557f85281b8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5557f8528280 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5557f8528308 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5557f8528390 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5557f8528418 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5557f85284a8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5557f8528568 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5557f85285f0 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x5557f8528678 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5557f8528700 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5557f8528788 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5557f8528810 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5557f85288a0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5557f8528960 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5557f85289f0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5557f8528b40 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5557f8528aa8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5557f8528cd0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5557f8528c00 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5557f8528f70 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5557f8528d88 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5557f8528e08 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5557f8528e88 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5557f8529028 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5557f8529130 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557f85293c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8529110 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5557f85290f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5557f85291c0 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557f85293d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f85291a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5557f8529180 <col:32> 'int' 20
| |-EnumConstantDecl 0x5557f8529250 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557f85293f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8529230 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5557f8529210 <col:38> 'int' 90
| |-EnumConstantDecl 0x5557f85292e0 <line:83:9, col:35> col:9 referenced CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557f8529408 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f85292c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5557f85292a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5557f8529370 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5557f8529420 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f8529350 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5557f8529330 <col:32> 'int' 2000
|-CXXMethodDecl 0x5557f8529460 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5557f85298a0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5557f8529710 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5557f8529788 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8529970 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5557f8529af0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5557f8529a20 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8529cf8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5557f8529ba8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5557f8529c20 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8529df8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5557f8529e98 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5557f8529f60 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557f8529ff0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5557f852a220 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8529fd0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5557f8529fb0 <col:36> 'int' EnumConstant 0x5557f8529f60 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557f852a040 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557f852a090 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557f852a0e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557f852a130 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557f852a180 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5557f852a1d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5557f852a308 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5557f852a248 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5557f852a3d0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5557f852a490 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5557f852a550 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5557f852a610 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5557f852a728 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5557f852a7f0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5557f852a970 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5557f852a8a0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5557f852aa98 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5557f852ac98 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5557f852ab48 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5557f852abc8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5557f85375f8 <col:54, line:127:5>
|   |-ParenExpr 0x5557f85374a8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5557f8537478 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5557f8537168 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5557f8537140 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5557f8537128 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5557f8537110 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5557f85370e0 <col:31> 'Router *' lvalue ->_router 0x5557f8534fc0
|   |   |         `-CXXThisExpr 0x5557f85370d0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5557f85371c8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f85371a8 <col:48> 'int' 0
|   |   `-CallExpr 0x5557f85373d8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5557f85373c0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f85373a0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f8537418 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8537238 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5557f8537430 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8537258 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5557f8537448 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f8537290 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5557f8537460 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f8537388 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f8537370 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f8537328 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5557f8537540 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5557f85374d8 <col:9> 'Router *' lvalue ->_router 0x5557f8534fc0
|   | | `-CXXThisExpr 0x5557f85374c8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5557f8537528 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5557f8537508 <col:19> 'Router *' lvalue ParmVar 0x5557f852ab48 'r' 'Router *'
|   `-BinaryOperator 0x5557f85375d8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5557f8537570 <col:9> 'int' lvalue ->_eindex 0x5557f8535028
|     | `-CXXThisExpr 0x5557f8537560 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5557f85375c0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5557f85375a0 <col:19> 'int' lvalue ParmVar 0x5557f852abc8 'eindex' 'int'
|-CXXMethodDecl 0x5557f852ae20 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5557f852ad58 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5557f852aef0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5557f852afb8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5557f852b058 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5557f852b2a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5557f852b120 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5557f852b1a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5557f852b358 <col:20>
| `-OptimizeNoneAttr 0x5557f852b3b0 <col:30>
|-CXXMethodDecl 0x5557f852b4b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5557f852b3f0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5557f852b560 <col:20>
| `-OptimizeNoneAttr 0x5557f852b5b8 <col:30>
|-CXXMethodDecl 0x5557f852b688 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5557f852b5f8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5557f852b730 <col:20>
| `-OptimizeNoneAttr 0x5557f852b788 <col:30>
|-CXXMethodDecl 0x5557f852b918 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5557f852b7c0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5557f852b840 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5557f852baa8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5557f852b9e0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5557f852bbf8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5557f852bb68 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5557f852bd48 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5557f852bcb8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5557f852be98 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5557f852be08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5557f852c158 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5557f852bf50 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5557f852bfd0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5557f852c078 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5557f852c290 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5557f852c350 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5557f852c620 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5557f852c4d0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5557f852c548 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5557f852c748 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5557f852c920 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5557f852c800 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5557f852c880 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5557f852cb08 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5557f852c9e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5557f852ca68 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5557f852ce78 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5557f852cbc8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5557f852cc40 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5557f852ccc0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5557f8536be0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5557f8536bc0 <col:106> 'int' 0
| `-ParmVarDecl 0x5557f852cd38 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557f8536c18 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5557f8536bf8 <col:126> 'int' 0
|-CXXMethodDecl 0x5557f852d1f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5557f852cf48 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5557f852cfc0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5557f852d040 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5557f852d0b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557f8536c50 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5557f8536c30 <col:114> 'int' 0
|-CXXMethodDecl 0x5557f852d588 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5557f852d2d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5557f852d348 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5557f852d3c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5557f8536c68 <col:96> 'int' 0
| `-ParmVarDecl 0x5557f852d440 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557f8536ca8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5557f8536c88 <col:116> 'int' 0
|-CXXMethodDecl 0x5557f852d908 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5557f852d658 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5557f852d6d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5557f852d750 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5557f8536ce0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5557f8536cc0 <col:109> 'int' 0
| `-ParmVarDecl 0x5557f852d7c8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557f8536d18 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5557f8536cf8 <col:129> 'int' 0
|-CXXMethodDecl 0x5557f852dc88 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5557f852d9d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5557f852da50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5557f852dad0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5557f852db48 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557f8536d50 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5557f8536d30 <col:117> 'int' 0
|-CXXMethodDecl 0x5557f852e018 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5557f852dd60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f852ddd8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5557f852de58 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5557f8536d68 <col:99> 'int' 0
| `-ParmVarDecl 0x5557f852ded0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557f8536da8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5557f8536d88 <col:119> 'int' 0
|-CXXMethodDecl 0x5557f852e438 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5557f852e0e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5557f852e168 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5557f852e1e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5557f852e260 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5557f8536de0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5557f8536dc0 <col:108> 'int' 0
| `-ParmVarDecl 0x5557f852e2e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5557f8536e18 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5557f8536df8 <col:141> 'int' 0
|-CXXMethodDecl 0x5557f852e858 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5557f852e510 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5557f852e590 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5557f852e608 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5557f852e688 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5557f852e708 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5557f8536e30 <col:121> 'int' 0
|-CXXMethodDecl 0x5557f852ec88 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5557f852e938 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5557f852e9b8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5557f852ea30 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5557f852eab0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5557f8536e50 <col:98> 'int' 0
| `-ParmVarDecl 0x5557f852eb30 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5557f8536e70 <col:123> 'int' 0
|-CXXMethodDecl 0x5557f852ef50 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5557f852ed60 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5557f852ede0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5557f852ee60 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5557f8536e90 <col:80> 'int' 0
|-EnumDecl 0x5557f852f008 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5557f852f110 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5557f852f3a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f852f0f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5557f852f0d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5557f852f1a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5557f852f3b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f852f180 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5557f852f160 <col:40> 'int' 2
| |-EnumConstantDecl 0x5557f852f230 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5557f852f3d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f852f210 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5557f852f1f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5557f852f2c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5557f852f3e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f852f2a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5557f852f280 <col:36> 'int' 7
| `-EnumConstantDecl 0x5557f852f350 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5557f852f400 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f852f330 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5557f852f310 <col:34> 'int' 6
|-CXXMethodDecl 0x5557f852f6b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5557f852f428 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5557f852f4c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5557f852f548 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5557f852f5c0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5557f8536f48 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5557f8536f30 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5557f8536f18 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5557f8536ef8 <col:98, col:105> 'String' (CXXTemporary 0x5557f8536ef8)
|           `-CXXTemporaryObjectExpr 0x5557f8536ec0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5557f852f958 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5557f852f788 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5557f852f800 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5557f852f878 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5557f8536ff8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5557f8536fe0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5557f8536fc8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5557f8536fa8 <col:94, col:101> 'String' (CXXTemporary 0x5557f8536fa8)
| |         `-CXXTemporaryObjectExpr 0x5557f8536f70 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5557f85377e0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5557f8537758 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5557f8537728 <col:9> '<bound member function type>' ->add_task_handlers 0x5557f852f6b8
|     | `-CXXThisExpr 0x5557f8537718 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5557f8537798 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5557f8537698 <col:27> 'Task *' lvalue ParmVar 0x5557f852f788 'task' 'Task *'
|     |-ImplicitCastExpr 0x5557f85377b0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5557f85376b8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5557f852f800 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5557f85377c8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5557f85376d8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5557f852f350 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5557f85376f8 <col:62> 'const String' lvalue ParmVar 0x5557f852f878 'prefix' 'const String &'
|-CXXMethodDecl 0x5557f852fb68 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5557f852fa20 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5557f852fa98 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5557f85370a8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5557f8537090 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5557f8537078 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5557f8537058 <col:70, col:77> 'String' (CXXTemporary 0x5557f8537058)
| |         `-CXXTemporaryObjectExpr 0x5557f8537020 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5557f85379b8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5557f8537930 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5557f8537900 <col:9> '<bound member function type>' ->add_task_handlers 0x5557f852f6b8
|     | `-CXXThisExpr 0x5557f85378f0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5557f8537970 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5557f8537870 <col:27> 'Task *' lvalue ParmVar 0x5557f852fa20 'task' 'Task *'
|     |-ImplicitCastExpr 0x5557f8537988 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5557f8537890 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5557f85379a0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5557f85378b0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5557f852f350 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5557f85378d0 <col:57> 'const String' lvalue ParmVar 0x5557f852fa98 'prefix' 'const String &'
|-CXXMethodDecl 0x5557f852fe48 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5557f852fc30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f852fcb0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f852fd28 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5557f85300f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5557f852ff18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f852ff98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f8530018 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5557f8530438 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5557f85301c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f85302a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f8530318 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5557f85306e8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5557f8530508 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f8530588 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f8530608 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5557f8530998 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5557f85307b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f8530838 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f85308b8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5557f8530c48 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5557f8530a68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f8530ae8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f8530b60 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5557f8530ef8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5557f8530d18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f8530d98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f8530e18 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5557f85311a8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5557f8530fc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f8531048 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f85310c8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5557f8531488 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5557f8531278 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f85312f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f85313a0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5557f8531768 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5557f8531558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f85315d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f8531680 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5557f85319d0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5557f8531838 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5557f85318b8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5557f8531930 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5557f8531c78 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5557f8531aa0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5557f8531b20 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5557f8531b98 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5557f8531f28 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5557f8531d48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f8531dc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f8531e48 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5557f85321d8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5557f8531ff8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f8532078 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f85320f0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5557f8532488 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5557f85322a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f8532328 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f85323a0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5557f8532758 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5557f8532558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f85325d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557f8532678 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5557f8532a88 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5557f8532828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557f85328a8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5557f8532920 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5557f8532998 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f85370c0 <col:93> 'bool' false
|-CXXMethodDecl 0x5557f8532c70 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5557f8532b58 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5557f8532bd8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5557f8532e48 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5557f8532d30 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5557f8532db0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5557f8533128 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5557f8532f08 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5557f8532f80 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5557f8533000 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5557f8533078 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8533418 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5557f85331f8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5557f8533270 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5557f85332f0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5557f8533368 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8533650 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5557f85334f0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5557f8533570 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5557f8533838 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5557f8533718 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5557f8533798 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5557f85338e8 prev 0x5557f852b058 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5557f85339e0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5557f8533a70 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5557f8533ae8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5557f8533ba8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5557f8533c70 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5557f8533de8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5557f8533d20 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5557f8533e90 <col:24>
| | `-OptimizeNoneAttr 0x5557f8533ee8 <col:34>
| |-CXXMethodDecl 0x5557f8533f30 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5557f85341e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5557f8533fe0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5557f8534058 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5557f85340d8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5557f85342b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5557f85342e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5557f8534350 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5557f85343d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5557f85346f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5557f8534490 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5557f8534508 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5557f8534580 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5557f8534600 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5557f8534810 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5557f84a2e98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5557f84a2e98
| | `-ParmVarDecl 0x5557f84a2fa8 <col:11> col:11 'const Element::Port &'
| `-CXXConstructorDecl 0x5557f84a3048 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5557f84a3048
|   `-ParmVarDecl 0x5557f84a3158 <col:11> col:11 'Element::Port &&'
|-CXXMethodDecl 0x5557f8534888 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5557f8534928 <col:38> "" ""
|-CXXMethodDecl 0x5557f85349b8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5557f8534a58 <col:44> "" ""
|-AccessSpecDecl 0x5557f8534ac8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5557f8534af0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5557f8534bf0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5557f8534c40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f8534bd0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5557f8534bb0 <col:27> 'int' 4
|-FieldDecl 0x5557f8534cf8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5557f8534ea8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5557f8534f60 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5557f8534fc0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5557f8535028 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5557f8535178 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5557f85350b8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5557f8535328 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5557f8535238 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5557f8535508 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5557f85353e8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5557f8535468 <col:25> col:28 'int'
|-CXXMethodDecl 0x5557f85357b0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5557f85355d0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5557f8535650 <col:28> col:31 'int'
| `-ParmVarDecl 0x5557f85356c8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5557f8535868 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5557f8535930 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5557f8535980 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5557f85359d0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5557f8535bb0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5557f8535a60 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5557f8535ad8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8535e58 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5557f8535c78 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5557f8535cf8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5557f8535d70 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8536078 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5557f8535f28 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5557f8535fa8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5557f85363b0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5557f8536138 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5557f85361b8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5557f8536230 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5557f85362b0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5557f8536598 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5557f8536480 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5557f8536500 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5557f85366e8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5557f8536658 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5557f8536a68 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5557f85367a8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5557f8536828 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5557f85368a0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5557f8536920 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5557f8536b80 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashContainer_adapter<class IPRewriterEntry> (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
         0 |   class IPRewriterEntry ** buckets
         8 |   uint32_t nbuckets
        12 |   uint32_t first_bucket
        16 |   size_t size
        24 |   struct libdivide_u32_t bucket_divider
        24 |     uint32_t magic
        28 |     uint8_t more
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _rep
         0 |     class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
         0 |     class IPRewriterEntry ** buckets
         8 |     uint32_t nbuckets
        12 |     uint32_t first_bucket
        16 |     size_t size
        24 |     struct libdivide_u32_t bucket_divider
        24 |       uint32_t magic
        28 |       uint8_t more
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<56> >
         0 |   vector_memory<class sized_array_memory<56> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPRewriterInput>
         0 |   class vector_memory<class sized_array_memory<56> > vm_
         0 |     vector_memory<class sized_array_memory<56> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPRewriterBase
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _map
       112 |     class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _rep
       112 |       class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
       112 |       class IPRewriterEntry ** buckets
       120 |       uint32_t nbuckets
       124 |       uint32_t first_bucket
       128 |       size_t size
       136 |       struct libdivide_u32_t bucket_divider
       136 |         uint32_t magic
       140 |         uint8_t more
       144 |   class Vector<class IPRewriterInput> _input_specs
       144 |     class vector_memory<class sized_array_memory<56> > vm_
       144 |       vector_memory<class sized_array_memory<56> >::type * l_
       152 |       vector_memory::size_type n_
       156 |       vector_memory::size_type capacity_
       160 |   class IPRewriterHeap * _heap
       168 |   uint32_t [2] _timeouts
       176 |   uint32_t _gc_interval_sec
       184 |   class Timer _gc_timer
       184 |     int _schedpos1
       192 |     class Timestamp _expiry_s
       192 |       union Timestamp::rep_t _t
       192 |         int64_t x
       200 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       200 |       TimerCallback callback
       208 |     void * _thunk
       216 |     class Element * _owner
       224 |     class RouterThread * _thread
           | [sizeof=232, dsize=232, align=8,
           |  nvsize=232, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f85d0a18 <../dummy_inc/click/hashcontainer.hh:13:1, col:29> line:33:7 class HashContainer_adapter definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'IPRewriterEntry'
|-CXXRecordDecl 0x5557f8604018 prev 0x5557f85d0a18 <col:1, col:7> col:7 implicit class HashContainer_adapter
|-AccessSpecDecl 0x5557f86040a8 <col:31, col:37> col:31 public
|-TypedefDecl 0x5557f86041a0 <line:34:5, col:34> col:34 referenced key_type 'typename IPRewriterEntry::key_type':'IPFlowID'
| `-ElaboratedType 0x5557f8604150 'typename IPRewriterEntry::key_type' sugar
|   `-TypedefType 0x5557f8604130 'IPRewriterEntry::key_type' sugar
|     |-Typedef 0x5557f85d2560 'key_type'
|     `-RecordType 0x5557f85c7100 'IPFlowID'
|       `-CXXRecord 0x5557f85c7070 'IPFlowID'
|-TypedefDecl 0x5557f8604270 <line:35:5, col:45> col:45 key_const_reference 'typename IPRewriterEntry::key_const_reference':'const IPFlowID &'
| `-ElaboratedType 0x5557f8604220 'typename IPRewriterEntry::key_const_reference' sugar
|   `-TypedefType 0x5557f85d2fa0 'IPRewriterEntry::key_const_reference' sugar
|     |-Typedef 0x5557f85d25c8 'key_const_reference'
|     `-LValueReferenceType 0x5557f85c9590 'const IPFlowID &'
|       `-QualType 0x5557f85c7101 'const IPFlowID' const
|         `-RecordType 0x5557f85c7100 'IPFlowID'
|           `-CXXRecord 0x5557f85c7070 'IPFlowID'
|-CXXMethodDecl 0x5557f8604460 <line:36:5, line:38:5> line:36:16 hashnext 'IPRewriterEntry *&(IPRewriterEntry *)' static
| `-ParmVarDecl 0x5557f8604368 <col:25, col:28> col:28 e 'IPRewriterEntry *'
|-CXXMethodDecl 0x5557f8604668 <line:39:5, line:41:5> line:39:32 hashkey 'HashContainer_adapter<IPRewriterEntry>::key_const_reference (const IPRewriterEntry *)' static
| `-ParmVarDecl 0x5557f8604578 <col:40, col:49> col:49 e 'const IPRewriterEntry *'
|-CXXMethodDecl 0x5557f86048c8 <line:42:5, line:44:5> line:42:17 hashkeyeq 'bool (const HashContainer_adapter<IPRewriterEntry>::key_type &, const HashContainer_adapter<IPRewriterEntry>::key_type &)' static
| |-ParmVarDecl 0x5557f8604778 <col:27, col:43> col:43 a 'const HashContainer_adapter<IPRewriterEntry>::key_type &'
| `-ParmVarDecl 0x5557f86047f0 <col:46, col:62> col:62 b 'const HashContainer_adapter<IPRewriterEntry>::key_type &'
|-CXXConstructorDecl 0x5557f8608948 <line:33:7> col:7 implicit constexpr HashContainer_adapter 'void (const HashContainer_adapter<IPRewriterEntry> &)' inline default trivial noexcept-unevaluated 0x5557f8608948
| `-ParmVarDecl 0x5557f8608a58 <col:7> col:7 'const HashContainer_adapter<IPRewriterEntry> &'
|-CXXConstructorDecl 0x5557f8608af8 <col:7> col:7 implicit constexpr HashContainer_adapter 'void (HashContainer_adapter<IPRewriterEntry> &&)' inline default trivial noexcept-unevaluated 0x5557f8608af8
| `-ParmVarDecl 0x5557f8608c08 <col:7> col:7 'HashContainer_adapter<IPRewriterEntry> &&'
|-CXXDestructorDecl 0x5557f8608e18 <col:7> col:7 implicit ~HashContainer_adapter 'void ()' inline default trivial noexcept-unevaluated 0x5557f8608e18
|-CXXMethodDecl 0x5557f8608f58 <col:7> col:7 implicit constexpr operator= 'HashContainer_adapter<IPRewriterEntry> &(const HashContainer_adapter<IPRewriterEntry> &)' inline default trivial noexcept-unevaluated 0x5557f8608f58
| `-ParmVarDecl 0x5557f8609068 <col:7> col:7 'const HashContainer_adapter<IPRewriterEntry> &'
`-CXXMethodDecl 0x5557f86090d8 <col:7> col:7 implicit constexpr operator= 'HashContainer_adapter<IPRewriterEntry> &(HashContainer_adapter<IPRewriterEntry> &&)' inline default trivial noexcept-unevaluated 0x5557f86090d8
  `-ParmVarDecl 0x5557f86091e8 <col:7> col:7 'HashContainer_adapter<IPRewriterEntry> &&'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_adapter = type { i8 }
  NonVirtualBaseLLVMType:%class.HashContainer_adapter = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f855cb58 <../dummy_inc/click/libdivide.h:95:1, line:98:1> line:95:8 referenced struct libdivide_u32_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f855cc78 <col:1, col:8> col:8 implicit struct libdivide_u32_t
|-FieldDecl 0x5557f855cd18 <line:96:5, col:14> col:14 referenced magic 'uint32_t':'unsigned int'
|-FieldDecl 0x5557f855cd78 <line:97:5, col:13> col:13 referenced more 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x5557f855fe60 <line:95:8> col:8 implicit used libdivide_u32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557f8560298 <col:8>
|-CXXConstructorDecl 0x5557f855ff68 <col:8> col:8 implicit constexpr libdivide_u32_t 'void (const libdivide_u32_t &)' inline default trivial noexcept-unevaluated 0x5557f855ff68
| `-ParmVarDecl 0x5557f8560078 <col:8> col:8 'const libdivide_u32_t &'
|-CXXConstructorDecl 0x5557f8560118 <col:8> col:8 implicit used constexpr libdivide_u32_t 'void (libdivide_u32_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f8560228 <col:8> col:8 used 'libdivide_u32_t &&'
| |-CXXCtorInitializer Field 0x5557f855cd18 'magic' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f8562140 <col:8> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5557f8562110 <col:8> 'uint32_t':'unsigned int' xvalue .magic 0x5557f855cd18
| |     `-CXXStaticCastExpr 0x5557f85620e0 <col:8> 'libdivide_u32_t' xvalue static_cast<struct libdivide_u32_t &&> <NoOp>
| |       `-DeclRefExpr 0x5557f85620b0 <col:8> 'libdivide_u32_t' lvalue ParmVar 0x5557f8560228 '' 'libdivide_u32_t &&'
| |-CXXCtorInitializer Field 0x5557f855cd78 'more' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x5557f8562210 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x5557f85621e0 <col:8> 'uint8_t':'unsigned char' xvalue .more 0x5557f855cd78
| |     `-CXXStaticCastExpr 0x5557f85621b0 <col:8> 'libdivide_u32_t' xvalue static_cast<struct libdivide_u32_t &&> <NoOp>
| |       `-DeclRefExpr 0x5557f8562180 <col:8> 'libdivide_u32_t' lvalue ParmVar 0x5557f8560228 '' 'libdivide_u32_t &&'
| `-CompoundStmt 0x5557f8562260 <col:8>
|-CXXDestructorDecl 0x5557f85625d8 <col:8> col:8 implicit referenced ~libdivide_u32_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5557f8609288 <col:8> col:8 implicit constexpr operator= 'libdivide_u32_t &(const libdivide_u32_t &)' inline default trivial noexcept-unevaluated 0x5557f8609288
| `-ParmVarDecl 0x5557f8609398 <col:8> col:8 'const libdivide_u32_t &'
`-CXXMethodDecl 0x5557f8609408 <col:8> col:8 implicit constexpr operator= 'libdivide_u32_t &(libdivide_u32_t &&)' inline default trivial noexcept-unevaluated 0x5557f8609408
  `-ParmVarDecl 0x5557f8609518 <col:8> col:8 'libdivide_u32_t &&'

Layout: <CGRecordLayout
  LLVMType:%struct.libdivide_u32_t = type { i32, i8 }
  NonVirtualBaseLLVMType:%struct.libdivide_u32_t = type { i32, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f8607f60 <../dummy_inc/click/hashcontainer.hh:19:1, line:29:1> line:20:7 class HashContainer_rep definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal has_mutable_fields
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-public 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x5557f86081f8 prev 0x5557f8607f60 <col:1, col:7> col:7 implicit class HashContainer_rep
|-FieldDecl 0x5557f8608360 <line:21:5, col:9> col:9 buckets 'IPRewriterEntry **'
|-FieldDecl 0x5557f86083b0 <line:22:5, col:14> col:14 nbuckets 'uint32_t':'unsigned int'
|-FieldDecl 0x5557f8608400 <line:23:5, col:22> col:22 first_bucket 'uint32_t':'unsigned int' mutable
|-FieldDecl 0x5557f8608450 <line:24:5, col:12> col:12 size 'size_t':'unsigned long'
|-FieldDecl 0x5557f86084a0 <line:25:5, col:21> col:21 bucket_divider 'libdivide_u32_t'
|-FriendDecl 0x5557f86085f8 <line:26:5, col:36> col:12 'class HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FriendDecl 0x5557f8608748 <line:27:5, col:51> col:12 'class HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FriendDecl 0x5557f8608898 <line:28:5, col:45> col:12 'class HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXConstructorDecl 0x5557f8608c90 <line:20:7> col:7 implicit constexpr HashContainer_rep 'void (const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x5557f8608c90
| `-ParmVarDecl 0x5557f8608da8 <col:7> col:7 'const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
`-CXXMethodDecl 0x5557f860ab20 <col:7> col:7 implicit constexpr operator= 'HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x5557f860ab20
  `-ParmVarDecl 0x5557f860ac28 <col:7> col:7 'const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_rep = type { %class.IPRewriterEntry**, i32, i32, i64, %struct.libdivide_u32_t }
  NonVirtualBaseLLVMType:%class.HashContainer_rep = type { %class.IPRewriterEntry**, i32, i32, i64, %struct.libdivide_u32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f85d0b90 <../dummy_inc/click/hashcontainer.hh:81:1, line:297:1> line:82:7 class HashContainer definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x5557f8603e98 prev 0x5557f85d0b90 <col:1, col:7> col:7 implicit class HashContainer
|-AccessSpecDecl 0x5557f8603f28 <col:23, col:29> col:23 public
|-TypedefDecl 0x5557f86049f0 <line:85:5, col:34> col:34 key_type 'typename HashContainer_adapter<IPRewriterEntry>::key_type':'IPFlowID'
| `-ElaboratedType 0x5557f86049a0 'typename HashContainer_adapter<IPRewriterEntry>::key_type' sugar
|   `-TypedefType 0x5557f8604720 'HashContainer_adapter<IPRewriterEntry>::key_type' sugar
|     |-Typedef 0x5557f86041a0 'key_type'
|     `-ElaboratedType 0x5557f8604150 'typename IPRewriterEntry::key_type' sugar
|       `-TypedefType 0x5557f8604130 'IPRewriterEntry::key_type' sugar
|         |-Typedef 0x5557f85d2560 'key_type'
|         `-RecordType 0x5557f85c7100 'IPFlowID'
|           `-CXXRecord 0x5557f85c7070 'IPFlowID'
|-TypedefDecl 0x5557f8604a88 <line:90:5, col:15> col:15 value_type 'IPRewriterEntry':'IPRewriterEntry'
| `-SubstTemplateTypeParmType 0x5557f8604a50 'IPRewriterEntry' sugar
|   |-TemplateTypeParmType 0x5557f856a6c0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5557f856a668 'T'
|   `-RecordType 0x5557f85cf000 'IPRewriterEntry'
|     `-CXXRecord 0x5557f85d23a0 'IPRewriterEntry'
|-TypedefDecl 0x5557f8604ae0 <line:93:5, col:20> col:20 referenced size_type 'size_t':'unsigned long'
| `-TypedefType 0x5557f805f6d0 'size_t' sugar
|   |-Typedef 0x5557f8026b20 'size_t'
|   `-BuiltinType 0x5557f7fb6430 'unsigned long'
|-TypedefDecl 0x5557f8604b38 <line:96:5, col:22> col:22 referenced bucket_count_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5557f810f9e0 'uint32_t' sugar
|   |-Typedef 0x5557f801f408 'uint32_t'
|   `-TypedefType 0x5557f7ff8440 '__uint32_t' sugar
|     |-Typedef 0x5557f7ff8038 '__uint32_t'
|     `-BuiltinType 0x5557f7fb6410 'unsigned int'
|-EnumDecl 0x5557f8604b90 <line:98:5> col:5
| |-EnumConstantDecl 0x5557f8604cc0 <line:102:2, col:42> col:2 max_bucket_count 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::(anonymous enum at ../dummy_inc/click/hashcontainer.hh:98:5)'
| | `-ConstantExpr 0x5557f8604ca0 <col:21, col:42> 'HashContainer::bucket_count_type':'unsigned int' Int: 4294967295
| |   `-CStyleCastExpr 0x5557f8604c78 <col:21, col:42> 'HashContainer::bucket_count_type':'unsigned int' <NoOp>
| |     `-ImplicitCastExpr 0x5557f8604c60 <col:41, col:42> 'HashContainer::bucket_count_type':'unsigned int' <IntegralCast> part_of_explicit_cast
| |       `-UnaryOperator 0x5557f856ad10 <col:41, col:42> 'int' prefix '-'
| |         `-IntegerLiteral 0x5557f856acf0 <col:42> 'int' 1
| `-EnumConstantDecl 0x5557f8604d30 <line:104:2, col:25> col:2 initial_bucket_count 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::(anonymous enum at ../dummy_inc/click/hashcontainer.hh:98:5)'
|   `-ImplicitCastExpr 0x5557f8604d80 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f8604d10 <col:25> 'int' Int: 63
|       `-IntegerLiteral 0x5557f856adc8 <col:25> 'int' 63
|-CXXConstructorDecl 0x5557f8604dd0 <line:108:5, col:19> col:5 HashContainer 'void ()'
|-CXXConstructorDecl 0x5557f8604f38 <line:111:5, col:47> col:14 HashContainer 'void (HashContainer::bucket_count_type)'
| `-ParmVarDecl 0x5557f8604e88 <col:28, col:46> col:46 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXDestructorDecl 0x5557f8605020 <line:114:5, col:20> col:5 ~HashContainer 'void ()' noexcept-unevaluated 0x5557f8605020
|-CXXMethodDecl 0x5557f8605110 <line:118:5, line:120:5> line:118:22 size 'HashContainer::size_type () const' inline
|-CXXMethodDecl 0x5557f86051c0 <line:123:5, line:125:5> line:123:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5557f8605270 <line:128:5, line:130:5> line:128:30 bucket_count 'HashContainer::bucket_count_type () const' inline
|-CXXMethodDecl 0x5557f8605408 <line:133:5, line:139:5> line:133:22 bucket_size 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type (HashContainer::bucket_count_type) const' inline
| `-ParmVarDecl 0x5557f8605340 <col:34, col:52> col:52 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x5557f8605628 <line:142:5, col:51> col:23 bucket 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const'
| `-ParmVarDecl 0x5557f8605538 <col:30, col:46> col:46 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x5557f86056e0 <line:145:5, line:147:5> line:145:17 unbalanced 'bool () const' inline
|-TypedefDecl 0x5557f8605970 <line:149:5, col:48> col:48 const_iterator 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x5557f86058d0 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' sugar HashContainer_const_iterator
|   |-TemplateArgument type 'IPRewriterEntry':'IPRewriterEntry'
|   |-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|   `-RecordType 0x5557f86058b0 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x5557f86057b0 'HashContainer_const_iterator'
|-TypedefDecl 0x5557f8605ba0 <line:150:5, col:42> col:42 referenced iterator 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x5557f8605b00 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' sugar HashContainer_iterator
|   |-TemplateArgument type 'IPRewriterEntry':'IPRewriterEntry'
|   |-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|   `-RecordType 0x5557f8605ae0 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x5557f86059e8 'HashContainer_iterator'
|-CXXMethodDecl 0x5557f8605c98 <line:155:5, col:27> col:21 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator ()' inline
|-CXXMethodDecl 0x5557f8605de8 <line:157:5, col:35> col:27 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator () const' inline
|-CXXMethodDecl 0x5557f8605eb8 <line:161:5, col:25> col:21 end 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator ()' inline
|-CXXMethodDecl 0x5557f8605f88 <line:163:5, col:33> col:27 end 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator () const' inline
|-CXXMethodDecl 0x5557f8606128 <line:166:5, col:46> col:21 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator (HashContainer::bucket_count_type)' inline
| `-ParmVarDecl 0x5557f8606038 <col:27, col:45> col:45 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x5557f86062d8 <line:168:5, col:54> col:27 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator (HashContainer::bucket_count_type) const' inline
| `-ParmVarDecl 0x5557f86061e0 <col:33, col:51> col:51 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x5557f8606498 <line:171:5, col:47> col:17 contains 'bool (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const' inline
| `-ParmVarDecl 0x5557f86063a0 <col:26, col:42> col:42 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x5557f8606658 <line:173:5, col:49> col:22 count 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const' inline
| `-ParmVarDecl 0x5557f8606560 <col:28, col:44> col:44 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x5557f8606818 <line:183:5, col:45> col:21 used find 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &)' inline
| `-ParmVarDecl 0x5557f8606720 <col:26, col:42> col:42 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x5557f86069d8 <line:185:5, col:53> col:27 find 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const' inline
| `-ParmVarDecl 0x5557f86068e0 <col:32, col:48> col:48 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x5557f8606b30 <line:191:5, col:52> col:21 find_prefer 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &)' inline
| `-ParmVarDecl 0x5557f8606aa0 <col:33, col:49> col:49 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x5557f8606d18 <line:197:5, col:68> col:43 get 'IPRewriterEntry *(const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const'
| |-ParmVarDecl 0x5557f8606c28 <col:47, col:63> col:63 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
| |-NoInlineAttr 0x5557f8606dd0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f8606e28 <col:30> Inherited
|-CXXMethodDecl 0x5557f8607048 <line:219:5, col:51> col:17 insert_at 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &, IPRewriterEntry *)' inline
| |-ParmVarDecl 0x5557f8606eb8 <col:27, col:37> col:37 it 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &'
| `-ParmVarDecl 0x5557f8606f30 <col:41, col:44> col:44 element 'IPRewriterEntry *'
|-CXXMethodDecl 0x5557f8607318 <line:239:5, col:58> col:8 set 'IPRewriterEntry *(HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &, IPRewriterEntry *, bool)'
| |-ParmVarDecl 0x5557f8607118 <col:12, col:22> col:22 it 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &'
| |-ParmVarDecl 0x5557f8607190 <col:26, col:29> col:29 element 'IPRewriterEntry *'
| `-ParmVarDecl 0x5557f86071f8 <col:38, col:53> col:43 balance 'bool'
|-CXXMethodDecl 0x5557f86074e8 <line:249:5, col:57> col:43 set 'IPRewriterEntry *(IPRewriterEntry *)'
| |-ParmVarDecl 0x5557f86073f0 <col:47, col:50> col:50 element 'IPRewriterEntry *'
| |-NoInlineAttr 0x5557f86075a0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f86075f8 <col:30> Inherited
|-CXXMethodDecl 0x5557f8607728 <line:256:5, col:33> col:15 used erase 'IPRewriterEntry *(HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &)' inline
| `-ParmVarDecl 0x5557f8607630 <col:21, col:31> col:31 it 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &'
|-CXXMethodDecl 0x5557f86078e8 <line:262:5, col:40> col:15 erase 'IPRewriterEntry *(const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &)' inline
| `-ParmVarDecl 0x5557f86077f0 <col:21, col:37> col:37 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x5557f86079a0 <line:266:5, col:16> col:10 clear 'void ()'
|-CXXMethodDecl 0x5557f8607c68 <line:269:5, col:44> col:17 swap 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline
| `-ParmVarDecl 0x5557f8607b78 <col:22, col:43> col:43 x 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXMethodDecl 0x5557f8607db0 <line:277:5, col:36> col:10 rehash 'void (HashContainer::bucket_count_type)'
| `-ParmVarDecl 0x5557f8607d20 <col:17, col:35> col:35 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x5557f8607e68 <line:282:5, line:285:5> line:282:17 balance 'void ()' inline
|-AccessSpecDecl 0x5557f8607f18 <line:287:3, col:10> col:3 private
|-FieldDecl 0x5557f860acb0 <line:289:5, col:29> col:29 _rep 'HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXConstructorDecl 0x5557f860af08 <line:291:5, col:46> col:5 HashContainer 'void (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)'
| `-ParmVarDecl 0x5557f860adf8 <col:19, col:45> col:46 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXMethodDecl 0x5557f860b2a8 <line:292:5, col:63> col:26 operator= 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)'
| `-ParmVarDecl 0x5557f860b178 <col:36, col:62> col:63 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-FriendDecl 0x5557f860b468 <line:294:5, col:45> col:12 'class HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
`-FriendDecl 0x5557f860b5b8 <line:295:5, col:51> col:12 'class HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer = type { %class.HashContainer_rep }
  NonVirtualBaseLLVMType:%class.HashContainer = type { %class.HashContainer_rep }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f860cbf0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<56>'
|-CXXRecordDecl 0x5557f860cdc8 prev 0x5557f860cbf0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5557f860ce58 <col:46, col:52> col:46 public
|-TypedefDecl 0x5557f860ce80 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f860ea50 <line:13:5, col:31> col:31 type 'typename sized_array_memory<56>::type':'char_array<56>'
| `-ElaboratedType 0x5557f860ea00 'typename sized_array_memory<56>::type' sugar
|   `-TypedefType 0x5557f860d330 'sized_array_memory<56>::type' sugar
|     |-Typedef 0x5557f860d230 'type'
|     `-TemplateSpecializationType 0x5557f860d1c0 'char_array<56UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5557f860d0a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 56
|       |   `-SubstNonTypeTemplateParmExpr 0x5557f860d080 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5557f860d060 <col:24> 'unsigned long' 56
|       `-RecordType 0x5557f860d1a0 'char_array<56>'
|         `-ClassTemplateSpecialization 0x5557f860d0c0 'char_array'
|-TypedefDecl 0x5557f860eb08 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<56> >::type *'
| `-PointerType 0x5557f860ead0 'vector_memory<sized_array_memory<56> >::type *'
|   `-TypedefType 0x5557f860eab0 'vector_memory<sized_array_memory<56> >::type' sugar
|     |-Typedef 0x5557f860ea50 'type'
|     `-ElaboratedType 0x5557f860ea00 'typename sized_array_memory<56>::type' sugar
|       `-TypedefType 0x5557f860d330 'sized_array_memory<56>::type' sugar
|         |-Typedef 0x5557f860d230 'type'
|         `-TemplateSpecializationType 0x5557f860d1c0 'char_array<56UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5557f860d0a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 56
|           |   `-SubstNonTypeTemplateParmExpr 0x5557f860d080 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5557f860d060 <col:24> 'unsigned long' 56
|           `-RecordType 0x5557f860d1a0 'char_array<56>'
|             `-ClassTemplateSpecialization 0x5557f860d0c0 'char_array'
|-CXXMethodDecl 0x5557f860ec88 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<56> >::type *) const' inline
| `-ParmVarDecl 0x5557f860eb98 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXConstructorDecl 0x5557f860ed78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5557f860ee58 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5557f860ee58
|-CXXMethodDecl 0x5557f860f128 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<56> > &)'
| `-ParmVarDecl 0x5557f860f030 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<56> > &'
|-CXXMethodDecl 0x5557f860f368 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x5557f860f1e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f860f258 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x5557f860f538 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x5557f860f428 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f860f4a0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x5557f860f698 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<56> >::iterator ()'
|-CXXMethodDecl 0x5557f860f768 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<56> >::iterator ()'
|-CXXMethodDecl 0x5557f860f9b8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<56> >::iterator (vector_memory<sized_array_memory<56> >::iterator, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x5557f860f828 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<56> >::iterator':'vector_memory<sized_array_memory<56> >::type *'
| `-ParmVarDecl 0x5557f860f8a0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x5557f860fc18 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<56> >::iterator (vector_memory<sized_array_memory<56> >::iterator, vector_memory<sized_array_memory<56> >::iterator)'
| |-ParmVarDecl 0x5557f860fa88 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<56> >::iterator':'vector_memory<sized_array_memory<56> >::type *'
| `-ParmVarDecl 0x5557f860fb00 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<56> >::iterator':'vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x5557f860fdd8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<56> >::type *)' inline
| `-ParmVarDecl 0x5557f860fce8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x5557f860ff98 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<56> >::type *)' inline
| `-ParmVarDecl 0x5557f860fea0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x5557f8610050 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5557f8610100 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5557f8610338 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x5557f86101b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f8610228 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x5557f86105d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<56> > &)'
| `-ParmVarDecl 0x5557f86104e0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<56> > &'
|-FieldDecl 0x5557f86106a0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<56> >::type *'
|-FieldDecl 0x5557f86106f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5557f8610740 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f860b658 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPRewriterInput'
|-CXXRecordDecl 0x5557f860b868 prev 0x5557f860b658 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5557f860cb60 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPRewriterInput>::type':'sized_array_memory<56>'
| `-ElaboratedType 0x5557f860cb10 'typename array_memory<IPRewriterInput>::type' sugar
|   `-TypedefType 0x5557f860caf0 'conditional<true, sized_array_memory<56>, typed_array_memory<IPRewriterInput> >::type' sugar
|     |-Typedef 0x5557f860c9a0 'type'
|     `-SubstTemplateTypeParmType 0x5557f860c7c0 'sized_array_memory<56>' sugar
|       |-TemplateTypeParmType 0x5557f8297760 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f8297708 'T'
|       `-RecordType 0x5557f860c310 'sized_array_memory<56>'
|         `-ClassTemplateSpecialization 0x5557f860c230 'sized_array_memory'
|-FieldDecl 0x5557f8610790 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPRewriterInput>::array_memory_type>':'vector_memory<sized_array_memory<56> >' mutable
|-AccessSpecDecl 0x5557f86107e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5557f8610818 <line:118:5, col:15> col:15 value_type 'IPRewriterInput':'IPRewriterInput'
| `-SubstTemplateTypeParmType 0x5557f860b900 'IPRewriterInput' sugar
|   |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5557f82ce908 'T'
|   `-RecordType 0x5557f85cf0b0 'IPRewriterInput'
|     `-CXXRecord 0x5557f85ec970 'IPRewriterInput'
|-TypedefDecl 0x5557f86108d8 <line:119:5, col:16> col:16 reference 'IPRewriterInput &'
| `-LValueReferenceType 0x5557f86108a0 'IPRewriterInput &'
|   `-SubstTemplateTypeParmType 0x5557f860b900 'IPRewriterInput' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-RecordType 0x5557f85cf0b0 'IPRewriterInput'
|       `-CXXRecord 0x5557f85ec970 'IPRewriterInput'
|-TypedefDecl 0x5557f8610998 <line:120:5, col:22> col:22 const_reference 'const IPRewriterInput &'
| `-LValueReferenceType 0x5557f8610960 'const IPRewriterInput &'
|   `-QualType 0x5557f860b901 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x5557f860b900 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-RecordType 0x5557f85cf0b0 'IPRewriterInput'
|         `-CXXRecord 0x5557f85ec970 'IPRewriterInput'
|-TypedefDecl 0x5557f8610a28 <line:121:5, col:16> col:16 pointer 'IPRewriterInput *'
| `-PointerType 0x5557f86109f0 'IPRewriterInput *'
|   `-SubstTemplateTypeParmType 0x5557f860b900 'IPRewriterInput' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-RecordType 0x5557f85cf0b0 'IPRewriterInput'
|       `-CXXRecord 0x5557f85ec970 'IPRewriterInput'
|-TypedefDecl 0x5557f8610ae8 <line:122:5, col:22> col:22 const_pointer 'const IPRewriterInput *'
| `-PointerType 0x5557f8610ab0 'const IPRewriterInput *'
|   `-QualType 0x5557f860b901 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x5557f860b900 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-RecordType 0x5557f85cf0b0 'IPRewriterInput'
|         `-CXXRecord 0x5557f85ec970 'IPRewriterInput'
|-TypedefDecl 0x5557f8611740 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPRewriterInput>::type':'const IPRewriterInput &'
| `-ElaboratedType 0x5557f86116f0 'typename fast_argument<IPRewriterInput>::type' sugar
|   `-TypedefType 0x5557f86116d0 'fast_argument<IPRewriterInput, true>::type' sugar
|     |-Typedef 0x5557f8611608 'type'
|     `-LValueReferenceType 0x5557f86115d0 'const IPRewriterInput &'
|       `-QualType 0x5557f8611371 'const IPRewriterInput' const
|         `-SubstTemplateTypeParmType 0x5557f8611370 'IPRewriterInput' sugar
|           |-TemplateTypeParmType 0x5557f82a0270 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5557f82a0218 'T'
|           `-RecordType 0x5557f85cf0b0 'IPRewriterInput'
|             `-CXXRecord 0x5557f85ec970 'IPRewriterInput'
|-TypedefDecl 0x5557f86117a8 <line:126:5, col:22> col:22 const_access_type 'const IPRewriterInput &'
| `-LValueReferenceType 0x5557f8610960 'const IPRewriterInput &'
|   `-QualType 0x5557f860b901 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x5557f860b900 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-RecordType 0x5557f85cf0b0 'IPRewriterInput'
|         `-CXXRecord 0x5557f85ec970 'IPRewriterInput'
|-TypedefDecl 0x5557f8611800 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f8611868 <line:130:5, col:16> col:16 iterator 'IPRewriterInput *'
| `-PointerType 0x5557f86109f0 'IPRewriterInput *'
|   `-SubstTemplateTypeParmType 0x5557f860b900 'IPRewriterInput' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-RecordType 0x5557f85cf0b0 'IPRewriterInput'
|       `-CXXRecord 0x5557f85ec970 'IPRewriterInput'
|-TypedefDecl 0x5557f86118d0 <line:131:5, col:22> col:22 const_iterator 'const IPRewriterInput *'
| `-PointerType 0x5557f8610ab0 'const IPRewriterInput *'
|   `-QualType 0x5557f860b901 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x5557f860b900 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-RecordType 0x5557f85cf0b0 'IPRewriterInput'
|         `-CXXRecord 0x5557f85ec970 'IPRewriterInput'
|-EnumDecl 0x5557f8611928 <line:134:5> col:5
| `-EnumConstantDecl 0x5557f8611a20 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPRewriterInput>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5557f8611a00 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5557f82cfb28 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5557f82cfb00 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5557f82cfae0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5557f8611aa8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5557f8611d38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f8611b60 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f8611c00 <col:41, col:61> col:61 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXConstructorDecl 0x5557f8611ff8 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPRewriterInput> &)' inline
| `-ParmVarDecl 0x5557f8611ee0 <col:19, col:36> col:36 x 'const Vector<IPRewriterInput> &'
|-CXXConstructorDecl 0x5557f86122b8 <line:141:5, col:32> col:12 Vector 'void (Vector<IPRewriterInput> &&)' inline
| `-ParmVarDecl 0x5557f86121a0 <col:19, col:31> col:31 x 'Vector<IPRewriterInput> &&'
|-CXXMethodDecl 0x5557f8612600 <line:144:5, col:51> col:23 operator= 'Vector<IPRewriterInput> &(const Vector<IPRewriterInput> &)' inline
| `-ParmVarDecl 0x5557f86124e0 <col:33, col:50> col:50 x 'const Vector<IPRewriterInput> &'
|-CXXMethodDecl 0x5557f8612910 <line:146:5, col:46> col:23 operator= 'Vector<IPRewriterInput> &(Vector<IPRewriterInput> &&)' inline
| `-ParmVarDecl 0x5557f86127f0 <col:33, col:45> col:45 x 'Vector<IPRewriterInput> &&'
|-CXXMethodDecl 0x5557f8614530 <line:148:5, col:70> col:23 assign 'Vector<IPRewriterInput> &(Vector::size_type, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f8612a48 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f86143f0 <col:43, col:69> col:63 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x5557f8614688 <line:150:5, col:55> col:49 begin 'Vector<IPRewriterInput>::iterator ()'
| |-NoInlineAttr 0x5557f8614768 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f86147c0 <col:30> Inherited
|-CXXMethodDecl 0x5557f8614808 <line:151:5, col:53> col:49 end 'Vector<IPRewriterInput>::iterator ()'
| |-NoInlineAttr 0x5557f86148b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f8614910 <col:30> Inherited
|-CXXMethodDecl 0x5557f86149d8 <line:152:5, col:63> col:55 begin 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x5557f8614a88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f8614ae0 <col:30> Inherited
|-CXXMethodDecl 0x5557f8614b28 <line:153:5, col:61> col:55 end 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x5557f8614bd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f8614c30 <col:30> Inherited
|-CXXMethodDecl 0x5557f8614c78 <line:154:5, col:64> col:55 cbegin 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x5557f8614d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f8614d80 <col:30> Inherited
|-CXXMethodDecl 0x5557f8614dc8 <line:155:5, col:62> col:55 cend 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x5557f8614e78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f8614ed0 <col:30> Inherited
|-CXXMethodDecl 0x5557f8614ef8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5557f8614fa8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5557f8615058 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5557f8615218 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f8615108 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f8615180 <col:37, col:63> col:57 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x5557f8615368 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5557f86152d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f8615518 <line:163:5, col:65> col:43 operator[] 'IPRewriterInput &(Vector::size_type)'
| |-ParmVarDecl 0x5557f8615420 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5557f86155d0 <col:20>
| `-OptimizeNoneAttr 0x5557f8615628 <col:30>
|-CXXMethodDecl 0x5557f8615748 <line:164:5, col:73> col:49 used operator[] 'const IPRewriterInput &(Vector::size_type) const'
| |-ParmVarDecl 0x5557f8615650 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5557f8615800 <col:20>
| `-OptimizeNoneAttr 0x5557f8615858 <col:30>
|-CXXMethodDecl 0x5557f8615910 <line:165:5, col:29> col:15 at 'IPRewriterInput &(Vector::size_type)' inline
| `-ParmVarDecl 0x5557f8615880 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f8615a58 <line:166:5, col:37> col:21 at 'const IPRewriterInput &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5557f86159c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f8615b88 <line:167:5, col:21> col:15 front 'IPRewriterInput &()' inline
|-CXXMethodDecl 0x5557f8615cb8 <line:168:5, col:29> col:21 front 'const IPRewriterInput &() const' inline
|-CXXMethodDecl 0x5557f8615d88 <line:169:5, col:20> col:15 back 'IPRewriterInput &()' inline
|-CXXMethodDecl 0x5557f8615e58 <line:170:5, col:28> col:21 back 'const IPRewriterInput &() const' inline
|-CXXMethodDecl 0x5557f8615f98 <line:172:5, col:39> col:15 unchecked_at 'IPRewriterInput &(Vector::size_type)' inline
| `-ParmVarDecl 0x5557f8615f08 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f86160e0 <line:173:5, col:47> col:21 unchecked_at 'const IPRewriterInput &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5557f8616050 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f8616228 <line:174:5, col:59> col:15 at_u 'IPRewriterInput &(Vector::size_type)' inline
| |-ParmVarDecl 0x5557f8616198 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5557f86162e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5557f86163e0 <line:175:5, col:71> col:21 at_u 'const IPRewriterInput &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5557f8616350 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5557f8616498 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5557f8616558 <line:177:5, col:20> col:15 data 'IPRewriterInput *()' inline
|-CXXMethodDecl 0x5557f8616658 <line:178:5, col:28> col:21 data 'const IPRewriterInput *() const' inline
|-CXXMethodDecl 0x5557f8616808 <line:180:5, col:48> col:17 push_back 'void (Vector<IPRewriterInput>::value_argument_type)' inline
| `-ParmVarDecl 0x5557f8616718 <col:27, col:47> col:47 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-FunctionTemplateDecl 0x5557f8616fc8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5557f86168c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPRewriterInput>':'fast_argument<IPRewriterInput, true>'
| `-CXXMethodDecl 0x5557f8616f28 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPRewriterInput &&)' inline
|   `-ParmVarDecl 0x5557f8616e28 <col:58, col:62> col:62 v 'IPRewriterInput &&'
|-CXXMethodDecl 0x5557f86170a8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5557f86171f8 <line:186:5, col:49> col:17 push_front 'void (Vector<IPRewriterInput>::value_argument_type)' inline
| `-ParmVarDecl 0x5557f8617168 <col:28, col:48> col:48 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x5557f86172b0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5557f86174f8 <line:189:5, col:62> col:21 insert 'Vector<IPRewriterInput>::iterator (Vector<IPRewriterInput>::iterator, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f8617370 <col:28, col:37> col:37 it 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
| `-ParmVarDecl 0x5557f86173e8 <col:41, col:61> col:61 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x5557f86176b8 <line:190:5, col:38> col:21 erase 'Vector<IPRewriterInput>::iterator (Vector<IPRewriterInput>::iterator)' inline
| `-ParmVarDecl 0x5557f86175c8 <col:27, col:36> col:36 it 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
|-CXXMethodDecl 0x5557f8617908 <line:191:5, col:49> col:21 erase 'Vector<IPRewriterInput>::iterator (Vector<IPRewriterInput>::iterator, Vector<IPRewriterInput>::iterator)' inline
| |-ParmVarDecl 0x5557f8617780 <col:27, col:36> col:36 a 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
| `-ParmVarDecl 0x5557f86177f8 <col:39, col:48> col:48 b 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
|-CXXMethodDecl 0x5557f86179c8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5557f8617c28 <line:195:5, col:34> col:17 swap 'void (Vector<IPRewriterInput> &)' inline
| `-ParmVarDecl 0x5557f8617b30 <col:22, col:33> col:33 x 'Vector<IPRewriterInput> &'
`-CXXDestructorDecl 0x5557f8617cf8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5557f8617cf8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPRewriterHeap
         0 |   Vector<class IPRewriterFlow *> [2] _heaps
        32 |   int32_t _capacity
        36 |   uint32_t _use_count
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f85efe30 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x5557f85f0008 prev 0x5557f85efe30 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5557f85f0098 <col:46, col:52> col:46 public
|-TypedefDecl 0x5557f85f00c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f85f1c90 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x5557f85f1c40 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x5557f85f0570 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x5557f85f0470 'type'
|     `-TemplateSpecializationType 0x5557f85f0400 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5557f85f02e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x5557f85f02c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5557f85f02a0 <col:24> 'unsigned long' 8
|       `-RecordType 0x5557f85f03e0 'char_array<8>'
|         `-ClassTemplateSpecialization 0x5557f85f0300 'char_array'
|-TypedefDecl 0x5557f85f1d48 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x5557f85f1d10 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x5557f85f1cf0 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x5557f85f1c90 'type'
|     `-ElaboratedType 0x5557f85f1c40 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x5557f85f0570 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x5557f85f0470 'type'
|         `-TemplateSpecializationType 0x5557f85f0400 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5557f85f02e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x5557f85f02c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5557f85f02a0 <col:24> 'unsigned long' 8
|           `-RecordType 0x5557f85f03e0 'char_array<8>'
|             `-ClassTemplateSpecialization 0x5557f85f0300 'char_array'
|-CXXMethodDecl 0x5557f85f1ec8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x5557f85f1dd8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x5557f85f1fb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5557f85f2098 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5557f85f2368 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5557f85f2270 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x5557f85f25a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5557f85f2420 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f85f2498 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5557f85f2778 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5557f85f2668 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f85f26e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5557f85f28d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5557f85f29a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5557f85f2bf8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5557f85f2a68 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5557f85f2ae0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5557f85f2e58 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x5557f85f2cc8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5557f85f2d40 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5557f85f3018 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5557f85f2f28 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5557f85f31d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5557f85f30e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5557f85f3290 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5557f85f6c60 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5557f85f6e98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5557f85f6d10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f85f6d88 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5557f85f7138 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5557f85f7040 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x5557f85f7200 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x5557f85f7250 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5557f85f72a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f85ee820 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPRewriterFlow *'
|-CXXRecordDecl 0x5557f85eea20 prev 0x5557f85ee820 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5557f85efda0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPRewriterFlow *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5557f85efd50 'typename array_memory<IPRewriterFlow *>::type' sugar
|   `-TypedefType 0x5557f85efd30 'conditional<true, sized_array_memory<8>, typed_array_memory<IPRewriterFlow *> >::type' sugar
|     |-Typedef 0x5557f85efbe0 'type'
|     `-SubstTemplateTypeParmType 0x5557f85efa00 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5557f8297760 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f8297708 'T'
|       `-RecordType 0x5557f85ef550 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5557f85ef468 'sized_array_memory'
|-FieldDecl 0x5557f85f72f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPRewriterFlow *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5557f85f7340 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5557f85f7378 <line:118:5, col:15> col:15 value_type 'IPRewriterFlow *':'IPRewriterFlow *'
| `-SubstTemplateTypeParmType 0x5557f85eeab0 'IPRewriterFlow *' sugar
|   |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5557f82ce908 'T'
|   `-PointerType 0x5557f85d2d60 'IPRewriterFlow *'
|     `-RecordType 0x5557f85cef50 'IPRewriterFlow'
|       `-CXXRecord 0x5557f85d4c50 'IPRewriterFlow'
|-TypedefDecl 0x5557f85f7438 <line:119:5, col:16> col:16 reference 'IPRewriterFlow *&'
| `-LValueReferenceType 0x5557f85f7400 'IPRewriterFlow *&'
|   `-SubstTemplateTypeParmType 0x5557f85eeab0 'IPRewriterFlow *' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-PointerType 0x5557f85d2d60 'IPRewriterFlow *'
|       `-RecordType 0x5557f85cef50 'IPRewriterFlow'
|         `-CXXRecord 0x5557f85d4c50 'IPRewriterFlow'
|-TypedefDecl 0x5557f85f74f8 <line:120:5, col:22> col:22 const_reference 'IPRewriterFlow *const &'
| `-LValueReferenceType 0x5557f85f74c0 'IPRewriterFlow *const &'
|   `-QualType 0x5557f85eeab1 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x5557f85eeab0 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-PointerType 0x5557f85d2d60 'IPRewriterFlow *'
|         `-RecordType 0x5557f85cef50 'IPRewriterFlow'
|           `-CXXRecord 0x5557f85d4c50 'IPRewriterFlow'
|-TypedefDecl 0x5557f85f7588 <line:121:5, col:16> col:16 pointer 'IPRewriterFlow **'
| `-PointerType 0x5557f85f7550 'IPRewriterFlow **'
|   `-SubstTemplateTypeParmType 0x5557f85eeab0 'IPRewriterFlow *' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-PointerType 0x5557f85d2d60 'IPRewriterFlow *'
|       `-RecordType 0x5557f85cef50 'IPRewriterFlow'
|         `-CXXRecord 0x5557f85d4c50 'IPRewriterFlow'
|-TypedefDecl 0x5557f85f7648 <line:122:5, col:22> col:22 const_pointer 'IPRewriterFlow *const *'
| `-PointerType 0x5557f85f7610 'IPRewriterFlow *const *'
|   `-QualType 0x5557f85eeab1 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x5557f85eeab0 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-PointerType 0x5557f85d2d60 'IPRewriterFlow *'
|         `-RecordType 0x5557f85cef50 'IPRewriterFlow'
|           `-CXXRecord 0x5557f85d4c50 'IPRewriterFlow'
|-TypedefDecl 0x5557f85f8430 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPRewriterFlow *>::type':'IPRewriterFlow *'
| `-ElaboratedType 0x5557f85f83e0 'typename fast_argument<IPRewriterFlow *>::type' sugar
|   `-TypedefType 0x5557f85f83c0 'fast_argument<IPRewriterFlow *, false>::type' sugar
|     |-Typedef 0x5557f85f8350 'type'
|     `-SubstTemplateTypeParmType 0x5557f85f8110 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x5557f82a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82a0950 'T'
|       `-PointerType 0x5557f85d2d60 'IPRewriterFlow *'
|         `-RecordType 0x5557f85cef50 'IPRewriterFlow'
|           `-CXXRecord 0x5557f85d4c50 'IPRewriterFlow'
|-TypedefDecl 0x5557f85f8498 <line:126:5, col:22> col:22 const_access_type 'IPRewriterFlow *const &'
| `-LValueReferenceType 0x5557f85f74c0 'IPRewriterFlow *const &'
|   `-QualType 0x5557f85eeab1 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x5557f85eeab0 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-PointerType 0x5557f85d2d60 'IPRewriterFlow *'
|         `-RecordType 0x5557f85cef50 'IPRewriterFlow'
|           `-CXXRecord 0x5557f85d4c50 'IPRewriterFlow'
|-TypedefDecl 0x5557f85f84f0 <line:128:5, col:17> col:17 referenced size_type 'int'
| `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f85f8558 <line:130:5, col:16> col:16 iterator 'IPRewriterFlow **'
| `-PointerType 0x5557f85f7550 'IPRewriterFlow **'
|   `-SubstTemplateTypeParmType 0x5557f85eeab0 'IPRewriterFlow *' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-PointerType 0x5557f85d2d60 'IPRewriterFlow *'
|       `-RecordType 0x5557f85cef50 'IPRewriterFlow'
|         `-CXXRecord 0x5557f85d4c50 'IPRewriterFlow'
|-TypedefDecl 0x5557f85f85c0 <line:131:5, col:22> col:22 const_iterator 'IPRewriterFlow *const *'
| `-PointerType 0x5557f85f7610 'IPRewriterFlow *const *'
|   `-QualType 0x5557f85eeab1 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x5557f85eeab0 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-PointerType 0x5557f85d2d60 'IPRewriterFlow *'
|         `-RecordType 0x5557f85cef50 'IPRewriterFlow'
|           `-CXXRecord 0x5557f85d4c50 'IPRewriterFlow'
|-EnumDecl 0x5557f85f8618 <line:134:5> col:5
| `-EnumConstantDecl 0x5557f85f8710 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPRewriterFlow *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5557f85f86f0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5557f82cfb28 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5557f82cfb00 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5557f82cfae0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5557f85f8798 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5557f85f8a28 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f85f8850 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f85f88f0 <col:41, col:61> col:61 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXConstructorDecl 0x5557f85f8ce8 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPRewriterFlow *> &)' inline
| `-ParmVarDecl 0x5557f85f8bd0 <col:19, col:36> col:36 x 'const Vector<IPRewriterFlow *> &'
|-CXXConstructorDecl 0x5557f85f8fa8 <line:141:5, col:32> col:12 Vector 'void (Vector<IPRewriterFlow *> &&)' inline
| `-ParmVarDecl 0x5557f85f8e90 <col:19, col:31> col:31 x 'Vector<IPRewriterFlow *> &&'
|-CXXMethodDecl 0x5557f85f92f0 <line:144:5, col:51> col:23 operator= 'Vector<IPRewriterFlow *> &(const Vector<IPRewriterFlow *> &)' inline
| `-ParmVarDecl 0x5557f85f91d0 <col:33, col:50> col:50 x 'const Vector<IPRewriterFlow *> &'
|-CXXMethodDecl 0x5557f85f9600 <line:146:5, col:46> col:23 operator= 'Vector<IPRewriterFlow *> &(Vector<IPRewriterFlow *> &&)' inline
| `-ParmVarDecl 0x5557f85f94e0 <col:33, col:45> col:45 x 'Vector<IPRewriterFlow *> &&'
|-CXXMethodDecl 0x5557f85f98f0 <line:148:5, col:70> col:23 assign 'Vector<IPRewriterFlow *> &(Vector::size_type, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f85f9738 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f85f97b0 <col:43, col:69> col:63 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x5557f85f9a48 <line:150:5, col:55> col:49 begin 'Vector<IPRewriterFlow *>::iterator ()'
| |-NoInlineAttr 0x5557f85f9b28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f85f9b80 <col:30> Inherited
|-CXXMethodDecl 0x5557f85f9bc8 <line:151:5, col:53> col:49 end 'Vector<IPRewriterFlow *>::iterator ()'
| |-NoInlineAttr 0x5557f85f9c78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f85f9cd0 <col:30> Inherited
|-CXXMethodDecl 0x5557f85f9d98 <line:152:5, col:63> col:55 begin 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x5557f85f9e48 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f85f9ea0 <col:30> Inherited
|-CXXMethodDecl 0x5557f85f9ee8 <line:153:5, col:61> col:55 end 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x5557f85f9f98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f85f9ff0 <col:30> Inherited
|-CXXMethodDecl 0x5557f85fa038 <line:154:5, col:64> col:55 cbegin 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x5557f85fa0e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f85fa140 <col:30> Inherited
|-CXXMethodDecl 0x5557f85fa188 <line:155:5, col:62> col:55 cend 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x5557f85fa238 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f85fa290 <col:30> Inherited
|-CXXMethodDecl 0x5557f85fa2b8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5557f85fa368 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5557f85fa418 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5557f85fa5d8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f85fa4c8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f85fa540 <col:37, col:63> col:57 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x5557f85fa728 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5557f85fa698 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f85fa8d8 <line:163:5, col:65> col:43 operator[] 'IPRewriterFlow *&(Vector::size_type)'
| |-ParmVarDecl 0x5557f85fa7e0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5557f85fa990 <col:20>
| `-OptimizeNoneAttr 0x5557f85fa9e8 <col:30>
|-CXXMethodDecl 0x5557f85fab08 <line:164:5, col:73> col:49 operator[] 'IPRewriterFlow *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5557f85faa10 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5557f85fabc0 <col:20>
| `-OptimizeNoneAttr 0x5557f85fac18 <col:30>
|-CXXMethodDecl 0x5557f85facd0 <line:165:5, col:29> col:15 at 'IPRewriterFlow *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5557f85fac40 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f85fae18 <line:166:5, col:37> col:21 at 'IPRewriterFlow *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5557f85fad88 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f85faf48 <line:167:5, col:21> col:15 front 'IPRewriterFlow *&()' inline
|-CXXMethodDecl 0x5557f85fb078 <line:168:5, col:29> col:21 front 'IPRewriterFlow *const &() const' inline
|-CXXMethodDecl 0x5557f85fb148 <line:169:5, col:20> col:15 back 'IPRewriterFlow *&()' inline
|-CXXMethodDecl 0x5557f85fb218 <line:170:5, col:28> col:21 back 'IPRewriterFlow *const &() const' inline
|-CXXMethodDecl 0x5557f85fb358 <line:172:5, col:39> col:15 unchecked_at 'IPRewriterFlow *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5557f85fb2c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f85fb4a0 <line:173:5, col:47> col:21 unchecked_at 'IPRewriterFlow *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5557f85fb410 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f85fb5e8 <line:174:5, col:59> col:15 at_u 'IPRewriterFlow *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5557f85fb558 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5557f85fb6a0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5557f85fb7a0 <line:175:5, col:71> col:21 at_u 'IPRewriterFlow *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5557f85fb710 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5557f85fb858 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5557f85fb918 <line:177:5, col:20> col:15 data 'IPRewriterFlow **()' inline
|-CXXMethodDecl 0x5557f85fba18 <line:178:5, col:28> col:21 data 'IPRewriterFlow *const *() const' inline
|-CXXMethodDecl 0x5557f85fbbc8 <line:180:5, col:48> col:17 push_back 'void (Vector<IPRewriterFlow *>::value_argument_type)' inline
| `-ParmVarDecl 0x5557f85fbad8 <col:27, col:47> col:47 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-FunctionTemplateDecl 0x5557f85fc3b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5557f85fbc80 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPRewriterFlow *>':'fast_argument<IPRewriterFlow *, false>'
| `-CXXMethodDecl 0x5557f85fc318 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPRewriterFlow *&&)' inline
|   `-ParmVarDecl 0x5557f85fc218 <col:58, col:62> col:62 v 'IPRewriterFlow *&&'
|-CXXMethodDecl 0x5557f85fc498 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5557f85fc5e8 <line:186:5, col:49> col:17 push_front 'void (Vector<IPRewriterFlow *>::value_argument_type)' inline
| `-ParmVarDecl 0x5557f85fc558 <col:28, col:48> col:48 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x5557f85fc6a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5557f85fc8e8 <line:189:5, col:62> col:21 insert 'Vector<IPRewriterFlow *>::iterator (Vector<IPRewriterFlow *>::iterator, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f85fc760 <col:28, col:37> col:37 it 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
| `-ParmVarDecl 0x5557f85fc7d8 <col:41, col:61> col:61 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x5557f85fcaa8 <line:190:5, col:38> col:21 erase 'Vector<IPRewriterFlow *>::iterator (Vector<IPRewriterFlow *>::iterator)' inline
| `-ParmVarDecl 0x5557f85fc9b8 <col:27, col:36> col:36 it 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
|-CXXMethodDecl 0x5557f85fccf8 <line:191:5, col:49> col:21 erase 'Vector<IPRewriterFlow *>::iterator (Vector<IPRewriterFlow *>::iterator, Vector<IPRewriterFlow *>::iterator)' inline
| |-ParmVarDecl 0x5557f85fcb70 <col:27, col:36> col:36 a 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
| `-ParmVarDecl 0x5557f85fcbe8 <col:39, col:48> col:48 b 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
|-CXXMethodDecl 0x5557f85fcdb8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5557f85fd018 <line:195:5, col:34> col:17 swap 'void (Vector<IPRewriterFlow *> &)' inline
| `-ParmVarDecl 0x5557f85fcf20 <col:22, col:33> col:33 x 'Vector<IPRewriterFlow *> &'
`-CXXDestructorDecl 0x5557f85fd0e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5557f85fdff8 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85ee2d8 prev 0x5557f85d2260 <../elements/ip/iprewriterbase.hh:42:1, line:79:1> line:42:7 referenced class IPRewriterHeap definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f85ee3d0 <col:1, col:7> col:7 implicit referenced class IPRewriterHeap
|-AccessSpecDecl 0x5557f85ee460 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x5557f85ee4c0 <line:44:5, line:46:5> line:44:5 IPRewriterHeap 'void ()'
| |-CXXCtorInitializer Field 0x5557f85fd988 '_heaps' 'Vector<IPRewriterFlow *> [2]'
| | `-CXXConstructExpr 0x5557f85fdfd0 <col:5> 'Vector<IPRewriterFlow *> [2]' 'void ()'
| |-CXXCtorInitializer Field 0x5557f85fd9e8 '_capacity' 'int32_t':'int'
| | `-IntegerLiteral 0x5557f85fdee8 <line:45:14> 'int' 2147483647
| |-CXXCtorInitializer Field 0x5557f85fda48 '_use_count' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f85fdf90 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f85fdf50 <col:38> 'int' 1
| `-CompoundStmt 0x5557f85fe048 <col:41, line:46:5>
|-CXXDestructorDecl 0x5557f85ee5b0 <line:47:5, line:49:5> line:47:5 used ~IPRewriterHeap 'void () noexcept'
| `-CompoundStmt 0x5557f85fe488 <col:23, line:49:5>
|   `-ParenExpr 0x5557f85fe468 <line:48:2, col:153> 'void'
|     `-ConditionalOperator 0x5557f85fe438 <col:3, col:152> 'void'
|       |-CXXStaticCastExpr 0x5557f85fe120 <col:3, col:34> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5557f85fe0f0 <col:23, col:33> 'bool' '=='
|       |   |-CXXMemberCallExpr 0x5557f85fe098 <col:23, col:28> 'Vector<IPRewriterFlow *>::size_type':'int'
|       |   | `-MemberExpr 0x5557f85fe068 <col:23> '<bound member function type>' ->size 0x5557f85fd2c8
|       |   |   `-ImplicitCastExpr 0x5557f85fe0b8 <col:23> 'const IPRewriterHeap *' <NoOp>
|       |   |     `-CXXThisExpr 0x5557f85fe058 <col:23> 'IPRewriterHeap *' implicit this
|       |   `-IntegerLiteral 0x5557f85fe0d0 <col:33> 'int' 0
|       |-CXXFunctionalCastExpr 0x5557f85fe180 <col:38, col:45> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x5557f85fe160 <col:44> 'int' 0
|       `-CallExpr 0x5557f85fe398 <col:49, col:152> 'void'
|         |-ImplicitCastExpr 0x5557f85fe380 <col:49> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5557f85fe360 <col:49> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5557f85fe3d8 <col:64> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5557f85fe1f0 <col:64> 'const char [12]' lvalue "size() == 0"
|         |-ImplicitCastExpr 0x5557f85fe3f0 <col:79> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5557f85fe298 <col:79> 'const char [33]' lvalue "../elements/ip/iprewriterbase.hh"
|         |-ImplicitCastExpr 0x5557f85fe408 <col:115> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5557f85fe2d0 <col:115> 'int' 48
|         `-ImplicitCastExpr 0x5557f85fe420 <col:119, col:133> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x5557f85fe348 <col:119, col:133> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x5557f85fe330 <col:133> 'const char [34]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5557f85fe2f0 <col:133> 'const char [34]' lvalue "IPRewriterHeap::~IPRewriterHeap()"
|-CXXMethodDecl 0x5557f85ee6b0 <line:51:5, line:53:5> line:51:10 use 'void ()'
| `-CompoundStmt 0x5557f85fe4f8 <col:16, line:53:5>
|   `-UnaryOperator 0x5557f85fe4e0 <line:52:2, col:4> 'uint32_t':'unsigned int' lvalue prefix '++'
|     `-MemberExpr 0x5557f85fe4b0 <col:4> 'uint32_t':'unsigned int' lvalue ->_use_count 0x5557f85fda48
|       `-CXXThisExpr 0x5557f85fe4a0 <col:4> 'IPRewriterHeap *' implicit this
|-CXXMethodDecl 0x5557f85ee770 <line:54:5, line:58:5> line:54:10 unuse 'void ()'
| `-CompoundStmt 0x5557f85fe9c0 <col:18, line:58:5>
|   |-ParenExpr 0x5557f85fe890 <line:55:2, col:159> 'void'
|   | `-ConditionalOperator 0x5557f85fe860 <col:3, col:158> 'void'
|   |   |-CXXStaticCastExpr 0x5557f85fe5d0 <col:3, col:37> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f85fe5a0 <col:23, col:36> 'bool' '>'
|   |   |   |-ImplicitCastExpr 0x5557f85fe570 <col:23> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   | `-MemberExpr 0x5557f85fe520 <col:23> 'uint32_t':'unsigned int' lvalue ->_use_count 0x5557f85fda48
|   |   |   |   `-CXXThisExpr 0x5557f85fe510 <col:23> 'IPRewriterHeap *' implicit this
|   |   |   `-ImplicitCastExpr 0x5557f85fe588 <col:36> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x5557f85fe550 <col:36> 'int' 0
|   |   |-CXXFunctionalCastExpr 0x5557f85fe630 <col:41, col:48> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f85fe610 <col:47> 'int' 0
|   |   `-CallExpr 0x5557f85fe7c0 <col:52, col:158> 'void'
|   |     |-ImplicitCastExpr 0x5557f85fe7a8 <col:52> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f85fe788 <col:52> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f85fe800 <col:67> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f85fe6a0 <col:67> 'const char [15]' lvalue "_use_count > 0"
|   |     |-ImplicitCastExpr 0x5557f85fe818 <col:85> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f85fe6c8 <col:85> 'const char [33]' lvalue "../elements/ip/iprewriterbase.hh"
|   |     |-ImplicitCastExpr 0x5557f85fe830 <col:121> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f85fe700 <col:121> 'int' 55
|   |     `-ImplicitCastExpr 0x5557f85fe848 <col:125, col:139> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f85fe770 <col:125, col:139> 'const char [29]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f85fe758 <col:139> 'const char [29]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f85fe720 <col:139> 'const char [29]' lvalue "void IPRewriterHeap::unuse()"
|   `-IfStmt 0x5557f85fe9a8 <line:56:2, line:57:13>
|     |-BinaryOperator 0x5557f85fe958 <line:56:6, col:22> 'bool' '=='
|     | |-ImplicitCastExpr 0x5557f85fe928 <col:6, col:8> 'uint32_t':'unsigned int' <LValueToRValue>
|     | | `-UnaryOperator 0x5557f85fe8f0 <col:6, col:8> 'uint32_t':'unsigned int' lvalue prefix '--'
|     | |   `-MemberExpr 0x5557f85fe8c0 <col:8> 'uint32_t':'unsigned int' lvalue ->_use_count 0x5557f85fda48
|     | |     `-CXXThisExpr 0x5557f85fe8b0 <col:8> 'IPRewriterHeap *' implicit this
|     | `-ImplicitCastExpr 0x5557f85fe940 <col:22> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x5557f85fe908 <col:22> 'int' 0
|     `-CXXDeleteExpr 0x5557f85fe988 <line:57:6, col:13> 'void' Function 0x5557f810d838 'operator delete' 'void (void *) noexcept'
|       `-CXXThisExpr 0x5557f85fe978 <col:13> 'IPRewriterHeap *' this
|-CXXMethodDecl 0x5557f85fd2c8 <line:60:5, line:62:5> line:60:41 used size 'Vector<IPRewriterFlow *>::size_type () const'
| `-CompoundStmt 0x5557f86015c0 <col:54, line:62:5>
|   `-ReturnStmt 0x5557f86015b0 <line:61:2, col:43>
|     `-BinaryOperator 0x5557f8601590 <col:9, col:43> 'int' '+'
|       |-CXXMemberCallExpr 0x5557f85feb40 <col:9, col:24> 'Vector::size_type':'int'
|       | `-MemberExpr 0x5557f85feb10 <col:9, col:19> '<bound member function type>' .size 0x5557f85fa2b8
|       |   `-ArraySubscriptExpr 0x5557f85feaf0 <col:9, col:17> 'const Vector<IPRewriterFlow *>':'const Vector<IPRewriterFlow *>' lvalue
|       |     |-ImplicitCastExpr 0x5557f85fead8 <col:9> 'const Vector<IPRewriterFlow *> *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x5557f85fe9f0 <col:9> 'Vector<IPRewriterFlow *> const[2]' lvalue ->_heaps 0x5557f85fd988
|       |     |   `-CXXThisExpr 0x5557f85fe9e0 <col:9> 'const IPRewriterHeap *' implicit this
|       |     `-IntegerLiteral 0x5557f85fea20 <col:16> 'int' 0
|       `-CXXMemberCallExpr 0x5557f85fec28 <col:28, col:43> 'Vector::size_type':'int'
|         `-MemberExpr 0x5557f85febf8 <col:28, col:38> '<bound member function type>' .size 0x5557f85fa2b8
|           `-ArraySubscriptExpr 0x5557f85febd8 <col:28, col:36> 'const Vector<IPRewriterFlow *>':'const Vector<IPRewriterFlow *>' lvalue
|             |-ImplicitCastExpr 0x5557f85febc0 <col:28> 'const Vector<IPRewriterFlow *> *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557f85feb70 <col:28> 'Vector<IPRewriterFlow *> const[2]' lvalue ->_heaps 0x5557f85fd988
|             |   `-CXXThisExpr 0x5557f85feb60 <col:28> 'const IPRewriterHeap *' implicit this
|             `-IntegerLiteral 0x5557f85feba0 <col:35> 'int' 1
|-CXXMethodDecl 0x5557f85fd3b8 <line:63:5, line:65:5> line:63:13 capacity 'int32_t () const'
| `-CompoundStmt 0x5557f8601640 <col:30, line:65:5>
|   `-ReturnStmt 0x5557f8601630 <line:64:2, col:9>
|     `-ImplicitCastExpr 0x5557f8601618 <col:9> 'int32_t':'int' <LValueToRValue>
|       `-MemberExpr 0x5557f86015e8 <col:9> 'const int32_t':'const int' lvalue ->_capacity 0x5557f85fd9e8
|         `-CXXThisExpr 0x5557f86015d8 <col:9> 'const IPRewriterHeap *' implicit this
|-AccessSpecDecl 0x5557f85fd458 <line:67:3, col:10> col:3 private
|-EnumDecl 0x5557f85fd480 <line:69:5, line:71:5> line:69:5
| |-EnumConstantDecl 0x5557f85fd580 <line:70:2, col:18> col:2 h_best_effort 'IPRewriterHeap::(anonymous enum at ../elements/ip/iprewriterbase.hh:69:5)'
| | `-ImplicitCastExpr 0x5557f85fd660 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f85fd560 <col:18> 'int' Int: 0
| |     `-IntegerLiteral 0x5557f85fd540 <col:18> 'int' 0
| `-EnumConstantDecl 0x5557f85fd610 <col:21, col:35> col:21 h_guarantee 'IPRewriterHeap::(anonymous enum at ../elements/ip/iprewriterbase.hh:69:5)'
|   `-ImplicitCastExpr 0x5557f85fd678 <col:35> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f85fd5f0 <col:35> 'int' Int: 1
|       `-IntegerLiteral 0x5557f85fd5d0 <col:35> 'int' 1
|-FieldDecl 0x5557f85fd988 <line:72:5, col:38> col:30 referenced _heaps 'Vector<IPRewriterFlow *> [2]'
|-FieldDecl 0x5557f85fd9e8 <line:73:5, col:13> col:13 referenced _capacity 'int32_t':'int'
|-FieldDecl 0x5557f85fda48 <line:74:5, col:14> col:14 referenced _use_count 'uint32_t':'unsigned int'
|-FriendDecl 0x5557f85fdab8 <line:76:5, col:18> col:12 'class IPRewriterBase':'IPRewriterBase'
|-FriendDecl 0x5557f85fdb50 <line:77:5, col:18> col:12 'class IPRewriterFlow':'IPRewriterFlow'
|-CXXConstructorDecl 0x5557f85fdbb8 <line:42:7> col:7 implicit IPRewriterHeap 'void (const IPRewriterHeap &)' inline default noexcept-unevaluated 0x5557f85fdbb8
| `-ParmVarDecl 0x5557f85fdcc8 <col:7> col:7 'const IPRewriterHeap &'
`-CXXMethodDecl 0x5557f85fdd68 <col:7> col:7 implicit operator= 'IPRewriterHeap &(const IPRewriterHeap &)' inline default noexcept-unevaluated 0x5557f85fdd68
  `-ParmVarDecl 0x5557f85fde78 <col:7> col:7 'const IPRewriterHeap &'

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterHeap = type { [2 x %class.Vector.0], i32, i32 }
  NonVirtualBaseLLVMType:%class.IPRewriterHeap = type { [2 x %class.Vector.0], i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f84bc430 prev 0x5557f84b38c0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f84bc528 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5557f84bc5c8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5557f84c2a68 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557f84c2e48 <col:11>
|-CXXConstructorDecl 0x5557f84c2b40 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f84c2c28 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5557f84c3590 <col:11>
|-CXXConstructorDecl 0x5557f84c2cc8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f84c2dd8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5557f84c4de8 <col:11>
|-CXXDestructorDecl 0x5557f84c40f8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5557f81c45c8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f81c46d8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5557f81c4fa0 <col:11>
|   `-ReturnStmt 0x5557f81c4f90 <col:11>
|     `-UnaryOperator 0x5557f81c4f78 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f81c4f68 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5557f81c4748 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5557f81c4858 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5557f854edd0 <col:11>
    `-ReturnStmt 0x5557f854edc0 <col:11>
      `-UnaryOperator 0x5557f854eda8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5557f854ed98 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f84b14a8 prev 0x5557f84b11c0 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f84b15a0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5557f84b1630 <col:19, col:25> col:19 public
|-TypedefDecl 0x5557f84b1668 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5557f810fac0 'int32_t' sugar
|   |-Typedef 0x5557f801f268 'int32_t'
|   `-TypedefType 0x5557f7ff83b0 '__int32_t' sugar
|     |-Typedef 0x5557f7ff7fc8 '__int32_t'
|     `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f84b16d0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5557f810fc80 'int64_t' sugar
|   |-Typedef 0x5557f801f2d0 'int64_t'
|   `-TypedefType 0x5557f7ff84d0 '__int64_t' sugar
|     |-Typedef 0x5557f7ff80a8 '__int64_t'
|     `-BuiltinType 0x5557f7fb6390 'long'
|-EnumDecl 0x5557f84b1728 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5557f84b18a0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5557f84b1880 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5557f84b1858 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5557f84b1840 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5557f84b1810 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5557f84b1998 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5557f84b1978 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5557f84b1950 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5557f84b1938 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5557f84b1910 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5557f84b18f0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5557f84b19e8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5557f84b1af0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5557f84b3610 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84b1ad0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5557f84b1ab0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5557f84b1b80 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5557f84b3628 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84b1b60 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5557f84b1b40 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5557f84b1c10 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5557f84b3640 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84b1bf0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5557f84b1bd0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5557f84b1ca0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5557f84b3658 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84b1c80 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5557f84b1c60 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5557f84b1d30 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5557f84b3670 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84b1d10 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5557f84b1cf0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5557f84b1dc0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5557f84b3688 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84b1da0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5557f84b1d80 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5557f84b1e50 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5557f84b36a0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84b1e30 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5557f84b1e10 <col:26> 'int' EnumConstant 0x5557f84b1af0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5557f84b1f20 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5557f84b36b8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84b1f00 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5557f84b1ee0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5557f84b1ea0 <col:27> 'int' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5557f84b1ec0 <col:44> 'int' EnumConstant 0x5557f84b1dc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5557f84b35c0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5557f84b36d0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f84b1fd0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5557f84b1fb0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5557f84b1f70 <col:27> 'int' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5557f84b1f90 <col:44> 'int' EnumConstant 0x5557f84b1ca0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5557f84b36e8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5557f84b37f0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5557f84b3840 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f84b37d0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5557f84b37b0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5557f84b3868 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5557f810f6f0 'uninitialized_type'
|   `-CXXRecord 0x5557f810f658 'uninitialized_type'
|-CXXRecordDecl 0x5557f84b38c0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5557f84b39d0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5557f84bd578 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5557f84c2e58 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5557f84c2f78 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5557f84c2f30 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5557f84c2ec0 <col:9> '<bound member function type>' ->assign 0x5557f84ba658
|     | `-CXXThisExpr 0x5557f84c2eb0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5557f84c2ef0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5557f84c2f60 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5557f84c2f10 <col:19> 'int' 0
|-CXXConstructorDecl 0x5557f84b3c18 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5557f84b3a90 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5557f84b3b08 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5557f84c2900 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f84c28e0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5557f84bd578 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5557f84c2f90 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5557f84c30e0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5557f84c3068 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5557f84c2ff8 <col:9> '<bound member function type>' ->assign 0x5557f84ba658
|     | `-CXXThisExpr 0x5557f84c2fe8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5557f84c30b0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5557f84c3098 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5557f84c3028 <col:16> 'long' lvalue ParmVar 0x5557f84b3a90 'sec' 'long'
|     `-ImplicitCastExpr 0x5557f84c30c8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5557f84c3048 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84b3b08 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5557f84b3e78 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5557f84b3ce8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5557f84b3d60 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5557f84c2938 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f84c2918 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5557f84bd578 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5557f84c30f8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5557f84c3230 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5557f84c31d0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5557f84c3160 <col:9> '<bound member function type>' ->assign 0x5557f84ba658
|     | `-CXXThisExpr 0x5557f84c3150 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5557f84c3200 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5557f84c3190 <col:16> 'int' lvalue ParmVar 0x5557f84b3ce8 'sec' 'int'
|     `-ImplicitCastExpr 0x5557f84c3218 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5557f84c31b0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84b3d60 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5557f84b40d8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5557f84b3f48 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5557f84b3fc0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5557f84c2970 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f84c2950 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5557f84bd578 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5557f84c3248 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5557f84c3398 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5557f84c3320 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5557f84c32b0 <col:9> '<bound member function type>' ->assign 0x5557f84ba658
|     | `-CXXThisExpr 0x5557f84c32a0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5557f84c3368 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5557f84c3350 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5557f84c32e0 <col:16> 'unsigned long' lvalue ParmVar 0x5557f84b3f48 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5557f84c3380 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5557f84c3300 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84b3fc0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5557f84b4338 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5557f84b41a8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5557f84b4220 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5557f84c29a8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f84c2988 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5557f84bd578 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5557f84c33b0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5557f84c3500 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5557f84c3488 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5557f84c3418 <col:9> '<bound member function type>' ->assign 0x5557f84ba658
|     | `-CXXThisExpr 0x5557f84c3408 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5557f84c34d0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5557f84c34b8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5557f84c3448 <col:16> 'unsigned int' lvalue ParmVar 0x5557f84b41a8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5557f84c34e8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5557f84c3468 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84b4220 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5557f84b4498 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5557f84b4408 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5557f84b4638 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5557f84b4570 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5557f84b4868 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5557f84b4770 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5557f84b4a18 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5557f84b4958 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5557f84bd578 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5557f84c35a0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5557f84c3518 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5557f84b4958 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5557f84c3600 <col:19, line:214:5>
|-CXXConstructorDecl 0x5557f84b4be8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5557f84b4b28 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5557f84bd578 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5557f84c3610 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5557f84c36c0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5557f84c3698 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5557f84c3668 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5557f84b4b28 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5557f84b4dd8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5557f84b4d50 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5557f84b1250 'Timestamp'
|   | `-CXXRecord 0x5557f84b14a8 'Timestamp'
|   `-ParenType 0x5557f84b4cf0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5557f84b4cc0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5557f84b17f0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5557f84b1668 'seconds_type'
|         `-TypedefType 0x5557f810fac0 'int32_t' sugar
|           |-Typedef 0x5557f801f268 'int32_t'
|           `-TypedefType 0x5557f7ff83b0 '__int32_t' sugar
|             |-Typedef 0x5557f7ff7fc8 '__int32_t'
|             `-BuiltinType 0x5557f7fb6370 'int'
|-CXXConversionDecl 0x5557f84b4f18 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5557f84b4fe8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5557f84c37c8 <col:37, line:231:5>
|   `-ReturnStmt 0x5557f84c37b8 <line:227:9, col:23>
|     `-BinaryOperator 0x5557f84c3798 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5557f84c3768 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5557f84c3718 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5557f84bc5c8
|       |   `-MemberExpr 0x5557f84c36e8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5557f84bd578
|       |     `-CXXThisExpr 0x5557f84c36d8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5557f84c3780 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5557f84c3748 <col:23> 'int' 0
|-CXXMethodDecl 0x5557f84b50a8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5557f84b5168 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84b5228 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84b52e8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84b53a8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84b5518 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5557f84b5458 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5557f84b5660 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5557f84b55d0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84b5728 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5557f84b57c8 <col:54> "" ""
|-CXXMethodDecl 0x5557f84b5858 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5557f84b58f8 <col:54> "" ""
|-CXXMethodDecl 0x5557f84b5988 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5557f84b5a28 <col:54> "" ""
|-CXXMethodDecl 0x5557f84b5b28 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5557f84b5bf8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5557f84b5d28 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5557f84b5e20 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5557f84b5f58 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5557f84c39e0 <col:39, line:271:5>
|   `-ReturnStmt 0x5557f84c39d0 <line:267:9, col:61>
|     `-CallExpr 0x5557f84c3970 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5557f84c3958 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5557f84c37e0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5557f84bd8a8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5557f84c39a0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5557f84c3840 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5557f84bc5c8
|       |   `-MemberExpr 0x5557f84c3810 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5557f84bd578
|       |     `-CXXThisExpr 0x5557f84c3800 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5557f84c39b8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5557f84c38e0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5557f84c38b0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5557f84c3870 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5557f84c38c8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5557f84c3890 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1dc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5557f84b6018 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5557f84c3ba0 <col:39, line:279:5>
|   `-ReturnStmt 0x5557f84c3b90 <line:275:9, col:61>
|     `-CallExpr 0x5557f84c3b30 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5557f84c3b18 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5557f84c39f8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5557f84bd8a8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5557f84c3b60 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5557f84c3a58 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5557f84bc5c8
|       |   `-MemberExpr 0x5557f84c3a28 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5557f84bd578
|       |     `-CXXThisExpr 0x5557f84c3a18 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5557f84c3b78 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5557f84c3af8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5557f84c3ac8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5557f84c3a88 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5557f84c3ae0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5557f84c3aa8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1ca0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5557f84b60d8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5557f84c3d38 <col:39, line:287:5>
|   `-ReturnStmt 0x5557f84c3d28 <line:283:9, col:53>
|     `-BinaryOperator 0x5557f84c3d08 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5557f84c3cd8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5557f84c3bf8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5557f84bc5c8
|       |   `-MemberExpr 0x5557f84c3bc8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5557f84bd578
|       |     `-CXXThisExpr 0x5557f84c3bb8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5557f84c3cf0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5557f84c3cb8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5557f84c3c98 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5557f84c3c68 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5557f84c3c28 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1af0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5557f84c3c80 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5557f84c3c48 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5557f84b61c8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5557f84c4fd0 <col:40, line:293:5>
|   |-DeclStmt 0x5557f84c3e80 <line:291:9, col:48>
|   | `-VarDecl 0x5557f84c3d60 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5557f84c3e60 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5557f84c3e08 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5557f84c3dd8 <col:22> '<bound member function type>' ->subsec 0x5557f84b5168
|   |     |   `-CXXThisExpr 0x5557f84c3dc8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5557f84c3e48 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5557f84c3e28 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1f20 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5557f84c4fc0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5557f84c4fa8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5557f84c4f78 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f84c4f60 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5557f84c4f40 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5557f84c4f10 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5557f84c4ca8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5557f84c4c90 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5557f84c3e98 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5557f84c3d60 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5557f84c4eb0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5557f84c4e98 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5557f84c4e68 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5557f84c4cc0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5557f84c4c30 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5557f84c4c18 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5557f84c4bc8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5557f84b13f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5557f84c4b68 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5557f84c3ec8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5557f84c3eb8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5557f84c4bb0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5557f84c4b98 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5557f84c4388 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5557f84c3ef0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5557f84c3f80 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5557f84c3f50 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5557f84c3f10 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1f20 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5557f84c3f68 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5557f84c3f30 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5557f84c3d60 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5557f84c4ee0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5557f84c4c78 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5557f84c4c68 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5557f84b6288 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5557f84c5528 <col:40, line:302:5>
|   |-DeclStmt 0x5557f84c5120 <line:297:9, col:48>
|   | `-VarDecl 0x5557f84c5000 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5557f84c5100 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5557f84c50a8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5557f84c5078 <col:22> '<bound member function type>' ->subsec 0x5557f84b5168
|   |     |   `-CXXThisExpr 0x5557f84c5068 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5557f84c50e8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5557f84c50c8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b35c0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5557f84c5518 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5557f84c5500 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5557f84c54d0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f84c54b8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5557f84c5498 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5557f84c5468 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5557f84c5390 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5557f84c5378 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5557f84c5138 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5557f84c5000 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5557f84c5408 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5557f84c53f0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5557f84c53c0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5557f84c53a8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5557f84c5318 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5557f84c5300 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5557f84c52e0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5557f84b13f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5557f84c5280 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5557f84c5168 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5557f84c5158 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5557f84c52c8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5557f84c52b0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5557f84c5240 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5557f84c5190 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5557f84c5220 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5557f84c51f0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5557f84c51b0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b35c0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5557f84c5208 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5557f84c51d0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5557f84c5000 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5557f84c5438 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5557f84c5360 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5557f84c5350 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5557f84b6348 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5557f84c55b0 <col:40, line:306:5>
|   `-ReturnStmt 0x5557f84c55a0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5557f84c5570 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5557f84c5558 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f84c5548 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5557f84b64e8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5557f84b63f8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5557f84b66b8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5557f84b65c0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5557f84b67a8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5557f84b6918 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5557f84b6858 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5557f84c56f8 <col:56, line:320:5>
|   `-ReturnStmt 0x5557f84c56e8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5557f84c56d0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5557f84c56a0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f84c5688 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5557f84c5648 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5557f84c5618 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5557f84c55d8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5557f84b6858 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5557f84c5630 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5557f84c55f8 <col:31> 'int' 0
|-CXXMethodDecl 0x5557f84b6b58 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5557f84b69d0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5557f84b6a48 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84c58c8 <col:72, line:326:5>
|   `-ReturnStmt 0x5557f84c58b8 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5557f84c58a0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5557f84c5870 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f84c5858 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5557f84c5818 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5557f84c5800 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5557f84c5720 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5557f84b69d0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5557f84c57c0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5557f84c57a8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5557f84c5740 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5557f84bbd20 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5557f84c57e8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5557f84c5760 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84b6a48 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84b6d08 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5557f84b6c18 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5557f84cf450 <col:56, line:337:5>
|   |-DeclStmt 0x5557f84c5bc8 <line:329:9, col:51>
|   | `-VarDecl 0x5557f84c58f0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5557f84c5bb0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5557f84c5b80 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5557f84c5b68 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5557f84c5b50 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5557f84c5b20 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5557f84c5b08 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5557f84c5af0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5557f84c59e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5557f84cf240 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5557f84c5c30 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5557f84bc5c8
|   | | `-MemberExpr 0x5557f84c5c00 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5557f84bd578
|   | |   `-DeclRefExpr 0x5557f84c5be0 <col:9> 'Timestamp' lvalue Var 0x5557f84c58f0 't' 'Timestamp'
|   | `-BinaryOperator 0x5557f84cf220 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5557f84cf1f0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5557f84c5c60 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5557f84b6c18 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5557f84cf208 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5557f84c5d10 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5557f84c5cf0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5557f84c5cc0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5557f84c5c80 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5557f84c5cd8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5557f84c5ca0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1dc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5557f84cf438 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5557f84cf408 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5557f84cf3f0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5557f84cf3d0 <col:16> 'Timestamp' lvalue Var 0x5557f84c58f0 't' 'Timestamp'
|-CXXMethodDecl 0x5557f84b6ed0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5557f84b6dc0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5557f84b6e38 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84cf608 <col:72, line:343:5>
|   `-ReturnStmt 0x5557f84cf5f8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5557f84cf5e0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5557f84cf5b0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f84cf598 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5557f84cf558 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5557f84cf540 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5557f84cf488 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5557f84b6dc0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5557f84cf500 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5557f84cf4e8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5557f84cf4a8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5557f84bbe68 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5557f84cf528 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5557f84cf4c8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84b6e38 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84b7020 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5557f84b6f90 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5557f84cfa50 <col:56, line:354:5>
|   |-DeclStmt 0x5557f84cf7f8 <line:346:9, col:51>
|   | `-VarDecl 0x5557f84cf630 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5557f84cf7e0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5557f84cf7b0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5557f84cf798 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5557f84cf780 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5557f84cf750 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5557f84cf738 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5557f84cf720 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5557f84cf6f0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5557f84cf9b0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5557f84cf860 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5557f84bc5c8
|   | | `-MemberExpr 0x5557f84cf830 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5557f84bd578
|   | |   `-DeclRefExpr 0x5557f84cf810 <col:9> 'Timestamp' lvalue Var 0x5557f84cf630 't' 'Timestamp'
|   | `-BinaryOperator 0x5557f84cf990 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5557f84cf960 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5557f84cf890 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5557f84b6f90 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5557f84cf978 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5557f84cf940 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5557f84cf920 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5557f84cf8f0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5557f84cf8b0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5557f84cf908 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5557f84cf8d0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1ca0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5557f84cfa38 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5557f84cfa08 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5557f84cf9f0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5557f84cf9d0 <col:16> 'Timestamp' lvalue Var 0x5557f84cf630 't' 'Timestamp'
|-CXXMethodDecl 0x5557f84b71e8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5557f84b70d8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5557f84b7150 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84cfc08 <col:72, line:360:5>
|   `-ReturnStmt 0x5557f84cfbf8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5557f84cfbe0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5557f84cfbb0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f84cfb98 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5557f84cfb58 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5557f84cfb40 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5557f84cfa88 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5557f84b70d8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5557f84cfb00 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5557f84cfae8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5557f84cfaa8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5557f84bbfb0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5557f84cfb28 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5557f84cfac8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84b7150 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84b7338 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5557f84b72a8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5557f84d0078 <col:56, line:371:5>
|   |-DeclStmt 0x5557f84cfdf8 <line:363:9, col:51>
|   | `-VarDecl 0x5557f84cfc30 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5557f84cfde0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5557f84cfdb0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5557f84cfd98 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5557f84cfd80 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5557f84cfd50 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5557f84cfd38 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5557f84cfd20 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5557f84cfcf0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5557f84cffd8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5557f84cfe60 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5557f84bc5c8
|   | | `-MemberExpr 0x5557f84cfe30 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5557f84bd578
|   | |   `-DeclRefExpr 0x5557f84cfe10 <col:9> 'Timestamp' lvalue Var 0x5557f84cfc30 't' 'Timestamp'
|   | `-CallExpr 0x5557f84cff78 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5557f84cff60 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5557f84cfe90 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5557f84bd8a8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5557f84cffa8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5557f84cfeb0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5557f84b72a8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5557f84cffc0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5557f84cff40 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5557f84cff10 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5557f84cfed0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1af0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5557f84cff28 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5557f84cfef0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5557f84d0060 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5557f84d0030 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5557f84d0018 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5557f84cfff8 <col:16> 'Timestamp' lvalue Var 0x5557f84cfc30 't' 'Timestamp'
|-CXXMethodDecl 0x5557f84b7428 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5557f84d01b8 <col:39, line:377:5>
|   `-ReturnStmt 0x5557f84d01a8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5557f84d0190 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5557f84d0160 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f84d0148 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5557f84d0108 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5557f84d00b0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5557f84d00f0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5557f84d00d0 <col:29> 'int' 1
|-CXXMethodDecl 0x5557f84b74e8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5557f84d0298 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5557f84d0250 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5557f84d01e0 <col:9> '<bound member function type>' ->assign 0x5557f84ba658
|     | `-CXXThisExpr 0x5557f84d01d0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5557f84d0210 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5557f84d0280 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5557f84d0230 <col:19> 'int' 0
|-CXXMethodDecl 0x5557f84ba658 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5557f84ba510 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5557f84ba588 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5557f84c29e0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f84c29c0 <col:60> 'int' 0
| `-CompoundStmt 0x5557f84d0490 <col:63, line:395:5>
|   `-BinaryOperator 0x5557f84d0470 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5557f84d02f0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5557f84bc5c8
|     | `-MemberExpr 0x5557f84d02c0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5557f84bd578
|     |   `-CXXThisExpr 0x5557f84d02b0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5557f84d0450 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5557f84d03e0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5557f84d0380 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5557f84d0368 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5557f84d0350 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5557f84d0320 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5557f84ba510 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5557f84d03c8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5557f84d03a8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5557f84d0438 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5557f84d0420 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5557f84d0400 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84ba588 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84ba828 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5557f84ba718 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5557f84ba790 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d05e8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5557f84d05a0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5557f84d04b8 <col:9> '<bound member function type>' ->assign 0x5557f84ba658
|     | `-CXXThisExpr 0x5557f84d04a8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5557f84d05d0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5557f84d04e8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5557f84ba718 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5557f84d0560 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5557f84d0548 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5557f84d0508 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5557f84bbe68 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5557f84d0588 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5557f84d0528 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84ba790 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84ba9f8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5557f84ba8e8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5557f84ba960 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d0740 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5557f84d06f8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5557f84d0610 <col:9> '<bound member function type>' ->assign 0x5557f84ba658
|     | `-CXXThisExpr 0x5557f84d0600 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5557f84d0728 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5557f84d0640 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5557f84ba8e8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5557f84d06b8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5557f84d06a0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5557f84d0660 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5557f84bbfb0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5557f84d06e0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5557f84d0680 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84ba960 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84babc8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5557f84baab8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5557f84bab30 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5557f84c2a18 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f84c29f8 <col:57> 'int' 0
| `-DeprecatedAttr 0x5557f84bac78 <col:75> "" ""
|-CXXMethodDecl 0x5557f84bae08 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5557f84bacf8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5557f84bad70 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f84baeb8 <col:74> "" ""
|-CXXMethodDecl 0x5557f84bb048 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5557f84baf38 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5557f84bafb0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f84bb0f8 <col:74> "" ""
|-CXXMethodDecl 0x5557f84bb188 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5557f84bb228 <col:42> "" ""
|-CXXMethodDecl 0x5557f84bb3d0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5557f84bb2b0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5557f84bb330 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5557f84bb4a0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5557f84bb560 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5557f84bb600 <col:20>
| `-OptimizeNoneAttr 0x5557f84bb658 <col:30>
|-CXXMethodDecl 0x5557f84bb6a0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5557f84bb760 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5557f84bb820 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5557f84bb8e0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5557f84bb9a0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5557f84bba60 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5557f84bbb20 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5557f84bbbe0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5557f84bbd20 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5557f84bbc90 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d0888 <col:58, line:512:5>
|   `-ReturnStmt 0x5557f84d0878 <line:511:9, col:53>
|     `-BinaryOperator 0x5557f84d0858 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5557f84d0828 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5557f84d0758 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84bbc90 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5557f84d0840 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5557f84d0808 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5557f84d07e8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5557f84d07b8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5557f84d0778 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5557f84d07d0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5557f84d0798 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1dc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5557f84bbe68 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5557f84bbdd8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d09d0 <col:58, line:516:5>
|   `-ReturnStmt 0x5557f84d09c0 <line:515:9, col:53>
|     `-BinaryOperator 0x5557f84d09a0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5557f84d0970 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5557f84d08a0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84bbdd8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5557f84d0988 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5557f84d0950 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5557f84d0930 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5557f84d0900 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5557f84d08c0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5557f84d0918 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5557f84d08e0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1ca0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5557f84bbfb0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5557f84bbf20 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d0b18 <col:58, line:520:5>
|   `-ReturnStmt 0x5557f84d0b08 <line:519:9, col:53>
|     `-BinaryOperator 0x5557f84d0ae8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5557f84d0ab8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5557f84d09e8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84bbf20 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5557f84d0ad0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5557f84d0a98 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5557f84d0a78 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5557f84d0a48 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5557f84d0a08 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1af0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5557f84d0a60 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5557f84d0a28 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5557f84bc0f8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5557f84bc068 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d0c60 <col:60, line:524:5>
|   `-ReturnStmt 0x5557f84d0c50 <line:523:9, col:55>
|     `-BinaryOperator 0x5557f84d0c30 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5557f84d0c00 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5557f84d0b30 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84bc068 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5557f84d0c18 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5557f84d0be0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5557f84d0bc0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5557f84d0b90 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5557f84d0b50 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5557f84d0ba8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5557f84d0b70 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1dc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5557f84bc240 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5557f84bc1b0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d0da8 <col:60, line:528:5>
|   `-ReturnStmt 0x5557f84d0d98 <line:527:9, col:55>
|     `-BinaryOperator 0x5557f84d0d78 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5557f84d0d48 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5557f84d0c78 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84bc1b0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5557f84d0d60 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5557f84d0d28 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5557f84d0d08 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5557f84d0cd8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5557f84d0c98 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5557f84d0cf0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5557f84d0cb8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1ca0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5557f84bc388 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5557f84bc2f8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d0ef0 <col:60, line:532:5>
|   `-ReturnStmt 0x5557f84d0ee0 <line:531:9, col:55>
|     `-BinaryOperator 0x5557f84d0ec0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5557f84d0e90 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5557f84d0dc0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84bc2f8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5557f84d0ea8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5557f84d0e70 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5557f84d0e50 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5557f84d0e20 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5557f84d0de0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1af0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5557f84d0e38 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5557f84d0e00 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5557f84b1e50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5557f84bc430 prev 0x5557f84b38c0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5557f84bc528 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5557f84bc5c8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5557f84c2a68 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5557f84c2e48 <col:11>
| |-CXXConstructorDecl 0x5557f84c2b40 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557f84c2c28 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5557f84c3590 <col:11>
| |-CXXConstructorDecl 0x5557f84c2cc8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557f84c2dd8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5557f84c4de8 <col:11>
| |-CXXDestructorDecl 0x5557f84c40f8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5557f81c45c8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557f81c46d8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5557f81c4fa0 <col:11>
| |   `-ReturnStmt 0x5557f81c4f90 <col:11>
| |     `-UnaryOperator 0x5557f81c4f78 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5557f81c4f68 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5557f81c4748 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5557f81c4858 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5557f854edd0 <col:11>
|     `-ReturnStmt 0x5557f854edc0 <col:11>
|       `-UnaryOperator 0x5557f854eda8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f854ed98 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5557f84bc630 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5557f84bc730 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5557f84bc930 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84bc710 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5557f84bc6f0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5557f84bc7c0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5557f84bc948 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84bc7a0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5557f84bc780 <col:23> 'int' 1
| |-EnumConstantDecl 0x5557f84bc850 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5557f84bc960 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84bc830 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5557f84bc810 <col:23> 'int' 2
| `-EnumConstantDecl 0x5557f84bc8e0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5557f84bc978 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f84bc8c0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5557f84bc8a0 <col:27> 'int' 3
|-CXXMethodDecl 0x5557f84bc9b8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5557f84bca80 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5557f84bcc88 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5557f84bcb30 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5557f84bcbb0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5557f84c2a30 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5557f84bce98 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5557f84bcd48 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5557f84bcdc0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5557f84bcf68 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5557f84bd028 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5557f84bd198 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5557f84bd0d8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5557f84bd260 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5557f84bd320 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5557f84bd3e0 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5557f84bd4a0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5557f84bd540 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5557f84bd578 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5557f84bd5e8 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5557f84d0f08 <col:27, line:684:5>
|-CXXMethodDecl 0x5557f84bd6a8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5557f84d0f18 <col:27, line:696:5>
|-CXXMethodDecl 0x5557f84bd8a8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5557f84bd758 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5557f84bd7d0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d10a0 <col:66, line:700:5>
|   `-ReturnStmt 0x5557f84d1090 <line:699:9, col:31>
|     `-CallExpr 0x5557f84d1030 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5557f84d1018 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5557f84d0fc8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5557f833e7e8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5557f84d1060 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5557f84d0f88 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5557f84bd758 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5557f84d1078 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5557f84d0fa8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84bd7d0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84bdc18 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5557f84bd968 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5557f84bd9e0 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5557f84bda58 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5557f84bdad0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f84d13f0 <col:64, line:707:5>
|   |-DeclStmt 0x5557f84d1130 <line:704:9, col:24>
|   | `-VarDecl 0x5557f84d10c8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5557f84d1340 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5557f84d1148 <col:9> 'int32_t':'int' lvalue ParmVar 0x5557f84bd9e0 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5557f84d1328 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5557f84d12c0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5557f84d12a8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f84d1228 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5557f8343e38 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5557f84d12f8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5557f84d11c8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5557f84bda58 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5557f84d1310 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5557f84d11e8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f84bdad0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5557f84d1208 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5557f84d10c8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5557f84d13d0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5557f84d1360 <col:9> 'int32_t':'int' lvalue ParmVar 0x5557f84bd968 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5557f84d13b8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5557f84d13a0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5557f84d1380 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5557f84d10c8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5557f84bdeb8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5557f84bdce8 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5557f84bdd60 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5557f84bddd8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5557f84be158 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5557f84bdf80 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5557f84bdff8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5557f84be070 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5557f84be2e8 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5557f84be220 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5557f84c1d30 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5557f84be3a0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5557f84be418 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5557f84c1ff8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5557f84c1f38 parent 0x5557f7fb6278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5557f84c1df0 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5557f84c1e68 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5557f84c2218 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5557f84c2158 parent 0x5557f7fb6278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5557f84c2048 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5557f84c20c0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5557f84c23e0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5557f84c2328 parent 0x5557f7fb6278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5557f84c2268 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5557f84c2668 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5557f84c25a8 parent 0x5557f7fb6278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5557f84c2458 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5557f84c24d0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5557f84c2888 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5557f84c27c8 parent 0x5557f7fb6278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5557f84c26b8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5557f84c2730 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5557f84c3fa0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f84c4088 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5557f84bd578 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5557f84c4af8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5557f84c4ab0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5557f84bd578
| |     `-DeclRefExpr 0x5557f84c4a90 <col:7> 'const Timestamp' lvalue ParmVar 0x5557f84c4088 '' 'const Timestamp &'
| `-CompoundStmt 0x5557f84c4b58 <col:7>
|-CXXConstructorDecl 0x5557f84c4208 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f84c4318 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5557f84bd578 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5557f84c4df8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5557f84c4da0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5557f84bd578
| |     `-CXXStaticCastExpr 0x5557f84c4d70 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5557f84c4d40 <col:7> 'Timestamp' lvalue ParmVar 0x5557f84c4318 '' 'Timestamp &&'
| `-CompoundStmt 0x5557f84c4e58 <col:7>
|-CXXDestructorDecl 0x5557f84c43c8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5557f81c4420 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f81c4528 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5557f81c5018 <col:7>
|   |-CXXMemberCallExpr 0x5557f81c4fb8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5557f81c4ef8 <col:7> '<bound member function type>' .operator= 0x5557f81c45c8
|   | | `-MemberExpr 0x5557f81c4e08 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5557f84bd578
|   | |   `-CXXThisExpr 0x5557f81c4df8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5557f81c4ec8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5557f84bd578
|   |   `-DeclRefExpr 0x5557f81c4ea8 <col:7> 'const Timestamp' lvalue ParmVar 0x5557f81c4528 '' 'const Timestamp &'
|   `-ReturnStmt 0x5557f81c5008 <col:7>
|     `-UnaryOperator 0x5557f81c4ff0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f81c4fe0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5557f81c48c8 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5557f81c49d8 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5557f854ee48 <col:7>
    |-CXXMemberCallExpr 0x5557f854ede8 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5557f854ed50 <col:7> '<bound member function type>' .operator= 0x5557f81c4748
    | | `-MemberExpr 0x5557f854ec20 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5557f84bd578
    | |   `-CXXThisExpr 0x5557f854ec10 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5557f854ed20 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5557f84bd578
    |   `-CXXStaticCastExpr 0x5557f854ecf0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5557f854ecc0 <col:7> 'Timestamp' lvalue ParmVar 0x5557f81c49d8 '' 'Timestamp &&'
    `-ReturnStmt 0x5557f854ee38 <col:7>
      `-UnaryOperator 0x5557f854ee20 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5557f854ee10 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f854be28 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5557f854bf58 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5557f854ca48 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f84a63d8 prev 0x5557f85264c0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f84a64d0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5557f84a6560 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5557f84a65c0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5557f84a6668 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5557f84a6788 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x5557f84a6928 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5557f84a6868 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5557f84a6b78 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5557f84a69e8 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5557f84a6a68 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5557f84a6d08 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x5557f84a6c40 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5557f84a6e88 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5557f84a6dc8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5557f84a7038 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5557f84a6f78 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5557f84a7130 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5557f854cc20 <col:21, line:58:5>
|   `-IfStmt 0x5557f854cc08 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5557f854cb70 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5557f854cb40 <col:6> '<bound member function type>' ->scheduled 0x5557f84a7988
|     |   `-ImplicitCastExpr 0x5557f854cb90 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5557f854cb30 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5557f854cbe8 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5557f854cbb8 <col:6> '<bound member function type>' ->unschedule 0x5557f854b2d0
|         `-CXXThisExpr 0x5557f854cba8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5557f84a7230 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5557f854cdc0 <col:26, line:65:5>
|   |-BinaryOperator 0x5557f854cce0 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5557f854cc78 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5557f854bf58
|   | | `-MemberExpr 0x5557f854cc48 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5557f854c018
|   | |   `-CXXThisExpr 0x5557f854cc38 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5557f854ccc8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5557f854cca8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5557f854c478 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5557f854cda0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5557f854cd10 <col:2> 'void *' lvalue ->_thunk 0x5557f854c098
|     | `-CXXThisExpr 0x5557f854cd00 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5557f854cd78 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5557f854cd40 <col:20> 'int' 1
|-CXXMethodDecl 0x5557f84a7370 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5557f84a72e0 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5557f854cf20 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5557f854ce10 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5557f854cde0 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5557f84a72e0 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5557f854cf00 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5557f854ced0 <col:2> '<bound member function type>' ->assign 0x5557f84a7230
|       `-CXXThisExpr 0x5557f854cec0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5557f84a7540 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5557f84a7428 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5557f84a74a8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5557f854d0a0 <col:58, line:79:5>
|   |-BinaryOperator 0x5557f854cfe8 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5557f854cf80 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5557f854bf58
|   | | `-MemberExpr 0x5557f854cf50 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5557f854c018
|   | |   `-CXXThisExpr 0x5557f854cf40 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5557f854cfd0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5557f854cfb0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5557f84a7428 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5557f854d080 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5557f854d018 <col:2> 'void *' lvalue ->_thunk 0x5557f854c098
|     | `-CXXThisExpr 0x5557f854d008 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5557f854d068 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5557f854d048 <col:11> 'void *' lvalue ParmVar 0x5557f84a74a8 'user_data' 'void *'
|-CXXMethodDecl 0x5557f84a7690 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5557f84a7600 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5557f854d238 <col:35, line:87:5>
|   |-BinaryOperator 0x5557f854d168 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5557f854d100 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5557f854bf58
|   | | `-MemberExpr 0x5557f854d0d0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5557f854c018
|   | |   `-CXXThisExpr 0x5557f854d0c0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5557f854d150 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5557f854d130 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5557f854c650 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5557f854d218 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5557f854d198 <col:2> 'void *' lvalue ->_thunk 0x5557f854c098
|     | `-CXXThisExpr 0x5557f854d188 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5557f854d200 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5557f854d1e8 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5557f854d1c8 <col:11> 'Element *' lvalue ParmVar 0x5557f84a7600 'element' 'Element *'
|-CXXMethodDecl 0x5557f84a77d8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5557f84a7748 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5557f854d3d0 <col:29, line:94:5>
|   |-BinaryOperator 0x5557f854d300 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5557f854d298 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5557f854bf58
|   | | `-MemberExpr 0x5557f854d268 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5557f854c018
|   | |   `-CXXThisExpr 0x5557f854d258 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5557f854d2e8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5557f854d2c8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5557f854c828 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5557f854d3b0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5557f854d330 <col:2> 'void *' lvalue ->_thunk 0x5557f854c098
|     | `-CXXThisExpr 0x5557f854d320 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5557f854d398 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5557f854d380 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5557f854d360 <col:11> 'Task *' lvalue ParmVar 0x5557f84a7748 'task' 'Task *'
|-CXXMethodDecl 0x5557f84a78c8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5557f854d4b0 <col:37, line:100:5>
|   `-ReturnStmt 0x5557f854d4a0 <line:99:2, col:19>
|     `-BinaryOperator 0x5557f854d480 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5557f854d450 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5557f854d400 <col:9> 'Element *const' lvalue ->_owner 0x5557f854c0f8
|       |   `-CXXThisExpr 0x5557f854d3f0 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5557f854d468 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5557f854d430 <col:19> 'int' 0
|-CXXMethodDecl 0x5557f84a7988 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5557f854d570 <col:35, line:105:5>
|   `-ReturnStmt 0x5557f854d560 <line:104:2, col:23>
|     `-BinaryOperator 0x5557f854d540 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5557f854d528 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5557f854d4d8 <col:9> 'const int' lvalue ->_schedpos1 0x5557f854bd78
|       |   `-CXXThisExpr 0x5557f854d4c8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5557f854d508 <col:23> 'int' 0
|-CXXMethodDecl 0x5557f84a7a48 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5557f854d5d8 <col:51, line:118:5>
|   `-ReturnStmt 0x5557f854d5c8 <line:117:2, col:9>
|     `-MemberExpr 0x5557f854d598 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5557f854bdd8
|       `-CXXThisExpr 0x5557f854d588 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5557f84a7b08 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5557f854db30 <col:37, line:136:5>
|   `-IfStmt 0x5557f854db08 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5557f854d698 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5557f854d680 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5557f854d660 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5557f854d630 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5557f84b4f18
|     |       `-MemberExpr 0x5557f854d600 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5557f854bdd8
|     |         `-CXXThisExpr 0x5557f854d5f0 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5557f854da78 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5557f854da60 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5557f854da30 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5557f854da18 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5557f854d9e0 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5557f854d9c8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5557f854d9a8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5557f84e0620 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5557f854d948 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5557f854d930 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5557f854d858 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5557f854d840 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5557f854d820 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5557f84e02e0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5557f854d7c0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5557f854d6c0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5557f854bdd8
|     |         |     |   `-CXXThisExpr 0x5557f854d6b0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5557f854d808 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5557f854d7f0 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5557f854d7a0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5557f854d788 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5557f854d728 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5557f83256b0 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5557f854d990 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5557f854d978 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5557f854d910 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5557f854d8f8 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5557f854d8c8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5557f8326380 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5557f854daf8 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5557f854dac8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5557f854da98 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5557f854bdd8
|           `-CXXThisExpr 0x5557f854da88 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5557f84a7bc8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5557f854dc18 <col:35, line:141:5>
|   `-ReturnStmt 0x5557f854dc08 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5557f854dbd0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5557f854dba0 <col:9, col:17> '<bound member function type>' ->router 0x5557f8537c60
|         `-ImplicitCastExpr 0x5557f854dbf0 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5557f854db88 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5557f854db58 <col:9> 'Element *const' lvalue ->_owner 0x5557f854c0f8
|               `-CXXThisExpr 0x5557f854db48 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5557f84a7c88 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5557f854dc98 <col:37, line:146:5>
|   `-ReturnStmt 0x5557f854dc88 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5557f854dc70 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5557f854dc40 <col:9> 'Element *const' lvalue ->_owner 0x5557f854c0f8
|         `-CXXThisExpr 0x5557f854dc30 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5557f84a7d48 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5557f854dd18 <col:41, line:151:5>
|   `-ReturnStmt 0x5557f854dd08 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5557f854dcf0 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5557f854dcc0 <col:9> 'RouterThread *const' lvalue ->_thread 0x5557f854c158
|         `-CXXThisExpr 0x5557f854dcb0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5557f84a7e10 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5557f854a2f0 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5557f84a7ec0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5557f84a7f38 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f854ca38 <col:50> 'bool' false
|-CXXMethodDecl 0x5557f854a478 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5557f854a3b0 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5557f854a5c0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5557f854a530 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5557f854a708 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5557f854a678 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5557f854a850 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5557f854a7c0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5557f854a998 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5557f854a908 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5557f854aa60 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5557f854de80 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5557f854de68 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5557f854de10 <col:2, col:47> 'void'
|       |-MemberExpr 0x5557f854dd40 <col:2> '<bound member function type>' ->schedule_at_steady 0x5557f854a5c0
|       | `-CXXThisExpr 0x5557f854dd30 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5557f854de50 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5557f854de38 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5557f854ddf0 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5557f854ddd8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5557f854dda8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5557f8326380 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5557f854aba0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5557f854ab10 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5557f854ace8 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5557f854ac58 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f854e008 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5557f854dff0 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5557f854df98 <col:2, col:40> 'void'
|       |-MemberExpr 0x5557f854dea8 <col:2> '<bound member function type>' ->schedule_after 0x5557f854aba0
|       | `-CXXThisExpr 0x5557f854de98 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5557f854dfd8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5557f854dfc0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5557f854df58 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5557f854df28 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5557f854dee8 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f854ac58 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5557f854df40 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5557f854df08 <col:38> 'int' 0
|-CXXMethodDecl 0x5557f854ae30 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5557f854ada0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f854e278 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5557f854e260 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5557f854e208 <col:2, col:49> 'void'
|       |-MemberExpr 0x5557f854e030 <col:2> '<bound member function type>' ->schedule_after 0x5557f854aba0
|       | `-CXXThisExpr 0x5557f854e020 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5557f854e248 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5557f854e230 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5557f854e1b0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5557f854e198 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5557f854e108 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5557f84b6d08 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5557f854e1f0 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5557f854e1d8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5557f854e0e8 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f854ada0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f854af78 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5557f854aee8 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5557f854e458 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5557f854e440 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5557f854e3e8 <col:2, col:38> 'void'
|       |-MemberExpr 0x5557f854e2a0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5557f854a5c0
|       | `-CXXThisExpr 0x5557f854e290 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5557f854e428 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5557f854e410 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5557f854e3b0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5557f854e398 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5557f854e378 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5557f84e02e0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5557f854e348 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5557f854e330 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5557f854e2e0 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5557f854bdd8
|             |     `-CXXThisExpr 0x5557f854e2d0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5557f854e310 <col:33> 'const Timestamp' lvalue ParmVar 0x5557f854aee8 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5557f854b0c0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5557f854b030 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f854e730 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5557f854e718 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5557f854e6c0 <col:2, col:79> 'void'
|       |-MemberExpr 0x5557f854e480 <col:2> '<bound member function type>' ->schedule_at_steady 0x5557f854a5c0
|       | `-CXXThisExpr 0x5557f854e470 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5557f854e700 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5557f854e6e8 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5557f854e680 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5557f854e5b8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5557f854e5a0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5557f854e530 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5557f854e500 <col:31, col:41> '<bound member function type>' .sec 0x5557f8327e78
|             | |     `-ImplicitCastExpr 0x5557f854e550 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5557f854e4d0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5557f854bdd8
|             | |         `-CXXThisExpr 0x5557f854e4c0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5557f854e588 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5557f854e568 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f854b030 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5557f854e648 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5557f854e618 <col:60, col:70> '<bound member function type>' .subsec 0x5557f8328570
|                 `-ImplicitCastExpr 0x5557f854e668 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5557f854e5e8 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5557f854bdd8
|                     `-CXXThisExpr 0x5557f854e5d8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5557f854b208 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5557f854b178 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5557f854ea68 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5557f854ea50 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5557f854e9f8 <col:2, col:65> 'void'
|       |-MemberExpr 0x5557f854e758 <col:2> '<bound member function type>' ->schedule_at_steady 0x5557f854a5c0
|       | `-CXXThisExpr 0x5557f854e748 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5557f854ea38 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5557f854ea20 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5557f854e9c0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5557f854e9a8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5557f854e988 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5557f84e02e0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5557f854e928 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5557f854e910 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5557f854e798 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5557f854bdd8
|             |     `-CXXThisExpr 0x5557f854e788 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5557f854e970 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5557f854e958 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5557f854e8b8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5557f854e8a0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5557f854e870 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5557f84b6d08 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5557f854e8f8 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5557f854e8e0 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5557f854e850 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5557f854b178 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f854b2d0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5557f854b390 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5557f854ef30 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5557f854eac0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5557f854ea90 <col:2> '<bound member function type>' ->unschedule 0x5557f854b2d0
|   |   `-CXXThisExpr 0x5557f854ea80 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5557f854ef18 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5557f854eee0 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5557f854eec8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5557f854eb78 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5557f81c48c8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5557f854eaf0 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5557f854bdd8
|       | `-CXXThisExpr 0x5557f854eae0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5557f854eb60 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5557f854eb30 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5557f854b450 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5557f854f288 <col:42, line:310:5>
|   |-IfStmt 0x5557f854f0d0 <line:306:2, line:307:23>
|   | |-CallExpr 0x5557f854f000 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5557f854efe8 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5557f854ef88 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5557f84d1df0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5557f854f0c0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5557f854f0a8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5557f854f078 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5557f854f060 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5557f854f030 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5557f854f278 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5557f854f260 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5557f854f230 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f854f218 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5557f854f1d8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5557f854f1c0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5557f854f190 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5557f84b7020 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5557f854f200 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5557f854f170 <col:30> 'int' 500
|-CXXMethodDecl 0x5557f854b590 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5557f854b500 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f854b638 <col:69> "" ""
|-CXXMethodDecl 0x5557f854b748 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5557f854b6b8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f854b7f0 <col:70> "" ""
|-CXXMethodDecl 0x5557f854b900 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5557f854b870 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f854b9a8 <col:71> "" ""
|-CXXMethodDecl 0x5557f854bab8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5557f854ba28 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f854bb60 <col:72> "" ""
|-EnumDecl 0x5557f854bbd0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5557f854bcd0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5557f854bd20 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f854bcb0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5557f854bc90 <col:25> 'int' 1
|-AccessSpecDecl 0x5557f854bd38 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5557f854bd78 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5557f854bdd8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5557f854be28 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5557f854bf58 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5557f854ca48 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5557f854c018 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5557f854c098 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5557f854c0f8 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5557f854c158 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5557f854c2a8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5557f854c1b8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5557f854c478 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5557f854c360 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5557f854c3e0 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5557f854c650 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5557f854c538 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5557f854c5b8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5557f854c828 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5557f854c710 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5557f854c790 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5557f854c9f8 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8601658 prev 0x5557f85d2118 <../elements/ip/iprewriterbase.hh:81:1, line:182:1> line:81:7 referenced class IPRewriterBase definition
|-DefinitionData polymorphic abstract has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5557f8601790 <col:1, col:7> col:7 implicit referenced class IPRewriterBase
|-AccessSpecDecl 0x5557f8601820 <col:41, col:47> col:41 public
|-TypedefDecl 0x5557f8601980 <line:83:5, col:44> col:44 referenced Map 'HashContainer<IPRewriterEntry>':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x5557f86018e0 'HashContainer<IPRewriterEntry>' sugar HashContainer
|   |-TemplateArgument type 'IPRewriterEntry'
|   `-RecordType 0x5557f85d0c90 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x5557f85d0b90 'HashContainer'
|-EnumDecl 0x5557f86019d8 <line:84:5, line:86:5> line:84:5
| |-EnumConstantDecl 0x5557f8601af8 <line:85:2, col:13> col:2 rw_drop 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:84:5)'
| | `-ConstantExpr 0x5557f8601ad8 <col:12, col:13> 'int' Int: -1
| |   `-UnaryOperator 0x5557f8601ac0 <col:12, col:13> 'int' prefix '-'
| |     `-IntegerLiteral 0x5557f8601aa0 <col:13> 'int' 1
| `-EnumConstantDecl 0x5557f8601ba0 <col:16, col:29> col:16 rw_addmap 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:84:5)'
|   `-ConstantExpr 0x5557f8601b80 <col:28, col:29> 'int' Int: -2
|     `-UnaryOperator 0x5557f8601b68 <col:28, col:29> 'int' prefix '-'
|       `-IntegerLiteral 0x5557f8601b48 <col:29> 'int' 2
|-CXXConstructorDecl 0x5557f8601c28 <line:88:5, col:20> col:5 IPRewriterBase 'void ()'
|-CXXDestructorDecl 0x5557f8601d18 <line:89:5, col:21> col:5 ~IPRewriterBase 'void ()' noexcept-unevaluated 0x5557f8601d18
| `-Overrides: [ 0x5557f8526b78 Element::~Element 'void ()' ]
|-EnumDecl 0x5557f8601e00 <line:91:5, line:96:5> line:91:10 ConfigurePhase
| |-EnumConstantDecl 0x5557f8601f00 <line:92:2, col:29> col:2 CONFIGURE_PHASE_PATTERNS 'IPRewriterBase::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557f86021b0 <col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8601ee0 <col:29> 'Element::ConfigurePhase' Int: 20
| |     `-DeclRefExpr 0x5557f8601ec0 <col:29> 'Element::ConfigurePhase' EnumConstant 0x5557f85291c0 'CONFIGURE_PHASE_INFO' 'Element::ConfigurePhase'
| |-EnumConstantDecl 0x5557f8601f90 <line:93:2, col:29> col:2 referenced CONFIGURE_PHASE_REWRITER 'IPRewriterBase::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557f86021c8 <col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8601f70 <col:29> 'Element::ConfigurePhase' Int: 100
| |     `-DeclRefExpr 0x5557f8601f50 <col:29> 'Element::ConfigurePhase' EnumConstant 0x5557f85292e0 'CONFIGURE_PHASE_DEFAULT' 'Element::ConfigurePhase'
| |-EnumConstantDecl 0x5557f8602078 <line:94:2, col:54> col:2 CONFIGURE_PHASE_MAPPER 'IPRewriterBase::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557f86021e0 <col:27, col:54> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8602058 <col:27, col:54> 'int' Int: 99
| |     `-BinaryOperator 0x5557f8602038 <col:27, col:54> 'int' '-'
| |       |-ImplicitCastExpr 0x5557f8602020 <col:27> 'int' <IntegralCast>
| |       | `-DeclRefExpr 0x5557f8601fe0 <col:27> 'Element::ConfigurePhase' EnumConstant 0x5557f8601f90 'CONFIGURE_PHASE_REWRITER' 'IPRewriterBase::ConfigurePhase'
| |       `-IntegerLiteral 0x5557f8602000 <col:54> 'int' 1
| `-EnumConstantDecl 0x5557f8602160 <line:95:2, col:52> col:2 CONFIGURE_PHASE_USER 'IPRewriterBase::ConfigurePhase'
|   `-ImplicitCastExpr 0x5557f86021f8 <col:25, col:52> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f8602140 <col:25, col:52> 'int' Int: 101
|       `-BinaryOperator 0x5557f8602120 <col:25, col:52> 'int' '+'
|         |-ImplicitCastExpr 0x5557f8602108 <col:25> 'int' <IntegralCast>
|         | `-DeclRefExpr 0x5557f86020c8 <col:25> 'Element::ConfigurePhase' EnumConstant 0x5557f8601f90 'CONFIGURE_PHASE_REWRITER' 'IPRewriterBase::ConfigurePhase'
|         `-IntegerLiteral 0x5557f86020e8 <col:52> 'int' 1
|-CXXMethodDecl 0x5557f8602260 <line:98:5, col:54> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5557f85280a0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5557f861ab20 <col:36, col:54>
|   `-ReturnStmt 0x5557f861ab10 <col:38, col:45>
|     `-ImplicitCastExpr 0x5557f861aaf8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5557f861aad8 <col:45> 'const char [6]' lvalue "1-/1-"
|-CXXMethodDecl 0x5557f8602328 <line:99:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x5557f85284a8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5557f861ab80 <col:36, col:51>
|   `-ReturnStmt 0x5557f861ab70 <col:38, col:45>
|     `-ImplicitCastExpr 0x5557f861ab58 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5557f861ab38 <col:45> 'const char []' lvalue Var 0x5557f85285f0 'PUSH' 'const char []'
|-CXXMethodDecl 0x5557f86023f0 <line:101:5, col:68> col:9 configure_phase 'int () const'
| |-Overrides: [ 0x5557f8529460 Element::configure_phase 'int () const' ]
| `-CompoundStmt 0x5557f861abe0 <col:33, col:68>
|   `-ReturnStmt 0x5557f861abd0 <col:35, col:42>
|     `-ImplicitCastExpr 0x5557f861abb8 <col:42> 'int' <IntegralCast>
|       `-DeclRefExpr 0x5557f861ab98 <col:42> 'IPRewriterBase::ConfigurePhase' EnumConstant 0x5557f8601f90 'CONFIGURE_PHASE_REWRITER' 'IPRewriterBase::ConfigurePhase'
|-CXXMethodDecl 0x5557f86026c0 <line:102:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5557f85298a0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5557f8602570 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x5557f86025e8 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8602818 <line:103:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5557f8529af0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5557f8602780 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8602960 <line:104:5, col:54> col:10 add_rewriter_handlers 'void (bool)'
| `-ParmVarDecl 0x5557f86028d0 <col:32, col:37> col:37 writable_patterns 'bool'
|-CXXMethodDecl 0x5557f8602aa8 <line:105:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x5557f852a308 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x5557f8602a18 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x5557f8602b98 <line:107:5, line:109:5> line:107:27 flow_heap 'const IPRewriterHeap *() const'
| `-CompoundStmt 0x5557f861ac78 <col:45, line:109:5>
|   `-ReturnStmt 0x5557f861ac68 <line:108:2, col:9>
|     `-ImplicitCastExpr 0x5557f861ac50 <col:9> 'const IPRewriterHeap *' <NoOp>
|       `-ImplicitCastExpr 0x5557f861ac38 <col:9> 'IPRewriterHeap *' <LValueToRValue>
|         `-MemberExpr 0x5557f861ac08 <col:9> 'IPRewriterHeap *const' lvalue ->_heap 0x5557f8617e40
|           `-CXXThisExpr 0x5557f861abf8 <col:9> 'const IPRewriterBase *' implicit this
|-CXXMethodDecl 0x5557f8602d18 <line:110:5, line:112:5> line:110:21 reply_element 'IPRewriterBase *(int) const'
| |-ParmVarDecl 0x5557f8602c50 <col:35, col:39> col:39 used input 'int'
| `-CompoundStmt 0x5557f861ae50 <col:52, line:112:5>
|   `-ReturnStmt 0x5557f861ae40 <line:111:2, col:29>
|     `-ImplicitCastExpr 0x5557f861ae28 <col:9, col:29> 'IPRewriterBase *' <LValueToRValue>
|       `-MemberExpr 0x5557f861adf8 <col:9, col:29> 'IPRewriterBase *const' lvalue .reply_element 0x5557f85ecf40
|         `-CXXOperatorCallExpr 0x5557f861adc0 <col:9, col:27> 'const IPRewriterInput':'const IPRewriterInput' lvalue
|           |-ImplicitCastExpr 0x5557f861ada8 <col:21, col:27> 'const IPRewriterInput &(*)(Vector::size_type) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5557f861ad30 <col:21, col:27> 'const IPRewriterInput &(Vector::size_type) const' lvalue CXXMethod 0x5557f8615748 'operator[]' 'const IPRewriterInput &(Vector::size_type) const'
|           |-MemberExpr 0x5557f861aca0 <col:9> 'const Vector<IPRewriterInput>':'const Vector<IPRewriterInput>' lvalue ->_input_specs 0x5557f8617de0
|           | `-CXXThisExpr 0x5557f861ac90 <col:9> 'const IPRewriterBase *' implicit this
|           `-ImplicitCastExpr 0x5557f861ad18 <col:22> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x5557f861acd0 <col:22> 'int' lvalue ParmVar 0x5557f8602c50 'input' 'int'
|-CXXMethodDecl 0x5557f8603050 <line:113:5, line:115:5> line:113:45 get_map 'HashContainer<IPRewriterEntry> *(int)' virtual
| |-ParmVarDecl 0x5557f8602ed8 <col:53, col:57> col:57 used mapid 'int'
| `-CompoundStmt 0x5557f861b1c0 <col:64, line:115:5>
|   `-ReturnStmt 0x5557f861b1b0 <line:114:2, col:84>
|     `-ConditionalOperator 0x5557f861b180 <col:9, col:84> 'IPRewriterBase::Map *'
|       |-ImplicitCastExpr 0x5557f861b150 <col:9, col:72> 'bool' <IntegralToBoolean>
|       | `-CallExpr 0x5557f861b078 <col:9, col:72> 'long'
|       |   |-ImplicitCastExpr 0x5557f861b060 <col:9> 'long (*)(long, long) noexcept' <BuiltinFnToFnPtr>
|       |   | `-DeclRefExpr 0x5557f861ae68 <col:9> '<builtin fn type>' Function 0x5557f82e79f8 '__builtin_expect' 'long (long, long) noexcept'
|       |   |-ImplicitCastExpr 0x5557f861b0a8 <col:26, col:68> 'long' <IntegralCast>
|       |   | `-UnaryOperator 0x5557f861b028 <col:26, col:68> 'bool' prefix '!' cannot overflow
|       |   |   `-UnaryOperator 0x5557f861b010 <col:27, col:68> 'bool' prefix '!' cannot overflow
|       |   |     `-ParenExpr 0x5557f861aff0 <col:28, col:68> 'bool'
|       |   |       `-BinaryOperator 0x5557f861afd0 <col:29, col:55> 'bool' '=='
|       |   |         |-ImplicitCastExpr 0x5557f861afa0 <col:29> 'int' <LValueToRValue>
|       |   |         | `-DeclRefExpr 0x5557f861ae88 <col:29> 'int' lvalue ParmVar 0x5557f8602ed8 'mapid' 'int'
|       |   |         `-ImplicitCastExpr 0x5557f861afb8 <col:38, col:55> 'int' <IntegralCast>
|       |   |           `-DeclRefExpr 0x5557f861aee0 <col:38, col:55> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)' EnumConstant 0x5557f85ed580 'mapid_default' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
|       |   `-ImplicitCastExpr 0x5557f861b0c0 <col:71> 'long' <IntegralCast>
|       |     `-IntegerLiteral 0x5557f861b040 <col:71> 'int' 1
|       |-UnaryOperator 0x5557f861b118 <col:76, col:77> 'IPRewriterBase::Map *' prefix '&' cannot overflow
|       | `-MemberExpr 0x5557f861b0e8 <col:77> 'IPRewriterBase::Map':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ->_map 0x5557f860b5f8
|       |   `-CXXThisExpr 0x5557f861b0d8 <col:77> 'IPRewriterBase *' implicit this
|       `-ImplicitCastExpr 0x5557f861b168 <col:84> 'IPRewriterBase::Map *' <NullToPointer>
|         `-IntegerLiteral 0x5557f861b130 <col:84> 'int' 0
|-EnumDecl 0x5557f86030f8 <line:117:5, line:119:5> line:117:5
| |-EnumConstantDecl 0x5557f8603218 <line:118:2, col:21> col:2 get_entry_check 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:117:5)'
| | `-ConstantExpr 0x5557f86031f8 <col:20, col:21> 'int' Int: -1
| |   `-UnaryOperator 0x5557f86031e0 <col:20, col:21> 'int' prefix '-'
| |     `-IntegerLiteral 0x5557f86031c0 <col:21> 'int' 1
| `-EnumConstantDecl 0x5557f86032c0 <col:24, col:43> col:24 get_entry_reply 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:117:5)'
|   `-ConstantExpr 0x5557f86032a0 <col:42, col:43> 'int' Int: -2
|     `-UnaryOperator 0x5557f8603288 <col:42, col:43> 'int' prefix '-'
|       `-IntegerLiteral 0x5557f8603268 <col:43> 'int' 2
|-CXXMethodDecl 0x5557f8603508 <line:120:5, line:121:21> line:120:30 get_entry 'IPRewriterEntry *(int, const IPFlowID &, int)' virtual
| |-ParmVarDecl 0x5557f8603328 <col:40, col:44> col:44 ip_p 'int'
| |-ParmVarDecl 0x5557f86033a0 <col:50, col:66> col:66 flowid 'const IPFlowID &'
| `-ParmVarDecl 0x5557f8603420 <line:121:12, col:16> col:16 input 'int'
|-CXXMethodDecl 0x5557f8603838 <line:122:5, line:124:24> line:122:30 add_flow 'IPRewriterEntry *(int, const IPFlowID &, const IPFlowID &, int)' virtual pure
| |-ParmVarDecl 0x5557f86035d8 <col:39, col:43> col:43 ip_p 'int'
| |-ParmVarDecl 0x5557f8603650 <col:49, col:65> col:65 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x5557f86036c8 <line:123:11, col:27> col:27 rewritten_flowid 'const IPFlowID &'
| `-ParmVarDecl 0x5557f8603748 <line:124:11, col:15> col:15 input 'int'
|-CXXMethodDecl 0x5557f8603998 <line:125:5, col:55> col:18 destroy_flow 'void (IPRewriterFlow *)' virtual pure
| `-ParmVarDecl 0x5557f8603908 <col:31, col:47> col:47 flow 'IPRewriterFlow *'
|-CXXMethodDecl 0x5557f8603b48 <line:126:5, line:128:5> line:126:29 best_effort_expiry 'click_jiffies_t (const IPRewriterFlow *)' virtual
| |-ParmVarDecl 0x5557f8603a50 <col:48, col:70> col:70 used flow 'const IPRewriterFlow *'
| `-CompoundStmt 0x5557f861b410 <col:76, line:128:5>
|   `-ReturnStmt 0x5557f861b400 <line:127:2, col:52>
|     `-BinaryOperator 0x5557f861b3e0 <col:9, col:52> 'unsigned int' '-'
|       |-BinaryOperator 0x5557f861b310 <col:9, col:37> 'unsigned int' '+'
|       | |-CXXMemberCallExpr 0x5557f861b240 <col:9, col:22> 'click_jiffies_t':'unsigned int'
|       | | `-MemberExpr 0x5557f861b210 <col:9, col:15> '<bound member function type>' ->expiry 0x5557f85d5650
|       | |   `-ImplicitCastExpr 0x5557f861b1f8 <col:9> 'const IPRewriterFlow *' <LValueToRValue>
|       | |     `-DeclRefExpr 0x5557f861b1d8 <col:9> 'const IPRewriterFlow *' lvalue ParmVar 0x5557f8603a50 'flow' 'const IPRewriterFlow *'
|       | `-ImplicitCastExpr 0x5557f861b2f8 <col:26, col:37> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x5557f861b2d8 <col:26, col:37> 'uint32_t':'unsigned int' lvalue
|       |     |-ImplicitCastExpr 0x5557f861b2c0 <col:26> 'uint32_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x5557f861b270 <col:26> 'uint32_t [2]' lvalue ->_timeouts 0x5557f8617f28
|       |     |   `-CXXThisExpr 0x5557f861b260 <col:26> 'IPRewriterBase *' implicit this
|       |     `-IntegerLiteral 0x5557f861b2a0 <col:36> 'int' 0
|       `-ImplicitCastExpr 0x5557f861b3c8 <col:41, col:52> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x5557f861b3a8 <col:41, col:52> 'uint32_t':'unsigned int' lvalue
|           |-ImplicitCastExpr 0x5557f861b390 <col:41> 'uint32_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x5557f861b340 <col:41> 'uint32_t [2]' lvalue ->_timeouts 0x5557f8617f28
|           |   `-CXXThisExpr 0x5557f861b330 <col:41> 'IPRewriterBase *' implicit this
|           `-IntegerLiteral 0x5557f861b370 <col:51> 'int' 1
|-CXXMethodDecl 0x5557f8603d28 <line:130:5, col:43> col:9 llrpc 'int (unsigned int, void *)'
| |-Overrides: [ 0x5557f8533650 Element::llrpc 'int (unsigned int, void *)' ]
| |-ParmVarDecl 0x5557f8603c08 <col:15, col:24> col:24 command 'unsigned int'
| `-ParmVarDecl 0x5557f8603c88 <col:33, col:39> col:39 data 'void *'
|-AccessSpecDecl 0x5557f8603dd8 <line:132:3, col:12> col:3 protected
|-FieldDecl 0x5557f860b5f8 <line:134:5, col:9> col:9 referenced _map 'IPRewriterBase::Map':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FieldDecl 0x5557f8617de0 <line:136:5, col:29> col:29 referenced _input_specs 'Vector<IPRewriterInput>':'Vector<IPRewriterInput>'
|-FieldDecl 0x5557f8617e40 <line:138:5, col:21> col:21 referenced _heap 'IPRewriterHeap *'
|-FieldDecl 0x5557f8617f28 <line:139:5, col:25> col:14 referenced _timeouts 'uint32_t [2]'
|-FieldDecl 0x5557f8617f88 <line:140:5, col:14> col:14 _gc_interval_sec 'uint32_t':'unsigned int'
|-FieldDecl 0x5557f8617fe8 <line:141:5, col:11> col:11 _gc_timer 'Timer'
|-EnumDecl 0x5557f8618038 <line:143:5, line:147:5> line:143:5
| |-EnumConstantDecl 0x5557f8618140 <line:144:2, col:20> col:2 default_timeout 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:143:5)'
| | `-ImplicitCastExpr 0x5557f86182f0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8618120 <col:20> 'int' Int: 300
| |     `-IntegerLiteral 0x5557f8618100 <col:20> 'int' 300
| |-EnumConstantDecl 0x5557f86181d0 <line:145:2, col:22> col:2 default_guarantee 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:143:5)'
| | `-ImplicitCastExpr 0x5557f8618308 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f86181b0 <col:22> 'int' Int: 5
| |     `-IntegerLiteral 0x5557f8618190 <col:22> 'int' 5
| `-EnumConstantDecl 0x5557f86182a0 <line:146:2, col:29> col:2 default_gc_interval 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:143:5)'
|   `-ImplicitCastExpr 0x5557f8618320 <col:24, col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f8618280 <col:24, col:29> 'int' Int: 900
|       `-BinaryOperator 0x5557f8618260 <col:24, col:29> 'int' '*'
|         |-IntegerLiteral 0x5557f8618220 <col:24> 'int' 60
|         `-IntegerLiteral 0x5557f8618240 <col:29> 'int' 15
|-CXXMethodDecl 0x5557f8618488 <line:149:5, line:151:5> line:149:21 relevant_timeout 'uint32_t (const uint32_t *)' static
| |-ParmVarDecl 0x5557f8618398 <col:38, col:63> col:53 used timeouts 'const uint32_t *':'const uint32_t *'
| `-CompoundStmt 0x5557f861b618 <col:66, line:151:5>
|   `-ReturnStmt 0x5557f861b608 <line:150:2, col:47>
|     `-ImplicitCastExpr 0x5557f861b5f0 <col:9, col:47> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-ConditionalOperator 0x5557f861b5c0 <col:9, col:47> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5557f861b5a8 <col:9, col:19> 'bool' <IntegralToBoolean>
|         | `-ImplicitCastExpr 0x5557f861b590 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5557f861b480 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |     |-ImplicitCastExpr 0x5557f861b468 <col:9> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|         |     | `-DeclRefExpr 0x5557f861b428 <col:9> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x5557f8618398 'timeouts' 'const uint32_t *':'const uint32_t *'
|         |     `-IntegerLiteral 0x5557f861b448 <col:18> 'int' 1
|         |-ArraySubscriptExpr 0x5557f861b4f8 <col:23, col:33> 'const uint32_t':'const unsigned int' lvalue
|         | |-ImplicitCastExpr 0x5557f861b4e0 <col:23> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x5557f861b4a0 <col:23> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x5557f8618398 'timeouts' 'const uint32_t *':'const uint32_t *'
|         | `-IntegerLiteral 0x5557f861b4c0 <col:32> 'int' 1
|         `-ArraySubscriptExpr 0x5557f861b570 <col:37, col:47> 'const uint32_t':'const unsigned int' lvalue
|           |-ImplicitCastExpr 0x5557f861b558 <col:37> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x5557f861b518 <col:37> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x5557f8618398 'timeouts' 'const uint32_t *':'const uint32_t *'
|           `-IntegerLiteral 0x5557f861b538 <col:46> 'int' 0
|-CXXMethodDecl 0x5557f8618848 <line:153:5, line:154:37> line:153:22 store_flow 'IPRewriterEntry *(IPRewriterFlow *, int, IPRewriterBase::Map &, IPRewriterBase::Map *)'
| |-ParmVarDecl 0x5557f8618540 <col:33, col:49> col:49 flow 'IPRewriterFlow *'
| |-ParmVarDecl 0x5557f86185c0 <col:55, col:59> col:59 input 'int'
| |-ParmVarDecl 0x5557f8618668 <line:154:5, col:10> col:10 map 'IPRewriterBase::Map &'
| `-ParmVarDecl 0x5557f8618708 <col:15, col:36> col:20 reply_map_ptr 'IPRewriterBase::Map *' cinit
|   `-ImplicitCastExpr 0x5557f861aa88 <col:36> 'IPRewriterBase::Map *' <NullToPointer>
|     `-IntegerLiteral 0x5557f861aa68 <col:36> 'int' 0
|-CXXMethodDecl 0x5557f8618b28 <line:155:5, line:156:39> line:155:17 used unmap_flow 'void (IPRewriterFlow *, IPRewriterBase::Map &, IPRewriterBase::Map *)' inline
| |-ParmVarDecl 0x5557f8618918 <col:28, col:44> col:44 flow 'IPRewriterFlow *'
| |-ParmVarDecl 0x5557f8618990 <line:156:7, col:12> col:12 map 'IPRewriterBase::Map &'
| `-ParmVarDecl 0x5557f8618a08 <col:17, col:38> col:22 reply_map_ptr 'IPRewriterBase::Map *' cinit
|   `-ImplicitCastExpr 0x5557f861aac0 <col:38> 'IPRewriterBase::Map *' <NullToPointer>
|     `-IntegerLiteral 0x5557f861aaa0 <col:38> 'int' 0
|-CXXMethodDecl 0x5557f8618d08 <line:158:5, col:56> col:17 gc_timer_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5557f8618bf0 <col:31, col:38> col:38 t 'Timer *'
| `-ParmVarDecl 0x5557f8618c70 <col:41, col:47> col:47 user_data 'void *'
|-CXXMethodDecl 0x5557f8619030 <line:160:5, line:161:41> line:160:9 parse_input_spec 'int (const String &, IPRewriterInput &, int, ErrorHandler *)'
| |-ParmVarDecl 0x5557f8618dc8 <col:26, col:40> col:40 str 'const String &'
| |-ParmVarDecl 0x5557f8618e40 <col:45, col:62> col:62 is 'IPRewriterInput &'
| |-ParmVarDecl 0x5557f8618ec0 <line:161:5, col:9> col:9 input_number 'int'
| `-ParmVarDecl 0x5557f8618f38 <col:23, col:37> col:37 errh 'ErrorHandler *'
|-EnumDecl 0x5557f86190f0 <line:163:5, line:166:5> line:163:5
| |-EnumConstantDecl 0x5557f8619208 <line:164:2, col:17> col:2 h_nmappings 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x5557f86191e8 <col:16, col:17> 'int' Int: -1
| |   `-UnaryOperator 0x5557f86191d0 <col:16, col:17> 'int' prefix '-'
| |     `-IntegerLiteral 0x5557f86191b0 <col:17> 'int' 1
| |-EnumConstantDecl 0x5557f86192b0 <col:20, col:42> col:20 h_mapping_failures 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x5557f8619290 <col:41, col:42> 'int' Int: -2
| |   `-UnaryOperator 0x5557f8619278 <col:41, col:42> 'int' prefix '-'
| |     `-IntegerLiteral 0x5557f8619258 <col:42> 'int' 2
| |-EnumConstantDecl 0x5557f8619358 <col:45, col:59> col:45 h_patterns 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x5557f8619338 <col:58, col:59> 'int' Int: -3
| |   `-UnaryOperator 0x5557f8619320 <col:58, col:59> 'int' prefix '-'
| |     `-IntegerLiteral 0x5557f8619300 <col:59> 'int' 3
| |-EnumConstantDecl 0x5557f8619400 <line:165:2, col:12> col:2 h_size 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x5557f86193e0 <col:11, col:12> 'int' Int: -4
| |   `-UnaryOperator 0x5557f86193c8 <col:11, col:12> 'int' prefix '-'
| |     `-IntegerLiteral 0x5557f86193a8 <col:12> 'int' 4
| |-EnumConstantDecl 0x5557f86194a8 <col:15, col:29> col:15 h_capacity 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x5557f8619488 <col:28, col:29> 'int' Int: -5
| |   `-UnaryOperator 0x5557f8619470 <col:28, col:29> 'int' prefix '-'
| |     `-IntegerLiteral 0x5557f8619450 <col:29> 'int' 5
| `-EnumConstantDecl 0x5557f8619550 <col:32, col:43> col:32 h_clear 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
|   `-ConstantExpr 0x5557f8619530 <col:42, col:43> 'int' Int: -6
|     `-UnaryOperator 0x5557f8619518 <col:42, col:43> 'int' prefix '-'
|       `-IntegerLiteral 0x5557f86194f8 <col:43> 'int' 6
|-CXXMethodDecl 0x5557f86196c8 <line:167:5, col:59> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5557f86195b0 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x5557f8619630 <col:44, col:50> col:50 user_data 'void *'
|-CXXMethodDecl 0x5557f86199a8 <line:168:5, col:96> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5557f8619788 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x5557f8619800 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x5557f8619880 <col:61, col:67> col:67 user_data 'void *'
| `-ParmVarDecl 0x5557f86198f8 <col:78, col:92> col:92 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8619c98 <line:169:5, col:104> col:16 pattern_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5557f8619a78 <col:38, col:52> col:52 str 'const String &'
| |-ParmVarDecl 0x5557f8619af0 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x5557f8619b70 <col:69, col:75> col:75 user_data 'void *'
| `-ParmVarDecl 0x5557f8619be8 <col:86, col:100> col:100 errh 'ErrorHandler *'
|-FriendDecl 0x5557f861a138 <line:171:5, line:172:52> line:171:33
| `-CXXMethodDecl 0x5557f8619fa8 parent 0x5557f85ec970 prev 0x5557f85ed910 <col:5, line:172:52> line:171:33 rewrite_flowid 'int (const IPFlowID &, IPFlowID &, Packet *, int)'
|   |-ParmVarDecl 0x5557f8619d88 <col:48, col:64> col:64 flowid 'const IPFlowID &'
|   |-ParmVarDecl 0x5557f8619e00 <line:172:4, col:14> col:14 rewritten_flowid 'IPFlowID &'
|   |-ParmVarDecl 0x5557f8619e78 <col:32, col:40> col:40 p 'Packet *'
|   |-ParmVarDecl 0x5557f8619ef8 <col:43, col:47> col:47 mapid 'int' cinit
|   | `-ImplicitCastExpr 0x5557f85eda88 <line:39:33> 'int' <IntegralCast>
|   |   `-DeclRefExpr 0x5557f85eda68 <col:33> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)' EnumConstant 0x5557f85ed580 'mapid_default' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
|   |-NoInlineAttr 0x5557f861a0e8 <line:37:20> Inherited
|   `-OptimizeNoneAttr 0x5557f861a110 <col:30> Inherited
|-AccessSpecDecl 0x5557f861a178 <line:174:3, col:10> col:3 private
|-CXXMethodDecl 0x5557f861a278 <line:176:5, col:54> col:10 shift_heap_best_effort 'void (click_jiffies_t)'
| `-ParmVarDecl 0x5557f861a1b0 <col:33, col:49> col:49 now_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5557f861a4b8 <line:177:5, col:78> col:10 shrink_heap_for_new_flow 'bool (IPRewriterFlow *, click_jiffies_t)'
| |-ParmVarDecl 0x5557f861a330 <col:35, col:51> col:51 flow 'IPRewriterFlow *'
| `-ParmVarDecl 0x5557f861a3a8 <col:57, col:73> col:73 now_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5557f861a608 <line:178:5, col:36> col:10 shrink_heap 'void (bool)'
| `-ParmVarDecl 0x5557f861a578 <col:22, col:27> col:27 clear_all 'bool'
|-FriendDecl 0x5557f861a6d0 <line:180:5, col:18> col:12 'class IPRewriterFlow':'IPRewriterFlow'
|-CXXConstructorDecl 0x5557f861a738 <line:81:7> col:7 implicit IPRewriterBase 'void (const IPRewriterBase &)' inline default_delete noexcept-unevaluated 0x5557f861a738
| `-ParmVarDecl 0x5557f861a848 <col:7> col:7 'const IPRewriterBase &'
`-CXXMethodDecl 0x5557f861a8e8 <col:7> col:7 implicit operator= 'IPRewriterBase &(const IPRewriterBase &)' inline default_delete noexcept-unevaluated 0x5557f861a8e8
  `-ParmVarDecl 0x5557f861a9f8 <col:7> col:7 'const IPRewriterBase &'

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterBase = type { %class.Element.base, %class.HashContainer, %class.Vector, %class.IPRewriterHeap*, [2 x i32], i32, %class.Timer }
  NonVirtualBaseLLVMType:%class.IPRewriterBase = type { %class.Element.base, %class.HashContainer, %class.Vector, %class.IPRewriterHeap*, [2 x i32], i32, %class.Timer }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPRewriterPattern
         0 |   class IPAddress _saddr
         0 |     uint32_t _addr
         4 |   int _sport
         8 |   class IPAddress _daddr
         8 |     uint32_t _addr
        12 |   int _dport
        16 |   uint32_t _variation_top
        20 |   uint32_t _next_variation
        24 |   _Bool _is_napt
        25 |   _Bool _sequential
        26 |   _Bool _same_first
        28 |   int _refcount
           | [sizeof=32, dsize=32, align=4,
           |  nvsize=32, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85cf0d0 <../elements/ip/iprwpattern.hh:12:1, line:68:1> line:12:7 class IPRewriterPattern definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f85cf1e8 <col:1, col:7> col:7 implicit referenced class IPRewriterPattern
|-AccessSpecDecl 0x5557f85cf278 <col:27, col:33> col:27 public
|-CXXConstructorDecl 0x5557f85cf7e8 <line:14:5, line:17:27> line:14:5 IPRewriterPattern 'void (const IPAddress &, int, const IPAddress &, int, bool, bool, bool, uint32_t)'
| |-ParmVarDecl 0x5557f85cf2b0 <col:23, col:40> col:40 saddr 'const IPAddress &'
| |-ParmVarDecl 0x5557f85cf330 <col:47, col:51> col:51 sport 'int'
| |-ParmVarDecl 0x5557f85cf3a8 <line:15:9, col:26> col:26 daddr 'const IPAddress &'
| |-ParmVarDecl 0x5557f85cf428 <col:33, col:37> col:37 dport 'int'
| |-ParmVarDecl 0x5557f85cf4a0 <line:16:9, col:14> col:14 is_napt 'bool'
| |-ParmVarDecl 0x5557f85cf518 <col:23, col:28> col:28 sequential 'bool'
| |-ParmVarDecl 0x5557f85cf590 <col:40, col:45> col:45 same_first 'bool'
| `-ParmVarDecl 0x5557f85cf608 <line:17:9, col:18> col:18 variation 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f85cfcc8 <line:18:5, line:19:45> line:18:17 parse 'bool (const Vector<String> &, IPRewriterPattern **, Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x5557f85cf9e0 <col:23, col:45> col:45 words 'const Vector<String> &'
| |-ParmVarDecl 0x5557f85cfa90 <col:52, col:72> col:72 result 'IPRewriterPattern **'
| |-ParmVarDecl 0x5557f85cfb08 <line:19:9, col:18> col:18 context 'Element *'
| `-ParmVarDecl 0x5557f85cfb80 <col:27, col:41> col:41 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f85d0178 <line:20:5, line:21:42> line:20:17 parse_ports 'bool (const Vector<String> &, IPRewriterInput *, Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x5557f85cfe70 <col:29, col:51> col:51 words 'const Vector<String> &'
| |-ParmVarDecl 0x5557f85cff18 <col:58, col:75> col:75 input 'IPRewriterInput *'
| |-ParmVarDecl 0x5557f85cff90 <line:21:8, col:17> col:17 model 'Element *'
| `-ParmVarDecl 0x5557f85d0030 <col:24, col:38> col:38 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f85d04a8 <line:22:5, line:23:42> line:22:17 parse_with_ports 'bool (const String &, IPRewriterInput *, Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x5557f85d0248 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5557f85d02c0 <col:53, col:70> col:70 input 'IPRewriterInput *'
| |-ParmVarDecl 0x5557f85d0338 <line:23:6, col:15> col:15 context 'Element *'
| `-ParmVarDecl 0x5557f85d03b0 <col:24, col:38> col:38 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f85d0588 <line:25:5, line:27:5> line:25:10 use 'void ()'
| `-CompoundStmt 0x5557f85d18e0 <col:16, line:27:5>
|   `-UnaryOperator 0x5557f85d18c8 <line:26:2, col:11> 'int' postfix '++'
|     `-MemberExpr 0x5557f85d1898 <col:2> 'int' lvalue ->_refcount 0x5557f85d14c8
|       `-CXXThisExpr 0x5557f85d1888 <col:2> 'IPRewriterPattern *' implicit this
|-CXXMethodDecl 0x5557f85d0648 <line:28:5, line:31:5> line:28:10 unuse 'void ()'
| `-CompoundStmt 0x5557f85d1ad8 <col:18, line:31:5>
|   `-IfStmt 0x5557f85d1ac0 <line:29:2, line:30:13>
|     |-BinaryOperator 0x5557f85d1988 <line:29:6, col:21> 'bool' '<='
|     | |-ImplicitCastExpr 0x5557f85d1970 <col:6, col:8> 'int' <LValueToRValue>
|     | | `-UnaryOperator 0x5557f85d1938 <col:6, col:8> 'int' lvalue prefix '--'
|     | |   `-MemberExpr 0x5557f85d1908 <col:8> 'int' lvalue ->_refcount 0x5557f85d14c8
|     | |     `-CXXThisExpr 0x5557f85d18f8 <col:8> 'IPRewriterPattern *' implicit this
|     | `-IntegerLiteral 0x5557f85d1950 <col:21> 'int' 0
|     `-CXXDeleteExpr 0x5557f85d1aa0 <line:30:6, col:13> 'void' Function 0x5557f810d838 'operator delete' 'void (void *) noexcept'
|       `-CXXThisExpr 0x5557f85d19a8 <col:13> 'IPRewriterPattern *' this
|-CXXConversionDecl 0x5557f85d0748 <line:33:5, line:35:5> line:33:5 operator bool 'bool () const'
| `-CompoundStmt 0x5557f85d1dc0 <col:27, line:35:5>
|   `-ReturnStmt 0x5557f85d1db0 <line:34:2, col:39>
|     `-BinaryOperator 0x5557f85d1d90 <col:9, col:39> 'bool' '||'
|       |-BinaryOperator 0x5557f85d1d00 <col:9, col:29> 'bool' '||'
|       | |-BinaryOperator 0x5557f85d1c20 <col:9, col:19> 'bool' '||'
|       | | |-ImplicitCastExpr 0x5557f85d1bd8 <col:9> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x5557f85d1bc0 <col:9> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       | | |   `-CXXMemberCallExpr 0x5557f85d1ba0 <col:9> 'uint32_t':'unsigned int'
|       | | |     `-MemberExpr 0x5557f85d1b70 <col:9> '<bound member function type>' .operator unsigned int 0x5557f8329728
|       | | |       `-MemberExpr 0x5557f85d1b00 <col:9> 'const IPAddress' lvalue ->_saddr 0x5557f85d1150
|       | | |         `-CXXThisExpr 0x5557f85d1af0 <col:9> 'const IPRewriterPattern *' implicit this
|       | | `-ImplicitCastExpr 0x5557f85d1c08 <col:19> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x5557f85d1bf0 <col:19> 'int' <LValueToRValue>
|       | |     `-MemberExpr 0x5557f85d1b40 <col:19> 'const int' lvalue ->_sport 0x5557f85d11b8
|       | |       `-CXXThisExpr 0x5557f85d1b30 <col:19> 'const IPRewriterPattern *' implicit this
|       | `-ImplicitCastExpr 0x5557f85d1ce8 <col:29> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5557f85d1cd0 <col:29> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       |     `-CXXMemberCallExpr 0x5557f85d1cb0 <col:29> 'uint32_t':'unsigned int'
|       |       `-MemberExpr 0x5557f85d1c80 <col:29> '<bound member function type>' .operator unsigned int 0x5557f8329728
|       |         `-MemberExpr 0x5557f85d1c50 <col:29> 'const IPAddress' lvalue ->_daddr 0x5557f85d1218
|       |           `-CXXThisExpr 0x5557f85d1c40 <col:29> 'const IPRewriterPattern *' implicit this
|       `-ImplicitCastExpr 0x5557f85d1d78 <col:39> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5557f85d1d60 <col:39> 'int' <LValueToRValue>
|           `-MemberExpr 0x5557f85d1d30 <col:39> 'const int' lvalue ->_dport 0x5557f85d1280
|             `-CXXThisExpr 0x5557f85d1d20 <col:39> 'const IPRewriterPattern *' implicit this
|-CXXMethodDecl 0x5557f85d0818 <line:36:5, line:38:5> line:36:15 daddr 'IPAddress () const'
| `-CompoundStmt 0x5557f85d1e58 <col:29, line:38:5>
|   `-ReturnStmt 0x5557f85d1e48 <line:37:2, col:9>
|     `-CXXConstructExpr 0x5557f85d1e18 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x5557f85d1de8 <col:9> 'const IPAddress' lvalue ->_daddr 0x5557f85d1218
|         `-CXXThisExpr 0x5557f85d1dd8 <col:9> 'const IPRewriterPattern *' implicit this
|-CXXMethodDecl 0x5557f85d0ee0 <line:40:5, line:41:57> line:40:9 rewrite_flowid 'int (const IPFlowID &, IPFlowID &, const HashContainer<IPRewriterEntry> &)'
| |-ParmVarDecl 0x5557f85d08c8 <col:24, col:40> col:40 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x5557f85d0968 <col:48, col:58> col:58 rewritten_flowid 'IPFlowID &'
| `-ParmVarDecl 0x5557f85d0db0 <line:41:10, col:48> col:48 reply_map 'const HashContainer<IPRewriterEntry> &'
|-CXXMethodDecl 0x5557f85d0fb8 <line:43:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5557f85d1078 <line:45:5, line:47:5> line:45:21 get_flow_id 'IPFlowID () const' inline
| `-CompoundStmt 0x5557f85d2100 <col:41, line:47:5>
|   `-ReturnStmt 0x5557f85d20f0 <line:46:9, col:55>
|     `-ExprWithCleanups 0x5557f85d20d8 <col:16, col:55> 'IPFlowID'
|       `-CXXConstructExpr 0x5557f85d20a8 <col:16, col:55> 'IPFlowID' 'void (IPFlowID &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5557f85d2090 <col:16, col:55> 'IPFlowID' xvalue
|           `-CXXTemporaryObjectExpr 0x5557f85d2040 <col:16, col:55> 'IPFlowID' 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
|             |-CXXConstructExpr 0x5557f85d1f80 <col:25> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x5557f85d1e90 <col:25> 'const IPAddress' lvalue ->_saddr 0x5557f85d1150
|             |   `-CXXThisExpr 0x5557f85d1e80 <col:25> 'const IPRewriterPattern *' implicit this
|             |-ImplicitCastExpr 0x5557f85d1fc8 <col:33> 'uint16_t':'unsigned short' <IntegralCast>
|             | `-ImplicitCastExpr 0x5557f85d1fb0 <col:33> 'int' <LValueToRValue>
|             |   `-MemberExpr 0x5557f85d1ed0 <col:33> 'const int' lvalue ->_sport 0x5557f85d11b8
|             |     `-CXXThisExpr 0x5557f85d1ec0 <col:33> 'const IPRewriterPattern *' implicit this
|             |-CXXConstructExpr 0x5557f85d1fe0 <col:41> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x5557f85d1f10 <col:41> 'const IPAddress' lvalue ->_daddr 0x5557f85d1218
|             |   `-CXXThisExpr 0x5557f85d1f00 <col:41> 'const IPRewriterPattern *' implicit this
|             `-ImplicitCastExpr 0x5557f85d2028 <col:49> 'uint16_t':'unsigned short' <IntegralCast>
|               `-ImplicitCastExpr 0x5557f85d2010 <col:49> 'int' <LValueToRValue>
|                 `-MemberExpr 0x5557f85d1f50 <col:49> 'const int' lvalue ->_dport 0x5557f85d1280
|                   `-CXXThisExpr 0x5557f85d1f40 <col:49> 'const IPRewriterPattern *' implicit this
|-AccessSpecDecl 0x5557f85d1118 <line:49:1, col:8> col:1 private
|-FieldDecl 0x5557f85d1150 <line:51:5, col:15> col:15 referenced _saddr 'IPAddress'
|-FieldDecl 0x5557f85d11b8 <line:52:5, col:9> col:9 referenced _sport 'int'
|-FieldDecl 0x5557f85d1218 <line:53:5, col:15> col:15 referenced _daddr 'IPAddress'
|-FieldDecl 0x5557f85d1280 <line:54:5, col:9> col:9 referenced _dport 'int'
|-FieldDecl 0x5557f85d12e0 <line:56:5, col:14> col:14 _variation_top 'uint32_t':'unsigned int'
|-FieldDecl 0x5557f85d1340 <line:57:5, col:14> col:14 _next_variation 'uint32_t':'unsigned int'
|-FieldDecl 0x5557f85d13a0 <line:59:5, col:10> col:10 _is_napt 'bool'
|-FieldDecl 0x5557f85d1400 <line:60:5, col:10> col:10 _sequential 'bool'
|-FieldDecl 0x5557f85d1460 <line:61:5, col:10> col:10 _same_first 'bool'
|-FieldDecl 0x5557f85d14c8 <line:63:5, col:9> col:9 referenced _refcount 'int'
|-CXXConstructorDecl 0x5557f85d1618 <line:65:5, col:47> col:5 IPRewriterPattern 'void (const IPRewriterPattern &)'
| `-ParmVarDecl 0x5557f85d1558 <col:23, col:46> col:47 'const IPRewriterPattern &'
|-CXXMethodDecl 0x5557f85d17c8 <line:66:5, col:58> col:24 operator= 'IPRewriterPattern &(const IPRewriterPattern &)'
| `-ParmVarDecl 0x5557f85d16d8 <col:34, col:57> col:58 'const IPRewriterPattern &'
`-CXXDestructorDecl 0x5557f85d19b8 <line:12:7> col:7 implicit ~IPRewriterPattern 'void ()' inline default trivial noexcept-unevaluated 0x5557f85d19b8

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterPattern = type { %class.IPAddress, i32, %class.IPAddress, i32, i32, i32, i8, i8, i8, i32 }
  NonVirtualBaseLLVMType:%class.IPRewriterPattern = type { %class.IPAddress, i32, %class.IPAddress, i32, i32, i32, i8, i8, i8, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPMapper
         0 |   (IPMapper vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f861b630 prev 0x5557f85ec830 <../elements/ip/iprewriterbase.hh:185:1, line:197:1> line:185:7 class IPMapper definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f861b728 <col:1, col:7> col:7 implicit referenced class IPMapper
|-AccessSpecDecl 0x5557f861b7b8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5557f861b818 <line:187:5, col:18> col:5 IPMapper 'void ()'
| `-CompoundStmt 0x5557f861c238 <col:16, col:18>
|-CXXDestructorDecl 0x5557f861b908 <line:188:5, col:27> col:13 ~IPMapper 'void () noexcept' virtual
| `-CompoundStmt 0x5557f861c248 <col:25, col:27>
|-CXXMethodDecl 0x5557f861bbd8 <line:190:5, line:191:24> line:190:18 notify_rewriter 'void (IPRewriterBase *, IPRewriterInput *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5557f861ba00 <col:34, col:50> col:50 user 'IPRewriterBase *'
| |-ParmVarDecl 0x5557f861ba78 <col:56, col:73> col:73 input 'IPRewriterInput *'
| `-ParmVarDecl 0x5557f861baf0 <line:191:6, col:20> col:20 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f861bf90 <line:192:5, line:195:31> line:192:17 rewrite_flowid 'int (IPRewriterInput *, const IPFlowID &, IPFlowID &, Packet *, int)' virtual
| |-ParmVarDecl 0x5557f861bca0 <col:32, col:49> col:49 input 'IPRewriterInput *'
| |-ParmVarDecl 0x5557f861bd18 <line:193:11, col:27> col:27 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x5557f861bd90 <line:194:11, col:21> col:21 rewritten_flowid 'IPFlowID &'
| |-ParmVarDecl 0x5557f861be08 <line:195:11, col:19> col:19 p 'Packet *'
| `-ParmVarDecl 0x5557f861be88 <col:22, col:26> col:26 mapid 'int'
`-CXXMethodDecl 0x5557f861c0b8 <line:185:7> col:7 implicit operator= 'IPMapper &(const IPMapper &)' inline default noexcept-unevaluated 0x5557f861c0b8
  `-ParmVarDecl 0x5557f861c1c8 <col:7> col:7 'const IPMapper &'

Layout: <CGRecordLayout
  LLVMType:%class.IPMapper = type { i32 (...)** }
  NonVirtualBaseLLVMType:%class.IPMapper = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85ed0b8 <../elements/ip/iprewriterbase.hh:23:5, line:26:5> line:23:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x5557f85ed1e8 <line:24:2, col:21> col:21 referenced pattern 'IPRewriterPattern *'
|-FieldDecl 0x5557f85ed278 <line:25:2, col:12> col:12 mapper 'IPMapper *'
|-CXXConstructorDecl 0x5557f85edd38 <line:23:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557f85ee168 <col:5>
|-CXXConstructorDecl 0x5557f85ede38 <col:5> col:5 implicit constexpr  'void (const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &)' inline default trivial noexcept-unevaluated 0x5557f85ede38
| `-ParmVarDecl 0x5557f85edf48 <col:5> col:5 'const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &'
`-CXXConstructorDecl 0x5557f85edfe8 <col:5> col:5 implicit constexpr  'void (IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&)' inline default trivial noexcept-unevaluated 0x5557f85edfe8
  `-ParmVarDecl 0x5557f85ee0f8 <col:5> col:5 'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon.3 = type { %class.IPRewriterPattern* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85ec970 prev 0x5557f85d2310 <../elements/ip/iprewriterbase.hh:11:1, line:40:1> line:11:7 referenced class IPRewriterInput definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5557f85eca68 <col:1, col:7> col:7 implicit referenced class IPRewriterInput
|-AccessSpecDecl 0x5557f85ecaf8 <col:25, col:31> col:25 public
|-EnumDecl 0x5557f85ecb20 <line:12:5, line:14:5> line:12:5
| |-EnumConstantDecl 0x5557f85ecbe0 <line:13:2> col:2 referenced i_drop 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-EnumConstantDecl 0x5557f85ecc30 <col:10> col:10 i_nochange 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-EnumConstantDecl 0x5557f85ecc80 <col:22> col:22 i_keep 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-EnumConstantDecl 0x5557f85eccd0 <col:30> col:30 i_pattern 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| `-EnumConstantDecl 0x5557f85ecd20 <col:41> col:41 i_mapper 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
|-FieldDecl 0x5557f85ecda8 <line:15:5, col:21> col:21 owner 'IPRewriterBase *'
|-FieldDecl 0x5557f85ece10 <line:16:5, col:9> col:9 owner_input 'int'
|-FieldDecl 0x5557f85ece78 <line:17:5, col:9> col:9 kind 'int'
|-FieldDecl 0x5557f85ecee0 <line:18:5, col:9> col:9 foutput 'int'
|-FieldDecl 0x5557f85ecf40 <line:19:5, col:21> col:21 referenced reply_element 'IPRewriterBase *'
|-FieldDecl 0x5557f85ecfa8 <line:20:5, col:9> col:9 routput 'int'
|-FieldDecl 0x5557f85ed008 <line:21:5, col:14> col:14 count 'uint32_t':'unsigned int'
|-FieldDecl 0x5557f85ed068 <line:22:5, col:14> col:14 failures 'uint32_t':'unsigned int'
|-CXXRecordDecl 0x5557f85ed0b8 <line:23:5, line:26:5> line:23:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x5557f85ed1e8 <line:24:2, col:21> col:21 referenced pattern 'IPRewriterPattern *'
| |-FieldDecl 0x5557f85ed278 <line:25:2, col:12> col:12 mapper 'IPMapper *'
| |-CXXConstructorDecl 0x5557f85edd38 <line:23:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5557f85ee168 <col:5>
| |-CXXConstructorDecl 0x5557f85ede38 <col:5> col:5 implicit constexpr  'void (const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &)' inline default trivial noexcept-unevaluated 0x5557f85ede38
| | `-ParmVarDecl 0x5557f85edf48 <col:5> col:5 'const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &'
| `-CXXConstructorDecl 0x5557f85edfe8 <col:5> col:5 implicit constexpr  'void (IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&)' inline default trivial noexcept-unevaluated 0x5557f85edfe8
|   `-ParmVarDecl 0x5557f85ee0f8 <col:5> col:5 'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&'
|-FieldDecl 0x5557f85ed338 <col:5, line:26:7> col:7 referenced u 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)'
|-CXXConstructorDecl 0x5557f85ed3d8 <line:28:5, line:31:5> line:28:5 IPRewriterInput 'void ()'
| |-CXXCtorInitializer Field 0x5557f85ece78 'kind' 'int'
| | `-ImplicitCastExpr 0x5557f85edae0 <line:29:9> 'int' <IntegralCast>
| |   `-DeclRefExpr 0x5557f85edaa0 <col:9> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)' EnumConstant 0x5557f85ecbe0 'i_drop' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-CXXCtorInitializer Field 0x5557f85ecee0 'foutput' 'int'
| | `-UnaryOperator 0x5557f85edb40 <col:26, col:27> 'int' prefix '-'
| |   `-IntegerLiteral 0x5557f85edb20 <col:27> 'int' 1
| |-CXXCtorInitializer Field 0x5557f85ecfa8 'routput' 'int'
| | `-UnaryOperator 0x5557f85edbc0 <col:39, col:40> 'int' prefix '-'
| |   `-IntegerLiteral 0x5557f85edba0 <col:40> 'int' 1
| |-CXXCtorInitializer Field 0x5557f85ed008 'count' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f85edc60 <col:50> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f85edc20 <col:50> 'int' 0
| |-CXXCtorInitializer Field 0x5557f85ed068 'failures' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f85edce0 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5557f85edca0 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5557f85ed338 'u' 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)'
| | `-CXXConstructExpr 0x5557f85ee178 <line:28:5> 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)' 'void () noexcept'
| `-CompoundStmt 0x5557f85ee2c0 <line:29:66, line:31:5>
|   `-BinaryOperator 0x5557f85ee2a0 <line:30:2, col:14> 'IPRewriterPattern *' lvalue '='
|     |-MemberExpr 0x5557f85ee238 <col:2, col:4> 'IPRewriterPattern *' lvalue .pattern 0x5557f85ed1e8
|     | `-MemberExpr 0x5557f85ee208 <col:2> 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)' lvalue ->u 0x5557f85ed338
|     |   `-CXXThisExpr 0x5557f85ee1f8 <col:2> 'IPRewriterInput *' implicit this
|     `-ImplicitCastExpr 0x5557f85ee288 <col:14> 'IPRewriterPattern *' <NullToPointer>
|       `-IntegerLiteral 0x5557f85ee268 <col:14> 'int' 0
|-EnumDecl 0x5557f85ed480 <line:33:5, line:35:5> line:33:5
| |-EnumConstantDecl 0x5557f85ed580 <line:34:2, col:18> col:2 referenced mapid_default 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
| | `-ImplicitCastExpr 0x5557f85ed660 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f85ed560 <col:18> 'int' Int: 0
| |     `-IntegerLiteral 0x5557f85ed540 <col:18> 'int' 0
| `-EnumConstantDecl 0x5557f85ed610 <col:21, col:44> col:21 mapid_iprewriter_udp 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
|   `-ImplicitCastExpr 0x5557f85ed678 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f85ed5f0 <col:44> 'int' Int: 1
|       `-IntegerLiteral 0x5557f85ed5d0 <col:44> 'int' 1
`-CXXMethodDecl 0x5557f85ed910 <line:37:5, line:39:46> line:37:44 rewrite_flowid 'int (const IPFlowID &, IPFlowID &, Packet *, int)'
  |-ParmVarDecl 0x5557f85ed6a0 <col:59, col:75> col:75 flowid 'const IPFlowID &'
  |-ParmVarDecl 0x5557f85ed718 <line:38:10, col:20> col:20 rewritten_flowid 'IPFlowID &'
  |-ParmVarDecl 0x5557f85ed790 <line:39:10, col:18> col:18 p 'Packet *'
  |-ParmVarDecl 0x5557f85ed810 <col:21, col:33> col:25 mapid 'int' cinit
  | `-ImplicitCastExpr 0x5557f85eda88 <col:33> 'int' <IntegralCast>
  |   `-DeclRefExpr 0x5557f85eda68 <col:33> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)' EnumConstant 0x5557f85ed580 'mapid_default' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
  |-NoInlineAttr 0x5557f85ed9d0 <line:37:20>
  `-OptimizeNoneAttr 0x5557f85eda28 <col:30>

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterInput = type { %class.IPRewriterBase*, i32, i32, i32, %class.IPRewriterBase*, i32, i32, i32, %union.anon.3 }
  NonVirtualBaseLLVMType:%class.IPRewriterInput = type { %class.IPRewriterBase*, i32, i32, i32, %class.IPRewriterBase*, i32, i32, i32, %union.anon.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85d4c50 prev 0x5557f85d21d0 <../elements/ip/iprwmapping.hh:68:1, line:174:1> line:68:7 referenced class IPRewriterFlow definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f85d4d48 <col:1, col:7> col:7 implicit referenced class IPRewriterFlow
|-AccessSpecDecl 0x5557f85d4dd8 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x5557f85d51f8 <line:70:5, line:72:61> line:70:5 used IPRewriterFlow 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, uint8_t, bool, click_jiffies_t)'
| |-ParmVarDecl 0x5557f85d4e10 <col:20, col:37> col:37 owner 'IPRewriterInput *'
| |-ParmVarDecl 0x5557f85d4e88 <col:44, col:60> col:60 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x5557f85d4f00 <line:71:6, col:22> col:22 rewritten_flowid 'const IPFlowID &'
| |-ParmVarDecl 0x5557f85d4f78 <line:72:6, col:14> col:14 ip_p 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x5557f85d4ff0 <col:20, col:25> col:25 guaranteed 'bool'
| `-ParmVarDecl 0x5557f85d5068 <col:37, col:53> col:53 expiry_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5557f85d53d8 <line:74:5, line:76:5> line:74:22 used entry 'IPRewriterEntry &(bool)'
| |-ParmVarDecl 0x5557f85d52e0 <col:28, col:33> col:33 used direction 'bool'
| `-CompoundStmt 0x5557f85d91d0 <col:44, line:76:5>
|   `-ReturnStmt 0x5557f85d91c0 <line:75:2, col:21>
|     `-ArraySubscriptExpr 0x5557f85d91a0 <col:9, col:21> 'IPRewriterEntry' lvalue
|       |-ImplicitCastExpr 0x5557f85d9170 <col:9> 'IPRewriterEntry *' <ArrayToPointerDecay>
|       | `-MemberExpr 0x5557f85d9120 <col:9> 'IPRewriterEntry [2]' lvalue ->_e 0x5557f85d79a8
|       |   `-CXXThisExpr 0x5557f85d9110 <col:9> 'IPRewriterFlow *' implicit this
|       `-ImplicitCastExpr 0x5557f85d9188 <col:12> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x5557f85d9150 <col:12> 'bool' lvalue ParmVar 0x5557f85d52e0 'direction' 'bool'
|-CXXMethodDecl 0x5557f85d5588 <line:77:5, line:79:5> line:77:28 entry 'const IPRewriterEntry &(bool) const'
| |-ParmVarDecl 0x5557f85d5490 <col:34, col:39> col:39 used direction 'bool'
| `-CompoundStmt 0x5557f85d92e8 <col:56, line:79:5>
|   `-ReturnStmt 0x5557f85d92d8 <line:78:2, col:21>
|     `-ArraySubscriptExpr 0x5557f85d92b8 <col:9, col:21> 'const IPRewriterEntry' lvalue
|       |-ImplicitCastExpr 0x5557f85d9288 <col:9> 'const IPRewriterEntry *' <ArrayToPointerDecay>
|       | `-MemberExpr 0x5557f85d91f8 <col:9> 'IPRewriterEntry const[2]' lvalue ->_e 0x5557f85d79a8
|       |   `-CXXThisExpr 0x5557f85d91e8 <col:9> 'const IPRewriterFlow *' implicit this
|       `-ImplicitCastExpr 0x5557f85d92a0 <col:12> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x5557f85d9228 <col:12> 'bool' lvalue ParmVar 0x5557f85d5490 'direction' 'bool'
|-CXXMethodDecl 0x5557f85d5650 <line:83:5, line:85:5> line:83:21 used expiry 'click_jiffies_t () const'
| `-CompoundStmt 0x5557f85d9368 <col:36, line:85:5>
|   `-ReturnStmt 0x5557f85d9358 <line:84:2, col:9>
|     `-ImplicitCastExpr 0x5557f85d9340 <col:9> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5557f85d9310 <col:9> 'const click_jiffies_t':'const unsigned int' lvalue ->_expiry_j 0x5557f85d7ac8
|         `-CXXThisExpr 0x5557f85d9300 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x5557f85d57f8 <line:89:5, line:91:5> line:89:10 expired 'bool (click_jiffies_t) const'
| |-ParmVarDecl 0x5557f85d5700 <col:18, col:34> col:34 used now_j 'click_jiffies_t':'unsigned int'
| `-CompoundStmt 0x5557f85d9588 <col:47, line:91:5>
|   `-ReturnStmt 0x5557f85d9578 <line:90:2, col:67>
|     `-UnaryOperator 0x5557f85d9560 <col:9, col:67> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x5557f85d9540 <col:10, col:67> 'bool'
|         `-BinaryOperator 0x5557f85d9520 <col:11, col:66> 'bool' '<'
|           |-CStyleCastExpr 0x5557f85d94d8 <col:11, col:62> 'click_jiffies_difference_t':'int' <NoOp>
|           | `-ImplicitCastExpr 0x5557f85d94c0 <col:40, col:62> 'click_jiffies_difference_t':'int' <IntegralCast> part_of_explicit_cast
|           |   `-ParenExpr 0x5557f85d94a0 <col:40, col:62> 'unsigned int'
|           |     `-BinaryOperator 0x5557f85d9450 <col:41, col:61> 'unsigned int' '-'
|           |       |-ImplicitCastExpr 0x5557f85d9420 <col:41, col:47> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|           |       | `-ParenExpr 0x5557f85d93a0 <col:41, col:47> 'click_jiffies_t':'unsigned int' lvalue
|           |       |   `-DeclRefExpr 0x5557f85d9380 <col:42> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x5557f85d5700 'now_j' 'click_jiffies_t':'unsigned int'
|           |       `-ImplicitCastExpr 0x5557f85d9438 <col:51, col:61> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|           |         `-ParenExpr 0x5557f85d9400 <col:51, col:61> 'const click_jiffies_t':'const unsigned int' lvalue
|           |           `-MemberExpr 0x5557f85d93d0 <col:52> 'const click_jiffies_t':'const unsigned int' lvalue ->_expiry_j 0x5557f85d7ac8
|           |             `-CXXThisExpr 0x5557f85d93c0 <col:52> 'const IPRewriterFlow *' implicit this
|           `-IntegerLiteral 0x5557f85d9500 <col:66> 'int' 0
|-CXXMethodDecl 0x5557f85d58c0 <line:94:5, line:96:5> line:94:10 guaranteed 'bool () const'
| `-CompoundStmt 0x5557f85d9608 <col:29, line:96:5>
|   `-ReturnStmt 0x5557f85d95f8 <line:95:2, col:9>
|     `-ImplicitCastExpr 0x5557f85d95e0 <col:9> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5557f85d95b0 <col:9> 'const bool' lvalue ->_guaranteed 0x5557f85d7c88
|         `-CXXThisExpr 0x5557f85d95a0 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x5557f85d5ba8 <line:102:5, line:103:34> line:102:10 used change_expiry 'void (IPRewriterHeap *, bool, click_jiffies_t)'
| |-ParmVarDecl 0x5557f85d5998 <col:24, col:40> col:40 h 'IPRewriterHeap *'
| |-ParmVarDecl 0x5557f85d5a10 <col:43, col:48> col:48 guaranteed 'bool'
| `-ParmVarDecl 0x5557f85d5a88 <line:103:10, col:26> col:26 expiry_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5557f85d5f48 <line:114:5, line:118:5> line:114:10 change_expiry_by_timeout 'void (IPRewriterHeap *, click_jiffies_t, const uint32_t *)'
| |-ParmVarDecl 0x5557f85d5c70 <col:35, col:51> col:51 used h 'IPRewriterHeap *'
| |-ParmVarDecl 0x5557f85d5ce8 <col:54, col:70> col:70 used now_j 'click_jiffies_t':'unsigned int'
| |-ParmVarDecl 0x5557f85d5e20 <line:115:7, col:32> col:22 used timeouts 'const uint32_t *':'const uint32_t *'
| `-CompoundStmt 0x5557f85d9aa8 <col:35, line:118:5>
|   |-DeclStmt 0x5557f85d9878 <line:116:2, col:60>
|   | `-VarDecl 0x5557f85d9630 <col:2, col:59> col:11 used timeout 'uint32_t':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x5557f85d9860 <col:21, col:59> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     `-ConditionalOperator 0x5557f85d9830 <col:21, col:59> 'const uint32_t':'const unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x5557f85d9818 <col:21, col:31> 'bool' <IntegralToBoolean>
|   |       | `-ImplicitCastExpr 0x5557f85d9800 <col:21, col:31> 'uint32_t':'unsigned int' <LValueToRValue>
|   |       |   `-ArraySubscriptExpr 0x5557f85d96f0 <col:21, col:31> 'const uint32_t':'const unsigned int' lvalue
|   |       |     |-ImplicitCastExpr 0x5557f85d96d8 <col:21> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x5557f85d9698 <col:21> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x5557f85d5e20 'timeouts' 'const uint32_t *':'const uint32_t *'
|   |       |     `-IntegerLiteral 0x5557f85d96b8 <col:30> 'int' 1
|   |       |-ArraySubscriptExpr 0x5557f85d9768 <col:35, col:45> 'const uint32_t':'const unsigned int' lvalue
|   |       | |-ImplicitCastExpr 0x5557f85d9750 <col:35> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x5557f85d9710 <col:35> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x5557f85d5e20 'timeouts' 'const uint32_t *':'const uint32_t *'
|   |       | `-IntegerLiteral 0x5557f85d9730 <col:44> 'int' 1
|   |       `-ArraySubscriptExpr 0x5557f85d97e0 <col:49, col:59> 'const uint32_t':'const unsigned int' lvalue
|   |         |-ImplicitCastExpr 0x5557f85d97c8 <col:49> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5557f85d9788 <col:49> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x5557f85d5e20 'timeouts' 'const uint32_t *':'const uint32_t *'
|   |         `-IntegerLiteral 0x5557f85d97a8 <col:58> 'int' 0
|   `-CXXMemberCallExpr 0x5557f85d9a58 <line:117:2, col:49> 'void'
|     |-MemberExpr 0x5557f85d98a0 <col:2> '<bound member function type>' ->change_expiry 0x5557f85d5ba8
|     | `-CXXThisExpr 0x5557f85d9890 <col:2> 'IPRewriterFlow *' implicit this
|     |-ImplicitCastExpr 0x5557f85d9a90 <col:16> 'IPRewriterHeap *' <LValueToRValue>
|     | `-DeclRefExpr 0x5557f85d98d0 <col:16> 'IPRewriterHeap *' lvalue ParmVar 0x5557f85d5c70 'h' 'IPRewriterHeap *'
|     |-UnaryOperator 0x5557f85d99b0 <col:19, col:31> 'bool' prefix '!' cannot overflow
|     | `-UnaryOperator 0x5557f85d9998 <col:20, col:31> 'bool' prefix '!' cannot overflow
|     |   `-ImplicitCastExpr 0x5557f85d9980 <col:21, col:31> 'bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x5557f85d9968 <col:21, col:31> 'uint32_t':'unsigned int' <LValueToRValue>
|     |       `-ArraySubscriptExpr 0x5557f85d9948 <col:21, col:31> 'const uint32_t':'const unsigned int' lvalue
|     |         |-ImplicitCastExpr 0x5557f85d9930 <col:21> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x5557f85d98f0 <col:21> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x5557f85d5e20 'timeouts' 'const uint32_t *':'const uint32_t *'
|     |         `-IntegerLiteral 0x5557f85d9910 <col:30> 'int' 1
|     `-BinaryOperator 0x5557f85d9a38 <col:34, col:42> 'unsigned int' '+'
|       |-ImplicitCastExpr 0x5557f85d9a08 <col:34> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5557f85d99c8 <col:34> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x5557f85d5ce8 'now_j' 'click_jiffies_t':'unsigned int'
|       `-ImplicitCastExpr 0x5557f85d9a20 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5557f85d99e8 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x5557f85d9630 'timeout' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f85d6078 <line:120:5, line:122:5> line:120:13 ip_p 'uint8_t () const'
| `-CompoundStmt 0x5557f85d9b30 <col:26, line:122:5>
|   `-ReturnStmt 0x5557f85d9b20 <line:121:2, col:9>
|     `-ImplicitCastExpr 0x5557f85d9b08 <col:9> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-MemberExpr 0x5557f85d9ad8 <col:9> 'const uint8_t':'const unsigned char' lvalue ->_ip_p 0x5557f85d7bc8
|         `-CXXThisExpr 0x5557f85d9ac8 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x5557f85d6168 <line:124:5, line:126:5> line:124:22 used owner 'IPRewriterInput *() const'
| `-CompoundStmt 0x5557f85d9bb0 <col:36, line:126:5>
|   `-ReturnStmt 0x5557f85d9ba0 <line:125:2, col:9>
|     `-ImplicitCastExpr 0x5557f85d9b88 <col:9> 'IPRewriterInput *' <LValueToRValue>
|       `-MemberExpr 0x5557f85d9b58 <col:9> 'IPRewriterInput *const' lvalue ->_owner 0x5557f85d7d48
|         `-CXXThisExpr 0x5557f85d9b48 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x5557f85d6228 <line:128:5, line:130:5> line:128:13 reply_anno 'uint8_t () const'
| `-CompoundStmt 0x5557f85d9c30 <col:32, line:130:5>
|   `-ReturnStmt 0x5557f85d9c20 <line:129:2, col:9>
|     `-ImplicitCastExpr 0x5557f85d9c08 <col:9> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-MemberExpr 0x5557f85d9bd8 <col:9> 'const uint8_t':'const unsigned char' lvalue ->_reply_anno 0x5557f85d7ce8
|         `-CXXThisExpr 0x5557f85d9bc8 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x5557f85d6398 <line:131:5, line:133:5> line:131:10 set_reply_anno 'void (uint8_t)'
| |-ParmVarDecl 0x5557f85d62d8 <col:25, col:33> col:33 used reply_anno 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5557f85d9ce0 <col:45, line:133:5>
|   `-BinaryOperator 0x5557f85d9cc0 <line:132:2, col:16> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5557f85d9c58 <col:2> 'uint8_t':'unsigned char' lvalue ->_reply_anno 0x5557f85d7ce8
|     | `-CXXThisExpr 0x5557f85d9c48 <col:2> 'IPRewriterFlow *' implicit this
|     `-ImplicitCastExpr 0x5557f85d9ca8 <col:16> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5557f85d9c88 <col:16> 'uint8_t':'unsigned char' lvalue ParmVar 0x5557f85d62d8 'reply_anno' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5557f85d6668 <line:135:5, line:136:27> line:135:24 used update_csum 'void (uint16_t *, bool, uint16_t)' static inline
| |-ParmVarDecl 0x5557f85d6450 <col:36, col:46> col:46 csum 'uint16_t *'
| |-ParmVarDecl 0x5557f85d64c8 <col:52, col:57> col:57 direction 'bool'
| `-ParmVarDecl 0x5557f85d6540 <line:136:8, col:17> col:17 csum_delta 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5557f85d6908 <line:138:5, col:65> col:10 apply 'void (WritablePacket *, bool, unsigned int)'
| |-ParmVarDecl 0x5557f85d6730 <col:16, col:32> col:32 p 'WritablePacket *'
| |-ParmVarDecl 0x5557f85d67a8 <col:35, col:40> col:40 direction 'bool'
| `-ParmVarDecl 0x5557f85d6828 <col:51, col:60> col:60 annos 'unsigned int'
|-CXXMethodDecl 0x5557f85d6be8 <line:140:5, col:72> col:10 unparse 'void (StringAccum &, bool, click_jiffies_t) const'
| |-ParmVarDecl 0x5557f85d69d0 <col:18, col:31> col:31 sa 'StringAccum &'
| |-ParmVarDecl 0x5557f85d6a48 <col:35, col:40> col:40 direction 'bool'
| `-ParmVarDecl 0x5557f85d6ac0 <col:51, col:67> col:67 now 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5557f85d6e40 <line:141:5, col:78> col:10 unparse_ports 'void (StringAccum &, bool, click_jiffies_t) const'
| |-ParmVarDecl 0x5557f85d6cb0 <col:24, col:37> col:37 sa 'StringAccum &'
| |-ParmVarDecl 0x5557f85d6d28 <col:41, col:46> col:46 direction 'bool'
| `-ParmVarDecl 0x5557f85d6da0 <col:57, col:73> col:73 now 'click_jiffies_t':'unsigned int'
|-CXXRecordDecl 0x5557f85d6ef8 <line:143:5, line:147:5> line:143:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5557f85d7018 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x5557f85d7238 <line:144:2, line:146:2> line:144:14 operator() 'bool (IPRewriterFlow *, IPRewriterFlow *)' inline
|   |-ParmVarDecl 0x5557f85d70b8 <col:25, col:41> col:41 used a 'IPRewriterFlow *'
|   |-ParmVarDecl 0x5557f85d7130 <col:44, col:60> col:60 used b 'IPRewriterFlow *'
|   `-CompoundStmt 0x5557f85d9f98 <col:63, line:146:2>
|     `-ReturnStmt 0x5557f85d9f88 <line:145:6, col:78>
|       `-ParenExpr 0x5557f85d9f68 <col:13, col:78> 'bool'
|         `-BinaryOperator 0x5557f85d9f48 <col:14, col:77> 'bool' '<'
|           |-CStyleCastExpr 0x5557f85d9f00 <col:14, col:73> 'click_jiffies_difference_t':'int' <NoOp>
|           | `-ImplicitCastExpr 0x5557f85d9ee8 <col:43, col:73> 'click_jiffies_difference_t':'int' <IntegralCast> part_of_explicit_cast
|           |   `-ParenExpr 0x5557f85d9ec8 <col:43, col:73> 'unsigned int'
|           |     `-BinaryOperator 0x5557f85d9e78 <col:44, col:72> 'unsigned int' '-'
|           |       |-ParenExpr 0x5557f85d9d98 <col:44, col:56> 'click_jiffies_t':'unsigned int'
|           |       | `-CXXMemberCallExpr 0x5557f85d9d60 <col:45, col:55> 'click_jiffies_t':'unsigned int'
|           |       |   `-MemberExpr 0x5557f85d9d30 <col:45, col:48> '<bound member function type>' ->expiry 0x5557f85d5650
|           |       |     `-ImplicitCastExpr 0x5557f85d9d80 <col:45> 'const IPRewriterFlow *' <NoOp>
|           |       |       `-ImplicitCastExpr 0x5557f85d9d18 <col:45> 'IPRewriterFlow *' <LValueToRValue>
|           |       |         `-DeclRefExpr 0x5557f85d9cf8 <col:45> 'IPRewriterFlow *' lvalue ParmVar 0x5557f85d70b8 'a' 'IPRewriterFlow *'
|           |       `-ParenExpr 0x5557f85d9e58 <col:60, col:72> 'click_jiffies_t':'unsigned int'
|           |         `-CXXMemberCallExpr 0x5557f85d9e20 <col:61, col:71> 'click_jiffies_t':'unsigned int'
|           |           `-MemberExpr 0x5557f85d9df0 <col:61, col:64> '<bound member function type>' ->expiry 0x5557f85d5650
|           |             `-ImplicitCastExpr 0x5557f85d9e40 <col:61> 'const IPRewriterFlow *' <NoOp>
|           |               `-ImplicitCastExpr 0x5557f85d9dd8 <col:61> 'IPRewriterFlow *' <LValueToRValue>
|           |                 `-DeclRefExpr 0x5557f85d9db8 <col:61> 'IPRewriterFlow *' lvalue ParmVar 0x5557f85d7130 'b' 'IPRewriterFlow *'
|           `-IntegerLiteral 0x5557f85d9f28 <col:77> 'int' 0
|-CXXRecordDecl 0x5557f85d7300 <line:148:5, line:152:5> line:148:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5557f85d7418 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x5557f85d7678 <line:149:2, line:151:2> line:149:14 operator() 'void (IPRewriterFlow **, IPRewriterFlow **)' inline
|   |-ParmVarDecl 0x5557f85d74f0 <col:25, col:42> col:42 used begin 'IPRewriterFlow **'
|   |-ParmVarDecl 0x5557f85d7570 <col:49, col:66> col:66 used it 'IPRewriterFlow **'
|   `-CompoundStmt 0x5557f85da130 <col:70, line:151:2>
|     `-BinaryOperator 0x5557f85da110 <line:150:6, col:27> 'size_t':'unsigned long' lvalue bitfield '='
|       |-MemberExpr 0x5557f85da038 <col:6, col:13> 'size_t':'unsigned long' lvalue bitfield ->_place 0x5557f85d7b68
|       | `-ImplicitCastExpr 0x5557f85da020 <col:6, col:10> 'IPRewriterFlow *' <LValueToRValue>
|       |   `-ParenExpr 0x5557f85da000 <col:6, col:10> 'IPRewriterFlow *' lvalue
|       |     `-UnaryOperator 0x5557f85d9fe8 <col:7, col:8> 'IPRewriterFlow *' lvalue prefix '*' cannot overflow
|       |       `-ImplicitCastExpr 0x5557f85d9fd0 <col:8> 'IPRewriterFlow **' <LValueToRValue>
|       |         `-DeclRefExpr 0x5557f85d9fb0 <col:8> 'IPRewriterFlow **' lvalue ParmVar 0x5557f85d7570 'it' 'IPRewriterFlow **'
|       `-ImplicitCastExpr 0x5557f85da0f8 <col:22, col:27> 'size_t':'unsigned long' <IntegralCast>
|         `-BinaryOperator 0x5557f85da0d8 <col:22, col:27> 'long' '-'
|           |-ImplicitCastExpr 0x5557f85da0a8 <col:22> 'IPRewriterFlow **' <LValueToRValue>
|           | `-DeclRefExpr 0x5557f85da068 <col:22> 'IPRewriterFlow **' lvalue ParmVar 0x5557f85d7570 'it' 'IPRewriterFlow **'
|           `-ImplicitCastExpr 0x5557f85da0c0 <col:27> 'IPRewriterFlow **' <LValueToRValue>
|             `-DeclRefExpr 0x5557f85da088 <col:27> 'IPRewriterFlow **' lvalue ParmVar 0x5557f85d74f0 'begin' 'IPRewriterFlow **'
|-AccessSpecDecl 0x5557f85d7740 <line:154:3, col:12> col:3 protected
|-FieldDecl 0x5557f85d79a8 <line:156:5, col:25> col:21 referenced _e 'IPRewriterEntry [2]'
|-FieldDecl 0x5557f85d7a08 <line:157:5, col:14> col:14 referenced _ip_csum_delta 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f85d7a68 <line:158:5, col:14> col:14 referenced _udp_csum_delta 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f85d7ac8 <line:159:5, col:21> col:21 referenced _expiry_j 'click_jiffies_t':'unsigned int'
|-FieldDecl 0x5557f85d7b68 <line:160:5, col:21> col:12 referenced _place 'size_t':'unsigned long'
| `-ConstantExpr 0x5557f85d7b48 <col:21> 'int' Int: 32
|   `-IntegerLiteral 0x5557f85d7b18 <col:21> 'int' 32
|-FieldDecl 0x5557f85d7bc8 <line:161:5, col:13> col:13 referenced _ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5557f85d7c28 <line:162:5, col:13> col:13 _tflags 'uint8_t':'unsigned char'
|-FieldDecl 0x5557f85d7c88 <line:163:5, col:10> col:10 referenced _guaranteed 'bool'
|-FieldDecl 0x5557f85d7ce8 <line:164:5, col:13> col:13 referenced _reply_anno 'uint8_t':'unsigned char'
|-FieldDecl 0x5557f85d7d48 <line:165:5, col:22> col:22 referenced _owner 'IPRewriterInput *'
|-FriendDecl 0x5557f85d7df0 <line:167:5, col:18> col:12 'class IPRewriterBase':'IPRewriterBase'
|-FriendDecl 0x5557f85d7e80 <line:168:5, col:18> col:12 'class IPRewriterEntry':'IPRewriterEntry'
|-AccessSpecDecl 0x5557f85d7ec0 <line:170:3, col:10> col:3 private
|-CXXMethodDecl 0x5557f85d9050 <line:172:5, col:38> col:10 destroy 'void (IPRewriterHeap *)'
| `-ParmVarDecl 0x5557f85d7ef8 <col:18, col:34> col:34 heap 'IPRewriterHeap *'
|-CXXConstructorDecl 0x5557f862a148 <line:68:7> col:7 implicit constexpr IPRewriterFlow 'void (const IPRewriterFlow &)' inline default trivial noexcept-unevaluated 0x5557f862a148
| `-ParmVarDecl 0x5557f862a258 <col:7> col:7 'const IPRewriterFlow &'
|-CXXConstructorDecl 0x5557f862a3d8 <col:7> col:7 implicit constexpr IPRewriterFlow 'void (IPRewriterFlow &&)' inline default trivial noexcept-unevaluated 0x5557f862a3d8
| `-ParmVarDecl 0x5557f862a4e8 <col:7> col:7 'IPRewriterFlow &&'
`-CXXDestructorDecl 0x5557f862ab40 <col:7> col:7 implicit ~IPRewriterFlow 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterFlow = type { [2 x %class.IPRewriterEntry], i16, i16, i32, i32, i8, i8, i8, i8, %class.IPRewriterInput* }
  NonVirtualBaseLLVMType:%class.IPRewriterFlow = type { [2 x %class.IPRewriterEntry], i16, i16, i32, i32, i8, i8, i8, i8, %class.IPRewriterInput* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:32 IsSigned:0 StorageSize:32 StorageOffset:56>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8626e80 <../elements/ip/ipaddrpairrewriter.hh:119:5, line:132:5> line:119:11 referenced class IPAddrPairFlow definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPRewriterFlow'
|-CXXRecordDecl 0x5557f8626fd8 <col:5, col:11> col:11 implicit referenced class IPAddrPairFlow
|-AccessSpecDecl 0x5557f8627068 <col:52, col:58> col:52 public
|-CXXConstructorDecl 0x5557f8627418 <line:121:2, line:126:2> line:121:2 IPAddrPairFlow 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, bool, click_jiffies_t)'
| |-ParmVarDecl 0x5557f86270a0 <col:17, col:34> col:34 used owner 'IPRewriterInput *'
| |-ParmVarDecl 0x5557f8627118 <col:41, col:57> col:57 used flowid 'const IPFlowID &'
| |-ParmVarDecl 0x5557f8627190 <line:122:10, col:26> col:26 used rewritten_flowid 'const IPFlowID &'
| |-ParmVarDecl 0x5557f8627208 <line:123:10, col:15> col:15 used guaranteed 'bool'
| |-ParmVarDecl 0x5557f8627280 <col:27, col:43> col:43 used expiry_j 'click_jiffies_t':'unsigned int'
| |-CXXCtorInitializer 'IPRewriterFlow'
| | `-CXXConstructExpr 0x5557f862a5b8 <line:124:8, line:125:32> 'IPRewriterFlow' 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, uint8_t, bool, click_jiffies_t)'
| |   |-ImplicitCastExpr 0x5557f862a558 <line:124:23> 'IPRewriterInput *' <LValueToRValue>
| |   | `-DeclRefExpr 0x5557f8629cd8 <col:23> 'IPRewriterInput *' lvalue ParmVar 0x5557f86270a0 'owner' 'IPRewriterInput *'
| |   |-DeclRefExpr 0x5557f8629cf8 <col:30> 'const IPFlowID' lvalue ParmVar 0x5557f8627118 'flowid' 'const IPFlowID &'
| |   |-DeclRefExpr 0x5557f8629d18 <col:38> 'const IPFlowID' lvalue ParmVar 0x5557f8627190 'rewritten_flowid' 'const IPFlowID &'
| |   |-ImplicitCastExpr 0x5557f862a570 <line:125:9> 'uint8_t':'unsigned char' <IntegralCast>
| |   | `-IntegerLiteral 0x5557f8629d38 <col:9> 'int' 0
| |   |-ImplicitCastExpr 0x5557f862a588 <col:12> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x5557f8629d58 <col:12> 'bool' lvalue ParmVar 0x5557f8627208 'guaranteed' 'bool'
| |   `-ImplicitCastExpr 0x5557f862a5a0 <col:24> 'click_jiffies_t':'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x5557f8629d78 <col:24> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x5557f8627280 'expiry_j' 'click_jiffies_t':'unsigned int'
| `-CompoundStmt 0x5557f862a640 <col:34, line:126:2>
|-CXXMethodDecl 0x5557f8627690 <line:128:2, col:62> col:7 apply 'void (WritablePacket *, bool, unsigned int)'
| |-ParmVarDecl 0x5557f86274f8 <col:13, col:29> col:29 p 'WritablePacket *'
| |-ParmVarDecl 0x5557f8627570 <col:32, col:37> col:37 direction 'bool'
| `-ParmVarDecl 0x5557f86275f0 <col:48, col:57> col:57 annos 'unsigned int'
|-CXXMethodDecl 0x5557f8627910 <line:130:2, col:69> col:7 unparse 'void (StringAccum &, bool, click_jiffies_t) const'
| |-ParmVarDecl 0x5557f8627758 <col:15, col:28> col:28 sa 'StringAccum &'
| |-ParmVarDecl 0x5557f86277d0 <col:32, col:37> col:37 direction 'bool'
| `-ParmVarDecl 0x5557f8627848 <col:48, col:64> col:64 now 'click_jiffies_t':'unsigned int'
`-CXXDestructorDecl 0x5557f862aa58 <line:119:11> col:11 implicit referenced ~IPAddrPairFlow 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.IPAddrPairRewriter::IPAddrPairFlow" = type { %class.IPRewriterFlow }
  NonVirtualBaseLLVMType:%"class.IPAddrPairRewriter::IPAddrPairFlow" = type { %class.IPRewriterFlow }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8278ad0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f8278be8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5557f8278c78 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5557f8278d48 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5557f8278e30 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f8279048 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5557f8278ef0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f82791f8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5557f8279100 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5557f8279340 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5557f82792b0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5557f8279e60 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5557f8279dd0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f8279fa8 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5557f8279f18 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f827a070 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5557f827a1b8 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5557f827a128 <col:28> col:31 'int'
|-CXXMethodDecl 0x5557f827a280 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5557f827a3c8 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5557f827a338 <col:28> col:31 'int'
|-CXXMethodDecl 0x5557f827a548 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5557f827a480 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f827a690 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5557f827a600 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f827a758 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5557f827a918 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5557f827a808 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5557f827a880 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f827ab68 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5557f827a9d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557f827aa50 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f827ac18 <col:86> "" ""
|-CXXMethodDecl 0x5557f827ae88 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5557f827acf8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5557f827ad70 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f827b038 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5557f827af48 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5557f827b1e8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5557f827b0f0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5557f827b4b8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5557f827b2a0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5557f827b318 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5557f827b390 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f827b798 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5557f827b580 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5557f827b5f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557f827b670 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f827b850 <col:115> "" ""
|-AccessSpecDecl 0x5557f827b8c0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5557f827b8f8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f827c000 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5557f827c000
| `-ParmVarDecl 0x5557f827c108 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5557f827c1a8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5557f827c1a8
| `-ParmVarDecl 0x5557f827c2b8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5557f831aba8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557f85104a0 <col:7>
|-CXXConstructorDecl 0x5557f831ac80 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5557f831ac80
| `-ParmVarDecl 0x5557f831ad98 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5557f831ae08 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5557f831ae08
| `-ParmVarDecl 0x5557f831af18 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5557f8512e10 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f84fb528 prev 0x5557f84eda50 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f84fb620 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5557f84fb710 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5557f84fb838 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5557f84fb9b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5557f84fbb38 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5557f84fbcb8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5557f8510608 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557f8510e78 <col:11>
|-CXXDestructorDecl 0x5557f85106e0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5557f8510818 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5557f8510818
| `-ParmVarDecl 0x5557f8510928 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5557f85109c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5557f85109c8
| `-ParmVarDecl 0x5557f8510ad8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5557f8513808 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f8513918 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5557f8513b98 <col:11>
|   `-ReturnStmt 0x5557f8513b88 <col:11>
|     `-UnaryOperator 0x5557f8513b70 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f8513b60 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5557f8513988 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5557f8513988
  `-ParmVarDecl 0x5557f8513a98 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f84fbd20 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f84fbe38 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5557f84fbed8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5557f84fbf40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5557f84fbfa8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5557f84fc010 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5557f84fc070 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5557f84fc130 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5557f84fc190 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5557f84fc1f0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5557f8510518 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5557f84fbed8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5557f8510e88 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5557f8510ee0 <col:12>
|-CXXConstructorDecl 0x5557f8510b48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5557f8510b48
| `-ParmVarDecl 0x5557f8510c58 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5557f8510cf8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5557f8510cf8
| `-ParmVarDecl 0x5557f8510e08 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5557f8512ef0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f84e7120 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f84e72a8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5557f84e7338 <col:16, col:22> col:16 public
|-EnumDecl 0x5557f84e7360 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5557f84e7460 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5557f84e7540 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84e7440 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5557f84e7420 <col:21> 'int' 28
| `-EnumConstantDecl 0x5557f84e74f0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5557f84e7558 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f84e74d0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5557f84e74b0 <col:22> 'int' 64
|-CXXMethodDecl 0x5557f84e7898 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5557f84e7580 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557f84e7600 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5557f84e7678 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557f84e76f0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557f84e7958 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5557f84e7b58 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5557f84e79d0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5557f84e7a48 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557f84e7c08 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5557f84e7d68 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5557f84e7c78 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557f84e7e10 <col:72> warn_unused_result ""
|-TypedefDecl 0x5557f84e8140 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5557f84e80d0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5557f84e8070 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5557f84e8030 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5557f7fb62d0 'void'
|       |-PointerType 0x5557f8263460 'unsigned char *'
|       | `-BuiltinType 0x5557f7fb63d0 'unsigned char'
|       |-TypedefType 0x5557f805f6d0 'size_t' sugar
|       | |-Typedef 0x5557f8026b20 'size_t'
|       | `-BuiltinType 0x5557f7fb6430 'unsigned long'
|       `-PointerType 0x5557f7fb6ad0 'void *'
|         `-BuiltinType 0x5557f7fb62d0 'void'
|-CXXMethodDecl 0x5557f84e85b8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5557f84e81b0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5557f84e8228 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557f84e82c0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5557f84e8340 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5557f8506a70 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5557f8506a58 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5557f8506a20 <col:58> 'int' 0
| |-ParmVarDecl 0x5557f84e83c0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5557f8506a98 <col:76> 'int' 0
| |-ParmVarDecl 0x5557f84e8440 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5557f8506ab8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5557f84e8688 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5557f84e8708 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5557f84e87c8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5557f84e8868 <col:20>
| `-OptimizeNoneAttr 0x5557f84e88c0 <col:30>
|-CXXMethodDecl 0x5557f84e8938 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5557f84e89d8 <col:20>
| `-OptimizeNoneAttr 0x5557f84e8a30 <col:30>
|-CXXMethodDecl 0x5557f84e8aa8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5557f84e8b48 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5557f84e8bf8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5557f84e8c98 <col:20>
| |-OptimizeNoneAttr 0x5557f84e8cf0 <col:30>
| `-WarnUnusedResultAttr 0x5557f84e8d18 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5557f84e8d70 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5557f84e8e10 <col:20>
| `-OptimizeNoneAttr 0x5557f84e8e68 <col:30>
|-CXXMethodDecl 0x5557f84e8eb8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5557f84e8f58 <col:20>
| `-OptimizeNoneAttr 0x5557f84e8fb0 <col:30>
|-CXXMethodDecl 0x5557f84e8ff8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5557f84e9098 <col:20>
| `-OptimizeNoneAttr 0x5557f84e90f0 <col:30>
|-CXXMethodDecl 0x5557f84e9138 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84e91f8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84e92c0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5557f84e9388 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5557f84e9448 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84e9568 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5557f8506b80 <col:54, line:99:5>
|   `-ReturnStmt 0x5557f8506b70 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5557f8506b58 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5557f8506b28 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5557f8505918
|         `-CXXThisExpr 0x5557f8506b18 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5557f84e9708 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5557f84e9618 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5557f8506c30 <col:67, line:103:5>
|   `-BinaryOperator 0x5557f8506c10 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5557f8506ba8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5557f8505918
|     | `-CXXThisExpr 0x5557f8506b98 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5557f8506bf8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5557f8506bd8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5557f84e9618 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5557f84e9800 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5557f8506cb0 <col:33, line:107:5>
|   `-ReturnStmt 0x5557f8506ca0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5557f8506c88 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5557f8506c58 <col:16> 'void *' lvalue ->_destructor_argument 0x5557f8505980
|         `-CXXThisExpr 0x5557f8506c48 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5557f84e98c0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5557f85072e0 <col:25, line:113:5>
|   |-ParenExpr 0x5557f8507028 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5557f8506ff8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5557f8506d68 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5557f8506d40 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5557f8506d08 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5557f8506cd8 <col:24> '<bound member function type>' ->shared 0x5557f84e8938
|   |   |       `-ImplicitCastExpr 0x5557f8506d28 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5557f8506cc8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5557f8506dc8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f8506da8 <col:42> 'int' 0
|   |   `-CallExpr 0x5557f8506f58 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5557f8506f40 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f8506f20 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f8506f98 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8506e38 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5557f8506fb0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8506e60 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f8506fc8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f8506e98 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5557f8506fe0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f8506f08 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f8506ef0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f8506eb8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5557f8507228 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5557f8507058 <col:2> 'unsigned char *' lvalue ->_head 0x5557f84fc330
|   | | `-CXXThisExpr 0x5557f8507048 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5557f8507210 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5557f85071f0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5557f8507098 <col:10> 'unsigned char *' lvalue ->_data 0x5557f84fc398
|   |     | `-CXXThisExpr 0x5557f8507088 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5557f85071d8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5557f85071b8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5557f85070d8 <col:18> 'unsigned char *' lvalue ->_tail 0x5557f85057f0
|   |         | `-CXXThisExpr 0x5557f85070c8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5557f85071a0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5557f8507180 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5557f8507118 <col:26> 'unsigned char *' lvalue ->_end 0x5557f8505858
|   |             | `-CXXThisExpr 0x5557f8507108 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5557f8507168 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5557f8507148 <col:33> 'int' 0
|   `-BinaryOperator 0x5557f85072c0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5557f8507258 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5557f8505918
|     | `-CXXThisExpr 0x5557f8507248 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5557f85072a8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5557f8507288 <col:16> 'int' 0
|-CXXMethodDecl 0x5557f84e9a00 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5557f84e9970 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557f84e9aa8 <col:20>
| |-OptimizeNoneAttr 0x5557f84e9b00 <col:30>
| `-WarnUnusedResultAttr 0x5557f84e9b28 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5557f84e9bf8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5557f84e9b68 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557f84e9ca0 <col:20>
| |-OptimizeNoneAttr 0x5557f84e9cf8 <col:30>
| `-WarnUnusedResultAttr 0x5557f84e9d20 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5557f84e9e58 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5557f84e9d60 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557f84e9f00 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5557f84ea000 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5557f84e9f70 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557f84ea0a8 <col:20>
| `-OptimizeNoneAttr 0x5557f84ea100 <col:30>
|-CXXMethodDecl 0x5557f84ea1c8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5557f84ea138 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557f84ea270 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5557f84ea370 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5557f84ea2e0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557f84ea418 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5557f84ea518 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5557f84ea488 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557f84ea5c0 <col:20>
| `-OptimizeNoneAttr 0x5557f84ea618 <col:30>
|-CXXMethodDecl 0x5557f84ea7a8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5557f84ea658 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5557f84ea6d0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5557f8506ad8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5557f84ea858 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5557f84eaa58 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5557f84ea8d0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5557f84ea948 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84eac68 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5557f84eab18 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5557f84eab90 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84eae78 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5557f84ead28 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5557f84eada8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5557f8506ae8 <col:39> 'int' 0
|-CXXMethodDecl 0x5557f84eaf48 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5557f84eb010 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5557f84eb0d8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5557f84eb198 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84eb278 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5557f84eb3c0 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5557f84eb330 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5557f84eb590 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5557f84eb480 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5557f84eb4f8 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84eb660 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5557f84eb720 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x5557f84eb7c0 <col:20>
| `-OptimizeNoneAttr 0x5557f84eb818 <col:30>
|-CXXMethodDecl 0x5557f84eb868 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5557f84eb908 <col:20>
| `-OptimizeNoneAttr 0x5557f84eb960 <col:30>
|-CXXMethodDecl 0x5557f84eb9b0 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5557f84eba70 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84ebb38 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5557f84ebbd8 <col:20>
| `-OptimizeNoneAttr 0x5557f84ebc30 <col:30>
|-CXXMethodDecl 0x5557f84ebd80 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5557f84ebc70 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5557f84ebce8 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84ebed0 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5557f84ebe40 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f84ebf98 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5557f84ec058 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5557f84ec0f8 <col:20>
| `-OptimizeNoneAttr 0x5557f84ec150 <col:30>
|-CXXMethodDecl 0x5557f84ec1a0 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5557f84ec240 <col:20>
| `-OptimizeNoneAttr 0x5557f84ec298 <col:30>
|-CXXMethodDecl 0x5557f84ec2e8 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5557f84ec3b0 <line:300:5, col:63> col:44 used transport_length 'int () const'
| |-NoInlineAttr 0x5557f84ec450 <col:20>
| `-OptimizeNoneAttr 0x5557f84ec4a8 <col:30>
|-CXXMethodDecl 0x5557f84ec4f0 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5557f84ec608 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5557f84ec778 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5557f84ec6b8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5557f84ec868 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5557f84ec908 <col:20>
| `-OptimizeNoneAttr 0x5557f84ec960 <col:30>
|-CXXMethodDecl 0x5557f84ec9b0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5557f84eca70 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f84ecca8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5557f84ecb20 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5557f84ecb98 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557f84ecd58 <col:20>
| `-OptimizeNoneAttr 0x5557f84ecdb0 <col:30>
|-CXXMethodDecl 0x5557f84ece58 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5557f84ecef8 <col:20>
| `-OptimizeNoneAttr 0x5557f84ecf50 <col:30>
|-CXXMethodDecl 0x5557f84ecfa0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5557f84ed040 <col:20>
| `-OptimizeNoneAttr 0x5557f84ed098 <col:30>
|-CXXMethodDecl 0x5557f84ed0e0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5557f84ed180 <col:20>
| `-OptimizeNoneAttr 0x5557f84ed1d8 <col:30>
|-CXXMethodDecl 0x5557f84ed2d8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5557f84ed210 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5557f84ed380 <col:20>
| `-OptimizeNoneAttr 0x5557f84ed3d8 <col:30>
|-CXXMethodDecl 0x5557f84ed598 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5557f84ed410 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5557f84ed488 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557f84ed648 <col:20>
| `-OptimizeNoneAttr 0x5557f84ed6a0 <col:30>
|-CXXMethodDecl 0x5557f84ed748 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5557f84ed868 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5557f84ed988 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5557f84eda28 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5557f84eda50 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5557f84edb78 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5557f84edc18 <col:20>
| `-OptimizeNoneAttr 0x5557f84edc70 <col:30>
|-CXXMethodDecl 0x5557f84edd18 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5557f84eddb8 <col:20>
| `-OptimizeNoneAttr 0x5557f84ede10 <col:30>
|-AccessSpecDecl 0x5557f84ede38 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5557f84ede60 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5557f84edf60 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5557f84edfb0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f84edf40 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5557f84edf20 <col:14> 'int' 48
|-CXXMethodDecl 0x5557f84ee018 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5557f84ee0b8 <col:20>
| `-OptimizeNoneAttr 0x5557f84ee110 <col:30>
|-CXXMethodDecl 0x5557f84ee188 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5557f84ee228 <col:20>
| `-OptimizeNoneAttr 0x5557f84ee280 <col:30>
|-CXXMethodDecl 0x5557f84ee348 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5557f84ee2b8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5557f84ee4e8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5557f84ee688 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5557f84ee598 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5557f84ee730 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5557f84ee830 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557f84eebe0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84ee810 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5557f84ee7f0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5557f84ee8c0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557f84eebf8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84ee8a0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5557f84ee880 <col:14> 'int' 1
| |-EnumConstantDecl 0x5557f84ee950 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557f84eec10 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84ee930 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5557f84ee910 <col:14> 'int' 2
| |-EnumConstantDecl 0x5557f84ee9e0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557f84eec28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84ee9c0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5557f84ee9a0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5557f84eea70 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557f84eec40 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84eea50 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5557f84eea30 <col:13> 'int' 4
| |-EnumConstantDecl 0x5557f84eeb00 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557f84eec58 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84eeae0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5557f84eeac0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5557f84eeb90 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5557f84eec70 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f84eeb70 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5557f84eeb50 <col:14> 'int' 6
|-CXXMethodDecl 0x5557f84eecd8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5557f84eed78 <col:20>
| `-OptimizeNoneAttr 0x5557f84eedd0 <col:30>
|-CXXMethodDecl 0x5557f84eeec8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5557f84eee08 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5557f84eef70 <col:20>
| `-OptimizeNoneAttr 0x5557f84eefc8 <col:30>
|-CXXMethodDecl 0x5557f84ef038 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5557f84ef160 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5557f84ef328 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5557f84ef260 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5557f84ef3f0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5557f84ef4b8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5557f84ef5f8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5557f84ef568 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5557f84ef6a0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5557f84ef7a0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5557f84ef9a0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84ef780 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5557f84ef760 <col:23> 'int' 0
| |-EnumConstantDecl 0x5557f84ef830 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5557f84ef9b8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84ef810 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5557f84ef7f0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5557f84ef8c0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5557f84ef9d0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84ef8a0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5557f84ef880 <col:24> 'int' 0
| `-EnumConstantDecl 0x5557f84ef950 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5557f84ef9e8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f84ef930 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5557f84ef910 <col:47> 'int' 16
|-CXXMethodDecl 0x5557f84efa48 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5557f84efbb8 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5557f84efaf8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5557f84efc60 <col:20>
| `-OptimizeNoneAttr 0x5557f84efcb8 <col:30>
|-CXXMethodDecl 0x5557f84efd08 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5557f8507400 <col:18, col:36>
|   `-ReturnStmt 0x5557f85073f0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5557f85073d8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5557f85073b8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5557f8507388 <col:27> '<bound member function type>' ->xanno 0x5557f84edd18
|           `-CXXThisExpr 0x5557f8507378 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5557f84efe00 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5557f8507510 <col:30, col:48>
|   `-ReturnStmt 0x5557f8507500 <col:32, col:45>
|     `-ImplicitCastExpr 0x5557f85074e8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5557f85074c8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5557f8507498 <col:39> '<bound member function type>' ->xanno 0x5557f84edb78
|           `-CXXThisExpr 0x5557f8507488 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5557f84efee8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5557f85076a8 <col:24, col:50>
|   `-ReturnStmt 0x5557f8507698 <col:26, col:47>
|     `-UnaryOperator 0x5557f8507680 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5557f8507660 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5557f8507648 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557f85075f8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5557f84fb838
|         |   `-CXXMemberCallExpr 0x5557f85075d8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5557f85075a8 <col:34> '<bound member function type>' ->xanno 0x5557f84edd18
|         |       `-CXXThisExpr 0x5557f8507598 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5557f8507628 <col:46> 'int' 0
|-CXXMethodDecl 0x5557f84effd8 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5557f8507878 <col:36, col:62>
|   `-ReturnStmt 0x5557f8507868 <col:38, col:59>
|     `-UnaryOperator 0x5557f8507850 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5557f8507830 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5557f8507818 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557f8507790 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5557f84fb838
|         |   `-CXXMemberCallExpr 0x5557f8507770 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5557f8507740 <col:46> '<bound member function type>' ->xanno 0x5557f84edb78
|         |       `-CXXThisExpr 0x5557f8507730 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5557f85077c0 <col:58> 'int' 0
|-CXXMethodDecl 0x5557f84f00f8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5557f8507a10 <col:26, col:53>
|   `-ReturnStmt 0x5557f8507a00 <col:28, col:50>
|     `-UnaryOperator 0x5557f85079e8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5557f85079c8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5557f85079b0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557f8507960 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5557f84fbb38
|         |   `-CXXMemberCallExpr 0x5557f8507940 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5557f8507910 <col:36> '<bound member function type>' ->xanno 0x5557f84edd18
|         |       `-CXXThisExpr 0x5557f8507900 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5557f8507990 <col:49> 'int' 0
|-CXXMethodDecl 0x5557f84f0218 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5557f8507be8 <col:38, col:65>
|   `-ReturnStmt 0x5557f8507bd8 <col:40, col:62>
|     `-UnaryOperator 0x5557f8507bc0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5557f8507ba0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5557f8507b88 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557f8507af8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5557f84fbb38
|         |   `-CXXMemberCallExpr 0x5557f8507ad8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5557f8507aa8 <col:48> '<bound member function type>' ->xanno 0x5557f84edb78
|         |       `-CXXThisExpr 0x5557f8507a98 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5557f8507b28 <col:61> 'int' 0
|-CXXMethodDecl 0x5557f84f03c8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5557f84f02d0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5557f85082b8 <col:34, line:463:5>
|   |-ParenExpr 0x5557f8508100 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5557f85080d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5557f8507d38 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f8507d08 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f8507c58 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f8507c40 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f8507c00 <col:23> 'int' lvalue ParmVar 0x5557f84f02d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f8507c20 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f8507ce8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f8507cb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f8507c78 <col:33> 'int' lvalue ParmVar 0x5557f84f02d0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5557f8507cd0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5557f8507c98 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5557f8507d98 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f8507d78 <col:56> 'int' 0
|   |   `-CallExpr 0x5557f8508030 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5557f8508018 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f8507ff8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f8508070 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8507e88 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5557f8508088 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8507eb8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f85080a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f8507ef0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5557f85080b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f8507fe0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f8507fc8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f8507f88 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5557f85082a8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5557f8508290 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5557f8508270 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5557f8508240 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557f85081f0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5557f84fb838
|         |   `-CXXMemberCallExpr 0x5557f85081d0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5557f85081a0 <col:9> '<bound member function type>' ->xanno 0x5557f84edb78
|         |       `-CXXThisExpr 0x5557f8508190 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5557f8508258 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5557f8508220 <col:21> 'int' lvalue ParmVar 0x5557f84f02d0 'i' 'int'
|-CXXMethodDecl 0x5557f84f0618 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5557f84f0488 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5557f84f0500 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5557f8508948 <col:40, line:472:5>
|   |-ParenExpr 0x5557f8508760 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5557f8508730 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5557f8508410 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f85083e0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f8508330 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f8508318 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f85082d8 <col:23> 'int' lvalue ParmVar 0x5557f84f0488 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f85082f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f85083c0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f8508390 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f8508350 <col:33> 'int' lvalue ParmVar 0x5557f84f0488 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5557f85083a8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5557f8508370 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5557f8508470 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f8508450 <col:56> 'int' 0
|   |   `-CallExpr 0x5557f8508690 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5557f8508678 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f8508658 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f85086d0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f85084e0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5557f85086e8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8508510 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f8508700 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f8508548 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5557f8508718 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f8508640 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f8508628 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f85085e8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5557f8508928 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5557f85088d0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5557f85088a0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5557f8508850 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5557f84fb838
|     | |   `-CXXMemberCallExpr 0x5557f8508830 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5557f8508800 <col:2> '<bound member function type>' ->xanno 0x5557f84edd18
|     | |       `-CXXThisExpr 0x5557f85087f0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5557f85088b8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5557f8508880 <col:14> 'int' lvalue ParmVar 0x5557f84f0488 'i' 'int'
|     `-ImplicitCastExpr 0x5557f8508910 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5557f85088f0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5557f84f0500 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5557f84f07d8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5557f84f06e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5557f85090c8 <col:36, line:485:5>
|   |-ParenExpr 0x5557f8508e30 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557f8508e00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557f8508ae0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f8508ab0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f85089c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f85089a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f8508968 <col:23> 'int' lvalue ParmVar 0x5557f84f06e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f8508988 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f8508a90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f8508a78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f85089e0 <col:33> 'int' lvalue ParmVar 0x5557f84f06e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f8508a58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f8508a40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f8508a00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557f8508a20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5557f8508b40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f8508b20 <col:60> 'int' 0
|   |   `-CallExpr 0x5557f8508d60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557f8508d48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f8508d28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f8508da0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8508bb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5557f8508db8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8508be8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f8508dd0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f8508c20 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5557f8508de8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f8508d10 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f8508cf8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f8508cb8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5557f85090b8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5557f85090a0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5557f8509088 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557f8509058 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5557f8508ff8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557f8508fc8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557f8508f40 <col:61, col:70> 'char const[48]' lvalue ->c 0x5557f84fb710
|             |   `-CXXMemberCallExpr 0x5557f8508f20 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557f8508ef0 <col:61> '<bound member function type>' ->xanno 0x5557f84edb78
|             |       `-CXXThisExpr 0x5557f8508ee0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557f8508fe0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557f8508f70 <col:74> 'int' lvalue ParmVar 0x5557f84f06e0 'i' 'int'
|-CXXMethodDecl 0x5557f84f0a28 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5557f84f0898 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557f84f0910 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5557f8509838 <col:42, line:500:5>
|   |-ParenExpr 0x5557f85095b0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557f8509580 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557f8509260 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f8509230 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f8509140 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f8509128 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f85090e8 <col:23> 'int' lvalue ParmVar 0x5557f84f0898 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f8509108 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f8509210 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f85091f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f8509160 <col:33> 'int' lvalue ParmVar 0x5557f84f0898 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f85091d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f85091c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f8509180 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557f85091a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5557f85092c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f85092a0 <col:60> 'int' 0
|   |   `-CallExpr 0x5557f85094e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557f85094c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f85094a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f8509520 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8509330 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5557f8509538 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8509368 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f8509550 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f85093a0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5557f8509568 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f8509490 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f8509478 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f8509438 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5557f8509818 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5557f85097a8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557f8509778 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5557f8509720 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557f85096f0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557f85096a0 <col:48, col:57> 'char [48]' lvalue ->c 0x5557f84fb710
|     |     |   `-CXXMemberCallExpr 0x5557f8509680 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557f8509650 <col:48> '<bound member function type>' ->xanno 0x5557f84edd18
|     |     |       `-CXXThisExpr 0x5557f8509640 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557f8509708 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557f85096d0 <col:61> 'int' lvalue ParmVar 0x5557f84f0898 'i' 'int'
|     `-ImplicitCastExpr 0x5557f8509800 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5557f85097c0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5557f84f0910 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5557f84f0be8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5557f84f0af0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5557f8509f98 <col:35, line:513:5>
|   |-ParenExpr 0x5557f8509ca8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557f8509c78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557f85099d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f85099a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f85098b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f8509898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f8509858 <col:23> 'int' lvalue ParmVar 0x5557f84f0af0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f8509878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f8509980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f8509968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f85098d0 <col:33> 'int' lvalue ParmVar 0x5557f84f0af0 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f8509948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f8509930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f85098f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557f8509910 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5557f8509a30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f8509a10 <col:60> 'int' 0
|   |   `-CallExpr 0x5557f8509bd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557f8509bc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f8509ba0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f8509c18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8509aa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5557f8509c30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8509ad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f8509c48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f8509b10 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5557f8509c60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f8509b88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f8509b70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f8509b30 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5557f8509f88 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5557f8509f70 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5557f8509f58 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557f8509f28 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5557f8509ea0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557f8509e70 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557f8509e20 <col:60, col:69> 'char const[48]' lvalue ->c 0x5557f84fb710
|             |   `-CXXMemberCallExpr 0x5557f8509e00 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557f8509dd0 <col:60> '<bound member function type>' ->xanno 0x5557f84edb78
|             |       `-CXXThisExpr 0x5557f8509dc0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557f8509e88 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557f8509e50 <col:73> 'int' lvalue ParmVar 0x5557f84f0af0 'i' 'int'
|-CXXMethodDecl 0x5557f84f0e38 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5557f84f0ca8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557f84f0d20 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5557f850a6a8 <col:41, line:528:5>
|   |-ParenExpr 0x5557f850a440 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557f850a410 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557f850a130 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f850a100 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f850a010 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f8509ff8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f8509fb8 <col:23> 'int' lvalue ParmVar 0x5557f84f0ca8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f8509fd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f850a0e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f850a0c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f850a030 <col:33> 'int' lvalue ParmVar 0x5557f84f0ca8 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f850a0a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f850a090 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f850a050 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557f850a070 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5557f850a190 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f850a170 <col:60> 'int' 0
|   |   `-CallExpr 0x5557f850a370 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557f850a358 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f850a338 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f850a3b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850a200 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5557f850a3c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850a238 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f850a3e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f850a270 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5557f850a3f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f850a320 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f850a308 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f850a2c8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5557f850a688 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5557f850a638 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557f850a608 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5557f850a5b0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557f850a580 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557f850a530 <col:47, col:56> 'char [48]' lvalue ->c 0x5557f84fb710
|     |     |   `-CXXMemberCallExpr 0x5557f850a510 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557f850a4e0 <col:47> '<bound member function type>' ->xanno 0x5557f84edd18
|     |     |       `-CXXThisExpr 0x5557f850a4d0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557f850a598 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557f850a560 <col:60> 'int' lvalue ParmVar 0x5557f84f0ca8 'i' 'int'
|     `-ImplicitCastExpr 0x5557f850a670 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5557f850a650 <col:65> 'int16_t':'short' lvalue ParmVar 0x5557f84f0d20 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5557f84f0ff8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5557f84f0f00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5557f850ad78 <col:36, line:541:5>
|   |-ParenExpr 0x5557f850ab18 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557f850aae8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557f850a840 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f850a810 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f850a720 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f850a708 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f850a6c8 <col:23> 'int' lvalue ParmVar 0x5557f84f0f00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f850a6e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f850a7f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f850a7d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f850a740 <col:33> 'int' lvalue ParmVar 0x5557f84f0f00 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f850a7b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f850a7a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f850a760 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557f850a780 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5557f850a8a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f850a880 <col:60> 'int' 0
|   |   `-CallExpr 0x5557f850aa48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557f850aa30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f850aa10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f850aa88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850a910 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5557f850aaa0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850a948 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f850aab8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f850a980 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5557f850aad0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f850a9f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f850a9e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f850a9a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5557f850ad68 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5557f850ad50 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5557f850ad38 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557f850ad08 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5557f850acb0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557f850ac80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557f850ac30 <col:61, col:70> 'char const[48]' lvalue ->c 0x5557f84fb710
|             |   `-CXXMemberCallExpr 0x5557f850ac10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557f850abe0 <col:61> '<bound member function type>' ->xanno 0x5557f84edb78
|             |       `-CXXThisExpr 0x5557f850abd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557f850ac98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557f850ac60 <col:74> 'int' lvalue ParmVar 0x5557f84f0f00 'i' 'int'
|-CXXMethodDecl 0x5557f84f11c8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5557f84f10b8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5557f84f1130 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557f84f1278 <col:20>
| `-OptimizeNoneAttr 0x5557f84f12d0 <col:30>
|-CXXMethodDecl 0x5557f84f1408 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5557f84f1310 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5557f850b448 <col:35, line:562:5>
|   |-ParenExpr 0x5557f850b1e8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557f850b1b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557f850af10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f850aee0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f850adf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f850add8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f850ad98 <col:23> 'int' lvalue ParmVar 0x5557f84f1310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f850adb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f850aec0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f850aea8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f850ae10 <col:33> 'int' lvalue ParmVar 0x5557f84f1310 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f850ae88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f850ae70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f850ae30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557f850ae50 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5557f850af70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f850af50 <col:60> 'int' 0
|   |   `-CallExpr 0x5557f850b118 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557f850b100 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f850b0e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f850b158 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850afe0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5557f850b170 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850b018 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f850b188 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f850b050 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5557f850b1a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f850b0c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f850b0b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f850b070 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5557f850b438 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5557f850b420 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5557f850b408 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557f850b3d8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5557f850b380 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557f850b350 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557f850b300 <col:60, col:69> 'char const[48]' lvalue ->c 0x5557f84fb710
|             |   `-CXXMemberCallExpr 0x5557f850b2e0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557f850b2b0 <col:60> '<bound member function type>' ->xanno 0x5557f84edb78
|             |       `-CXXThisExpr 0x5557f850b2a0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557f850b368 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557f850b330 <col:73> 'int' lvalue ParmVar 0x5557f84f1310 'i' 'int'
|-CXXMethodDecl 0x5557f84f1618 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5557f84f14c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557f84f1540 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5557f850bb28 <col:41, line:577:5>
|   |-ParenExpr 0x5557f850b8b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557f850b888 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557f850b5e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f850b5b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f850b4c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f850b4a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f850b468 <col:23> 'int' lvalue ParmVar 0x5557f84f14c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f850b488 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f850b590 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f850b578 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f850b4e0 <col:33> 'int' lvalue ParmVar 0x5557f84f14c8 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f850b558 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f850b540 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f850b500 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557f850b520 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5557f850b640 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f850b620 <col:60> 'int' 0
|   |   `-CallExpr 0x5557f850b7e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557f850b7d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f850b7b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f850b828 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850b6b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5557f850b840 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850b6e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f850b858 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f850b720 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5557f850b870 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f850b798 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f850b780 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f850b740 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5557f850bb08 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5557f850bab8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557f850ba88 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5557f850ba28 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557f850b9f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557f850b9a8 <col:47, col:56> 'char [48]' lvalue ->c 0x5557f84fb710
|     |     |   `-CXXMemberCallExpr 0x5557f850b988 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557f850b958 <col:47> '<bound member function type>' ->xanno 0x5557f84edd18
|     |     |       `-CXXThisExpr 0x5557f850b948 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557f850ba10 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557f850b9d8 <col:60> 'int' lvalue ParmVar 0x5557f84f14c8 'i' 'int'
|     `-ImplicitCastExpr 0x5557f850baf0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5557f850bad0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5557f84f1540 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5557f84f17d8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5557f84f16e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5557f850c258 <col:36, line:591:5>
|   |-ParenExpr 0x5557f850bf98 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557f850bf68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557f850bcc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f850bc90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f850bba0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f850bb88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f850bb48 <col:23> 'int' lvalue ParmVar 0x5557f84f16e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f850bb68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f850bc70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f850bc58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f850bbc0 <col:33> 'int' lvalue ParmVar 0x5557f84f16e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f850bc38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f850bc20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f850bbe0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557f850bc00 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5557f850bd20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f850bd00 <col:60> 'int' 0
|   |   `-CallExpr 0x5557f850bec8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557f850beb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f850be90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f850bf08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850bd90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5557f850bf20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850bdc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f850bf38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f850be00 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5557f850bf50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f850be78 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f850be60 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f850be20 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5557f850c248 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5557f850c230 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5557f850c218 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557f850c1e8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5557f850c160 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557f850c130 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557f850c0e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5557f84fb710
|             |   `-CXXMemberCallExpr 0x5557f850c0c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557f850c090 <col:61> '<bound member function type>' ->xanno 0x5557f84edb78
|             |       `-CXXThisExpr 0x5557f850c080 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557f850c148 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557f850c110 <col:74> 'int' lvalue ParmVar 0x5557f84f16e0 'i' 'int'
|-CXXMethodDecl 0x5557f84f1a28 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5557f84f1898 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557f84f1910 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5557f850c938 <col:42, line:606:5>
|   |-ParenExpr 0x5557f850c6c8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557f850c698 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557f850c3f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f850c3c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f850c2d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f850c2b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f850c278 <col:23> 'int' lvalue ParmVar 0x5557f84f1898 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f850c298 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f850c3a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557f850c388 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f850c2f0 <col:33> 'int' lvalue ParmVar 0x5557f84f1898 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f850c368 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f850c350 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f850c310 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557f850c330 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5557f850c450 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f850c430 <col:60> 'int' 0
|   |   `-CallExpr 0x5557f850c5f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557f850c5e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f850c5c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f850c638 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850c4c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5557f850c650 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850c4f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f850c668 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f850c530 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5557f850c680 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f850c5a8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f850c590 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f850c550 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5557f850c918 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5557f850c8c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557f850c898 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5557f850c838 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557f850c808 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557f850c7b8 <col:48, col:57> 'char [48]' lvalue ->c 0x5557f84fb710
|     |     |   `-CXXMemberCallExpr 0x5557f850c798 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557f850c768 <col:48> '<bound member function type>' ->xanno 0x5557f84edd18
|     |     |       `-CXXThisExpr 0x5557f850c758 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557f850c820 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557f850c7e8 <col:61> 'int' lvalue ParmVar 0x5557f84f1898 'i' 'int'
|     `-ImplicitCastExpr 0x5557f850c900 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5557f850c8e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5557f84f1910 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5557f84f1bc0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5557f84f1af0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5557f850d1a8 <col:33, line:620:5>
|   |-ParenExpr 0x5557f850cf20 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5557f850cef0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5557f850cb40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f850cb10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f850c9b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f850c998 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f850c958 <col:23> 'int' lvalue ParmVar 0x5557f84f1af0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f850c978 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f850caf0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5557f850cad8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f850c9d0 <col:33> 'int' lvalue ParmVar 0x5557f84f1af0 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f850cab8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f850caa0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f850c9f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5557f850ca78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5557f850ca60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5557f850ca28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5557f850cba0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f850cb80 <col:79> 'int' 0
|   |   `-CallExpr 0x5557f850ce50 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5557f850ce38 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f850ce18 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f850ce90 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850cc88 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5557f850cea8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850ccd0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f850cec0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f850cd08 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5557f850ced8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f850ce00 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f850cde8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f850cda8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5557f850d198 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5557f850d180 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5557f850d168 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557f850d138 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5557f850d0b0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557f850d080 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557f850d030 <col:67, col:76> 'char const[48]' lvalue ->c 0x5557f84fb710
|             |   `-CXXMemberCallExpr 0x5557f850d010 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557f850cfe0 <col:67> '<bound member function type>' ->xanno 0x5557f84edb78
|             |       `-CXXThisExpr 0x5557f850cfd0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557f850d098 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557f850d060 <col:80> 'int' lvalue ParmVar 0x5557f84f1af0 'i' 'int'
|-CXXMethodDecl 0x5557f84f1dd8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5557f84f1c80 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557f84f1d00 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5557f8510400 <col:45, line:635:5>
|   |-ParenExpr 0x5557f850d718 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5557f850d6e8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5557f850d3b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f850d380 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f850d220 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557f850d208 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557f850d1c8 <col:23> 'int' lvalue ParmVar 0x5557f84f1c80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557f850d1e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557f850d360 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5557f850d348 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f850d240 <col:33> 'int' lvalue ParmVar 0x5557f84f1c80 'i' 'int'
|   |   |     `-BinaryOperator 0x5557f850d328 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557f850d310 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557f850d260 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557f84edf60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5557f850d2e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5557f850d2d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5557f850d298 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5557f850d410 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f850d3f0 <col:79> 'int' 0
|   |   `-CallExpr 0x5557f850d648 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5557f850d630 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f850d610 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f850d688 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850d480 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5557f850d6a0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f850d4c8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557f850d6b8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f850d500 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5557f850d6d0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f850d5f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f850d5e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f850d598 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5557f85103e0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5557f8510348 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557f8510318 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5557f85102c0 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557f8510290 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557f8510240 <col:54, col:63> 'char [48]' lvalue ->c 0x5557f84fb710
|     |     |   `-CXXMemberCallExpr 0x5557f8510220 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557f850d7b8 <col:54> '<bound member function type>' ->xanno 0x5557f84edd18
|     |     |       `-CXXThisExpr 0x5557f850d7a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557f85102a8 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557f8510270 <col:67> 'int' lvalue ParmVar 0x5557f84f1c80 'i' 'int'
|     `-CXXConstCastExpr 0x5557f85103b0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5557f8510398 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5557f8510360 <col:91> 'const void *' lvalue ParmVar 0x5557f84f1d00 'x' 'const void *'
|-CXXMethodDecl 0x5557f84f1ea8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5557f8510488 <col:34, line:640:5>
|   `-ReturnStmt 0x5557f8510478 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5557f8510460 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5557f8510430 <col:16> 'Packet *' lvalue ->_data_packet 0x5557f84fc2c8
|         `-CXXThisExpr 0x5557f8510420 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5557f84f1fe8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5557f84f1f58 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f8506b08 <col:46> 'bool' true
|-CXXMethodDecl 0x5557f84f2168 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5557f84f20a0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5557f84f2210 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5557f84f29c0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5557f84f2310 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2a30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f22f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5557f84f22d0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5557f84e7460 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5557f84f23a0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2a48 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f2380 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5557f84f2360 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5557f84e74f0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5557f84f2430 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2a60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f2410 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5557f84f23f0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5557f84f24c0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2a78 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f24a0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5557f84f2480 <col:19> 'int' 16
| |-EnumConstantDecl 0x5557f84f2550 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2a90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f2530 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5557f84f2510 <col:21> 'int' 16
| |-EnumConstantDecl 0x5557f84f25e0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2aa8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f25c0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5557f84f25a0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5557f84f2670 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2ac0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f2650 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5557f84f2630 <col:19> 'int' EnumConstant 0x5557f84f24c0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5557f84f2700 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2ad8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f26e0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5557f84f26c0 <col:19> 'int' EnumConstant 0x5557f84f25e0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5557f84f27d0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2af0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f27b0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5557f84f2790 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5557f84f2750 <col:23> 'int' EnumConstant 0x5557f84f2700 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5557f84f2770 <col:40> 'int' 2
| |-EnumConstantDecl 0x5557f84f28a0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557f84f2b08 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f84f2880 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5557f84f2860 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5557f84f2820 <col:23> 'int' EnumConstant 0x5557f84f2700 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5557f84f2840 <col:40> 'int' 4
| `-EnumConstantDecl 0x5557f84f2970 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5557f84f2b20 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f84f2950 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5557f84f2930 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5557f84f28f0 <col:23> 'int' EnumConstant 0x5557f84f2700 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5557f84f2910 <col:40> 'int' 8
|-CXXMethodDecl 0x5557f84f2b60 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5557f84f2c00 <col:68> "" ""
|-CXXMethodDecl 0x5557f84f2c98 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5557f84f2d38 <col:45> "" ""
|-CXXMethodDecl 0x5557f84f2dd0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5557f84f2e70 <col:57> "" ""
|-CXXMethodDecl 0x5557f84f2f08 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5557f84f2fa8 <col:45> "" ""
|-CXXMethodDecl 0x5557f84f3040 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5557f84f30e0 <col:57> "" ""
|-CXXMethodDecl 0x5557f84f3170 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5557f84f3210 <col:51> "" ""
|-CXXMethodDecl 0x5557f84f8480 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5557f84f8520 <col:63> "" ""
|-CXXMethodDecl 0x5557f84f85b0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5557f84f8650 <col:53> "" ""
|-CXXMethodDecl 0x5557f84f86e0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5557f84f8780 <col:65> "" ""
|-CXXMethodDecl 0x5557f84f8898 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5557f84f8808 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5557f84f8940 <col:61> "" ""
|-CXXMethodDecl 0x5557f84f8ad8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5557f84f89c8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5557f84f8a40 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5557f84f8b88 <col:67> "" ""
|-CXXMethodDecl 0x5557f84f8ca0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5557f84f8c10 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5557f84f8d48 <col:63> "" ""
|-CXXMethodDecl 0x5557f84f8ee0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5557f84f8dd0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5557f84f8e48 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5557f84f8f90 <col:69> "" ""
|-CXXMethodDecl 0x5557f84f90a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5557f84f9018 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5557f84f9150 <col:63> "" ""
|-CXXMethodDecl 0x5557f84f92e8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5557f84f91d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5557f84f9250 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f84f9398 <col:69> "" ""
|-CXXMethodDecl 0x5557f84f94b0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5557f84f9420 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5557f84f9558 <col:62> "" ""
|-CXXMethodDecl 0x5557f84f96f0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5557f84f95e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5557f84f9658 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5557f84f97a0 <col:68> "" ""
|-CXXMethodDecl 0x5557f84f98b8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5557f84f9828 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5557f84f9960 <col:63> "" ""
|-CXXMethodDecl 0x5557f84f9af8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5557f84f99e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5557f84f9a60 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5557f84f9ba8 <col:69> "" ""
|-CXXMethodDecl 0x5557f84f9c38 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5557f84f9cd8 <col:64> "" ""
|-CXXMethodDecl 0x5557f84f9d68 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5557f84f9e08 <col:52> "" ""
|-CXXMethodDecl 0x5557f84f9e98 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5557f84f9f38 <col:67> "" ""
|-CXXMethodDecl 0x5557f84f9fc8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5557f84fa068 <col:55> "" ""
|-CXXMethodDecl 0x5557f84fa180 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5557f84fa0f0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5557f84fa228 <col:58> "" ""
|-CXXMethodDecl 0x5557f84fa3c0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5557f84fa2b0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5557f84fa328 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5557f84fa470 <col:62> "" ""
|-CXXMethodDecl 0x5557f84fa588 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5557f84fa4f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5557f84fa630 <col:58> "" ""
|-CXXMethodDecl 0x5557f84fa7c8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5557f84fa6b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5557f84fa730 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5557f84fa878 <col:62> "" ""
|-CXXMethodDecl 0x5557f84fa990 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5557f84fa900 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5557f84faa38 <col:60> "" ""
|-CXXMethodDecl 0x5557f84fabd0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5557f84faac0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5557f84fab38 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5557f84fac80 <col:64> "" ""
|-CXXMethodDecl 0x5557f84fad98 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5557f84fad08 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5557f84fae40 <col:58> "" ""
|-CXXMethodDecl 0x5557f84fafd8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5557f84faec8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5557f84faf40 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5557f84fb088 <col:62> "" ""
|-CXXMethodDecl 0x5557f84fb1a0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5557f84fb110 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5557f84fb248 <col:59> "" ""
|-CXXMethodDecl 0x5557f84fb3e0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5557f84fb2d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5557f84fb348 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557f84fb490 <col:63> "" ""
|-AccessSpecDecl 0x5557f84fb500 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5557f84fb528 prev 0x5557f84eda50 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5557f84fb620 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5557f84fb710 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5557f84fb838 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5557f84fb9b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5557f84fbb38 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5557f84fbcb8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5557f8510608 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5557f8510e78 <col:11>
| |-CXXDestructorDecl 0x5557f85106e0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5557f8510818 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5557f8510818
| | `-ParmVarDecl 0x5557f8510928 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5557f85109c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5557f85109c8
| | `-ParmVarDecl 0x5557f8510ad8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5557f8513808 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557f8513918 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5557f8513b98 <col:11>
| |   `-ReturnStmt 0x5557f8513b88 <col:11>
| |     `-UnaryOperator 0x5557f8513b70 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5557f8513b60 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5557f8513988 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5557f8513988
|   `-ParmVarDecl 0x5557f8513a98 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5557f84fbd20 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5557f84fbe38 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5557f84fbed8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5557f84fbf40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5557f84fbfa8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5557f84fc010 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5557f84fc070 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5557f84fc130 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5557f84fc190 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5557f84fc1f0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5557f8510518 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5557f84fbed8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5557f8510e88 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5557f8510ee0 <col:12>
| |-CXXConstructorDecl 0x5557f8510b48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5557f8510b48
| | `-ParmVarDecl 0x5557f8510c58 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5557f8510cf8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5557f8510cf8
| | `-ParmVarDecl 0x5557f8510e08 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5557f8512ef0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5557f84fc268 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5557f84fc2c8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5557f84fc330 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5557f84fc398 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5557f85057f0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5557f8505858 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5557f85058b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5557f8505918 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5557f8505980 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5557f8505a08 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5557f84fc268 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5557f85104b0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5557f85058b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5557f8510ef0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5557f8510f50 <col:21, line:755:5>
|-CXXConstructorDecl 0x5557f8505ba8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5557f8505ae8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5557f8505ca0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5557f8505e88 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5557f8505d90 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5557f8506158 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5557f8505f40 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557f8505fb8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5557f8506030 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f8506378 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5557f8506228 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5557f85062a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5557f8506648 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5557f8506438 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5557f85064b0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5557f8506528 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5557f85067a0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5557f8506710 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f85068e8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5557f8506858 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5557f85069e0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8510f60 prev 0x5557f84e7070 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5557f8511098 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5557f8511128 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5557f85111d0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x5557f8511270 <col:20>
| `-OptimizeNoneAttr 0x5557f85112c8 <col:30>
|-CXXMethodDecl 0x5557f8511318 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5557f85113b8 <col:20>
| `-OptimizeNoneAttr 0x5557f8511410 <col:30>
|-CXXMethodDecl 0x5557f8511460 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5557f8511528 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5557f85115f0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5557f8511708 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5557f85117d0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5557f8511870 <col:20>
| `-OptimizeNoneAttr 0x5557f85118c8 <col:30>
|-CXXMethodDecl 0x5557f8511938 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5557f85119d8 <col:20>
| `-OptimizeNoneAttr 0x5557f8511a30 <col:30>
|-CXXMethodDecl 0x5557f8511ad8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5557f8511b78 <col:20>
| `-OptimizeNoneAttr 0x5557f8511bd0 <col:30>
|-CXXMethodDecl 0x5557f8511c20 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5557f8511d38 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5557f8511e58 <line:791:5, col:36> col:23 used tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5557f8511f78 <line:792:5, col:36> col:23 used udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5557f8512040 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5557f85120e0 <col:62> "" ""
|-AccessSpecDecl 0x5557f8512150 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5557f85121b0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5557f8512da8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5557f8512fd0 <col:29, col:31>
|-CXXMethodDecl 0x5557f8512278 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5557f85123b8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5557f8512328 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5557f85124b0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5557f8512fe0 <col:23, col:25>
|-CXXMethodDecl 0x5557f8512668 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5557f85125a0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5557f8512938 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5557f8512720 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557f8512798 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5557f8512810 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557f8512ac8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5557f8512a00 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5557f8512bc0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5557f8512c28 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5557f8512c28
  `-ParmVarDecl 0x5557f8512d38 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8251908 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f8251a28 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5557f8251af0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5557f832b7f0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557f832e648 <col:8>
|-CXXConstructorDecl 0x5557f832b8f8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5557f832b8f8
| `-ParmVarDecl 0x5557f832ba08 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5557f832baa8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f832bbb8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5557f8251af0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5557f832e860 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5557f832e830 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5557f8251af0
| |     `-CXXStaticCastExpr 0x5557f832e800 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5557f832e7d0 <col:8> 'in_addr' lvalue ParmVar 0x5557f832bbb8 '' 'in_addr &&'
| `-CompoundStmt 0x5557f832e8a8 <col:8>
|-CXXDestructorDecl 0x5557f832eae0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5557f8712f20 <col:8> col:8 implicit constexpr operator= 'in_addr &(const in_addr &)' inline default trivial noexcept-unevaluated 0x5557f8712f20
| `-ParmVarDecl 0x5557f8713028 <col:8> col:8 'const in_addr &'
`-CXXMethodDecl 0x5557f8713098 <col:8> col:8 implicit used constexpr operator= 'in_addr &(in_addr &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5557f87131a8 <col:8> col:8 used 'in_addr &&'
  `-CompoundStmt 0x5557f8713460 <col:8>
    |-BinaryOperator 0x5557f8713408 <col:8> 'in_addr_t':'unsigned int' lvalue '='
    | |-MemberExpr 0x5557f87133c0 <col:8> 'in_addr_t':'unsigned int' lvalue ->s_addr 0x5557f8251af0
    | | `-CXXThisExpr 0x5557f87133b0 <col:8> 'in_addr *' this
    | `-ImplicitCastExpr 0x5557f87133f0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
    |   `-MemberExpr 0x5557f8713380 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5557f8251af0
    |     `-CXXStaticCastExpr 0x5557f8713350 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
    |       `-DeclRefExpr 0x5557f8713320 <col:8> 'in_addr' lvalue ParmVar 0x5557f87131a8 '' 'in_addr &&'
    `-ReturnStmt 0x5557f8713450 <col:8>
      `-UnaryOperator 0x5557f8713438 <col:8> 'in_addr' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5557f8713428 <col:8> 'in_addr *' this

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8320398 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5557f83204b8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5557f83205a0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5557f8320580 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5557f8320548 <col:22> 'int' 4
|-FieldDecl 0x5557f8320648 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x5557f8320628 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5557f83205f0 <col:21> 'int' 4
|-FieldDecl 0x5557f83206a8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5557f8320708 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f8320768 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f83207c8 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f8320828 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5557f8320888 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5557f83208e8 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f8320958 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5557f83209c8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8711a70 prev 0x5557f84e6e60 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5557f8711b68 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x5557f8711c08 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f8711c68 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f8711cf0 <line:27:5, col:15> col:15 th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5557f8711d50 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5557f8711df8 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x5557f8711dd8 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x5557f8711da0 <col:26> 'int' 4
|-FieldDecl 0x5557f8711ea0 <line:31:5, col:23> col:14 th_off 'unsigned int'
| `-ConstantExpr 0x5557f8711e80 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x5557f8711e48 <col:23> 'int' 4
|-FieldDecl 0x5557f8711f00 <line:39:5, col:13> col:13 th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x5557f8711f60 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f8711fc0 <line:49:5, col:14> col:14 referenced th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x5557f8712020 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8712088 prev 0x5557f84e6f10 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5557f8712180 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x5557f8712220 <line:12:5, col:14> col:14 uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f8712280 <line:13:5, col:14> col:14 uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5557f87122e0 <line:14:5, col:14> col:14 uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x5557f8712340 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f86ecca0 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f86ecdb8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x5557f86ece60 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x5557f86ecec8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x5557f86ecf30 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x5557f86ecfe0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x5557f86ece60 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x5557f86ede60 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x5557f86ede18 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x5557f86edde0 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x5557f86eddc8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5557f86edd70 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x5557f83178e0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x5557f86ecec8 'len' 'int'
| | `-IntegerLiteral 0x5557f86eded8 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x5557f86ecf30 'cap' 'int'
| | `-IntegerLiteral 0x5557f86edf40 <col:20> 'int' 0
| `-CompoundStmt 0x5557f86edfc0 <col:23, line:119:2>
|-CXXConstructorDecl 0x5557f86ed158 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x5557f86ed098 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x5557f86edfd0 <col:37, line:121:2>
|-CXXConstructorDecl 0x5557f86f0238 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f86f0348 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5557f86ece60 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x5557f86f1c80 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x5557f86f1c50 <col:12> 'unsigned char *const' lvalue .s 0x5557f86ece60
| |     `-DeclRefExpr 0x5557f86f1c30 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5557f86f0348 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5557f86ecec8 'len' 'int'
| | `-ImplicitCastExpr 0x5557f86f1d10 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5557f86f1ce0 <col:12> 'const int' lvalue .len 0x5557f86ecec8
| |     `-DeclRefExpr 0x5557f86f1cc0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5557f86f0348 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5557f86ecf30 'cap' 'int'
| | `-ImplicitCastExpr 0x5557f86f1da0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5557f86f1d70 <col:12> 'const int' lvalue .cap 0x5557f86ecf30
| |     `-DeclRefExpr 0x5557f86f1d50 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5557f86f0348 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x5557f86f1df8 <col:12>
|-CXXConstructorDecl 0x5557f86f03e8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557f86f03e8
| `-ParmVarDecl 0x5557f86f04f8 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x5557f86f20b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f86e8448 prev 0x5557f862af50 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f86e8540 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x5557f86e85d0 <col:21, col:27> col:21 public
|-TypedefDecl 0x5557f86e8610 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5557f7fb6dc0 'const char *'
|   `-QualType 0x5557f7fb6311 'const char' const
|     `-BuiltinType 0x5557f7fb6310 'char'
|-TypedefDecl 0x5557f86e8680 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x5557f7fb6f90 'char *'
|   `-BuiltinType 0x5557f7fb6310 'char'
|-TypedefDecl 0x5557f86e87c0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x5557f86e8730 'int (StringAccum::*)() const'
|   |-RecordType 0x5557f8278210 'StringAccum'
|   | `-CXXRecord 0x5557f86e8448 'StringAccum'
|   `-ParenType 0x5557f82ef030 'int () const' sugar
|     `-FunctionProtoType 0x5557f82d1760 'int () const' const cdecl
|       `-BuiltinType 0x5557f7fb6370 'int'
|-CXXConstructorDecl 0x5557f86e8880 <line:35:5, col:24> col:12 StringAccum 'void ()' inline
|-CXXConstructorDecl 0x5557f86e89d0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x5557f86e8940 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x5557f86e8b20 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x5557f86e8a90 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x5557f86e8cc8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x5557f86e8c08 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x5557f86e8e78 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x5557f86e8db8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x5557f86e8f70 <line:42:5, col:25> col:12 ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x5557f86e9128 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x5557f86e9060 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x5557f86e92a8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x5557f86e91e0 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x5557f86e93a0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5557f86e9468 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x5557f86e9530 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5557f86e95f8 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x5557f86e96c0 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x5557f86e9828 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5557f86e98f8 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5557f86e99b8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5557f86e9ac8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5557f86e9bd8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5557f86e9c98 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5557f86e9d58 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5557f86e9ea0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5557f86e9e10 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5557f86ea030 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x5557f86e9f60 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5557f86ea0f8 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5557f86ea1f0 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x5557f86ea2b0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5557f86ea378 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x5557f86ea438 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5557f86ea4f8 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5557f86ea5b8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5557f86ea708 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x5557f86ea670 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x5557f86ea858 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x5557f86ea7c8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x5557f86ea9b0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x5557f86ea918 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x5557f86eab00 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x5557f86eaa70 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x5557f86ead20 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x5557f86eabc0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x5557f86eac40 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x5557f86edc98 <col:53> 'int' 0
|-CXXMethodDecl 0x5557f86eae78 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x5557f86eade8 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x5557f86edcb8 <col:34> 'int' 1
|-CXXMethodDecl 0x5557f86eafc0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x5557f86eaf30 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5557f86eb110 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x5557f86eb080 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x5557f86eb260 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x5557f86eb1d0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x5557f86eb3b0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5557f86eb320 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5557f86eb588 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5557f86eb470 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5557f86eb4f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5557f86eb768 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5557f86eb650 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x5557f86eb6d0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x5557f86eb948 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5557f86eb830 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5557f86eb8b0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5557f86ebb28 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5557f86eba10 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x5557f86eba90 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x5557f86ebd08 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5557f86ebbf0 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5557f86ebc70 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5557f86ec068 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x5557f86ebe50 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5557f86ebed0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5557f86edcd8 <col:56> 'int' 10
| `-ParmVarDecl 0x5557f86ebf48 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f86edcf8 <col:77> 'bool' true
|-CXXMethodDecl 0x5557f86ec3c8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x5557f86ec1b0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5557f86ec230 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x5557f86edd08 <col:57> 'int' 10
| `-ParmVarDecl 0x5557f86ec2a8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f86edd28 <col:78> 'bool' true
|-CXXMethodDecl 0x5557f86ec5f0 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x5557f86ec498 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x5557f86ec518 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x5557f86ec6e8 <line:98:5, col:24> col:12 take_string 'String ()'
|-CXXMethodDecl 0x5557f86ec858 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x5557f86ec798 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x5557f86ec9a8 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x5557f86ec918 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x5557f86eca50 <col:51> "" ""
|-AccessSpecDecl 0x5557f86ecac0 <line:106:3, col:10> col:3 private
|-EnumDecl 0x5557f86ecae8 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x5557f86ecc38 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x5557f86ecc88 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f86ecc18 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x5557f86ecbe8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x5557f82f8d98 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x5557f86ecca0 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5557f86ecdb8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x5557f86ece60 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x5557f86ecec8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x5557f86ecf30 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x5557f86ecfe0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x5557f86ece60 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x5557f86ede60 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x5557f86ede18 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x5557f86edde0 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x5557f86eddc8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x5557f86edd70 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x5557f83178e0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x5557f86ecec8 'len' 'int'
| | | `-IntegerLiteral 0x5557f86eded8 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x5557f86ecf30 'cap' 'int'
| | | `-IntegerLiteral 0x5557f86edf40 <col:20> 'int' 0
| | `-CompoundStmt 0x5557f86edfc0 <col:23, line:119:2>
| |-CXXConstructorDecl 0x5557f86ed158 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x5557f86ed098 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x5557f86edfd0 <col:37, line:121:2>
| |-CXXConstructorDecl 0x5557f86f0238 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557f86f0348 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5557f86ece60 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x5557f86f1c80 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x5557f86f1c50 <col:12> 'unsigned char *const' lvalue .s 0x5557f86ece60
| | |     `-DeclRefExpr 0x5557f86f1c30 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5557f86f0348 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5557f86ecec8 'len' 'int'
| | | `-ImplicitCastExpr 0x5557f86f1d10 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5557f86f1ce0 <col:12> 'const int' lvalue .len 0x5557f86ecec8
| | |     `-DeclRefExpr 0x5557f86f1cc0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5557f86f0348 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5557f86ecf30 'cap' 'int'
| | | `-ImplicitCastExpr 0x5557f86f1da0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5557f86f1d70 <col:12> 'const int' lvalue .cap 0x5557f86ecf30
| | |     `-DeclRefExpr 0x5557f86f1d50 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5557f86f0348 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x5557f86f1df8 <col:12>
| |-CXXConstructorDecl 0x5557f86f03e8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557f86f03e8
| | `-ParmVarDecl 0x5557f86f04f8 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x5557f86f20b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x5557f86ed230 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x5557f86ed330 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x5557f86ed298 <col:16> col:19 'int'
|-CXXMethodDecl 0x5557f86ed510 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x5557f86ed3f0 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x5557f86ed470 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x5557f86ed6f0 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x5557f86ed5d8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5557f86ed658 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5557f86ed848 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x5557f86ed7b8 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x5557f86ed998 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x5557f86ed908 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x5557f86edc58 <line:132:5, col:70> col:25
  `-FunctionDecl 0x5557f86edb98 parent 0x5557f7fb6278 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x5557f86eda50 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x5557f86edac8 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashAllocator
         0 |   struct HashAllocator::link * _free
         8 |   struct HashAllocator::buffer * _buffer
        16 |   size_t _size
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class SizedHashAllocator<72>
         0 |   class HashAllocator (base)
         0 |     struct HashAllocator::link * _free
         8 |     struct HashAllocator::buffer * _buffer
        16 |     size_t _size
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddrPairRewriter
         0 |   class IPRewriterBase (primary base)
         0 |     class Element (primary base)
         0 |       (Element vtable pointer)
         8 |       class Element::Port *[2] _ports
        24 |       class Element::Port [4] _inline_ports
        88 |       int [2] _nports
        96 |       class Router * _router
       104 |       int _eindex
       112 |     class HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _map
       112 |       class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _rep
       112 |         class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
       112 |         class IPRewriterEntry ** buckets
       120 |         uint32_t nbuckets
       124 |         uint32_t first_bucket
       128 |         size_t size
       136 |         struct libdivide_u32_t bucket_divider
       136 |           uint32_t magic
       140 |           uint8_t more
       144 |     class Vector<class IPRewriterInput> _input_specs
       144 |       class vector_memory<class sized_array_memory<56> > vm_
       144 |         vector_memory<class sized_array_memory<56> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       160 |     class IPRewriterHeap * _heap
       168 |     uint32_t [2] _timeouts
       176 |     uint32_t _gc_interval_sec
       184 |     class Timer _gc_timer
       184 |       int _schedpos1
       192 |       class Timestamp _expiry_s
       192 |         union Timestamp::rep_t _t
       192 |           int64_t x
       200 |       union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       200 |         TimerCallback callback
       208 |       void * _thunk
       216 |       class Element * _owner
       224 |       class RouterThread * _thread
       232 |   class SizedHashAllocator<72> _allocator
       232 |     class HashAllocator (base)
       232 |       struct HashAllocator::link * _free
       240 |       struct HashAllocator::buffer * _buffer
       248 |       size_t _size
       256 |   unsigned int _annos
           | [sizeof=264, dsize=260, align=8,
           |  nvsize=260, nvalign=8]

*** Dumping AST Record Layout
         0 | struct HashAllocator::link
         0 |   struct HashAllocator::link * next
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8593058 <../dummy_inc/click/hashallocator.hh:26:5, line:28:5> line:26:12 referenced struct link definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5557f8593178 <col:5, col:12> col:12 implicit referenced struct link
`-FieldDecl 0x5557f8593248 <line:27:2, col:8> col:8 referenced next 'HashAllocator::link *'

Layout: <CGRecordLayout
  LLVMType:%"struct.HashAllocator::link" = type { %"struct.HashAllocator::link"* }
  NonVirtualBaseLLVMType:%"struct.HashAllocator::link" = type { %"struct.HashAllocator::link"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct HashAllocator::buffer
         0 |   struct HashAllocator::buffer * next
         8 |   size_t pos
        16 |   size_t maxpos
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f85932b0 <../dummy_inc/click/hashallocator.hh:30:5, line:34:5> line:30:12 referenced struct buffer definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5557f85933c8 <col:5, col:12> col:12 implicit referenced struct buffer
|-FieldDecl 0x5557f8593498 <line:31:2, col:10> col:10 next 'HashAllocator::buffer *'
|-FieldDecl 0x5557f85934f8 <line:32:2, col:9> col:9 referenced pos 'size_t':'unsigned long'
`-FieldDecl 0x5557f8593558 <line:33:2, col:9> col:9 referenced maxpos 'size_t':'unsigned long'

Layout: <CGRecordLayout
  LLVMType:%"struct.HashAllocator::buffer" = type { %"struct.HashAllocator::buffer"*, i64, i64 }
  NonVirtualBaseLLVMType:%"struct.HashAllocator::buffer" = type { %"struct.HashAllocator::buffer"*, i64, i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8592670 <../dummy_inc/click/hashallocator.hh:9:1, line:55:1> line:9:7 referenced class HashAllocator definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f8592788 <col:1, col:7> col:7 implicit referenced class HashAllocator
|-AccessSpecDecl 0x5557f8592818 <col:23, col:29> col:23 public
|-CXXConstructorDecl 0x5557f8592958 <line:11:5, col:30> col:5 referenced HashAllocator 'void (size_t)'
| `-ParmVarDecl 0x5557f8592850 <col:19, col:26> col:26 size 'size_t':'unsigned long'
|-CXXDestructorDecl 0x5557f8592a50 <line:12:5, col:20> col:5 used ~HashAllocator 'void () noexcept'
|-CXXMethodDecl 0x5557f8592bd0 <line:14:5, line:17:5> line:14:17 increase_size 'void (size_t)' inline
| |-ParmVarDecl 0x5557f8592b40 <col:31, col:38> col:38 used new_size 'size_t':'unsigned long'
| `-CompoundStmt 0x5557f85953d0 <col:48, line:17:5>
|   |-ParenExpr 0x5557f8595318 <line:15:2, col:212> 'void'
|   | `-ConditionalOperator 0x5557f85952e8 <col:3, col:211> 'void'
|   |   |-CXXStaticCastExpr 0x5557f8593f90 <col:3, col:62> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557f8593f60 <col:23, col:57> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557f8593e90 <col:23, col:34> 'bool' '&&'
|   |   |   | |-UnaryOperator 0x5557f8593df0 <col:23, col:24> 'bool' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x5557f8593dd8 <col:24> 'bool' <PointerToBoolean>
|   |   |   | |   `-ImplicitCastExpr 0x5557f8593dc0 <col:24> 'HashAllocator::link *' <LValueToRValue>
|   |   |   | |     `-MemberExpr 0x5557f8593d90 <col:24> 'HashAllocator::link *' lvalue ->_free 0x5557f8593888
|   |   |   | |       `-CXXThisExpr 0x5557f8593d80 <col:24> 'HashAllocator *' implicit this
|   |   |   | `-UnaryOperator 0x5557f8593e78 <col:33, col:34> 'bool' prefix '!' cannot overflow
|   |   |   |   `-ImplicitCastExpr 0x5557f8593e60 <col:34> 'bool' <PointerToBoolean>
|   |   |   |     `-ImplicitCastExpr 0x5557f8593e48 <col:34> 'HashAllocator::buffer *' <LValueToRValue>
|   |   |   |       `-MemberExpr 0x5557f8593e18 <col:34> 'HashAllocator::buffer *' lvalue ->_buffer 0x5557f85938e8
|   |   |   |         `-CXXThisExpr 0x5557f8593e08 <col:34> 'HashAllocator *' implicit this
|   |   |   `-BinaryOperator 0x5557f8593f40 <col:45, col:57> 'bool' '>='
|   |   |     |-ImplicitCastExpr 0x5557f8593f10 <col:45> 'size_t':'unsigned long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557f8593eb0 <col:45> 'size_t':'unsigned long' lvalue ParmVar 0x5557f8592b40 'new_size' 'size_t':'unsigned long'
|   |   |     `-ImplicitCastExpr 0x5557f8593f28 <col:57> 'size_t':'unsigned long' <LValueToRValue>
|   |   |       `-MemberExpr 0x5557f8593ee0 <col:57> 'size_t':'unsigned long' lvalue ->_size 0x5557f8593948
|   |   |         `-CXXThisExpr 0x5557f8593ed0 <col:57> 'HashAllocator *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5557f8595010 <col:66, col:73> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557f8594ff0 <col:72> 'int' 0
|   |   `-CallExpr 0x5557f8595248 <col:77, col:211> 'void'
|   |     |-ImplicitCastExpr 0x5557f8595230 <col:77> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557f8595210 <col:77> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557f8595288 <col:92> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f8595080 <col:92> 'const char [40]' lvalue "!_free && !_buffer && new_size >= _size"
|   |     |-ImplicitCastExpr 0x5557f85952a0 <col:135> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557f85950c0 <col:135> 'const char [36]' lvalue "../dummy_inc/click/hashallocator.hh"
|   |     |-ImplicitCastExpr 0x5557f85952b8 <col:174> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557f8595100 <col:174> 'int' 15
|   |     `-ImplicitCastExpr 0x5557f85952d0 <col:178, col:192> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557f85951f8 <col:178, col:192> 'const char [42]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557f85951e0 <col:192> 'const char [42]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557f8595198 <col:192> 'const char [42]' lvalue "void HashAllocator::increase_size(size_t)"
|   `-BinaryOperator 0x5557f85953b0 <line:16:2, col:10> 'size_t':'unsigned long' lvalue '='
|     |-MemberExpr 0x5557f8595348 <col:2> 'size_t':'unsigned long' lvalue ->_size 0x5557f8593948
|     | `-CXXThisExpr 0x5557f8595338 <col:2> 'HashAllocator *' implicit this
|     `-ImplicitCastExpr 0x5557f8595398 <col:10> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5557f8595378 <col:10> 'size_t':'unsigned long' lvalue ParmVar 0x5557f8592b40 'new_size' 'size_t':'unsigned long'
|-CXXMethodDecl 0x5557f8592ca0 <line:19:5, col:27> col:18 allocate 'void *()' inline
|-CXXMethodDecl 0x5557f8592de8 <line:20:5, col:35> col:17 used deallocate 'void (void *)' inline
| `-ParmVarDecl 0x5557f8592d58 <col:28, col:34> col:34 p 'void *'
|-CXXMethodDecl 0x5557f8592f88 <line:22:5, col:31> col:10 swap 'void (HashAllocator &)'
| `-ParmVarDecl 0x5557f8592ec8 <col:15, col:30> col:30 x 'HashAllocator &'
|-AccessSpecDecl 0x5557f8593030 <line:24:3, col:10> col:3 private
|-CXXRecordDecl 0x5557f8593058 <line:26:5, line:28:5> line:26:12 referenced struct link definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5557f8593178 <col:5, col:12> col:12 implicit referenced struct link
| `-FieldDecl 0x5557f8593248 <line:27:2, col:8> col:8 referenced next 'HashAllocator::link *'
|-CXXRecordDecl 0x5557f85932b0 <line:30:5, line:34:5> line:30:12 referenced struct buffer definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5557f85933c8 <col:5, col:12> col:12 implicit referenced struct buffer
| |-FieldDecl 0x5557f8593498 <line:31:2, col:10> col:10 next 'HashAllocator::buffer *'
| |-FieldDecl 0x5557f85934f8 <line:32:2, col:9> col:9 referenced pos 'size_t':'unsigned long'
| `-FieldDecl 0x5557f8593558 <line:33:2, col:9> col:9 referenced maxpos 'size_t':'unsigned long'
|-EnumDecl 0x5557f85935c0 <line:36:5, line:44:5> line:36:5
| |-EnumConstantDecl 0x5557f85936c0 <line:37:2, col:20> col:2 min_buffer_size 'HashAllocator::(anonymous enum at ../dummy_inc/click/hashallocator.hh:36:5)'
| | `-ImplicitCastExpr 0x5557f8593830 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f85936a0 <col:20> 'int' Int: 1024
| |     `-IntegerLiteral 0x5557f8593680 <col:20> 'int' 1024
| |-EnumConstantDecl 0x5557f8593750 <line:41:2, col:20> col:2 max_buffer_size 'HashAllocator::(anonymous enum at ../dummy_inc/click/hashallocator.hh:36:5)'
| | `-ImplicitCastExpr 0x5557f8593848 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8593730 <col:20> 'int' Int: 1048576
| |     `-IntegerLiteral 0x5557f8593710 <col:20> 'int' 1048576
| `-EnumConstantDecl 0x5557f85937e0 <line:43:2, col:18> col:2 min_nelements 'HashAllocator::(anonymous enum at ../dummy_inc/click/hashallocator.hh:36:5)'
|   `-ImplicitCastExpr 0x5557f8593860 <col:18> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f85937c0 <col:18> 'int' Int: 8
|       `-IntegerLiteral 0x5557f85937a0 <col:18> 'int' 8
|-FieldDecl 0x5557f8593888 <line:46:5, col:11> col:11 referenced _free 'HashAllocator::link *'
|-FieldDecl 0x5557f85938e8 <line:47:5, col:13> col:13 referenced _buffer 'HashAllocator::buffer *'
|-FieldDecl 0x5557f8593948 <line:48:5, col:12> col:12 referenced _size 'size_t':'unsigned long'
|-CXXMethodDecl 0x5557f85939c0 <line:50:5, col:25> col:11 used hard_allocate 'void *()'
|-CXXConstructorDecl 0x5557f8593b58 <line:52:5, col:41> col:5 HashAllocator 'void (const HashAllocator &)'
| `-ParmVarDecl 0x5557f8593a98 <col:19, col:40> col:40 x 'const HashAllocator &'
`-CXXMethodDecl 0x5557f8593cd8 <line:53:5, col:52> col:20 operator= 'HashAllocator &(const HashAllocator &)'
  `-ParmVarDecl 0x5557f8593c18 <col:30, col:51> col:51 x 'const HashAllocator &'

Layout: <CGRecordLayout
  LLVMType:%class.HashAllocator = type { %"struct.HashAllocator::link"*, %"struct.HashAllocator::buffer"*, i64 }
  NonVirtualBaseLLVMType:%class.HashAllocator = type { %"struct.HashAllocator::link"*, %"struct.HashAllocator::buffer"*, i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f8628d08 <../dummy_inc/click/hashallocator.hh:58:1, line:65:1> line:59:7 class SizedHashAllocator definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'HashAllocator'
|-TemplateArgument integral 72
|-CXXRecordDecl 0x5557f8628f48 prev 0x5557f8628d08 <col:1, col:7> col:7 implicit class SizedHashAllocator
|-AccessSpecDecl 0x5557f8628fd8 <col:51, col:57> col:51 public
|-CXXConstructorDecl 0x5557f8629038 <line:61:5, line:63:5> line:61:5 used SizedHashAllocator 'void ()'
|-CXXConstructorDecl 0x5557f8629118 <line:59:7> col:7 implicit SizedHashAllocator 'void (const SizedHashAllocator<72> &)' inline default_delete noexcept-unevaluated 0x5557f8629118
| `-ParmVarDecl 0x5557f8629228 <col:7> col:7 'const SizedHashAllocator<72> &'
|-CXXConstructorDecl 0x5557f86292c8 <col:7> col:7 implicit SizedHashAllocator 'void (SizedHashAllocator<72> &&)' inline default_delete noexcept-unevaluated 0x5557f86292c8
| `-ParmVarDecl 0x5557f86293d8 <col:7> col:7 'SizedHashAllocator<72> &&'
|-CXXMethodDecl 0x5557f8629478 <col:7> col:7 implicit operator= 'SizedHashAllocator<72> &(SizedHashAllocator<72> &&)' inline default_delete noexcept-unevaluated 0x5557f8629478
| `-ParmVarDecl 0x5557f8629588 <col:7> col:7 'SizedHashAllocator<72> &&'
`-CXXDestructorDecl 0x5557f8629610 <col:7> col:7 implicit used ~SizedHashAllocator 'void () noexcept' inline default
  `-CompoundStmt 0x5557f873e9b8 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.SizedHashAllocator = type { %class.HashAllocator }
  NonVirtualBaseLLVMType:%class.SizedHashAllocator = type { %class.HashAllocator }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8626c70 <../elements/ip/ipaddrpairrewriter.hh:117:1, line:159:1> line:117:7 class IPAddrPairRewriter definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'IPRewriterBase'
|-CXXRecordDecl 0x5557f8626dc8 <col:1, col:7> col:7 implicit referenced class IPAddrPairRewriter
|-AccessSpecDecl 0x5557f8626e58 <col:52, col:58> col:52 public
|-CXXRecordDecl 0x5557f8626e80 <line:119:5, line:132:5> line:119:11 referenced class IPAddrPairFlow definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-public 'IPRewriterFlow'
| |-CXXRecordDecl 0x5557f8626fd8 <col:5, col:11> col:11 implicit referenced class IPAddrPairFlow
| |-AccessSpecDecl 0x5557f8627068 <col:52, col:58> col:52 public
| |-CXXConstructorDecl 0x5557f8627418 <line:121:2, line:126:2> line:121:2 IPAddrPairFlow 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, bool, click_jiffies_t)'
| | |-ParmVarDecl 0x5557f86270a0 <col:17, col:34> col:34 used owner 'IPRewriterInput *'
| | |-ParmVarDecl 0x5557f8627118 <col:41, col:57> col:57 used flowid 'const IPFlowID &'
| | |-ParmVarDecl 0x5557f8627190 <line:122:10, col:26> col:26 used rewritten_flowid 'const IPFlowID &'
| | |-ParmVarDecl 0x5557f8627208 <line:123:10, col:15> col:15 used guaranteed 'bool'
| | |-ParmVarDecl 0x5557f8627280 <col:27, col:43> col:43 used expiry_j 'click_jiffies_t':'unsigned int'
| | |-CXXCtorInitializer 'IPRewriterFlow'
| | | `-CXXConstructExpr 0x5557f862a5b8 <line:124:8, line:125:32> 'IPRewriterFlow' 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, uint8_t, bool, click_jiffies_t)'
| | |   |-ImplicitCastExpr 0x5557f862a558 <line:124:23> 'IPRewriterInput *' <LValueToRValue>
| | |   | `-DeclRefExpr 0x5557f8629cd8 <col:23> 'IPRewriterInput *' lvalue ParmVar 0x5557f86270a0 'owner' 'IPRewriterInput *'
| | |   |-DeclRefExpr 0x5557f8629cf8 <col:30> 'const IPFlowID' lvalue ParmVar 0x5557f8627118 'flowid' 'const IPFlowID &'
| | |   |-DeclRefExpr 0x5557f8629d18 <col:38> 'const IPFlowID' lvalue ParmVar 0x5557f8627190 'rewritten_flowid' 'const IPFlowID &'
| | |   |-ImplicitCastExpr 0x5557f862a570 <line:125:9> 'uint8_t':'unsigned char' <IntegralCast>
| | |   | `-IntegerLiteral 0x5557f8629d38 <col:9> 'int' 0
| | |   |-ImplicitCastExpr 0x5557f862a588 <col:12> 'bool' <LValueToRValue>
| | |   | `-DeclRefExpr 0x5557f8629d58 <col:12> 'bool' lvalue ParmVar 0x5557f8627208 'guaranteed' 'bool'
| | |   `-ImplicitCastExpr 0x5557f862a5a0 <col:24> 'click_jiffies_t':'unsigned int' <LValueToRValue>
| | |     `-DeclRefExpr 0x5557f8629d78 <col:24> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x5557f8627280 'expiry_j' 'click_jiffies_t':'unsigned int'
| | `-CompoundStmt 0x5557f862a640 <col:34, line:126:2>
| |-CXXMethodDecl 0x5557f8627690 <line:128:2, col:62> col:7 apply 'void (WritablePacket *, bool, unsigned int)'
| | |-ParmVarDecl 0x5557f86274f8 <col:13, col:29> col:29 p 'WritablePacket *'
| | |-ParmVarDecl 0x5557f8627570 <col:32, col:37> col:37 direction 'bool'
| | `-ParmVarDecl 0x5557f86275f0 <col:48, col:57> col:57 annos 'unsigned int'
| |-CXXMethodDecl 0x5557f8627910 <line:130:2, col:69> col:7 unparse 'void (StringAccum &, bool, click_jiffies_t) const'
| | |-ParmVarDecl 0x5557f8627758 <col:15, col:28> col:28 sa 'StringAccum &'
| | |-ParmVarDecl 0x5557f86277d0 <col:32, col:37> col:37 direction 'bool'
| | `-ParmVarDecl 0x5557f8627848 <col:48, col:64> col:64 now 'click_jiffies_t':'unsigned int'
| `-CXXDestructorDecl 0x5557f862aa58 <line:119:11> col:11 implicit referenced ~IPAddrPairFlow 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5557f8627a40 <line:134:5, col:24> col:5 IPAddrPairRewriter 'void ()'
|-CXXDestructorDecl 0x5557f8627b30 <line:135:5, col:25> col:5 ~IPAddrPairRewriter 'void ()' noexcept-unevaluated 0x5557f8627b30
| `-Overrides: [ 0x5557f8601d18 IPRewriterBase::~IPRewriterBase 'void () noexcept' ]
|-CXXMethodDecl 0x5557f8627c60 <line:137:5, col:67> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5557f8527fd8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5557f862a6a8 <col:36, col:67>
|   `-ReturnStmt 0x5557f862a698 <col:38, col:45>
|     `-ImplicitCastExpr 0x5557f862a680 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5557f862a650 <col:45> 'const char [19]' lvalue "IPAddrPairRewriter"
|-CXXMethodDecl 0x5557f8627db0 <line:138:5, col:28> col:11 cast 'void *(const char *)'
| |-Overrides: [ 0x5557f8528cd0 Element::cast 'void *(const char *)' ]
| `-ParmVarDecl 0x5557f8627d18 <col:16, col:27> col:28 'const char *'
|-CXXMethodDecl 0x5557f8628090 <line:140:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5557f86026c0 IPRewriterBase::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5557f8627f40 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x5557f8627fb8 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f86282f0 <line:143:5, col:76> col:22 get_entry 'IPRewriterEntry *(int, const IPFlowID &, int)'
| |-Overrides: [ 0x5557f8603508 IPRewriterBase::get_entry 'IPRewriterEntry *(int, const IPFlowID &, int)' ]
| |-ParmVarDecl 0x5557f8628158 <col:32, col:36> col:36 ip_p 'int'
| |-ParmVarDecl 0x5557f86281d0 <col:42, col:58> col:58 xflowid 'const IPFlowID &'
| `-ParmVarDecl 0x5557f8628250 <col:67, col:71> col:71 input 'int'
|-CXXMethodDecl 0x5557f86285d8 <line:144:5, line:145:53> line:144:22 add_flow 'IPRewriterEntry *(int, const IPFlowID &, const IPFlowID &, int)'
| |-Overrides: [ 0x5557f8603838 IPRewriterBase::add_flow 'IPRewriterEntry *(int, const IPFlowID &, const IPFlowID &, int)' ]
| |-ParmVarDecl 0x5557f86283c0 <col:31, col:35> col:35 ip_p 'int'
| |-ParmVarDecl 0x5557f8628438 <col:41, col:57> col:57 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x5557f86284b0 <line:145:10, col:26> col:26 rewritten_flowid 'const IPFlowID &'
| `-ParmVarDecl 0x5557f8628530 <col:44, col:48> col:48 input 'int'
|-CXXMethodDecl 0x5557f8628738 <line:146:5, col:43> col:10 destroy_flow 'void (IPRewriterFlow *)'
| |-Overrides: [ 0x5557f8603998 IPRewriterBase::destroy_flow 'void (IPRewriterFlow *)' ]
| `-ParmVarDecl 0x5557f86286a8 <col:23, col:39> col:39 flow 'IPRewriterFlow *'
|-CXXMethodDecl 0x5557f8628970 <line:148:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x5557f8526e48 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5557f86287f8 <col:15> col:18 'int'
| `-ParmVarDecl 0x5557f8628870 <col:20, col:27> col:28 'Packet *'
|-CXXMethodDecl 0x5557f8628a40 <line:150:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5557f8529970 Element::add_handlers 'void ()' ]
|-AccessSpecDecl 0x5557f8628ae0 <line:152:3, col:10> col:3 private
|-FieldDecl 0x5557f86296f0 <line:154:5, col:48> col:48 referenced _allocator 'SizedHashAllocator<sizeof(IPAddrPairRewriter::IPAddrPairFlow)>':'SizedHashAllocator<72>'
|-FieldDecl 0x5557f8629758 <line:155:5, col:14> col:14 _annos 'unsigned int'
|-CXXMethodDecl 0x5557f86298d0 <line:157:5, col:58> col:19 dump_mappings_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5557f86297b8 <col:41, col:49> col:50 'Element *'
| `-ParmVarDecl 0x5557f8629838 <col:52, col:57> col:58 'void *'
|-CXXConstructorDecl 0x5557f86299a8 <line:117:7> col:7 implicit IPAddrPairRewriter 'void (const IPAddrPairRewriter &)' inline default_delete noexcept-unevaluated 0x5557f86299a8
| `-ParmVarDecl 0x5557f8629ab8 <col:7> col:7 'const IPAddrPairRewriter &'
`-CXXMethodDecl 0x5557f8629b58 <col:7> col:7 implicit operator= 'IPAddrPairRewriter &(const IPAddrPairRewriter &)' inline default_delete noexcept-unevaluated 0x5557f8629b58
  `-ParmVarDecl 0x5557f8629c68 <col:7> col:7 'const IPAddrPairRewriter &'

Layout: <CGRecordLayout
  LLVMType:%class.IPAddrPairRewriter = type <{ %class.IPRewriterBase, %class.SizedHashAllocator, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.IPAddrPairRewriter.base = type <{ %class.IPRewriterBase, %class.SizedHashAllocator, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f82f87d0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5557f82f88e8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5557f82f8988 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5557f82f89e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5557f82f8a48 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5557f82f8af8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f82f8e00 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f82f8f18 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5557f82f8fc0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5557f82f9028 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5557f82f90b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5557f82fd750 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557f82fdb88 <col:12>
|-CXXConstructorDecl 0x5557f82fd858 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f82fd968 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5557f82f8fc0 'data' 'const char *'
| | `-ImplicitCastExpr 0x5557f8300fd0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5557f8300fa0 <col:12> 'const char *const' lvalue .data 0x5557f82f8fc0
| |     `-DeclRefExpr 0x5557f8300f80 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f82fd968 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5557f82f9028 'length' 'int'
| | `-ImplicitCastExpr 0x5557f8301060 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5557f8301030 <col:12> 'const int' lvalue .length 0x5557f82f9028
| |     `-DeclRefExpr 0x5557f8301010 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f82fd968 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5557f82f90b8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5557f83010f0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5557f83010c0 <col:12> 'String::memo_t *const' lvalue .memo 0x5557f82f90b8
| |     `-DeclRefExpr 0x5557f83010a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f82fd968 '' 'const String::rep_t &'
| `-CompoundStmt 0x5557f8301148 <col:12>
|-CXXConstructorDecl 0x5557f82fda08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557f82fda08
| `-ParmVarDecl 0x5557f82fdb18 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5557f8303e70 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5557f830d4f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f830d608 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5557f830db20 <col:12>
|   |-BinaryOperator 0x5557f830d938 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5557f830d8f0 <col:12> 'const char *' lvalue ->data 0x5557f82f8fc0
|   | | `-CXXThisExpr 0x5557f830d8e0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5557f830d920 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5557f830d8b0 <col:12> 'const char *const' lvalue .data 0x5557f82f8fc0
|   |     `-DeclRefExpr 0x5557f830d890 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f830d608 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5557f830da00 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5557f830d9b8 <col:12> 'int' lvalue ->length 0x5557f82f9028
|   | | `-CXXThisExpr 0x5557f830d9a8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5557f830d9e8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5557f830d978 <col:12> 'const int' lvalue .length 0x5557f82f9028
|   |     `-DeclRefExpr 0x5557f830d958 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f830d608 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5557f830dac8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5557f830da80 <col:12> 'String::memo_t *' lvalue ->memo 0x5557f82f90b8
|   | | `-CXXThisExpr 0x5557f830da70 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5557f830dab0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5557f830da40 <col:12> 'String::memo_t *const' lvalue .memo 0x5557f82f90b8
|   |     `-DeclRefExpr 0x5557f830da20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f830d608 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5557f830db10 <col:12>
|     `-UnaryOperator 0x5557f830daf8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f830dae8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5557f830d678 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557f830d678
  `-ParmVarDecl 0x5557f830d788 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f82eed40 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f82eee58 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5557f82eeee8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5557f82eef28 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5557f7fb6dc0 'const char *'
|   `-QualType 0x5557f7fb6311 'const char' const
|     `-BuiltinType 0x5557f7fb6310 'char'
|-TypedefDecl 0x5557f82eefb0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5557f82eef80 'String::const_iterator' sugar
|   |-Typedef 0x5557f82eef28 'const_iterator'
|   `-PointerType 0x5557f7fb6dc0 'const char *'
|     `-QualType 0x5557f7fb6311 'const char' const
|       `-BuiltinType 0x5557f7fb6310 'char'
|-TypedefDecl 0x5557f82ef120 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5557f82ef090 'int (String::*)() const'
|   |-RecordType 0x5557f82eedd0 'String'
|   | `-CXXRecord 0x5557f82eed40 'String'
|   `-ParenType 0x5557f82ef030 'int () const' sugar
|     `-FunctionProtoType 0x5557f82d1760 'int () const' const cdecl
|       `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f82ef188 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5557f810fc80 'int64_t' sugar
|   |-Typedef 0x5557f801f2d0 'int64_t'
|   `-TypedefType 0x5557f7ff84d0 '__int64_t' sugar
|     |-Typedef 0x5557f7ff80a8 '__int64_t'
|     `-BuiltinType 0x5557f7fb6390 'long'
|-TypedefDecl 0x5557f82ef1f0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5557f810fba0 'uint64_t' sugar
|   |-Typedef 0x5557f801f470 'uint64_t'
|   `-TypedefType 0x5557f7ff8560 '__uint64_t' sugar
|     |-Typedef 0x5557f7ff8118 '__uint64_t'
|     `-BuiltinType 0x5557f7fb6430 'unsigned long'
|-TypedefDecl 0x5557f82ef280 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5557f82ef250 'String::intmax_t' sugar
|   |-Typedef 0x5557f82ef188 'intmax_t'
|   `-TypedefType 0x5557f810fc80 'int64_t' sugar
|     |-Typedef 0x5557f801f2d0 'int64_t'
|     `-TypedefType 0x5557f7ff84d0 '__int64_t' sugar
|       |-Typedef 0x5557f7ff80a8 '__int64_t'
|       `-BuiltinType 0x5557f7fb6390 'long'
|-TypedefDecl 0x5557f82ef310 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5557f82ef2e0 'String::uintmax_t' sugar
|   |-Typedef 0x5557f82ef1f0 'uintmax_t'
|   `-TypedefType 0x5557f810fba0 'uint64_t' sugar
|     |-Typedef 0x5557f801f470 'uint64_t'
|     `-TypedefType 0x5557f7ff8560 '__uint64_t' sugar
|       |-Typedef 0x5557f7ff8118 '__uint64_t'
|       `-BuiltinType 0x5557f7fb6430 'unsigned long'
|-CXXConstructorDecl 0x5557f82ef3d0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5557f82ef578 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5557f82ef4b8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5557f82ef728 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5557f82ef668 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5557f82ef880 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5557f82ef7f0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5557f82efa98 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5557f82ef948 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5557f82ef9c8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5557f82efcb8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5557f82efb68 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5557f82efbe8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5557f82efed8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5557f82efd88 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5557f82efe08 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5557f82f00f8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5557f82effa8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5557f82f0028 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5557f82f0288 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5557f82f01c0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5557f82f0408 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5557f82f0348 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5557f82f0598 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5557f82f04d0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5557f82f06f0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5557f82f0660 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5557f82f0878 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5557f82f07b8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5557f82f09d0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5557f82f0940 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5557f82f0b58 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5557f82f0a98 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5557f82f0ce8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5557f82f0c20 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5557f82f0e78 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5557f82f0db0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5557f82f1008 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5557f82f0f40 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5557f82f1100 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5557f82f1228 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5557f82f13a8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5557f82f12e0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5557f82f14f8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5557f82f1468 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5557f82f15a0 <col:63> "" ""
|-CXXMethodDecl 0x5557f82f16e8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5557f82f1628 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5557f82f18f8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5557f82f17a8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5557f82f1828 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5557f82f1b18 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5557f82f19c0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5557f82f1a40 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5557f82f1df8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5557f82f1bd8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5557f82f1c58 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5557f82fd220 <col:55> 'int' 10
| `-ParmVarDecl 0x5557f82f1cd0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f82fd240 <col:76> 'bool' true
|-CXXMethodDecl 0x5557f82f20d8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5557f82f1ec0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5557f82f1f40 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5557f82fd250 <col:56> 'int' 10
| `-ParmVarDecl 0x5557f82f1fb8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f82fd270 <col:77> 'bool' true
|-CXXMethodDecl 0x5557f82f21e0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5557f82f22a8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5557f82f2370 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5557f82f2410 <col:20>
| `-OptimizeNoneAttr 0x5557f82f2468 <col:30>
|-CXXConversionDecl 0x5557f82f2558 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5557f82f2628 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5557f82f26e8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5557f82f27d8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5557f82f2898 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5557f82f2a18 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5557f82f2950 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5557f82f2b68 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5557f82f2ad8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5557f82f2c58 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5557f82f2d18 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5557f82f2f68 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5557f82f2dd0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5557f82f2e50 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5557f82f31c8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5557f82f3030 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5557f82f30b0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5557f82f3298 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5557f82f34a8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5557f82f3350 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5557f82f33d0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5557f82f36c8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5557f82f3570 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5557f82f35f0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5557f82f3858 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5557f82f3790 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5557f82f3948 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5557f82f3ab8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5557f82f39f8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5557f82f3cc8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5557f82f3b78 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5557f82f3bf8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5557f82f3ee0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5557f82f3d88 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5557f82f3e00 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5557f82f4070 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5557f82f3fa0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5557f82f4290 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5557f82f4130 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5557f82f41b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5557f82f43e0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5557f82f4350 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5557f82f45b8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5557f82f44a0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5557f82f4520 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5557f82f4708 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5557f82f4678 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5557f82f5950 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5557f82f47c0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5557f82f5870 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5557f82fd280 <col:39> 'int' 0
|-CXXMethodDecl 0x5557f82f5b70 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5557f82f5a10 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5557f82f5a90 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5557f82fd2a0 <col:48> 'int' 0
|-CXXMethodDecl 0x5557f82f5d50 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5557f82f5c30 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5557f82f5cb0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5557f82fd2c0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5557f82f5e20 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5557f82f5ee0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5557f82f5fa0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5557f82f6060 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5557f82f6120 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5557f82f62c8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5557f82f61d0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5557f82f6448 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5557f82f6380 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5557f82f65c8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5557f82f6508 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5557f82f6748 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5557f82f6680 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5557f82f6890 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5557f82f6800 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5557f82f69e0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5557f82f6950 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5557f82f6bb8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5557f82f6aa0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5557f82f6b20 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5557f82f6d98 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5557f82f6c80 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5557f82f6d00 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5557f82f6ee8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5557f82f6e58 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5557f82f70f8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5557f82f6fa8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5557f82f7028 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5557f82f7258 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5557f82f71c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5557f82f73b0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5557f82f7318 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5557f82f7458 <col:57> "" ""
|-CXXMethodDecl 0x5557f82f7568 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5557f82f74d8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5557f82f76b8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5557f82f7628 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5557f82f7838 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5557f82f7770 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5557f82f7900 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5557f82f79c0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5557f82f7a80 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5557f82f7b20 <col:49> "" ""
|-CXXMethodDecl 0x5557f82f7bb0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5557f82f7c70 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5557f82f7d60 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5557f82f7e28 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5557f82f7ee8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5557f82f7fa8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5557f82f80a0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5557f82f8168 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5557f82f8230 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5557f82f8408 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5557f82f82e8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5557f82f8368 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5557f82f8630 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5557f82f84d0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5557f82f8550 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5557f82f8740 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5557f82f87a8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5557f82f87d0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5557f82f88e8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5557f82f8988 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5557f82f89e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5557f82f8a48 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5557f82f8af8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5557f82f8b60 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5557f82f8d98 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5557f82f8de8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f82f8d78 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5557f82f8c88 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5557f82f8c30 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5557f82f8c70 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5557f82f8c50 <col:32> 'int' 8
|-CXXRecordDecl 0x5557f82f8e00 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5557f82f8f18 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5557f82f8fc0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5557f82f9028 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5557f82f90b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5557f82fd750 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5557f82fdb88 <col:12>
| |-CXXConstructorDecl 0x5557f82fd858 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557f82fd968 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5557f82f8fc0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5557f8300fd0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5557f8300fa0 <col:12> 'const char *const' lvalue .data 0x5557f82f8fc0
| | |     `-DeclRefExpr 0x5557f8300f80 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f82fd968 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5557f82f9028 'length' 'int'
| | | `-ImplicitCastExpr 0x5557f8301060 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5557f8301030 <col:12> 'const int' lvalue .length 0x5557f82f9028
| | |     `-DeclRefExpr 0x5557f8301010 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f82fd968 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5557f82f90b8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5557f83010f0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5557f83010c0 <col:12> 'String::memo_t *const' lvalue .memo 0x5557f82f90b8
| | |     `-DeclRefExpr 0x5557f83010a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f82fd968 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5557f8301148 <col:12>
| |-CXXConstructorDecl 0x5557f82fda08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557f82fda08
| | `-ParmVarDecl 0x5557f82fdb18 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5557f8303e70 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5557f830d4f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557f830d608 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5557f830db20 <col:12>
| |   |-BinaryOperator 0x5557f830d938 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5557f830d8f0 <col:12> 'const char *' lvalue ->data 0x5557f82f8fc0
| |   | | `-CXXThisExpr 0x5557f830d8e0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5557f830d920 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5557f830d8b0 <col:12> 'const char *const' lvalue .data 0x5557f82f8fc0
| |   |     `-DeclRefExpr 0x5557f830d890 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f830d608 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5557f830da00 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5557f830d9b8 <col:12> 'int' lvalue ->length 0x5557f82f9028
| |   | | `-CXXThisExpr 0x5557f830d9a8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5557f830d9e8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5557f830d978 <col:12> 'const int' lvalue .length 0x5557f82f9028
| |   |     `-DeclRefExpr 0x5557f830d958 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f830d608 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5557f830dac8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5557f830da80 <col:12> 'String::memo_t *' lvalue ->memo 0x5557f82f90b8
| |   | | `-CXXThisExpr 0x5557f830da70 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5557f830dab0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5557f830da40 <col:12> 'String::memo_t *const' lvalue .memo 0x5557f82f90b8
| |   |     `-DeclRefExpr 0x5557f830da20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557f830d608 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5557f830db10 <col:12>
| |     `-UnaryOperator 0x5557f830daf8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5557f830dae8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5557f830d678 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557f830d678
|   `-ParmVarDecl 0x5557f830d788 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5557f82f9130 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5557f82f9378 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5557f82f9198 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5557f82f9218 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5557f82f9290 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5557f82fd710 <col:79, line:261:5>
|   |-BinaryOperator 0x5557f82fd388 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5557f82fd320 <col:2, col:5> 'const char *' lvalue .data 0x5557f82f8fc0
|   | | `-MemberExpr 0x5557f82fd2f0 <col:2> 'String::rep_t' lvalue ->_r 0x5557f82f9130
|   | |   `-CXXThisExpr 0x5557f82fd2e0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5557f82fd370 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5557f82fd350 <col:12> 'const char *' lvalue ParmVar 0x5557f82f9198 'data' 'const char *'
|   |-BinaryOperator 0x5557f82fd450 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5557f82fd3e8 <col:2, col:5> 'int' lvalue .length 0x5557f82f9028
|   | | `-MemberExpr 0x5557f82fd3b8 <col:2> 'String::rep_t' lvalue ->_r 0x5557f82f9130
|   | |   `-CXXThisExpr 0x5557f82fd3a8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5557f82fd438 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5557f82fd418 <col:14> 'int' lvalue ParmVar 0x5557f82f9218 'length' 'int'
|   `-IfStmt 0x5557f82fd6f8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5557f82fd570 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5557f82fd558 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5557f82fd538 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5557f82fd518 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5557f82fd4b0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5557f82f90b8
|     |       | `-MemberExpr 0x5557f82fd480 <col:7> 'String::rep_t' lvalue ->_r 0x5557f82f9130
|     |       |   `-CXXThisExpr 0x5557f82fd470 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5557f82fd500 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5557f82fd4e0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5557f82f9290 'memo' 'String::memo_t *'
|     `-CallExpr 0x5557f82fd6d0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5557f82fd6b8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5557f82fd5c0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5557f827d068 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5557f82fd628 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5557f82f8988
|         `-ImplicitCastExpr 0x5557f82fd610 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5557f82fd5f0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5557f82f9290 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5557f82f9628 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5557f82f9448 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5557f82f94c8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5557f82f9540 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5557f82f9130 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5557f82fdb98 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5557f82fdd28 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5557f82fdc90 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5557f82fdc00 <col:2> '<bound member function type>' ->assign_memo 0x5557f82f9378
|     | `-ImplicitCastExpr 0x5557f82fdcc8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5557f82fdbf0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5557f82fdce0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5557f82fdc30 <col:14> 'const char *' lvalue ParmVar 0x5557f82f9448 'data' 'const char *'
|     |-ImplicitCastExpr 0x5557f82fdcf8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5557f82fdc50 <col:20> 'int' lvalue ParmVar 0x5557f82f94c8 'length' 'int'
|     `-ImplicitCastExpr 0x5557f82fdd10 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5557f82fdc70 <col:28> 'String::memo_t *' lvalue ParmVar 0x5557f82f9540 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5557f82f97b8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5557f82f96f8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5557f82fdf80 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5557f82fdf00 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5557f82fdd50 <col:2> '<bound member function type>' ->assign_memo 0x5557f82f9378
|     | `-CXXThisExpr 0x5557f82fdd40 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5557f82fdf38 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5557f82fddd0 <col:14, col:19> 'const char *' lvalue .data 0x5557f82f8fc0
|     |   `-MemberExpr 0x5557f82fdda0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5557f82f9130
|     |     `-DeclRefExpr 0x5557f82fdd80 <col:14> 'const String' lvalue ParmVar 0x5557f82f96f8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5557f82fdf50 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5557f82fde50 <col:25, col:30> 'int' lvalue .length 0x5557f82f9028
|     |   `-MemberExpr 0x5557f82fde20 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5557f82f9130
|     |     `-DeclRefExpr 0x5557f82fde00 <col:25> 'const String' lvalue ParmVar 0x5557f82f96f8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5557f82fdf68 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5557f82fded0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5557f82f90b8
|         `-MemberExpr 0x5557f82fdea0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5557f82f9130
|           `-DeclRefExpr 0x5557f82fde80 <col:38> 'const String' lvalue ParmVar 0x5557f82f96f8 'x' 'const String &'
|-CXXMethodDecl 0x5557f82fb980 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5557f82fe940 <col:31, line:278:5>
|   `-IfStmt 0x5557f82fe928 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5557f82fe020 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5557f82fe008 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5557f82fdfd8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5557f82f90b8
|     |     `-MemberExpr 0x5557f82fdfa8 <col:6> 'String::rep_t' lvalue ->_r 0x5557f82f9130
|     |       `-CXXThisExpr 0x5557f82fdf98 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5557f82fe900 <col:15, line:277:2>
|       |-ParenExpr 0x5557f82fe4d0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5557f82fe4a0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5557f82fe130 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5557f82fe118 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5557f82fe100 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5557f82fe0c0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5557f82f8988
|       |   |       `-ImplicitCastExpr 0x5557f82fe0a8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5557f82fe078 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5557f82f90b8
|       |   |           `-MemberExpr 0x5557f82fe048 <col:27> 'String::rep_t' lvalue ->_r 0x5557f82f9130
|       |   |             `-CXXThisExpr 0x5557f82fe038 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5557f82fe190 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5557f82fe170 <col:54> 'int' 0
|       |   `-CallExpr 0x5557f82fe400 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5557f82fe3e8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5557f82fe368 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5557f80564e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5557f82fe440 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5557f82fe278 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5557f82fe458 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5557f82fe2a8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5557f82fe470 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5557f82fe2e0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5557f82fe488 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5557f82fe350 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5557f82fe338 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5557f82fe300 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5557f82fe820 <line:274:6, line:275:22>
|       | |-CallExpr 0x5557f82fe6e0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5557f82fe6c8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5557f82fe640 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5557f827f850 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5557f82fe610 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5557f82f8988
|       | |   `-ImplicitCastExpr 0x5557f82fe5f8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5557f82fe5c8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5557f82f90b8
|       | |       `-MemberExpr 0x5557f82fe598 <col:40> 'String::rep_t' lvalue ->_r 0x5557f82f9130
|       | |         `-CXXThisExpr 0x5557f82fe588 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5557f82fe7e0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5557f82fe7c8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5557f82fe708 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5557f82fc658 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5557f82fe808 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5557f82fe768 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5557f82f90b8
|       |       `-MemberExpr 0x5557f82fe738 <col:15> 'String::rep_t' lvalue ->_r 0x5557f82f9130
|       |         `-CXXThisExpr 0x5557f82fe728 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5557f82fe8e0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5557f82fe878 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5557f82f90b8
|         | `-MemberExpr 0x5557f82fe848 <col:6> 'String::rep_t' lvalue ->_r 0x5557f82f9130
|         |   `-CXXThisExpr 0x5557f82fe838 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5557f82fe8c8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5557f82fe8a8 <col:16> 'int' 0
|-CXXMethodDecl 0x5557f82fbc18 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5557f82fba38 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5557f82fbab8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5557f82fbb30 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5557f82fbcf0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5557f82fbf40 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5557f82fbda8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5557f82fbe28 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5557f82fbea0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5557f82fc128 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5557f82fc010 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5557f82fc090 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5557f82fc228 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5557f82fea18 <col:41, line:286:5>
|   `-ReturnStmt 0x5557f82fea08 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5557f82fe9d8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5557f82fe9a0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5557f82fe988 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5557f82fe968 <col:46> 'int' 1
|-CXXMethodDecl 0x5557f82fc4c8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5557f82fc2e0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5557f82fc360 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5557f82fc3e0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5557f82fc658 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5557f82fc590 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5557f82fc728 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5557f82fc8f8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5557f82fc7e0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5557f82fc860 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5557f82fc9b8 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5557f82fca80 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5557f82fcb88 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5557f82fcc00 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5557f82fcc78 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5557f82fcce0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5557f82fcde0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5557f82fce30 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f82fcdc0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5557f82fcda0 <col:22> 'int' 14
|-CXXMethodDecl 0x5557f82fd048 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5557f82fce60 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5557f82fcee0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5557f82fcf60 <col:43> col:46 'int'
|-FriendDecl 0x5557f82fd150 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5557f82fd1e0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f86549c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5557f8654b98 prev 0x5557f86549c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5557f8654c28 <col:46, col:52> col:46 public
|-TypedefDecl 0x5557f8654c50 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86565b0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5557f8656560 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5557f8656540 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5557f8654e68 'type'
|     `-SubstTemplateTypeParmType 0x5557f8654e30 'String' sugar
|       |-TemplateTypeParmType 0x5557f82bf540 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82bf4f0 'T'
|       `-RecordType 0x5557f82eedd0 'String'
|         `-CXXRecord 0x5557f82eed40 'String'
|-TypedefDecl 0x5557f8656668 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5557f8656630 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5557f8656610 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5557f86565b0 'type'
|     `-ElaboratedType 0x5557f8656560 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5557f8656540 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5557f8654e68 'type'
|         `-SubstTemplateTypeParmType 0x5557f8654e30 'String' sugar
|           |-TemplateTypeParmType 0x5557f82bf540 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5557f82bf4f0 'T'
|           `-RecordType 0x5557f82eedd0 'String'
|             `-CXXRecord 0x5557f82eed40 'String'
|-CXXMethodDecl 0x5557f86567e8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5557f86566f8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5557f86568d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5557f86569b8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5557f86569b8
|-CXXMethodDecl 0x5557f8656c88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5557f8656b90 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5557f8656ec8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5557f8656d40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f8656db8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5557f8657098 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5557f8656f88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f8657000 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5557f86571f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5557f86572c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5557f8657518 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5557f8657388 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5557f8657400 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5557f865a008 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5557f86575e8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5557f8659ef0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5557f865a1c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5557f865a0d8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5557f865a388 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5557f865a290 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5557f865a440 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5557f865a4f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5557f865a728 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5557f865a5a0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f865a618 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5557f865a9c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5557f865a8d0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5557f865aa90 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5557f865aae0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5557f865ab30 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.5 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.5 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f8529510 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5557f8653668 prev 0x5557f8529510 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5557f8654930 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5557f86548e0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5557f86548c0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5557f8654770 'type'
|     `-SubstTemplateTypeParmType 0x5557f8654600 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5557f8298160 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5557f8298108 'F'
|       `-RecordType 0x5557f8654260 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5557f8654180 'typed_array_memory'
|-FieldDecl 0x5557f865ab80 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5557f865abd0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5557f865ac08 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5557f8653700 'String' sugar
|   |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5557f82ce908 'T'
|   `-RecordType 0x5557f82eedd0 'String'
|     `-CXXRecord 0x5557f82eed40 'String'
|-TypedefDecl 0x5557f865ac98 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5557f865ac60 'String &'
|   `-SubstTemplateTypeParmType 0x5557f8653700 'String' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-RecordType 0x5557f82eedd0 'String'
|       `-CXXRecord 0x5557f82eed40 'String'
|-TypedefDecl 0x5557f865ad28 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5557f865acf0 'const String &'
|   `-QualType 0x5557f8653701 'const String' const
|     `-SubstTemplateTypeParmType 0x5557f8653700 'String' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-RecordType 0x5557f82eedd0 'String'
|         `-CXXRecord 0x5557f82eed40 'String'
|-TypedefDecl 0x5557f865adb8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5557f865ad80 'String *'
|   `-SubstTemplateTypeParmType 0x5557f8653700 'String' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-RecordType 0x5557f82eedd0 'String'
|       `-CXXRecord 0x5557f82eed40 'String'
|-TypedefDecl 0x5557f865ae48 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5557f865ae10 'const String *'
|   `-QualType 0x5557f8653701 'const String' const
|     `-SubstTemplateTypeParmType 0x5557f8653700 'String' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-RecordType 0x5557f82eedd0 'String'
|         `-CXXRecord 0x5557f82eed40 'String'
|-TypedefDecl 0x5557f865baa0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5557f865ba50 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5557f865ba30 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5557f865b968 'type'
|     `-LValueReferenceType 0x5557f865b930 'const String &'
|       `-QualType 0x5557f865b6d1 'const String' const
|         `-SubstTemplateTypeParmType 0x5557f865b6d0 'String' sugar
|           |-TemplateTypeParmType 0x5557f82a0270 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5557f82a0218 'T'
|           `-RecordType 0x5557f82eedd0 'String'
|             `-CXXRecord 0x5557f82eed40 'String'
|-TypedefDecl 0x5557f865bb08 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5557f865acf0 'const String &'
|   `-QualType 0x5557f8653701 'const String' const
|     `-SubstTemplateTypeParmType 0x5557f8653700 'String' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-RecordType 0x5557f82eedd0 'String'
|         `-CXXRecord 0x5557f82eed40 'String'
|-TypedefDecl 0x5557f865bb60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f865bbc8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5557f865ad80 'String *'
|   `-SubstTemplateTypeParmType 0x5557f8653700 'String' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-RecordType 0x5557f82eedd0 'String'
|       `-CXXRecord 0x5557f82eed40 'String'
|-TypedefDecl 0x5557f865bc30 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5557f865ae10 'const String *'
|   `-QualType 0x5557f8653701 'const String' const
|     `-SubstTemplateTypeParmType 0x5557f8653700 'String' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-RecordType 0x5557f82eedd0 'String'
|         `-CXXRecord 0x5557f82eed40 'String'
|-EnumDecl 0x5557f865bc88 <line:134:5> col:5
| `-EnumConstantDecl 0x5557f865bd80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5557f865bd60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5557f82cfb28 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5557f82cfb00 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5557f82cfae0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5557f865be08 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5557f865c098 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f865bec0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f865bf60 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5557f865c328 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5557f865c210 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5557f865c5e8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5557f865c4d0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5557f865c900 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5557f865c7e0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5557f865cc10 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5557f865caf0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5557f865cf00 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f865cd48 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f865cdc0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5557f865d028 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5557f865d0d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f865d130 <col:30> Inherited
|-CXXMethodDecl 0x5557f865d178 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5557f865d228 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f865d280 <col:30> Inherited
|-CXXMethodDecl 0x5557f865d348 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5557f865d3f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f865d450 <col:30> Inherited
|-CXXMethodDecl 0x5557f865d498 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5557f865d548 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f865d5a0 <col:30> Inherited
|-CXXMethodDecl 0x5557f865d5e8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5557f865d698 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f865d6f0 <col:30> Inherited
|-CXXMethodDecl 0x5557f865d738 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5557f865d7e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f865d840 <col:30> Inherited
|-CXXMethodDecl 0x5557f865d868 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5557f865d918 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5557f865d9c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5557f865db88 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f865da78 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f865daf0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5557f865dcd8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5557f865dc48 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f865de88 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5557f865dd90 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5557f865df40 <col:20>
| `-OptimizeNoneAttr 0x5557f865df98 <col:30>
|-CXXMethodDecl 0x5557f865e0b8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5557f865dfc0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5557f865e170 <col:20>
| `-OptimizeNoneAttr 0x5557f865e1c8 <col:30>
|-CXXMethodDecl 0x5557f865e280 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5557f865e1f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f865e3c8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5557f865e338 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f865e4f8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5557f865e5f8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5557f865e6c8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5557f865e798 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5557f865e8d8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5557f865e848 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f865ea20 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5557f865e990 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f865eb68 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5557f865ead8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5557f865ec20 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5557f865ed20 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5557f865ec90 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5557f865edd8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5557f865ee98 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5557f865ef98 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5557f865f118 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5557f865f058 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5557f865f8a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5557f865f1d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5557f865f808 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5557f865f708 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5557f865f988 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5557f865fad8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5557f865fa48 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5557f865fb90 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5557f865fdd8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f865fc50 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5557f865fcc8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5557f865ff68 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5557f865fea8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5557f8660178 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5557f8660030 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5557f86600a8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5557f8660238 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5557f8660498 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5557f86603a0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5557f8660568 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5557f8660568

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8701158 prev 0x5557f8675d78 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f8701250 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5557f87012e0 <col:22, col:28> col:22 public
|-EnumDecl 0x5557f8701308 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5557f8701428 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5557f8701408 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5557f87013f0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5557f87013d0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5557f87014d0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5557f87014b0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5557f8701498 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5557f8701478 <col:14> 'int' 1
| |-EnumConstantDecl 0x5557f8701560 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5557f8701540 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5557f8701520 <col:17> 'int' 0
| |-EnumConstantDecl 0x5557f87015f0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5557f87015d0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5557f87015b0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5557f8701680 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5557f8701660 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5557f8701640 <col:16> 'int' 2
| |-EnumConstantDecl 0x5557f8701710 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5557f87016f0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5557f87016d0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5557f87017a0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5557f8701780 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5557f8701760 <col:15> 'int' 4
| |-EnumConstantDecl 0x5557f8701830 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5557f8701810 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5557f87017f0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5557f87018c0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5557f87018a0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5557f8701880 <col:12> 'int' 6
| `-EnumConstantDecl 0x5557f8701950 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5557f8701930 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5557f8701910 <col:13> 'int' 7
|-VarDecl 0x5557f87019c0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5557f8701a48 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5557f8701ad0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5557f8701b58 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5557f8701be0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5557f8701c68 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5557f8701cf0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5557f8701d78 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5557f8701e00 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5557f8701e88 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5557f8701f10 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5557f8702010 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5557f8707338 '_nerrors' 'int'
| | `-IntegerLiteral 0x5557f8707ac8 <line:128:13> 'int' 0
| `-CompoundStmt 0x5557f8707b38 <col:16, line:129:5>
|-CXXDestructorDecl 0x5557f8702100 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5557f8707b48 <col:29, line:132:5>
|-CXXMethodDecl 0x5557f87022b8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5557f87021f0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8702380 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5557f8702468 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5557f8707ba0 <col:44, line:161:5>
|   `-ReturnStmt 0x5557f8707b90 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5557f8707b78 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5557f8707b58 <col:9> 'ErrorHandler *' lvalue Var 0x5557f8707398 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5557f87025a8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5557f8702518 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557f8702670 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5557f8707c00 <col:43, line:173:5>
|   `-ReturnStmt 0x5557f8707bf0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5557f8707bd8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5557f8707bb8 <col:9> 'ErrorHandler *' lvalue Var 0x5557f8707410 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5557f8702728 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5557f87027a8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5557f87028b8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5557f8702828 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5557f8702a08 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5557f8702978 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5557f8702b60 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5557f8702ac8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5557f8702cb8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5557f8702c20 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5557f8702e10 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5557f8702d78 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5557f8703020 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5557f8702ec8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5557f8702f48 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5557f87031f8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5557f87030e0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5557f8703160 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5557f8703418 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5557f87032b8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5557f8703338 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5557f87035f8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5557f87034d8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5557f8703558 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5557f87037d8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5557f87036b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5557f8703738 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5557f8703960 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5557f8703898 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5557f8703b30 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5557f8703a18 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5557f8703a90 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5557f8707e58 <col:57, line:234:5>
|   `-ReturnStmt 0x5557f8707e48 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5557f8707e30 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5557f8707dd8 <col:9, col:41> 'int'
|         |-MemberExpr 0x5557f8707da8 <col:9> '<bound member function type>' ->xmessage 0x5557f8703960
|         | `-CXXThisExpr 0x5557f8707d98 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5557f8707e18 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5557f8707e00 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5557f8707d78 <col:18, col:40> 'String' (CXXTemporary 0x5557f8707d78)
|               `-CallExpr 0x5557f8707d40 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5557f8707d28 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5557f8707ca0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5557f8705b28 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5557f8707cc0 <col:31> 'const String' lvalue ParmVar 0x5557f8703a90 'str' 'const String &'
|                 `-DeclRefExpr 0x5557f8707ce0 <col:36> 'const String' lvalue ParmVar 0x5557f8703a18 'anno' 'const String &'
|-CXXMethodDecl 0x5557f8703e10 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5557f8703bf0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5557f8703c70 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5557f8703ce8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5557f87080e8 <col:68, line:243:5>
|   `-ReturnStmt 0x5557f87080d8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5557f87080c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5557f8708060 <col:9, col:41> 'int'
|         |-MemberExpr 0x5557f8708030 <col:9> '<bound member function type>' ->xmessage 0x5557f8703b30
|         | `-CXXThisExpr 0x5557f8708020 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5557f8707ef8 <col:18> 'const String' lvalue ParmVar 0x5557f8703bf0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5557f87080a8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5557f8708090 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5557f8708000 <col:24, col:40> 'String' (CXXTemporary 0x5557f8708000)
|               `-CXXMemberCallExpr 0x5557f8707f98 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5557f8707f28 <col:24> '<bound member function type>' ->vformat 0x5557f8704ff0
|                 | `-CXXThisExpr 0x5557f8707f18 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5557f8707fc8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5557f8707f58 <col:32> 'const char *' lvalue ParmVar 0x5557f8703c70 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5557f8707fe0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5557f8707f78 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5557f8703ce8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5557f87040b0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5557f8703ed8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5557f8703f50 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5557f8703fc8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5557f8708428 <col:23, line:254:5>
|   `-ReturnStmt 0x5557f8708418 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5557f8708400 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5557f87083a0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5557f8708370 <col:9> '<bound member function type>' ->xmessage 0x5557f8703b30
|         | `-CXXThisExpr 0x5557f8708360 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5557f87083e8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5557f87083d0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5557f8708320 <col:18, col:65> 'String' (CXXTemporary 0x5557f8708320)
|         |     `-CallExpr 0x5557f87082b8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5557f87082a0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5557f8708188 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5557f8705b28 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5557f87081a8 <col:31> 'const String' lvalue ParmVar 0x5557f8703f50 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5557f8708300 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5557f87082e8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5557f8708280 <col:37, col:64> 'String' (CXXTemporary 0x5557f8708280)
|         |             `-CallExpr 0x5557f8708250 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5557f8708238 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5557f87081c8 <col:37> 'String (const String &)' lvalue CXXMethod 0x5557f87061b0 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5557f87081e8 <col:56> 'const String' lvalue ParmVar 0x5557f8703ed8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5557f8708340 <col:68> 'const String' lvalue ParmVar 0x5557f8703fc8 'str' 'const String &'
|-CXXMethodDecl 0x5557f8704430 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5557f8704178 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5557f87041f0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5557f8704270 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5557f87042e8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5557f87086e0 <col:34, line:267:5>
|   `-ReturnStmt 0x5557f87086d0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5557f87086b8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5557f8708650 <col:9, col:51> 'int'
|         |-MemberExpr 0x5557f8708620 <col:9> '<bound member function type>' ->xmessage 0x5557f87040b0
|         | `-CXXThisExpr 0x5557f8708610 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5557f87084c8 <col:18> 'const String' lvalue ParmVar 0x5557f8704178 'landmark' 'const String &'
|         |-DeclRefExpr 0x5557f87084e8 <col:28> 'const String' lvalue ParmVar 0x5557f87041f0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5557f87086a0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5557f8708688 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5557f87085f0 <col:34, col:50> 'String' (CXXTemporary 0x5557f87085f0)
|               `-CXXMemberCallExpr 0x5557f8708588 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5557f8708518 <col:34> '<bound member function type>' ->vformat 0x5557f8704ff0
|                 | `-CXXThisExpr 0x5557f8708508 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5557f87085b8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5557f8708548 <col:42> 'const char *' lvalue ParmVar 0x5557f8704270 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5557f87085d0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5557f8708568 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5557f87042e8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5557f8704540 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5557f8708760 <col:25, line:288:5>
|   `-ReturnStmt 0x5557f8708750 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5557f8708738 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5557f8708708 <col:9> 'const int' lvalue ->_nerrors 0x5557f8707338
|         `-CXXThisExpr 0x5557f87086f8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5557f8704750 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5557f87045f8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5557f8704678 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5557f8704a38 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5557f8704818 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5557f8704898 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5557f8704910 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5557f8704bd0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5557f8704b08 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5557f8704e18 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5557f8704c90 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5557f8704d08 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5557f87089c0 <col:58, line:357:5>
|   `-ReturnStmt 0x5557f87089b0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5557f8708998 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5557f8708968 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5557f8708950 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5557f8708930 <col:9, col:29> 'String' (CXXTemporary 0x5557f8708930)
|             `-CallExpr 0x5557f87088c0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5557f87088a8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5557f8708828 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5557f8704a38 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5557f87087c8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5557f87088f8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5557f87087e8 <col:21> 'const char *' lvalue ParmVar 0x5557f8704c90 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5557f8708910 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5557f8708808 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5557f8704d08 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5557f8704ff0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5557f8704ee0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5557f8704f58 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5557f8705148 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5557f87050b8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5557f8705290 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5557f8705200 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5557f8705530 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5557f8705348 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5557f87053c8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5557f8705440 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5557f8705690 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5557f8705600 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5557f8708ad8 <col:37, line:441:5>
|   `-IfStmt 0x5557f8708ac0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5557f8708a48 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5557f8708a18 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5557f87089d8 <col:6> 'int' lvalue ParmVar 0x5557f8705600 'level' 'int'
|     | `-ImplicitCastExpr 0x5557f8708a30 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5557f87089f8 <col:15> 'ErrorHandler::Level' EnumConstant 0x5557f8701710 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5557f8708aa8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5557f8708a78 <col:8> 'int' lvalue ->_nerrors 0x5557f8707338
|         `-CXXThisExpr 0x5557f8708a68 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5557f8705758 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5557f8708b70 <col:26, line:448:5>
|   `-BinaryOperator 0x5557f8708b50 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5557f8708b00 <col:2> 'int' lvalue ->_nerrors 0x5557f8707338
|     | `-CXXThisExpr 0x5557f8708af0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5557f8708b30 <col:13> 'int' 0
|-CXXMethodDecl 0x5557f8705920 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5557f8705810 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5557f8705888 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5557f8705b28 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5557f87059e0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5557f8705a58 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5557f8705dd8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5557f8705be8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5557f8705c68 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5557f8705ce8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5557f8705e90 <col:59> 0 0
|-CXXMethodDecl 0x5557f8706028 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5557f8705f08 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5557f8705f88 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5557f87091e0 <col:70, line:534:5>
|   |-DeclStmt 0x5557f8708ce0 <line:528:2, col:20>
|   | |-VarDecl 0x5557f8708b98 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5557f8708c00 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5557f8708c38 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5557f8708ca0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5557f8708db0 <line:529:2, col:23>
|   | `-VarDecl 0x5557f8708d10 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5557f8708d98 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5557f8708d78 <col:18> 'const char *' lvalue ParmVar 0x5557f8705f08 'begin' 'const char *'
|   |-DoStmt 0x5557f8709178 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5557f87090a8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5557f8709090 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5557f8709070 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5557f8708dc8 <col:6> 'const char *' lvalue Var 0x5557f8708d10 'x' 'const char *'
|   | |     `-CallExpr 0x5557f8708fc0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5557f8708fa8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5557f8708f60 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5557f8707810 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5557f8709028 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5557f8709010 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5557f8708e80 <col:20, col:27> 'String' (CXXTemporary 0x5557f8708e80)
|   | |       |     `-CXXTemporaryObjectExpr 0x5557f8708e48 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5557f8709040 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5557f8708ea0 <col:30> 'const char *' lvalue Var 0x5557f8708d10 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5557f8709058 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5557f8708ec0 <col:33> 'const char *' lvalue ParmVar 0x5557f8705f88 'end' 'const char *'
|   | |       |-UnaryOperator 0x5557f8708f00 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5557f8708ee0 <col:39> 'String' lvalue Var 0x5557f8708b98 'name' 'String'
|   | |       |-UnaryOperator 0x5557f8708f38 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5557f8708f18 <col:46> 'String' lvalue Var 0x5557f8708c38 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5557f8708f50 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5557f8709160 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5557f8709148 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5557f8709128 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5557f87090f8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|   |         `-ImplicitCastExpr 0x5557f87090e0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5557f87090c0 <col:11> 'String' lvalue Var 0x5557f8708b98 'name' 'String'
|   `-ReturnStmt 0x5557f87091d0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5557f87091b8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5557f8709198 <col:9> 'const char *' lvalue Var 0x5557f8708d10 'x' 'const char *'
|-CXXMethodDecl 0x5557f87061b0 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5557f87060e8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5557f87097e8 <col:55, line:550:5>
|   `-IfStmt 0x5557f87097c0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5557f8709420 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5557f8709408 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5557f87093f0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5557f87093d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5557f87093a0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|     | |       `-DeclRefExpr 0x5557f8709240 <col:6> 'const String' lvalue ParmVar 0x5557f87060e8 'x' 'const String &'
|     | `-BinaryOperator 0x5557f8709380 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5557f8709350 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5557f8709300 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5557f87092e8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5557f87092a0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5557f8309c60 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5557f8709260 <col:11> 'const String' lvalue ParmVar 0x5557f87060e8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5557f8709280 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5557f8709368 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5557f8709338 <col:19> 'char' 123
|     |-ReturnStmt 0x5557f8709490 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5557f8709460 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5557f8709440 <col:13> 'const String' lvalue ParmVar 0x5557f87060e8 'x' 'const String &'
|     `-IfStmt 0x5557f8709798 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5557f8709528 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5557f8709510 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5557f87094f0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5557f87094c0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|       |       `-DeclRefExpr 0x5557f87094a0 <col:11> 'const String' lvalue ParmVar 0x5557f87060e8 'x' 'const String &'
|       |-ReturnStmt 0x5557f87096b0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5557f8709698 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5557f8709668 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5557f8709650 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5557f8709630 <col:13, col:29> 'String' (CXXTemporary 0x5557f8709630)
|       |         `-CallExpr 0x5557f87095e0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5557f87095c8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5557f8709540 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5557f8705920 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5557f8709610 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5557f8709560 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5557f8709580 <col:28> 'const String' lvalue ParmVar 0x5557f87060e8 'x' 'const String &'
|       `-ReturnStmt 0x5557f8709788 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5557f8709770 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5557f8709740 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5557f8709728 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5557f8709708 <col:13, col:20> 'String' (CXXTemporary 0x5557f8709708)
|                 `-CXXTemporaryObjectExpr 0x5557f87096d0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5557f8706378 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5557f8706268 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5557f87062e0 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557f8707ab8 <col:71> 'bool' false
|-CXXRecordDecl 0x5557f8706428 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5557f8706728 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5557f87066c0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5557f8706660 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5557f8706620 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5557f82eedd0 'String'
|       | `-CXXRecord 0x5557f82eed40 'String'
|       |-BuiltinType 0x5557f7fb6370 'int'
|       `-DecayedType 0x5557f8676dc0 '__va_list_tag *' sugar
|         |-TypedefType 0x5557f8676d90 'va_list' sugar
|         | |-Typedef 0x5557f81d8bb0 'va_list'
|         | `-TypedefType 0x5557f81d8b60 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5557f8110778 '__gnuc_va_list'
|         |   `-TypedefType 0x5557f81106e0 '__builtin_va_list' sugar
|         |     |-Typedef 0x5557f7ff7bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5557f7ff7b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5557f7fb70c0 '__va_list_tag'
|         |         `-CXXRecord 0x5557f7fb7028 '__va_list_tag'
|         `-PointerType 0x5557f81decb0 '__va_list_tag *'
|           `-RecordType 0x5557f7fb70c0 '__va_list_tag'
|             `-CXXRecord 0x5557f7fb7028 '__va_list_tag'
|-EnumDecl 0x5557f8706780 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5557f8706880 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5557f8706de0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8706860 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5557f8706840 <col:16> 'int' 1
| |-EnumConstantDecl 0x5557f8706910 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5557f8706df8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f87068f0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5557f87068d0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5557f87069a0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5557f8706e10 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8706980 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5557f8706960 <col:22> 'int' 4
| |-EnumConstantDecl 0x5557f8706a30 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5557f8706e28 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8706a10 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5557f87069f0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5557f8706ac0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5557f8706e40 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8706aa0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5557f8706a80 <col:22> 'int' 16
| |-EnumConstantDecl 0x5557f8706b50 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5557f8706e58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8706b30 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5557f8706b10 <col:19> 'int' 32
| |-EnumConstantDecl 0x5557f8706be0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5557f8706e70 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8706bc0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5557f8706ba0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5557f8706c70 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5557f8706e88 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8706c50 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5557f8706c30 <col:14> 'int' 128
| |-EnumConstantDecl 0x5557f8706d00 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5557f8706ea0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557f8706ce0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5557f8706cc0 <col:16> 'int' 256
| `-EnumConstantDecl 0x5557f8706d90 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5557f8706eb8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f8706d70 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5557f8706d50 <col:12> 'int' 1024
|-CXXMethodDecl 0x5557f87070c8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5557f8706ee0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5557f8706f80 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5557f8707250 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5557f8707188 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5557f87072f8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5557f8707338 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5557f8707398 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5557f8707410 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5557f8707810 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5557f8707488 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5557f8707508 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5557f8707588 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5557f8707600 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5557f8707678 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5557f87076f0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5557f8707938 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5557f8707938
| `-ParmVarDecl 0x5557f8707a48 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5557f8709b48 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5557f8709b48
  `-ParmVarDecl 0x5557f8709c58 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f8675e08 prev 0x5557f84e5858 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f8675f00 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5557f8675f90 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5557f86760c8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5557f8675fc8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5557f86774f0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5557f86774d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5557f8677068 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5557f8677580 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5557f8677540 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5557f8675fc8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5557f86770d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5557f8677600 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5557f86775c0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5557f8677130 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5557f8677640 <col:54> 'bool' false
| `-CompoundStmt 0x5557f8677748 <col:61, line:38:5>
|   `-BinaryOperator 0x5557f8677728 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5557f86776c0 <col:9> 'const Element *' lvalue ->_context 0x5557f8677008
|     | `-CXXThisExpr 0x5557f86776b0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5557f8677710 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5557f86776f0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5557f86762d8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5557f8676188 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5557f8676200 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5557f8677528 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5557f8677508 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5557f8677008 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5557f86777a0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5557f8677760 <col:20> 'const Element *' lvalue ParmVar 0x5557f8676188 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5557f8677068 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5557f8677820 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5557f86777e0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5557f8676200 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5557f86770d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5557f86778a0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5557f8677860 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5557f8677130 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5557f86778e0 <col:73> 'bool' false
| `-CompoundStmt 0x5557f8677958 <col:80, line:46:5>
|-CXXMethodDecl 0x5557f8676408 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5557f86779d0 <col:36, line:51:5>
|   `-ReturnStmt 0x5557f86779c0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5557f86779a8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5557f8677978 <col:16> 'const Element *const' lvalue ->_context 0x5557f8677008
|         `-CXXThisExpr 0x5557f8677968 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5557f86764f8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5557f8677a50 <col:32, line:57:5>
|   `-ReturnStmt 0x5557f8677a40 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5557f8677a28 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5557f86779f8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5557f8677068
|         `-CXXThisExpr 0x5557f86779e8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5557f86765b8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5557f8676740 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5557f8676670 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5557f8676890 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5557f8676800 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5557f86769e0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5557f8676950 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5557f8676be8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5557f8676a98 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5557f8676b10 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5557f8676f18 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5557f8676ca8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5557f8676d28 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5557f8676df0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5557f8676fd0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5557f8677008 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5557f8677068 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5557f86770d0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5557f8677130 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5557f8677180 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5557f8677180
| `-ParmVarDecl 0x5557f8677298 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5557f8677338 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5557f8677338
| `-ParmVarDecl 0x5557f8677448 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5557f8740098 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f869da20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5557f869dbf8 prev 0x5557f869da20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5557f869dc88 <col:46, col:52> col:46 public
|-TypedefDecl 0x5557f869dcb0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f869f880 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5557f869f830 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5557f869e160 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5557f869e060 'type'
|     `-TemplateSpecializationType 0x5557f869dff0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5557f869ded0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5557f869deb0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5557f869de90 <col:24> 'unsigned long' 4
|       `-RecordType 0x5557f869dfd0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5557f869def0 'char_array'
|-TypedefDecl 0x5557f869f938 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5557f869f900 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5557f869f8e0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5557f869f880 'type'
|     `-ElaboratedType 0x5557f869f830 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5557f869e160 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5557f869e060 'type'
|         `-TemplateSpecializationType 0x5557f869dff0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5557f869ded0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5557f869deb0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5557f869de90 <col:24> 'unsigned long' 4
|           `-RecordType 0x5557f869dfd0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5557f869def0 'char_array'
|-CXXMethodDecl 0x5557f869fab8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5557f869f9c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5557f869fba8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5557f869fc88 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5557f869ff58 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5557f869fe60 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5557f86a0198 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5557f86a0010 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f86a0088 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5557f86a0368 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5557f86a0258 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f86a02d0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5557f86a04c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5557f86a0598 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5557f86a07e8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5557f86a0658 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5557f86a06d0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5557f86a0a48 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5557f86a08b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5557f86a0930 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5557f86a0c08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5557f86a0b18 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5557f86a0dc8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5557f86a0cd0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5557f86a0e80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5557f86a0f30 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5557f86a1168 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5557f86a0fe0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5557f86a1058 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5557f86a1408 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5557f86a1310 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5557f86a14d0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5557f86a1520 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5557f86a1570 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.7 = type { %struct.char_array.8*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.7 = type { %struct.char_array.8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f869c638 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5557f869c848 prev 0x5557f869c638 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5557f869d990 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5557f869d940 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5557f869d920 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5557f869d7d0 'type'
|     `-SubstTemplateTypeParmType 0x5557f869d5f0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5557f8297760 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f8297708 'T'
|       `-RecordType 0x5557f869d140 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5557f869d058 'sized_array_memory'
|-FieldDecl 0x5557f86a15c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5557f86a1610 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5557f86a7e80 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5557f869c8e0 'int' sugar
|   |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5557f82ce908 'T'
|   `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86a7f18 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5557f86a7ee0 'int &'
|   `-SubstTemplateTypeParmType 0x5557f869c8e0 'int' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86a7fa8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5557f86a7f70 'const int &'
|   `-QualType 0x5557f869c8e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5557f869c8e0 'int' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86a8038 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5557f86a8000 'int *'
|   `-SubstTemplateTypeParmType 0x5557f869c8e0 'int' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86a80c8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5557f86a8090 'const int *'
|   `-QualType 0x5557f869c8e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5557f869c8e0 'int' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86a8cb0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5557f86a8c60 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5557f86a8c40 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5557f86a8bd0 'type'
|     `-SubstTemplateTypeParmType 0x5557f86a8990 'int' sugar
|       |-TemplateTypeParmType 0x5557f82a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82a0950 'T'
|       `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86a8d18 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5557f86a7f70 'const int &'
|   `-QualType 0x5557f869c8e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5557f869c8e0 'int' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86a8d70 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86a8dd8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5557f86a8000 'int *'
|   `-SubstTemplateTypeParmType 0x5557f869c8e0 'int' sugar
|     |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557f82ce908 'T'
|     `-BuiltinType 0x5557f7fb6370 'int'
|-TypedefDecl 0x5557f86a8e40 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5557f86a8090 'const int *'
|   `-QualType 0x5557f869c8e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5557f869c8e0 'int' sugar
|       |-TemplateTypeParmType 0x5557f82ce960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557f82ce908 'T'
|       `-BuiltinType 0x5557f7fb6370 'int'
|-EnumDecl 0x5557f86a8e98 <line:134:5> col:5
| `-EnumConstantDecl 0x5557f86a8f90 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5557f86a8f70 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5557f82cfb28 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5557f82cfb00 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5557f82cfae0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5557f86a9018 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5557f86a9268 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f86a90d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f86a9170 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5557f86a9528 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5557f86a9410 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5557f86a97e8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5557f86a96d0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5557f86a9b30 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5557f86a9a10 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5557f86a9e40 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5557f86a9d20 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5557f86aa130 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f86a9f78 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f86a9ff0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5557f86aa258 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5557f86aa338 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f86aa390 <col:30> Inherited
|-CXXMethodDecl 0x5557f86aa3d8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5557f86aa488 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f86aa4e0 <col:30> Inherited
|-CXXMethodDecl 0x5557f86aa5a8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5557f86aa658 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f86aa6b0 <col:30> Inherited
|-CXXMethodDecl 0x5557f86aa6f8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5557f86aa7a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f86aa800 <col:30> Inherited
|-CXXMethodDecl 0x5557f86aa848 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5557f86aa8f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f86aa950 <col:30> Inherited
|-CXXMethodDecl 0x5557f86aa998 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5557f86aaa48 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557f86aaaa0 <col:30> Inherited
|-CXXMethodDecl 0x5557f86aaac8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5557f86aab78 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5557f86aac28 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5557f86aade8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f86aacd8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557f86aad50 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5557f86aaf38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5557f86aaea8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f86ab0e8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5557f86aaff0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5557f86ab1a0 <col:20>
| `-OptimizeNoneAttr 0x5557f86ab1f8 <col:30>
|-CXXMethodDecl 0x5557f86ab318 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5557f86ab220 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5557f86ab3d0 <col:20>
| `-OptimizeNoneAttr 0x5557f86ab428 <col:30>
|-CXXMethodDecl 0x5557f86ab4e0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5557f86ab450 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f86ab628 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5557f86ab598 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f86ab758 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5557f86ab888 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5557f86ab958 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5557f86aba28 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5557f86abb68 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5557f86abad8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f86abcb0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5557f86abc20 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557f86abdf8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5557f86abd68 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5557f86abeb0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5557f86abfb0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5557f86abf20 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5557f86ac068 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5557f86ac128 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5557f86ac228 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5557f86ac3a8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5557f86ac2e8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5557f86acb68 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5557f86ac460 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5557f86acac8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5557f86ac9c8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5557f86acc48 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5557f86acd98 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5557f86acd08 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5557f86ace50 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5557f86ad098 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5557f86acf10 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5557f86acf88 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5557f86ad258 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5557f86ad168 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5557f86ad4a8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5557f86ad320 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5557f86ad398 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5557f86ad568 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5557f86ad7c8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5557f86ad6d0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5557f86ad898 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  NonVirtualBaseLLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f869a7a8 prev 0x5557f867c978 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557f869a8a0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5557f869a990 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5557f86bf280 <col:16, line:828:9>
|-CXXDestructorDecl 0x5557f869aa80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5557f86bf290 <col:25, line:830:9>
|-CXXMethodDecl 0x5557f869ab80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5557f869ac30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5557f869acd8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5557f869acd8
| `-ParmVarDecl 0x5557f869ade8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5557f869b5a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5557f869b5a8
  `-ParmVarDecl 0x5557f869b6b8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f867c788 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5557f867c8e8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5557f867c978 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5557f867ca30 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5557f867cb60 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5557f867ca68 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5557f86aee58 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5557f86aee38 <col:31> 'int' 0
|-CXXConstructorDecl 0x5557f867ce78 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5557f867ccf0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5557f867cd68 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5557f86aee90 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5557f86aee70 <col:59> 'int' 0
|-CXXConstructorDecl 0x5557f867d050 <line:265:5, col:56> col:5 used Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5557f867cf40 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5557f867cfb8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5557f86aeec8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5557f86aeea8 <col:55> 'int' 0
|-CXXConstructorDecl 0x5557f867d408 <line:271:5, line:272:32> line:271:5 Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5557f867d1f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5557f867d268 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5557f867d2e0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5557f86aef00 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5557f86aeee0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5557f867d5c8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5557f867d508 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5557f867d6c0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5557f867d8a8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5557f867d7b0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5557f867d998 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5557f86af2b0 <col:24, line:291:5>
|   `-ReturnStmt 0x5557f86af2a0 <line:290:9, col:79>
|     `-BinaryOperator 0x5557f86af280 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5557f86af158 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5557f86af0b0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5557f86af090 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5557f86aef88 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5557f86aef70 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5557f86aef58 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5557f86aef28 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5557f869c5d0
|       | |   |       `-CXXThisExpr 0x5557f86aef18 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5557f86af078 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5557f86af060 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5557f86af028 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5557f86aeff8 <col:28, col:35> '<bound member function type>' ->size 0x5557f865d868
|       | |           `-ImplicitCastExpr 0x5557f86af048 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5557f86aefe0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5557f86aefb0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5557f869c5d0
|       | |                 `-CXXThisExpr 0x5557f86aefa0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5557f86af140 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5557f86af128 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5557f86af110 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5557f86af0e0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5557f86ad9e0
|       |         `-CXXThisExpr 0x5557f86af0d0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5557f86af260 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5557f86af248 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5557f86af230 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5557f86af1f0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5557f86af1d8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5557f86af188 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5557f86ada90
|         |     |   `-CXXThisExpr 0x5557f86af178 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5557f86af1b8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5557f86af210 <col:79> 'int' 0
|-CXXMethodDecl 0x5557f867da58 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5557f86af488 <col:32, line:296:5>
|   `-ReturnStmt 0x5557f86af478 <line:295:9, col:49>
|     `-BinaryOperator 0x5557f86af458 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5557f86af338 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5557f86af320 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5557f86af308 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5557f86af2d8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5557f86ad9e0
|       |       `-CXXThisExpr 0x5557f86af2c8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5557f86af438 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5557f86af420 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5557f86af408 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5557f86af3c8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5557f86af3b0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5557f86af360 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5557f86ada90
|         |     |   `-CXXThisExpr 0x5557f86af350 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5557f86af390 <col:43> 'int' 0
|         `-IntegerLiteral 0x5557f86af3e8 <col:49> 'int' 0
|-CXXMethodDecl 0x5557f867db48 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5557f86af698 <col:19, line:306:5>
|   |-IfStmt 0x5557f86af5b8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5557f86af4f8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5557f86af4e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5557f86af4b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5557f869c5d0
|   | |     `-CXXThisExpr 0x5557f86af4a0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5557f86af598 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5557f86af568 <col:13, col:20> '<bound member function type>' ->clear 0x5557f8660238
|   |     `-ImplicitCastExpr 0x5557f86af550 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5557f86af520 <col:13> 'Vector<String> *' lvalue ->_conf 0x5557f869c5d0
|   |         `-CXXThisExpr 0x5557f86af510 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5557f86af640 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5557f86af610 <col:9, col:16> '<bound member function type>' .clear 0x5557f86ad568
|   |   `-MemberExpr 0x5557f86af5e0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5557f86ad980
|   |     `-CXXThisExpr 0x5557f86af5d0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5557f86af688 <line:305:9, col:17>
|     `-UnaryOperator 0x5557f86af670 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f86af660 <col:17> 'Args *' this
|-CXXMethodDecl 0x5557f867ddc8 <line:313:5, col:36> col:11 used bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5557f867dcd0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5557f867df48 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5557f867de80 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5557f867e2c8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5557f867dff0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5557f867e228 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5557f867e098 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5557f867e110 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5557f86af9e0 <col:67, line:327:5>
|     |-WhileStmt 0x5557f86af990 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5557f86af7a8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5557f86af700 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5557f85e6c30 0x5557f85cde28 0x5557f85c5848 0x5557f85923f8 0x5557f855a978 0x5557f84ddd88 0x5557f832dec8 0x5557f832dba0 0x5557f831b700 0x5557f831b3b0 0x5557f831aaa0 0x5557f8284300 0x5557f8273d20
|     | | |-DeclRefExpr 0x5557f86af6c0 <col:16> 'Iter' lvalue ParmVar 0x5557f867e098 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5557f86af6e0 <col:25> 'Iter' lvalue ParmVar 0x5557f867e110 'end' 'Iter'
|     | `-CompoundStmt 0x5557f86af970 <col:30, line:325:9>
|     |   |-CallExpr 0x5557f86af910 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5557f86af7f0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5557f86af8e0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5557f86af870 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|     |   |   `-DeclRefExpr 0x5557f86af850 <col:24> 'Iter' lvalue ParmVar 0x5557f867e098 'begin' 'Iter'
|     |   `-UnaryOperator 0x5557f86af958 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5557f86af938 <col:15> 'Iter' lvalue ParmVar 0x5557f867e098 'begin' 'Iter'
|     `-ReturnStmt 0x5557f86af9d0 <line:326:9, col:17>
|       `-UnaryOperator 0x5557f86af9b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86af9a8 <col:17> 'Args *' this
|-CXXMethodDecl 0x5557f867e3d0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5557f867e340 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5557f867e518 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5557f867e488 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5557f867e5e0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5557f86afac0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5557f86afa60 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5557f86afa10 <col:9> '<bound member function type>' ->reset_from 0x5557f86ade08
|   | | `-CXXThisExpr 0x5557f86afa00 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5557f86afa40 <col:20> 'int' 0
|   `-ReturnStmt 0x5557f86afab0 <line:352:9, col:17>
|     `-UnaryOperator 0x5557f86afa98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f86afa88 <col:17> 'Args *' this
|-VarDecl 0x5557f867e698 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5557f867e700 <col:38> 'int' 1
|-VarDecl 0x5557f867e790 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5557f867e7f8 <col:39> 'int' 2
|-VarDecl 0x5557f867e888 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5557f867e8f0 <col:39> 'int' 4
|-VarDecl 0x5557f867e980 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5557f867e9e8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5557f867ed68 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5557f867ea60 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557f867ecc8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5557f867eb10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f867ebb8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5557f86afc18 <col:43, line:371:5>
|     `-ReturnStmt 0x5557f86afc08 <line:370:9, col:34>
|       `-CallExpr 0x5557f86afbd0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86afaf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86afb70 <col:21> 'const char *' lvalue ParmVar 0x5557f867eb10 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557f86afb90 <col:30> 'int' 0
|         `-DeclRefExpr 0x5557f86afbb0 <col:33> 'T' lvalue ParmVar 0x5557f867ebb8 'x' 'T &'
|-FunctionTemplateDecl 0x5557f867f098 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5557f867edd0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557f867eff8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5557f867ee80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f867ef28 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5557f86afd68 <col:45, line:375:5>
|     `-ReturnStmt 0x5557f86afd58 <line:374:9, col:42>
|       `-CallExpr 0x5557f86afd20 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86afc40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86afcc0 <col:21> 'const char *' lvalue ParmVar 0x5557f867ee80 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86afce0 <col:30> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int'
|         `-DeclRefExpr 0x5557f86afd00 <col:41> 'T' lvalue ParmVar 0x5557f867ef28 'x' 'T &'
|-FunctionTemplateDecl 0x5557f867f3c8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5557f867f100 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557f867f328 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5557f867f1b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f867f258 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b13c8 <col:45, line:379:5>
|     `-ReturnStmt 0x5557f86b13b8 <line:378:9, col:43>
|       `-CallExpr 0x5557f86b1380 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86afd90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86afe10 <col:21> 'const char *' lvalue ParmVar 0x5557f867f1b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86afe30 <col:30> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int'
|         `-DeclRefExpr 0x5557f86afe50 <col:42> 'T' lvalue ParmVar 0x5557f867f258 'x' 'T &'
|-FunctionTemplateDecl 0x5557f867f6f8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5557f867f430 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557f867f658 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5557f867f4e0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f867f588 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b15c8 <col:46, line:383:5>
|     `-ReturnStmt 0x5557f86b15b8 <line:382:9, col:55>
|       `-CallExpr 0x5557f86b1580 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b13f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b1470 <col:21> 'const char *' lvalue ParmVar 0x5557f867f4e0 'keyword' 'const char *'
|         |-BinaryOperator 0x5557f86b1540 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5557f86b14f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5557f86b14d0 <col:30> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5557f86b1528 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5557f86b1508 <col:42> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5557f86b1560 <col:54> 'T' lvalue ParmVar 0x5557f867f588 'x' 'T &'
|-FunctionTemplateDecl 0x5557f867faf8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5557f867f760 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557f867fa58 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5557f867f810 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f867f890 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5557f867f938 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b1708 <col:54, line:388:5>
|     |-CallExpr 0x5557f86b1690 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5557f86b15e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5557f86b1620 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5557f86b1630 <col:30> 'const char *' lvalue ParmVar 0x5557f867f810 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5557f86b1650 <col:39> 'int' lvalue ParmVar 0x5557f867f890 'flags' 'int'
|     | `-DeclRefExpr 0x5557f86b1670 <col:46> 'T' lvalue ParmVar 0x5557f867f938 'x' 'T &'
|     `-ReturnStmt 0x5557f86b16f8 <line:387:9, col:17>
|       `-UnaryOperator 0x5557f86b16e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86b16d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557f867ffa8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5557f867fb68 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5557f867fbe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5557f867ff08 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5557f867fca8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f867fd48 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5557f867fde8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5557f86b1878 <col:74, line:403:5>
|     `-ReturnStmt 0x5557f86b1868 <line:402:9, col:56>
|       `-CallExpr 0x5557f86b1828 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b1738 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b17a8 <col:28> 'const char *' lvalue ParmVar 0x5557f867fca8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557f86b17c8 <col:37> 'int' 0
|         |-DeclRefExpr 0x5557f86b17e8 <col:40> 'T' lvalue ParmVar 0x5557f867fd48 'x' 'T &'
|         `-DeclRefExpr 0x5557f86b1808 <col:43> 'const V' lvalue ParmVar 0x5557f867fde8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5557f8680418 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5557f8680018 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5557f8680098 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5557f8680378 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5557f8680158 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f86801f8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5557f8680298 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5557f86b19e0 <col:76, line:407:5>
|     `-ReturnStmt 0x5557f86b19d0 <line:406:9, col:65>
|       `-CallExpr 0x5557f86b1990 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b18a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b1910 <col:28> 'const char *' lvalue ParmVar 0x5557f8680158 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b1930 <col:37> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int'
|         |-DeclRefExpr 0x5557f86b1950 <col:49> 'T' lvalue ParmVar 0x5557f86801f8 'x' 'T &'
|         `-DeclRefExpr 0x5557f86b1970 <col:52> 'const V' lvalue ParmVar 0x5557f8680298 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5557f8680968 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5557f8680488 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5557f8680508 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5557f86808c8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5557f86805c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8680648 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5557f86806e8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5557f8680788 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5557f86b1b48 <col:85, line:412:5>
|     |-CallExpr 0x5557f86b1ac8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5557f86b19f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5557f86b1a38 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5557f86b1a48 <col:37> 'const char *' lvalue ParmVar 0x5557f86805c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5557f86b1a68 <col:46> 'int' lvalue ParmVar 0x5557f8680648 'flags' 'int'
|     | |-DeclRefExpr 0x5557f86b1a88 <col:53> 'T' lvalue ParmVar 0x5557f86806e8 'x' 'T &'
|     | `-DeclRefExpr 0x5557f86b1aa8 <col:56> 'const V' lvalue ParmVar 0x5557f8680788 'default_value' 'const V &'
|     `-ReturnStmt 0x5557f86b1b38 <line:411:9, col:17>
|       `-UnaryOperator 0x5557f86b1b20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86b1b10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557f8680df8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5557f86809e0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8680a58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f8680d58 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5557f8680b18 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8680b90 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8680c38 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b1cc8 <col:53, line:425:5>
|     `-ReturnStmt 0x5557f86b1cb8 <line:424:9, col:42>
|       `-CallExpr 0x5557f86b1c78 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b1b78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b1bf8 <col:21> 'const char *' lvalue ParmVar 0x5557f8680b18 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557f86b1c18 <col:30> 'int' 0
|         |-DeclRefExpr 0x5557f86b1c38 <col:33> 'P' lvalue ParmVar 0x5557f8680b90 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b1c58 <col:41> 'T' lvalue ParmVar 0x5557f8680c38 'x' 'T &'
|-FunctionTemplateDecl 0x5557f8681248 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5557f8680e68 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8680ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f86811a8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5557f8680fa8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8681020 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5557f86810c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b1e40 <col:55, line:429:5>
|     `-ReturnStmt 0x5557f86b1e30 <line:428:9, col:50>
|       `-CallExpr 0x5557f86b1df0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b1cf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b1d70 <col:21> 'const char *' lvalue ParmVar 0x5557f8680fa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b1d90 <col:30> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int'
|         |-DeclRefExpr 0x5557f86b1db0 <col:41> 'P' lvalue ParmVar 0x5557f8681020 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b1dd0 <col:49> 'T' lvalue ParmVar 0x5557f86810c8 'x' 'T &'
|-FunctionTemplateDecl 0x5557f8681698 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5557f86812b8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8681338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f86815f8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5557f86813f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8681470 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8681518 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b1fb8 <col:55, line:433:5>
|     `-ReturnStmt 0x5557f86b1fa8 <line:432:9, col:51>
|       `-CallExpr 0x5557f86b1f68 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b1e68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b1ee8 <col:21> 'const char *' lvalue ParmVar 0x5557f86813f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b1f08 <col:30> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int'
|         |-DeclRefExpr 0x5557f86b1f28 <col:42> 'P' lvalue ParmVar 0x5557f8681470 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b1f48 <col:50> 'T' lvalue ParmVar 0x5557f8681518 'x' 'T &'
|-FunctionTemplateDecl 0x5557f8681ae8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5557f8681708 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8681788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f8681a48 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5557f8681848 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f86818c0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8681968 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b21e0 <col:56, line:437:5>
|     `-ReturnStmt 0x5557f86b21d0 <line:436:9, col:63>
|       `-CallExpr 0x5557f86b2190 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b1fe0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b2060 <col:21> 'const char *' lvalue ParmVar 0x5557f8681848 'keyword' 'const char *'
|         |-BinaryOperator 0x5557f86b2130 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5557f86b20e0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5557f86b20c0 <col:30> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5557f86b2118 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5557f86b20f8 <col:42> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5557f86b2150 <col:54> 'P' lvalue ParmVar 0x5557f86818c0 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b2170 <col:62> 'T' lvalue ParmVar 0x5557f8681968 'x' 'T &'
|-FunctionTemplateDecl 0x5557f8682018 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5557f8681b58 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8681bd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5557f8681f78 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
| | |-ParmVarDecl 0x5557f8681c98 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5557f8681d18 <col:37, col:41> col:41 referenced flags 'int'
| | |-ParmVarDecl 0x5557f8681d90 <col:48, col:50> col:50 referenced parser 'P'
| | |-ParmVarDecl 0x5557f8681e38 <col:58, col:61> col:61 referenced x 'T &'
| | `-CompoundStmt 0x5557f86b2348 <col:64, line:442:5>
| |   |-CallExpr 0x5557f86b22c8 <line:440:9, col:55> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5557f86b21f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
| |   | |-CXXThisExpr 0x5557f86b2238 <col:24> 'Args *' this
| |   | |-DeclRefExpr 0x5557f86b2248 <col:30> 'const char *' lvalue ParmVar 0x5557f8681c98 'keyword' 'const char *'
| |   | |-DeclRefExpr 0x5557f86b2268 <col:39> 'int' lvalue ParmVar 0x5557f8681d18 'flags' 'int'
| |   | |-DeclRefExpr 0x5557f86b2288 <col:46> 'P' lvalue ParmVar 0x5557f8681d90 'parser' 'P'
| |   | `-DeclRefExpr 0x5557f86b22a8 <col:54> 'T' lvalue ParmVar 0x5557f8681e38 'x' 'T &'
| |   `-ReturnStmt 0x5557f86b2338 <line:441:9, col:17>
| |     `-UnaryOperator 0x5557f86b2320 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5557f86b2310 <col:17> 'Args *' this
| `-CXXMethodDecl 0x5557f8740be8 <line:439:5, line:442:5> line:439:11 used read 'Args &(const char *, int, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5557f87408d0 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x5557f8740938 <col:37, col:41> col:41 flags 'int'
|   |-ParmVarDecl 0x5557f87409d8 <col:48, col:50> col:50 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x5557f8740aa8 <col:58, col:61> col:61 x 'int &'
|-FunctionTemplateDecl 0x5557f8682618 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5557f8682090 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8682108 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5557f8682188 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5557f8682578 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5557f8682250 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f86822c8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8682368 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5557f8682438 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5557f86b24e0 <col:84, line:458:5>
|     `-ReturnStmt 0x5557f86b24d0 <line:457:9, col:64>
|       `-CallExpr 0x5557f86b2488 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b2378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b23e8 <col:28> 'const char *' lvalue ParmVar 0x5557f8682250 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557f86b2408 <col:37> 'int' 0
|         |-DeclRefExpr 0x5557f86b2428 <col:40> 'P' lvalue ParmVar 0x5557f86822c8 'parser' 'P'
|         |-DeclRefExpr 0x5557f86b2448 <col:48> 'T' lvalue ParmVar 0x5557f8682368 'x' 'T &'
|         `-DeclRefExpr 0x5557f86b2468 <col:51> 'const V' lvalue ParmVar 0x5557f8682438 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5557f8682b98 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5557f8682690 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8682708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5557f8682788 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5557f8682af8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5557f8682850 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f86828c8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8682968 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5557f8682a08 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5557f86b2670 <col:86, line:462:5>
|     `-ReturnStmt 0x5557f86b2660 <line:461:9, col:73>
|       `-CallExpr 0x5557f86b2618 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b2508 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b2578 <col:28> 'const char *' lvalue ParmVar 0x5557f8682850 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b2598 <col:37> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int'
|         |-DeclRefExpr 0x5557f86b25b8 <col:49> 'P' lvalue ParmVar 0x5557f86828c8 'parser' 'P'
|         |-DeclRefExpr 0x5557f86b25d8 <col:57> 'T' lvalue ParmVar 0x5557f8682968 'x' 'T &'
|         `-DeclRefExpr 0x5557f86b25f8 <col:60> 'const V' lvalue ParmVar 0x5557f8682a08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5557f86831f8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5557f8682c10 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8682c88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5557f8682d08 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5557f8683158 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5557f8682dd0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8682e50 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5557f8682ec8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8682f68 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5557f8683008 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5557f86b2800 <col:95, line:467:5>
|     |-CallExpr 0x5557f86b2778 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5557f86b2688 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5557f86b26c8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5557f86b26d8 <col:37> 'const char *' lvalue ParmVar 0x5557f8682dd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5557f86b26f8 <col:46> 'int' lvalue ParmVar 0x5557f8682e50 'flags' 'int'
|     | |-DeclRefExpr 0x5557f86b2718 <col:53> 'P' lvalue ParmVar 0x5557f8682ec8 'parser' 'P'
|     | |-DeclRefExpr 0x5557f86b2738 <col:61> 'T' lvalue ParmVar 0x5557f8682f68 'x' 'T &'
|     | `-DeclRefExpr 0x5557f86b2758 <col:64> 'const V' lvalue ParmVar 0x5557f8683008 'default_value' 'const V &'
|     `-ReturnStmt 0x5557f86b27f0 <line:466:9, col:17>
|       `-UnaryOperator 0x5557f86b27d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86b27c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557f86837d8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5557f8683278 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f86832f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5557f8683378 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| |-CXXMethodDecl 0x5557f8683738 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
| | |-ParmVarDecl 0x5557f8683440 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5557f86834b8 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x5557f8683558 <col:47, col:51> col:51 referenced x1 'T1 &'
| | |-ParmVarDecl 0x5557f86835f8 <col:55, col:59> col:59 referenced x2 'T2 &'
| | `-CompoundStmt 0x5557f86b29a8 <col:63, line:481:5>
| |   `-ReturnStmt 0x5557f86b2998 <line:480:9, col:47>
| |     `-CallExpr 0x5557f86b2950 <col:16, col:47> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5557f86b2830 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5557f86b28b0 <col:21> 'const char *' lvalue ParmVar 0x5557f8683440 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5557f86b28d0 <col:30> 'int' 0
| |       |-DeclRefExpr 0x5557f86b28f0 <col:33> 'P' lvalue ParmVar 0x5557f86834b8 'parser' 'P'
| |       |-DeclRefExpr 0x5557f86b2910 <col:41> 'T1' lvalue ParmVar 0x5557f8683558 'x1' 'T1 &'
| |       `-DeclRefExpr 0x5557f86b2930 <col:45> 'T2' lvalue ParmVar 0x5557f86835f8 'x2' 'T2 &'
| `-CXXMethodDecl 0x5557f87411d8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, bool, AnnoArg &, int &)'
|   |-TemplateArgument type 'bool'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5557f8740e28 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x5557f8740ec8 <col:37, col:39> col:39 parser 'bool':'bool'
|   |-ParmVarDecl 0x5557f8740fc8 <col:47, col:51> col:51 x1 'AnnoArg &'
|   `-ParmVarDecl 0x5557f8741098 <col:55, col:59> col:59 x2 'int &'
|-FunctionTemplateDecl 0x5557f8683d58 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5557f8683850 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f86838c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5557f8683948 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5557f8683cb8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5557f8683a10 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8683a88 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8683b28 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5557f8683bc8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5557f86b2b48 <col:65, line:485:5>
|     `-ReturnStmt 0x5557f86b2b38 <line:484:9, col:55>
|       `-CallExpr 0x5557f86b2af0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b29d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b2a50 <col:21> 'const char *' lvalue ParmVar 0x5557f8683a10 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b2a70 <col:30> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int'
|         |-DeclRefExpr 0x5557f86b2a90 <col:41> 'P' lvalue ParmVar 0x5557f8683a88 'parser' 'P'
|         |-DeclRefExpr 0x5557f86b2ab0 <col:49> 'T1' lvalue ParmVar 0x5557f8683b28 'x1' 'T1 &'
|         `-DeclRefExpr 0x5557f86b2ad0 <col:53> 'T2' lvalue ParmVar 0x5557f8683bc8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5557f86842d8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5557f8683dd0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8683e48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5557f8683ec8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5557f8684238 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5557f8683f90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8684008 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5557f86840a8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5557f8684148 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5557f86b2ce8 <col:65, line:489:5>
|     `-ReturnStmt 0x5557f86b2cd8 <line:488:9, col:56>
|       `-CallExpr 0x5557f86b2c90 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b2b70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b2bf0 <col:21> 'const char *' lvalue ParmVar 0x5557f8683f90 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b2c10 <col:30> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int'
|         |-DeclRefExpr 0x5557f86b2c30 <col:42> 'P' lvalue ParmVar 0x5557f8684008 'parser' 'P'
|         |-DeclRefExpr 0x5557f86b2c50 <col:50> 'T1' lvalue ParmVar 0x5557f86840a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5557f86b2c70 <col:54> 'T2' lvalue ParmVar 0x5557f8684148 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5557f8684858 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5557f8684350 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f86843c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5557f8684448 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5557f86847b8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5557f8684510 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8684588 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8684628 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5557f86846c8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5557f86b2f38 <col:66, line:493:5>
|     `-ReturnStmt 0x5557f86b2f28 <line:492:9, col:68>
|       `-CallExpr 0x5557f86b2ee0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b2d10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b2d90 <col:21> 'const char *' lvalue ParmVar 0x5557f8684510 'keyword' 'const char *'
|         |-BinaryOperator 0x5557f86b2e60 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5557f86b2e10 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5557f86b2df0 <col:30> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5557f86b2e48 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5557f86b2e28 <col:42> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5557f86b2e80 <col:54> 'P' lvalue ParmVar 0x5557f8684588 'parser' 'P'
|         |-DeclRefExpr 0x5557f86b2ea0 <col:62> 'T1' lvalue ParmVar 0x5557f8684628 'x1' 'T1 &'
|         `-DeclRefExpr 0x5557f86b2ec0 <col:66> 'T2' lvalue ParmVar 0x5557f86846c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5557f86890a8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5557f86848d0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8684948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5557f86849c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5557f8689008 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5557f8684a90 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8688d00 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5557f8688d78 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8688e18 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5557f8688eb8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5557f86b30c8 <col:74, line:498:5>
|     |-CallExpr 0x5557f86b3040 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5557f86b2f50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5557f86b2f90 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5557f86b2fa0 <col:30> 'const char *' lvalue ParmVar 0x5557f8684a90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5557f86b2fc0 <col:39> 'int' lvalue ParmVar 0x5557f8688d00 'flags' 'int'
|     | |-DeclRefExpr 0x5557f86b2fe0 <col:46> 'P' lvalue ParmVar 0x5557f8688d78 'parser' 'P'
|     | |-DeclRefExpr 0x5557f86b3000 <col:54> 'T1' lvalue ParmVar 0x5557f8688e18 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5557f86b3020 <col:58> 'T2' lvalue ParmVar 0x5557f8688eb8 'x2' 'T2 &'
|     `-ReturnStmt 0x5557f86b30b8 <line:497:9, col:17>
|       `-UnaryOperator 0x5557f86b30a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86b3090 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557f8689408 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5557f8689128 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557f8689368 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5557f86891e0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8689258 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5557f86b3210 <col:52, line:509:5>
|     `-ReturnStmt 0x5557f86b3200 <line:508:9, col:44>
|       `-CallExpr 0x5557f86b31c8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b30f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b3168 <col:26> 'const char *' lvalue ParmVar 0x5557f86891e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557f86b3188 <col:35> 'int' 0
|         `-DeclRefExpr 0x5557f86b31a8 <col:38> 'P' lvalue ParmVar 0x5557f8689258 'parser' 'P'
|-FunctionTemplateDecl 0x5557f8689708 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5557f8689470 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557f8689668 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5557f8689520 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8689598 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5557f86b3350 <col:54, line:513:5>
|     `-ReturnStmt 0x5557f86b3340 <line:512:9, col:52>
|       `-CallExpr 0x5557f86b3308 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b3238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b32a8 <col:26> 'const char *' lvalue ParmVar 0x5557f8689520 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b32c8 <col:35> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int'
|         `-DeclRefExpr 0x5557f86b32e8 <col:46> 'P' lvalue ParmVar 0x5557f8689598 'parser' 'P'
|-FunctionTemplateDecl 0x5557f8689a08 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5557f8689770 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557f8689968 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5557f8689820 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8689898 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5557f86b3490 <col:54, line:517:5>
|     `-ReturnStmt 0x5557f86b3480 <line:516:9, col:53>
|       `-CallExpr 0x5557f86b3448 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b3378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b33e8 <col:26> 'const char *' lvalue ParmVar 0x5557f8689820 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b3408 <col:35> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int'
|         `-DeclRefExpr 0x5557f86b3428 <col:47> 'P' lvalue ParmVar 0x5557f8689898 'parser' 'P'
|-FunctionTemplateDecl 0x5557f8689d08 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5557f8689a70 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557f8689c68 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5557f8689b20 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8689b98 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5557f86b3680 <col:55, line:521:5>
|     `-ReturnStmt 0x5557f86b3670 <line:520:9, col:65>
|       `-CallExpr 0x5557f86b3638 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b34b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b3528 <col:26> 'const char *' lvalue ParmVar 0x5557f8689b20 'keyword' 'const char *'
|         |-BinaryOperator 0x5557f86b35f8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5557f86b35a8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5557f86b3588 <col:35> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5557f86b35e0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5557f86b35c0 <col:47> 'const int' lvalue Var 0x5557f867e790 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5557f86b3618 <col:59> 'P' lvalue ParmVar 0x5557f8689b98 'parser' 'P'
|-FunctionTemplateDecl 0x5557f868a0d8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5557f8689d70 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557f868a038 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5557f8689e20 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8689ea0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5557f8689f18 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5557f86b37c0 <col:63, line:526:5>
|     |-CallExpr 0x5557f86b3748 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5557f86b3698 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5557f86b36d8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5557f86b36e8 <col:35> 'const char *' lvalue ParmVar 0x5557f8689e20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5557f86b3708 <col:44> 'int' lvalue ParmVar 0x5557f8689ea0 'flags' 'int'
|     | `-DeclRefExpr 0x5557f86b3728 <col:51> 'P' lvalue ParmVar 0x5557f8689f18 'parser' 'P'
|     `-ReturnStmt 0x5557f86b37b0 <line:525:9, col:17>
|       `-UnaryOperator 0x5557f86b3798 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86b3788 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557f868a528 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5557f868a148 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868a1c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868a488 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5557f868a288 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868a300 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868a3a8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b3918 <col:58, line:541:5>
|     `-ReturnStmt 0x5557f86b3908 <line:540:9, col:39>
|       `-CallExpr 0x5557f86b38d0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b37f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b3870 <col:21> 'const char *' lvalue ParmVar 0x5557f868a288 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b3890 <col:30> 'P' lvalue ParmVar 0x5557f868a300 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b38b0 <col:38> 'T' lvalue ParmVar 0x5557f868a3a8 'x' 'T &'
|-FunctionTemplateDecl 0x5557f868a978 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5557f868a598 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868a618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868a8d8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5557f868a6d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868a750 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868a7f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b3a50 <col:60, line:545:5>
|     `-ReturnStmt 0x5557f86b3a40 <line:544:9, col:41>
|       `-CallExpr 0x5557f86b3a08 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b3940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b39a8 <col:23> 'const char *' lvalue ParmVar 0x5557f868a6d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b39c8 <col:32> 'P' lvalue ParmVar 0x5557f868a750 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b39e8 <col:40> 'T' lvalue ParmVar 0x5557f868a7f8 'x' 'T &'
|-FunctionTemplateDecl 0x5557f868adc8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5557f868a9e8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868aa68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868ad28 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5557f868ab28 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868aba0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868ac48 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b3b88 <col:60, line:549:5>
|     `-ReturnStmt 0x5557f86b3b78 <line:548:9, col:41>
|       `-CallExpr 0x5557f86b3b40 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b3a78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b3ae0 <col:23> 'const char *' lvalue ParmVar 0x5557f868ab28 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b3b00 <col:32> 'P' lvalue ParmVar 0x5557f868aba0 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b3b20 <col:40> 'T' lvalue ParmVar 0x5557f868ac48 'x' 'T &'
|-FunctionTemplateDecl 0x5557f868b218 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5557f868ae38 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868aeb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868b178 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5557f868af78 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868aff0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868b098 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b3cc0 <col:61, line:553:5>
|     `-ReturnStmt 0x5557f86b3cb0 <line:552:9, col:42>
|       `-CallExpr 0x5557f86b3c78 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b3bb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b3c18 <col:24> 'const char *' lvalue ParmVar 0x5557f868af78 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b3c38 <col:33> 'P' lvalue ParmVar 0x5557f868aff0 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b3c58 <col:41> 'T' lvalue ParmVar 0x5557f868b098 'x' 'T &'
|-FunctionTemplateDecl 0x5557f868b6f8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5557f868b288 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868b308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868b658 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5557f868b3c8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868b448 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5557f868b4c0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868b568 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b3e38 <col:69, line:557:5>
|     `-ReturnStmt 0x5557f86b3e28 <line:556:9, col:46>
|       `-CallExpr 0x5557f86b3de8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b3ce8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b3d68 <col:21> 'const char *' lvalue ParmVar 0x5557f868b3c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b3d88 <col:30> 'int' lvalue ParmVar 0x5557f868b448 'flags' 'int'
|         |-DeclRefExpr 0x5557f86b3da8 <col:37> 'P' lvalue ParmVar 0x5557f868b4c0 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b3dc8 <col:45> 'T' lvalue ParmVar 0x5557f868b568 'x' 'T &'
|-FunctionTemplateDecl 0x5557f868ba08 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5557f868b770 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557f868b968 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5557f868b820 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868b898 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5557f86b3f78 <col:56, line:571:5>
|     `-ReturnStmt 0x5557f86b3f68 <line:570:9, col:48>
|       `-CallExpr 0x5557f86b3f30 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b3e60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b3ed0 <col:30> 'const char *' lvalue ParmVar 0x5557f868b820 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557f86b3ef0 <col:39> 'int' 0
|         `-DeclRefExpr 0x5557f86b3f10 <col:42> 'P' lvalue ParmVar 0x5557f868b898 'parser' 'P'
|-FunctionTemplateDecl 0x5557f868bd98 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5557f868ba70 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557f868bcf8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5557f868bb20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868bba0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5557f868bc18 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5557f86b4148 <col:67, line:576:5>
|     |-CallExpr 0x5557f86b40d0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5557f86b3f90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5557f86b3fd0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5557f86b3fe0 <col:39> 'const char *' lvalue ParmVar 0x5557f868bb20 'keyword' 'const char *'
|     | |-BinaryOperator 0x5557f86b4090 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5557f86b4040 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5557f86b4000 <col:48> 'int' lvalue ParmVar 0x5557f868bba0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5557f86b4078 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5557f86b4058 <col:56> 'const int' lvalue Var 0x5557f867e980 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5557f86b40b0 <col:68> 'P' lvalue ParmVar 0x5557f868bc18 'parser' 'P'
|     `-ReturnStmt 0x5557f86b4138 <line:575:9, col:17>
|       `-UnaryOperator 0x5557f86b4120 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86b4110 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557f868c1e8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5557f868be08 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868be88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868c148 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5557f868bf48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868bfc0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868c068 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b42b8 <col:62, line:592:5>
|     `-ReturnStmt 0x5557f86b42a8 <line:591:9, col:51>
|       `-CallExpr 0x5557f86b4268 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b4178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b41e8 <col:30> 'const char *' lvalue ParmVar 0x5557f868bf48 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557f86b4208 <col:39> 'int' 0
|         |-DeclRefExpr 0x5557f86b4228 <col:42> 'P' lvalue ParmVar 0x5557f868bfc0 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b4248 <col:50> 'T' lvalue ParmVar 0x5557f868c068 'x' 'T &'
|-FunctionTemplateDecl 0x5557f868c6c8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5557f868c258 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868c2d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868c628 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5557f868c398 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868c418 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5557f868c490 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868c538 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b44b0 <col:73, line:597:5>
|     |-CallExpr 0x5557f86b4430 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5557f86b42d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5557f86b4310 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5557f86b4320 <col:39> 'const char *' lvalue ParmVar 0x5557f868c398 'keyword' 'const char *'
|     | |-BinaryOperator 0x5557f86b43d0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5557f86b4380 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5557f86b4340 <col:48> 'int' lvalue ParmVar 0x5557f868c418 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5557f86b43b8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5557f86b4398 <col:56> 'const int' lvalue Var 0x5557f867e980 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5557f86b43f0 <col:68> 'P' lvalue ParmVar 0x5557f868c490 'parser' 'P'
|     | `-DeclRefExpr 0x5557f86b4410 <col:76> 'T' lvalue ParmVar 0x5557f868c538 'x' 'T &'
|     `-ReturnStmt 0x5557f86b44a0 <line:596:9, col:17>
|       `-UnaryOperator 0x5557f86b4488 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86b4478 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557f868cc78 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5557f868c740 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868c7b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868cbd8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5557f868c878 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868c8f0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868cab0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5557f86b4620 <col:65, line:614:5>
|     `-ReturnStmt 0x5557f86b4610 <line:613:9, col:46>
|       `-CallExpr 0x5557f86b45d0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b44e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b4550 <col:25> 'const char *' lvalue ParmVar 0x5557f868c878 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557f86b4570 <col:34> 'int' 0
|         |-DeclRefExpr 0x5557f86b4590 <col:37> 'P' lvalue ParmVar 0x5557f868c8f0 'parser' 'P'
|         `-DeclRefExpr 0x5557f86b45b0 <col:45> 'Vector<T>' lvalue ParmVar 0x5557f868cab0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5557f868d0a8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5557f868cce8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557f868d008 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5557f868cda0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868cef0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5557f86b4840 <col:55, line:618:5>
|     `-ReturnStmt 0x5557f86b4830 <line:617:9, col:55>
|       `-CallExpr 0x5557f86b47f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b4648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b46b8 <col:25> 'const char *' lvalue ParmVar 0x5557f868cda0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557f86b46d8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5557f86b47b0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5557f86b47d0 <col:54> 'Vector<T>' lvalue ParmVar 0x5557f868cef0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5557f868d678 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5557f868d110 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868d188 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868d5d8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5557f868d248 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868d2c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5557f868d340 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868d490 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5557f86b4a38 <col:76, line:623:5>
|     |-CallExpr 0x5557f86b49b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5557f86b4858 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5557f86b4898 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5557f86b48a8 <col:34> 'const char *' lvalue ParmVar 0x5557f868d248 'keyword' 'const char *'
|     | |-BinaryOperator 0x5557f86b4958 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5557f86b4908 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5557f86b48c8 <col:43> 'int' lvalue ParmVar 0x5557f868d2c8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5557f86b4940 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5557f86b4920 <col:51> 'const int' lvalue Var 0x5557f867e980 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5557f86b4978 <col:63> 'P' lvalue ParmVar 0x5557f868d340 'parser' 'P'
|     | `-DeclRefExpr 0x5557f86b4998 <col:71> 'Vector<T>' lvalue ParmVar 0x5557f868d490 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5557f86b4a28 <line:622:9, col:17>
|       `-UnaryOperator 0x5557f86b4a10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86b4a00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557f868dbb8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5557f868d6f0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868d768 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868db18 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5557f868d828 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868d8a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5557f868d9f0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5557f86b4ca0 <col:66, line:627:5>
|     `-ReturnStmt 0x5557f86b4c90 <line:626:9, col:59>
|       `-CallExpr 0x5557f86b4c50 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557f86b4a68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557f86b4ad8 <col:25> 'const char *' lvalue ParmVar 0x5557f868d828 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557f86b4af8 <col:34> 'int' lvalue ParmVar 0x5557f868d8a8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5557f86b4c10 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5557f86b4c30 <col:58> 'Vector<T>' lvalue ParmVar 0x5557f868d9f0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5557f868dc48 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5557f86b4d20 <col:25, line:633:5>
|   `-ReturnStmt 0x5557f86b4d10 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5557f86b4cf8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5557f86b4cc8 <col:16> 'const bool' lvalue ->_status 0x5557f869c438
|         `-CXXThisExpr 0x5557f86b4cb8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5557f868ddc8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5557f868dd00 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5557f86b4e08 <col:27, line:639:5>
|   |-BinaryOperator 0x5557f86b4db0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5557f86b4d38 <col:9> 'bool' lvalue ParmVar 0x5557f868dd00 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5557f86b4d98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5557f86b4d68 <col:13> 'bool' lvalue ->_status 0x5557f869c438
|   |     `-CXXThisExpr 0x5557f86b4d58 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5557f86b4df8 <line:638:9, col:17>
|     `-UnaryOperator 0x5557f86b4de0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f86b4dd0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5557f868df48 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5557f868de88 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5557f86b4ef8 <col:39, line:644:5>
|   |-BinaryOperator 0x5557f86b4ea0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5557f86b4e28 <col:9> 'bool' lvalue ParmVar 0x5557f868de88 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5557f86b4e88 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5557f86b4e58 <col:13> 'const bool' lvalue ->_status 0x5557f869c438
|   |     `-CXXThisExpr 0x5557f86b4e48 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5557f86b4ee8 <line:643:9, col:17>
|     `-UnaryOperator 0x5557f86b4ed0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f86b4ec0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5557f868e010 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5557f86b4fa0 <col:30, line:651:5>
|   `-ReturnStmt 0x5557f86b4f90 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5557f86b4f78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5557f86b4f48 <col:16> 'bool' lvalue ->_read_status 0x5557f8677130
|         `-ImplicitCastExpr 0x5557f86b4f28 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5557f86b4f18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5557f868e158 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5557f868e0c8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5557f86b50a8 <col:32, line:658:5>
|   |-BinaryOperator 0x5557f86b5050 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5557f86b4fb8 <col:9> 'bool' lvalue ParmVar 0x5557f868e0c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5557f86b5038 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5557f86b5008 <col:13> 'bool' lvalue ->_read_status 0x5557f8677130
|   |     `-ImplicitCastExpr 0x5557f86b4fe8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5557f86b4fd8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5557f86b5098 <line:657:9, col:17>
|     `-UnaryOperator 0x5557f86b5080 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f86b5070 <col:17> 'Args *' this
|-CXXMethodDecl 0x5557f868e2a8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5557f868e218 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5557f86b51b8 <col:44, line:663:5>
|   |-BinaryOperator 0x5557f86b5160 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5557f86b50c8 <col:9> 'bool' lvalue ParmVar 0x5557f868e218 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5557f86b5148 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5557f86b5118 <col:13> 'bool' lvalue ->_read_status 0x5557f8677130
|   |     `-ImplicitCastExpr 0x5557f86b50f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5557f86b50e8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5557f86b51a8 <line:662:9, col:17>
|     `-UnaryOperator 0x5557f86b5190 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557f86b5180 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5557f868e370 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5557f868e438 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5557f868e500 <line:684:5, col:17> col:9 used consume 'int ()'
|-CXXMethodDecl 0x5557f868e5c8 <line:693:5, col:18> col:9 complete 'int ()'
|-FunctionTemplateDecl 0x5557f868e8d8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5557f868e668 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557f868e838 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5557f868e748 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b5578 <col:19, line:706:5>
|     `-IfStmt 0x5557f86b5550 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5557f86b52b8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5557f86b5480 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5557f86b5450 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5557f86b5410 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5557f86b5310 <col:42> '<bound member function type>' ->simple_slot 0x5557f86aeac0
|       |     | `-CXXThisExpr 0x5557f86b5300 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5557f86b53b0 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5557f86b5360 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5557f85e79d0 0x5557f832fbd8
|       |     | `-DeclRefExpr 0x5557f86b5340 <col:55> 'T' lvalue ParmVar 0x5557f868e748 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5557f86b53f0 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5557f86b5540 <line:705:13, col:34>
|         `-CallExpr 0x5557f86b5518 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5557f86b54a0 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5557f86b54f8 <col:33> 'T' lvalue ParmVar 0x5557f868e748 'x' 'T &'
|-FunctionTemplateDecl 0x5557f868eba8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5557f868e938 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557f868eb08 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5557f868ea18 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5557f86b5950 <col:31, line:717:5>
|     |-DeclStmt 0x5557f86b56b8 <line:713:9, col:23>
|     | `-VarDecl 0x5557f86b55a0 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5557f86b5690 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5557f86b5618 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5557f86b5670 <col:21> 'T' lvalue ParmVar 0x5557f868ea18 'x' 'T &'
|     |-IfStmt 0x5557f86b5900 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5557f86b57a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5557f86b58e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5557f86b5880 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5557f86b5810 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|     |   | `-DeclRefExpr 0x5557f86b57f0 <col:14> 'T *' lvalue Var 0x5557f86b55a0 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5557f86b58c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5557f86b5938 <line:716:9, col:16>
|       `-DeclRefExpr 0x5557f86b5918 <col:16> 'T *' lvalue Var 0x5557f86b55a0 's' 'T *'
|-FunctionTemplateDecl 0x5557f868efb8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5557f868ec08 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5557f868ec88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5557f868ef18 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5557f868ed68 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5557f868ee08 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5557f86b5c60 <col:37, line:726:5>
|     |-IfStmt 0x5557f86b5bf0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5557f86b5c10 <line:723:13, col:26>
|     | | `-VarDecl 0x5557f86b59b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5557f86b5aa8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5557f86b5a30 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5557f86b5a88 <col:25> 'T' lvalue ParmVar 0x5557f868ed68 'x' 'T &'
|     | |-DeclRefExpr 0x5557f86b5ad0 <col:16> 'T *' lvalue Var 0x5557f86b59b8 's' 'T *'
|     | `-BinaryOperator 0x5557f86b5bd0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5557f86b5b80 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5557f86b5b10 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|     |   | `-DeclRefExpr 0x5557f86b5af0 <col:14> 'T *' lvalue Var 0x5557f86b59b8 's' 'T *'
|     |   `-DeclRefExpr 0x5557f86b5bb0 <col:18> 'const V' lvalue ParmVar 0x5557f868ee08 'value' 'const V &'
|     `-ReturnStmt 0x5557f86b5c50 <line:725:9, col:17>
|       `-UnaryOperator 0x5557f86b5c38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557f86b5c28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557f868f3b8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5557f868f020 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557f868f318 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5557f868f0d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868f150 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5557f868f1f8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5557f86b6a80 <col:65, line:737:5>
|     |-DeclStmt 0x5557f86b5cf8 <line:732:9, col:26>
|     | `-VarDecl 0x5557f86b5c90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5557f86b6a48 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5557f86b6a68 <line:733:13, col:58>
|       | `-VarDecl 0x5557f86b5d20 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5557f86b5f00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5557f86b5ed0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5557f86b5eb8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5557f86b5e98 <col:26, col:58> 'String' (CXXTemporary 0x5557f86b5e98)
|       |           `-CXXMemberCallExpr 0x5557f86b5e28 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5557f86b5d98 <col:26> '<bound member function type>' ->find 0x5557f86ae0d8
|       |             | `-CXXThisExpr 0x5557f86b5d88 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5557f86b5e60 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557f86b5dc8 <col:31> 'const char *' lvalue ParmVar 0x5557f868f0d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5557f86b5e78 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557f86b5de8 <col:40> 'int' lvalue ParmVar 0x5557f868f150 'flags' 'int'
|       |             `-DeclRefExpr 0x5557f86b5e08 <col:47> 'Args::Slot *' lvalue Var 0x5557f86b5c90 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5557f86b5fb8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5557f86b5fa0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5557f86b5f80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5557f86b5f50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|       |       `-ImplicitCastExpr 0x5557f86b5f38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5557f86b5f18 <col:20> 'String' lvalue Var 0x5557f86b5d20 'str' 'String'
|       `-CompoundStmt 0x5557f86b6a28 <col:61, line:736:9>
|         |-DeclStmt 0x5557f86b6470 <line:734:13, col:76>
|         | `-VarDecl 0x5557f86b6008 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5557f86b6440 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5557f86b63b0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5557f86b63f8 <col:60> 'T' lvalue ParmVar 0x5557f868f1f8 'variable' 'T &'
|         |     `-UnaryOperator 0x5557f86b6428 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5557f86b6418 <col:71> 'Args *' this
|         `-CallExpr 0x5557f86b69f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5557f86b6498 <col:13> '<bound member function type>' ->postparse 0x5557f86ae2e8
|           | `-CXXThisExpr 0x5557f86b6488 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5557f86b69b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5557f86b64c8 <col:23> 'T *' lvalue Var 0x5557f86b6008 's' 'T *'
|           | `-CallExpr 0x5557f86b6978 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5557f86b6750 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5557f86b6850 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5557f86b6870 <col:86> 'String' lvalue Var 0x5557f86b5d20 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5557f86b6920 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5557f86b68b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|           |   | `-DeclRefExpr 0x5557f86b6890 <col:92> 'T *' lvalue Var 0x5557f86b6008 's' 'T *'
|           |   `-UnaryOperator 0x5557f86b6960 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5557f86b6950 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5557f86b69d8 <col:103> 'Args::Slot *' lvalue Var 0x5557f86b5c90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5557f868f908 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5557f868f428 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5557f868f4a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5557f868f868 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5557f868f568 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868f5e8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5557f868f688 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5557f868f728 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5557f86b7920 <col:88, line:745:5>
|     |-DeclStmt 0x5557f86b6b18 <line:741:9, col:26>
|     | `-VarDecl 0x5557f86b6ab0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5557f86b6d38 <line:742:9, col:55>
|     | `-VarDecl 0x5557f86b6b40 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5557f86b6d20 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5557f86b6cf0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5557f86b6cd8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5557f86b6cb8 <col:22, col:54> 'String' (CXXTemporary 0x5557f86b6cb8)
|     |           `-CXXMemberCallExpr 0x5557f86b6c48 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5557f86b6bb8 <col:22> '<bound member function type>' ->find 0x5557f86ae0d8
|     |             | `-CXXThisExpr 0x5557f86b6ba8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5557f86b6c80 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5557f86b6be8 <col:27> 'const char *' lvalue ParmVar 0x5557f868f568 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5557f86b6c98 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5557f86b6c08 <col:36> 'int' lvalue ParmVar 0x5557f868f5e8 'flags' 'int'
|     |             `-DeclRefExpr 0x5557f86b6c28 <col:43> 'Args::Slot *' lvalue Var 0x5557f86b6ab0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5557f86b7110 <line:743:9, col:72>
|     | `-VarDecl 0x5557f86b6d88 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5557f86b70e0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5557f86b7050 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5557f86b7098 <col:56> 'T' lvalue ParmVar 0x5557f868f688 'variable' 'T &'
|     |     `-UnaryOperator 0x5557f86b70c8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5557f86b70b8 <col:67> 'Args *' this
|     `-CallExpr 0x5557f86b78f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5557f86b7138 <col:9> '<bound member function type>' ->postparse 0x5557f86ae2e8
|       | `-CXXThisExpr 0x5557f86b7128 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5557f86b78b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5557f86b7168 <col:19> 'T *' lvalue Var 0x5557f86b6d88 's' 'T *'
|       | `-ParenExpr 0x5557f86b7890 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5557f86b7860 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5557f86b7848 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5557f86b7830 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5557f86b7810 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5557f86b77e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|       |     |       `-ImplicitCastExpr 0x5557f86b77c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5557f86b7188 <col:25> 'String' lvalue Var 0x5557f86b6b40 'str' 'String'
|       |     |-CallExpr 0x5557f86b7638 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5557f86b7410 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5557f86b7510 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5557f86b7530 <col:89> 'String' lvalue Var 0x5557f86b6b40 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5557f86b75e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5557f86b7570 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|       |     | | `-DeclRefExpr 0x5557f86b7550 <col:95> 'T *' lvalue Var 0x5557f86b6d88 's' 'T *'
|       |     | `-UnaryOperator 0x5557f86b7620 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5557f86b7610 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5557f86b77a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5557f86b7788 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5557f86b7758 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5557f86b7708 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5557f86b7698 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|       |         | | `-DeclRefExpr 0x5557f86b7678 <col:109> 'T *' lvalue Var 0x5557f86b6d88 's' 'T *'
|       |         | `-DeclRefExpr 0x5557f86b7738 <col:113> 'const V' lvalue ParmVar 0x5557f868f728 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5557f86b7778 <col:120> 'bool' true
|       `-DeclRefExpr 0x5557f86b78d0 <col:128> 'Args::Slot *' lvalue Var 0x5557f86b6ab0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5557f868fe38 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5557f868f980 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f868f9f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f868fd98 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5557f868fab8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f868fb38 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5557f868fbb0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5557f868fc58 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5557f86b8518 <col:75, line:754:5>
|     |-DeclStmt 0x5557f86b79c8 <line:749:9, col:26>
|     | `-VarDecl 0x5557f86b7960 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5557f86b84e0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5557f86b8500 <line:750:13, col:58>
|       | `-VarDecl 0x5557f86b79f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5557f86b7bd0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5557f86b7ba0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5557f86b7b88 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5557f86b7b68 <col:26, col:58> 'String' (CXXTemporary 0x5557f86b7b68)
|       |           `-CXXMemberCallExpr 0x5557f86b7af8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5557f86b7a68 <col:26> '<bound member function type>' ->find 0x5557f86ae0d8
|       |             | `-CXXThisExpr 0x5557f86b7a58 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5557f86b7b30 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557f86b7a98 <col:31> 'const char *' lvalue ParmVar 0x5557f868fab8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5557f86b7b48 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557f86b7ab8 <col:40> 'int' lvalue ParmVar 0x5557f868fb38 'flags' 'int'
|       |             `-DeclRefExpr 0x5557f86b7ad8 <col:47> 'Args::Slot *' lvalue Var 0x5557f86b7960 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5557f86b7c88 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5557f86b7c70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5557f86b7c50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5557f86b7c20 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|       |       `-ImplicitCastExpr 0x5557f86b7c08 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5557f86b7be8 <col:20> 'String' lvalue Var 0x5557f86b79f0 'str' 'String'
|       `-CompoundStmt 0x5557f86b84c0 <col:61, line:753:9>
|         |-DeclStmt 0x5557f86b8060 <line:751:13, col:63>
|         | `-VarDecl 0x5557f86b7cd8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5557f86b8030 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5557f86b7fa0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5557f86b7fe8 <col:47> 'T' lvalue ParmVar 0x5557f868fc58 'variable' 'T &'
|         |     `-UnaryOperator 0x5557f86b8018 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5557f86b8008 <col:58> 'Args *' this
|         `-CallExpr 0x5557f86b8490 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5557f86b8088 <col:13> '<bound member function type>' ->postparse 0x5557f86ae2e8
|           | `-CXXThisExpr 0x5557f86b8078 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5557f86b8450 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5557f86b80b8 <col:23> 'T *' lvalue Var 0x5557f86b7cd8 's' 'T *'
|           | `-CallExpr 0x5557f86b8410 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5557f86b82a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5557f86b82e8 <col:56> 'P' lvalue ParmVar 0x5557f868fbb0 'parser' 'P'
|           |   |-DeclRefExpr 0x5557f86b8308 <col:64> 'String' lvalue Var 0x5557f86b79f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5557f86b83b8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5557f86b8348 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|           |   | `-DeclRefExpr 0x5557f86b8328 <col:70> 'T *' lvalue Var 0x5557f86b7cd8 's' 'T *'
|           |   `-UnaryOperator 0x5557f86b83f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5557f86b83e8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5557f86b8470 <col:81> 'Args::Slot *' lvalue Var 0x5557f86b7960 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5557f8690498 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5557f868feb0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5557f868ff28 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5557f868ffa8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5557f86903f8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5557f8690070 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f86900f0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5557f8690168 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8690208 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5557f86902a8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5557f86b92a8 <col:98, line:762:5>
|     |-DeclStmt 0x5557f86b85b0 <line:758:9, col:26>
|     | `-VarDecl 0x5557f86b8548 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5557f86b87d0 <line:759:9, col:55>
|     | `-VarDecl 0x5557f86b85d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5557f86b87b8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5557f86b8788 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5557f86b8770 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5557f86b8750 <col:22, col:54> 'String' (CXXTemporary 0x5557f86b8750)
|     |           `-CXXMemberCallExpr 0x5557f86b86e0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5557f86b8650 <col:22> '<bound member function type>' ->find 0x5557f86ae0d8
|     |             | `-CXXThisExpr 0x5557f86b8640 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5557f86b8718 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5557f86b8680 <col:27> 'const char *' lvalue ParmVar 0x5557f8690070 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5557f86b8730 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5557f86b86a0 <col:36> 'int' lvalue ParmVar 0x5557f86900f0 'flags' 'int'
|     |             `-DeclRefExpr 0x5557f86b86c0 <col:43> 'Args::Slot *' lvalue Var 0x5557f86b8548 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5557f86b8bf0 <line:760:9, col:59>
|     | `-VarDecl 0x5557f86b8828 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5557f86b8bc0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5557f86b8b30 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5557f86b8b78 <col:43> 'T' lvalue ParmVar 0x5557f8690208 'variable' 'T &'
|     |     `-UnaryOperator 0x5557f86b8ba8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5557f86b8b98 <col:54> 'Args *' this
|     `-CallExpr 0x5557f86b9278 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5557f86b8c18 <col:9> '<bound member function type>' ->postparse 0x5557f86ae2e8
|       | `-CXXThisExpr 0x5557f86b8c08 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5557f86b9238 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5557f86b8c48 <col:19> 'T *' lvalue Var 0x5557f86b8828 's' 'T *'
|       | `-ParenExpr 0x5557f86b9218 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5557f86b91e8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5557f86b91d0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5557f86b91b8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5557f86b9198 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5557f86b9168 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|       |     |       `-ImplicitCastExpr 0x5557f86b9150 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5557f86b8c68 <col:25> 'String' lvalue Var 0x5557f86b85d8 'str' 'String'
|       |     |-CallExpr 0x5557f86b8fc0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5557f86b8e50 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5557f86b8e98 <col:59> 'P' lvalue ParmVar 0x5557f8690168 'parser' 'P'
|       |     | |-DeclRefExpr 0x5557f86b8eb8 <col:67> 'String' lvalue Var 0x5557f86b85d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5557f86b8f68 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5557f86b8ef8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|       |     | | `-DeclRefExpr 0x5557f86b8ed8 <col:73> 'T *' lvalue Var 0x5557f86b8828 's' 'T *'
|       |     | `-UnaryOperator 0x5557f86b8fa8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5557f86b8f98 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5557f86b9130 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5557f86b9110 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5557f86b90e0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5557f86b9090 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5557f86b9020 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|       |         | | `-DeclRefExpr 0x5557f86b9000 <col:87> 'T *' lvalue Var 0x5557f86b8828 's' 'T *'
|       |         | `-DeclRefExpr 0x5557f86b90c0 <col:91> 'const V' lvalue ParmVar 0x5557f86902a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5557f86b9100 <col:98> 'bool' true
|       `-DeclRefExpr 0x5557f86b9258 <col:106> 'Args::Slot *' lvalue Var 0x5557f86b8548 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5557f8690b08 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5557f8690518 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8690598 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5557f8690618 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5557f8690a68 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5557f86906e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8690760 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5557f86907d8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8690878 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5557f8690918 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5557f86bc628 <col:60, line:773:5>
|     |-DeclStmt 0x5557f86b9350 <line:767:9, col:26>
|     | `-VarDecl 0x5557f86b92e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5557f86bc5f0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5557f86bc610 <line:768:13, col:58>
|       | `-VarDecl 0x5557f86bb720 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5557f86bb900 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5557f86bb8d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5557f86bb8b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5557f86bb898 <col:26, col:58> 'String' (CXXTemporary 0x5557f86bb898)
|       |           `-CXXMemberCallExpr 0x5557f86bb828 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5557f86bb798 <col:26> '<bound member function type>' ->find 0x5557f86ae0d8
|       |             | `-CXXThisExpr 0x5557f86bb788 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5557f86bb860 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557f86bb7c8 <col:31> 'const char *' lvalue ParmVar 0x5557f86906e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5557f86bb878 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557f86bb7e8 <col:40> 'int' lvalue ParmVar 0x5557f8690760 'flags' 'int'
|       |             `-DeclRefExpr 0x5557f86bb808 <col:47> 'Args::Slot *' lvalue Var 0x5557f86b92e8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5557f86bb9b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5557f86bb9a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5557f86bb980 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5557f86bb950 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|       |       `-ImplicitCastExpr 0x5557f86bb938 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5557f86bb918 <col:20> 'String' lvalue Var 0x5557f86bb720 'str' 'String'
|       `-CompoundStmt 0x5557f86bc5c8 <col:61, line:772:9>
|         |-DeclStmt 0x5557f86bbcf0 <line:769:13, col:66>
|         | `-VarDecl 0x5557f86bba08 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5557f86bbcc0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5557f86bbc30 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5557f86bbc78 <col:49> 'T1' lvalue ParmVar 0x5557f8690878 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5557f86bbca8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5557f86bbc98 <col:61> 'Args *' this
|         |-DeclStmt 0x5557f86bc060 <line:770:13, col:66>
|         | `-VarDecl 0x5557f86bbd78 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5557f86bc030 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5557f86bbfa0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5557f86bbfe8 <col:49> 'T2' lvalue ParmVar 0x5557f8690918 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5557f86bc018 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5557f86bc008 <col:61> 'Args *' this
|         `-CallExpr 0x5557f86bc598 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5557f86bc088 <col:13> '<bound member function type>' ->postparse 0x5557f86ae2e8
|           | `-CXXThisExpr 0x5557f86bc078 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5557f86bc558 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5557f86bc0f8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5557f86bc0b8 <col:23> 'T1 *' lvalue Var 0x5557f86bba08 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5557f86bc0d8 <col:29> 'T2 *' lvalue Var 0x5557f86bbd78 's2' 'T2 *'
|           | `-CallExpr 0x5557f86bc510 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5557f86bc2e0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5557f86bc328 <col:63> 'P' lvalue ParmVar 0x5557f86907d8 'parser' 'P'
|           |   |-DeclRefExpr 0x5557f86bc348 <col:71> 'String' lvalue Var 0x5557f86bb720 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5557f86bc3f8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5557f86bc388 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|           |   | `-DeclRefExpr 0x5557f86bc368 <col:77> 'T1 *' lvalue Var 0x5557f86bba08 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5557f86bc4b8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5557f86bc448 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|           |   | `-DeclRefExpr 0x5557f86bc428 <col:82> 'T2 *' lvalue Var 0x5557f86bbd78 's2' 'T2 *'
|           |   `-UnaryOperator 0x5557f86bc4f8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5557f86bc4e8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5557f86bc578 <col:94> 'Args::Slot *' lvalue Var 0x5557f86b92e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5557f86998a8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5557f8690b88 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557f8699808 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5557f8690c40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8699670 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5557f86996e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5557f86bcb40 <col:67, line:780:5>
|     |-DeclStmt 0x5557f86bc6c0 <line:777:9, col:26>
|     | `-VarDecl 0x5557f86bc658 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5557f86bcb08 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5557f86bcb28 <line:778:13, col:58>
|       | `-VarDecl 0x5557f86bc6e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5557f86bc8c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5557f86bc898 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5557f86bc880 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5557f86bc860 <col:26, col:58> 'String' (CXXTemporary 0x5557f86bc860)
|       |           `-CXXMemberCallExpr 0x5557f86bc7f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5557f86bc760 <col:26> '<bound member function type>' ->find 0x5557f86ae0d8
|       |             | `-CXXThisExpr 0x5557f86bc750 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5557f86bc828 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557f86bc790 <col:31> 'const char *' lvalue ParmVar 0x5557f8690c40 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5557f86bc840 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557f86bc7b0 <col:40> 'int' lvalue ParmVar 0x5557f8699670 'flags' 'int'
|       |             `-DeclRefExpr 0x5557f86bc7d0 <col:47> 'Args::Slot *' lvalue Var 0x5557f86bc658 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5557f86bc980 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5557f86bc968 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5557f86bc948 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5557f86bc918 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|       |       `-ImplicitCastExpr 0x5557f86bc900 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5557f86bc8e0 <col:20> 'String' lvalue Var 0x5557f86bc6e8 'str' 'String'
|       `-CallExpr 0x5557f86bcad8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5557f86bc9a8 <col:13> '<bound member function type>' ->postparse 0x5557f86ae2e8
|         | `-CXXThisExpr 0x5557f86bc998 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5557f86bca88 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5557f86bc9f8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5557f86bc9d8 <col:23> 'P' lvalue ParmVar 0x5557f86996e8 'parser' 'P'
|         | |-DeclRefExpr 0x5557f86bca40 <col:36> 'String' lvalue Var 0x5557f86bc6e8 'str' 'String'
|         | `-UnaryOperator 0x5557f86bca70 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5557f86bca60 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5557f86bcab8 <col:49> 'Args::Slot *' lvalue Var 0x5557f86bc658 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5557f8699c48 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5557f8699918 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557f8699ba8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5557f86999d0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8699a50 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5557f8699ac8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5557f86bd4b0 <col:71, line:792:5>
|     |-DeclStmt 0x5557f86bcbd8 <line:784:9, col:26>
|     | `-VarDecl 0x5557f86bcb70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5557f86bcca8 <line:785:9, col:29>
|     | `-VarDecl 0x5557f86bcc08 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5557f86bcc90 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5557f86bcc70 <col:28> 'int' 1
|     |-WhileStmt 0x5557f86bd360 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5557f86bd380 <line:786:16, col:61>
|     | | `-VarDecl 0x5557f86bccd0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5557f86bceb0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5557f86bce80 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5557f86bce68 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5557f86bce48 <col:29, col:61> 'String' (CXXTemporary 0x5557f86bce48)
|     | |           `-CXXMemberCallExpr 0x5557f86bcdd8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5557f86bcd48 <col:29> '<bound member function type>' ->find 0x5557f86ae0d8
|     | |             | `-CXXThisExpr 0x5557f86bcd38 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5557f86bce10 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557f86bcd78 <col:34> 'const char *' lvalue ParmVar 0x5557f86999d0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5557f86bce28 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557f86bcd98 <col:43> 'int' lvalue ParmVar 0x5557f8699a50 'flags' 'int'
|     | |             `-DeclRefExpr 0x5557f86bcdb8 <col:50> 'Args::Slot *' lvalue Var 0x5557f86bcb70 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5557f86bcf68 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5557f86bcf50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5557f86bcf30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5557f86bcf00 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|     | |       `-ImplicitCastExpr 0x5557f86bcee8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5557f86bcec8 <col:23> 'String' lvalue Var 0x5557f86bccd0 'str' 'String'
|     | `-CompoundStmt 0x5557f86bd338 <col:64, line:790:9>
|     |   |-CallExpr 0x5557f86bd0c0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5557f86bcf90 <col:13> '<bound member function type>' ->postparse 0x5557f86ae2e8
|     |   | | `-CXXThisExpr 0x5557f86bcf80 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5557f86bd070 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5557f86bcfe0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5557f86bcfc0 <col:23> 'P' lvalue ParmVar 0x5557f8699ac8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5557f86bd028 <col:36> 'String' lvalue Var 0x5557f86bccd0 'str' 'String'
|     |   | | `-UnaryOperator 0x5557f86bd058 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5557f86bd048 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5557f86bd0a0 <col:49> 'Args::Slot *' lvalue Var 0x5557f86bcb70 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5557f86bd258 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5557f86bd0f0 <col:13> 'int' lvalue Var 0x5557f86bcc08 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5557f86bd240 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5557f86bd220 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5557f86bd188 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5557f86bd168 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5557f86bd150 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5557f86bd110 <col:28> 'int' lvalue Var 0x5557f86bcc08 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5557f86bd130 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5557f86bd208 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5557f86bd1d8 <col:49> 'bool' lvalue ->_read_status 0x5557f8677130
|     |   |         `-ImplicitCastExpr 0x5557f86bd1b8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5557f86bd1a8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5557f86bd308 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5557f86bd278 <col:13> 'int' lvalue ParmVar 0x5557f8699a50 'flags' 'int'
|     |     `-UnaryOperator 0x5557f86bd2f0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5557f86bd2d8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5557f86bd2b8 <col:23> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5557f86bd490 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5557f86bd3c8 <col:9> 'bool' lvalue ->_read_status 0x5557f8677130
|       | `-ImplicitCastExpr 0x5557f86bd3a8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5557f86bd398 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5557f86bd470 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5557f86bd450 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5557f86bd438 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5557f86bd3f8 <col:25> 'int' lvalue Var 0x5557f86bcc08 'read_status' 'int'
|           `-IntegerLiteral 0x5557f86bd418 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5557f869a128 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5557f8699cb8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f8699d38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f869a088 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5557f8699df8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f8699e78 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5557f8699ef0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5557f8699f98 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5557f86be440 <col:84, line:805:5>
|     |-DeclStmt 0x5557f86bd558 <line:796:9, col:26>
|     | `-VarDecl 0x5557f86bd4f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5557f86bd628 <line:797:9, col:29>
|     | `-VarDecl 0x5557f86bd588 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5557f86bd610 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5557f86bd5f0 <col:28> 'int' 1
|     |-DeclStmt 0x5557f86bd960 <line:798:9, col:71>
|     | `-VarDecl 0x5557f86bd678 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5557f86bd930 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5557f86bd8a0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5557f86bd8e8 <col:55> 'T' lvalue ParmVar 0x5557f8699f98 'variable' 'T &'
|     |     `-UnaryOperator 0x5557f86bd918 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5557f86bd908 <col:66> 'Args *' this
|     |-WhileStmt 0x5557f86be2f0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5557f86be310 <line:799:16, col:61>
|     | | `-VarDecl 0x5557f86bd988 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5557f86bdb68 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5557f86bdb38 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5557f86bdb20 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5557f86bdb00 <col:29, col:61> 'String' (CXXTemporary 0x5557f86bdb00)
|     | |           `-CXXMemberCallExpr 0x5557f86bda90 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5557f86bda00 <col:29> '<bound member function type>' ->find 0x5557f86ae0d8
|     | |             | `-CXXThisExpr 0x5557f86bd9f0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5557f86bdac8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557f86bda30 <col:34> 'const char *' lvalue ParmVar 0x5557f8699df8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5557f86bdae0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557f86bda50 <col:43> 'int' lvalue ParmVar 0x5557f8699e78 'flags' 'int'
|     | |             `-DeclRefExpr 0x5557f86bda70 <col:50> 'Args::Slot *' lvalue Var 0x5557f86bd4f0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5557f86bdc20 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5557f86bdc08 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5557f86bdbe8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5557f86bdbb8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|     | |       `-ImplicitCastExpr 0x5557f86bdba0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5557f86bdb80 <col:23> 'String' lvalue Var 0x5557f86bd988 'str' 'String'
|     | `-CompoundStmt 0x5557f86be2c8 <col:64, line:803:9>
|     |   |-CallExpr 0x5557f86be050 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5557f86bdc48 <col:13> '<bound member function type>' ->postparse 0x5557f86ae2e8
|     |   | | `-CXXThisExpr 0x5557f86bdc38 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5557f86be010 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5557f86bdc78 <col:23> 'T *' lvalue Var 0x5557f86bd678 's' 'T *'
|     |   | | `-CallExpr 0x5557f86bdfd0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5557f86bde60 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5557f86bdea8 <col:56> 'P' lvalue ParmVar 0x5557f8699ef0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5557f86bdec8 <col:64> 'String' lvalue Var 0x5557f86bd988 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5557f86bdf78 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5557f86bdf08 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|     |   | |   | `-DeclRefExpr 0x5557f86bdee8 <col:70> 'T *' lvalue Var 0x5557f86bd678 's' 'T *'
|     |   | |   `-UnaryOperator 0x5557f86bdfb8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5557f86bdfa8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5557f86be030 <col:81> 'Args::Slot *' lvalue Var 0x5557f86bd4f0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5557f86be1e8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5557f86be080 <col:13> 'int' lvalue Var 0x5557f86bd588 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5557f86be1d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5557f86be1b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5557f86be118 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5557f86be0f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5557f86be0e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5557f86be0a0 <col:28> 'int' lvalue Var 0x5557f86bd588 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5557f86be0c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5557f86be198 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5557f86be168 <col:49> 'bool' lvalue ->_read_status 0x5557f8677130
|     |   |         `-ImplicitCastExpr 0x5557f86be148 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5557f86be138 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5557f86be298 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5557f86be208 <col:13> 'int' lvalue ParmVar 0x5557f8699e78 'flags' 'int'
|     |     `-UnaryOperator 0x5557f86be280 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5557f86be268 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5557f86be248 <col:23> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5557f86be420 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5557f86be358 <col:9> 'bool' lvalue ->_read_status 0x5557f8677130
|       | `-ImplicitCastExpr 0x5557f86be338 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5557f86be328 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5557f86be400 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5557f86be3e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5557f86be3c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5557f86be388 <col:25> 'int' lvalue Var 0x5557f86bd588 'read_status' 'int'
|           `-IntegerLiteral 0x5557f86be3a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5557f869a708 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5557f869a1a0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557f869a218 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557f869a668 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5557f869a2d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557f869a358 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5557f869a3d0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5557f869a520 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5557f86bf248 <col:87, line:821:5>
|     |-DeclStmt 0x5557f86be4f0 <line:809:9, col:26>
|     | `-VarDecl 0x5557f86be488 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5557f86be5c0 <line:810:9, col:29>
|     | `-VarDecl 0x5557f86be520 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5557f86be5a8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5557f86be588 <col:28> 'int' 1
|     |-DeclStmt 0x5557f86be808 <line:811:9, col:38>
|     | `-VarDecl 0x5557f86be6f0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5557f86be7e0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5557f86be768 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5557f86be7c0 <col:29> 'Vector<T>' lvalue ParmVar 0x5557f869a520 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5557f86bf0f8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5557f86bf118 <line:812:16, col:61>
|     | | `-VarDecl 0x5557f86be830 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5557f86bea10 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5557f86be9e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5557f86be9c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5557f86be9a8 <col:29, col:61> 'String' (CXXTemporary 0x5557f86be9a8)
|     | |           `-CXXMemberCallExpr 0x5557f86be938 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5557f86be8a8 <col:29> '<bound member function type>' ->find 0x5557f86ae0d8
|     | |             | `-CXXThisExpr 0x5557f86be898 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5557f86be970 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557f86be8d8 <col:34> 'const char *' lvalue ParmVar 0x5557f869a2d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5557f86be988 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557f86be8f8 <col:43> 'int' lvalue ParmVar 0x5557f869a358 'flags' 'int'
|     | |             `-DeclRefExpr 0x5557f86be918 <col:50> 'Args::Slot *' lvalue Var 0x5557f86be488 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5557f86beac8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5557f86beab0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5557f86bea90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5557f86bea60 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5557f82f2558
|     | |       `-ImplicitCastExpr 0x5557f86bea48 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5557f86bea28 <col:23> 'String' lvalue Var 0x5557f86be830 'str' 'String'
|     | `-CompoundStmt 0x5557f86bf0c0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5557f86beb88 <line:813:13, col:23>
|     |   | `-VarDecl 0x5557f86beaf0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5557f86beb68 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5557f86bed08 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5557f86bebb0 <col:13> '<bound member function type>' ->postparse 0x5557f86ae2e8
|     |   | | `-CXXThisExpr 0x5557f86beba0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5557f86becb0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5557f86bec00 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5557f86bebe0 <col:23> 'P' lvalue ParmVar 0x5557f869a3d0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5557f86bec48 <col:36> 'String' lvalue Var 0x5557f86be830 'str' 'String'
|     |   | | |-DeclRefExpr 0x5557f86bec68 <col:41> 'T' lvalue Var 0x5557f86beaf0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5557f86bec98 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5557f86bec88 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5557f86bece8 <col:53> 'Args::Slot *' lvalue Var 0x5557f86be488 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5557f86bee60 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5557f86bed98 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5557f86bed68 <col:17> 'bool' lvalue ->_read_status 0x5557f8677130
|     |   | |   `-ImplicitCastExpr 0x5557f86bed48 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5557f86bed38 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5557f86bee38 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5557f86bedd0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5557f86bedb0 <col:17> 'Vector<T> *' lvalue Var 0x5557f86be6f0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5557f86bee18 <col:30> 'T' lvalue Var 0x5557f86beaf0 'sx' 'T'
|     |   |-BinaryOperator 0x5557f86befe0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5557f86bee78 <col:13> 'int' lvalue Var 0x5557f86be520 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5557f86befc8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5557f86befa8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5557f86bef10 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5557f86beef0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5557f86beed8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5557f86bee98 <col:28> 'int' lvalue Var 0x5557f86be520 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5557f86beeb8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5557f86bef90 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5557f86bef60 <col:49> 'bool' lvalue ->_read_status 0x5557f8677130
|     |   |         `-ImplicitCastExpr 0x5557f86bef40 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5557f86bef30 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5557f86bf090 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5557f86bf000 <col:13> 'int' lvalue ParmVar 0x5557f869a358 'flags' 'int'
|     |     `-UnaryOperator 0x5557f86bf078 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5557f86bf060 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5557f86bf040 <col:23> 'const int' lvalue Var 0x5557f867e698 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5557f86bf228 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5557f86bf160 <col:9> 'bool' lvalue ->_read_status 0x5557f8677130
|       | `-ImplicitCastExpr 0x5557f86bf140 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5557f86bf130 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5557f86bf208 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5557f86bf1e8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5557f86bf1d0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5557f86bf190 <col:25> 'int' lvalue Var 0x5557f86be520 'read_status' 'int'
|           `-IntegerLiteral 0x5557f86bf1b0 <col:40> 'int' 1
|-AccessSpecDecl 0x5557f869a780 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5557f869a7a8 prev 0x5557f867c978 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5557f869a8a0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5557f869a990 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5557f86bf280 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5557f869aa80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5557f86bf290 <col:25, line:830:9>
| |-CXXMethodDecl 0x5557f869ab80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5557f869ac30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5557f869acd8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5557f869acd8
| | `-ParmVarDecl 0x5557f869ade8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5557f869b5a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5557f869b5a8
|   `-ParmVarDecl 0x5557f869b6b8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5557f869ae58 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5557f869afb8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5557f869b1b0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5557f869b060 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5557f869b0d8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5557f86bf470 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5557f869b468 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5557f86bf2e0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5557f86bf2a0 <col:20> 'void *' lvalue ParmVar 0x5557f869b060 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5557f869b4d0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5557f86bf368 <col:32, col:45> 'char *' array Function 0x5557f810d688 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5557f86bf350 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5557f86bf320 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5557f869b0d8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5557f869b530 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5557f86bf430 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5557f86bf3f0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5557f869b0d8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5557f86bf4f0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5557f869b2b0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5557f869aa80 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5557f86bf578 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5557f86bf558 <line:840:13, col:22> 'void' array Function 0x5557f810d9e8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5557f86bf540 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5557f86bf510 <col:22> 'char *' lvalue ->_slot 0x5557f869b4d0
| |         `-CXXThisExpr 0x5557f86bf500 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5557f869b3b0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5557f869ab80 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5557f86bf768 <col:22, line:844:9>
| |   `-CallExpr 0x5557f86bf6d0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5557f86bf6b8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5557f86bf698 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5557f821a838 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5557f86bf708 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5557f86bf5e8 <col:20> 'void *' lvalue ->_ptr 0x5557f869b468
| |     |   `-CXXThisExpr 0x5557f86bf5d8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5557f86bf738 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5557f86bf720 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5557f86bf628 <col:26> 'char *' lvalue ->_slot 0x5557f869b4d0
| |     |     `-CXXThisExpr 0x5557f86bf618 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5557f86bf750 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5557f86bf668 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5557f869b530
| |         `-CXXThisExpr 0x5557f86bf658 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5557f869b468 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5557f869b4d0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5557f869b530 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5557f869b728 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5557f869b728
| | `-ParmVarDecl 0x5557f869b838 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5557f869b8d8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5557f869b8d8
|   `-ParmVarDecl 0x5557f869b9e8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5557f869bb88 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5557f869ba58 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5557f869baf8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5557f869be20 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5557f869c018 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5557f869bee8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5557f869c198 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5557f86bf7a0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5557f86bf780 <col:20> 'T *' lvalue ParmVar 0x5557f869bee8 'ptr' 'T *'
|   | `-CompoundStmt 0x5557f86bf7f0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5557f869c0e8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5557f869ab80 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5557f86bf9b0 <col:22, line:857:9>
|   |   `-CallExpr 0x5557f86bf980 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5557f86bf800 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5557f85e89f8 0x5557f85c6738 0x5557f82e5f28 0x5557f8294328
|   |     |-CXXOperatorCallExpr 0x5557f86bf910 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5557f86bf8a0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557f84e2e88 0x5557f84e2aa8 0x5557f84e26d8 0x5557f84e22f8 0x5557f84e1f18 0x5557f84e1b48
|   |     | `-MemberExpr 0x5557f86bf870 <col:29> 'T *' lvalue ->_ptr 0x5557f869c198
|   |     |   `-CXXThisExpr 0x5557f86bf860 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5557f86bf950 <col:35> 'T' lvalue ->_slot 0x5557f869c1f8
|   |       `-CXXThisExpr 0x5557f86bf940 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5557f869c198 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5557f869c1f8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5557f869c260 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5557f869c360 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5557f869c3b0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557f869c340 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5557f869c320 <col:31> 'int' 48
|-FieldDecl 0x5557f869c3d8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5557f869c438 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5557f869c498 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5557f869c5d0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5557f86ad980 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5557f86ad9e0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5557f86ada90 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5557f86adcb8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5557f86adbc0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5557f86ade08 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5557f86add78 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5557f86ae0d8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5557f86adec8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5557f86adf48 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5557f86adff0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5557f86ae2e8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5557f86ae1a0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5557f86ae218 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5557f86ae3b8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5557f86ae508 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5557f86ae470 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5557f86ae898 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5557f86ae5c8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5557f86ae648 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5557f86ae6f0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5557f86ae7a8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5557f86aeac0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5557f86ae970 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5557f86ae9e8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5557f86aedd8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5557f86aeb70 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5557f86aed38 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5557f86aec48 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.4*, %class.Vector.6, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.4*, %class.Vector.6, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f86e2580 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f86e2698 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x5557f86e2728 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5557f86e2838 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x5557f86e2768 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x5557f86e2b88 'size' 'int'
| | `-ImplicitCastExpr 0x5557f86e2c50 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5557f86e2c10 <col:16> 'int' lvalue ParmVar 0x5557f86e2768 's' 'int'
| `-CompoundStmt 0x5557f86e2c98 <col:19, line:1297:5>
|-CXXMethodDecl 0x5557f86e2a90 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x5557f86e28f8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5557f86e2978 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x5557f86e29f0 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5557f86e2bf0 <col:73> 'const ArgContext' lvalue Var 0x5557f86bf9d8 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x5557f86e2b48 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x5557f86e2b88 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x5557f8740358 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x5557f8740358
| `-ParmVarDecl 0x5557f8740468 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x5557f8740508 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f8740618 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x5557f86e2b88 'size' 'int'
| | `-ImplicitCastExpr 0x5557f87414e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5557f87414a0 <col:7> 'int' xvalue .size 0x5557f86e2b88
| |     `-CXXStaticCastExpr 0x5557f8741470 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x5557f8741440 <col:7> 'AnnoArg' lvalue ParmVar 0x5557f8740618 '' 'AnnoArg &&'
| `-CompoundStmt 0x5557f8741530 <col:7>
`-CXXDestructorDecl 0x5557f87406b8 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557f810f658 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557f810f778 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x5557f832bc40 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5557f832bd20 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x5557f832bd20
| `-ParmVarDecl 0x5557f832be08 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x5557f832bea8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x5557f832bea8
| `-ParmVarDecl 0x5557f832bfb8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x5557f84c5a10 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f86057b0 <../dummy_inc/click/hashcontainer.hh:14:1, col:69> line:302:7 class HashContainer_const_iterator definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x5557f86211f8 prev 0x5557f86057b0 <col:1, col:7> col:7 implicit class HashContainer_const_iterator
|-AccessSpecDecl 0x5557f8621288 <col:38, col:44> col:38 public
|-TypedefDecl 0x5557f8621450 <line:304:5, col:53> col:53 size_type 'typename HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type':'unsigned long'
| `-ElaboratedType 0x5557f8621400 'typename HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type' sugar
|   `-TypedefType 0x5557f8605320 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type' sugar
|     |-Typedef 0x5557f8604ae0 'size_type'
|     `-TypedefType 0x5557f805f6d0 'size_t' sugar
|       |-Typedef 0x5557f8026b20 'size_t'
|       `-BuiltinType 0x5557f7fb6430 'unsigned long'
|-TypedefDecl 0x5557f86215f0 <line:305:5, col:61> col:61 referenced bucket_count_type 'typename HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int'
| `-ElaboratedType 0x5557f86215a0 'typename HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type' sugar
|   `-TypedefType 0x5557f86054c0 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type' sugar
|     |-Typedef 0x5557f8604b38 'bucket_count_type'
|     `-TypedefType 0x5557f810f9e0 'uint32_t' sugar
|       |-Typedef 0x5557f801f408 'uint32_t'
|       `-TypedefType 0x5557f7ff8440 '__uint32_t' sugar
|         |-Typedef 0x5557f7ff8038 '__uint32_t'
|         `-BuiltinType 0x5557f7fb6410 'unsigned int'
|-CXXConstructorDecl 0x5557f8621680 <line:308:5, line:309:5> line:308:5 HashContainer_const_iterator 'void ()'
|-CXXMethodDecl 0x5557f86217e8 <line:312:5, line:314:5> line:312:8 used get 'IPRewriterEntry *() const'
|-CXXMethodDecl 0x5557f86218b8 <line:317:5, line:319:5> line:317:8 used operator-> 'IPRewriterEntry *() const'
|-CXXMethodDecl 0x5557f8621a18 <line:323:5, line:325:5> line:323:8 operator* 'IPRewriterEntry &() const'
|-CXXMethodDecl 0x5557f8621ac8 <line:328:5, line:330:5> line:328:17 used live 'bool () const' inline
|-TypedefDecl 0x5557f8621c58 <line:332:5, col:73> col:48 unspecified_bool_type 'IPRewriterEntry *(HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::*)() const'
| `-MemberPointerType 0x5557f8621bf0 'IPRewriterEntry *(HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::*)() const'
|   |-RecordType 0x5557f86058b0 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|   | `-ClassTemplateSpecialization 0x5557f86057b0 'HashContainer_const_iterator'
|   `-ParenType 0x5557f8621b80 'IPRewriterEntry *() const' sugar
|     `-FunctionProtoType 0x5557f86217a0 'IPRewriterEntry *() const' const cdecl
|       `-PointerType 0x5557f8621740 'IPRewriterEntry *'
|         `-SubstTemplateTypeParmType 0x5557f86212b0 'IPRewriterEntry' sugar
|           |-TemplateTypeParmType 0x5557f8575a50 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5557f85759f8 'T'
|           `-RecordType 0x5557f85cf000 'IPRewriterEntry'
|             `-CXXRecord 0x5557f85d23a0 'IPRewriterEntry'
|-CXXConversionDecl 0x5557f8621d70 <line:334:5, line:336:5> line:334:12 operator IPRewriterEntry *(HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::*)() const 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5557f8621fc8 <line:339:5, line:341:5> line:339:32 hashcontainer 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *() const'
|-CXXMethodDecl 0x5557f86220e8 <line:344:5, line:346:5> line:344:23 bucket 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type () const'
|-CXXMethodDecl 0x5557f8622198 <line:349:5, line:361:5> line:349:10 operator++ 'void ()'
|-CXXMethodDecl 0x5557f86222d8 <line:364:5, line:366:5> line:364:10 used operator++ 'void (int)'
| `-ParmVarDecl 0x5557f8622248 <col:21> col:24 'int'
|-AccessSpecDecl 0x5557f8622390 <line:368:3, col:10> col:3 private
|-FieldDecl 0x5557f86223c8 <line:370:5, col:8> col:8 referenced _element 'IPRewriterEntry *'
|-FieldDecl 0x5557f8622460 <line:371:5, col:9> col:9 referenced _pprev 'IPRewriterEntry **'
|-FieldDecl 0x5557f86224c0 <line:372:5, col:23> col:23 referenced _bucket 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int'
|-FieldDecl 0x5557f8622608 <line:373:5, col:32> col:32 referenced _hc 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
|-CXXConstructorDecl 0x5557f8622868 <line:375:5, line:385:5> line:375:12 HashContainer_const_iterator 'void (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *)' inline
| `-ParmVarDecl 0x5557f8622758 <col:41, col:68> col:68 hc 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
|-CXXConstructorDecl 0x5557f8622cf8 <line:387:5, line:390:5> line:387:12 HashContainer_const_iterator 'void (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *, HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type, IPRewriterEntry **, IPRewriterEntry *)' inline
| |-ParmVarDecl 0x5557f8622a28 <col:41, col:68> col:68 hc 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
| |-ParmVarDecl 0x5557f8622aa0 <col:72, col:90> col:90 b 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int'
| |-ParmVarDecl 0x5557f8622b20 <col:93, col:97> col:97 pprev 'IPRewriterEntry **'
| `-ParmVarDecl 0x5557f8622b98 <col:104, col:107> col:107 element 'IPRewriterEntry *'
|-FriendDecl 0x5557f8622ed8 <line:392:5, col:36> col:12 'class HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FriendDecl 0x5557f8623028 <line:393:5, col:45> col:12 'class HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXDestructorDecl 0x5557f8624120 <line:302:7> col:7 implicit ~HashContainer_const_iterator 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5557f8624258 <col:7> col:7 implicit constexpr HashContainer_const_iterator 'void (const HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x5557f8624258
| `-ParmVarDecl 0x5557f8624368 <col:7> col:7 'const HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXConstructorDecl 0x5557f8624408 <col:7> col:7 implicit used constexpr HashContainer_const_iterator 'void (HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f8624518 <col:7> col:7 used 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer Field 0x5557f86223c8 '_element' 'IPRewriterEntry *'
| | `-ImplicitCastExpr 0x5557f8624ab8 <col:7> 'IPRewriterEntry *' <LValueToRValue>
| |   `-MemberExpr 0x5557f8624a70 <col:7> 'IPRewriterEntry *' xvalue ._element 0x5557f86223c8
| |     `-CXXStaticCastExpr 0x5557f8624a40 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x5557f8624a10 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8624518 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer Field 0x5557f8622460 '_pprev' 'IPRewriterEntry **'
| | `-ImplicitCastExpr 0x5557f8624ba0 <col:7> 'IPRewriterEntry **' <LValueToRValue>
| |   `-MemberExpr 0x5557f8624b58 <col:7> 'IPRewriterEntry **' xvalue ._pprev 0x5557f8622460
| |     `-CXXStaticCastExpr 0x5557f8624b28 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x5557f8624af8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8624518 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer Field 0x5557f86224c0 '_bucket' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int'
| | `-ImplicitCastExpr 0x5557f8624c88 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5557f8624c40 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' xvalue ._bucket 0x5557f86224c0
| |     `-CXXStaticCastExpr 0x5557f8624c10 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x5557f8624be0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8624518 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer Field 0x5557f8622608 '_hc' 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
| | `-ImplicitCastExpr 0x5557f8624d70 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' <LValueToRValue>
| |   `-MemberExpr 0x5557f8624d28 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' xvalue ._hc 0x5557f8622608
| |     `-CXXStaticCastExpr 0x5557f8624cf8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x5557f8624cc8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8624518 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| `-CompoundStmt 0x5557f8624dd0 <col:7>
|-CXXMethodDecl 0x5557f8625818 <col:7> col:7 implicit operator= 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x5557f8625818
| `-ParmVarDecl 0x5557f8625928 <col:7> col:7 'const HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
`-CXXMethodDecl 0x5557f8625998 <col:7> col:7 implicit used operator= 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5557f8625aa8 <col:7> col:7 used 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
  `-CompoundStmt 0x5557f86267a0 <col:7>
    |-BinaryOperator 0x5557f8626430 <col:7> 'IPRewriterEntry *' lvalue '='
    | |-MemberExpr 0x5557f86263e8 <col:7> 'IPRewriterEntry *' lvalue ->_element 0x5557f86223c8
    | | `-CXXThisExpr 0x5557f86263d8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x5557f8626418 <col:7> 'IPRewriterEntry *' <LValueToRValue>
    |   `-MemberExpr 0x5557f86263a8 <col:7> 'IPRewriterEntry *' xvalue ._element 0x5557f86223c8
    |     `-CXXStaticCastExpr 0x5557f8626378 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
    |       `-DeclRefExpr 0x5557f8626348 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8625aa8 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    |-BinaryOperator 0x5557f8626538 <col:7> 'IPRewriterEntry **' lvalue '='
    | |-MemberExpr 0x5557f86264f0 <col:7> 'IPRewriterEntry **' lvalue ->_pprev 0x5557f8622460
    | | `-CXXThisExpr 0x5557f86264e0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x5557f8626520 <col:7> 'IPRewriterEntry **' <LValueToRValue>
    |   `-MemberExpr 0x5557f86264b0 <col:7> 'IPRewriterEntry **' xvalue ._pprev 0x5557f8622460
    |     `-CXXStaticCastExpr 0x5557f8626480 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
    |       `-DeclRefExpr 0x5557f8626450 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8625aa8 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    |-BinaryOperator 0x5557f8626640 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' lvalue '='
    | |-MemberExpr 0x5557f86265f8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' lvalue ->_bucket 0x5557f86224c0
    | | `-CXXThisExpr 0x5557f86265e8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x5557f8626628 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' <LValueToRValue>
    |   `-MemberExpr 0x5557f86265b8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' xvalue ._bucket 0x5557f86224c0
    |     `-CXXStaticCastExpr 0x5557f8626588 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
    |       `-DeclRefExpr 0x5557f8626558 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8625aa8 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    |-BinaryOperator 0x5557f8626748 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' lvalue '='
    | |-MemberExpr 0x5557f8626700 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' lvalue ->_hc 0x5557f8622608
    | | `-CXXThisExpr 0x5557f86266f0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x5557f8626730 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' <LValueToRValue>
    |   `-MemberExpr 0x5557f86266c0 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' xvalue ._hc 0x5557f8622608
    |     `-CXXStaticCastExpr 0x5557f8626690 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
    |       `-DeclRefExpr 0x5557f8626660 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8625aa8 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    `-ReturnStmt 0x5557f8626790 <col:7>
      `-UnaryOperator 0x5557f8626778 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5557f8626768 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_const_iterator = type { %class.IPRewriterEntry*, %class.IPRewriterEntry**, i32, %class.HashContainer* }
  NonVirtualBaseLLVMType:%class.HashContainer_const_iterator = type { %class.IPRewriterEntry*, %class.IPRewriterEntry**, i32, %class.HashContainer* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f86059e8 <../dummy_inc/click/hashcontainer.hh:15:1, col:69> line:400:7 class HashContainer_iterator definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x5557f86230b0 prev 0x5557f86059e8 <col:1, col:7> col:7 implicit class HashContainer_iterator
|-AccessSpecDecl 0x5557f8623140 <col:76, col:82> col:76 public
|-TypedefDecl 0x5557f8623230 <line:402:5, col:48> col:48 inherited 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x5557f8623190 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' sugar HashContainer_const_iterator
|   |-TemplateArgument type 'IPRewriterEntry':'IPRewriterEntry'
|   |-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|   `-RecordType 0x5557f86058b0 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x5557f86057b0 'HashContainer_const_iterator'
|-CXXConstructorDecl 0x5557f86232c0 <line:405:5, line:406:5> line:405:5 HashContainer_iterator 'void ()'
|-CXXMethodDecl 0x5557f8623378 <line:414:5, line:416:5> line:414:10 can_insert 'bool () const'
|-CXXMethodDecl 0x5557f8623598 <line:419:5, line:421:5> line:419:26 hashcontainer 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *() const'
|-AccessSpecDecl 0x5557f8623648 <line:423:3, col:10> col:3 private
|-CXXConstructorDecl 0x5557f8623878 <line:425:5, line:427:5> line:425:12 HashContainer_iterator 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *)' inline
| `-ParmVarDecl 0x5557f8623768 <col:35, col:56> col:56 hc 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
|-CXXConstructorDecl 0x5557f8623e08 <line:429:5, line:431:5> line:429:12 HashContainer_iterator 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *, typename inherited::bucket_count_type, IPRewriterEntry **, IPRewriterEntry *)' inline
| |-ParmVarDecl 0x5557f8623a38 <col:35, col:56> col:56 hc 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
| |-ParmVarDecl 0x5557f8623b50 <col:60, col:98> col:98 b 'typename inherited::bucket_count_type':'unsigned int'
| |-ParmVarDecl 0x5557f8623c30 <col:101, col:105> col:105 pprev 'IPRewriterEntry **'
| `-ParmVarDecl 0x5557f8623ca8 <col:112, col:115> col:115 element 'IPRewriterEntry *'
|-FriendDecl 0x5557f8623fe8 <line:433:5, col:36> col:12 'class HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXDestructorDecl 0x5557f8624040 <line:400:7> col:7 implicit referenced ~HashContainer_iterator 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5557f8624588 <col:7> col:7 implicit constexpr HashContainer_iterator 'void (const HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x5557f8624588
| `-ParmVarDecl 0x5557f8624698 <col:7> col:7 'const HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXConstructorDecl 0x5557f8624738 <col:7> col:7 implicit used constexpr HashContainer_iterator 'void (HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557f8624848 <col:7> col:7 used 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| | `-CXXConstructExpr 0x5557f8624de0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' 'void (HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept'
| |   `-ImplicitCastExpr 0x5557f86249f0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue <UncheckedDerivedToBase (HashContainer_const_iterator)>
| |     `-CXXStaticCastExpr 0x5557f86249c0 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x5557f8624990 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8624848 '' 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| `-CompoundStmt 0x5557f8624ea8 <col:7>
|-CXXMethodDecl 0x5557f8625668 <col:7> col:7 implicit operator= 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x5557f8625668
| `-ParmVarDecl 0x5557f8625778 <col:7> col:7 'const HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
`-CXXMethodDecl 0x5557f8625b18 <col:7> col:7 implicit used operator= 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5557f8625c28 <col:7> col:7 used 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
  `-CompoundStmt 0x5557f8626838 <col:7>
    |-CXXMemberCallExpr 0x5557f86267d8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue
    | |-MemberExpr 0x5557f86262d0 <col:7> '<bound member function type>' .operator= 0x5557f8625998
    | | `-ImplicitCastExpr 0x5557f8626200 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue <UncheckedDerivedToBase (HashContainer_const_iterator)>
    | |   `-UnaryOperator 0x5557f86261e8 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue prefix '*' cannot overflow
    | |     `-CXXThisExpr 0x5557f86261d8 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x5557f86262b0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue <UncheckedDerivedToBase (HashContainer_const_iterator)>
    |   `-DeclRefExpr 0x5557f8626290 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x5557f8625c28 '' 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    `-ReturnStmt 0x5557f8626828 <col:7>
      `-UnaryOperator 0x5557f8626810 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5557f8626800 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_iterator = type { %class.HashContainer_const_iterator }
  NonVirtualBaseLLVMType:%class.HashContainer_iterator = type { %class.HashContainer_const_iterator }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<8>
         0 |   char [8] x
           | [sizeof=8, dsize=8, align=1,
           |  nvsize=8, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f85f0300 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 8
|-PackedAttr 0x5557f8776c50 <line:167:18>
|-CXXRecordDecl 0x5557f8776d10 prev 0x5557f85f0300 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5557f8776e20 <line:166:5, col:13> col:10 x 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.2 = type { [8 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.2 = type { [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct char_array<56>
         0 |   char [56] x
           | [sizeof=56, dsize=56, align=1,
           |  nvsize=56, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557f860d0c0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 56
|-PackedAttr 0x5557f87b0638 <line:167:18>
|-CXXRecordDecl 0x5557f87b06f8 prev 0x5557f860d0c0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5557f87b0808 <line:166:5, col:13> col:10 x 'char [56]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [56 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [56 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>
