
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38afdcb8 prev 0x558a38af5458 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a38afddb0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x558a38afde40 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x558a38afdeb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x558a38afdf78 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x558a38afe040 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x558a38afe1b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x558a38afe0f0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x558a38afe260 <col:24>
| `-OptimizeNoneAttr 0x558a38afe2b8 <col:34>
|-CXXMethodDecl 0x558a38afe300 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x558a38afe5b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x558a38afe3b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558a38afe428 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x558a38afe4a8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x558a38afe670 <line:229:7, col:14> col:7 private
|-FieldDecl 0x558a38afe6a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x558a38afe710 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x558a38afe798 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x558a38afeab8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x558a38afe850 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558a38afe8c8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x558a38afe940 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x558a38afe9c0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x558a38afebd0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x558a38b06548 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558a38b06548
| `-ParmVarDecl 0x558a38b06658 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x558a38b066f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558a38b066f8
| `-ParmVarDecl 0x558a38b06808 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x558a38bdea50 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38af0cd0 prev 0x558a38af0a50 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a38af0dc8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x558a38af0e58 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x558a38af0eb8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x558a38af0fa8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x558a38af10a8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x558a38af1278 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x558a38af1128 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x558a38af11a0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x558a38af1408 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x558a38af1340 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x558a38af14b0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x558a38af15e8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x558a38af1520 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x558a38af1788 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x558a38af16c8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x558a38af1928 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x558a38af1868 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x558a38af19d0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x558a38af1ad0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x558a38af1bb0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af1ab0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x558a38af1a90 <col:26> 'int' 1
| `-EnumConstantDecl 0x558a38af1b60 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x558a38af1bc8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38af1b40 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x558a38af1b20 <col:44> 'int' 2
|-CXXMethodDecl 0x558a38af1d10 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x558a38af1bf8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x558a38af1c78 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x558a38af1e68 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x558a38af1dd8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x558a38af20a8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x558a38af1f28 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x558a38af1fa0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x558a38af2158 <col:20>
| `-OptimizeNoneAttr 0x558a38af21b0 <col:30>
|-CXXMethodDecl 0x558a38af22b8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x558a38af21f0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x558a38af2360 <col:20>
| `-OptimizeNoneAttr 0x558a38af23b8 <col:30>
|-CXXMethodDecl 0x558a38af2408 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x558a38af24d0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x558a38af25e8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x558a38af2670 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x558a38af26f8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x558a38af2780 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x558a38af2808 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x558a38af2898 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x558a38af2958 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x558a38af29e0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x558a38af2a68 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x558a38af2af0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x558a38af2b78 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x558a38af2c00 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x558a38af2c90 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x558a38af2d50 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x558a38af2de0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x558a38af2f30 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x558a38af2e98 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x558a38af30c0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x558a38af2ff0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x558a38af3370 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x558a38af3178 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x558a38af31f8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x558a38af3278 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x558a38af3428 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x558a38af3530 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558a38af37c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af3510 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x558a38af34f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x558a38af35c0 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558a38af37d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af35a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x558a38af3580 <col:32> 'int' 20
| |-EnumConstantDecl 0x558a38af3650 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558a38af37f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af3630 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x558a38af3610 <col:38> 'int' 90
| |-EnumConstantDecl 0x558a38af36e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558a38af3808 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af36c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x558a38af36a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x558a38af3770 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x558a38af3820 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38af3750 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x558a38af3730 <col:32> 'int' 2000
|-CXXMethodDecl 0x558a38af3860 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x558a38af3ca0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558a38af3b10 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x558a38af3b88 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a38af3d70 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x558a38af3ef0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x558a38af3e20 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a38af40f8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558a38af3fa8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x558a38af4020 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a38af41f8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x558a38af4298 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x558a38af4360 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a38af43f0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x558a38af4620 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af43d0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x558a38af43b0 <col:36> 'int' EnumConstant 0x558a38af4360 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a38af4440 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a38af4490 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a38af44e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a38af4530 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a38af4580 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x558a38af45d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x558a38af4708 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x558a38af4648 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x558a38af47d0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x558a38af4890 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x558a38af4950 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x558a38af4a10 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x558a38af4b28 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x558a38af4bf0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x558a38af4d70 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x558a38af4ca0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x558a38af4e98 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x558a38af5098 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x558a38af4f48 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x558a38af4fc8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x558a38b029e8 <col:54, line:127:5>
|   |-ParenExpr 0x558a38b02898 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x558a38b02868 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x558a38b02558 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558a38b02530 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x558a38b02518 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x558a38b02500 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x558a38b024d0 <col:31> 'Router *' lvalue ->_router 0x558a38b003b0
|   |   |         `-CXXThisExpr 0x558a38b024c0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558a38b025b8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38b02598 <col:48> 'int' 0
|   |   `-CallExpr 0x558a38b027c8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x558a38b027b0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38b02790 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38b02808 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38b02628 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x558a38b02820 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38b02648 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x558a38b02838 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38b02680 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x558a38b02850 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38b02778 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38b02760 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38b02718 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x558a38b02930 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x558a38b028c8 <col:9> 'Router *' lvalue ->_router 0x558a38b003b0
|   | | `-CXXThisExpr 0x558a38b028b8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x558a38b02918 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558a38b028f8 <col:19> 'Router *' lvalue ParmVar 0x558a38af4f48 'r' 'Router *'
|   `-BinaryOperator 0x558a38b029c8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x558a38b02960 <col:9> 'int' lvalue ->_eindex 0x558a38b00418
|     | `-CXXThisExpr 0x558a38b02950 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x558a38b029b0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x558a38b02990 <col:19> 'int' lvalue ParmVar 0x558a38af4fc8 'eindex' 'int'
|-CXXMethodDecl 0x558a38af5220 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x558a38af5158 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x558a38af52f0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x558a38af53b8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x558a38af5458 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x558a38af56a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x558a38af5520 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x558a38af55a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x558a38af5758 <col:20>
| `-OptimizeNoneAttr 0x558a38af57b0 <col:30>
|-CXXMethodDecl 0x558a38af58b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558a38af57f0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x558a38af5960 <col:20>
| `-OptimizeNoneAttr 0x558a38af59b8 <col:30>
|-CXXMethodDecl 0x558a38af5a88 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558a38af59f8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x558a38af5b30 <col:20>
| `-OptimizeNoneAttr 0x558a38af5b88 <col:30>
|-CXXMethodDecl 0x558a38af5d18 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x558a38af5bc0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x558a38af5c40 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x558a38af5ea8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558a38af5de0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558a38af5ff8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558a38af5f68 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558a38af6148 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558a38af60b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558a38af6298 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558a38af6208 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558a38af6558 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x558a38af6350 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x558a38af63d0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x558a38af6478 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x558a38af6630 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x558a38af66f0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x558a38af69c0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558a38af6870 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x558a38af68e8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x558a38af6ae8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x558a38af6cc0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x558a38af6ba0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x558a38af6c20 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x558a38af6ea8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x558a38af6d88 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x558a38af6e08 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x558a38af7218 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558a38af6f68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558a38af6fe0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558a38af7060 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558a38b01fd0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558a38b01fb0 <col:106> 'int' 0
| `-ParmVarDecl 0x558a38af70d8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a38b02008 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a38b01fe8 <col:126> 'int' 0
|-CXXMethodDecl 0x558a38af75b8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558a38af72e8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558a38af7380 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558a38af7400 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x558a38af7478 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a38b02040 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a38b02020 <col:114> 'int' 0
|-CXXMethodDecl 0x558a38af7948 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558a38af7690 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x558a38af7708 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558a38af7788 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x558a38b02058 <col:96> 'int' 0
| `-ParmVarDecl 0x558a38af7800 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a38b02098 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a38b02078 <col:116> 'int' 0
|-CXXMethodDecl 0x558a38af7cc8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558a38af7a18 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558a38af7a90 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558a38af7b10 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558a38b020d0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558a38b020b0 <col:109> 'int' 0
| `-ParmVarDecl 0x558a38af7b88 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a38b02108 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a38b020e8 <col:129> 'int' 0
|-CXXMethodDecl 0x558a38af8048 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558a38af7d98 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558a38af7e10 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558a38af7e90 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x558a38af7f08 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a38b02140 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a38b02120 <col:117> 'int' 0
|-CXXMethodDecl 0x558a38af83d8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558a38af8120 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38af8198 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558a38af8218 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x558a38b02158 <col:99> 'int' 0
| `-ParmVarDecl 0x558a38af8290 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a38b02198 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a38b02178 <col:119> 'int' 0
|-CXXMethodDecl 0x558a38af87f8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x558a38af84a8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558a38af8528 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558a38af85a0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558a38af8620 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558a38b021d0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558a38b021b0 <col:108> 'int' 0
| `-ParmVarDecl 0x558a38af86a0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x558a38b02208 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x558a38b021e8 <col:141> 'int' 0
|-CXXMethodDecl 0x558a38af8c18 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558a38af88d0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558a38af8950 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558a38af89c8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558a38af8a48 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x558a38af8ac8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558a38b02220 <col:121> 'int' 0
|-CXXMethodDecl 0x558a38af9048 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558a38af8cf8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x558a38af8d78 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x558a38af8df0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558a38af8e70 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x558a38b02240 <col:98> 'int' 0
| `-ParmVarDecl 0x558a38af8ef0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558a38b02260 <col:123> 'int' 0
|-CXXMethodDecl 0x558a38af9310 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x558a38af9120 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558a38af91a0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x558a38af9220 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x558a38b02280 <col:80> 'int' 0
|-EnumDecl 0x558a38af93c8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x558a38af94d0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558a38af9760 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af94b0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x558a38af9490 <col:42> 'int' 1
| |-EnumConstantDecl 0x558a38af9560 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558a38af9778 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af9540 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x558a38af9520 <col:40> 'int' 2
| |-EnumConstantDecl 0x558a38af95f0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558a38af9790 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af95d0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x558a38af95b0 <col:44> 'int' 4
| |-EnumConstantDecl 0x558a38af9680 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558a38af97a8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38af9660 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x558a38af9640 <col:36> 'int' 7
| `-EnumConstantDecl 0x558a38af9710 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x558a38af97c0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38af96f0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x558a38af96d0 <col:34> 'int' 6
|-CXXMethodDecl 0x558a38af9a78 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x558a38af97e8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x558a38af9888 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x558a38af9908 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x558a38af9980 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x558a38b02338 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x558a38b02320 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x558a38b02308 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x558a38b022e8 <col:98, col:105> 'String' (CXXTemporary 0x558a38b022e8)
|           `-CXXTemporaryObjectExpr 0x558a38b022b0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x558a38af9d18 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x558a38af9b48 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558a38af9bc0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x558a38af9c38 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558a38b023e8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558a38b023d0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558a38b023b8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558a38b02398 <col:94, col:101> 'String' (CXXTemporary 0x558a38b02398)
| |         `-CXXTemporaryObjectExpr 0x558a38b02360 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x558a38b02bd0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x558a38b02b48 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x558a38b02b18 <col:9> '<bound member function type>' ->add_task_handlers 0x558a38af9a78
|     | `-CXXThisExpr 0x558a38b02b08 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558a38b02b88 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558a38b02a88 <col:27> 'Task *' lvalue ParmVar 0x558a38af9b48 'task' 'Task *'
|     |-ImplicitCastExpr 0x558a38b02ba0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x558a38b02aa8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x558a38af9bc0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x558a38b02bb8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558a38b02ac8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558a38af9710 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558a38b02ae8 <col:62> 'const String' lvalue ParmVar 0x558a38af9c38 'prefix' 'const String &'
|-CXXMethodDecl 0x558a38af9f28 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x558a38af9de0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558a38af9e58 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558a38b02498 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558a38b02480 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558a38b02468 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558a38b02448 <col:70, col:77> 'String' (CXXTemporary 0x558a38b02448)
| |         `-CXXTemporaryObjectExpr 0x558a38b02410 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x558a38b02da8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x558a38b02d20 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x558a38b02cf0 <col:9> '<bound member function type>' ->add_task_handlers 0x558a38af9a78
|     | `-CXXThisExpr 0x558a38b02ce0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558a38b02d60 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558a38b02c60 <col:27> 'Task *' lvalue ParmVar 0x558a38af9de0 'task' 'Task *'
|     |-ImplicitCastExpr 0x558a38b02d78 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x558a38b02c80 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x558a38b02d90 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558a38b02ca0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558a38af9710 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558a38b02cc0 <col:57> 'const String' lvalue ParmVar 0x558a38af9e58 'prefix' 'const String &'
|-CXXMethodDecl 0x558a38afa208 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x558a38af9ff0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afa070 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afa0e8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x558a38afa4b8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x558a38afa2d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afa358 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afa3d8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x558a38afa7a8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558a38afa588 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afa608 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afa680 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x558a38afaa58 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x558a38afa878 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afa8f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afa978 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x558a38afad08 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x558a38afab28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afaba8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afac28 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x558a38afafb8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x558a38afadd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afae58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afaed0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x558a38afb268 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x558a38afb088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afb108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afb188 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x558a38afb578 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x558a38afb390 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afb410 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afb490 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x558a38afb858 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x558a38afb648 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afb6c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afb770 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x558a38afbb38 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x558a38afb928 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afb9a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afba50 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x558a38afbda0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558a38afbc08 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558a38afbc88 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558a38afbd00 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x558a38afc048 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x558a38afbe70 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558a38afbef0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558a38afbf68 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x558a38afc2f8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x558a38afc118 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afc198 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afc218 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x558a38afc5a8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x558a38afc3c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afc448 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afc4c0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x558a38afc858 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x558a38afc678 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afc6f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afc770 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x558a38afcb28 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x558a38afc928 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afc9a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a38afca48 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x558a38afce58 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x558a38afcbf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a38afcc78 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x558a38afccf0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x558a38afcd68 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a38b024b0 <col:93> 'bool' false
|-CXXMethodDecl 0x558a38afd040 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558a38afcf28 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x558a38afcfa8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x558a38afd218 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558a38afd100 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x558a38afd180 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x558a38afd4f8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558a38afd2d8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x558a38afd350 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x558a38afd3d0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x558a38afd448 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x558a38afd7e8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558a38afd5c8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x558a38afd640 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x558a38afd6c0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x558a38afd738 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x558a38afda20 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x558a38afd8c0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x558a38afd940 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x558a38afdc08 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x558a38afdae8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x558a38afdb68 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x558a38afdcb8 prev 0x558a38af5458 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558a38afddb0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x558a38afde40 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x558a38afdeb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x558a38afdf78 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x558a38afe040 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x558a38afe1b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x558a38afe0f0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x558a38afe260 <col:24>
| | `-OptimizeNoneAttr 0x558a38afe2b8 <col:34>
| |-CXXMethodDecl 0x558a38afe300 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x558a38afe5b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x558a38afe3b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558a38afe428 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x558a38afe4a8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x558a38afe670 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x558a38afe6a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x558a38afe710 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x558a38afe798 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x558a38afeab8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x558a38afe850 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558a38afe8c8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x558a38afe940 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x558a38afe9c0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x558a38afebd0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x558a38b06548 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558a38b06548
| | `-ParmVarDecl 0x558a38b06658 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x558a38b066f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558a38b066f8
| | `-ParmVarDecl 0x558a38b06808 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x558a38bdea50 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558a38afec48 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x558a38afece8 <col:38> "" ""
|-CXXMethodDecl 0x558a38afed78 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x558a38afee18 <col:44> "" ""
|-AccessSpecDecl 0x558a38afee88 <line:260:3, col:10> col:3 private
|-EnumDecl 0x558a38afeeb0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x558a38afefb0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x558a38aff000 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38afef90 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x558a38afef70 <col:27> 'int' 4
|-FieldDecl 0x558a38aff0b8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x558a38aff268 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x558a38aff320 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x558a38b003b0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x558a38b00418 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x558a38b00568 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x558a38b004a8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x558a38b00718 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x558a38b00628 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x558a38b008f8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x558a38b007d8 <col:20> col:23 'int'
| `-ParmVarDecl 0x558a38b00858 <col:25> col:28 'int'
|-CXXMethodDecl 0x558a38b00ba0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x558a38b009c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x558a38b00a40 <col:28> col:31 'int'
| `-ParmVarDecl 0x558a38b00ab8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x558a38b00c58 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x558a38b00d20 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x558a38b00d70 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x558a38b00dc0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x558a38b00fa0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x558a38b00e50 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x558a38b00ec8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a38b01248 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x558a38b01068 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x558a38b010e8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x558a38b01160 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x558a38b01468 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x558a38b01318 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x558a38b01398 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x558a38b017a0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x558a38b01528 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x558a38b015a8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x558a38b01620 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x558a38b016a0 <col:57> col:60 'int'
|-CXXMethodDecl 0x558a38b01988 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558a38b01870 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x558a38b018f0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x558a38b01ad8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x558a38b01a48 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x558a38b01e58 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x558a38b01b98 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x558a38b01c18 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x558a38b01c90 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x558a38b01d10 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x558a38b01f70 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPAddress>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPInputCombo
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class atomic_uint32_t _drops
       108 |     uint32_t _val
       112 |   int _color
       120 |   class Vector<class IPAddress> _bad_src
       120 |     class vector_memory<class sized_array_memory<4> > vm_
       120 |       vector_memory<class sized_array_memory<4> >::type * l_
       128 |       vector_memory::size_type n_
       132 |       vector_memory::size_type capacity_
       136 |   class Vector<class IPAddress> _good_dst
       136 |     class vector_memory<class sized_array_memory<4> > vm_
       136 |       vector_memory<class sized_array_memory<4> >::type * l_
       144 |       vector_memory::size_type n_
       148 |       vector_memory::size_type capacity_
           | [sizeof=152, dsize=152, align=8,
           |  nvsize=152, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a388af780 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a388af898 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x558a388af928 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x558a388af9f8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x558a388afae0 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x558a388afcf8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558a388afba0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a388afea8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558a388afdb0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558a388afff0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558a388aff60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558a388b0138 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558a388b00a8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a388b0280 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558a388b01f0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a388b0348 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x558a388b0490 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x558a388b0400 <col:28> col:31 'int'
|-CXXMethodDecl 0x558a388b0558 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x558a388b06a0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x558a388b0610 <col:28> col:31 'int'
|-CXXMethodDecl 0x558a388b0818 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558a388b0758 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a388b0960 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558a388b08d0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a388b0a28 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x558a388b0be8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558a388b0ad8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558a388b0b50 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a388b0e38 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558a388b0ca8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a388b0d20 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558a388b0ee8 <col:86> "" ""
|-CXXMethodDecl 0x558a388b1158 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x558a388b0fc8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x558a388b1040 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a388b1308 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558a388b1218 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558a388b14b8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558a388b13c0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558a388b1788 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558a388b1570 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558a388b15e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558a388b1660 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a388b1a68 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558a388b1850 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558a388b18c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a388b1940 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558a388b1b20 <col:115> "" ""
|-AccessSpecDecl 0x558a388b1b90 <line:84:3, col:10> col:3 private
|-FieldDecl 0x558a388b1bc8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a388b20d0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558a388b20d0
| `-ParmVarDecl 0x558a388b21d8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x558a388b2278 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558a388b2278
| `-ParmVarDecl 0x558a388b2388 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x558a388e79b8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558a38ada7c0 <col:7>
|-CXXConstructorDecl 0x558a388e7a90 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558a388e7a90
| `-ParmVarDecl 0x558a388e7ba8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x558a388e7c18 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558a388e7c18
| `-ParmVarDecl 0x558a388e7d28 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x558a38add1c0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a38b0aaf0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x558a38b0acc8 prev 0x558a38b0aaf0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558a38b0ad58 <col:46, col:52> col:46 public
|-TypedefDecl 0x558a38b0ad80 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b0c950 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x558a38b0c900 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x558a38b0b230 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x558a38b0b130 'type'
|     `-TemplateSpecializationType 0x558a38b0b0c0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x558a38b0afa0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x558a38b0af80 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x558a38b0af60 <col:24> 'unsigned long' 4
|       `-RecordType 0x558a38b0b0a0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x558a38b0afc0 'char_array'
|-TypedefDecl 0x558a38b0ca08 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x558a38b0c9d0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x558a38b0c9b0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x558a38b0c950 'type'
|     `-ElaboratedType 0x558a38b0c900 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x558a38b0b230 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x558a38b0b130 'type'
|         `-TemplateSpecializationType 0x558a38b0b0c0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x558a38b0afa0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x558a38b0af80 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x558a38b0af60 <col:24> 'unsigned long' 4
|           `-RecordType 0x558a38b0b0a0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x558a38b0afc0 'char_array'
|-CXXMethodDecl 0x558a38b0cb88 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x558a38b0ca98 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x558a38b0cc78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558a38b0cd58 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x558a38b0d028 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558a38b0cf30 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x558a38b0d268 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558a38b0d0e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a38b0d158 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a38b0d438 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558a38b0d328 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a38b0d3a0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a38b0d598 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558a38b0d668 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558a38b0d8b8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558a38b0d728 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558a38b0d7a0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a38b0db18 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x558a38b0d988 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558a38b0da00 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a38b0dcd8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558a38b0dbe8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a38b0de98 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558a38b0dda0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a38b0df50 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558a38b0e000 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558a38b0e238 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558a38b0e0b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a38b0e128 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a38b0e4d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558a38b0e3e0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x558a38b0e5a0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x558a38b0e5f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558a38b0e640 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a38903420 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x558a38b09a88 prev 0x558a38903420 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558a38b0aa60 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPAddress>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x558a38b0aa10 'typename array_memory<IPAddress>::type' sugar
|   `-TypedefType 0x558a38b0a9f0 'conditional<true, sized_array_memory<4>, typed_array_memory<IPAddress> >::type' sugar
|     |-Typedef 0x558a38b0a8a0 'type'
|     `-SubstTemplateTypeParmType 0x558a38b0a6c0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x558a38854fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a38854f58 'T'
|       `-RecordType 0x558a38b0a210 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x558a38b0a128 'sized_array_memory'
|-FieldDecl 0x558a38b0e690 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPAddress>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x558a38b0e6e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558a38b0e718 <line:118:5, col:15> col:15 value_type 'IPAddress':'IPAddress'
| `-SubstTemplateTypeParmType 0x558a38b09b20 'IPAddress' sugar
|   |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558a3888cc48 'T'
|   `-RecordType 0x558a38856d70 'IPAddress'
|     `-CXXRecord 0x558a388f0c90 'IPAddress'
|-TypedefDecl 0x558a38b0e7a8 <line:119:5, col:16> col:16 reference 'IPAddress &'
| `-LValueReferenceType 0x558a38b0e770 'IPAddress &'
|   `-SubstTemplateTypeParmType 0x558a38b09b20 'IPAddress' sugar
|     |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a3888cc48 'T'
|     `-RecordType 0x558a38856d70 'IPAddress'
|       `-CXXRecord 0x558a388f0c90 'IPAddress'
|-TypedefDecl 0x558a38b0e838 <line:120:5, col:22> col:22 const_reference 'const IPAddress &'
| `-LValueReferenceType 0x558a38b0e800 'const IPAddress &'
|   `-QualType 0x558a38b09b21 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x558a38b09b20 'IPAddress' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-RecordType 0x558a38856d70 'IPAddress'
|         `-CXXRecord 0x558a388f0c90 'IPAddress'
|-TypedefDecl 0x558a38b0e8c8 <line:121:5, col:16> col:16 pointer 'IPAddress *'
| `-PointerType 0x558a38b0e890 'IPAddress *'
|   `-SubstTemplateTypeParmType 0x558a38b09b20 'IPAddress' sugar
|     |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a3888cc48 'T'
|     `-RecordType 0x558a38856d70 'IPAddress'
|       `-CXXRecord 0x558a388f0c90 'IPAddress'
|-TypedefDecl 0x558a38b0e958 <line:122:5, col:22> col:22 const_pointer 'const IPAddress *'
| `-PointerType 0x558a38b0e920 'const IPAddress *'
|   `-QualType 0x558a38b09b21 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x558a38b09b20 'IPAddress' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-RecordType 0x558a38856d70 'IPAddress'
|         `-CXXRecord 0x558a388f0c90 'IPAddress'
|-TypedefDecl 0x558a38b0f740 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPAddress>::type':'IPAddress'
| `-ElaboratedType 0x558a38b0f6f0 'typename fast_argument<IPAddress>::type' sugar
|   `-TypedefType 0x558a38b0f6d0 'fast_argument<IPAddress, false>::type' sugar
|     |-Typedef 0x558a38b0f660 'type'
|     `-SubstTemplateTypeParmType 0x558a38b0f420 'IPAddress' sugar
|       |-TemplateTypeParmType 0x558a3885fdb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3885fd60 'T'
|       `-RecordType 0x558a38856d70 'IPAddress'
|         `-CXXRecord 0x558a388f0c90 'IPAddress'
|-TypedefDecl 0x558a38b0f7a8 <line:126:5, col:22> col:22 const_access_type 'const IPAddress &'
| `-LValueReferenceType 0x558a38b0e800 'const IPAddress &'
|   `-QualType 0x558a38b09b21 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x558a38b09b20 'IPAddress' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-RecordType 0x558a38856d70 'IPAddress'
|         `-CXXRecord 0x558a388f0c90 'IPAddress'
|-TypedefDecl 0x558a38b0f800 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b0f868 <line:130:5, col:16> col:16 iterator 'IPAddress *'
| `-PointerType 0x558a38b0e890 'IPAddress *'
|   `-SubstTemplateTypeParmType 0x558a38b09b20 'IPAddress' sugar
|     |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a3888cc48 'T'
|     `-RecordType 0x558a38856d70 'IPAddress'
|       `-CXXRecord 0x558a388f0c90 'IPAddress'
|-TypedefDecl 0x558a38b0f8d0 <line:131:5, col:22> col:22 const_iterator 'const IPAddress *'
| `-PointerType 0x558a38b0e920 'const IPAddress *'
|   `-QualType 0x558a38b09b21 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x558a38b09b20 'IPAddress' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-RecordType 0x558a38856d70 'IPAddress'
|         `-CXXRecord 0x558a388f0c90 'IPAddress'
|-EnumDecl 0x558a38b0f928 <line:134:5> col:5
| `-EnumConstantDecl 0x558a38b0fa20 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPAddress>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558a38b0fa00 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558a3888e328 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558a3888e300 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558a3888e2e0 <col:40> 'int' 1
|-CXXConstructorDecl 0x558a38b0faa8 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x558a38b0fd38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b0fb60 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a38b0fc00 <col:41, col:61> col:61 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXConstructorDecl 0x558a38b0fff8 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x558a38b0fee0 <col:19, col:36> col:36 x 'const Vector<IPAddress> &'
|-CXXConstructorDecl 0x558a38b102b8 <line:141:5, col:32> col:12 Vector 'void (Vector<IPAddress> &&)' inline
| `-ParmVarDecl 0x558a38b101a0 <col:19, col:31> col:31 x 'Vector<IPAddress> &&'
|-CXXMethodDecl 0x558a38b105e0 <line:144:5, col:51> col:23 operator= 'Vector<IPAddress> &(const Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x558a38b104c0 <col:33, col:50> col:50 x 'const Vector<IPAddress> &'
|-CXXMethodDecl 0x558a38b108f0 <line:146:5, col:46> col:23 operator= 'Vector<IPAddress> &(Vector<IPAddress> &&)' inline
| `-ParmVarDecl 0x558a38b107d0 <col:33, col:45> col:45 x 'Vector<IPAddress> &&'
|-CXXMethodDecl 0x558a38b10be0 <line:148:5, col:70> col:23 assign 'Vector<IPAddress> &(Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b10a28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a38b10aa0 <col:43, col:69> col:63 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x558a38b10d38 <line:150:5, col:55> col:49 begin 'Vector<IPAddress>::iterator ()'
| |-NoInlineAttr 0x558a38b10e18 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b10e70 <col:30> Inherited
|-CXXMethodDecl 0x558a38b10eb8 <line:151:5, col:53> col:49 end 'Vector<IPAddress>::iterator ()'
| |-NoInlineAttr 0x558a38b10f68 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b10fc0 <col:30> Inherited
|-CXXMethodDecl 0x558a38b11088 <line:152:5, col:63> col:55 begin 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x558a38b11138 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b11190 <col:30> Inherited
|-CXXMethodDecl 0x558a38b111d8 <line:153:5, col:61> col:55 end 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x558a38b11288 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b112e0 <col:30> Inherited
|-CXXMethodDecl 0x558a38b11328 <line:154:5, col:64> col:55 cbegin 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x558a38b113d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b11430 <col:30> Inherited
|-CXXMethodDecl 0x558a38b11478 <line:155:5, col:62> col:55 cend 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x558a38b11528 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b11580 <col:30> Inherited
|-CXXMethodDecl 0x558a38b115a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a38b11658 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a38b11708 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558a38b118c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b117b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a38b11830 <col:37, col:63> col:57 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x558a38b11a18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558a38b11988 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b11bc8 <line:163:5, col:65> col:43 operator[] 'IPAddress &(Vector::size_type)'
| |-ParmVarDecl 0x558a38b11ad0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a38b11c80 <col:20>
| `-OptimizeNoneAttr 0x558a38b11cd8 <col:30>
|-CXXMethodDecl 0x558a38b11df8 <line:164:5, col:73> col:49 operator[] 'const IPAddress &(Vector::size_type) const'
| |-ParmVarDecl 0x558a38b11d00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a38b11eb0 <col:20>
| `-OptimizeNoneAttr 0x558a38b11f08 <col:30>
|-CXXMethodDecl 0x558a38b11fc0 <line:165:5, col:29> col:15 at 'IPAddress &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a38b11f30 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b12108 <line:166:5, col:37> col:21 at 'const IPAddress &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a38b12078 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b12238 <line:167:5, col:21> col:15 front 'IPAddress &()' inline
|-CXXMethodDecl 0x558a38b12368 <line:168:5, col:29> col:21 front 'const IPAddress &() const' inline
|-CXXMethodDecl 0x558a38b12438 <line:169:5, col:20> col:15 back 'IPAddress &()' inline
|-CXXMethodDecl 0x558a38b12508 <line:170:5, col:28> col:21 back 'const IPAddress &() const' inline
|-CXXMethodDecl 0x558a38b12648 <line:172:5, col:39> col:15 unchecked_at 'IPAddress &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a38b125b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b12790 <line:173:5, col:47> col:21 unchecked_at 'const IPAddress &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a38b12700 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b128d8 <line:174:5, col:59> col:15 at_u 'IPAddress &(Vector::size_type)' inline
| |-ParmVarDecl 0x558a38b12848 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a38b12990 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558a38b12a90 <line:175:5, col:71> col:21 at_u 'const IPAddress &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558a38b12a00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a38b12b48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558a38b12c08 <line:177:5, col:20> col:15 data 'IPAddress *()' inline
|-CXXMethodDecl 0x558a38b12d08 <line:178:5, col:28> col:21 data 'const IPAddress *() const' inline
|-CXXMethodDecl 0x558a38b12e88 <line:180:5, col:48> col:17 push_back 'void (Vector<IPAddress>::value_argument_type)' inline
| `-ParmVarDecl 0x558a38b12dc8 <col:27, col:47> col:47 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-FunctionTemplateDecl 0x558a38b13648 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558a38b12f40 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPAddress>':'fast_argument<IPAddress, false>'
| `-CXXMethodDecl 0x558a38b135a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPAddress &&)' inline
|   `-ParmVarDecl 0x558a38b134a8 <col:58, col:62> col:62 v 'IPAddress &&'
|-CXXMethodDecl 0x558a38b13728 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558a38b13878 <line:186:5, col:49> col:17 push_front 'void (Vector<IPAddress>::value_argument_type)' inline
| `-ParmVarDecl 0x558a38b137e8 <col:28, col:48> col:48 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x558a38b13930 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558a38b13b78 <line:189:5, col:62> col:21 insert 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b139f0 <col:28, col:37> col:37 it 'Vector<IPAddress>::iterator':'IPAddress *'
| `-ParmVarDecl 0x558a38b13a68 <col:41, col:61> col:61 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x558a38b13d38 <line:190:5, col:38> col:21 erase 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator)' inline
| `-ParmVarDecl 0x558a38b13c48 <col:27, col:36> col:36 it 'Vector<IPAddress>::iterator':'IPAddress *'
|-CXXMethodDecl 0x558a38b13f88 <line:191:5, col:49> col:21 erase 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator, Vector<IPAddress>::iterator)' inline
| |-ParmVarDecl 0x558a38b13e00 <col:27, col:36> col:36 a 'Vector<IPAddress>::iterator':'IPAddress *'
| `-ParmVarDecl 0x558a38b13e78 <col:39, col:48> col:48 b 'Vector<IPAddress>::iterator':'IPAddress *'
|-CXXMethodDecl 0x558a38b14048 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x558a38b142a8 <line:195:5, col:34> col:17 swap 'void (Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x558a38b141b0 <col:22, col:33> col:33 x 'Vector<IPAddress> &'
`-CXXDestructorDecl 0x558a38b14378 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x558a38bdea40 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38b096b8 <../elements/ip/ipinputcombo.hh:35:1, line:63:1> line:35:7 class IPInputCombo definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x558a38b09818 <col:1, col:7> col:7 implicit referenced class IPInputCombo
|-FieldDecl 0x558a38b098b8 <line:37:3, col:19> col:19 referenced _drops 'atomic_uint32_t'
|-FieldDecl 0x558a38b09920 <line:38:3, col:7> col:7 _color 'int'
|-FieldDecl 0x558a38b14460 <line:40:3, col:21> col:21 _bad_src 'Vector<IPAddress>':'Vector<IPAddress>'
|-FieldDecl 0x558a38b14560 <line:44:3, col:21> col:21 _good_dst 'Vector<IPAddress>':'Vector<IPAddress>'
|-AccessSpecDecl 0x558a38b145b0 <line:46:2, col:8> col:2 public
|-CXXConstructorDecl 0x558a38b14640 <line:48:3, col:16> col:3 IPInputCombo 'void ()'
|-CXXDestructorDecl 0x558a38b14730 <line:49:3, col:17> col:3 ~IPInputCombo 'void ()' noexcept-unevaluated 0x558a38b14730
| `-Overrides: [ 0x558a38af0fa8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x558a38b14860 <line:51:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x558a38af2408 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x558a38b15708 <col:34, col:59>
|   `-ReturnStmt 0x558a38b156f8 <col:36, col:43>
|     `-ImplicitCastExpr 0x558a38b156e0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x558a38b156b8 <col:43> 'const char [13]' lvalue "IPInputCombo"
|-CXXMethodDecl 0x558a38b14928 <line:52:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x558a38af24d0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x558a38b15768 <col:34, col:54>
|   `-ReturnStmt 0x558a38b15758 <col:36, col:43>
|     `-ImplicitCastExpr 0x558a38b15740 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x558a38b15720 <col:43> 'const char []' lvalue Var 0x558a38af2780 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x558a38b149f0 <line:53:3, col:43> col:15 flags 'const char *() const'
| |-Overrides: [ 0x558a38af2de0 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x558a38b157c8 <col:29, col:43>
|   `-ReturnStmt 0x558a38b157b8 <col:31, col:38>
|     `-ImplicitCastExpr 0x558a38b157a0 <col:38> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x558a38b15780 <col:38> 'const char [2]' lvalue "A"
|-CXXMethodDecl 0x558a38b14ab0 <line:55:3, col:43> col:12 drops 'uint32_t () const'
| `-CompoundStmt 0x558a38b15898 <col:26, col:43>
|   `-ReturnStmt 0x558a38b15888 <col:28, col:35>
|     `-ImplicitCastExpr 0x558a38b15870 <col:35> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       `-CXXMemberCallExpr 0x558a38b15850 <col:35> 'uint32_t':'unsigned int'
|         `-MemberExpr 0x558a38b15820 <col:35> '<bound member function type>' .operator unsigned int 0x558a388afae0
|           `-MemberExpr 0x558a38b157f0 <col:35> 'const atomic_uint32_t' lvalue ->_drops 0x558a38b098b8
|             `-CXXThisExpr 0x558a38b157e0 <col:35> 'const IPInputCombo *' implicit this
|-CXXMethodDecl 0x558a38b14b70 <line:56:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x558a38af3d70 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x558a38b14e40 <line:57:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x558a38af3ca0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x558a38b14cf0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x558a38b14d68 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x558a38b14f90 <line:59:3, col:35> col:18 smaction 'Packet *(Packet *)' inline
| `-ParmVarDecl 0x558a38b14f00 <col:27, col:34> col:35 'Packet *'
|-CXXMethodDecl 0x558a38b15160 <line:60:3, col:27> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x558a38af1278 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x558a38b15050 <col:13> col:16 'int'
| `-ParmVarDecl 0x558a38b150c8 <col:18, col:26> col:26 p 'Packet *'
|-CXXMethodDecl 0x558a38b152b8 <line:61:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x558a38af1408 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x558a38b15228 <col:16> col:19 'int'
|-CXXConstructorDecl 0x558a38b15388 <line:35:7> col:7 implicit IPInputCombo 'void (const IPInputCombo &)' inline default_delete noexcept-unevaluated 0x558a38b15388
| `-ParmVarDecl 0x558a38b15498 <col:7> col:7 'const IPInputCombo &'
`-CXXMethodDecl 0x558a38b15538 <col:7> col:7 implicit operator= 'IPInputCombo &(const IPInputCombo &)' inline default_delete noexcept-unevaluated 0x558a38b15538
  `-ParmVarDecl 0x558a38b15648 <col:7> col:7 'const IPInputCombo &'

Layout: <CGRecordLayout
  LLVMType:%class.IPInputCombo = type { %class.Element.base, %class.atomic_uint32_t, i32, %class.Vector, %class.Vector }
  NonVirtualBaseLLVMType:%class.IPInputCombo = type { %class.Element.base, %class.atomic_uint32_t, i32, %class.Vector, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a388c3b60 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x558a388c3c78 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x558a388c3d18 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x558a388c3d78 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x558a388c3dd8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x558a388c3e88 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a388c4190 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a388c42a8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x558a388c4350 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x558a388c43b8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x558a388c4448 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x558a388ca4e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558a388ca918 <col:12>
|-CXXConstructorDecl 0x558a388ca5e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558a388ca6f8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558a388c4350 'data' 'const char *'
| | `-ImplicitCastExpr 0x558a388ccea0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x558a388cce70 <col:12> 'const char *const' lvalue .data 0x558a388c4350
| |     `-DeclRefExpr 0x558a388cce50 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388ca6f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558a388c43b8 'length' 'int'
| | `-ImplicitCastExpr 0x558a388ccf30 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558a388ccf00 <col:12> 'const int' lvalue .length 0x558a388c43b8
| |     `-DeclRefExpr 0x558a388ccee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388ca6f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558a388c4448 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x558a388ccfc0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x558a388ccf90 <col:12> 'String::memo_t *const' lvalue .memo 0x558a388c4448
| |     `-DeclRefExpr 0x558a388ccf70 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388ca6f8 '' 'const String::rep_t &'
| `-CompoundStmt 0x558a388cd018 <col:12>
|-CXXConstructorDecl 0x558a388ca798 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558a388ca798
| `-ParmVarDecl 0x558a388ca8a8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x558a388cfe00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558a388db818 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558a388db928 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x558a388dbe40 <col:12>
|   |-BinaryOperator 0x558a388dbc58 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558a388dbc10 <col:12> 'const char *' lvalue ->data 0x558a388c4350
|   | | `-CXXThisExpr 0x558a388dbc00 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558a388dbc40 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x558a388dbbd0 <col:12> 'const char *const' lvalue .data 0x558a388c4350
|   |     `-DeclRefExpr 0x558a388dbbb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388db928 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558a388dbd20 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x558a388dbcd8 <col:12> 'int' lvalue ->length 0x558a388c43b8
|   | | `-CXXThisExpr 0x558a388dbcc8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558a388dbd08 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x558a388dbc98 <col:12> 'const int' lvalue .length 0x558a388c43b8
|   |     `-DeclRefExpr 0x558a388dbc78 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388db928 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558a388dbde8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x558a388dbda0 <col:12> 'String::memo_t *' lvalue ->memo 0x558a388c4448
|   | | `-CXXThisExpr 0x558a388dbd90 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558a388dbdd0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x558a388dbd60 <col:12> 'String::memo_t *const' lvalue .memo 0x558a388c4448
|   |     `-DeclRefExpr 0x558a388dbd40 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388db928 '' 'const String::rep_t &'
|   `-ReturnStmt 0x558a388dbe30 <col:12>
|     `-UnaryOperator 0x558a388dbe18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a388dbe08 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x558a388db998 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558a388db998
  `-ParmVarDecl 0x558a388dbaa8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a388bb0d0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a388bb1e8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x558a388bb278 <col:16, col:22> col:16 public
|-TypedefDecl 0x558a388bb2b8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x558a3858ffd0 'const char *'
|   `-QualType 0x558a3858f521 'const char' const
|     `-BuiltinType 0x558a3858f520 'char'
|-TypedefDecl 0x558a388bb340 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x558a388bb310 'String::const_iterator' sugar
|   |-Typedef 0x558a388bb2b8 'const_iterator'
|   `-PointerType 0x558a3858ffd0 'const char *'
|     `-QualType 0x558a3858f521 'const char' const
|       `-BuiltinType 0x558a3858f520 'char'
|-TypedefDecl 0x558a388bb4b0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x558a388bb420 'int (String::*)() const'
|   |-RecordType 0x558a388bb160 'String'
|   | `-CXXRecord 0x558a388bb0d0 'String'
|   `-ParenType 0x558a388bb3c0 'int () const' sugar
|     `-FunctionProtoType 0x558a3888ff60 'int () const' const cdecl
|       `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a388bb518 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x558a386e4b60 'int64_t' sugar
|   |-Typedef 0x558a385f8390 'int64_t'
|   `-TypedefType 0x558a385d1630 '__int64_t' sugar
|     |-Typedef 0x558a385d1208 '__int64_t'
|     `-BuiltinType 0x558a3858f5a0 'long'
|-TypedefDecl 0x558a388bb580 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x558a386e4a80 'uint64_t' sugar
|   |-Typedef 0x558a385f8530 'uint64_t'
|   `-TypedefType 0x558a385d16c0 '__uint64_t' sugar
|     |-Typedef 0x558a385d1278 '__uint64_t'
|     `-BuiltinType 0x558a3858f640 'unsigned long'
|-TypedefDecl 0x558a388bb610 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x558a388bb5e0 'String::intmax_t' sugar
|   |-Typedef 0x558a388bb518 'intmax_t'
|   `-TypedefType 0x558a386e4b60 'int64_t' sugar
|     |-Typedef 0x558a385f8390 'int64_t'
|     `-TypedefType 0x558a385d1630 '__int64_t' sugar
|       |-Typedef 0x558a385d1208 '__int64_t'
|       `-BuiltinType 0x558a3858f5a0 'long'
|-TypedefDecl 0x558a388bb6a0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x558a388bb670 'String::uintmax_t' sugar
|   |-Typedef 0x558a388bb580 'uintmax_t'
|   `-TypedefType 0x558a386e4a80 'uint64_t' sugar
|     |-Typedef 0x558a385f8530 'uint64_t'
|     `-TypedefType 0x558a385d16c0 '__uint64_t' sugar
|       |-Typedef 0x558a385d1278 '__uint64_t'
|       `-BuiltinType 0x558a3858f640 'unsigned long'
|-CXXConstructorDecl 0x558a388bb760 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x558a388bb908 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x558a388bb848 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x558a388bbab8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x558a388bb9f8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x558a388bbc10 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x558a388bbb80 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x558a388bbe28 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x558a388bbcd8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x558a388bbd58 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x558a388bc048 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x558a388bbef8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x558a388bbf78 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x558a388bc268 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558a388bc118 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x558a388bc198 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x558a388bc488 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x558a388bc338 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x558a388bc3b8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x558a388bc618 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x558a388bc550 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x558a388bc798 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x558a388bc6d8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x558a388bc928 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x558a388bc860 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x558a388bca80 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x558a388bc9f0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x558a388bcbd8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x558a388bcb48 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x558a388bcd30 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x558a388bcca0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x558a388bceb8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x558a388bcdf8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x558a388bd048 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x558a388bcf80 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x558a388bd1d8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x558a388bd110 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x558a388bd368 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x558a388bd2a0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x558a388bd460 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x558a388bd588 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x558a388bd708 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x558a388bd640 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x558a388bd858 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x558a388bd7c8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x558a388bd910 <col:63> "" ""
|-CXXMethodDecl 0x558a388bda58 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x558a388bd998 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x558a388bdc68 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x558a388bdb18 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x558a388bdb98 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x558a388bde88 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x558a388bdd30 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x558a388bddb0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x558a388be168 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x558a388bdf48 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x558a388bdfc8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x558a388c9fb0 <col:55> 'int' 10
| `-ParmVarDecl 0x558a388be040 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a388c9fd0 <col:76> 'bool' true
|-CXXMethodDecl 0x558a388be448 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x558a388be230 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x558a388be2b0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x558a388c9fe0 <col:56> 'int' 10
| `-ParmVarDecl 0x558a388be328 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a388ca000 <col:77> 'bool' true
|-CXXMethodDecl 0x558a388be550 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x558a388be618 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x558a388be6e0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x558a388be780 <col:20>
| `-OptimizeNoneAttr 0x558a388be7d8 <col:30>
|-CXXConversionDecl 0x558a388be8c8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x558a388be998 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x558a388bea58 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x558a388beb48 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558a388bec08 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558a388bed88 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x558a388becc0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x558a388beed8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x558a388bee48 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x558a388befc8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x558a388bf088 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x558a388bf2d8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x558a388bf140 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x558a388bf1c0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x558a388bf538 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x558a388bf3a0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x558a388bf420 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x558a388bf608 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x558a388bf818 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x558a388bf6c0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x558a388bf740 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x558a388bfa38 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x558a388bf8e0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x558a388bf960 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x558a388bfbc8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x558a388bfb00 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x558a388bfcb8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x558a388bfe28 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x558a388bfd68 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558a388c0038 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x558a388bfee8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558a388bff68 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558a388c0250 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x558a388c00f8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x558a388c0170 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x558a388c03e0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x558a388c0310 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558a388c0600 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x558a388c04a0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x558a388c0520 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558a388c0750 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x558a388c06c0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x558a388c0928 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x558a388c0810 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558a388c0890 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x558a388c0a78 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x558a388c09e8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x558a388c0c90 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x558a388c0b30 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x558a388c0bb0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x558a388ca010 <col:39> 'int' 0
|-CXXMethodDecl 0x558a388c0eb0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x558a388c0d50 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x558a388c0dd0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x558a388ca030 <col:48> 'int' 0
|-CXXMethodDecl 0x558a388c1090 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x558a388c0f70 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x558a388c0ff0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x558a388ca050 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x558a388c1160 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x558a388c1220 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x558a388c12e0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x558a388c13a0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x558a388c1460 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x558a388c1608 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x558a388c1510 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x558a388c1788 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x558a388c16c0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x558a388c1960 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x558a388c1848 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x558a388c1ad8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x558a388c1a18 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x558a388c1c20 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x558a388c1b90 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558a388c1d70 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x558a388c1ce0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x558a388c1f48 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x558a388c1e30 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558a388c1eb0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558a388c2128 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558a388c2010 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x558a388c2090 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x558a388c2278 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x558a388c21e8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x558a388c2488 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x558a388c2338 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x558a388c23b8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x558a388c25e8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x558a388c2550 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558a388c2740 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x558a388c26a8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x558a388c27e8 <col:57> "" ""
|-CXXMethodDecl 0x558a388c28f8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x558a388c2868 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x558a388c2a48 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x558a388c29b8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x558a388c2bc8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x558a388c2b00 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x558a388c2c90 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x558a388c2d50 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x558a388c2e10 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x558a388c2eb0 <col:49> "" ""
|-CXXMethodDecl 0x558a388c2f40 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x558a388c3000 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x558a388c30f0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x558a388c31b8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x558a388c3278 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x558a388c3338 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x558a388c3430 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x558a388c34f8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x558a388c35c0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x558a388c3798 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x558a388c3678 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x558a388c36f8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x558a388c39c0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x558a388c3860 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x558a388c38e0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x558a388c3ad0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x558a388c3b38 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x558a388c3b60 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x558a388c3c78 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x558a388c3d18 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x558a388c3d78 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x558a388c3dd8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x558a388c3e88 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x558a388c3ef0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x558a388c4128 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x558a388c4178 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a388c4108 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x558a388c4018 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x558a388c3fc0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x558a388c4000 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x558a388c3fe0 <col:32> 'int' 8
|-CXXRecordDecl 0x558a388c4190 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558a388c42a8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x558a388c4350 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x558a388c43b8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x558a388c4448 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x558a388ca4e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558a388ca918 <col:12>
| |-CXXConstructorDecl 0x558a388ca5e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558a388ca6f8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558a388c4350 'data' 'const char *'
| | | `-ImplicitCastExpr 0x558a388ccea0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x558a388cce70 <col:12> 'const char *const' lvalue .data 0x558a388c4350
| | |     `-DeclRefExpr 0x558a388cce50 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388ca6f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558a388c43b8 'length' 'int'
| | | `-ImplicitCastExpr 0x558a388ccf30 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x558a388ccf00 <col:12> 'const int' lvalue .length 0x558a388c43b8
| | |     `-DeclRefExpr 0x558a388ccee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388ca6f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558a388c4448 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x558a388ccfc0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x558a388ccf90 <col:12> 'String::memo_t *const' lvalue .memo 0x558a388c4448
| | |     `-DeclRefExpr 0x558a388ccf70 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388ca6f8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x558a388cd018 <col:12>
| |-CXXConstructorDecl 0x558a388ca798 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558a388ca798
| | `-ParmVarDecl 0x558a388ca8a8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x558a388cfe00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x558a388db818 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558a388db928 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x558a388dbe40 <col:12>
| |   |-BinaryOperator 0x558a388dbc58 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x558a388dbc10 <col:12> 'const char *' lvalue ->data 0x558a388c4350
| |   | | `-CXXThisExpr 0x558a388dbc00 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558a388dbc40 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x558a388dbbd0 <col:12> 'const char *const' lvalue .data 0x558a388c4350
| |   |     `-DeclRefExpr 0x558a388dbbb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388db928 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558a388dbd20 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x558a388dbcd8 <col:12> 'int' lvalue ->length 0x558a388c43b8
| |   | | `-CXXThisExpr 0x558a388dbcc8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558a388dbd08 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x558a388dbc98 <col:12> 'const int' lvalue .length 0x558a388c43b8
| |   |     `-DeclRefExpr 0x558a388dbc78 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388db928 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558a388dbde8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x558a388dbda0 <col:12> 'String::memo_t *' lvalue ->memo 0x558a388c4448
| |   | | `-CXXThisExpr 0x558a388dbd90 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558a388dbdd0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x558a388dbd60 <col:12> 'String::memo_t *const' lvalue .memo 0x558a388c4448
| |   |     `-DeclRefExpr 0x558a388dbd40 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a388db928 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x558a388dbe30 <col:12>
| |     `-UnaryOperator 0x558a388dbe18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558a388dbe08 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x558a388db998 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558a388db998
|   `-ParmVarDecl 0x558a388dbaa8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x558a388c44c0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x558a388c4708 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x558a388c4528 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x558a388c45a8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x558a388c4620 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x558a388ca4a0 <col:79, line:261:5>
|   |-BinaryOperator 0x558a388ca118 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558a388ca0b0 <col:2, col:5> 'const char *' lvalue .data 0x558a388c4350
|   | | `-MemberExpr 0x558a388ca080 <col:2> 'String::rep_t' lvalue ->_r 0x558a388c44c0
|   | |   `-CXXThisExpr 0x558a388ca070 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558a388ca100 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558a388ca0e0 <col:12> 'const char *' lvalue ParmVar 0x558a388c4528 'data' 'const char *'
|   |-BinaryOperator 0x558a388ca1e0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x558a388ca178 <col:2, col:5> 'int' lvalue .length 0x558a388c43b8
|   | | `-MemberExpr 0x558a388ca148 <col:2> 'String::rep_t' lvalue ->_r 0x558a388c44c0
|   | |   `-CXXThisExpr 0x558a388ca138 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558a388ca1c8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x558a388ca1a8 <col:14> 'int' lvalue ParmVar 0x558a388c45a8 'length' 'int'
|   `-IfStmt 0x558a388ca488 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x558a388ca300 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558a388ca2e8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x558a388ca2c8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x558a388ca2a8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x558a388ca240 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x558a388c4448
|     |       | `-MemberExpr 0x558a388ca210 <col:7> 'String::rep_t' lvalue ->_r 0x558a388c44c0
|     |       |   `-CXXThisExpr 0x558a388ca200 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x558a388ca290 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x558a388ca270 <col:17> 'String::memo_t *' lvalue ParmVar 0x558a388c4620 'memo' 'String::memo_t *'
|     `-CallExpr 0x558a388ca460 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x558a388ca448 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558a388ca350 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x558a388b3138 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x558a388ca3b8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558a388c3d18
|         `-ImplicitCastExpr 0x558a388ca3a0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x558a388ca380 <col:27> 'String::memo_t *' lvalue ParmVar 0x558a388c4620 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x558a388c49b8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x558a388c47d8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x558a388c4858 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x558a388c48d0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x558a388c44c0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x558a388ca928 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558a388caab8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x558a388caa20 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x558a388ca990 <col:2> '<bound member function type>' ->assign_memo 0x558a388c4708
|     | `-ImplicitCastExpr 0x558a388caa58 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x558a388ca980 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x558a388caa70 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x558a388ca9c0 <col:14> 'const char *' lvalue ParmVar 0x558a388c47d8 'data' 'const char *'
|     |-ImplicitCastExpr 0x558a388caa88 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x558a388ca9e0 <col:20> 'int' lvalue ParmVar 0x558a388c4858 'length' 'int'
|     `-ImplicitCastExpr 0x558a388caaa0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x558a388caa00 <col:28> 'String::memo_t *' lvalue ParmVar 0x558a388c48d0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x558a388c4b48 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x558a388c4a88 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x558a388cad10 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x558a388cac90 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x558a388caae0 <col:2> '<bound member function type>' ->assign_memo 0x558a388c4708
|     | `-CXXThisExpr 0x558a388caad0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x558a388cacc8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x558a388cab60 <col:14, col:19> 'const char *' lvalue .data 0x558a388c4350
|     |   `-MemberExpr 0x558a388cab30 <col:14, col:16> 'String::rep_t' lvalue ._r 0x558a388c44c0
|     |     `-DeclRefExpr 0x558a388cab10 <col:14> 'const String' lvalue ParmVar 0x558a388c4a88 'x' 'const String &'
|     |-ImplicitCastExpr 0x558a388cace0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x558a388cabe0 <col:25, col:30> 'int' lvalue .length 0x558a388c43b8
|     |   `-MemberExpr 0x558a388cabb0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x558a388c44c0
|     |     `-DeclRefExpr 0x558a388cab90 <col:25> 'const String' lvalue ParmVar 0x558a388c4a88 'x' 'const String &'
|     `-ImplicitCastExpr 0x558a388cacf8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x558a388cac60 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x558a388c4448
|         `-MemberExpr 0x558a388cac30 <col:38, col:40> 'String::rep_t' lvalue ._r 0x558a388c44c0
|           `-DeclRefExpr 0x558a388cac10 <col:38> 'const String' lvalue ParmVar 0x558a388c4a88 'x' 'const String &'
|-CXXMethodDecl 0x558a388c4c10 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x558a388cb6d0 <col:31, line:278:5>
|   `-IfStmt 0x558a388cb6b8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x558a388cadb0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558a388cad98 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x558a388cad68 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558a388c4448
|     |     `-MemberExpr 0x558a388cad38 <col:6> 'String::rep_t' lvalue ->_r 0x558a388c44c0
|     |       `-CXXThisExpr 0x558a388cad28 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x558a388cb690 <col:15, line:277:2>
|       |-ParenExpr 0x558a388cb260 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x558a388cb230 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x558a388caec0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x558a388caea8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x558a388cae90 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x558a388cae50 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558a388c3d18
|       |   |       `-ImplicitCastExpr 0x558a388cae38 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x558a388cae08 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x558a388c4448
|       |   |           `-MemberExpr 0x558a388cadd8 <col:27> 'String::rep_t' lvalue ->_r 0x558a388c44c0
|       |   |             `-CXXThisExpr 0x558a388cadc8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x558a388caf20 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x558a388caf00 <col:54> 'int' 0
|       |   `-CallExpr 0x558a388cb190 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x558a388cb178 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x558a388cb0f8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x558a388cb1d0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558a388cb008 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x558a388cb1e8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558a388cb038 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x558a388cb200 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x558a388cb070 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x558a388cb218 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x558a388cb0e0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x558a388cb0c8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x558a388cb090 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x558a388cb5b0 <line:274:6, line:275:22>
|       | |-CallExpr 0x558a388cb470 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x558a388cb458 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x558a388cb3d0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x558a388b4580 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x558a388cb3a0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558a388c3d18
|       | |   `-ImplicitCastExpr 0x558a388cb388 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x558a388cb358 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x558a388c4448
|       | |       `-MemberExpr 0x558a388cb328 <col:40> 'String::rep_t' lvalue ->_r 0x558a388c44c0
|       | |         `-CXXThisExpr 0x558a388cb318 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x558a388cb570 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x558a388cb558 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x558a388cb498 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x558a388c93f0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x558a388cb598 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x558a388cb4f8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x558a388c4448
|       |       `-MemberExpr 0x558a388cb4c8 <col:15> 'String::rep_t' lvalue ->_r 0x558a388c44c0
|       |         `-CXXThisExpr 0x558a388cb4b8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x558a388cb670 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x558a388cb608 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558a388c4448
|         | `-MemberExpr 0x558a388cb5d8 <col:6> 'String::rep_t' lvalue ->_r 0x558a388c44c0
|         |   `-CXXThisExpr 0x558a388cb5c8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x558a388cb658 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x558a388cb638 <col:16> 'int' 0
|-CXXMethodDecl 0x558a388c4ea8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x558a388c4cc8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558a388c4d48 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558a388c4dc0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x558a388c4f80 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x558a388c51d0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x558a388c5038 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558a388c50b8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558a388c5130 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x558a388c53b8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x558a388c52a0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x558a388c5320 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x558a388c54b8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x558a388cb7a8 <col:41, line:286:5>
|   `-ReturnStmt 0x558a388cb798 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x558a388cb768 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x558a388cb730 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x558a388cb718 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x558a388cb6f8 <col:46> 'int' 1
|-CXXMethodDecl 0x558a388c5758 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x558a388c5570 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x558a388c55f0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x558a388c5670 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x558a388c93f0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x558a388c5820 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x558a388c94c0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x558a388c9690 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x558a388c9578 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558a388c95f8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x558a388c9750 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x558a388c9818 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x558a388c9918 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x558a388c9990 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x558a388c9a08 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x558a388c9a70 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x558a388c9b70 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x558a388c9bc0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a388c9b50 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x558a388c9b30 <col:22> 'int' 14
|-CXXMethodDecl 0x558a388c9dd8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x558a388c9bf0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x558a388c9c70 <col:38> col:41 'int'
| `-ParmVarDecl 0x558a388c9cf0 <col:43> col:46 'int'
|-FriendDecl 0x558a388c9ee0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x558a388c9f70 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a38b41fc0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x558a38b42198 prev 0x558a38b41fc0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558a38b42228 <col:46, col:52> col:46 public
|-TypedefDecl 0x558a38b42250 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b43bb0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x558a38b43b60 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x558a38b43b40 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x558a38b42468 'type'
|     `-SubstTemplateTypeParmType 0x558a38b42430 'String' sugar
|       |-TemplateTypeParmType 0x558a3887f980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3887f930 'T'
|       `-RecordType 0x558a388bb160 'String'
|         `-CXXRecord 0x558a388bb0d0 'String'
|-TypedefDecl 0x558a38b43c68 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x558a38b43c30 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x558a38b43c10 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558a38b43bb0 'type'
|     `-ElaboratedType 0x558a38b43b60 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x558a38b43b40 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x558a38b42468 'type'
|         `-SubstTemplateTypeParmType 0x558a38b42430 'String' sugar
|           |-TemplateTypeParmType 0x558a3887f980 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558a3887f930 'T'
|           `-RecordType 0x558a388bb160 'String'
|             `-CXXRecord 0x558a388bb0d0 'String'
|-CXXMethodDecl 0x558a38b43de8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x558a38b43cf8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x558a38b43ed8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558a38b43fb8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x558a38b43fb8
|-CXXMethodDecl 0x558a38b44288 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558a38b44190 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x558a38b444c8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558a38b44340 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a38b443b8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a38b44698 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558a38b44588 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a38b44600 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a38b447f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558a38b448c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558a38b44b18 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558a38b44988 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558a38b44a00 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a38b44d78 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x558a38b44be8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558a38b44c60 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a38b44f38 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558a38b44e48 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a38b450f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558a38b45000 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a38b451b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558a38b45260 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558a38b45498 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558a38b45310 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a38b45388 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a38b45738 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558a38b45640 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x558a38b45800 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x558a38b45850 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558a38b458a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a38af3910 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x558a3898e5f8 prev 0x558a38af3910 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558a38b41f30 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x558a38b41ee0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x558a38b41ec0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558a38b41d70 'type'
|     `-SubstTemplateTypeParmType 0x558a38b41c00 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x558a38855730 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x558a388556d8 'F'
|       `-RecordType 0x558a3898f1f0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x558a3898f110 'typed_array_memory'
|-FieldDecl 0x558a38b458f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x558a38b45940 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558a38b45978 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x558a3898e690 'String' sugar
|   |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558a3888cc48 'T'
|   `-RecordType 0x558a388bb160 'String'
|     `-CXXRecord 0x558a388bb0d0 'String'
|-TypedefDecl 0x558a38b45a08 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x558a38b459d0 'String &'
|   `-SubstTemplateTypeParmType 0x558a3898e690 'String' sugar
|     |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a3888cc48 'T'
|     `-RecordType 0x558a388bb160 'String'
|       `-CXXRecord 0x558a388bb0d0 'String'
|-TypedefDecl 0x558a38b45a98 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x558a38b45a60 'const String &'
|   `-QualType 0x558a3898e691 'const String' const
|     `-SubstTemplateTypeParmType 0x558a3898e690 'String' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-RecordType 0x558a388bb160 'String'
|         `-CXXRecord 0x558a388bb0d0 'String'
|-TypedefDecl 0x558a38b45b28 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x558a38b45af0 'String *'
|   `-SubstTemplateTypeParmType 0x558a3898e690 'String' sugar
|     |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a3888cc48 'T'
|     `-RecordType 0x558a388bb160 'String'
|       `-CXXRecord 0x558a388bb0d0 'String'
|-TypedefDecl 0x558a38b45bb8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x558a38b45b80 'const String *'
|   `-QualType 0x558a3898e691 'const String' const
|     `-SubstTemplateTypeParmType 0x558a3898e690 'String' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-RecordType 0x558a388bb160 'String'
|         `-CXXRecord 0x558a388bb0d0 'String'
|-TypedefDecl 0x558a38b46810 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x558a38b467c0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x558a38b467a0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x558a38b466d8 'type'
|     `-LValueReferenceType 0x558a38b466a0 'const String &'
|       `-QualType 0x558a38b46441 'const String' const
|         `-SubstTemplateTypeParmType 0x558a38b46440 'String' sugar
|           |-TemplateTypeParmType 0x558a3885f680 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558a3885f628 'T'
|           `-RecordType 0x558a388bb160 'String'
|             `-CXXRecord 0x558a388bb0d0 'String'
|-TypedefDecl 0x558a38b46878 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x558a38b45a60 'const String &'
|   `-QualType 0x558a3898e691 'const String' const
|     `-SubstTemplateTypeParmType 0x558a3898e690 'String' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-RecordType 0x558a388bb160 'String'
|         `-CXXRecord 0x558a388bb0d0 'String'
|-TypedefDecl 0x558a38b468d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b46938 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x558a38b45af0 'String *'
|   `-SubstTemplateTypeParmType 0x558a3898e690 'String' sugar
|     |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a3888cc48 'T'
|     `-RecordType 0x558a388bb160 'String'
|       `-CXXRecord 0x558a388bb0d0 'String'
|-TypedefDecl 0x558a38b469a0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x558a38b45b80 'const String *'
|   `-QualType 0x558a3898e691 'const String' const
|     `-SubstTemplateTypeParmType 0x558a3898e690 'String' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-RecordType 0x558a388bb160 'String'
|         `-CXXRecord 0x558a388bb0d0 'String'
|-EnumDecl 0x558a38b469f8 <line:134:5> col:5
| `-EnumConstantDecl 0x558a38b46af0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558a38b46ad0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558a3888e328 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558a3888e300 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558a3888e2e0 <col:40> 'int' 1
|-CXXConstructorDecl 0x558a38b46b78 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558a38b46e08 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b46c30 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a38b46cd0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x558a38b47098 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x558a38b46f80 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x558a38b47358 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x558a38b47240 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x558a38b47670 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x558a38b47550 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x558a38b47980 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x558a38b47860 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x558a38b47c70 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b47ab8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a38b47b30 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558a38b47d98 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558a38b47e48 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b47ea0 <col:30> Inherited
|-CXXMethodDecl 0x558a38b47ee8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558a38b47f98 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b47ff0 <col:30> Inherited
|-CXXMethodDecl 0x558a38b480b8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558a38b48168 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b481c0 <col:30> Inherited
|-CXXMethodDecl 0x558a38b48208 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558a38b482b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b48310 <col:30> Inherited
|-CXXMethodDecl 0x558a38b48358 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558a38b48408 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b48460 <col:30> Inherited
|-CXXMethodDecl 0x558a38b484a8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558a38b48558 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b485b0 <col:30> Inherited
|-CXXMethodDecl 0x558a38b485d8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a38b48688 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a38b48738 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558a38b488f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b487e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a38b48860 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558a38b48a48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558a38b489b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b48bf8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x558a38b48b00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a38b48cb0 <col:20>
| `-OptimizeNoneAttr 0x558a38b48d08 <col:30>
|-CXXMethodDecl 0x558a38b48e28 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x558a38b48d30 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a38b48ee0 <col:20>
| `-OptimizeNoneAttr 0x558a38b48f38 <col:30>
|-CXXMethodDecl 0x558a38b48ff0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a38b48f60 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b49138 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a38b490a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b49268 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x558a38b49368 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x558a38b49438 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x558a38b49508 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x558a38b49648 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a38b495b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b49790 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a38b49700 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b498d8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x558a38b49848 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a38b49990 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558a38b49a90 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558a38b49a00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a38b49b48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558a38b4a450 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x558a38b4a548 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x558a38b4a6c8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558a38b4a608 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x558a38b4ae58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558a38b4a780 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x558a38b4adb8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x558a38b4acb8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x558a38b4af38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558a38b4b088 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558a38b4aff8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558a38b4b140 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558a38b4b388 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b4b200 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558a38b4b278 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558a38b4b518 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x558a38b4b458 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558a38b4b728 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x558a38b4b5e0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558a38b4b658 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558a38b4b7e8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558a38b4ba48 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x558a38b4b950 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x558a38b4bb18 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x558a38b4bb18

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38bc9778 prev 0x558a38a74498 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a38bc9870 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x558a38bc9900 <col:22, col:28> col:22 public
|-EnumDecl 0x558a38bc9928 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x558a38bc9a48 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a38bc9a28 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x558a38bc9a10 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558a38bc99f0 <col:14> 'int' 999
| |-EnumConstantDecl 0x558a38bc9af0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a38bc9ad0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x558a38bc9ab8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558a38bc9a98 <col:14> 'int' 1
| |-EnumConstantDecl 0x558a38bc9b80 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a38bc9b60 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x558a38bc9b40 <col:17> 'int' 0
| |-EnumConstantDecl 0x558a38bc9c10 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a38bc9bf0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x558a38bc9bd0 <col:13> 'int' 1
| |-EnumConstantDecl 0x558a38bc9ca0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a38bc9c80 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x558a38bc9c60 <col:16> 'int' 2
| |-EnumConstantDecl 0x558a38bc9d30 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a38bc9d10 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x558a38bc9cf0 <col:13> 'int' 3
| |-EnumConstantDecl 0x558a38bc9dc0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a38bc9da0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x558a38bc9d80 <col:15> 'int' 4
| |-EnumConstantDecl 0x558a38bc9e50 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a38bc9e30 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x558a38bc9e10 <col:14> 'int' 5
| |-EnumConstantDecl 0x558a38bc9ee0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a38bc9ec0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x558a38bc9ea0 <col:12> 'int' 6
| `-EnumConstantDecl 0x558a38bc9f70 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x558a38bc9f50 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x558a38bc9f30 <col:13> 'int' 7
|-VarDecl 0x558a38bc9fe0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x558a38bca068 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x558a38bca0f0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x558a38bca178 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x558a38bca200 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x558a38bca288 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x558a38bca310 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x558a38bca398 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x558a38bca420 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x558a38bca4a8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x558a38bca530 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x558a38bca630 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x558a38bcf918 '_nerrors' 'int'
| | `-IntegerLiteral 0x558a38bd00a8 <line:128:13> 'int' 0
| `-CompoundStmt 0x558a38bd0118 <col:16, line:129:5>
|-CXXDestructorDecl 0x558a38bca720 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x558a38bd0128 <col:29, line:132:5>
|-CXXMethodDecl 0x558a38bca8d8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x558a38bca810 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a38bca9a0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558a38bcaa88 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558a38bd0180 <col:44, line:161:5>
|   `-ReturnStmt 0x558a38bd0170 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x558a38bd0158 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558a38bd0138 <col:9> 'ErrorHandler *' lvalue Var 0x558a38bcf978 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x558a38bcabc8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x558a38bcab38 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a38bcac90 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558a38bd01e0 <col:43, line:173:5>
|   `-ReturnStmt 0x558a38bd01d0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x558a38bd01b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558a38bd0198 <col:9> 'ErrorHandler *' lvalue Var 0x558a38bcf9f0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x558a38bcad48 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x558a38bcadc8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x558a38bcaed8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x558a38bcae48 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcb028 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x558a38bcaf98 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcb180 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x558a38bcb0e8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcb2d8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x558a38bcb240 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcb430 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x558a38bcb398 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcb640 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a38bcb4e8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x558a38bcb568 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcb818 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a38bcb700 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x558a38bcb780 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcba38 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a38bcb8d8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x558a38bcb958 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcbc18 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a38bcbaf8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558a38bcbb78 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcbdf8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a38bcbcd8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558a38bcbd58 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcbf80 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x558a38bcbeb8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x558a38bcc150 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x558a38bcc038 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558a38bcc0b0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x558a38bd04a8 <col:57, line:234:5>
|   `-ReturnStmt 0x558a38bd0498 <line:233:2, col:41>
|     `-ExprWithCleanups 0x558a38bd0480 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558a38bd0428 <col:9, col:41> 'int'
|         |-MemberExpr 0x558a38bd03f8 <col:9> '<bound member function type>' ->xmessage 0x558a38bcbf80
|         | `-CXXThisExpr 0x558a38bd03e8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x558a38bd0468 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558a38bd0450 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558a38bd03c8 <col:18, col:40> 'String' (CXXTemporary 0x558a38bd03c8)
|               `-CallExpr 0x558a38bd0390 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x558a38bd0378 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x558a38bd02e8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558a38bce148 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x558a38bd0308 <col:31> 'const String' lvalue ParmVar 0x558a38bcc0b0 'str' 'const String &'
|                 `-DeclRefExpr 0x558a38bd0328 <col:36> 'const String' lvalue ParmVar 0x558a38bcc038 'anno' 'const String &'
|-CXXMethodDecl 0x558a38bcc430 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558a38bcc210 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558a38bcc290 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x558a38bcc308 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558a38bd0738 <col:68, line:243:5>
|   `-ReturnStmt 0x558a38bd0728 <line:242:2, col:41>
|     `-ExprWithCleanups 0x558a38bd0710 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558a38bd06b0 <col:9, col:41> 'int'
|         |-MemberExpr 0x558a38bd0680 <col:9> '<bound member function type>' ->xmessage 0x558a38bcc150
|         | `-CXXThisExpr 0x558a38bd0670 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558a38bd0548 <col:18> 'const String' lvalue ParmVar 0x558a38bcc210 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558a38bd06f8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558a38bd06e0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558a38bd0650 <col:24, col:40> 'String' (CXXTemporary 0x558a38bd0650)
|               `-CXXMemberCallExpr 0x558a38bd05e8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x558a38bd0578 <col:24> '<bound member function type>' ->vformat 0x558a38bcd610
|                 | `-CXXThisExpr 0x558a38bd0568 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558a38bd0618 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558a38bd05a8 <col:32> 'const char *' lvalue ParmVar 0x558a38bcc290 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558a38bd0630 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558a38bd05c8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558a38bcc308 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a38bcc6d0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x558a38bcc4f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558a38bcc570 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558a38bcc5e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x558a38bd0a78 <col:23, line:254:5>
|   `-ReturnStmt 0x558a38bd0a68 <line:253:2, col:71>
|     `-ExprWithCleanups 0x558a38bd0a50 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x558a38bd09f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x558a38bd09c0 <col:9> '<bound member function type>' ->xmessage 0x558a38bcc150
|         | `-CXXThisExpr 0x558a38bd09b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x558a38bd0a38 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x558a38bd0a20 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x558a38bd0970 <col:18, col:65> 'String' (CXXTemporary 0x558a38bd0970)
|         |     `-CallExpr 0x558a38bd0908 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x558a38bd08f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x558a38bd07d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558a38bce148 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x558a38bd07f8 <col:31> 'const String' lvalue ParmVar 0x558a38bcc570 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x558a38bd0950 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x558a38bd0938 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x558a38bd08d0 <col:37, col:64> 'String' (CXXTemporary 0x558a38bd08d0)
|         |             `-CallExpr 0x558a38bd08a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x558a38bd0888 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x558a38bd0818 <col:37> 'String (const String &)' lvalue CXXMethod 0x558a38bce798 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x558a38bd0838 <col:56> 'const String' lvalue ParmVar 0x558a38bcc4f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x558a38bd0990 <col:68> 'const String' lvalue ParmVar 0x558a38bcc5e8 'str' 'const String &'
|-CXXMethodDecl 0x558a38bcca50 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558a38bcc798 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558a38bcc810 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558a38bcc890 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x558a38bcc908 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558a38bd0d30 <col:34, line:267:5>
|   `-ReturnStmt 0x558a38bd0d20 <line:266:2, col:51>
|     `-ExprWithCleanups 0x558a38bd0d08 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x558a38bd0ca0 <col:9, col:51> 'int'
|         |-MemberExpr 0x558a38bd0c70 <col:9> '<bound member function type>' ->xmessage 0x558a38bcc6d0
|         | `-CXXThisExpr 0x558a38bd0c60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558a38bd0b18 <col:18> 'const String' lvalue ParmVar 0x558a38bcc798 'landmark' 'const String &'
|         |-DeclRefExpr 0x558a38bd0b38 <col:28> 'const String' lvalue ParmVar 0x558a38bcc810 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558a38bd0cf0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x558a38bd0cd8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558a38bd0c40 <col:34, col:50> 'String' (CXXTemporary 0x558a38bd0c40)
|               `-CXXMemberCallExpr 0x558a38bd0bd8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x558a38bd0b68 <col:34> '<bound member function type>' ->vformat 0x558a38bcd610
|                 | `-CXXThisExpr 0x558a38bd0b58 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558a38bd0c08 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558a38bd0b98 <col:42> 'const char *' lvalue ParmVar 0x558a38bcc890 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558a38bd0c20 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558a38bd0bb8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558a38bcc908 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a38bccb60 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x558a38bd0db0 <col:25, line:288:5>
|   `-ReturnStmt 0x558a38bd0da0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x558a38bd0d88 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x558a38bd0d58 <col:9> 'const int' lvalue ->_nerrors 0x558a38bcf918
|         `-CXXThisExpr 0x558a38bd0d48 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x558a38bccd70 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x558a38bccc18 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x558a38bccc98 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcd058 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558a38bcce38 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x558a38bcceb8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x558a38bccf30 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a38bcd1f0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x558a38bcd128 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcd438 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558a38bcd2b0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x558a38bcd328 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558a38bd1010 <col:58, line:357:5>
|   `-ReturnStmt 0x558a38bd1000 <line:356:2, col:29>
|     `-ExprWithCleanups 0x558a38bd0fe8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x558a38bd0fb8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x558a38bd0fa0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x558a38bd0f80 <col:9, col:29> 'String' (CXXTemporary 0x558a38bd0f80)
|             `-CallExpr 0x558a38bd0f10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x558a38bd0ef8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x558a38bd0e78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x558a38bcd058 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x558a38bd0e18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x558a38bd0f48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x558a38bd0e38 <col:21> 'const char *' lvalue ParmVar 0x558a38bcd2b0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x558a38bd0f60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x558a38bd0e58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558a38bcd328 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a38bcd610 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x558a38bcd500 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x558a38bcd578 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a38bcd768 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x558a38bcd6d8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x558a38bcd8b0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x558a38bcd820 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x558a38bcdb50 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x558a38bcd968 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x558a38bcd9e8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x558a38bcda60 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x558a38bcdcb0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x558a38bcdc20 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x558a38bd1128 <col:37, line:441:5>
|   `-IfStmt 0x558a38bd1110 <line:439:2, line:440:8>
|     |-BinaryOperator 0x558a38bd1098 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x558a38bd1068 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x558a38bd1028 <col:6> 'int' lvalue ParmVar 0x558a38bcdc20 'level' 'int'
|     | `-ImplicitCastExpr 0x558a38bd1080 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x558a38bd1048 <col:15> 'ErrorHandler::Level' EnumConstant 0x558a38bc9d30 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x558a38bd10f8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x558a38bd10c8 <col:8> 'int' lvalue ->_nerrors 0x558a38bcf918
|         `-CXXThisExpr 0x558a38bd10b8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x558a38bcdd78 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x558a38bd11c0 <col:26, line:448:5>
|   `-BinaryOperator 0x558a38bd11a0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x558a38bd1150 <col:2> 'int' lvalue ->_nerrors 0x558a38bcf918
|     | `-CXXThisExpr 0x558a38bd1140 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x558a38bd1180 <col:13> 'int' 0
|-CXXMethodDecl 0x558a38bcdf40 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x558a38bcde30 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x558a38bcdea8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x558a38bce148 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x558a38bce000 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x558a38bce078 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x558a38bce3f8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x558a38bce208 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x558a38bce288 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x558a38bce308 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x558a38bce4b0 <col:59> 0 0
|-CXXMethodDecl 0x558a38bce648 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x558a38bce528 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x558a38bce5a8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x558a38bd1830 <col:70, line:534:5>
|   |-DeclStmt 0x558a38bd1330 <line:528:2, col:20>
|   | |-VarDecl 0x558a38bd11e8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x558a38bd1250 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x558a38bd1288 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x558a38bd12f0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x558a38bd1400 <line:529:2, col:23>
|   | `-VarDecl 0x558a38bd1360 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x558a38bd13e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x558a38bd13c8 <col:18> 'const char *' lvalue ParmVar 0x558a38bce528 'begin' 'const char *'
|   |-DoStmt 0x558a38bd17c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x558a38bd16f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x558a38bd16e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x558a38bd16c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x558a38bd1418 <col:6> 'const char *' lvalue Var 0x558a38bd1360 'x' 'const char *'
|   | |     `-CallExpr 0x558a38bd1610 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x558a38bd15f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x558a38bd15b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x558a38bcfdf0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x558a38bd1678 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x558a38bd1660 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x558a38bd14d0 <col:20, col:27> 'String' (CXXTemporary 0x558a38bd14d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x558a38bd1498 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x558a38bd1690 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558a38bd14f0 <col:30> 'const char *' lvalue Var 0x558a38bd1360 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x558a38bd16a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558a38bd1510 <col:33> 'const char *' lvalue ParmVar 0x558a38bce5a8 'end' 'const char *'
|   | |       |-UnaryOperator 0x558a38bd1550 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558a38bd1530 <col:39> 'String' lvalue Var 0x558a38bd11e8 'name' 'String'
|   | |       |-UnaryOperator 0x558a38bd1588 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558a38bd1568 <col:46> 'String' lvalue Var 0x558a38bd1288 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x558a38bd15a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x558a38bd17b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x558a38bd1798 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x558a38bd1778 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x558a38bd1748 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|   |         `-ImplicitCastExpr 0x558a38bd1730 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x558a38bd1710 <col:11> 'String' lvalue Var 0x558a38bd11e8 'name' 'String'
|   `-ReturnStmt 0x558a38bd1820 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x558a38bd1808 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x558a38bd17e8 <col:9> 'const char *' lvalue Var 0x558a38bd1360 'x' 'const char *'
|-CXXMethodDecl 0x558a38bce798 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x558a38bce708 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x558a38bd1e38 <col:55, line:550:5>
|   `-IfStmt 0x558a38bd1e10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x558a38bd1a70 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x558a38bd1a58 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558a38bd1a40 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558a38bd1a20 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558a38bd19f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|     | |       `-DeclRefExpr 0x558a38bd1890 <col:6> 'const String' lvalue ParmVar 0x558a38bce708 'x' 'const String &'
|     | `-BinaryOperator 0x558a38bd19d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x558a38bd19a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x558a38bd1950 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x558a38bd1938 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x558a38bd18f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x558a388d8100 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x558a38bd18b0 <col:11> 'const String' lvalue ParmVar 0x558a38bce708 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x558a38bd18d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x558a38bd19b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x558a38bd1988 <col:19> 'char' 123
|     |-ReturnStmt 0x558a38bd1ae0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x558a38bd1ab0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x558a38bd1a90 <col:13> 'const String' lvalue ParmVar 0x558a38bce708 'x' 'const String &'
|     `-IfStmt 0x558a38bd1de8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x558a38bd1b78 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a38bd1b60 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a38bd1b40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a38bd1b10 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|       |       `-DeclRefExpr 0x558a38bd1af0 <col:11> 'const String' lvalue ParmVar 0x558a38bce708 'x' 'const String &'
|       |-ReturnStmt 0x558a38bd1d00 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x558a38bd1ce8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x558a38bd1cb8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x558a38bd1ca0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x558a38bd1c80 <col:13, col:29> 'String' (CXXTemporary 0x558a38bd1c80)
|       |         `-CallExpr 0x558a38bd1c30 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x558a38bd1c18 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x558a38bd1b90 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x558a38bcdf40 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x558a38bd1c60 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x558a38bd1bb0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x558a38bd1bd0 <col:28> 'const String' lvalue ParmVar 0x558a38bce708 'x' 'const String &'
|       `-ReturnStmt 0x558a38bd1dd8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x558a38bd1dc0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x558a38bd1d90 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x558a38bd1d78 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x558a38bd1d58 <col:13, col:20> 'String' (CXXTemporary 0x558a38bd1d58)
|                 `-CXXTemporaryObjectExpr 0x558a38bd1d20 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x558a38bce960 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x558a38bce850 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x558a38bce8c8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a38bd0098 <col:71> 'bool' false
|-CXXRecordDecl 0x558a38bcea10 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x558a38bced08 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x558a38bceca0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x558a38bcec40 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x558a38bcec00 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x558a388bb160 'String'
|       | `-CXXRecord 0x558a388bb0d0 'String'
|       |-BuiltinType 0x558a3858f580 'int'
|       `-DecayedType 0x558a38a754e0 '__va_list_tag *' sugar
|         |-TypedefType 0x558a38a754b0 'va_list' sugar
|         | |-Typedef 0x558a387ad220 'va_list'
|         | `-TypedefType 0x558a387ad1d0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x558a386e4e18 '__gnuc_va_list'
|         |   `-TypedefType 0x558a386e4d80 '__builtin_va_list' sugar
|         |     |-Typedef 0x558a385d0d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x558a385d0ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x558a385902d0 '__va_list_tag'
|         |         `-CXXRecord 0x558a38590238 '__va_list_tag'
|         `-PointerType 0x558a387b2ac0 '__va_list_tag *'
|           `-RecordType 0x558a385902d0 '__va_list_tag'
|             `-CXXRecord 0x558a38590238 '__va_list_tag'
|-EnumDecl 0x558a38bced60 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x558a38bcee60 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a38bcf3c0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bcee40 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x558a38bcee20 <col:16> 'int' 1
| |-EnumConstantDecl 0x558a38bceef0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a38bcf3d8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bceed0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x558a38bceeb0 <col:21> 'int' 2
| |-EnumConstantDecl 0x558a38bcef80 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a38bcf3f0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bcef60 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x558a38bcef40 <col:22> 'int' 4
| |-EnumConstantDecl 0x558a38bcf010 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a38bcf408 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bceff0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x558a38bcefd0 <col:17> 'int' 8
| |-EnumConstantDecl 0x558a38bcf0a0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a38bcf420 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bcf080 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x558a38bcf060 <col:22> 'int' 16
| |-EnumConstantDecl 0x558a38bcf130 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a38bcf438 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bcf110 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558a38bcf0f0 <col:19> 'int' 32
| |-EnumConstantDecl 0x558a38bcf1c0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a38bcf450 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bcf1a0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x558a38bcf180 <col:17> 'int' 64
| |-EnumConstantDecl 0x558a38bcf250 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a38bcf468 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bcf230 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x558a38bcf210 <col:14> 'int' 128
| |-EnumConstantDecl 0x558a38bcf2e0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a38bcf480 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bcf2c0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x558a38bcf2a0 <col:16> 'int' 256
| `-EnumConstantDecl 0x558a38bcf370 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x558a38bcf498 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38bcf350 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x558a38bcf330 <col:12> 'int' 1024
|-CXXMethodDecl 0x558a38bcf6a8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x558a38bcf4c0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x558a38bcf560 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x558a38bcf830 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x558a38bcf768 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x558a38bcf8d8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x558a38bcf918 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x558a38bcf978 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x558a38bcf9f0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x558a38bcfdf0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x558a38bcfa68 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x558a38bcfae8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x558a38bcfb68 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x558a38bcfbe0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x558a38bcfc58 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x558a38bcfcd0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x558a38bcff18 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x558a38bcff18
| `-ParmVarDecl 0x558a38bd0028 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x558a38bd2198 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x558a38bd2198
  `-ParmVarDecl 0x558a38bd22a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38a74528 prev 0x558a38ab63b8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a38a74620 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x558a38a746b0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x558a38a747e8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x558a38a746e8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558a38a75c10 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558a38a75bf0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558a38a75788 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558a38a75ca0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558a38a75c60 <col:17> 'ErrorHandler *' lvalue ParmVar 0x558a38a746e8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558a38a757f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558a38a75d20 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558a38a75ce0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558a38a75850 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558a38a75d60 <col:54> 'bool' false
| `-CompoundStmt 0x558a38a75e68 <col:61, line:38:5>
|   `-BinaryOperator 0x558a38a75e48 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x558a38a75de0 <col:9> 'const Element *' lvalue ->_context 0x558a38a75728
|     | `-CXXThisExpr 0x558a38a75dd0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x558a38a75e30 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x558a38a75e10 <col:20> 'int' 0
|-CXXConstructorDecl 0x558a38a749f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558a38a748a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x558a38a74920 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558a38a75c48 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558a38a75c28 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x558a38a75728 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x558a38a75ec0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x558a38a75e80 <col:20> 'const Element *' lvalue ParmVar 0x558a38a748a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x558a38a75788 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558a38a75f40 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558a38a75f00 <col:36> 'ErrorHandler *' lvalue ParmVar 0x558a38a74920 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558a38a757f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558a38a75fc0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558a38a75f80 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x558a38a75850 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558a38a76000 <col:73> 'bool' false
| `-CompoundStmt 0x558a38a76078 <col:80, line:46:5>
|-CXXMethodDecl 0x558a38a74b28 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x558a38a760f0 <col:36, line:51:5>
|   `-ReturnStmt 0x558a38a760e0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x558a38a760c8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x558a38a76098 <col:16> 'const Element *const' lvalue ->_context 0x558a38a75728
|         `-CXXThisExpr 0x558a38a76088 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558a38a74c18 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x558a38a76170 <col:32, line:57:5>
|   `-ReturnStmt 0x558a38a76160 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x558a38a76148 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x558a38a76118 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x558a38a75788
|         `-CXXThisExpr 0x558a38a76108 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558a38a74cd8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x558a38a74e60 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x558a38a74d90 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558a38a74fb0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x558a38a74f20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558a38a75100 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x558a38a75070 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558a38a75308 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x558a38a751b8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x558a38a75230 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x558a38a75638 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x558a38a753c8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x558a38a75448 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x558a38a75510 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x558a38a756f0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x558a38a75728 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x558a38a75788 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x558a38a757f0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x558a38a75850 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x558a38a758a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x558a38a758a0
| `-ParmVarDecl 0x558a38a759b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x558a38a75a58 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x558a38a75a58
| `-ParmVarDecl 0x558a38a75b68 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x558a38bdf7f8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a38b86508 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x558a38b86718 prev 0x558a38b86508 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558a38b87730 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x558a38b876e0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x558a38b876c0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x558a38b87570 'type'
|     `-SubstTemplateTypeParmType 0x558a38b0a6c0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x558a38854fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a38854f58 'T'
|       `-RecordType 0x558a38b0a210 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x558a38b0a128 'sized_array_memory'
|-FieldDecl 0x558a38b87830 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x558a38b87880 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558a38b878b8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x558a38b867b0 'int' sugar
|   |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558a3888cc48 'T'
|   `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b87948 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x558a38b87910 'int &'
|   `-SubstTemplateTypeParmType 0x558a38b867b0 'int' sugar
|     |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a3888cc48 'T'
|     `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b87a08 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x558a38b879d0 'const int &'
|   `-QualType 0x558a38b867b1 'const int' const
|     `-SubstTemplateTypeParmType 0x558a38b867b0 'int' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b87a98 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x558a38b87a60 'int *'
|   `-SubstTemplateTypeParmType 0x558a38b867b0 'int' sugar
|     |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a3888cc48 'T'
|     `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b87b28 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x558a38b87af0 'const int *'
|   `-QualType 0x558a38b867b1 'const int' const
|     `-SubstTemplateTypeParmType 0x558a38b867b0 'int' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b93140 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x558a38b930f0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x558a38b930d0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x558a38b93060 'type'
|     `-SubstTemplateTypeParmType 0x558a38b883f0 'int' sugar
|       |-TemplateTypeParmType 0x558a3885fdb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3885fd60 'T'
|       `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b931a8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x558a38b879d0 'const int &'
|   `-QualType 0x558a38b867b1 'const int' const
|     `-SubstTemplateTypeParmType 0x558a38b867b0 'int' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b93200 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b93268 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x558a38b87a60 'int *'
|   `-SubstTemplateTypeParmType 0x558a38b867b0 'int' sugar
|     |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a3888cc48 'T'
|     `-BuiltinType 0x558a3858f580 'int'
|-TypedefDecl 0x558a38b932d0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x558a38b87af0 'const int *'
|   `-QualType 0x558a38b867b1 'const int' const
|     `-SubstTemplateTypeParmType 0x558a38b867b0 'int' sugar
|       |-TemplateTypeParmType 0x558a3888cca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a3888cc48 'T'
|       `-BuiltinType 0x558a3858f580 'int'
|-EnumDecl 0x558a38b93328 <line:134:5> col:5
| `-EnumConstantDecl 0x558a38b93420 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558a38b93400 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558a3888e328 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558a3888e300 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558a3888e2e0 <col:40> 'int' 1
|-CXXConstructorDecl 0x558a38b934a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558a38b936f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b93560 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a38b93600 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x558a38b939b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x558a38b938a0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x558a38b93c78 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x558a38b93b60 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x558a38b93fc0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x558a38b93ea0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x558a38b942d0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x558a38b941b0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x558a38b945c0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b94408 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a38b94480 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558a38b946e8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558a38b947c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b94820 <col:30> Inherited
|-CXXMethodDecl 0x558a38b94868 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558a38b94918 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b94970 <col:30> Inherited
|-CXXMethodDecl 0x558a38b94a38 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558a38b94ae8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b94b40 <col:30> Inherited
|-CXXMethodDecl 0x558a38b94b88 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558a38b94c38 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b94c90 <col:30> Inherited
|-CXXMethodDecl 0x558a38b94cd8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558a38b94d88 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b94de0 <col:30> Inherited
|-CXXMethodDecl 0x558a38b94e28 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558a38b94ed8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a38b94f30 <col:30> Inherited
|-CXXMethodDecl 0x558a38b94f58 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a38b95008 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a38b950b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558a38b95278 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b95168 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a38b951e0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558a38b953c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558a38b95338 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b95578 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x558a38b95480 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a38b95630 <col:20>
| `-OptimizeNoneAttr 0x558a38b95688 <col:30>
|-CXXMethodDecl 0x558a38b957a8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x558a38b956b0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a38b95860 <col:20>
| `-OptimizeNoneAttr 0x558a38b958b8 <col:30>
|-CXXMethodDecl 0x558a38b95970 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a38b958e0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b95ab8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a38b95a28 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b95be8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x558a38b95d18 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x558a38b95de8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x558a38b95eb8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x558a38b95ff8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a38b95f68 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b96140 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a38b960b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a38b96288 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x558a38b961f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a38b96340 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558a38b96440 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558a38b963b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a38b964f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558a38b965b8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x558a38b966b8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x558a38b96838 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558a38b96778 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x558a38b96ff8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558a38b968f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x558a38b96f58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x558a38b96e58 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x558a38b970d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558a38b97228 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558a38b97198 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558a38b972e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558a38b97528 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558a38b973a0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558a38b97418 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558a38b976e8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x558a38b975f8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558a38b97938 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x558a38b977b0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558a38b97828 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558a38b979f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558a38b97c58 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x558a38b97b60 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x558a38b97d28 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38b84678 prev 0x558a38b69d88 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a38b84770 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x558a38b84860 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x558a38ba98e0 <col:16, line:828:9>
|-CXXDestructorDecl 0x558a38b84950 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x558a38ba98f0 <col:25, line:830:9>
|-CXXMethodDecl 0x558a38b84a50 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x558a38b84b00 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x558a38b84ba8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558a38b84ba8
| `-ParmVarDecl 0x558a38b84cb8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x558a38b85478 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558a38b85478
  `-ParmVarDecl 0x558a38b85588 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38b69b98 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x558a38b69cf8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x558a38b69d88 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x558a38b69e40 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x558a38b69f48 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x558a38b69e78 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558a38b992e8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558a38b992c8 <col:31> 'int' 0
|-CXXConstructorDecl 0x558a38b6a268 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x558a38b6a0e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x558a38b6a158 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558a38b99320 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558a38b99300 <col:59> 'int' 0
|-CXXConstructorDecl 0x558a38b6a440 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558a38b6a330 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x558a38b6a3a8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558a38b99358 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558a38b99338 <col:55> 'int' 0
|-CXXConstructorDecl 0x558a38b6a7f8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558a38b6a5e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x558a38b6a658 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x558a38b6a6d0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558a38b99390 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558a38b99370 <col:31> 'int' 0
|-CXXConstructorDecl 0x558a38b6a9b8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x558a38b6a8f8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x558a38b6aab0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x558a38b6ac98 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x558a38b6aba0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x558a38b6ad88 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x558a38b99740 <col:24, line:291:5>
|   `-ReturnStmt 0x558a38b99730 <line:290:9, col:79>
|     `-BinaryOperator 0x558a38b99710 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x558a38b995e8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x558a38b99540 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x558a38b99520 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x558a38b99418 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x558a38b99400 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x558a38b993e8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x558a38b993b8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x558a38b864a0
|       | |   |       `-CXXThisExpr 0x558a38b993a8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x558a38b99508 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x558a38b994f0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x558a38b994b8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x558a38b99488 <col:28, col:35> '<bound member function type>' ->size 0x558a38b485d8
|       | |           `-ImplicitCastExpr 0x558a38b994d8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x558a38b99470 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x558a38b99440 <col:28> 'Vector<String> *const' lvalue ->_conf 0x558a38b864a0
|       | |                 `-CXXThisExpr 0x558a38b99430 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x558a38b995d0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x558a38b995b8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x558a38b995a0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x558a38b99570 <col:47> 'Args::Slot *const' lvalue ->_slots 0x558a38b97e70
|       |         `-CXXThisExpr 0x558a38b99560 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x558a38b996f0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x558a38b996d8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558a38b996c0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558a38b99680 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558a38b99668 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558a38b99618 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558a38b97f20
|         |     |   `-CXXThisExpr 0x558a38b99608 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558a38b99648 <col:73> 'int' 0
|         `-IntegerLiteral 0x558a38b996a0 <col:79> 'int' 0
|-CXXMethodDecl 0x558a38b6ae48 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x558a38b99918 <col:32, line:296:5>
|   `-ReturnStmt 0x558a38b99908 <line:295:9, col:49>
|     `-BinaryOperator 0x558a38b998e8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x558a38b997c8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x558a38b997b0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x558a38b99798 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x558a38b99768 <col:17> 'Args::Slot *const' lvalue ->_slots 0x558a38b97e70
|       |       `-CXXThisExpr 0x558a38b99758 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x558a38b998c8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x558a38b998b0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558a38b99898 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558a38b99858 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558a38b99840 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558a38b997f0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558a38b97f20
|         |     |   `-CXXThisExpr 0x558a38b997e0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558a38b99820 <col:43> 'int' 0
|         `-IntegerLiteral 0x558a38b99878 <col:49> 'int' 0
|-CXXMethodDecl 0x558a38b6af38 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x558a38b99b28 <col:19, line:306:5>
|   |-IfStmt 0x558a38b99a48 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x558a38b99988 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x558a38b99970 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x558a38b99940 <col:13> 'Vector<String> *' lvalue ->_conf 0x558a38b864a0
|   | |     `-CXXThisExpr 0x558a38b99930 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x558a38b99a28 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x558a38b999f8 <col:13, col:20> '<bound member function type>' ->clear 0x558a38b4b7e8
|   |     `-ImplicitCastExpr 0x558a38b999e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x558a38b999b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x558a38b864a0
|   |         `-CXXThisExpr 0x558a38b999a0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x558a38b99ad0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x558a38b99aa0 <col:9, col:16> '<bound member function type>' .clear 0x558a38b979f8
|   |   `-MemberExpr 0x558a38b99a70 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x558a38b97e10
|   |     `-CXXThisExpr 0x558a38b99a60 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x558a38b99b18 <line:305:9, col:17>
|     `-UnaryOperator 0x558a38b99b00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a38b99af0 <col:17> 'Args *' this
|-CXXMethodDecl 0x558a38b6b1b8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x558a38b6b0c0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x558a38b6b338 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x558a38b6b270 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x558a38b6b6b8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x558a38b6b3e0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x558a38b6b618 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x558a38b6b488 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x558a38b6b500 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x558a38b99e48 <col:67, line:327:5>
|     |-WhileStmt 0x558a38b99df8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x558a38b99c10 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x558a38b99b90 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x558a38aae888 0x558a388f7e68 0x558a388f7b40 0x558a388e8310 0x558a388e7fc0 0x558a388e78b0 0x558a388ba220 0x558a388476f0
|     | | |-DeclRefExpr 0x558a38b99b50 <col:16> 'Iter' lvalue ParmVar 0x558a38b6b488 'begin' 'Iter'
|     | | `-DeclRefExpr 0x558a38b99b70 <col:25> 'Iter' lvalue ParmVar 0x558a38b6b500 'end' 'Iter'
|     | `-CompoundStmt 0x558a38b99dd8 <col:30, line:325:9>
|     |   |-CallExpr 0x558a38b99d78 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x558a38b99c58 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x558a38b99d48 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x558a38b99cd8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|     |   |   `-DeclRefExpr 0x558a38b99cb8 <col:24> 'Iter' lvalue ParmVar 0x558a38b6b488 'begin' 'Iter'
|     |   `-UnaryOperator 0x558a38b99dc0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x558a38b99da0 <col:15> 'Iter' lvalue ParmVar 0x558a38b6b488 'begin' 'Iter'
|     `-ReturnStmt 0x558a38b99e38 <line:326:9, col:17>
|       `-UnaryOperator 0x558a38b99e20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b99e10 <col:17> 'Args *' this
|-CXXMethodDecl 0x558a38b6b7c0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x558a38b6b730 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x558a38b6b908 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x558a38b6b878 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x558a38b6b9d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x558a38b99f28 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x558a38b99ec8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x558a38b99e78 <col:9> '<bound member function type>' ->reset_from 0x558a38b98298
|   | | `-CXXThisExpr 0x558a38b99e68 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x558a38b99ea8 <col:20> 'int' 0
|   `-ReturnStmt 0x558a38b99f18 <line:352:9, col:17>
|     `-UnaryOperator 0x558a38b99f00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a38b99ef0 <col:17> 'Args *' this
|-VarDecl 0x558a38b6ba88 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x558a38b6baf0 <col:38> 'int' 1
|-VarDecl 0x558a38b6bb80 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x558a38b6bbe8 <col:39> 'int' 2
|-VarDecl 0x558a38b6bc78 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x558a38b6bce0 <col:39> 'int' 4
|-VarDecl 0x558a38b6bd70 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x558a38b6bdd8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x558a38b6c158 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x558a38b6be50 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x558a38b6c0b8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x558a38b6bf00 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558a38b6bfa8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x558a38b9a080 <col:43, line:371:5>
| |   `-ReturnStmt 0x558a38b9a070 <line:370:9, col:34>
| |     `-CallExpr 0x558a38b9a038 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558a38b99f58 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558a38b99fd8 <col:21> 'const char *' lvalue ParmVar 0x558a38b6bf00 'keyword' 'const char *'
| |       |-IntegerLiteral 0x558a38b99ff8 <col:30> 'int' 0
| |       `-DeclRefExpr 0x558a38b9a018 <col:33> 'T' lvalue ParmVar 0x558a38b6bfa8 'x' 'T &'
| `-CXXMethodDecl 0x558a38bf11f8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, Vector<IPAddress> &)'
|   |-TemplateArgument type 'Vector<IPAddress>'
|   |-ParmVarDecl 0x558a38bf1018 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x558a38bf10e8 <col:37, col:40> col:40 x 'Vector<IPAddress> &'
|-FunctionTemplateDecl 0x558a38b6c488 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x558a38b6c1c0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a38b6c3e8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558a38b6c270 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b6c318 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9a1d0 <col:45, line:375:5>
|     `-ReturnStmt 0x558a38b9a1c0 <line:374:9, col:42>
|       `-CallExpr 0x558a38b9a188 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9a0a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9a128 <col:21> 'const char *' lvalue ParmVar 0x558a38b6c270 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9a148 <col:30> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int'
|         `-DeclRefExpr 0x558a38b9a168 <col:41> 'T' lvalue ParmVar 0x558a38b6c318 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b6c7b8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x558a38b6c4f0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a38b6c718 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558a38b6c5a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b6c648 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9a320 <col:45, line:379:5>
|     `-ReturnStmt 0x558a38b9a310 <line:378:9, col:43>
|       `-CallExpr 0x558a38b9a2d8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9a1f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9a278 <col:21> 'const char *' lvalue ParmVar 0x558a38b6c5a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9a298 <col:30> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int'
|         `-DeclRefExpr 0x558a38b9a2b8 <col:42> 'T' lvalue ParmVar 0x558a38b6c648 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b6cae8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x558a38b6c820 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x558a38b6ca48 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x558a38b6c8d0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558a38b6c978 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x558a38b9a520 <col:46, line:383:5>
| |   `-ReturnStmt 0x558a38b9a510 <line:382:9, col:55>
| |     `-CallExpr 0x558a38b9a4d8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558a38b9a348 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558a38b9a3c8 <col:21> 'const char *' lvalue ParmVar 0x558a38b6c8d0 'keyword' 'const char *'
| |       |-BinaryOperator 0x558a38b9a498 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x558a38b9a448 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x558a38b9a428 <col:30> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x558a38b9a480 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x558a38b9a460 <col:42> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x558a38b9a4b8 <col:54> 'T' lvalue ParmVar 0x558a38b6c978 'x' 'T &'
| `-CXXMethodDecl 0x558a38bdfc88 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x558a38bdfaa8 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x558a38bdfb78 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x558a38b6cee8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x558a38b6cb50 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a38b6ce48 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x558a38b6cc00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b6cc80 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b6cd28 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9a660 <col:54, line:388:5>
|     |-CallExpr 0x558a38b9a5e8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a38b9a538 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558a38b9a578 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558a38b9a588 <col:30> 'const char *' lvalue ParmVar 0x558a38b6cc00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a38b9a5a8 <col:39> 'int' lvalue ParmVar 0x558a38b6cc80 'flags' 'int'
|     | `-DeclRefExpr 0x558a38b9a5c8 <col:46> 'T' lvalue ParmVar 0x558a38b6cd28 'x' 'T &'
|     `-ReturnStmt 0x558a38b9a650 <line:387:9, col:17>
|       `-UnaryOperator 0x558a38b9a638 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b9a628 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b6d398 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x558a38b6cf58 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a38b6cfd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a38b6d2f8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558a38b6d098 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b6d138 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x558a38b6d1d8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a38b9a7d0 <col:74, line:403:5>
|     `-ReturnStmt 0x558a38b9a7c0 <line:402:9, col:56>
|       `-CallExpr 0x558a38b9a780 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9a690 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9a700 <col:28> 'const char *' lvalue ParmVar 0x558a38b6d098 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a38b9a720 <col:37> 'int' 0
|         |-DeclRefExpr 0x558a38b9a740 <col:40> 'T' lvalue ParmVar 0x558a38b6d138 'x' 'T &'
|         `-DeclRefExpr 0x558a38b9a760 <col:43> 'const V' lvalue ParmVar 0x558a38b6d1d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558a38b6d808 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558a38b6d408 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a38b6d488 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a38b6d768 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558a38b6d548 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b6d5e8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x558a38b6d688 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a38b9a938 <col:76, line:407:5>
|     `-ReturnStmt 0x558a38b9a928 <line:406:9, col:65>
|       `-CallExpr 0x558a38b9a8e8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9a7f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9a868 <col:28> 'const char *' lvalue ParmVar 0x558a38b6d548 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9a888 <col:37> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int'
|         |-DeclRefExpr 0x558a38b9a8a8 <col:49> 'T' lvalue ParmVar 0x558a38b6d5e8 'x' 'T &'
|         `-DeclRefExpr 0x558a38b9a8c8 <col:52> 'const V' lvalue ParmVar 0x558a38b6d688 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558a38b6dd58 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x558a38b6d878 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a38b6d8f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a38b6dcb8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558a38b6d9b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b6da38 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b6dad8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x558a38b6db78 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a38b9aaa0 <col:85, line:412:5>
|     |-CallExpr 0x558a38b9aa20 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a38b9a950 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558a38b9a990 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558a38b9a9a0 <col:37> 'const char *' lvalue ParmVar 0x558a38b6d9b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a38b9a9c0 <col:46> 'int' lvalue ParmVar 0x558a38b6da38 'flags' 'int'
|     | |-DeclRefExpr 0x558a38b9a9e0 <col:53> 'T' lvalue ParmVar 0x558a38b6dad8 'x' 'T &'
|     | `-DeclRefExpr 0x558a38b9aa00 <col:56> 'const V' lvalue ParmVar 0x558a38b6db78 'default_value' 'const V &'
|     `-ReturnStmt 0x558a38b9aa90 <line:411:9, col:17>
|       `-UnaryOperator 0x558a38b9aa78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b9aa68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b6e1e8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x558a38b6ddd0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b6de48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b6e148 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a38b6df08 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b6df80 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b6e028 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9ac20 <col:53, line:425:5>
|     `-ReturnStmt 0x558a38b9ac10 <line:424:9, col:42>
|       `-CallExpr 0x558a38b9abd0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9aad0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9ab50 <col:21> 'const char *' lvalue ParmVar 0x558a38b6df08 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a38b9ab70 <col:30> 'int' 0
|         |-DeclRefExpr 0x558a38b9ab90 <col:33> 'P' lvalue ParmVar 0x558a38b6df80 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9abb0 <col:41> 'T' lvalue ParmVar 0x558a38b6e028 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b6e638 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x558a38b6e258 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b6e2d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b6e598 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a38b6e398 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b6e410 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b6e4b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9ad98 <col:55, line:429:5>
|     `-ReturnStmt 0x558a38b9ad88 <line:428:9, col:50>
|       `-CallExpr 0x558a38b9ad48 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9ac48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9acc8 <col:21> 'const char *' lvalue ParmVar 0x558a38b6e398 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9ace8 <col:30> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int'
|         |-DeclRefExpr 0x558a38b9ad08 <col:41> 'P' lvalue ParmVar 0x558a38b6e410 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9ad28 <col:49> 'T' lvalue ParmVar 0x558a38b6e4b8 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b6ea88 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x558a38b6e6a8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b6e728 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x558a38b6e9e8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x558a38b6e7e8 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558a38b6e860 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x558a38b6e908 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x558a38b9af10 <col:55, line:433:5>
| |   `-ReturnStmt 0x558a38b9af00 <line:432:9, col:51>
| |     `-CallExpr 0x558a38b9aec0 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558a38b9adc0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558a38b9ae40 <col:21> 'const char *' lvalue ParmVar 0x558a38b6e7e8 'keyword' 'const char *'
| |       |-DeclRefExpr 0x558a38b9ae60 <col:30> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int'
| |       |-DeclRefExpr 0x558a38b9ae80 <col:42> 'P' lvalue ParmVar 0x558a38b6e860 'parser' 'P'
| |       `-DeclRefExpr 0x558a38b9aea0 <col:50> 'T' lvalue ParmVar 0x558a38b6e908 'x' 'T &'
| `-CXXMethodDecl 0x558a38befe08 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, CheckIPHeader::OldBadSrcArg, Vector<IPAddress> &)'
|   |-TemplateArgument type 'CheckIPHeader::OldBadSrcArg'
|   |-TemplateArgument type 'Vector<IPAddress>'
|   |-ParmVarDecl 0x558a38befb70 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x558a38befc18 <col:39, col:41> col:41 parser 'CheckIPHeader::OldBadSrcArg':'CheckIPHeader::OldBadSrcArg'
|   `-ParmVarDecl 0x558a38befce8 <col:49, col:52> col:52 x 'Vector<IPAddress> &'
|-FunctionTemplateDecl 0x558a38b6eed8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x558a38b6eaf8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b6eb78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b6ee38 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a38b6ec38 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b6ecb0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b6ed58 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9cb70 <col:56, line:437:5>
|     `-ReturnStmt 0x558a38b9cb60 <line:436:9, col:63>
|       `-CallExpr 0x558a38b9cb20 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9c970 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9c9f0 <col:21> 'const char *' lvalue ParmVar 0x558a38b6ec38 'keyword' 'const char *'
|         |-BinaryOperator 0x558a38b9cac0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558a38b9ca70 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558a38b9ca50 <col:30> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558a38b9caa8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558a38b9ca88 <col:42> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558a38b9cae0 <col:54> 'P' lvalue ParmVar 0x558a38b6ecb0 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9cb00 <col:62> 'T' lvalue ParmVar 0x558a38b6ed58 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b736b8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x558a38b731f8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b73278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b73618 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a38b73338 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b733b8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b73430 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b734d8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9ccd8 <col:64, line:442:5>
|     |-CallExpr 0x558a38b9cc58 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a38b9cb88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558a38b9cbc8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558a38b9cbd8 <col:30> 'const char *' lvalue ParmVar 0x558a38b73338 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a38b9cbf8 <col:39> 'int' lvalue ParmVar 0x558a38b733b8 'flags' 'int'
|     | |-DeclRefExpr 0x558a38b9cc18 <col:46> 'P' lvalue ParmVar 0x558a38b73430 'parser' 'P'
|     | `-DeclRefExpr 0x558a38b9cc38 <col:54> 'T' lvalue ParmVar 0x558a38b734d8 'x' 'T &'
|     `-ReturnStmt 0x558a38b9ccc8 <line:441:9, col:17>
|       `-UnaryOperator 0x558a38b9ccb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b9cca0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b73cb8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x558a38b73730 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b737a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558a38b73828 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558a38b73c18 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558a38b738f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b73968 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b73a08 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x558a38b73ad8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a38b9ce70 <col:84, line:458:5>
|     `-ReturnStmt 0x558a38b9ce60 <line:457:9, col:64>
|       `-CallExpr 0x558a38b9ce18 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9cd08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9cd78 <col:28> 'const char *' lvalue ParmVar 0x558a38b738f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a38b9cd98 <col:37> 'int' 0
|         |-DeclRefExpr 0x558a38b9cdb8 <col:40> 'P' lvalue ParmVar 0x558a38b73968 'parser' 'P'
|         |-DeclRefExpr 0x558a38b9cdd8 <col:48> 'T' lvalue ParmVar 0x558a38b73a08 'x' 'T &'
|         `-DeclRefExpr 0x558a38b9cdf8 <col:51> 'const V' lvalue ParmVar 0x558a38b73ad8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558a38b74238 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558a38b73d30 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b73da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558a38b73e28 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558a38b74198 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558a38b73ef0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b73f68 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b74008 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x558a38b740a8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a38b9d000 <col:86, line:462:5>
|     `-ReturnStmt 0x558a38b9cff0 <line:461:9, col:73>
|       `-CallExpr 0x558a38b9cfa8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9ce98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9cf08 <col:28> 'const char *' lvalue ParmVar 0x558a38b73ef0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9cf28 <col:37> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int'
|         |-DeclRefExpr 0x558a38b9cf48 <col:49> 'P' lvalue ParmVar 0x558a38b73f68 'parser' 'P'
|         |-DeclRefExpr 0x558a38b9cf68 <col:57> 'T' lvalue ParmVar 0x558a38b74008 'x' 'T &'
|         `-DeclRefExpr 0x558a38b9cf88 <col:60> 'const V' lvalue ParmVar 0x558a38b740a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558a38b74898 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x558a38b742b0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b74328 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558a38b743a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558a38b747f8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558a38b74470 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b744f0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b74568 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b74608 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x558a38b746a8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a38b9d190 <col:95, line:467:5>
|     |-CallExpr 0x558a38b9d108 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a38b9d018 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558a38b9d058 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558a38b9d068 <col:37> 'const char *' lvalue ParmVar 0x558a38b74470 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a38b9d088 <col:46> 'int' lvalue ParmVar 0x558a38b744f0 'flags' 'int'
|     | |-DeclRefExpr 0x558a38b9d0a8 <col:53> 'P' lvalue ParmVar 0x558a38b74568 'parser' 'P'
|     | |-DeclRefExpr 0x558a38b9d0c8 <col:61> 'T' lvalue ParmVar 0x558a38b74608 'x' 'T &'
|     | `-DeclRefExpr 0x558a38b9d0e8 <col:64> 'const V' lvalue ParmVar 0x558a38b746a8 'default_value' 'const V &'
|     `-ReturnStmt 0x558a38b9d180 <line:466:9, col:17>
|       `-UnaryOperator 0x558a38b9d168 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b9d158 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b74e78 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x558a38b74918 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b74998 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a38b74a18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| |-CXXMethodDecl 0x558a38b74dd8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
| | |-ParmVarDecl 0x558a38b74ae0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558a38b74b58 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x558a38b74bf8 <col:47, col:51> col:51 referenced x1 'T1 &'
| | |-ParmVarDecl 0x558a38b74c98 <col:55, col:59> col:59 referenced x2 'T2 &'
| | `-CompoundStmt 0x558a38b9d338 <col:63, line:481:5>
| |   `-ReturnStmt 0x558a38b9d328 <line:480:9, col:47>
| |     `-CallExpr 0x558a38b9d2e0 <col:16, col:47> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558a38b9d1c0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558a38b9d240 <col:21> 'const char *' lvalue ParmVar 0x558a38b74ae0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x558a38b9d260 <col:30> 'int' 0
| |       |-DeclRefExpr 0x558a38b9d280 <col:33> 'P' lvalue ParmVar 0x558a38b74b58 'parser' 'P'
| |       |-DeclRefExpr 0x558a38b9d2a0 <col:41> 'T1' lvalue ParmVar 0x558a38b74bf8 'x1' 'T1 &'
| |       `-DeclRefExpr 0x558a38b9d2c0 <col:45> 'T2' lvalue ParmVar 0x558a38b74c98 'x2' 'T2 &'
| `-CXXMethodDecl 0x558a38bf0c08 <line:479:5, line:481:5> line:479:11 used read 'Args &(const char *, CheckIPHeader::InterfacesArg, Vector<IPAddress> &, Vector<IPAddress> &)'
|   |-TemplateArgument type 'CheckIPHeader::InterfacesArg'
|   |-TemplateArgument type 'Vector<IPAddress>'
|   |-TemplateArgument type 'Vector<IPAddress>'
|   |-ParmVarDecl 0x558a38bf0888 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x558a38bf0928 <col:37, col:39> col:39 parser 'CheckIPHeader::InterfacesArg':'CheckIPHeader::InterfacesArg'
|   |-ParmVarDecl 0x558a38bf09f8 <col:47, col:51> col:51 x1 'Vector<IPAddress> &'
|   `-ParmVarDecl 0x558a38bf0ac8 <col:55, col:59> col:59 x2 'Vector<IPAddress> &'
|-FunctionTemplateDecl 0x558a38b753f8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x558a38b74ef0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b74f68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a38b74fe8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a38b75358 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a38b750b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b75128 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b751c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558a38b75268 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558a38b9d4d8 <col:65, line:485:5>
|     `-ReturnStmt 0x558a38b9d4c8 <line:484:9, col:55>
|       `-CallExpr 0x558a38b9d480 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9d360 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9d3e0 <col:21> 'const char *' lvalue ParmVar 0x558a38b750b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9d400 <col:30> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int'
|         |-DeclRefExpr 0x558a38b9d420 <col:41> 'P' lvalue ParmVar 0x558a38b75128 'parser' 'P'
|         |-DeclRefExpr 0x558a38b9d440 <col:49> 'T1' lvalue ParmVar 0x558a38b751c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x558a38b9d460 <col:53> 'T2' lvalue ParmVar 0x558a38b75268 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558a38b75978 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x558a38b75470 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b754e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a38b75568 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a38b758d8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a38b75630 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b756a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b75748 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558a38b757e8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558a38b9d678 <col:65, line:489:5>
|     `-ReturnStmt 0x558a38b9d668 <line:488:9, col:56>
|       `-CallExpr 0x558a38b9d620 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9d500 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9d580 <col:21> 'const char *' lvalue ParmVar 0x558a38b75630 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9d5a0 <col:30> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int'
|         |-DeclRefExpr 0x558a38b9d5c0 <col:42> 'P' lvalue ParmVar 0x558a38b756a8 'parser' 'P'
|         |-DeclRefExpr 0x558a38b9d5e0 <col:50> 'T1' lvalue ParmVar 0x558a38b75748 'x1' 'T1 &'
|         `-DeclRefExpr 0x558a38b9d600 <col:54> 'T2' lvalue ParmVar 0x558a38b757e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558a38b75ef8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x558a38b759f0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b75a68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a38b75ae8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a38b75e58 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a38b75bb0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b75c28 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b75cc8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558a38b75d68 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x558a38b9d8c8 <col:66, line:493:5>
|     `-ReturnStmt 0x558a38b9d8b8 <line:492:9, col:68>
|       `-CallExpr 0x558a38b9d870 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9d6a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9d720 <col:21> 'const char *' lvalue ParmVar 0x558a38b75bb0 'keyword' 'const char *'
|         |-BinaryOperator 0x558a38b9d7f0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558a38b9d7a0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558a38b9d780 <col:30> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558a38b9d7d8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558a38b9d7b8 <col:42> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558a38b9d810 <col:54> 'P' lvalue ParmVar 0x558a38b75c28 'parser' 'P'
|         |-DeclRefExpr 0x558a38b9d830 <col:62> 'T1' lvalue ParmVar 0x558a38b75cc8 'x1' 'T1 &'
|         `-DeclRefExpr 0x558a38b9d850 <col:66> 'T2' lvalue ParmVar 0x558a38b75d68 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558a38b76558 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x558a38b75f70 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b75fe8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a38b76068 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a38b764b8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a38b76130 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b761b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b76228 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b762c8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558a38b76368 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x558a38b9da58 <col:74, line:498:5>
|     |-CallExpr 0x558a38b9d9d0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a38b9d8e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558a38b9d920 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558a38b9d930 <col:30> 'const char *' lvalue ParmVar 0x558a38b76130 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a38b9d950 <col:39> 'int' lvalue ParmVar 0x558a38b761b0 'flags' 'int'
|     | |-DeclRefExpr 0x558a38b9d970 <col:46> 'P' lvalue ParmVar 0x558a38b76228 'parser' 'P'
|     | |-DeclRefExpr 0x558a38b9d990 <col:54> 'T1' lvalue ParmVar 0x558a38b762c8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x558a38b9d9b0 <col:58> 'T2' lvalue ParmVar 0x558a38b76368 'x2' 'T2 &'
|     `-ReturnStmt 0x558a38b9da48 <line:497:9, col:17>
|       `-UnaryOperator 0x558a38b9da30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b9da20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b768b8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x558a38b765d8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a38b76818 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a38b76690 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b76708 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x558a38b9dba0 <col:52, line:509:5>
|     `-ReturnStmt 0x558a38b9db90 <line:508:9, col:44>
|       `-CallExpr 0x558a38b9db58 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9da88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9daf8 <col:26> 'const char *' lvalue ParmVar 0x558a38b76690 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a38b9db18 <col:35> 'int' 0
|         `-DeclRefExpr 0x558a38b9db38 <col:38> 'P' lvalue ParmVar 0x558a38b76708 'parser' 'P'
|-FunctionTemplateDecl 0x558a38b76bb8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x558a38b76920 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a38b76b18 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a38b769d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b76a48 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558a38b9dce0 <col:54, line:513:5>
|     `-ReturnStmt 0x558a38b9dcd0 <line:512:9, col:52>
|       `-CallExpr 0x558a38b9dc98 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9dbc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9dc38 <col:26> 'const char *' lvalue ParmVar 0x558a38b769d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9dc58 <col:35> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int'
|         `-DeclRefExpr 0x558a38b9dc78 <col:46> 'P' lvalue ParmVar 0x558a38b76a48 'parser' 'P'
|-FunctionTemplateDecl 0x558a38b76eb8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x558a38b76c20 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a38b76e18 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a38b76cd0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b76d48 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558a38b9de20 <col:54, line:517:5>
|     `-ReturnStmt 0x558a38b9de10 <line:516:9, col:53>
|       `-CallExpr 0x558a38b9ddd8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9dd08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9dd78 <col:26> 'const char *' lvalue ParmVar 0x558a38b76cd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9dd98 <col:35> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int'
|         `-DeclRefExpr 0x558a38b9ddb8 <col:47> 'P' lvalue ParmVar 0x558a38b76d48 'parser' 'P'
|-FunctionTemplateDecl 0x558a38b771b8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x558a38b76f20 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a38b77118 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a38b76fd0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b77048 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x558a38b9e010 <col:55, line:521:5>
|     `-ReturnStmt 0x558a38b9e000 <line:520:9, col:65>
|       `-CallExpr 0x558a38b9dfc8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9de48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9deb8 <col:26> 'const char *' lvalue ParmVar 0x558a38b76fd0 'keyword' 'const char *'
|         |-BinaryOperator 0x558a38b9df88 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x558a38b9df38 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558a38b9df18 <col:35> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558a38b9df70 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558a38b9df50 <col:47> 'const int' lvalue Var 0x558a38b6bb80 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x558a38b9dfa8 <col:59> 'P' lvalue ParmVar 0x558a38b77048 'parser' 'P'
|-FunctionTemplateDecl 0x558a38b77588 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x558a38b77220 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a38b774e8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558a38b772d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b77350 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b773c8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x558a38b9e150 <col:63, line:526:5>
|     |-CallExpr 0x558a38b9e0d8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a38b9e028 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x558a38b9e068 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x558a38b9e078 <col:35> 'const char *' lvalue ParmVar 0x558a38b772d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a38b9e098 <col:44> 'int' lvalue ParmVar 0x558a38b77350 'flags' 'int'
|     | `-DeclRefExpr 0x558a38b9e0b8 <col:51> 'P' lvalue ParmVar 0x558a38b773c8 'parser' 'P'
|     `-ReturnStmt 0x558a38b9e140 <line:525:9, col:17>
|       `-UnaryOperator 0x558a38b9e128 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b9e118 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b779d8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x558a38b775f8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b77678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b77938 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a38b77738 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b777b0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b77858 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9e2a8 <col:58, line:541:5>
|     `-ReturnStmt 0x558a38b9e298 <line:540:9, col:39>
|       `-CallExpr 0x558a38b9e260 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9e180 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9e200 <col:21> 'const char *' lvalue ParmVar 0x558a38b77738 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9e220 <col:30> 'P' lvalue ParmVar 0x558a38b777b0 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9e240 <col:38> 'T' lvalue ParmVar 0x558a38b77858 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b77e28 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x558a38b77a48 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b77ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b77d88 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a38b77b88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b77c00 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b77ca8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9e3e0 <col:60, line:545:5>
|     `-ReturnStmt 0x558a38b9e3d0 <line:544:9, col:41>
|       `-CallExpr 0x558a38b9e398 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9e2d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9e338 <col:23> 'const char *' lvalue ParmVar 0x558a38b77b88 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9e358 <col:32> 'P' lvalue ParmVar 0x558a38b77c00 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9e378 <col:40> 'T' lvalue ParmVar 0x558a38b77ca8 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b78278 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x558a38b77e98 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b77f18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b781d8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a38b77fd8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b78050 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b780f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9e518 <col:60, line:549:5>
|     `-ReturnStmt 0x558a38b9e508 <line:548:9, col:41>
|       `-CallExpr 0x558a38b9e4d0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9e408 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9e470 <col:23> 'const char *' lvalue ParmVar 0x558a38b77fd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9e490 <col:32> 'P' lvalue ParmVar 0x558a38b78050 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9e4b0 <col:40> 'T' lvalue ParmVar 0x558a38b780f8 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b786c8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x558a38b782e8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b78368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b78628 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a38b78428 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b784a0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b78548 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9e650 <col:61, line:553:5>
|     `-ReturnStmt 0x558a38b9e640 <line:552:9, col:42>
|       `-CallExpr 0x558a38b9e608 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9e540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9e5a8 <col:24> 'const char *' lvalue ParmVar 0x558a38b78428 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9e5c8 <col:33> 'P' lvalue ParmVar 0x558a38b784a0 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9e5e8 <col:41> 'T' lvalue ParmVar 0x558a38b78548 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b78ba8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x558a38b78738 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b787b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b78b08 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a38b78878 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b788f8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b78970 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b78a18 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9e7c8 <col:69, line:557:5>
|     `-ReturnStmt 0x558a38b9e7b8 <line:556:9, col:46>
|       `-CallExpr 0x558a38b9e778 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9e678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9e6f8 <col:21> 'const char *' lvalue ParmVar 0x558a38b78878 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9e718 <col:30> 'int' lvalue ParmVar 0x558a38b788f8 'flags' 'int'
|         |-DeclRefExpr 0x558a38b9e738 <col:37> 'P' lvalue ParmVar 0x558a38b78970 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9e758 <col:45> 'T' lvalue ParmVar 0x558a38b78a18 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b78eb8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x558a38b78c20 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a38b78e18 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a38b78cd0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b78d48 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x558a38b9e908 <col:56, line:571:5>
|     `-ReturnStmt 0x558a38b9e8f8 <line:570:9, col:48>
|       `-CallExpr 0x558a38b9e8c0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9e7f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9e860 <col:30> 'const char *' lvalue ParmVar 0x558a38b78cd0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a38b9e880 <col:39> 'int' 0
|         `-DeclRefExpr 0x558a38b9e8a0 <col:42> 'P' lvalue ParmVar 0x558a38b78d48 'parser' 'P'
|-FunctionTemplateDecl 0x558a38b79248 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x558a38b78f20 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a38b791a8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558a38b78fd0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b79050 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b790c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558a38b9ead8 <col:67, line:576:5>
|     |-CallExpr 0x558a38b9ea60 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a38b9e920 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558a38b9e960 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558a38b9e970 <col:39> 'const char *' lvalue ParmVar 0x558a38b78fd0 'keyword' 'const char *'
|     | |-BinaryOperator 0x558a38b9ea20 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558a38b9e9d0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558a38b9e990 <col:48> 'int' lvalue ParmVar 0x558a38b79050 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558a38b9ea08 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558a38b9e9e8 <col:56> 'const int' lvalue Var 0x558a38b6bd70 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x558a38b9ea40 <col:68> 'P' lvalue ParmVar 0x558a38b790c8 'parser' 'P'
|     `-ReturnStmt 0x558a38b9eac8 <line:575:9, col:17>
|       `-UnaryOperator 0x558a38b9eab0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b9eaa0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b79698 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x558a38b792b8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b79338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b795f8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a38b793f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b79470 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b79518 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9ec48 <col:62, line:592:5>
|     `-ReturnStmt 0x558a38b9ec38 <line:591:9, col:51>
|       `-CallExpr 0x558a38b9ebf8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9eb08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9eb78 <col:30> 'const char *' lvalue ParmVar 0x558a38b793f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a38b9eb98 <col:39> 'int' 0
|         |-DeclRefExpr 0x558a38b9ebb8 <col:42> 'P' lvalue ParmVar 0x558a38b79470 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9ebd8 <col:50> 'T' lvalue ParmVar 0x558a38b79518 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b79b78 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x558a38b79708 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b79788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b79ad8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a38b79848 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b798c8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b79940 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b799e8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9ee40 <col:73, line:597:5>
|     |-CallExpr 0x558a38b9edc0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a38b9ec60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558a38b9eca0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558a38b9ecb0 <col:39> 'const char *' lvalue ParmVar 0x558a38b79848 'keyword' 'const char *'
|     | |-BinaryOperator 0x558a38b9ed60 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558a38b9ed10 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558a38b9ecd0 <col:48> 'int' lvalue ParmVar 0x558a38b798c8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558a38b9ed48 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558a38b9ed28 <col:56> 'const int' lvalue Var 0x558a38b6bd70 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558a38b9ed80 <col:68> 'P' lvalue ParmVar 0x558a38b79940 'parser' 'P'
|     | `-DeclRefExpr 0x558a38b9eda0 <col:76> 'T' lvalue ParmVar 0x558a38b799e8 'x' 'T &'
|     `-ReturnStmt 0x558a38b9ee30 <line:596:9, col:17>
|       `-UnaryOperator 0x558a38b9ee18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b9ee08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b7a128 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x558a38b79bf0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b79c68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b7a088 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x558a38b79d28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b79da0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b79f60 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558a38b9efb0 <col:65, line:614:5>
|     `-ReturnStmt 0x558a38b9efa0 <line:613:9, col:46>
|       `-CallExpr 0x558a38b9ef60 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9ee70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9eee0 <col:25> 'const char *' lvalue ParmVar 0x558a38b79d28 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a38b9ef00 <col:34> 'int' 0
|         |-DeclRefExpr 0x558a38b9ef20 <col:37> 'P' lvalue ParmVar 0x558a38b79da0 'parser' 'P'
|         `-DeclRefExpr 0x558a38b9ef40 <col:45> 'Vector<T>' lvalue ParmVar 0x558a38b79f60 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558a38b7a558 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x558a38b7a198 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a38b7a4b8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x558a38b7a250 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b7a3a0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558a38b9f1d0 <col:55, line:618:5>
|     `-ReturnStmt 0x558a38b9f1c0 <line:617:9, col:55>
|       `-CallExpr 0x558a38b9f180 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9efd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9f048 <col:25> 'const char *' lvalue ParmVar 0x558a38b7a250 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a38b9f068 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x558a38b9f140 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558a38b9f160 <col:54> 'Vector<T>' lvalue ParmVar 0x558a38b7a3a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558a38b7ab28 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x558a38b7a5c0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b7a638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b7aa88 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558a38b7a6f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b7a778 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b7a7f0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b7a940 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558a38b9f3c8 <col:76, line:623:5>
|     |-CallExpr 0x558a38b9f348 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a38b9f1e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x558a38b9f228 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x558a38b9f238 <col:34> 'const char *' lvalue ParmVar 0x558a38b7a6f8 'keyword' 'const char *'
|     | |-BinaryOperator 0x558a38b9f2e8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x558a38b9f298 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558a38b9f258 <col:43> 'int' lvalue ParmVar 0x558a38b7a778 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558a38b9f2d0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558a38b9f2b0 <col:51> 'const int' lvalue Var 0x558a38b6bd70 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558a38b9f308 <col:63> 'P' lvalue ParmVar 0x558a38b7a7f0 'parser' 'P'
|     | `-DeclRefExpr 0x558a38b9f328 <col:71> 'Vector<T>' lvalue ParmVar 0x558a38b7a940 'x' 'Vector<T> &'
|     `-ReturnStmt 0x558a38b9f3b8 <line:622:9, col:17>
|       `-UnaryOperator 0x558a38b9f3a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38b9f390 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b7b068 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x558a38b7aba0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b7ac18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b7afc8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x558a38b7acd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b7ad58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b7aea0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558a38b9f630 <col:66, line:627:5>
|     `-ReturnStmt 0x558a38b9f620 <line:626:9, col:59>
|       `-CallExpr 0x558a38b9f5e0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a38b9f3f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a38b9f468 <col:25> 'const char *' lvalue ParmVar 0x558a38b7acd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a38b9f488 <col:34> 'int' lvalue ParmVar 0x558a38b7ad58 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x558a38b9f5a0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558a38b9f5c0 <col:58> 'Vector<T>' lvalue ParmVar 0x558a38b7aea0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x558a38b7b0f8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x558a38b9f6b0 <col:25, line:633:5>
|   `-ReturnStmt 0x558a38b9f6a0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x558a38b9f688 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558a38b9f658 <col:16> 'const bool' lvalue ->_status 0x558a38b86308
|         `-CXXThisExpr 0x558a38b9f648 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558a38b80648 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x558a38b80580 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x558a38b9f798 <col:27, line:639:5>
|   |-BinaryOperator 0x558a38b9f740 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558a38b9f6c8 <col:9> 'bool' lvalue ParmVar 0x558a38b80580 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558a38b9f728 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558a38b9f6f8 <col:13> 'bool' lvalue ->_status 0x558a38b86308
|   |     `-CXXThisExpr 0x558a38b9f6e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558a38b9f788 <line:638:9, col:17>
|     `-UnaryOperator 0x558a38b9f770 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a38b9f760 <col:17> 'Args *' this
|-CXXMethodDecl 0x558a38b807c8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558a38b80708 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x558a38b9f888 <col:39, line:644:5>
|   |-BinaryOperator 0x558a38b9f830 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558a38b9f7b8 <col:9> 'bool' lvalue ParmVar 0x558a38b80708 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558a38b9f818 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558a38b9f7e8 <col:13> 'const bool' lvalue ->_status 0x558a38b86308
|   |     `-CXXThisExpr 0x558a38b9f7d8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558a38b9f878 <line:643:9, col:17>
|     `-UnaryOperator 0x558a38b9f860 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a38b9f850 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558a38b80890 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x558a38b9f930 <col:30, line:651:5>
|   `-ReturnStmt 0x558a38b9f920 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x558a38b9f908 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558a38b9f8d8 <col:16> 'bool' lvalue ->_read_status 0x558a38a75850
|         `-ImplicitCastExpr 0x558a38b9f8b8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x558a38b9f8a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558a38b809d8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x558a38b80948 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x558a38b9fa38 <col:32, line:658:5>
|   |-BinaryOperator 0x558a38b9f9e0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558a38b9f948 <col:9> 'bool' lvalue ParmVar 0x558a38b80948 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558a38b9f9c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558a38b9f998 <col:13> 'bool' lvalue ->_read_status 0x558a38a75850
|   |     `-ImplicitCastExpr 0x558a38b9f978 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558a38b9f968 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558a38b9fa28 <line:657:9, col:17>
|     `-UnaryOperator 0x558a38b9fa10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a38b9fa00 <col:17> 'Args *' this
|-CXXMethodDecl 0x558a38b80b28 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558a38b80a98 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x558a38b9fb48 <col:44, line:663:5>
|   |-BinaryOperator 0x558a38b9faf0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558a38b9fa58 <col:9> 'bool' lvalue ParmVar 0x558a38b80a98 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558a38b9fad8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558a38b9faa8 <col:13> 'bool' lvalue ->_read_status 0x558a38a75850
|   |     `-ImplicitCastExpr 0x558a38b9fa88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558a38b9fa78 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558a38b9fb38 <line:662:9, col:17>
|     `-UnaryOperator 0x558a38b9fb20 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a38b9fb10 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558a38b80bf0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x558a38b80cb8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x558a38b80d80 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x558a38b80e48 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x558a38b81158 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x558a38b80ee8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a38b810b8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x558a38b80fc8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x558a38b9ff00 <col:19, line:706:5>
|     `-IfStmt 0x558a38b9fed8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x558a38b9fc48 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x558a38b9fe08 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x558a38b9fdd8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x558a38b9fd98 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x558a38b9fca0 <col:42> '<bound member function type>' ->simple_slot 0x558a38b98f50
|       |     | `-CXXThisExpr 0x558a38b9fc90 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x558a38b9fd38 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x558a38b9fcf0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x558a388fc908
|       |     | `-DeclRefExpr 0x558a38b9fcd0 <col:55> 'T' lvalue ParmVar 0x558a38b80fc8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x558a38b9fd78 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x558a38b9fec8 <line:705:13, col:34>
|         `-CallExpr 0x558a38b9fea0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x558a38b9fe28 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x558a38b9fe80 <col:33> 'T' lvalue ParmVar 0x558a38b80fc8 'x' 'T &'
|-FunctionTemplateDecl 0x558a38b81428 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x558a38b811b8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a38b81388 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x558a38b81298 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x558a38ba02e0 <col:31, line:717:5>
|     |-DeclStmt 0x558a38ba0040 <line:713:9, col:23>
|     | `-VarDecl 0x558a38b9ff28 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x558a38ba0018 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558a38b9ffa0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558a38b9fff8 <col:21> 'T' lvalue ParmVar 0x558a38b81298 'x' 'T &'
|     |-IfStmt 0x558a38ba0290 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x558a38ba0138 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x558a38ba0270 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558a38ba0210 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558a38ba01a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|     |   | `-DeclRefExpr 0x558a38ba0180 <col:14> 'T *' lvalue Var 0x558a38b9ff28 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x558a38ba0250 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x558a38ba02c8 <line:716:9, col:16>
|       `-DeclRefExpr 0x558a38ba02a8 <col:16> 'T *' lvalue Var 0x558a38b9ff28 's' 'T *'
|-FunctionTemplateDecl 0x558a38b81838 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x558a38b81488 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a38b81508 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a38b81798 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x558a38b815e8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x558a38b81688 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x558a38ba05f0 <col:37, line:726:5>
|     |-IfStmt 0x558a38ba0580 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x558a38ba05a0 <line:723:13, col:26>
|     | | `-VarDecl 0x558a38ba0348 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x558a38ba0438 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x558a38ba03c0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x558a38ba0418 <col:25> 'T' lvalue ParmVar 0x558a38b815e8 'x' 'T &'
|     | |-DeclRefExpr 0x558a38ba0460 <col:16> 'T *' lvalue Var 0x558a38ba0348 's' 'T *'
|     | `-BinaryOperator 0x558a38ba0560 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558a38ba0510 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558a38ba04a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|     |   | `-DeclRefExpr 0x558a38ba0480 <col:14> 'T *' lvalue Var 0x558a38ba0348 's' 'T *'
|     |   `-DeclRefExpr 0x558a38ba0540 <col:18> 'const V' lvalue ParmVar 0x558a38b81688 'value' 'const V &'
|     `-ReturnStmt 0x558a38ba05e0 <line:725:9, col:17>
|       `-UnaryOperator 0x558a38ba05c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a38ba05b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a38b81c38 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x558a38b818a0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a38b81b98 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x558a38b81950 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b819d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b81a78 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x558a38ba1410 <col:65, line:737:5>
|     |-DeclStmt 0x558a38ba0688 <line:732:9, col:26>
|     | `-VarDecl 0x558a38ba0620 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558a38ba13d8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x558a38ba13f8 <line:733:13, col:58>
|       | `-VarDecl 0x558a38ba06b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558a38ba0890 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558a38ba0860 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558a38ba0848 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558a38ba0828 <col:26, col:58> 'String' (CXXTemporary 0x558a38ba0828)
|       |           `-CXXMemberCallExpr 0x558a38ba07b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558a38ba0728 <col:26> '<bound member function type>' ->find 0x558a38b98568
|       |             | `-CXXThisExpr 0x558a38ba0718 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558a38ba07f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a38ba0758 <col:31> 'const char *' lvalue ParmVar 0x558a38b81950 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558a38ba0808 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a38ba0778 <col:40> 'int' lvalue ParmVar 0x558a38b819d0 'flags' 'int'
|       |             `-DeclRefExpr 0x558a38ba0798 <col:47> 'Args::Slot *' lvalue Var 0x558a38ba0620 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558a38ba0948 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a38ba0930 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a38ba0910 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a38ba08e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|       |       `-ImplicitCastExpr 0x558a38ba08c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558a38ba08a8 <col:20> 'String' lvalue Var 0x558a38ba06b0 'str' 'String'
|       `-CompoundStmt 0x558a38ba13b8 <col:61, line:736:9>
|         |-DeclStmt 0x558a38ba0e00 <line:734:13, col:76>
|         | `-VarDecl 0x558a38ba0998 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558a38ba0dd0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558a38ba0d40 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558a38ba0d88 <col:60> 'T' lvalue ParmVar 0x558a38b81a78 'variable' 'T &'
|         |     `-UnaryOperator 0x558a38ba0db8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558a38ba0da8 <col:71> 'Args *' this
|         `-CallExpr 0x558a38ba1388 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x558a38ba0e28 <col:13> '<bound member function type>' ->postparse 0x558a38b98778
|           | `-CXXThisExpr 0x558a38ba0e18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558a38ba1348 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558a38ba0e58 <col:23> 'T *' lvalue Var 0x558a38ba0998 's' 'T *'
|           | `-CallExpr 0x558a38ba1308 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558a38ba10e0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x558a38ba11e0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x558a38ba1200 <col:86> 'String' lvalue Var 0x558a38ba06b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558a38ba12b0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558a38ba1240 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|           |   | `-DeclRefExpr 0x558a38ba1220 <col:92> 'T *' lvalue Var 0x558a38ba0998 's' 'T *'
|           |   `-UnaryOperator 0x558a38ba12f0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558a38ba12e0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x558a38ba1368 <col:103> 'Args::Slot *' lvalue Var 0x558a38ba0620 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a38b82188 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558a38b81ca8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a38b81d28 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a38b820e8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558a38b81de8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b81e68 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b81f08 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x558a38b81fa8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x558a38ba22b0 <col:88, line:745:5>
|     |-DeclStmt 0x558a38ba14a8 <line:741:9, col:26>
|     | `-VarDecl 0x558a38ba1440 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a38ba16c8 <line:742:9, col:55>
|     | `-VarDecl 0x558a38ba14d0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558a38ba16b0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558a38ba1680 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558a38ba1668 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558a38ba1648 <col:22, col:54> 'String' (CXXTemporary 0x558a38ba1648)
|     |           `-CXXMemberCallExpr 0x558a38ba15d8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558a38ba1548 <col:22> '<bound member function type>' ->find 0x558a38b98568
|     |             | `-CXXThisExpr 0x558a38ba1538 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558a38ba1610 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558a38ba1578 <col:27> 'const char *' lvalue ParmVar 0x558a38b81de8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558a38ba1628 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558a38ba1598 <col:36> 'int' lvalue ParmVar 0x558a38b81e68 'flags' 'int'
|     |             `-DeclRefExpr 0x558a38ba15b8 <col:43> 'Args::Slot *' lvalue Var 0x558a38ba1440 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558a38ba1aa0 <line:743:9, col:72>
|     | `-VarDecl 0x558a38ba1718 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558a38ba1a70 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558a38ba19e0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558a38ba1a28 <col:56> 'T' lvalue ParmVar 0x558a38b81f08 'variable' 'T &'
|     |     `-UnaryOperator 0x558a38ba1a58 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558a38ba1a48 <col:67> 'Args *' this
|     `-CallExpr 0x558a38ba2280 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x558a38ba1ac8 <col:9> '<bound member function type>' ->postparse 0x558a38b98778
|       | `-CXXThisExpr 0x558a38ba1ab8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558a38ba2240 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558a38ba1af8 <col:19> 'T *' lvalue Var 0x558a38ba1718 's' 'T *'
|       | `-ParenExpr 0x558a38ba2220 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x558a38ba21f0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558a38ba21d8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558a38ba21c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558a38ba21a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558a38ba2170 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|       |     |       `-ImplicitCastExpr 0x558a38ba2158 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558a38ba1b18 <col:25> 'String' lvalue Var 0x558a38ba14d0 'str' 'String'
|       |     |-CallExpr 0x558a38ba1fc8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558a38ba1da0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x558a38ba1ea0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x558a38ba1ec0 <col:89> 'String' lvalue Var 0x558a38ba14d0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558a38ba1f70 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558a38ba1f00 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|       |     | | `-DeclRefExpr 0x558a38ba1ee0 <col:95> 'T *' lvalue Var 0x558a38ba1718 's' 'T *'
|       |     | `-UnaryOperator 0x558a38ba1fb0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558a38ba1fa0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x558a38ba2138 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x558a38ba2118 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x558a38ba20e8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558a38ba2098 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558a38ba2028 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|       |         | | `-DeclRefExpr 0x558a38ba2008 <col:109> 'T *' lvalue Var 0x558a38ba1718 's' 'T *'
|       |         | `-DeclRefExpr 0x558a38ba20c8 <col:113> 'const V' lvalue ParmVar 0x558a38b81fa8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558a38ba2108 <col:120> 'bool' true
|       `-DeclRefExpr 0x558a38ba2260 <col:128> 'Args::Slot *' lvalue Var 0x558a38ba1440 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a38b826b8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x558a38b82200 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b82278 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b82618 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a38b82338 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b823b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b82430 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b824d8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x558a38ba2ea8 <col:75, line:754:5>
|     |-DeclStmt 0x558a38ba2358 <line:749:9, col:26>
|     | `-VarDecl 0x558a38ba22f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558a38ba2e70 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x558a38ba2e90 <line:750:13, col:58>
|       | `-VarDecl 0x558a38ba2380 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558a38ba2560 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558a38ba2530 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558a38ba2518 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558a38ba24f8 <col:26, col:58> 'String' (CXXTemporary 0x558a38ba24f8)
|       |           `-CXXMemberCallExpr 0x558a38ba2488 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558a38ba23f8 <col:26> '<bound member function type>' ->find 0x558a38b98568
|       |             | `-CXXThisExpr 0x558a38ba23e8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558a38ba24c0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a38ba2428 <col:31> 'const char *' lvalue ParmVar 0x558a38b82338 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558a38ba24d8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a38ba2448 <col:40> 'int' lvalue ParmVar 0x558a38b823b8 'flags' 'int'
|       |             `-DeclRefExpr 0x558a38ba2468 <col:47> 'Args::Slot *' lvalue Var 0x558a38ba22f0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558a38ba2618 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a38ba2600 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a38ba25e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a38ba25b0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|       |       `-ImplicitCastExpr 0x558a38ba2598 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558a38ba2578 <col:20> 'String' lvalue Var 0x558a38ba2380 'str' 'String'
|       `-CompoundStmt 0x558a38ba2e50 <col:61, line:753:9>
|         |-DeclStmt 0x558a38ba29f0 <line:751:13, col:63>
|         | `-VarDecl 0x558a38ba2668 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558a38ba29c0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558a38ba2930 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558a38ba2978 <col:47> 'T' lvalue ParmVar 0x558a38b824d8 'variable' 'T &'
|         |     `-UnaryOperator 0x558a38ba29a8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558a38ba2998 <col:58> 'Args *' this
|         `-CallExpr 0x558a38ba2e20 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x558a38ba2a18 <col:13> '<bound member function type>' ->postparse 0x558a38b98778
|           | `-CXXThisExpr 0x558a38ba2a08 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558a38ba2de0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558a38ba2a48 <col:23> 'T *' lvalue Var 0x558a38ba2668 's' 'T *'
|           | `-CallExpr 0x558a38ba2da0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558a38ba2c30 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558a38ba2c78 <col:56> 'P' lvalue ParmVar 0x558a38b82430 'parser' 'P'
|           |   |-DeclRefExpr 0x558a38ba2c98 <col:64> 'String' lvalue Var 0x558a38ba2380 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558a38ba2d48 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558a38ba2cd8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|           |   | `-DeclRefExpr 0x558a38ba2cb8 <col:70> 'T *' lvalue Var 0x558a38ba2668 's' 'T *'
|           |   `-UnaryOperator 0x558a38ba2d88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558a38ba2d78 <col:74> 'Args *' this
|           `-DeclRefExpr 0x558a38ba2e00 <col:81> 'Args::Slot *' lvalue Var 0x558a38ba22f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a38b82d18 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558a38b82730 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a38b827a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x558a38b82828 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558a38b82c78 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558a38b828f0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b82970 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b829e8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b82a88 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x558a38b82b28 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x558a38ba3c38 <col:98, line:762:5>
|     |-DeclStmt 0x558a38ba2f40 <line:758:9, col:26>
|     | `-VarDecl 0x558a38ba2ed8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a38ba3160 <line:759:9, col:55>
|     | `-VarDecl 0x558a38ba2f68 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558a38ba3148 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558a38ba3118 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558a38ba3100 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558a38ba30e0 <col:22, col:54> 'String' (CXXTemporary 0x558a38ba30e0)
|     |           `-CXXMemberCallExpr 0x558a38ba3070 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558a38ba2fe0 <col:22> '<bound member function type>' ->find 0x558a38b98568
|     |             | `-CXXThisExpr 0x558a38ba2fd0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558a38ba30a8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558a38ba3010 <col:27> 'const char *' lvalue ParmVar 0x558a38b828f0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558a38ba30c0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558a38ba3030 <col:36> 'int' lvalue ParmVar 0x558a38b82970 'flags' 'int'
|     |             `-DeclRefExpr 0x558a38ba3050 <col:43> 'Args::Slot *' lvalue Var 0x558a38ba2ed8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558a38ba3580 <line:760:9, col:59>
|     | `-VarDecl 0x558a38ba31b8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558a38ba3550 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558a38ba34c0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558a38ba3508 <col:43> 'T' lvalue ParmVar 0x558a38b82a88 'variable' 'T &'
|     |     `-UnaryOperator 0x558a38ba3538 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558a38ba3528 <col:54> 'Args *' this
|     `-CallExpr 0x558a38ba3c08 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x558a38ba35a8 <col:9> '<bound member function type>' ->postparse 0x558a38b98778
|       | `-CXXThisExpr 0x558a38ba3598 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558a38ba3bc8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558a38ba35d8 <col:19> 'T *' lvalue Var 0x558a38ba31b8 's' 'T *'
|       | `-ParenExpr 0x558a38ba3ba8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x558a38ba3b78 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558a38ba3b60 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558a38ba3b48 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558a38ba3b28 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558a38ba3af8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|       |     |       `-ImplicitCastExpr 0x558a38ba3ae0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558a38ba35f8 <col:25> 'String' lvalue Var 0x558a38ba2f68 'str' 'String'
|       |     |-CallExpr 0x558a38ba3950 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558a38ba37e0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x558a38ba3828 <col:59> 'P' lvalue ParmVar 0x558a38b829e8 'parser' 'P'
|       |     | |-DeclRefExpr 0x558a38ba3848 <col:67> 'String' lvalue Var 0x558a38ba2f68 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558a38ba38f8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558a38ba3888 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|       |     | | `-DeclRefExpr 0x558a38ba3868 <col:73> 'T *' lvalue Var 0x558a38ba31b8 's' 'T *'
|       |     | `-UnaryOperator 0x558a38ba3938 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558a38ba3928 <col:77> 'Args *' this
|       |     `-ParenExpr 0x558a38ba3ac0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x558a38ba3aa0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x558a38ba3a70 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558a38ba3a20 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558a38ba39b0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|       |         | | `-DeclRefExpr 0x558a38ba3990 <col:87> 'T *' lvalue Var 0x558a38ba31b8 's' 'T *'
|       |         | `-DeclRefExpr 0x558a38ba3a50 <col:91> 'const V' lvalue ParmVar 0x558a38b82b28 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558a38ba3a90 <col:98> 'bool' true
|       `-DeclRefExpr 0x558a38ba3be8 <col:106> 'Args::Slot *' lvalue Var 0x558a38ba2ed8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a38b83388 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x558a38b82d98 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b82e18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a38b82e98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a38b832e8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a38b82f60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b82fe0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b83058 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b830f8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x558a38b83198 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x558a38ba6c80 <col:60, line:773:5>
|     |-DeclStmt 0x558a38ba3ce0 <line:767:9, col:26>
|     | `-VarDecl 0x558a38ba3c78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558a38ba6c48 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x558a38ba6c68 <line:768:13, col:58>
|       | `-VarDecl 0x558a38ba3d08 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558a38ba3ee8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558a38ba3eb8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558a38ba3ea0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558a38ba3e80 <col:26, col:58> 'String' (CXXTemporary 0x558a38ba3e80)
|       |           `-CXXMemberCallExpr 0x558a38ba3e10 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558a38ba3d80 <col:26> '<bound member function type>' ->find 0x558a38b98568
|       |             | `-CXXThisExpr 0x558a38ba3d70 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558a38ba3e48 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a38ba3db0 <col:31> 'const char *' lvalue ParmVar 0x558a38b82f60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558a38ba3e60 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a38ba3dd0 <col:40> 'int' lvalue ParmVar 0x558a38b82fe0 'flags' 'int'
|       |             `-DeclRefExpr 0x558a38ba3df0 <col:47> 'Args::Slot *' lvalue Var 0x558a38ba3c78 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558a38ba3fa0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a38ba3f88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a38ba3f68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a38ba3f38 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|       |       `-ImplicitCastExpr 0x558a38ba3f20 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558a38ba3f00 <col:20> 'String' lvalue Var 0x558a38ba3d08 'str' 'String'
|       `-CompoundStmt 0x558a38ba6c20 <col:61, line:772:9>
|         |-DeclStmt 0x558a38ba42e0 <line:769:13, col:66>
|         | `-VarDecl 0x558a38ba3ff8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x558a38ba42b0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558a38ba4220 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558a38ba4268 <col:49> 'T1' lvalue ParmVar 0x558a38b830f8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x558a38ba4298 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558a38ba4288 <col:61> 'Args *' this
|         |-DeclStmt 0x558a38ba4650 <line:770:13, col:66>
|         | `-VarDecl 0x558a38ba4368 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x558a38ba4620 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558a38ba4590 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558a38ba45d8 <col:49> 'T2' lvalue ParmVar 0x558a38b83198 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x558a38ba4608 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558a38ba45f8 <col:61> 'Args *' this
|         `-CallExpr 0x558a38ba6bf0 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x558a38ba4678 <col:13> '<bound member function type>' ->postparse 0x558a38b98778
|           | `-CXXThisExpr 0x558a38ba4668 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558a38ba6bb0 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x558a38ba46e8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x558a38ba46a8 <col:23> 'T1 *' lvalue Var 0x558a38ba3ff8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x558a38ba46c8 <col:29> 'T2 *' lvalue Var 0x558a38ba4368 's2' 'T2 *'
|           | `-CallExpr 0x558a38ba6b68 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558a38ba48d0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558a38ba4918 <col:63> 'P' lvalue ParmVar 0x558a38b83058 'parser' 'P'
|           |   |-DeclRefExpr 0x558a38ba4938 <col:71> 'String' lvalue Var 0x558a38ba3d08 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558a38ba6a50 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558a38ba69e0 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|           |   | `-DeclRefExpr 0x558a38ba69c0 <col:77> 'T1 *' lvalue Var 0x558a38ba3ff8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x558a38ba6b10 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558a38ba6aa0 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|           |   | `-DeclRefExpr 0x558a38ba6a80 <col:82> 'T2 *' lvalue Var 0x558a38ba4368 's2' 'T2 *'
|           |   `-UnaryOperator 0x558a38ba6b50 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558a38ba6b40 <col:87> 'Args *' this
|           `-DeclRefExpr 0x558a38ba6bd0 <col:94> 'Args::Slot *' lvalue Var 0x558a38ba3c78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a38b83778 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x558a38b83408 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a38b836d8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558a38b834c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b83540 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b835b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558a38ba7198 <col:67, line:780:5>
|     |-DeclStmt 0x558a38ba6d18 <line:777:9, col:26>
|     | `-VarDecl 0x558a38ba6cb0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558a38ba7160 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x558a38ba7180 <line:778:13, col:58>
|       | `-VarDecl 0x558a38ba6d40 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558a38ba6f20 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558a38ba6ef0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558a38ba6ed8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558a38ba6eb8 <col:26, col:58> 'String' (CXXTemporary 0x558a38ba6eb8)
|       |           `-CXXMemberCallExpr 0x558a38ba6e48 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558a38ba6db8 <col:26> '<bound member function type>' ->find 0x558a38b98568
|       |             | `-CXXThisExpr 0x558a38ba6da8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558a38ba6e80 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a38ba6de8 <col:31> 'const char *' lvalue ParmVar 0x558a38b834c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558a38ba6e98 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a38ba6e08 <col:40> 'int' lvalue ParmVar 0x558a38b83540 'flags' 'int'
|       |             `-DeclRefExpr 0x558a38ba6e28 <col:47> 'Args::Slot *' lvalue Var 0x558a38ba6cb0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558a38ba6fd8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a38ba6fc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a38ba6fa0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a38ba6f70 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|       |       `-ImplicitCastExpr 0x558a38ba6f58 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558a38ba6f38 <col:20> 'String' lvalue Var 0x558a38ba6d40 'str' 'String'
|       `-CallExpr 0x558a38ba7130 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x558a38ba7000 <col:13> '<bound member function type>' ->postparse 0x558a38b98778
|         | `-CXXThisExpr 0x558a38ba6ff0 <col:13> 'Args *' implicit this
|         |-CallExpr 0x558a38ba70e0 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x558a38ba7050 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x558a38ba7030 <col:23> 'P' lvalue ParmVar 0x558a38b835b8 'parser' 'P'
|         | |-DeclRefExpr 0x558a38ba7098 <col:36> 'String' lvalue Var 0x558a38ba6d40 'str' 'String'
|         | `-UnaryOperator 0x558a38ba70c8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x558a38ba70b8 <col:42> 'Args *' this
|         `-DeclRefExpr 0x558a38ba7110 <col:49> 'Args::Slot *' lvalue Var 0x558a38ba6cb0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a38b83b18 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558a38b837e8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a38b83a78 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558a38b838a0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b83920 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b83998 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x558a38ba7b08 <col:71, line:792:5>
|     |-DeclStmt 0x558a38ba7230 <line:784:9, col:26>
|     | `-VarDecl 0x558a38ba71c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a38ba7300 <line:785:9, col:29>
|     | `-VarDecl 0x558a38ba7260 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558a38ba72e8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558a38ba72c8 <col:28> 'int' 1
|     |-WhileStmt 0x558a38ba79b8 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x558a38ba79d8 <line:786:16, col:61>
|     | | `-VarDecl 0x558a38ba7328 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558a38ba7508 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558a38ba74d8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558a38ba74c0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558a38ba74a0 <col:29, col:61> 'String' (CXXTemporary 0x558a38ba74a0)
|     | |           `-CXXMemberCallExpr 0x558a38ba7430 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558a38ba73a0 <col:29> '<bound member function type>' ->find 0x558a38b98568
|     | |             | `-CXXThisExpr 0x558a38ba7390 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558a38ba7468 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a38ba73d0 <col:34> 'const char *' lvalue ParmVar 0x558a38b838a0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558a38ba7480 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a38ba73f0 <col:43> 'int' lvalue ParmVar 0x558a38b83920 'flags' 'int'
|     | |             `-DeclRefExpr 0x558a38ba7410 <col:50> 'Args::Slot *' lvalue Var 0x558a38ba71c8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558a38ba75c0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558a38ba75a8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558a38ba7588 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558a38ba7558 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|     | |       `-ImplicitCastExpr 0x558a38ba7540 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558a38ba7520 <col:23> 'String' lvalue Var 0x558a38ba7328 'str' 'String'
|     | `-CompoundStmt 0x558a38ba7990 <col:64, line:790:9>
|     |   |-CallExpr 0x558a38ba7718 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x558a38ba75e8 <col:13> '<bound member function type>' ->postparse 0x558a38b98778
|     |   | | `-CXXThisExpr 0x558a38ba75d8 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558a38ba76c8 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558a38ba7638 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558a38ba7618 <col:23> 'P' lvalue ParmVar 0x558a38b83998 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558a38ba7680 <col:36> 'String' lvalue Var 0x558a38ba7328 'str' 'String'
|     |   | | `-UnaryOperator 0x558a38ba76b0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558a38ba76a0 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x558a38ba76f8 <col:49> 'Args::Slot *' lvalue Var 0x558a38ba71c8 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558a38ba78b0 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558a38ba7748 <col:13> 'int' lvalue Var 0x558a38ba7260 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558a38ba7898 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558a38ba7878 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558a38ba77e0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558a38ba77c0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558a38ba77a8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558a38ba7768 <col:28> 'int' lvalue Var 0x558a38ba7260 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558a38ba7788 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558a38ba7860 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558a38ba7830 <col:49> 'bool' lvalue ->_read_status 0x558a38a75850
|     |   |         `-ImplicitCastExpr 0x558a38ba7810 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558a38ba7800 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558a38ba7960 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558a38ba78d0 <col:13> 'int' lvalue ParmVar 0x558a38b83920 'flags' 'int'
|     |     `-UnaryOperator 0x558a38ba7948 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558a38ba7930 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558a38ba7910 <col:23> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558a38ba7ae8 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558a38ba7a20 <col:9> 'bool' lvalue ->_read_status 0x558a38a75850
|       | `-ImplicitCastExpr 0x558a38ba7a00 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558a38ba79f0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558a38ba7ac8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558a38ba7aa8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558a38ba7a90 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558a38ba7a50 <col:25> 'int' lvalue Var 0x558a38ba7260 'read_status' 'int'
|           `-IntegerLiteral 0x558a38ba7a70 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558a38b83ff8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558a38b83b88 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b83c08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b83f58 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a38b83cc8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b83d48 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b83dc0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b83e68 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x558a38ba8aa0 <col:84, line:805:5>
|     |-DeclStmt 0x558a38ba7bb0 <line:796:9, col:26>
|     | `-VarDecl 0x558a38ba7b48 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a38ba7c80 <line:797:9, col:29>
|     | `-VarDecl 0x558a38ba7be0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558a38ba7c68 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558a38ba7c48 <col:28> 'int' 1
|     |-DeclStmt 0x558a38ba7fc0 <line:798:9, col:71>
|     | `-VarDecl 0x558a38ba7cd8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558a38ba7f90 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558a38ba7f00 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x558a38ba7f48 <col:55> 'T' lvalue ParmVar 0x558a38b83e68 'variable' 'T &'
|     |     `-UnaryOperator 0x558a38ba7f78 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558a38ba7f68 <col:66> 'Args *' this
|     |-WhileStmt 0x558a38ba8950 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x558a38ba8970 <line:799:16, col:61>
|     | | `-VarDecl 0x558a38ba7fe8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558a38ba81c8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558a38ba8198 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558a38ba8180 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558a38ba8160 <col:29, col:61> 'String' (CXXTemporary 0x558a38ba8160)
|     | |           `-CXXMemberCallExpr 0x558a38ba80f0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558a38ba8060 <col:29> '<bound member function type>' ->find 0x558a38b98568
|     | |             | `-CXXThisExpr 0x558a38ba8050 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558a38ba8128 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a38ba8090 <col:34> 'const char *' lvalue ParmVar 0x558a38b83cc8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558a38ba8140 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a38ba80b0 <col:43> 'int' lvalue ParmVar 0x558a38b83d48 'flags' 'int'
|     | |             `-DeclRefExpr 0x558a38ba80d0 <col:50> 'Args::Slot *' lvalue Var 0x558a38ba7b48 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558a38ba8280 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558a38ba8268 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558a38ba8248 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558a38ba8218 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|     | |       `-ImplicitCastExpr 0x558a38ba8200 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558a38ba81e0 <col:23> 'String' lvalue Var 0x558a38ba7fe8 'str' 'String'
|     | `-CompoundStmt 0x558a38ba8928 <col:64, line:803:9>
|     |   |-CallExpr 0x558a38ba86b0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x558a38ba82a8 <col:13> '<bound member function type>' ->postparse 0x558a38b98778
|     |   | | `-CXXThisExpr 0x558a38ba8298 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x558a38ba8670 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x558a38ba82d8 <col:23> 'T *' lvalue Var 0x558a38ba7cd8 's' 'T *'
|     |   | | `-CallExpr 0x558a38ba8630 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x558a38ba84c0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x558a38ba8508 <col:56> 'P' lvalue ParmVar 0x558a38b83dc0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x558a38ba8528 <col:64> 'String' lvalue Var 0x558a38ba7fe8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x558a38ba85d8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x558a38ba8568 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|     |   | |   | `-DeclRefExpr 0x558a38ba8548 <col:70> 'T *' lvalue Var 0x558a38ba7cd8 's' 'T *'
|     |   | |   `-UnaryOperator 0x558a38ba8618 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x558a38ba8608 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x558a38ba8690 <col:81> 'Args::Slot *' lvalue Var 0x558a38ba7b48 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558a38ba8848 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558a38ba86e0 <col:13> 'int' lvalue Var 0x558a38ba7be0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558a38ba8830 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558a38ba8810 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558a38ba8778 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558a38ba8758 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558a38ba8740 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558a38ba8700 <col:28> 'int' lvalue Var 0x558a38ba7be0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558a38ba8720 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558a38ba87f8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558a38ba87c8 <col:49> 'bool' lvalue ->_read_status 0x558a38a75850
|     |   |         `-ImplicitCastExpr 0x558a38ba87a8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558a38ba8798 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558a38ba88f8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558a38ba8868 <col:13> 'int' lvalue ParmVar 0x558a38b83d48 'flags' 'int'
|     |     `-UnaryOperator 0x558a38ba88e0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558a38ba88c8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558a38ba88a8 <col:23> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558a38ba8a80 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558a38ba89b8 <col:9> 'bool' lvalue ->_read_status 0x558a38a75850
|       | `-ImplicitCastExpr 0x558a38ba8998 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558a38ba8988 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558a38ba8a60 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558a38ba8a40 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558a38ba8a28 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558a38ba89e8 <col:25> 'int' lvalue Var 0x558a38ba7be0 'read_status' 'int'
|           `-IntegerLiteral 0x558a38ba8a08 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558a38b845d8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x558a38b84070 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a38b840e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a38b84538 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558a38b841a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a38b84228 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x558a38b842a0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x558a38b843f0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x558a38ba98a8 <col:87, line:821:5>
|     |-DeclStmt 0x558a38ba8b50 <line:809:9, col:26>
|     | `-VarDecl 0x558a38ba8ae8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a38ba8c20 <line:810:9, col:29>
|     | `-VarDecl 0x558a38ba8b80 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558a38ba8c08 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558a38ba8be8 <col:28> 'int' 1
|     |-DeclStmt 0x558a38ba8e68 <line:811:9, col:38>
|     | `-VarDecl 0x558a38ba8d50 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x558a38ba8e40 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558a38ba8dc8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558a38ba8e20 <col:29> 'Vector<T>' lvalue ParmVar 0x558a38b843f0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x558a38ba9758 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x558a38ba9778 <line:812:16, col:61>
|     | | `-VarDecl 0x558a38ba8e90 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558a38ba9070 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558a38ba9040 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558a38ba9028 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558a38ba9008 <col:29, col:61> 'String' (CXXTemporary 0x558a38ba9008)
|     | |           `-CXXMemberCallExpr 0x558a38ba8f98 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558a38ba8f08 <col:29> '<bound member function type>' ->find 0x558a38b98568
|     | |             | `-CXXThisExpr 0x558a38ba8ef8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558a38ba8fd0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a38ba8f38 <col:34> 'const char *' lvalue ParmVar 0x558a38b841a8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558a38ba8fe8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a38ba8f58 <col:43> 'int' lvalue ParmVar 0x558a38b84228 'flags' 'int'
|     | |             `-DeclRefExpr 0x558a38ba8f78 <col:50> 'Args::Slot *' lvalue Var 0x558a38ba8ae8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558a38ba9128 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558a38ba9110 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558a38ba90f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558a38ba90c0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558a388be8c8
|     | |       `-ImplicitCastExpr 0x558a38ba90a8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558a38ba9088 <col:23> 'String' lvalue Var 0x558a38ba8e90 'str' 'String'
|     | `-CompoundStmt 0x558a38ba9720 <col:64, line:819:9>
|     |   |-DeclStmt 0x558a38ba91e8 <line:813:13, col:23>
|     |   | `-VarDecl 0x558a38ba9150 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x558a38ba91c8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x558a38ba9368 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x558a38ba9210 <col:13> '<bound member function type>' ->postparse 0x558a38b98778
|     |   | | `-CXXThisExpr 0x558a38ba9200 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558a38ba9310 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558a38ba9260 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558a38ba9240 <col:23> 'P' lvalue ParmVar 0x558a38b842a0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558a38ba92a8 <col:36> 'String' lvalue Var 0x558a38ba8e90 'str' 'String'
|     |   | | |-DeclRefExpr 0x558a38ba92c8 <col:41> 'T' lvalue Var 0x558a38ba9150 'sx' 'T'
|     |   | | `-UnaryOperator 0x558a38ba92f8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558a38ba92e8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x558a38ba9348 <col:53> 'Args::Slot *' lvalue Var 0x558a38ba8ae8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x558a38ba94c0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x558a38ba93f8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x558a38ba93c8 <col:17> 'bool' lvalue ->_read_status 0x558a38a75850
|     |   | |   `-ImplicitCastExpr 0x558a38ba93a8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x558a38ba9398 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x558a38ba9498 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x558a38ba9430 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x558a38ba9410 <col:17> 'Vector<T> *' lvalue Var 0x558a38ba8d50 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x558a38ba9478 <col:30> 'T' lvalue Var 0x558a38ba9150 'sx' 'T'
|     |   |-BinaryOperator 0x558a38ba9640 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558a38ba94d8 <col:13> 'int' lvalue Var 0x558a38ba8b80 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558a38ba9628 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558a38ba9608 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558a38ba9570 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558a38ba9550 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558a38ba9538 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558a38ba94f8 <col:28> 'int' lvalue Var 0x558a38ba8b80 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558a38ba9518 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558a38ba95f0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558a38ba95c0 <col:49> 'bool' lvalue ->_read_status 0x558a38a75850
|     |   |         `-ImplicitCastExpr 0x558a38ba95a0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558a38ba9590 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558a38ba96f0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558a38ba9660 <col:13> 'int' lvalue ParmVar 0x558a38b84228 'flags' 'int'
|     |     `-UnaryOperator 0x558a38ba96d8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558a38ba96c0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558a38ba96a0 <col:23> 'const int' lvalue Var 0x558a38b6ba88 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558a38ba9888 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558a38ba97c0 <col:9> 'bool' lvalue ->_read_status 0x558a38a75850
|       | `-ImplicitCastExpr 0x558a38ba97a0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558a38ba9790 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558a38ba9868 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558a38ba9848 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558a38ba9830 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558a38ba97f0 <col:25> 'int' lvalue Var 0x558a38ba8b80 'read_status' 'int'
|           `-IntegerLiteral 0x558a38ba9810 <col:40> 'int' 1
|-AccessSpecDecl 0x558a38b84650 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x558a38b84678 prev 0x558a38b69d88 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x558a38b84770 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x558a38b84860 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x558a38ba98e0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x558a38b84950 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x558a38ba98f0 <col:25, line:830:9>
| |-CXXMethodDecl 0x558a38b84a50 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x558a38b84b00 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x558a38b84ba8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558a38b84ba8
| | `-ParmVarDecl 0x558a38b84cb8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x558a38b85478 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558a38b85478
|   `-ParmVarDecl 0x558a38b85588 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x558a38b84d28 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x558a38b84e88 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x558a38b85080 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x558a38b84f30 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x558a38b84fa8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x558a38ba9ad0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x558a38b85338 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x558a38ba9940 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x558a38ba9900 <col:20> 'void *' lvalue ParmVar 0x558a38b84f30 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x558a38b853a0 '_slot' 'char *'
| | | `-CXXNewExpr 0x558a38ba99c8 <col:32, col:45> 'char *' array Function 0x558a386e2568 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x558a38ba99b0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x558a38ba9980 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x558a38b84fa8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x558a38b85400 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x558a38ba9a90 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x558a38ba9a50 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x558a38b84fa8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x558a38ba9b50 <col:61, line:838:9>
| |-CXXDestructorDecl 0x558a38b85180 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x558a38b84950 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x558a38ba9bd8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x558a38ba9bb8 <line:840:13, col:22> 'void' array Function 0x558a386e28c8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x558a38ba9ba0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x558a38ba9b70 <col:22> 'char *' lvalue ->_slot 0x558a38b853a0
| |         `-CXXThisExpr 0x558a38ba9b60 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x558a38b85280 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x558a38b84a50 Slot::store 'void ()' ]
| | `-CompoundStmt 0x558a38ba9dc8 <col:22, line:844:9>
| |   `-CallExpr 0x558a38ba9d30 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x558a38ba9d18 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x558a38ba9cf8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x558a387ee328 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x558a38ba9d68 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x558a38ba9c48 <col:20> 'void *' lvalue ->_ptr 0x558a38b85338
| |     |   `-CXXThisExpr 0x558a38ba9c38 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x558a38ba9d98 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x558a38ba9d80 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x558a38ba9c88 <col:26> 'char *' lvalue ->_slot 0x558a38b853a0
| |     |     `-CXXThisExpr 0x558a38ba9c78 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x558a38ba9db0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x558a38ba9cc8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x558a38b85400
| |         `-CXXThisExpr 0x558a38ba9cb8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x558a38b85338 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x558a38b853a0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x558a38b85400 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x558a38b855f8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558a38b855f8
| | `-ParmVarDecl 0x558a38b85708 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x558a38b857a8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558a38b857a8
|   `-ParmVarDecl 0x558a38b858b8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x558a38b85a58 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x558a38b85928 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x558a38b859c8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x558a38b85cf0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x558a38b85ee8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x558a38b85db8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x558a38b86068 '_ptr' 'T *'
|   | | `-ParenListExpr 0x558a38ba9e00 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x558a38ba9de0 <col:20> 'T *' lvalue ParmVar 0x558a38b85db8 'ptr' 'T *'
|   | `-CompoundStmt 0x558a38ba9e50 <col:25, line:854:9>
|   |-CXXMethodDecl 0x558a38b85fb8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x558a38b84a50 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x558a38baa000 <col:22, line:857:9>
|   |   `-CallExpr 0x558a38ba9fd0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x558a38ba9e60 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x558a388a6a58 0x558a38850d88
|   |     |-CXXOperatorCallExpr 0x558a38ba9f60 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x558a38ba9ef0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a38ab3a08 0x558a38ab3628 0x558a38ab3258 0x558a38ab2e78 0x558a38ab2a98 0x558a38ab26c8
|   |     | `-MemberExpr 0x558a38ba9ec0 <col:29> 'T *' lvalue ->_ptr 0x558a38b86068
|   |     |   `-CXXThisExpr 0x558a38ba9eb0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x558a38ba9fa0 <col:35> 'T' lvalue ->_slot 0x558a38b860c8
|   |       `-CXXThisExpr 0x558a38ba9f90 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x558a38b86068 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x558a38b860c8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x558a38b86130 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x558a38b86230 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x558a38b86280 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38b86210 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x558a38b861f0 <col:31> 'int' 48
|-FieldDecl 0x558a38b862a8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x558a38b86308 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x558a38b86368 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x558a38b864a0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x558a38b97e10 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x558a38b97e70 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x558a38b97f20 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x558a38b98148 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x558a38b98050 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x558a38b98298 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x558a38b98208 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x558a38b98568 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x558a38b98358 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x558a38b983d8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x558a38b98480 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x558a38b98778 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x558a38b98630 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x558a38b986a8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x558a38b98848 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x558a38b98998 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x558a38b98900 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x558a38b98d28 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x558a38b98a58 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x558a38b98ad8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x558a38b98b80 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x558a38b98c38 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x558a38b98f50 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x558a38b98e00 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x558a38b98e78 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x558a38b99268 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x558a38b99000 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x558a38b991c8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x558a38b990d8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct CheckIPHeader::OldBadSrcArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38bdc868 <../elements/ip/checkipheader.hh:122:3, line:125:3> line:122:10 referenced struct OldBadSrcArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a38bdc988 <col:3, col:10> col:10 implicit struct OldBadSrcArg
|-CXXMethodDecl 0x558a38bdcd38 <line:123:7, line:124:14> line:123:19 parse 'bool (const String &, Vector<IPAddress> &, Args &)' static
| |-ParmVarDecl 0x558a38bdca28 <col:25, col:39> col:39 str 'const String &'
| |-ParmVarDecl 0x558a38bdcb70 <col:44, col:63> col:63 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x558a38bdcbe8 <line:124:4, col:10> col:10 args 'Args &'
|-CXXConstructorDecl 0x558a38bdff68 <line:122:10> col:10 implicit referenced constexpr OldBadSrcArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558a38be0068 <col:10> col:10 implicit constexpr OldBadSrcArg 'void (const CheckIPHeader::OldBadSrcArg &)' inline default trivial noexcept-unevaluated 0x558a38be0068
| `-ParmVarDecl 0x558a38be0178 <col:10> col:10 'const CheckIPHeader::OldBadSrcArg &'
|-CXXConstructorDecl 0x558a38bef7b0 <col:10> col:10 implicit used constexpr OldBadSrcArg 'void (CheckIPHeader::OldBadSrcArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a38bef8c8 <col:10> col:10 'CheckIPHeader::OldBadSrcArg &&'
| `-CompoundStmt 0x558a38bf0010 <col:10>
`-CXXDestructorDecl 0x558a38bef968 <col:10> col:10 implicit referenced ~OldBadSrcArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.CheckIPHeader::OldBadSrcArg" = type { i8 }
  NonVirtualBaseLLVMType:%"struct.CheckIPHeader::OldBadSrcArg" = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct CheckIPHeader::InterfacesArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38bdce08 <../elements/ip/checkipheader.hh:127:3, line:130:3> line:127:10 referenced struct InterfacesArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a38bdcf28 <col:3, col:10> col:10 implicit struct InterfacesArg
|-CXXMethodDecl 0x558a38bdd448 <line:128:7, line:129:50> line:128:19 parse 'bool (const String &, Vector<IPAddress> &, Vector<IPAddress> &, Args &)' static
| |-ParmVarDecl 0x558a38bdcfc8 <col:25, col:39> col:39 str 'const String &'
| |-ParmVarDecl 0x558a38bdd110 <col:44, col:63> col:63 result_bad_src 'Vector<IPAddress> &'
| |-ParmVarDecl 0x558a38bdd260 <line:129:4, col:23> col:23 result_good_dst 'Vector<IPAddress> &'
| `-ParmVarDecl 0x558a38bdd2d8 <col:40, col:46> col:46 args 'Args &'
|-CXXConstructorDecl 0x558a38bf0198 <line:127:10> col:10 implicit referenced constexpr InterfacesArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558a38bf0298 <col:10> col:10 implicit constexpr InterfacesArg 'void (const CheckIPHeader::InterfacesArg &)' inline default trivial noexcept-unevaluated 0x558a38bf0298
| `-ParmVarDecl 0x558a38bf03a8 <col:10> col:10 'const CheckIPHeader::InterfacesArg &'
|-CXXConstructorDecl 0x558a38bf0448 <col:10> col:10 implicit used constexpr InterfacesArg 'void (CheckIPHeader::InterfacesArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a38bf0558 <col:10> col:10 'CheckIPHeader::InterfacesArg &&'
| `-CompoundStmt 0x558a38bf0e40 <col:10>
`-CXXDestructorDecl 0x558a38bf05f8 <col:10> col:10 implicit referenced ~InterfacesArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.CheckIPHeader::InterfacesArg" = type { i8 }
  NonVirtualBaseLLVMType:%"struct.CheckIPHeader::InterfacesArg" = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38ac9368 prev 0x558a38abe570 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a38ac9460 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x558a38ac9550 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x558a38ac9678 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x558a38ac97f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x558a38ac9978 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x558a38ac9af8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x558a38ada928 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558a38adb198 <col:11>
|-CXXDestructorDecl 0x558a38adaa00 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558a38adab38 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558a38adab38
| `-ParmVarDecl 0x558a38adac48 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x558a38adace8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558a38adace8
| `-ParmVarDecl 0x558a38adadf8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x558a38addbb8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x558a38addcc8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x558a38addf48 <col:11>
|   `-ReturnStmt 0x558a38addf38 <col:11>
|     `-UnaryOperator 0x558a38addf20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a38addf10 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x558a38addd38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558a38addd38
  `-ParmVarDecl 0x558a38adde48 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38ac9b60 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a38ac9c78 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x558a38ac9d18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x558a38ac9d80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x558a38ac9de8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x558a38ac9e50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x558a38ac9eb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x558a38ac9f70 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x558a38ac9fd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x558a38aca030 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x558a38ada838 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x558a38ac9d18 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x558a38adb1a8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x558a38adb200 <col:12>
|-CXXConstructorDecl 0x558a38adae68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558a38adae68
| `-ParmVarDecl 0x558a38adaf78 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x558a38adb018 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558a38adb018
| `-ParmVarDecl 0x558a38adb128 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x558a38add2a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38ab7c80 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a38ab7d98 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x558a38ab7e28 <col:16, col:22> col:16 public
|-EnumDecl 0x558a38ab7e50 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x558a38ab7f50 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x558a38ab8030 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ab7f30 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x558a38ab7f10 <col:21> 'int' 28
| `-EnumConstantDecl 0x558a38ab7fe0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x558a38ab8048 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38ab7fc0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x558a38ab7fa0 <col:22> 'int' 64
|-CXXMethodDecl 0x558a38ab8388 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x558a38ab8070 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a38ab80f0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x558a38ab8168 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a38ab81e0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a38ab8448 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558a38ab8648 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x558a38ab84c0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x558a38ab8538 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a38ab86f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558a38ab8858 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x558a38ab8768 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a38ab8900 <col:72> warn_unused_result ""
|-TypedefDecl 0x558a38ab8c60 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x558a38ab8bf0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x558a38ab8b90 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x558a38ab8b50 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x558a3858f4e0 'void'
|       |-PointerType 0x558a38838020 'unsigned char *'
|       | `-BuiltinType 0x558a3858f5e0 'unsigned char'
|       |-TypedefType 0x558a38634610 'size_t' sugar
|       | |-Typedef 0x558a385ffbe0 'size_t'
|       | `-BuiltinType 0x558a3858f640 'unsigned long'
|       `-PointerType 0x558a3858fce0 'void *'
|         `-BuiltinType 0x558a3858f4e0 'void'
|-CXXMethodDecl 0x558a38ab90d8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x558a38ab8cd0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x558a38ab8d48 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a38ab8de0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x558a38ab8e60 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x558a38ad37d0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x558a38ad37b8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x558a38ad3780 <col:58> 'int' 0
| |-ParmVarDecl 0x558a38ab8ee0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x558a38ad37f8 <col:76> 'int' 0
| |-ParmVarDecl 0x558a38ab8f60 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x558a38ad3818 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x558a38ab91a8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x558a38ab9228 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558a38ab92e8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x558a38ab9388 <col:20>
| `-OptimizeNoneAttr 0x558a38ab93e0 <col:30>
|-CXXMethodDecl 0x558a38ab9458 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x558a38ab94f8 <col:20>
| `-OptimizeNoneAttr 0x558a38ab9550 <col:30>
|-CXXMethodDecl 0x558a38ab95c8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x558a38ab9668 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x558a38ab9718 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x558a38ab97b8 <col:20>
| |-OptimizeNoneAttr 0x558a38ab9810 <col:30>
| `-WarnUnusedResultAttr 0x558a38ab9838 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x558a38ab9890 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x558a38ab9930 <col:20>
| `-OptimizeNoneAttr 0x558a38ab9988 <col:30>
|-CXXMethodDecl 0x558a38ab99d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x558a38ab9a78 <col:20>
| `-OptimizeNoneAttr 0x558a38ab9ad0 <col:30>
|-CXXMethodDecl 0x558a38ab9b18 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x558a38ab9bb8 <col:20>
| `-OptimizeNoneAttr 0x558a38ab9c10 <col:30>
|-CXXMethodDecl 0x558a38ab9c58 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558a38ab9d18 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558a38ab9de0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558a38ab9ea8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558a38ab9f68 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558a38aba088 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x558a38ad38e0 <col:54, line:99:5>
|   `-ReturnStmt 0x558a38ad38d0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x558a38ad38b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x558a38ad3888 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558a38aca368
|         `-CXXThisExpr 0x558a38ad3878 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x558a38aba228 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x558a38aba138 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x558a38ad3990 <col:67, line:103:5>
|   `-BinaryOperator 0x558a38ad3970 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558a38ad3908 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558a38aca368
|     | `-CXXThisExpr 0x558a38ad38f8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558a38ad3958 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x558a38ad3938 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x558a38aba138 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x558a38aba320 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x558a38ad3a10 <col:33, line:107:5>
|   `-ReturnStmt 0x558a38ad3a00 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x558a38ad39e8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x558a38ad39b8 <col:16> 'void *' lvalue ->_destructor_argument 0x558a38aca3d0
|         `-CXXThisExpr 0x558a38ad39a8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558a38aba3e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x558a38ad4040 <col:25, line:113:5>
|   |-ParenExpr 0x558a38ad3d88 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x558a38ad3d58 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad3ac8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558a38ad3aa0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x558a38ad3a68 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x558a38ad3a38 <col:24> '<bound member function type>' ->shared 0x558a38ab9458
|   |   |       `-ImplicitCastExpr 0x558a38ad3a88 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x558a38ad3a28 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558a38ad3b28 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad3b08 <col:42> 'int' 0
|   |   `-CallExpr 0x558a38ad3cb8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad3ca0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad3c80 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad3cf8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad3b98 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x558a38ad3d10 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad3bc0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad3d28 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad3bf8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x558a38ad3d40 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad3c68 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad3c50 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad3c18 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x558a38ad3f88 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x558a38ad3db8 <col:2> 'unsigned char *' lvalue ->_head 0x558a38aca170
|   | | `-CXXThisExpr 0x558a38ad3da8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x558a38ad3f70 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x558a38ad3f50 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x558a38ad3df8 <col:10> 'unsigned char *' lvalue ->_data 0x558a38aca1d8
|   |     | `-CXXThisExpr 0x558a38ad3de8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x558a38ad3f38 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x558a38ad3f18 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x558a38ad3e38 <col:18> 'unsigned char *' lvalue ->_tail 0x558a38aca240
|   |         | `-CXXThisExpr 0x558a38ad3e28 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x558a38ad3f00 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x558a38ad3ee0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x558a38ad3e78 <col:26> 'unsigned char *' lvalue ->_end 0x558a38aca2a8
|   |             | `-CXXThisExpr 0x558a38ad3e68 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x558a38ad3ec8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x558a38ad3ea8 <col:33> 'int' 0
|   `-BinaryOperator 0x558a38ad4020 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558a38ad3fb8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558a38aca368
|     | `-CXXThisExpr 0x558a38ad3fa8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558a38ad4008 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x558a38ad3fe8 <col:16> 'int' 0
|-CXXMethodDecl 0x558a38aba520 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558a38aba490 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a38aba5c8 <col:20>
| |-OptimizeNoneAttr 0x558a38aba620 <col:30>
| `-WarnUnusedResultAttr 0x558a38aba648 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558a38aba718 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558a38aba688 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a38aba7c0 <col:20>
| |-OptimizeNoneAttr 0x558a38aba818 <col:30>
| `-WarnUnusedResultAttr 0x558a38aba840 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x558a38aba978 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558a38aba880 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a38abaa20 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x558a38abab20 <line:187:5, col:62> col:45 used pull 'void (uint32_t)'
| |-ParmVarDecl 0x558a38abaa90 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a38ababc8 <col:20>
| `-OptimizeNoneAttr 0x558a38abac20 <col:30>
|-CXXMethodDecl 0x558a38abace8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558a38abac58 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a38abad90 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x558a38abae90 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558a38abae00 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a38abaf38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558a38abb038 <line:245:5, col:62> col:45 used take 'void (uint32_t)'
| |-ParmVarDecl 0x558a38abafa8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a38abb0e0 <col:20>
| `-OptimizeNoneAttr 0x558a38abb138 <col:30>
|-CXXMethodDecl 0x558a38abb2c8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x558a38abb178 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x558a38abb1f0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x558a38ad3838 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x558a38abb378 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x558a38abb578 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558a38abb3f0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x558a38abb468 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a38abb788 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558a38abb638 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558a38abb6b0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a38abb998 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x558a38abb848 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x558a38abb8c8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x558a38ad3848 <col:39> 'int' 0
|-CXXMethodDecl 0x558a38abba68 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x558a38abbb30 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558a38abbbf8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x558a38abbcb8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558a38abbd80 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x558a38abbec8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x558a38abbe38 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x558a38abc098 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558a38abbf88 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x558a38abc000 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a38abc168 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x558a38abc228 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x558a38abc2c8 <col:20>
| `-OptimizeNoneAttr 0x558a38abc320 <col:30>
|-CXXMethodDecl 0x558a38abc370 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558a38abc410 <col:20>
| `-OptimizeNoneAttr 0x558a38abc468 <col:30>
|-CXXMethodDecl 0x558a38abc4b8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x558a38abc578 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558a38abc640 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x558a38abc6e0 <col:20>
| `-OptimizeNoneAttr 0x558a38abc738 <col:30>
|-CXXMethodDecl 0x558a38abc888 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558a38abc778 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x558a38abc7f0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a38abc9d8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x558a38abc948 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a38abcab0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x558a38abcb70 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x558a38abcc10 <col:20>
| `-OptimizeNoneAttr 0x558a38abcc68 <col:30>
|-CXXMethodDecl 0x558a38abccb8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558a38abcd58 <col:20>
| `-OptimizeNoneAttr 0x558a38abcdb0 <col:30>
|-CXXMethodDecl 0x558a38abce00 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x558a38abcec8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x558a38abcf68 <col:20>
| `-OptimizeNoneAttr 0x558a38abcfc0 <col:30>
|-CXXMethodDecl 0x558a38abd008 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x558a38abd128 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x558a38abd298 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x558a38abd1d8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x558a38abd388 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x558a38abd428 <col:20>
| `-OptimizeNoneAttr 0x558a38abd480 <col:30>
|-CXXMethodDecl 0x558a38abd4d0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x558a38abd590 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558a38abd7c8 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x558a38abd640 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x558a38abd6b8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a38abd878 <col:20>
| `-OptimizeNoneAttr 0x558a38abd8d0 <col:30>
|-CXXMethodDecl 0x558a38abd978 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x558a38abda18 <col:20>
| `-OptimizeNoneAttr 0x558a38abda70 <col:30>
|-CXXMethodDecl 0x558a38abdac0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x558a38abdb60 <col:20>
| `-OptimizeNoneAttr 0x558a38abdbb8 <col:30>
|-CXXMethodDecl 0x558a38abdc00 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x558a38abdca0 <col:20>
| `-OptimizeNoneAttr 0x558a38abdcf8 <col:30>
|-CXXMethodDecl 0x558a38abddf8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x558a38abdd30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x558a38abdea0 <col:20>
| `-OptimizeNoneAttr 0x558a38abdef8 <col:30>
|-CXXMethodDecl 0x558a38abe0b8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x558a38abdf30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x558a38abdfa8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a38abe168 <col:20>
| `-OptimizeNoneAttr 0x558a38abe1c0 <col:30>
|-CXXMethodDecl 0x558a38abe268 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x558a38abe388 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x558a38abe4a8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x558a38abe548 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x558a38abe570 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x558a38abe698 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x558a38abe738 <col:20>
| `-OptimizeNoneAttr 0x558a38abe790 <col:30>
|-CXXMethodDecl 0x558a38abe838 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x558a38abe8d8 <col:20>
| `-OptimizeNoneAttr 0x558a38abe930 <col:30>
|-AccessSpecDecl 0x558a38abe958 <line:344:3, col:9> col:3 public
|-EnumDecl 0x558a38abe980 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x558a38abea80 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x558a38abead0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38abea60 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x558a38abea40 <col:14> 'int' 48
|-CXXMethodDecl 0x558a38abeb38 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x558a38abebd8 <col:20>
| `-OptimizeNoneAttr 0x558a38abec30 <col:30>
|-CXXMethodDecl 0x558a38abeca8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x558a38abed48 <col:20>
| `-OptimizeNoneAttr 0x558a38abeda0 <col:30>
|-CXXMethodDecl 0x558a38abee68 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x558a38abedd8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x558a38abf008 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x558a38abf1a8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x558a38abf0b8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x558a38abf250 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x558a38abf350 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a38abf700 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38abf330 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x558a38abf310 <col:9> 'int' 0
| |-EnumConstantDecl 0x558a38abf3e0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a38abf718 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38abf3c0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x558a38abf3a0 <col:14> 'int' 1
| |-EnumConstantDecl 0x558a38abf470 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a38abf730 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38abf450 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x558a38abf430 <col:14> 'int' 2
| |-EnumConstantDecl 0x558a38abf500 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a38abf748 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38abf4e0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x558a38abf4c0 <col:14> 'int' 3
| |-EnumConstantDecl 0x558a38abf590 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a38abf760 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38abf570 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x558a38abf550 <col:13> 'int' 4
| |-EnumConstantDecl 0x558a38abf620 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a38abf778 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38abf600 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x558a38abf5e0 <col:13> 'int' 5
| `-EnumConstantDecl 0x558a38abf6b0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x558a38abf790 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38abf690 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x558a38abf670 <col:14> 'int' 6
|-CXXMethodDecl 0x558a38abf7f8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x558a38abf898 <col:20>
| `-OptimizeNoneAttr 0x558a38abf8f0 <col:30>
|-CXXMethodDecl 0x558a38abf9e8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x558a38abf928 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x558a38abfa90 <col:20>
| `-OptimizeNoneAttr 0x558a38abfae8 <col:30>
|-CXXMethodDecl 0x558a38abfb58 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x558a38abfc80 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x558a38abfdf8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x558a38abfd30 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x558a38abfec0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x558a38abff88 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x558a38ac00c8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x558a38ac0038 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x558a38ac0170 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x558a38ac0270 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558a38ac0470 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac0250 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x558a38ac0230 <col:23> 'int' 0
| |-EnumConstantDecl 0x558a38ac0300 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558a38ac0488 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac02e0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x558a38ac02c0 <col:45> 'int' 4
| |-EnumConstantDecl 0x558a38ac0390 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558a38ac04a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac0370 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x558a38ac0350 <col:24> 'int' 0
| `-EnumConstantDecl 0x558a38ac0420 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x558a38ac04b8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38ac0400 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x558a38ac03e0 <col:47> 'int' 16
|-CXXMethodDecl 0x558a38ac0518 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x558a38ac0688 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x558a38ac05c8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x558a38ac0730 <col:20>
| `-OptimizeNoneAttr 0x558a38ac0788 <col:30>
|-CXXMethodDecl 0x558a38ac07d8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x558a38ad4160 <col:18, col:36>
|   `-ReturnStmt 0x558a38ad4150 <col:20, col:33>
|     `-ImplicitCastExpr 0x558a38ad4138 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x558a38ad4118 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x558a38ad40e8 <col:27> '<bound member function type>' ->xanno 0x558a38abe838
|           `-CXXThisExpr 0x558a38ad40d8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x558a38ac08d0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x558a38ad4270 <col:30, col:48>
|   `-ReturnStmt 0x558a38ad4260 <col:32, col:45>
|     `-ImplicitCastExpr 0x558a38ad4248 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x558a38ad4228 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x558a38ad41f8 <col:39> '<bound member function type>' ->xanno 0x558a38abe698
|           `-CXXThisExpr 0x558a38ad41e8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x558a38ac09b8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x558a38ad4408 <col:24, col:50>
|   `-ReturnStmt 0x558a38ad43f8 <col:26, col:47>
|     `-UnaryOperator 0x558a38ad43e0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558a38ad43c0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x558a38ad43a8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a38ad4358 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x558a38ac9678
|         |   `-CXXMemberCallExpr 0x558a38ad4338 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x558a38ad4308 <col:34> '<bound member function type>' ->xanno 0x558a38abe838
|         |       `-CXXThisExpr 0x558a38ad42f8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x558a38ad4388 <col:46> 'int' 0
|-CXXMethodDecl 0x558a38ac0ac0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x558a38ad45d8 <col:36, col:62>
|   `-ReturnStmt 0x558a38ad45c8 <col:38, col:59>
|     `-UnaryOperator 0x558a38ad45b0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558a38ad4590 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558a38ad4578 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a38ad44f0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x558a38ac9678
|         |   `-CXXMemberCallExpr 0x558a38ad44d0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558a38ad44a0 <col:46> '<bound member function type>' ->xanno 0x558a38abe698
|         |       `-CXXThisExpr 0x558a38ad4490 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558a38ad4520 <col:58> 'int' 0
|-CXXMethodDecl 0x558a38ac0bd8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x558a38ad4770 <col:26, col:53>
|   `-ReturnStmt 0x558a38ad4760 <col:28, col:50>
|     `-UnaryOperator 0x558a38ad4748 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558a38ad4728 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x558a38ad4710 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a38ad46c0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x558a38ac9978
|         |   `-CXXMemberCallExpr 0x558a38ad46a0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x558a38ad4670 <col:36> '<bound member function type>' ->xanno 0x558a38abe838
|         |       `-CXXThisExpr 0x558a38ad4660 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x558a38ad46f0 <col:49> 'int' 0
|-CXXMethodDecl 0x558a38ac0cf8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x558a38ad4948 <col:38, col:65>
|   `-ReturnStmt 0x558a38ad4938 <col:40, col:62>
|     `-UnaryOperator 0x558a38ad4920 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558a38ad4900 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x558a38ad48e8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a38ad4858 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x558a38ac9978
|         |   `-CXXMemberCallExpr 0x558a38ad4838 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558a38ad4808 <col:48> '<bound member function type>' ->xanno 0x558a38abe698
|         |       `-CXXThisExpr 0x558a38ad47f8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558a38ad4888 <col:61> 'int' 0
|-CXXMethodDecl 0x558a38ac0ea8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x558a38ac0db0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x558a38ad5018 <col:34, line:463:5>
|   |-ParenExpr 0x558a38ad4e60 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x558a38ad4e30 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad4a98 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad4a68 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad49b8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad49a0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad4960 <col:23> 'int' lvalue ParmVar 0x558a38ac0db0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad4980 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad4a48 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad4a18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad49d8 <col:33> 'int' lvalue ParmVar 0x558a38ac0db0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558a38ad4a30 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558a38ad49f8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558a38ad4af8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad4ad8 <col:56> 'int' 0
|   |   `-CallExpr 0x558a38ad4d90 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad4d78 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad4d58 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad4dd0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad4be8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558a38ad4de8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad4c18 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad4e00 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad4c50 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x558a38ad4e18 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad4d40 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad4d28 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad4ce8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x558a38ad5008 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x558a38ad4ff0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x558a38ad4fd0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558a38ad4fa0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a38ad4f50 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x558a38ac9678
|         |   `-CXXMemberCallExpr 0x558a38ad4f30 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558a38ad4f00 <col:9> '<bound member function type>' ->xanno 0x558a38abe698
|         |       `-CXXThisExpr 0x558a38ad4ef0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x558a38ad4fb8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x558a38ad4f80 <col:21> 'int' lvalue ParmVar 0x558a38ac0db0 'i' 'int'
|-CXXMethodDecl 0x558a38ac10f8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x558a38ac0f68 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x558a38ac0fe0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x558a38ad56a8 <col:40, line:472:5>
|   |-ParenExpr 0x558a38ad54c0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x558a38ad5490 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad5170 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad5140 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad5090 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad5078 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad5038 <col:23> 'int' lvalue ParmVar 0x558a38ac0f68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad5058 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad5120 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad50f0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad50b0 <col:33> 'int' lvalue ParmVar 0x558a38ac0f68 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558a38ad5108 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558a38ad50d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558a38ad51d0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad51b0 <col:56> 'int' 0
|   |   `-CallExpr 0x558a38ad53f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad53d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad53b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad5430 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad5240 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558a38ad5448 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad5270 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad5460 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad52a8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x558a38ad5478 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad53a0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad5388 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad5348 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x558a38ad5688 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x558a38ad5630 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x558a38ad5600 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x558a38ad55b0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x558a38ac9678
|     | |   `-CXXMemberCallExpr 0x558a38ad5590 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x558a38ad5560 <col:2> '<bound member function type>' ->xanno 0x558a38abe838
|     | |       `-CXXThisExpr 0x558a38ad5550 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x558a38ad5618 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x558a38ad55e0 <col:14> 'int' lvalue ParmVar 0x558a38ac0f68 'i' 'int'
|     `-ImplicitCastExpr 0x558a38ad5670 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x558a38ad5650 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x558a38ac0fe0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x558a38ac12b8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x558a38ac11c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558a38ad5e28 <col:36, line:485:5>
|   |-ParenExpr 0x558a38ad5b90 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a38ad5b60 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad5840 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad5810 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad5720 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad5708 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad56c8 <col:23> 'int' lvalue ParmVar 0x558a38ac11c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad56e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad57f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad57d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad5740 <col:33> 'int' lvalue ParmVar 0x558a38ac11c0 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad57b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad57a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad5760 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a38ad5780 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558a38ad58a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad5880 <col:60> 'int' 0
|   |   `-CallExpr 0x558a38ad5ac0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad5aa8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad5a88 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad5b00 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad5910 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558a38ad5b18 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad5948 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad5b30 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad5980 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x558a38ad5b48 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad5a70 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad5a58 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad5a18 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x558a38ad5e18 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x558a38ad5e00 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x558a38ad5de8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a38ad5db8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x558a38ad5d58 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a38ad5d28 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a38ad5ca0 <col:61, col:70> 'char const[48]' lvalue ->c 0x558a38ac9550
|             |   `-CXXMemberCallExpr 0x558a38ad5c80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a38ad5c50 <col:61> '<bound member function type>' ->xanno 0x558a38abe698
|             |       `-CXXThisExpr 0x558a38ad5c40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a38ad5d40 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a38ad5cd0 <col:74> 'int' lvalue ParmVar 0x558a38ac11c0 'i' 'int'
|-CXXMethodDecl 0x558a38ac1508 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x558a38ac1378 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a38ac13f0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x558a38ad6578 <col:42, line:500:5>
|   |-ParenExpr 0x558a38ad6310 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a38ad62e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad5fc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad5f90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad5ea0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad5e88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad5e48 <col:23> 'int' lvalue ParmVar 0x558a38ac1378 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad5e68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad5f70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad5f58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad5ec0 <col:33> 'int' lvalue ParmVar 0x558a38ac1378 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad5f38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad5f20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad5ee0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a38ad5f00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558a38ad6020 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad6000 <col:60> 'int' 0
|   |   `-CallExpr 0x558a38ad6240 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad6228 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad6208 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad6280 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad6090 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558a38ad6298 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad60c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad62b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad6100 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x558a38ad62c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad61f0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad61d8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad6198 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x558a38ad6558 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x558a38ad6508 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a38ad64d8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x558a38ad6480 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a38ad6450 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a38ad6400 <col:48, col:57> 'char [48]' lvalue ->c 0x558a38ac9550
|     |     |   `-CXXMemberCallExpr 0x558a38ad63e0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a38ad63b0 <col:48> '<bound member function type>' ->xanno 0x558a38abe838
|     |     |       `-CXXThisExpr 0x558a38ad63a0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a38ad6468 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a38ad6430 <col:61> 'int' lvalue ParmVar 0x558a38ac1378 'i' 'int'
|     `-ImplicitCastExpr 0x558a38ad6540 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x558a38ad6520 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x558a38ac13f0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x558a38ac16c8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x558a38ac15d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558a38ad6cd8 <col:35, line:513:5>
|   |-ParenExpr 0x558a38ad69e8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a38ad69b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad6710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad66e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad65f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad65d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad6598 <col:23> 'int' lvalue ParmVar 0x558a38ac15d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad65b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad66c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad66a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad6610 <col:33> 'int' lvalue ParmVar 0x558a38ac15d0 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad6688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad6670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad6630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a38ad6650 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558a38ad6770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad6750 <col:60> 'int' 0
|   |   `-CallExpr 0x558a38ad6918 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad6900 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad68e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad6958 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad67e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558a38ad6970 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad6818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad6988 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad6850 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x558a38ad69a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad68c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad68b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad6870 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x558a38ad6cc8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x558a38ad6cb0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x558a38ad6c98 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a38ad6c68 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x558a38ad6be0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a38ad6bb0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a38ad6b60 <col:60, col:69> 'char const[48]' lvalue ->c 0x558a38ac9550
|             |   `-CXXMemberCallExpr 0x558a38ad6b40 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a38ad6b10 <col:60> '<bound member function type>' ->xanno 0x558a38abe698
|             |       `-CXXThisExpr 0x558a38ad6b00 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a38ad6bc8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a38ad6b90 <col:73> 'int' lvalue ParmVar 0x558a38ac15d0 'i' 'int'
|-CXXMethodDecl 0x558a38ac1918 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x558a38ac1788 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a38ac1800 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x558a38ad73f8 <col:41, line:528:5>
|   |-ParenExpr 0x558a38ad7180 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a38ad7150 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad6e70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad6e40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad6d50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad6d38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad6cf8 <col:23> 'int' lvalue ParmVar 0x558a38ac1788 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad6d18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad6e20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad6e08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad6d70 <col:33> 'int' lvalue ParmVar 0x558a38ac1788 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad6de8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad6dd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad6d90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a38ad6db0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558a38ad6ed0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad6eb0 <col:60> 'int' 0
|   |   `-CallExpr 0x558a38ad70b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad7098 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad7078 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad70f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad6f40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558a38ad7108 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad6f78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad7120 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad6fb0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x558a38ad7138 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad7060 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad7048 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad7008 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x558a38ad73d8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x558a38ad7388 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a38ad7358 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x558a38ad7300 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a38ad72c0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a38ad7270 <col:47, col:56> 'char [48]' lvalue ->c 0x558a38ac9550
|     |     |   `-CXXMemberCallExpr 0x558a38ad7250 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a38ad7220 <col:47> '<bound member function type>' ->xanno 0x558a38abe838
|     |     |       `-CXXThisExpr 0x558a38ad7210 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a38ad72d8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a38ad72a0 <col:60> 'int' lvalue ParmVar 0x558a38ac1788 'i' 'int'
|     `-ImplicitCastExpr 0x558a38ad73c0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x558a38ad73a0 <col:65> 'int16_t':'short' lvalue ParmVar 0x558a38ac1800 'x' 'int16_t':'short'
|-CXXMethodDecl 0x558a38ac1ad8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x558a38ac19e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558a38ad7ac8 <col:36, line:541:5>
|   |-ParenExpr 0x558a38ad7868 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a38ad7838 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad7590 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad7560 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad7470 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad7458 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad7418 <col:23> 'int' lvalue ParmVar 0x558a38ac19e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad7438 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad7540 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad7528 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad7490 <col:33> 'int' lvalue ParmVar 0x558a38ac19e0 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad7508 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad74f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad74b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a38ad74d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558a38ad75f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad75d0 <col:60> 'int' 0
|   |   `-CallExpr 0x558a38ad7798 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad7780 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad7760 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad77d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad7660 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558a38ad77f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad7698 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad7808 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad76d0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x558a38ad7820 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad7748 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad7730 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad76f0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x558a38ad7ab8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x558a38ad7aa0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x558a38ad7a88 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a38ad7a58 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x558a38ad7a00 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a38ad79d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a38ad7980 <col:61, col:70> 'char const[48]' lvalue ->c 0x558a38ac9550
|             |   `-CXXMemberCallExpr 0x558a38ad7960 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a38ad7930 <col:61> '<bound member function type>' ->xanno 0x558a38abe698
|             |       `-CXXThisExpr 0x558a38ad7920 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a38ad79e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a38ad79b0 <col:74> 'int' lvalue ParmVar 0x558a38ac19e0 'i' 'int'
|-CXXMethodDecl 0x558a38ac1ca8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x558a38ac1b98 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x558a38ac1c10 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a38ac1d58 <col:20>
| `-OptimizeNoneAttr 0x558a38ac1db0 <col:30>
|-CXXMethodDecl 0x558a38ac1ee8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x558a38ac1df0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558a38ad8198 <col:35, line:562:5>
|   |-ParenExpr 0x558a38ad7f38 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a38ad7f08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad7c60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad7c30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad7b40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad7b28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad7ae8 <col:23> 'int' lvalue ParmVar 0x558a38ac1df0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad7b08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad7c10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad7bf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad7b60 <col:33> 'int' lvalue ParmVar 0x558a38ac1df0 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad7bd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad7bc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad7b80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a38ad7ba0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558a38ad7cc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad7ca0 <col:60> 'int' 0
|   |   `-CallExpr 0x558a38ad7e68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad7e50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad7e30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad7ea8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad7d30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558a38ad7ec0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad7d68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad7ed8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad7da0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x558a38ad7ef0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad7e18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad7e00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad7dc0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x558a38ad8188 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x558a38ad8170 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x558a38ad8158 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a38ad8128 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x558a38ad80d0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a38ad80a0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a38ad8050 <col:60, col:69> 'char const[48]' lvalue ->c 0x558a38ac9550
|             |   `-CXXMemberCallExpr 0x558a38ad8030 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a38ad8000 <col:60> '<bound member function type>' ->xanno 0x558a38abe698
|             |       `-CXXThisExpr 0x558a38ad7ff0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a38ad80b8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a38ad8080 <col:73> 'int' lvalue ParmVar 0x558a38ac1df0 'i' 'int'
|-CXXMethodDecl 0x558a38ac20f8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x558a38ac1fa8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a38ac2020 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x558a38ad8878 <col:41, line:577:5>
|   |-ParenExpr 0x558a38ad8608 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a38ad85d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad8330 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad8300 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad8210 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad81f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad81b8 <col:23> 'int' lvalue ParmVar 0x558a38ac1fa8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad81d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad82e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad82c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad8230 <col:33> 'int' lvalue ParmVar 0x558a38ac1fa8 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad82a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad8290 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad8250 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a38ad8270 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558a38ad8390 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad8370 <col:60> 'int' 0
|   |   `-CallExpr 0x558a38ad8538 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad8520 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad8500 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad8578 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad8400 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558a38ad8590 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad8438 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad85a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad8470 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x558a38ad85c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad84e8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad84d0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad8490 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x558a38ad8858 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x558a38ad8808 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a38ad87d8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x558a38ad8778 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a38ad8748 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a38ad86f8 <col:47, col:56> 'char [48]' lvalue ->c 0x558a38ac9550
|     |     |   `-CXXMemberCallExpr 0x558a38ad86d8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a38ad86a8 <col:47> '<bound member function type>' ->xanno 0x558a38abe838
|     |     |       `-CXXThisExpr 0x558a38ad8698 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a38ad8760 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a38ad8728 <col:60> 'int' lvalue ParmVar 0x558a38ac1fa8 'i' 'int'
|     `-ImplicitCastExpr 0x558a38ad8840 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x558a38ad8820 <col:65> 'int32_t':'int' lvalue ParmVar 0x558a38ac2020 'x' 'int32_t':'int'
|-CXXMethodDecl 0x558a38ac22b8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x558a38ac21c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558a38ad8fa8 <col:36, line:591:5>
|   |-ParenExpr 0x558a38ad8ce8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a38ad8cb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad8a10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad89e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad88f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad88d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad8898 <col:23> 'int' lvalue ParmVar 0x558a38ac21c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad88b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad89c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad89a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad8910 <col:33> 'int' lvalue ParmVar 0x558a38ac21c0 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad8988 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad8970 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad8930 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a38ad8950 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558a38ad8a70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad8a50 <col:60> 'int' 0
|   |   `-CallExpr 0x558a38ad8c18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad8c00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad8be0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad8c58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad8ae0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558a38ad8c70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad8b18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad8c88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad8b50 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x558a38ad8ca0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad8bc8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad8bb0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad8b70 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x558a38ad8f98 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x558a38ad8f80 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x558a38ad8f68 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a38ad8f38 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x558a38ad8eb0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a38ad8e80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a38ad8e30 <col:61, col:70> 'char const[48]' lvalue ->c 0x558a38ac9550
|             |   `-CXXMemberCallExpr 0x558a38ad8e10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a38ad8de0 <col:61> '<bound member function type>' ->xanno 0x558a38abe698
|             |       `-CXXThisExpr 0x558a38ad8dd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a38ad8e98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a38ad8e60 <col:74> 'int' lvalue ParmVar 0x558a38ac21c0 'i' 'int'
|-CXXMethodDecl 0x558a38ac2508 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x558a38ac2378 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a38ac23f0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x558a38ad9688 <col:42, line:606:5>
|   |-ParenExpr 0x558a38ad9418 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a38ad93e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad9140 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad9110 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad9020 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad9008 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad8fc8 <col:23> 'int' lvalue ParmVar 0x558a38ac2378 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad8fe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad90f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a38ad90d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad9040 <col:33> 'int' lvalue ParmVar 0x558a38ac2378 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad90b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad90a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad9060 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a38ad9080 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558a38ad91a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad9180 <col:60> 'int' 0
|   |   `-CallExpr 0x558a38ad9348 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad9330 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad9310 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad9388 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad9210 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558a38ad93a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad9248 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad93b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad9280 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x558a38ad93d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad92f8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad92e0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad92a0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x558a38ad9668 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x558a38ad9618 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a38ad95e8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x558a38ad9588 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a38ad9558 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a38ad9508 <col:48, col:57> 'char [48]' lvalue ->c 0x558a38ac9550
|     |     |   `-CXXMemberCallExpr 0x558a38ad94e8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a38ad94b8 <col:48> '<bound member function type>' ->xanno 0x558a38abe838
|     |     |       `-CXXThisExpr 0x558a38ad94a8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a38ad9570 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a38ad9538 <col:61> 'int' lvalue ParmVar 0x558a38ac2378 'i' 'int'
|     `-ImplicitCastExpr 0x558a38ad9650 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x558a38ad9630 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x558a38ac23f0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x558a38ac26a0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x558a38ac25d0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x558a38ad9ef8 <col:33, line:620:5>
|   |-ParenExpr 0x558a38ad9c70 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x558a38ad9c40 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ad9890 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ad9860 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad9700 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad96e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad96a8 <col:23> 'int' lvalue ParmVar 0x558a38ac25d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad96c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ad9840 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558a38ad9828 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad9720 <col:33> 'int' lvalue ParmVar 0x558a38ac25d0 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ad9808 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ad97f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad9740 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558a38ad97c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558a38ad97b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558a38ad9778 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558a38ad98f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ad98d0 <col:79> 'int' 0
|   |   `-CallExpr 0x558a38ad9ba0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558a38ad9b88 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ad9b68 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ad9be0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad99d8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558a38ad9bf8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ad9a20 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ad9c10 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ad9a58 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x558a38ad9c28 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ad9b50 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ad9b38 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ad9af8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x558a38ad9ee8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x558a38ad9ed0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x558a38ad9eb8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a38ad9e88 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x558a38ad9e00 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a38ad9dd0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a38ad9d80 <col:67, col:76> 'char const[48]' lvalue ->c 0x558a38ac9550
|             |   `-CXXMemberCallExpr 0x558a38ad9d60 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a38ad9d30 <col:67> '<bound member function type>' ->xanno 0x558a38abe698
|             |       `-CXXThisExpr 0x558a38ad9d20 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a38ad9de8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a38ad9db0 <col:80> 'int' lvalue ParmVar 0x558a38ac25d0 'i' 'int'
|-CXXMethodDecl 0x558a38ac28b8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x558a38ac2760 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a38ac27e0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x558a38ada720 <col:45, line:635:5>
|   |-ParenExpr 0x558a38ada468 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x558a38ada438 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558a38ada100 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a38ada0d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a38ad9f70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a38ad9f58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a38ad9f18 <col:23> 'int' lvalue ParmVar 0x558a38ac2760 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a38ad9f38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a38ada0b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558a38ada098 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a38ad9f90 <col:33> 'int' lvalue ParmVar 0x558a38ac2760 'i' 'int'
|   |   |     `-BinaryOperator 0x558a38ada078 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a38ada060 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a38ad9fb0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a38abea80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558a38ada038 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558a38ada020 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558a38ad9fe8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558a38ada160 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a38ada140 <col:79> 'int' 0
|   |   `-CallExpr 0x558a38ada398 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558a38ada380 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a38ada360 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a3862b370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a38ada3d8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ada1d0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558a38ada3f0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a38ada218 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a38ada408 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a38ada250 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x558a38ada420 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a38ada348 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a38ada330 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a38ada2e8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x558a38ada700 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x558a38ada668 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a38ada638 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x558a38ada5d8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a38ada5a8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a38ada558 <col:54, col:63> 'char [48]' lvalue ->c 0x558a38ac9550
|     |     |   `-CXXMemberCallExpr 0x558a38ada538 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a38ada508 <col:54> '<bound member function type>' ->xanno 0x558a38abe838
|     |     |       `-CXXThisExpr 0x558a38ada4f8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a38ada5c0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a38ada588 <col:67> 'int' lvalue ParmVar 0x558a38ac2760 'i' 'int'
|     `-CXXConstCastExpr 0x558a38ada6d0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x558a38ada6b8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x558a38ada680 <col:91> 'const void *' lvalue ParmVar 0x558a38ac27e0 'x' 'const void *'
|-CXXMethodDecl 0x558a38ac2988 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x558a38ada7a8 <col:34, line:640:5>
|   `-ReturnStmt 0x558a38ada798 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x558a38ada780 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x558a38ada750 <col:16> 'Packet *' lvalue ->_data_packet 0x558a38aca108
|         `-CXXThisExpr 0x558a38ada740 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558a38ac2ac8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x558a38ac2a38 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a38ad3868 <col:46> 'bool' true
|-CXXMethodDecl 0x558a38ac2c48 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x558a38ac2b80 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x558a38ac2cf0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x558a38ac34a0 <line:660:22> "" ""
| |-EnumConstantDecl 0x558a38ac2df0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac3510 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac2dd0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x558a38ac2db0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558a38ab7f50 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558a38ac2e80 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac3528 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac2e60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x558a38ac2e40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558a38ab7fe0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558a38ac2f10 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac3540 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac2ef0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x558a38ac2ed0 <col:21> 'int' 0
| |-EnumConstantDecl 0x558a38ac2fa0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac3558 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac2f80 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x558a38ac2f60 <col:19> 'int' 16
| |-EnumConstantDecl 0x558a38ac3030 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac3570 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac3010 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x558a38ac2ff0 <col:21> 'int' 16
| |-EnumConstantDecl 0x558a38ac30c0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac3588 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac30a0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558a38ac3080 <col:19> 'int' 32
| |-EnumConstantDecl 0x558a38ac3150 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac35a0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac3130 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x558a38ac3110 <col:19> 'int' EnumConstant 0x558a38ac2fa0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558a38ac31e0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac35b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac31c0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x558a38ac31a0 <col:19> 'int' EnumConstant 0x558a38ac30c0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558a38ac32b0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac35d0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac3290 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x558a38ac3270 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558a38ac3230 <col:23> 'int' EnumConstant 0x558a38ac31e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558a38ac3250 <col:40> 'int' 2
| |-EnumConstantDecl 0x558a38ac3380 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a38ac35e8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38ac3360 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x558a38ac3340 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558a38ac3300 <col:23> 'int' EnumConstant 0x558a38ac31e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558a38ac3320 <col:40> 'int' 4
| `-EnumConstantDecl 0x558a38ac3450 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x558a38ac3600 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a38ac3430 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x558a38ac3410 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x558a38ac33d0 <col:23> 'int' EnumConstant 0x558a38ac31e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x558a38ac33f0 <col:40> 'int' 8
|-CXXMethodDecl 0x558a38ac3640 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x558a38ac36e0 <col:68> "" ""
|-CXXMethodDecl 0x558a38ac3778 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x558a38ac3818 <col:45> "" ""
|-CXXMethodDecl 0x558a38ac38b0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558a38ac3950 <col:57> "" ""
|-CXXMethodDecl 0x558a38ac39e8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x558a38ac3a88 <col:45> "" ""
|-CXXMethodDecl 0x558a38ac3b20 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558a38ac3bc0 <col:57> "" ""
|-CXXMethodDecl 0x558a38ac3c50 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x558a38ac3cf0 <col:51> "" ""
|-CXXMethodDecl 0x558a38ac3d80 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558a38ac3e20 <col:63> "" ""
|-CXXMethodDecl 0x558a38ac3eb0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x558a38ac3f50 <col:53> "" ""
|-CXXMethodDecl 0x558a38ac3fe0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558a38ac4080 <col:65> "" ""
|-CXXMethodDecl 0x558a38ac4198 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558a38ac4108 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x558a38ac4240 <col:61> "" ""
|-CXXMethodDecl 0x558a38ac43d8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558a38ac42c8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x558a38ac4340 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558a38ac4488 <col:67> "" ""
|-CXXMethodDecl 0x558a38ac45a0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558a38ac4510 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558a38ac4648 <col:63> "" ""
|-CXXMethodDecl 0x558a38ac47e0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558a38ac46d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558a38ac4748 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558a38ac4890 <col:69> "" ""
|-CXXMethodDecl 0x558a38ac49a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558a38ac4918 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558a38ac4a50 <col:63> "" ""
|-CXXMethodDecl 0x558a38ac7128 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558a38ac7018 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558a38ac7090 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558a38ac71d8 <col:69> "" ""
|-CXXMethodDecl 0x558a38ac72f0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x558a38ac7260 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x558a38ac7398 <col:62> "" ""
|-CXXMethodDecl 0x558a38ac7530 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558a38ac7420 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558a38ac7498 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x558a38ac75e0 <col:68> "" ""
|-CXXMethodDecl 0x558a38ac76f8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x558a38ac7668 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558a38ac77a0 <col:63> "" ""
|-CXXMethodDecl 0x558a38ac7938 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x558a38ac7828 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558a38ac78a0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x558a38ac79e8 <col:69> "" ""
|-CXXMethodDecl 0x558a38ac7a78 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558a38ac7b18 <col:64> "" ""
|-CXXMethodDecl 0x558a38ac7ba8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x558a38ac7c48 <col:52> "" ""
|-CXXMethodDecl 0x558a38ac7cd8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558a38ac7d78 <col:67> "" ""
|-CXXMethodDecl 0x558a38ac7e08 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x558a38ac7ea8 <col:55> "" ""
|-CXXMethodDecl 0x558a38ac7fc0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558a38ac7f30 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558a38ac8068 <col:58> "" ""
|-CXXMethodDecl 0x558a38ac8200 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558a38ac80f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x558a38ac8168 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558a38ac82b0 <col:62> "" ""
|-CXXMethodDecl 0x558a38ac83c8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x558a38ac8338 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558a38ac8470 <col:58> "" ""
|-CXXMethodDecl 0x558a38ac8608 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x558a38ac84f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x558a38ac8570 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x558a38ac86b8 <col:62> "" ""
|-CXXMethodDecl 0x558a38ac87d0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558a38ac8740 <col:34> col:37 'int'
| `-DeprecatedAttr 0x558a38ac8878 <col:60> "" ""
|-CXXMethodDecl 0x558a38ac8a10 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558a38ac8900 <col:34> col:37 'int'
| |-ParmVarDecl 0x558a38ac8978 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558a38ac8ac0 <col:64> "" ""
|-CXXMethodDecl 0x558a38ac8bd8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x558a38ac8b48 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558a38ac8c80 <col:58> "" ""
|-CXXMethodDecl 0x558a38ac8e18 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558a38ac8d08 <col:33> col:36 'int'
| |-ParmVarDecl 0x558a38ac8d80 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x558a38ac8ec8 <col:62> "" ""
|-CXXMethodDecl 0x558a38ac8fe0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558a38ac8f50 <col:33> col:36 'int'
| `-DeprecatedAttr 0x558a38ac9088 <col:59> "" ""
|-CXXMethodDecl 0x558a38ac9220 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558a38ac9110 <col:33> col:36 'int'
| |-ParmVarDecl 0x558a38ac9188 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558a38ac92d0 <col:63> "" ""
|-AccessSpecDecl 0x558a38ac9340 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x558a38ac9368 prev 0x558a38abe570 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558a38ac9460 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x558a38ac9550 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x558a38ac9678 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x558a38ac97f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x558a38ac9978 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x558a38ac9af8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x558a38ada928 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558a38adb198 <col:11>
| |-CXXDestructorDecl 0x558a38adaa00 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x558a38adab38 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558a38adab38
| | `-ParmVarDecl 0x558a38adac48 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x558a38adace8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558a38adace8
| | `-ParmVarDecl 0x558a38adadf8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x558a38addbb8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558a38addcc8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x558a38addf48 <col:11>
| |   `-ReturnStmt 0x558a38addf38 <col:11>
| |     `-UnaryOperator 0x558a38addf20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558a38addf10 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x558a38addd38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558a38addd38
|   `-ParmVarDecl 0x558a38adde48 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x558a38ac9b60 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558a38ac9c78 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x558a38ac9d18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x558a38ac9d80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x558a38ac9de8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x558a38ac9e50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x558a38ac9eb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x558a38ac9f70 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x558a38ac9fd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x558a38aca030 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x558a38ada838 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x558a38ac9d18 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x558a38adb1a8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x558a38adb200 <col:12>
| |-CXXConstructorDecl 0x558a38adae68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558a38adae68
| | `-ParmVarDecl 0x558a38adaf78 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x558a38adb018 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558a38adb018
| | `-ParmVarDecl 0x558a38adb128 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x558a38add2a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x558a38aca0a8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x558a38aca108 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x558a38aca170 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x558a38aca1d8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x558a38aca240 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x558a38aca2a8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x558a38aca308 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x558a38aca368 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x558a38aca3d0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x558a38aca458 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x558a38aca0a8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x558a38ada7d0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x558a38aca308 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x558a38adb210 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x558a38adb270 <col:21, line:755:5>
|-CXXConstructorDecl 0x558a38aca5f8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x558a38aca538 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x558a38aca6f0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x558a38aca8d8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x558a38aca7e0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x558a38acaba8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x558a38aca990 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a38acaa08 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558a38acaa80 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a38acadc8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x558a38acac78 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x558a38acacf0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x558a38ad33a8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x558a38acae88 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x558a38acaf00 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x558a38acaf78 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x558a38ad3500 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558a38ad3470 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a38ad3648 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558a38ad35b8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x558a38ad3740 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<4>
         0 |   char [4] x
           | [sizeof=4, dsize=4, align=1,
           |  nvsize=4, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a38b0afc0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 4
|-PackedAttr 0x558a38c1ed90 <line:167:18>
|-CXXRecordDecl 0x558a38c1ee50 prev 0x558a38b0afc0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x558a38c1ef60 <line:166:5, col:13> col:10 x 'char [4]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [4 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Vector<class IPAddress> >
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Vector<class IPAddress> * _ptr
        24 |   class Vector<class IPAddress> _slot
        24 |     class vector_memory<class sized_array_memory<4> > vm_
        24 |       vector_memory<class sized_array_memory<4> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a388258a8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a388259c8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x558a38825a90 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x558a388f6060 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558a388fb378 <col:8>
|-CXXConstructorDecl 0x558a388f6168 <col:8> col:8 implicit used constexpr in_addr 'void (const in_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x558a388f6278 <col:8> col:8 used 'const in_addr &'
| |-CXXCtorInitializer Field 0x558a38825a90 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a38bf4ba0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x558a38bf4b70 <col:8> 'const in_addr_t':'const unsigned int' lvalue .s_addr 0x558a38825a90
| |     `-DeclRefExpr 0x558a38bf4b50 <col:8> 'const in_addr' lvalue ParmVar 0x558a388f6278 '' 'const in_addr &'
| `-CompoundStmt 0x558a38bf4be8 <col:8>
|-CXXConstructorDecl 0x558a388f6318 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a388f6428 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x558a38825a90 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a388fb590 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x558a388fb560 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x558a38825a90
| |     `-CXXStaticCastExpr 0x558a388fb530 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x558a388fb500 <col:8> 'in_addr' lvalue ParmVar 0x558a388f6428 '' 'in_addr &&'
| `-CompoundStmt 0x558a388fb5d8 <col:8>
`-CXXDestructorDecl 0x558a388fb810 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a388edd48 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x558a388ede68 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x558a388edf50 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x558a388edf30 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x558a388edef8 <col:22> 'int' 4
|-FieldDecl 0x558a388edff8 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x558a388edfd8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x558a388edfa0 <col:21> 'int' 4
|-FieldDecl 0x558a388ee058 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x558a388ee0b8 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x558a388ee118 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x558a388ee178 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x558a388ee1d8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x558a388ee238 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x558a388ee298 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x558a388ee308 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x558a388ee378 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a388f0c90 prev 0x558a38856cd8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a388f0d88 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x558a388f0e18 <col:19, col:25> col:19 public
|-TypedefDecl 0x558a388f0e50 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x558a386e45d0 'uninitialized_type'
|   `-CXXRecord 0x558a386e4538 'uninitialized_type'
|-CXXConstructorDecl 0x558a388f0f10 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x558a388f5670 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a388f5718 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x558a388f56d8 <col:10> 'int' 0
| `-CompoundStmt 0x558a388f5760 <col:13, line:22:5>
|-CXXConstructorDecl 0x558a388f1060 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x558a388f0fd0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x558a388f5670 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a388f57b0 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x558a388f5770 <col:10> 'unsigned int' lvalue ParmVar 0x558a388f0fd0 'x' 'unsigned int'
| `-CompoundStmt 0x558a388f57f8 <col:13, line:27:5>
|-CXXConstructorDecl 0x558a388f11b8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x558a388f1128 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x558a388f5670 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a388f5860 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x558a388f5848 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x558a388f5808 <col:10> 'int' lvalue ParmVar 0x558a388f1128 'x' 'int'
| `-CompoundStmt 0x558a388f58a8 <col:13, line:31:5>
|-CXXConstructorDecl 0x558a388f1310 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x558a388f1280 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x558a388f5670 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a388f5910 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x558a388f58f8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x558a388f58b8 <col:10> 'unsigned long' lvalue ParmVar 0x558a388f1280 'x' 'unsigned long'
| `-CompoundStmt 0x558a388f5958 <col:13, line:35:5>
|-CXXConstructorDecl 0x558a388f1468 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x558a388f13d8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x558a388f5670 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a388f59c0 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x558a388f59a8 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x558a388f5968 <col:10> 'long' lvalue ParmVar 0x558a388f13d8 'x' 'long'
| `-CompoundStmt 0x558a388f5a08 <col:13, line:39:5>
|-CXXConstructorDecl 0x558a388f1628 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x558a388f1538 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x558a388f5670 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a388f5a88 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x558a388f5a38 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x558a38825a90
| |     `-DeclRefExpr 0x558a388f5a18 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x558a388f1538 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x558a388f5ad0 <col:20, line:44:5>
|-CXXConstructorDecl 0x558a388f17b8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x558a388f16f0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x558a388f5c38 <col:51, line:56:5>
|   `-BinaryOperator 0x558a388f5c18 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x558a388f5af0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x558a388f5670
|     | `-CXXThisExpr 0x558a388f5ae0 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x558a388f5c00 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x558a388f5be8 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x558a388f5bc8 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x558a388f5b98 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x558a388f5b80 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x558a388f5b20 <col:47> 'const unsigned char *' lvalue ParmVar 0x558a388f16f0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x558a388f1908 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x558a388f1878 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x558a388f1ab8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x558a388f19f8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x558a388f5ca8 <col:56, line:68:5>
|   `-CStyleCastExpr 0x558a388f5c80 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x558a388f5c50 <col:9> 'const uninitialized_type' lvalue ParmVar 0x558a388f19f8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x558a388f1c48 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x558a388f1b80 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x558a388f1d38 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x558a388f6c68 <col:46, line:83:5>
|   `-ReturnStmt 0x558a388f6c58 <line:82:2, col:29>
|     `-ExprWithCleanups 0x558a388f6c40 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x558a388f6c10 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x558a388f6ac8 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x558a388f69b0 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x558a388f6898 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x558a388f5cd0 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x558a388f1e28 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x558a388f6d18 <col:31, line:88:5>
|   `-ReturnStmt 0x558a388f6d08 <line:87:2, col:10>
|     `-UnaryOperator 0x558a388f6cf0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x558a388f6cd8 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x558a388f6cc0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x558a388f6c90 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a388f5670
|             `-CXXThisExpr 0x558a388f6c80 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x558a388f1ee8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x558a388f6d98 <col:34, line:93:5>
|   `-ReturnStmt 0x558a388f6d88 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x558a388f6d70 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x558a388f6d40 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a388f5670
|         `-CXXThisExpr 0x558a388f6d30 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x558a388f1fb8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x558a388f6e18 <col:38, line:101:5>
|   `-ReturnStmt 0x558a388f6e08 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x558a388f6df0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x558a388f6dc0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a388f5670
|         `-CXXThisExpr 0x558a388f6db0 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x558a388f2088 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x558a388f70e8 <col:38, line:108:5>
|   `-ReturnStmt 0x558a388f70d8 <line:107:2, col:58>
|     `-BinaryOperator 0x558a388f70b8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x558a388f6fd0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x558a388f6fb0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x558a388f6f98 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x558a388f6e40 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a388f5670
|       |   |   `-CXXThisExpr 0x558a388f6e30 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x558a388f6f70 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x558a388f6f58 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x558a388f6ed8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x558a38833fc8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x558a388f6eb8 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x558a388f7090 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x558a388f7078 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x558a388f7058 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x558a38833fc8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x558a388f7038 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x558a388f2148 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x558a388f7358 <col:39, line:112:5>
|   `-ReturnStmt 0x558a388f7348 <line:111:2, col:56>
|     `-BinaryOperator 0x558a388f7328 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x558a388f7240 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x558a388f7220 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x558a388f7208 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x558a388f7110 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a388f5670
|       |   |   `-CXXThisExpr 0x558a388f7100 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x558a388f71e0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x558a388f71c8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x558a388f71a8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x558a38833fc8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x558a388f7188 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x558a388f7300 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x558a388f72e8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x558a388f72c8 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x558a38833fc8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x558a388f72a8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x558a388f2278 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x558a388f2380 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x558a388f2490 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x558a388f4568 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558a388f4628 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x558a388f46f0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x558a388f48e8 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x558a388f47a0 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x558a388f4818 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x558a388f4a68 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x558a388f49a8 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x558a388f4bb0 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x558a388f4b20 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x558a388f4d58 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x558a388f4c68 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x558a388f4ea0 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x558a388f4e10 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x558a388f4fe8 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x558a388f4f58 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x558a388f50b0 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x558a388f5170 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x558a388f52e8 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x558a388f5220 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x558a388f53b0 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x558a388f5498 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x558a388f5540 <col:51> "" ""
|-TypedefDecl 0x558a388f55e0 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x558a38856d70 'IPAddress'
|   `-CXXRecord 0x558a388f0c90 'IPAddress'
|-AccessSpecDecl 0x558a388f5638 <line:150:3, col:10> col:3 private
|-FieldDecl 0x558a388f5670 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x558a388f5d18 <line:15:7> col:7 implicit used constexpr IPAddress 'void (const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x558a388f5e28 <col:7> col:7 used 'const IPAddress &'
| |-CXXCtorInitializer Field 0x558a388f5670 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a38c4cbf8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x558a38c4cbb0 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x558a388f5670
| |     `-DeclRefExpr 0x558a38c4cb90 <col:7> 'const IPAddress' lvalue ParmVar 0x558a388f5e28 '' 'const IPAddress &'
| `-CompoundStmt 0x558a38c4cc40 <col:7>
|-CXXConstructorDecl 0x558a388f5ec8 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a388f5fd8 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x558a388f5670 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a388f6bb8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x558a388f6b70 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x558a388f5670
| |     `-CXXStaticCastExpr 0x558a388f6b40 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x558a388f6b10 <col:7> 'IPAddress' lvalue ParmVar 0x558a388f5fd8 '' 'IPAddress &&'
| `-CompoundStmt 0x558a388f6c00 <col:7>
`-CXXDestructorDecl 0x558a388f68c8 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38bb4000 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a38bb4118 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x558a38bb41a8 <col:16, col:22> col:16 public
|-EnumDecl 0x558a38bb41d0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x558a38bb42d0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558a38bb4520 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bb42b0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x558a38bb4290 <col:21> 'int' 0
| |-EnumConstantDecl 0x558a38bb4360 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558a38bb4538 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bb4340 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x558a38bb4320 <col:24> 'int' 22
| |-EnumConstantDecl 0x558a38bb43f0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558a38bb4550 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bb43d0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x558a38bb43b0 <col:24> 'int' 34
| |-EnumConstantDecl 0x558a38bb4480 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558a38bb4568 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a38bb4460 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x558a38bb4440 <col:25> 'int' 95
| `-EnumConstantDecl 0x558a38bb44d0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x558a38bb5ee0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558a38bb6318 <col:7>
|-CXXConstructorDecl 0x558a38bb5fe8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x558a38bb5fe8
| `-ParmVarDecl 0x558a38bb60f8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x558a38bb6198 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a38bb62a8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x558a38c24dc0 <col:7>
`-CXXDestructorDecl 0x558a38bb8438 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a38bb4598 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x558a38bb46f8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x558a38bb4788 <col:32, col:38> col:32 public
|-TypedefDecl 0x558a38bb47c0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x558a386e48c0 'uint32_t' sugar
|   |-Typedef 0x558a385f84c8 'uint32_t'
|   `-TypedefType 0x558a385d15a0 '__uint32_t' sugar
|     |-Typedef 0x558a385d1198 '__uint32_t'
|     `-BuiltinType 0x558a3858f620 'unsigned int'
|-CXXConstructorDecl 0x558a38bb4908 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x558a38bb4830 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x558a38bb5de8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x558a38bb6328 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x558a38bb56a0 'base' 'int'
| | `-ImplicitCastExpr 0x558a38bb5e88 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x558a38bb5e48 <col:16> 'int' lvalue ParmVar 0x558a38bb4830 'b' 'int'
| `-CompoundStmt 0x558a38bb6398 <col:19, line:1046:5>
|-CXXMethodDecl 0x558a38bb4e00 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x558a38bb49d0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x558a38bb4a50 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x558a38bb4ac8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x558a38bb4b48 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x558a38bb4c08 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x558a38bb4c88 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x558a38bb5258 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x558a38bb4ed0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x558a38bb51b8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x558a38bb4f78 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x558a38bb5018 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x558a38bb5090 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x558a38bb5e08 <col:82> 'const ArgContext' lvalue Var 0x558a38baa028 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x558a38bb72c8 <col:94, line:1067:5>
| |   |-DeclStmt 0x558a38bb6528 <line:1054:9, col:64>
| |   | `-VarDecl 0x558a38bb63b8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x558a38bb64e0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x558a38bb6748 <line:1055:9, col:91>
| |   | `-VarDecl 0x558a38bb6558 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x558a38bb6720 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x558a38bb6700 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x558a38bb66b0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x558a38bb6690 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x558a38bb6638 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x558a38bb65e8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x558a38bb6618 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x558a38bb6678 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x558a38bb6658 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x558a38bb66e0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x558a38bb68a8 <line:1056:9, col:27>
| |   | `-VarDecl 0x558a38bb6840 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x558a38bb6cf0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x558a38bb6c20 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x558a38bb6ba0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x558a38aae888 0x558a388f7e68 0x558a388f7b40 0x558a388e8310 0x558a388e7fc0 0x558a388e78b0 0x558a388ba220 0x558a388476f0
| |   | | |-CallExpr 0x558a38bb6ae0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x558a38bb68d0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x558a38bb6980 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x558a38bb6950 <col:19, col:23> '<bound member function type>' .begin 0x558a388d7518
| |   | | | |   `-DeclRefExpr 0x558a38bb6930 <col:19> 'const String' lvalue ParmVar 0x558a38bb4f78 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x558a38bb69f0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x558a38bb69c0 <col:32, col:36> '<bound member function type>' .end 0x558a388d7730
| |   | | | |   `-DeclRefExpr 0x558a38bb69a0 <col:32> 'const String' lvalue ParmVar 0x558a38bb4f78 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x558a38bb6a10 <col:43> 'const bool' lvalue Var 0x558a38bb63b8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x558a38bb6a78 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x558a38bb6a58 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x558a38bb6aa0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x558a38bb6840 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x558a38bb6ac0 <col:73> 'const int' lvalue Var 0x558a38bb6558 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x558a38bb6b80 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x558a38bb6b50 <col:16, col:20> '<bound member function type>' .end 0x558a388d7730
| |   | |     `-DeclRefExpr 0x558a38bb6b30 <col:16> 'const String' lvalue ParmVar 0x558a38bb4f78 'str' 'const String &'
| |   | `-BinaryOperator 0x558a38bb6cd0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x558a38bb6c68 <col:13> 'int' lvalue ->status 0x558a38bb5708
| |   |   | `-CXXThisExpr 0x558a38bb6c58 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x558a38bb6cb8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x558a38bb6c98 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558a38bb4360 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x558a38bb6f40 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x558a38bb6e28 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x558a38bb6e10 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x558a38bb6df8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x558a38bb6d18 <col:13> 'int' lvalue ->status 0x558a38bb5708
| |   | | |     `-CXXThisExpr 0x558a38bb6d08 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x558a38bb6dd8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x558a38bb6da8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x558a38bb6d58 <col:23> 'int' lvalue ->status 0x558a38bb5708
| |   | |   |   `-CXXThisExpr 0x558a38bb6d48 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x558a38bb6dc0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x558a38bb6d88 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558a38bb43f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x558a38bb6f20 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x558a38bb6ec0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x558a38bb6e68 <col:13, col:18> '<bound member function type>' .error 0x558a38a74e60
| |   |   | | `-DeclRefExpr 0x558a38bb6e48 <col:13> 'const ArgContext' lvalue ParmVar 0x558a38bb5090 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x558a38bb6ee8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x558a38bb6e98 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x558a38bb6f10 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x558a38bb6f00 <col:20> 'bool' false
| |   |-DeclStmt 0x558a38bb7118 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x558a38bb70c0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x558a38bb7050 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x558a38bb7278 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x558a38bb7130 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x558a3887b6b8
| |   | |-DeclRefExpr 0x558a38bb7178 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x558a38bb6840 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x558a38bb7248 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x558a38bb71c0 <col:64> 'V' lvalue ParmVar 0x558a38bb5018 'result' 'V &'
| |   `-ReturnStmt 0x558a38bb72b8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x558a38bb72a8 <col:16> 'bool' true
| `-CXXMethodDecl 0x558a38c29f28 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x558a38c29d00 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x558a38c29dd8 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x558a38c29e40 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x558a38c2bcc0 <col:94, line:1067:5>
|     |-DeclStmt 0x558a38c2a738 <line:1054:9, col:64>
|     | `-VarDecl 0x558a38c2a558 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x558a38c2a6c8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x558a38c2a698 <col:36, col:55> 'const bool' lvalue Var 0x558a3886b628 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x558a38c2a918 <line:1055:9, col:91>
|     | `-VarDecl 0x558a38c2a750 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x558a38c2a898 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x558a38c2a880 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x558a38c2a860 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x558a38c2a840 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x558a38c2a820 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x558a38c2a7e8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x558a38c2a7c8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x558a38bb6618 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x558a38c2a808 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x558a38bb6658 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x558a38bb66e0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x558a38c2aab0 <line:1056:9, col:27>
|     | `-VarDecl 0x558a38c2aa48 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x558a38c2af38 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x558a38c2aee0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x558a38c2ad98 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x558a38c2ad68 <col:13> '<bound member function type>' ->parse 0x558a38bb4e00
|     | | | | `-CXXThisExpr 0x558a38c2ad58 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x558a38c2abf8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x558a38c2abc8 <col:19, col:23> '<bound member function type>' .begin 0x558a388d7518
|     | | | |   `-DeclRefExpr 0x558a38c2aba8 <col:19> 'const String' lvalue ParmVar 0x558a38c29d00 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x558a38c2ac68 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x558a38c2ac38 <col:32, col:36> '<bound member function type>' .end 0x558a388d7730
|     | | | |   `-DeclRefExpr 0x558a38c2ac18 <col:32> 'const String' lvalue ParmVar 0x558a38c29d00 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x558a38c2ae08 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x558a38c2ade8 <col:43> 'const bool' lvalue Var 0x558a38c2a558 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x558a38c2acf0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x558a38c2acd8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x558a38c2acb8 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x558a38c2ae20 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x558a38c2ad18 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x558a38c2aa48 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x558a38c2ae58 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x558a38c2ae38 <col:73> 'const int' lvalue Var 0x558a38c2a750 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x558a38c2aec0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x558a38c2ae90 <col:16, col:20> '<bound member function type>' .end 0x558a388d7730
|     | |     `-DeclRefExpr 0x558a38c2ae70 <col:16> 'const String' lvalue ParmVar 0x558a38c29d00 'str' 'const String &'
|     | `-BinaryOperator 0x558a38c2af18 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x558a38bb6c68 <col:13> 'int' lvalue ->status 0x558a38bb5708
|     |   | `-CXXThisExpr 0x558a38bb6c58 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x558a38c2af00 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x558a38bb6c98 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558a38bb4360 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x558a38c2b0b0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x558a38c2afd0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x558a38c2afb8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x558a38c2afa0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x558a38bb6d18 <col:13> 'int' lvalue ->status 0x558a38bb5708
|     | | |     `-CXXThisExpr 0x558a38bb6d08 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x558a38c2af80 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x558a38c2af50 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x558a38bb6d58 <col:23> 'int' lvalue ->status 0x558a38bb5708
|     | |   |   `-CXXThisExpr 0x558a38bb6d48 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x558a38c2af68 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x558a38bb6d88 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558a38bb43f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x558a38c2b090 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x558a38c2b040 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x558a38c2b010 <col:13, col:18> '<bound member function type>' .error 0x558a38a74e60
|     |   | | `-DeclRefExpr 0x558a38c2aff0 <col:13> 'const ArgContext' lvalue ParmVar 0x558a38c29e40 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x558a38c2b068 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x558a38bb6e98 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x558a38c2b080 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x558a38bb6f00 <col:20> 'bool' false
|     |-DeclStmt 0x558a38c2b5f8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x558a38c2b5a0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x558a38c2b550 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x558a38c2b530 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x558a38c2b4c0 'type'
|     |       `-ElaboratedType 0x558a38c2b470 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x558a38c2b450 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x558a3886b780 'unsigned_type'
|     |           `-BuiltinType 0x558a3858f620 'unsigned int'
|     |-CallExpr 0x558a38c2bc50 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x558a38c2bc38 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x558a38c2bbb8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x558a38c2ba98 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x558a3887b6b8 'extract_integer')
|     | |-ImplicitCastExpr 0x558a38c2bc98 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x558a38c2bc80 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x558a38c2b658 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x558a38c2aa48 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x558a38c2b728 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x558a38c2b6d8 <col:64> 'int':'int' lvalue ParmVar 0x558a38c29dd8 'result' 'int &'
|     `-ReturnStmt 0x558a38c2bcb0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x558a38bb72a8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x558a38bb5618 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x558a38bb52c8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x558a38bb5578 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x558a38bb5378 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x558a38bb5418 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x558a38bb5490 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x558a38bb5e28 <col:71> 'const ArgContext' lvalue Var 0x558a38baa028 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x558a38bb7a38 <col:83, line:1083:5>
| |   |-DeclStmt 0x558a38bb7390 <line:1071:9, col:12>
| |   | `-VarDecl 0x558a38bb7328 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x558a38bb7a10 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x558a38bb7620 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x558a38bb74a8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x558a38bb7470 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x558a38bb73b8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x558a38bb7410 <col:31> 'const String' lvalue ParmVar 0x558a38bb5378 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x558a38bb7430 <col:36> 'V' lvalue Var 0x558a38bb7328 'x' 'V'
| |     | |   `-DeclRefExpr 0x558a38bb7450 <col:39> 'const ArgContext' lvalue ParmVar 0x558a38bb5490 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x558a38bb7600 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x558a38bb75e0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x558a38bb75c8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x558a38bb75b0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x558a38bb74d0 <col:17> 'int' lvalue ->status 0x558a38bb5708
| |     |     |     `-CXXThisExpr 0x558a38bb74c0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x558a38bb7590 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x558a38bb7560 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x558a38bb7510 <col:27> 'int' lvalue ->status 0x558a38bb5708
| |     |       |   `-CXXThisExpr 0x558a38bb7500 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x558a38bb7578 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x558a38bb7540 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558a38bb43f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x558a38bb7650 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x558a38bb7640 <col:20> 'bool' false
| |     `-IfStmt 0x558a38bb79e8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x558a38bb76f0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x558a38bb76c0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x558a38bb7670 <col:18> 'int' lvalue ->status 0x558a38bb5708
| |       | |   `-CXXThisExpr 0x558a38bb7660 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x558a38bb76d8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x558a38bb76a0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558a38bb43f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x558a38bb7928 <col:42, line:1079:9>
| |       | |-CallExpr 0x558a38bb78d0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x558a38bb7720 <line:1076:13> '<bound member function type>' ->range_error 0x558a38bb5d18
| |       | | | `-CXXThisExpr 0x558a38bb7710 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x558a38bb7750 <col:25> 'const ArgContext' lvalue ParmVar 0x558a38bb5490 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x558a38bb7830 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x558a38bb78a8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x558a38bb7888 <col:43> 'V' lvalue Var 0x558a38bb7328 'x' 'V'
| |       | `-ReturnStmt 0x558a38bb7918 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x558a38bb7908 <col:20> 'bool' false
| |       `-CompoundStmt 0x558a38bb79c8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x558a38bb7988 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x558a38bb7948 <col:13> 'V' lvalue ParmVar 0x558a38bb5418 'result' 'V &'
| |         | `-DeclRefExpr 0x558a38bb7968 <col:22> 'V' lvalue Var 0x558a38bb7328 'x' 'V'
| |         `-ReturnStmt 0x558a38bb79b8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x558a38bb79a8 <col:20> 'bool' true
| `-CXXMethodDecl 0x558a38c298e8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x558a38c296c0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x558a38c29798 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x558a38c29800 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x558a38c2a538 <col:83, line:1083:5>
|     |-DeclStmt 0x558a38c29b70 <line:1071:9, col:12>
|     | `-VarDecl 0x558a38c29b08 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x558a38c2a510 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x558a38c2a1a0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x558a38c2a0c8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x558a38c2a090 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x558a38c2a048 <col:14> '<bound member function type>' ->parse_saturating 0x558a38c29f28
|       | |   | `-CXXThisExpr 0x558a38c2a038 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x558a38c29be0 <col:31> 'const String' lvalue ParmVar 0x558a38c296c0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x558a38c29c00 <col:36> 'int':'int' lvalue Var 0x558a38c29b08 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x558a38c29c20 <col:39> 'const ArgContext' lvalue ParmVar 0x558a38c29800 'args' 'const ArgContext &'
|       | `-ParenExpr 0x558a38c2a180 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x558a38c2a160 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x558a38c2a148 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x558a38c2a130 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x558a38bb74d0 <col:17> 'int' lvalue ->status 0x558a38bb5708
|       |     |     `-CXXThisExpr 0x558a38bb74c0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x558a38c2a110 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x558a38c2a0e0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x558a38bb7510 <col:27> 'int' lvalue ->status 0x558a38bb5708
|       |       |   `-CXXThisExpr 0x558a38bb7500 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x558a38c2a0f8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x558a38bb7540 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558a38bb43f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x558a38c2a1c0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x558a38bb7640 <col:20> 'bool' false
|       `-IfStmt 0x558a38c2a4e8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x558a38c2a200 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x558a38c2a1d0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x558a38bb7670 <col:18> 'int' lvalue ->status 0x558a38bb5708
|         | |   `-CXXThisExpr 0x558a38bb7660 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x558a38c2a1e8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x558a38bb76a0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558a38bb43f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x558a38c2a420 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x558a38c2a390 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x558a38bb7720 <line:1076:13> '<bound member function type>' ->range_error 0x558a38bb5d18
|         | | | `-CXXThisExpr 0x558a38bb7710 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x558a38c2a220 <col:25> 'const ArgContext' lvalue ParmVar 0x558a38c29800 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x558a38c2a3f8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x558a38c2a3c8 <col:31, col:50> 'const bool' lvalue Var 0x558a3886b628 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x558a38c2a368 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x558a38c2a350 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x558a38c2a338 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x558a38c2a318 <col:43> 'int':'int' lvalue Var 0x558a38c29b08 'x' 'int':'int'
|         | `-ReturnStmt 0x558a38c2a410 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x558a38bb7908 <col:20> 'bool' false
|         `-CompoundStmt 0x558a38c2a4c8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x558a38c2a498 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x558a38c2a440 <col:13> 'int':'int' lvalue ParmVar 0x558a38c29798 'result' 'int &'
|           | `-ImplicitCastExpr 0x558a38c2a480 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x558a38c2a460 <col:22> 'int':'int' lvalue Var 0x558a38c29b08 'x' 'int':'int'
|           `-ReturnStmt 0x558a38c2a4b8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x558a38bb79a8 <col:20> 'bool' true
|-FieldDecl 0x558a38bb56a0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x558a38bb5708 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x558a38bb5758 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x558a38bb5a10 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x558a38bb5798 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x558a38bb5818 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x558a38bb5890 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x558a38bb5910 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x558a38bb5d18 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x558a38bb5ae0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x558a38bb5b58 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x558a38bb5bf0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x558a38bb82b8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x558a38bb82b8
| `-ParmVarDecl 0x558a38bb83c8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x558a38bb8548 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a38bb8658 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x558a38c24dd0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558a38c24da0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x558a38c24d70 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x558a38c24d40 <col:7> 'IntArg' lvalue ParmVar 0x558a38bb8658 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x558a38bb56a0 'base' 'int'
| | `-ImplicitCastExpr 0x558a38c24ec8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558a38c24e98 <col:7> 'int' xvalue .base 0x558a38bb56a0
| |     `-CXXStaticCastExpr 0x558a38c24e68 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x558a38c24e38 <col:7> 'IntArg' lvalue ParmVar 0x558a38bb8658 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x558a38bb5708 'status' 'int'
| | `-ImplicitCastExpr 0x558a38c24f98 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558a38c24f68 <col:7> 'int' xvalue .status 0x558a38bb5708
| |     `-CXXStaticCastExpr 0x558a38c24f38 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x558a38c24f08 <col:7> 'IntArg' lvalue ParmVar 0x558a38bb8658 '' 'IntArg &&'
| `-CompoundStmt 0x558a38c24ff0 <col:7>
`-CXXDestructorDecl 0x558a38c23f30 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a38bbcb80 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x558a38bbcdd8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x558a38c23e58 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x558a38c243d0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x558a38c243b0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x558a38c24440 <col:19>
|-CXXConstructorDecl 0x558a38c24038 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x558a38c24038
| `-ParmVarDecl 0x558a38c24148 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x558a38c241e8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a38c242f8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x558a38c25000 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558a38c24d20 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x558a38c24cf0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x558a38c24cc0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x558a38c242f8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x558a38c25070 <col:19>
`-CXXDestructorDecl 0x558a38c24480 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a38c373d8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'Vector<IPAddress>'
|-CXXRecordDecl 0x558a38c377d8 prev 0x558a38c373d8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x558a38c37a00 <line:852:9, line:854:9> line:852:9 used SlotT 'void (Vector<IPAddress> *)'
| |-ParmVarDecl 0x558a38c378d8 <col:15, col:18> col:18 used ptr 'Vector<IPAddress> *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x558a38c38948 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x558a38c37b80 '_ptr' 'Vector<IPAddress> *'
| | `-ImplicitCastExpr 0x558a38c38908 <line:853:20> 'Vector<IPAddress> *' <LValueToRValue>
| |   `-DeclRefExpr 0x558a38c388c8 <col:20> 'Vector<IPAddress> *' lvalue ParmVar 0x558a38c378d8 'ptr' 'Vector<IPAddress> *'
| |-CXXCtorInitializer Field 0x558a38c37be0 '_slot' 'Vector<IPAddress>':'Vector<IPAddress>'
| | `-CXXConstructExpr 0x558a38c389a8 <line:852:9> 'Vector<IPAddress>':'Vector<IPAddress>' 'void ()'
| `-CompoundStmt 0x558a38ba9e50 <line:853:25, line:854:9>
|-CXXMethodDecl 0x558a38c37ac0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x558a38b84a50 Slot::store 'void ()' ]
| `-CompoundStmt 0x558a38c39500 <col:22, line:857:9>
|   `-CallExpr 0x558a38c394d0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x558a38c394b8 <col:13> 'void (*)(Vector<IPAddress> &, Vector<IPAddress> &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x558a38c39438 <col:13> 'void (Vector<IPAddress> &, Vector<IPAddress> &)' lvalue Function 0x558a38c38f68 'assign_consume' 'void (Vector<IPAddress> &, Vector<IPAddress> &)' (FunctionTemplate 0x558a388a6a58 'assign_consume')
|     |-UnaryOperator 0x558a38c38b38 <col:28, col:29> 'Vector<IPAddress>':'Vector<IPAddress>' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x558a38c38b20 <col:29> 'Vector<IPAddress> *' <LValueToRValue>
|     |   `-MemberExpr 0x558a38c38af0 <col:29> 'Vector<IPAddress> *' lvalue ->_ptr 0x558a38c37b80
|     |     `-CXXThisExpr 0x558a38c38ae0 <col:29> 'Args::SlotT<Vector<IPAddress> > *' implicit this
|     `-MemberExpr 0x558a38c38b60 <col:35> 'Vector<IPAddress>':'Vector<IPAddress>' lvalue ->_slot 0x558a38c37be0
|       `-CXXThisExpr 0x558a38c38b50 <col:35> 'Args::SlotT<Vector<IPAddress> > *' implicit this
|-FieldDecl 0x558a38c37b80 <line:858:9, col:12> col:12 referenced _ptr 'Vector<IPAddress> *'
|-FieldDecl 0x558a38c37be0 <line:859:9, col:11> col:11 referenced _slot 'Vector<IPAddress>':'Vector<IPAddress>'
|-CXXConstructorDecl 0x558a38c37c58 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<Vector<IPAddress> > &)' inline default noexcept-unevaluated 0x558a38c37c58
| `-ParmVarDecl 0x558a38c37d68 <col:12> col:12 'const Args::SlotT<Vector<IPAddress> > &'
|-CXXConstructorDecl 0x558a38c37e08 <col:12> col:12 implicit SlotT 'void (Args::SlotT<Vector<IPAddress> > &&)' inline default noexcept-unevaluated 0x558a38c37e08
| `-ParmVarDecl 0x558a38c37f18 <col:12> col:12 'Args::SlotT<Vector<IPAddress> > &&'
|-CXXMethodDecl 0x558a38c37fb8 <col:12> col:12 implicit operator= 'Args::SlotT<Vector<IPAddress> > &(const Args::SlotT<Vector<IPAddress> > &)' inline default noexcept-unevaluated 0x558a38c37fb8
| `-ParmVarDecl 0x558a38c380c8 <col:12> col:12 'const Args::SlotT<Vector<IPAddress> > &'
|-CXXMethodDecl 0x558a38c38138 <col:12> col:12 implicit operator= 'Args::SlotT<Vector<IPAddress> > &(Args::SlotT<Vector<IPAddress> > &&)' inline default noexcept-unevaluated 0x558a38c38138
| `-ParmVarDecl 0x558a38c38248 <col:12> col:12 'Args::SlotT<Vector<IPAddress> > &&'
`-CXXDestructorDecl 0x558a38c382d0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x558a38b84950 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x558a38c38a10 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.Vector*, %class.Vector }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.Vector*, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<Vector<class IPAddress> > (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a388fe670 prev 0x558a388f0a58 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a388fe768 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x558a388fe7f8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x558a388fec20 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x558a388fe838 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x558a388fe8b8 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x558a388fe9f0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x558a388feaa0 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x558a388feee8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x558a388fecf0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x558a388fed68 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x558a388fee08 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x558a38903888 <col:34> 'const ArgContext' lvalue Var 0x558a388f09f0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x558a389032e0 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x558a388fefb0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x558a388ff0a0 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x558a388ff118 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x558a389038a8 <col:34> 'const ArgContext' lvalue Var 0x558a388f09f0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x558a38903a88 <col:46, line:375:5>
|   `-ReturnStmt 0x558a38903a78 <line:374:2, col:63>
|     `-CallExpr 0x558a38903a40 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x558a38903a28 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558a389039e0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x558a388feee8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x558a38903940 <col:15> 'const String' lvalue ParmVar 0x558a388fefb0 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x558a38903990 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x558a38903960 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x558a388ff0a0 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x558a389039c0 <col:59> 'const ArgContext' lvalue ParmVar 0x558a388ff118 'args' 'const ArgContext &'
|-CXXMethodDecl 0x558a389037b8 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x558a389033a8 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x558a38903620 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x558a38903698 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x558a389038c8 <col:34> 'const ArgContext' lvalue Var 0x558a388f09f0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x558a38c49dc8 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x558a38c4aee0 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558a38c4b018 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x558a38c4b018
| `-ParmVarDecl 0x558a38c4b128 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x558a38c4b1c8 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x558a38c4b2d8 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x558a38c4bf30 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a38904fd0 <../dummy_inc/click/ipaddress.hh:400:1, col:73> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'Vector<IPAddress>'
|-CXXRecordDecl 0x558a38905228 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x558a38c49cd8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558a38c4b348 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<Vector<IPAddress> > &)' inline default trivial noexcept-unevaluated 0x558a38c4b348
| `-ParmVarDecl 0x558a38c4b458 <col:19> col:19 'const DefaultArg<Vector<IPAddress> > &'
|-CXXConstructorDecl 0x558a38c4b4f8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<Vector<IPAddress> > &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a38c4b608 <col:19> col:19 used 'DefaultArg<Vector<IPAddress> > &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x558a38c4bf40 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558a38c4bf10 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x558a38c4bee0 <col:19> 'DefaultArg<Vector<IPAddress> >' xvalue static_cast<struct DefaultArg<Vector<class IPAddress> > &&> <NoOp>
| |       `-DeclRefExpr 0x558a38c4beb0 <col:19> 'DefaultArg<Vector<IPAddress> >' lvalue ParmVar 0x558a38c4b608 '' 'DefaultArg<Vector<IPAddress> > &&'
| `-CompoundStmt 0x558a38c4bfb0 <col:19>
`-CXXDestructorDecl 0x558a38c4b6a8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
