
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2635ca38 prev 0x55ba263541d8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2635cb30 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55ba2635cbc0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55ba2635cc38 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55ba2635ccf8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55ba2635cdc0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55ba2635cf38 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55ba2635ce70 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55ba2635cfe0 <col:24>
| `-OptimizeNoneAttr 0x55ba2635d038 <col:34>
|-CXXMethodDecl 0x55ba2635d080 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55ba2635d338 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55ba2635d130 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55ba2635d1a8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55ba2635d228 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55ba2635d3f0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55ba2635d428 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55ba2635d490 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55ba2635d518 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55ba2635d838 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55ba2635d5d0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55ba2635d648 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55ba2635d6c0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55ba2635d740 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55ba2635d950 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55ba263652c8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55ba263652c8
| `-ParmVarDecl 0x55ba263653d8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55ba26365478 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55ba26365478
| `-ParmVarDecl 0x55ba26365588 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55ba26433598 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2634fa50 prev 0x55ba2634f7d0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba2634fb48 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55ba2634fbd8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55ba2634fc38 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55ba2634fd28 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55ba2634fe28 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55ba2634fff8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55ba2634fea8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55ba2634ff20 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55ba26350188 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55ba263500c0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55ba26350230 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55ba26350368 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55ba263502a0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55ba26350508 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55ba26350448 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55ba263506a8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55ba263505e8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55ba26350750 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55ba26350850 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55ba26350930 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26350830 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55ba26350810 <col:26> 'int' 1
| `-EnumConstantDecl 0x55ba263508e0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55ba26350948 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba263508c0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55ba263508a0 <col:44> 'int' 2
|-CXXMethodDecl 0x55ba26350a90 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55ba26350978 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55ba263509f8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55ba26350be8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55ba26350b58 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55ba26350e28 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55ba26350ca8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55ba26350d20 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55ba26350ed8 <col:20>
| `-OptimizeNoneAttr 0x55ba26350f30 <col:30>
|-CXXMethodDecl 0x55ba26351038 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55ba26350f70 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55ba263510e0 <col:20>
| `-OptimizeNoneAttr 0x55ba26351138 <col:30>
|-CXXMethodDecl 0x55ba26351188 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55ba26351250 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55ba26351368 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55ba263513f0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55ba26351478 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55ba26351500 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55ba26351588 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55ba26351618 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55ba263516d8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55ba26351760 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55ba263517e8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55ba26351870 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55ba263518f8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55ba26351980 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55ba26351a10 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55ba26351ad0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55ba26351b60 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55ba26351cb0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55ba26351c18 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55ba26351e40 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55ba26351d70 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55ba263520f0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55ba26351ef8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55ba26351f78 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55ba26351ff8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55ba263521a8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55ba263522b0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ba26352540 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26352290 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba26352270 <col:33> 'int' 0
| |-EnumConstantDecl 0x55ba26352340 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ba26352558 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26352320 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55ba26352300 <col:32> 'int' 20
| |-EnumConstantDecl 0x55ba263523d0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ba26352570 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba263523b0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55ba26352390 <col:38> 'int' 90
| |-EnumConstantDecl 0x55ba26352460 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ba26352588 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26352440 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55ba26352420 <col:35> 'int' 100
| `-EnumConstantDecl 0x55ba263524f0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55ba263525a0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba263524d0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55ba263524b0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55ba263525e0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55ba26352a20 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55ba26352890 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55ba26352908 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba26352af0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55ba26352c70 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55ba26352ba0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba26352e78 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55ba26352d28 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55ba26352da0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba26352f78 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55ba26353018 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55ba263530e0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba26353170 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55ba263533a0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26353150 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55ba26353130 <col:36> 'int' EnumConstant 0x55ba263530e0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba263531c0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba26353210 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba26353260 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba263532b0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba26353300 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55ba26353350 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55ba26353488 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55ba263533c8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55ba26353550 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55ba26353610 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55ba263536d0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55ba26353790 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55ba263538a8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55ba26353970 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55ba26353af0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55ba26353a20 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55ba26353c18 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55ba26353e18 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55ba26353cc8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55ba26353d48 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55ba26361768 <col:54, line:127:5>
|   |-ParenExpr 0x55ba26361618 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55ba263615e8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55ba263612d8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55ba263612b0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55ba26361298 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55ba26361280 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55ba26361250 <col:31> 'Router *' lvalue ->_router 0x55ba2635f130
|   |   |         `-CXXThisExpr 0x55ba26361240 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55ba26361338 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26361318 <col:48> 'int' 0
|   |   `-CallExpr 0x55ba26361548 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55ba26361530 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26361510 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26361588 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba263613a8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55ba263615a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba263613c8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55ba263615b8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26361400 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55ba263615d0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba263614f8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba263614e0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26361498 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55ba263616b0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55ba26361648 <col:9> 'Router *' lvalue ->_router 0x55ba2635f130
|   | | `-CXXThisExpr 0x55ba26361638 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55ba26361698 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ba26361678 <col:19> 'Router *' lvalue ParmVar 0x55ba26353cc8 'r' 'Router *'
|   `-BinaryOperator 0x55ba26361748 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55ba263616e0 <col:9> 'int' lvalue ->_eindex 0x55ba2635f198
|     | `-CXXThisExpr 0x55ba263616d0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55ba26361730 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55ba26361710 <col:19> 'int' lvalue ParmVar 0x55ba26353d48 'eindex' 'int'
|-CXXMethodDecl 0x55ba26353fa0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55ba26353ed8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55ba26354070 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55ba26354138 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55ba263541d8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55ba26354428 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55ba263542a0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55ba26354320 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55ba263544d8 <col:20>
| `-OptimizeNoneAttr 0x55ba26354530 <col:30>
|-CXXMethodDecl 0x55ba26354638 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55ba26354570 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55ba263546e0 <col:20>
| `-OptimizeNoneAttr 0x55ba26354738 <col:30>
|-CXXMethodDecl 0x55ba26354808 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55ba26354778 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55ba263548b0 <col:20>
| `-OptimizeNoneAttr 0x55ba26354908 <col:30>
|-CXXMethodDecl 0x55ba26354a98 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55ba26354940 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55ba263549c0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55ba26354c28 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55ba26354b60 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55ba26354d78 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55ba26354ce8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55ba26354ec8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55ba26354e38 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55ba26355018 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55ba26354f88 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55ba263552d8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55ba263550d0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55ba26355150 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55ba263551f8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55ba263553b0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55ba26355470 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55ba26355740 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55ba263555f0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55ba26355668 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55ba26355868 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55ba26355a40 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55ba26355920 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55ba263559a0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55ba26355c28 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55ba26355b08 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55ba26355b88 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55ba26355f98 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55ba26355ce8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55ba26355d60 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55ba26355de0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55ba26360d50 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba26360d30 <col:106> 'int' 0
| `-ParmVarDecl 0x55ba26355e58 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba26360d88 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba26360d68 <col:126> 'int' 0
|-CXXMethodDecl 0x55ba26356338 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ba26356068 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55ba26356100 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55ba26356180 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55ba263561f8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba26360dc0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba26360da0 <col:114> 'int' 0
|-CXXMethodDecl 0x55ba263566c8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ba26356410 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55ba26356488 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55ba26356508 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55ba26360dd8 <col:96> 'int' 0
| `-ParmVarDecl 0x55ba26356580 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba26360e18 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba26360df8 <col:116> 'int' 0
|-CXXMethodDecl 0x55ba26356a48 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55ba26356798 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55ba26356810 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba26356890 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55ba26360e50 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba26360e30 <col:109> 'int' 0
| `-ParmVarDecl 0x55ba26356908 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba26360e88 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba26360e68 <col:129> 'int' 0
|-CXXMethodDecl 0x55ba26356dc8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ba26356b18 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55ba26356b90 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba26356c10 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55ba26356c88 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba26360ec0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba26360ea0 <col:117> 'int' 0
|-CXXMethodDecl 0x55ba26357158 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ba26356ea0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba26356f18 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba26356f98 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55ba26360ed8 <col:99> 'int' 0
| `-ParmVarDecl 0x55ba26357010 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba26360f18 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba26360ef8 <col:119> 'int' 0
|-CXXMethodDecl 0x55ba26357578 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55ba26357228 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55ba263572a8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55ba26357320 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba263573a0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55ba26360f50 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba26360f30 <col:108> 'int' 0
| `-ParmVarDecl 0x55ba26357420 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55ba26360f88 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55ba26360f68 <col:141> 'int' 0
|-CXXMethodDecl 0x55ba26357998 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55ba26357650 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55ba263576d0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55ba26357748 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba263577c8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55ba26357848 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55ba26360fa0 <col:121> 'int' 0
|-CXXMethodDecl 0x55ba26357dc8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55ba26357a78 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55ba26357af8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55ba26357b70 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba26357bf0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55ba26360fc0 <col:98> 'int' 0
| `-ParmVarDecl 0x55ba26357c70 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55ba26360fe0 <col:123> 'int' 0
|-CXXMethodDecl 0x55ba26358090 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55ba26357ea0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55ba26357f20 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55ba26357fa0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55ba26361000 <col:80> 'int' 0
|-EnumDecl 0x55ba26358148 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55ba26358250 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ba263584e0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26358230 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55ba26358210 <col:42> 'int' 1
| |-EnumConstantDecl 0x55ba263582e0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ba263584f8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba263582c0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55ba263582a0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55ba26358370 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ba26358510 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26358350 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55ba26358330 <col:44> 'int' 4
| |-EnumConstantDecl 0x55ba26358400 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ba26358528 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba263583e0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55ba263583c0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55ba26358490 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55ba26358540 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba26358470 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55ba26358450 <col:34> 'int' 6
|-CXXMethodDecl 0x55ba263587f8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55ba26358568 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55ba26358608 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55ba26358688 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55ba26358700 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55ba263610b8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55ba263610a0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55ba26361088 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55ba26361068 <col:98, col:105> 'String' (CXXTemporary 0x55ba26361068)
|           `-CXXTemporaryObjectExpr 0x55ba26361030 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55ba26358a98 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55ba263588c8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55ba26358940 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55ba263589b8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55ba26361168 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55ba26361150 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55ba26361138 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55ba26361118 <col:94, col:101> 'String' (CXXTemporary 0x55ba26361118)
| |         `-CXXTemporaryObjectExpr 0x55ba263610e0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55ba26361950 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55ba263618c8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55ba26361898 <col:9> '<bound member function type>' ->add_task_handlers 0x55ba263587f8
|     | `-CXXThisExpr 0x55ba26361888 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55ba26361908 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba26361808 <col:27> 'Task *' lvalue ParmVar 0x55ba263588c8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55ba26361920 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba26361828 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55ba26358940 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55ba26361938 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55ba26361848 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55ba26358490 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55ba26361868 <col:62> 'const String' lvalue ParmVar 0x55ba263589b8 'prefix' 'const String &'
|-CXXMethodDecl 0x55ba26358ca8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55ba26358b60 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55ba26358bd8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55ba26361218 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55ba26361200 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55ba263611e8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55ba263611c8 <col:70, col:77> 'String' (CXXTemporary 0x55ba263611c8)
| |         `-CXXTemporaryObjectExpr 0x55ba26361190 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55ba26361b28 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55ba26361aa0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55ba26361a70 <col:9> '<bound member function type>' ->add_task_handlers 0x55ba263587f8
|     | `-CXXThisExpr 0x55ba26361a60 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55ba26361ae0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba263619e0 <col:27> 'Task *' lvalue ParmVar 0x55ba26358b60 'task' 'Task *'
|     |-ImplicitCastExpr 0x55ba26361af8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55ba26361a00 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55ba26361b10 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55ba26361a20 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55ba26358490 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55ba26361a40 <col:57> 'const String' lvalue ParmVar 0x55ba26358bd8 'prefix' 'const String &'
|-CXXMethodDecl 0x55ba26358f88 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55ba26358d70 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba26358df0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba26358e68 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55ba26359238 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55ba26359058 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba263590d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba26359158 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55ba26359528 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55ba26359308 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba26359388 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba26359400 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55ba263597d8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55ba263595f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba26359678 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba263596f8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55ba26359a88 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55ba263598a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba26359928 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba263599a8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55ba26359d38 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55ba26359b58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba26359bd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba26359c50 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55ba26359fe8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55ba26359e08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba26359e88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba26359f08 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55ba2635a2f8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55ba2635a110 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2635a190 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2635a210 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55ba2635a5d8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55ba2635a3c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2635a448 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2635a4f0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55ba2635a8b8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55ba2635a6a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2635a728 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2635a7d0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55ba2635ab20 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55ba2635a988 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55ba2635aa08 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55ba2635aa80 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55ba2635adc8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55ba2635abf0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55ba2635ac70 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55ba2635ace8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55ba2635b078 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55ba2635ae98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2635af18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2635af98 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55ba2635b328 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55ba2635b148 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2635b1c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2635b240 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55ba2635b5d8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55ba2635b3f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2635b478 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2635b4f0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55ba2635b8a8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55ba2635b6a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2635b728 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2635b7c8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55ba2635bbd8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55ba2635b978 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2635b9f8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55ba2635ba70 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55ba2635bae8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba26361230 <col:93> 'bool' false
|-CXXMethodDecl 0x55ba2635bdc0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ba2635bca8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55ba2635bd28 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55ba2635bf98 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ba2635be80 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55ba2635bf00 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55ba2635c278 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55ba2635c058 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55ba2635c0d0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55ba2635c150 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55ba2635c1c8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2635c568 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55ba2635c348 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55ba2635c3c0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55ba2635c440 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55ba2635c4b8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2635c7a0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55ba2635c640 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55ba2635c6c0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55ba2635c988 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55ba2635c868 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55ba2635c8e8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55ba2635ca38 prev 0x55ba263541d8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ba2635cb30 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55ba2635cbc0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55ba2635cc38 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55ba2635ccf8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55ba2635cdc0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55ba2635cf38 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55ba2635ce70 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55ba2635cfe0 <col:24>
| | `-OptimizeNoneAttr 0x55ba2635d038 <col:34>
| |-CXXMethodDecl 0x55ba2635d080 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55ba2635d338 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55ba2635d130 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55ba2635d1a8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55ba2635d228 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55ba2635d3f0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55ba2635d428 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55ba2635d490 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55ba2635d518 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55ba2635d838 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55ba2635d5d0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55ba2635d648 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55ba2635d6c0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55ba2635d740 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55ba2635d950 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55ba263652c8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55ba263652c8
| | `-ParmVarDecl 0x55ba263653d8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55ba26365478 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55ba26365478
| | `-ParmVarDecl 0x55ba26365588 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55ba26433598 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ba2635d9c8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55ba2635da68 <col:38> "" ""
|-CXXMethodDecl 0x55ba2635daf8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55ba2635db98 <col:44> "" ""
|-AccessSpecDecl 0x55ba2635dc08 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55ba2635dc30 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55ba2635dd30 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55ba2635dd80 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2635dd10 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55ba2635dcf0 <col:27> 'int' 4
|-FieldDecl 0x55ba2635de38 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55ba2635dfe8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55ba2635e0a0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55ba2635f130 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55ba2635f198 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55ba2635f2e8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55ba2635f228 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55ba2635f498 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55ba2635f3a8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55ba2635f678 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55ba2635f558 <col:20> col:23 'int'
| `-ParmVarDecl 0x55ba2635f5d8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55ba2635f920 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2635f740 <col:23> col:26 'int'
| |-ParmVarDecl 0x55ba2635f7c0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55ba2635f838 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55ba2635f9d8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55ba2635faa0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55ba2635faf0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55ba2635fb40 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55ba2635fd20 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55ba2635fbd0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55ba2635fc48 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2635ffc8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55ba2635fde8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55ba2635fe68 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55ba2635fee0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55ba263601e8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55ba26360098 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55ba26360118 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55ba26360520 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55ba263602a8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55ba26360328 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55ba263603a0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55ba26360420 <col:57> col:60 'int'
|-CXXMethodDecl 0x55ba26360708 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ba263605f0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55ba26360670 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55ba26360858 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55ba263607c8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55ba26360bd8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55ba26360918 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55ba26360998 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55ba26360a10 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55ba26360a90 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55ba26360cf0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class MarkIPCE
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _force
       112 |   class atomic_uint32_t _drops
       112 |     uint32_t _val
           | [sizeof=120, dsize=116, align=8,
           |  nvsize=116, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2610e500 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2610e618 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55ba2610e6a8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55ba2610e778 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55ba2610e860 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2610ea78 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55ba2610e920 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2610ec28 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55ba2610eb30 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55ba2610ed70 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55ba2610ece0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55ba2610eeb8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55ba2610ee28 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2610f000 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55ba2610ef70 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2610f0c8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55ba2610f210 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55ba2610f180 <col:28> col:31 'int'
|-CXXMethodDecl 0x55ba2610f2d8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55ba2610f420 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55ba2610f390 <col:28> col:31 'int'
|-CXXMethodDecl 0x55ba2610f598 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55ba2610f4d8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2610f6e0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55ba2610f650 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2610f7a8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55ba2610f968 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55ba2610f858 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ba2610f8d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2610fbb8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55ba2610fa28 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba2610faa0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ba2610fc68 <col:86> "" ""
|-CXXMethodDecl 0x55ba2610fed8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55ba2610fd48 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55ba2610fdc0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba26110088 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55ba2610ff98 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55ba26110238 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55ba26110140 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55ba26110508 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55ba261102f0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55ba26110368 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ba261103e0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba261107e8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55ba261105d0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55ba26110648 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba261106c0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ba261108a0 <col:115> "" ""
|-AccessSpecDecl 0x55ba26110910 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55ba26110948 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba26110e50 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55ba26110e50
| `-ParmVarDecl 0x55ba26110f58 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55ba26110ff8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55ba26110ff8
| `-ParmVarDecl 0x55ba26111108 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55ba26146738 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ba26339540 <col:7>
|-CXXConstructorDecl 0x55ba26146810 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55ba26146810
| `-ParmVarDecl 0x55ba26146928 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55ba26146998 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55ba26146998
| `-ParmVarDecl 0x55ba26146aa8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55ba2633bf40 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba26368438 <../elements/ip/markipce.hh:23:1, line:41:1> line:23:7 class MarkIPCE definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55ba26368598 <col:1, col:7> col:7 implicit referenced class MarkIPCE
|-AccessSpecDecl 0x55ba26368628 <col:35, col:41> col:35 public
|-CXXConstructorDecl 0x55ba263686b0 <line:25:5, col:14> col:5 MarkIPCE 'void ()'
|-CXXDestructorDecl 0x55ba263687a0 <line:26:5, col:15> col:5 ~MarkIPCE 'void ()' noexcept-unevaluated 0x55ba263687a0
| `-Overrides: [ 0x55ba2634fd28 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55ba263688d0 <line:28:5, col:57> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55ba26351188 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55ba263693b0 <col:36, col:57>
|   `-ReturnStmt 0x55ba263693a0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55ba26369388 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55ba26369368 <col:45> 'const char [9]' lvalue "MarkIPCE"
|-CXXMethodDecl 0x55ba26368998 <line:29:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55ba26351250 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55ba26369410 <col:36, col:56>
|   `-ReturnStmt 0x55ba26369400 <col:38, col:45>
|     `-ImplicitCastExpr 0x55ba263693e8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55ba263693c8 <col:45> 'const char []' lvalue Var 0x55ba26351500 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55ba26368c70 <line:31:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55ba26352a20 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55ba26368b20 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x55ba26368b98 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba26368d40 <line:32:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55ba26352af0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55ba26368e80 <line:34:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55ba26350368 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55ba26368df0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55ba26368f28 <line:36:3, col:10> col:3 private
|-FieldDecl 0x55ba26368f60 <line:38:5, col:10> col:10 _force 'bool'
|-FieldDecl 0x55ba26368fc0 <line:39:5, col:21> col:21 referenced _drops 'atomic_uint32_t'
|-CXXConstructorDecl 0x55ba26369038 <line:23:7> col:7 implicit MarkIPCE 'void (const MarkIPCE &)' inline default_delete noexcept-unevaluated 0x55ba26369038
| `-ParmVarDecl 0x55ba26369148 <col:7> col:7 'const MarkIPCE &'
`-CXXMethodDecl 0x55ba263691e8 <col:7> col:7 implicit operator= 'MarkIPCE &(const MarkIPCE &)' inline default_delete noexcept-unevaluated 0x55ba263691e8
  `-ParmVarDecl 0x55ba263692f8 <col:7> col:7 'const MarkIPCE &'

Layout: <CGRecordLayout
  LLVMType:%class.MarkIPCE = type { %class.Element.base, i8, %class.atomic_uint32_t, [4 x i8] }
  NonVirtualBaseLLVMType:%class.MarkIPCE.base = type { %class.Element.base, i8, %class.atomic_uint32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba261228e0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55ba261229f8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55ba26122a98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55ba26122af8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55ba26122b58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55ba26122c08 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba26122f10 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba26123028 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55ba261230d0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55ba26123138 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55ba261231c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55ba26129260 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ba26129698 <col:12>
|-CXXConstructorDecl 0x55ba26129368 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba26129478 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55ba261230d0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55ba2612bc20 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55ba2612bbf0 <col:12> 'const char *const' lvalue .data 0x55ba261230d0
| |     `-DeclRefExpr 0x55ba2612bbd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba26129478 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55ba26123138 'length' 'int'
| | `-ImplicitCastExpr 0x55ba2612bcb0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ba2612bc80 <col:12> 'const int' lvalue .length 0x55ba26123138
| |     `-DeclRefExpr 0x55ba2612bc60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba26129478 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55ba261231c8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55ba2612bd40 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55ba2612bd10 <col:12> 'String::memo_t *const' lvalue .memo 0x55ba261231c8
| |     `-DeclRefExpr 0x55ba2612bcf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba26129478 '' 'const String::rep_t &'
| `-CompoundStmt 0x55ba2612bd98 <col:12>
|-CXXConstructorDecl 0x55ba26129518 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ba26129518
| `-ParmVarDecl 0x55ba26129628 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55ba2612eb80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ba2613a598 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2613a6a8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55ba2613abc0 <col:12>
|   |-BinaryOperator 0x55ba2613a9d8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55ba2613a990 <col:12> 'const char *' lvalue ->data 0x55ba261230d0
|   | | `-CXXThisExpr 0x55ba2613a980 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55ba2613a9c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2613a950 <col:12> 'const char *const' lvalue .data 0x55ba261230d0
|   |     `-DeclRefExpr 0x55ba2613a930 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2613a6a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55ba2613aaa0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55ba2613aa58 <col:12> 'int' lvalue ->length 0x55ba26123138
|   | | `-CXXThisExpr 0x55ba2613aa48 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55ba2613aa88 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2613aa18 <col:12> 'const int' lvalue .length 0x55ba26123138
|   |     `-DeclRefExpr 0x55ba2613a9f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2613a6a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55ba2613ab68 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55ba2613ab20 <col:12> 'String::memo_t *' lvalue ->memo 0x55ba261231c8
|   | | `-CXXThisExpr 0x55ba2613ab10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55ba2613ab50 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2613aae0 <col:12> 'String::memo_t *const' lvalue .memo 0x55ba261231c8
|   |     `-DeclRefExpr 0x55ba2613aac0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2613a6a8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55ba2613abb0 <col:12>
|     `-UnaryOperator 0x55ba2613ab98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2613ab88 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55ba2613a718 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ba2613a718
  `-ParmVarDecl 0x55ba2613a828 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba26119e50 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba26119f68 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55ba26119ff8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55ba2611a038 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55ba25deefd0 'const char *'
|   `-QualType 0x55ba25dee521 'const char' const
|     `-BuiltinType 0x55ba25dee520 'char'
|-TypedefDecl 0x55ba2611a0c0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55ba2611a090 'String::const_iterator' sugar
|   |-Typedef 0x55ba2611a038 'const_iterator'
|   `-PointerType 0x55ba25deefd0 'const char *'
|     `-QualType 0x55ba25dee521 'const char' const
|       `-BuiltinType 0x55ba25dee520 'char'
|-TypedefDecl 0x55ba2611a230 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55ba2611a1a0 'int (String::*)() const'
|   |-RecordType 0x55ba26119ee0 'String'
|   | `-CXXRecord 0x55ba26119e50 'String'
|   `-ParenType 0x55ba2611a140 'int () const' sugar
|     `-FunctionProtoType 0x55ba260eece0 'int () const' const cdecl
|       `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba2611a298 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55ba25f438c0 'int64_t' sugar
|   |-Typedef 0x55ba25e57390 'int64_t'
|   `-TypedefType 0x55ba25e30630 '__int64_t' sugar
|     |-Typedef 0x55ba25e30208 '__int64_t'
|     `-BuiltinType 0x55ba25dee5a0 'long'
|-TypedefDecl 0x55ba2611a300 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55ba25f437e0 'uint64_t' sugar
|   |-Typedef 0x55ba25e57530 'uint64_t'
|   `-TypedefType 0x55ba25e306c0 '__uint64_t' sugar
|     |-Typedef 0x55ba25e30278 '__uint64_t'
|     `-BuiltinType 0x55ba25dee640 'unsigned long'
|-TypedefDecl 0x55ba2611a390 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55ba2611a360 'String::intmax_t' sugar
|   |-Typedef 0x55ba2611a298 'intmax_t'
|   `-TypedefType 0x55ba25f438c0 'int64_t' sugar
|     |-Typedef 0x55ba25e57390 'int64_t'
|     `-TypedefType 0x55ba25e30630 '__int64_t' sugar
|       |-Typedef 0x55ba25e30208 '__int64_t'
|       `-BuiltinType 0x55ba25dee5a0 'long'
|-TypedefDecl 0x55ba2611a420 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55ba2611a3f0 'String::uintmax_t' sugar
|   |-Typedef 0x55ba2611a300 'uintmax_t'
|   `-TypedefType 0x55ba25f437e0 'uint64_t' sugar
|     |-Typedef 0x55ba25e57530 'uint64_t'
|     `-TypedefType 0x55ba25e306c0 '__uint64_t' sugar
|       |-Typedef 0x55ba25e30278 '__uint64_t'
|       `-BuiltinType 0x55ba25dee640 'unsigned long'
|-CXXConstructorDecl 0x55ba2611a4e0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55ba2611a688 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55ba2611a5c8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55ba2611a838 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55ba2611a778 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55ba2611a990 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55ba2611a900 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55ba2611aba8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55ba2611aa58 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55ba2611aad8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55ba2611adc8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55ba2611ac78 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55ba2611acf8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55ba2611afe8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55ba2611ae98 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55ba2611af18 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55ba2611b208 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55ba2611b0b8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55ba2611b138 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55ba2611b398 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55ba2611b2d0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55ba2611b518 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55ba2611b458 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55ba2611b6a8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55ba2611b5e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55ba2611b800 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55ba2611b770 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55ba2611b958 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55ba2611b8c8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55ba2611bab0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55ba2611ba20 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55ba2611bc38 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55ba2611bb78 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55ba2611bdc8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55ba2611bd00 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55ba2611bf58 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55ba2611be90 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55ba2611c0e8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55ba2611c020 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55ba2611c1e0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55ba2611c308 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55ba2611c488 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55ba2611c3c0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55ba2611c5d8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55ba2611c548 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55ba2611c690 <col:63> "" ""
|-CXXMethodDecl 0x55ba2611c7d8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55ba2611c718 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55ba2611c9e8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55ba2611c898 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55ba2611c918 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55ba2611cc08 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55ba2611cab0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55ba2611cb30 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55ba2611cee8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55ba2611ccc8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55ba2611cd48 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55ba26128d30 <col:55> 'int' 10
| `-ParmVarDecl 0x55ba2611cdc0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba26128d50 <col:76> 'bool' true
|-CXXMethodDecl 0x55ba2611d1c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55ba2611cfb0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55ba2611d030 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55ba26128d60 <col:56> 'int' 10
| `-ParmVarDecl 0x55ba2611d0a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba26128d80 <col:77> 'bool' true
|-CXXMethodDecl 0x55ba2611d2d0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55ba2611d398 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55ba2611d460 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55ba2611d500 <col:20>
| `-OptimizeNoneAttr 0x55ba2611d558 <col:30>
|-CXXConversionDecl 0x55ba2611d648 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55ba2611d718 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55ba2611d7d8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55ba2611d8c8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55ba2611d988 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55ba2611db08 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55ba2611da40 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55ba2611dc58 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55ba2611dbc8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55ba2611dd48 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55ba2611de08 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55ba2611e058 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55ba2611dec0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55ba2611df40 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55ba2611e2b8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55ba2611e120 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55ba2611e1a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55ba2611e388 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2611e598 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55ba2611e440 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55ba2611e4c0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55ba2611e7b8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55ba2611e660 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55ba2611e6e0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55ba2611e948 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55ba2611e880 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55ba2611ea38 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55ba2611eba8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55ba2611eae8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55ba2611edb8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55ba2611ec68 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55ba2611ece8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55ba2611efd0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55ba2611ee78 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55ba2611eef0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55ba2611f160 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55ba2611f090 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55ba2611f380 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55ba2611f220 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55ba2611f2a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55ba2611f4d0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55ba2611f440 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55ba2611f6a8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55ba2611f590 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55ba2611f610 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55ba2611f7f8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55ba2611f768 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55ba2611fa10 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55ba2611f8b0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55ba2611f930 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55ba26128d90 <col:39> 'int' 0
|-CXXMethodDecl 0x55ba2611fc30 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55ba2611fad0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55ba2611fb50 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55ba26128db0 <col:48> 'int' 0
|-CXXMethodDecl 0x55ba2611fe10 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55ba2611fcf0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55ba2611fd70 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55ba26128dd0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55ba2611fee0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55ba2611ffa0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55ba26120060 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55ba26120120 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55ba261201e0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55ba26120388 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55ba26120290 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55ba26120508 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55ba26120440 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55ba261206e0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55ba261205c8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55ba26120858 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55ba26120798 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55ba261209a0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55ba26120910 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55ba26120af0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55ba26120a60 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55ba26120cc8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55ba26120bb0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55ba26120c30 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55ba26120ea8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55ba26120d90 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55ba26120e10 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55ba26120ff8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55ba26120f68 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55ba26121208 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55ba261210b8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55ba26121138 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55ba26121368 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55ba261212d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55ba261214c0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55ba26121428 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55ba26121568 <col:57> "" ""
|-CXXMethodDecl 0x55ba26121678 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55ba261215e8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55ba261217c8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55ba26121738 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55ba26121948 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55ba26121880 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55ba26121a10 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55ba26121ad0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55ba26121b90 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55ba26121c30 <col:49> "" ""
|-CXXMethodDecl 0x55ba26121cc0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55ba26121d80 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55ba26121e70 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55ba26121f38 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55ba26121ff8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55ba261220b8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55ba261221b0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55ba26122278 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55ba26122340 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55ba26122518 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55ba261223f8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55ba26122478 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55ba26122740 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55ba261225e0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55ba26122660 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55ba26122850 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55ba261228b8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55ba261228e0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55ba261229f8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55ba26122a98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55ba26122af8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55ba26122b58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55ba26122c08 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55ba26122c70 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55ba26122ea8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55ba26122ef8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba26122e88 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55ba26122d98 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55ba26122d40 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55ba26122d80 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55ba26122d60 <col:32> 'int' 8
|-CXXRecordDecl 0x55ba26122f10 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ba26123028 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55ba261230d0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55ba26123138 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55ba261231c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55ba26129260 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55ba26129698 <col:12>
| |-CXXConstructorDecl 0x55ba26129368 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ba26129478 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55ba261230d0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55ba2612bc20 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55ba2612bbf0 <col:12> 'const char *const' lvalue .data 0x55ba261230d0
| | |     `-DeclRefExpr 0x55ba2612bbd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba26129478 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55ba26123138 'length' 'int'
| | | `-ImplicitCastExpr 0x55ba2612bcb0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55ba2612bc80 <col:12> 'const int' lvalue .length 0x55ba26123138
| | |     `-DeclRefExpr 0x55ba2612bc60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba26129478 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55ba261231c8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55ba2612bd40 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55ba2612bd10 <col:12> 'String::memo_t *const' lvalue .memo 0x55ba261231c8
| | |     `-DeclRefExpr 0x55ba2612bcf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba26129478 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55ba2612bd98 <col:12>
| |-CXXConstructorDecl 0x55ba26129518 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ba26129518
| | `-ParmVarDecl 0x55ba26129628 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55ba2612eb80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55ba2613a598 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ba2613a6a8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55ba2613abc0 <col:12>
| |   |-BinaryOperator 0x55ba2613a9d8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55ba2613a990 <col:12> 'const char *' lvalue ->data 0x55ba261230d0
| |   | | `-CXXThisExpr 0x55ba2613a980 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55ba2613a9c0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55ba2613a950 <col:12> 'const char *const' lvalue .data 0x55ba261230d0
| |   |     `-DeclRefExpr 0x55ba2613a930 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2613a6a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55ba2613aaa0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55ba2613aa58 <col:12> 'int' lvalue ->length 0x55ba26123138
| |   | | `-CXXThisExpr 0x55ba2613aa48 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55ba2613aa88 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55ba2613aa18 <col:12> 'const int' lvalue .length 0x55ba26123138
| |   |     `-DeclRefExpr 0x55ba2613a9f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2613a6a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55ba2613ab68 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55ba2613ab20 <col:12> 'String::memo_t *' lvalue ->memo 0x55ba261231c8
| |   | | `-CXXThisExpr 0x55ba2613ab10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55ba2613ab50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55ba2613aae0 <col:12> 'String::memo_t *const' lvalue .memo 0x55ba261231c8
| |   |     `-DeclRefExpr 0x55ba2613aac0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2613a6a8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55ba2613abb0 <col:12>
| |     `-UnaryOperator 0x55ba2613ab98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55ba2613ab88 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55ba2613a718 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ba2613a718
|   `-ParmVarDecl 0x55ba2613a828 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55ba26123240 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55ba26123488 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55ba261232a8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55ba26123328 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55ba261233a0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55ba26129220 <col:79, line:261:5>
|   |-BinaryOperator 0x55ba26128e98 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55ba26128e30 <col:2, col:5> 'const char *' lvalue .data 0x55ba261230d0
|   | | `-MemberExpr 0x55ba26128e00 <col:2> 'String::rep_t' lvalue ->_r 0x55ba26123240
|   | |   `-CXXThisExpr 0x55ba26128df0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55ba26128e80 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ba26128e60 <col:12> 'const char *' lvalue ParmVar 0x55ba261232a8 'data' 'const char *'
|   |-BinaryOperator 0x55ba26128f60 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55ba26128ef8 <col:2, col:5> 'int' lvalue .length 0x55ba26123138
|   | | `-MemberExpr 0x55ba26128ec8 <col:2> 'String::rep_t' lvalue ->_r 0x55ba26123240
|   | |   `-CXXThisExpr 0x55ba26128eb8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55ba26128f48 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ba26128f28 <col:14> 'int' lvalue ParmVar 0x55ba26123328 'length' 'int'
|   `-IfStmt 0x55ba26129208 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55ba26129080 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55ba26129068 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55ba26129048 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55ba26129028 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55ba26128fc0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55ba261231c8
|     |       | `-MemberExpr 0x55ba26128f90 <col:7> 'String::rep_t' lvalue ->_r 0x55ba26123240
|     |       |   `-CXXThisExpr 0x55ba26128f80 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55ba26129010 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ba26128ff0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55ba261233a0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55ba261291e0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55ba261291c8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55ba261290d0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55ba26111eb8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55ba26129138 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55ba26122a98
|         `-ImplicitCastExpr 0x55ba26129120 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55ba26129100 <col:27> 'String::memo_t *' lvalue ParmVar 0x55ba261233a0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55ba26123738 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55ba26123558 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55ba261235d8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55ba26123650 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55ba26123240 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55ba261296a8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55ba26129838 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55ba261297a0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55ba26129710 <col:2> '<bound member function type>' ->assign_memo 0x55ba26123488
|     | `-ImplicitCastExpr 0x55ba261297d8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55ba26129700 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55ba261297f0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba26129740 <col:14> 'const char *' lvalue ParmVar 0x55ba26123558 'data' 'const char *'
|     |-ImplicitCastExpr 0x55ba26129808 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba26129760 <col:20> 'int' lvalue ParmVar 0x55ba261235d8 'length' 'int'
|     `-ImplicitCastExpr 0x55ba26129820 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55ba26129780 <col:28> 'String::memo_t *' lvalue ParmVar 0x55ba26123650 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55ba261238c8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55ba26123808 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55ba26129a90 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55ba26129a10 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55ba26129860 <col:2> '<bound member function type>' ->assign_memo 0x55ba26123488
|     | `-CXXThisExpr 0x55ba26129850 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55ba26129a48 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55ba261298e0 <col:14, col:19> 'const char *' lvalue .data 0x55ba261230d0
|     |   `-MemberExpr 0x55ba261298b0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55ba26123240
|     |     `-DeclRefExpr 0x55ba26129890 <col:14> 'const String' lvalue ParmVar 0x55ba26123808 'x' 'const String &'
|     |-ImplicitCastExpr 0x55ba26129a60 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55ba26129960 <col:25, col:30> 'int' lvalue .length 0x55ba26123138
|     |   `-MemberExpr 0x55ba26129930 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55ba26123240
|     |     `-DeclRefExpr 0x55ba26129910 <col:25> 'const String' lvalue ParmVar 0x55ba26123808 'x' 'const String &'
|     `-ImplicitCastExpr 0x55ba26129a78 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55ba261299e0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55ba261231c8
|         `-MemberExpr 0x55ba261299b0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55ba26123240
|           `-DeclRefExpr 0x55ba26129990 <col:38> 'const String' lvalue ParmVar 0x55ba26123808 'x' 'const String &'
|-CXXMethodDecl 0x55ba26123990 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55ba2612a450 <col:31, line:278:5>
|   `-IfStmt 0x55ba2612a438 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55ba26129b30 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55ba26129b18 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55ba26129ae8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55ba261231c8
|     |     `-MemberExpr 0x55ba26129ab8 <col:6> 'String::rep_t' lvalue ->_r 0x55ba26123240
|     |       `-CXXThisExpr 0x55ba26129aa8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55ba2612a410 <col:15, line:277:2>
|       |-ParenExpr 0x55ba26129fe0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55ba26129fb0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55ba26129c40 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55ba26129c28 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55ba26129c10 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55ba26129bd0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55ba26122a98
|       |   |       `-ImplicitCastExpr 0x55ba26129bb8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55ba26129b88 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55ba261231c8
|       |   |           `-MemberExpr 0x55ba26129b58 <col:27> 'String::rep_t' lvalue ->_r 0x55ba26123240
|       |   |             `-CXXThisExpr 0x55ba26129b48 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55ba26129ca0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55ba26129c80 <col:54> 'int' 0
|       |   `-CallExpr 0x55ba26129f10 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55ba26129ef8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55ba26129e78 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55ba26129f50 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55ba26129d88 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55ba26129f68 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55ba26129db8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55ba26129f80 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55ba26129df0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55ba26129f98 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55ba26129e60 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55ba26129e48 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55ba26129e10 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55ba2612a330 <line:274:6, line:275:22>
|       | |-CallExpr 0x55ba2612a1f0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55ba2612a1d8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55ba2612a150 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55ba26113300 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55ba2612a120 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55ba26122a98
|       | |   `-ImplicitCastExpr 0x55ba2612a108 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55ba2612a0d8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55ba261231c8
|       | |       `-MemberExpr 0x55ba2612a0a8 <col:40> 'String::rep_t' lvalue ->_r 0x55ba26123240
|       | |         `-CXXThisExpr 0x55ba2612a098 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55ba2612a2f0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55ba2612a2d8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55ba2612a218 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55ba26128170 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55ba2612a318 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55ba2612a278 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55ba261231c8
|       |       `-MemberExpr 0x55ba2612a248 <col:15> 'String::rep_t' lvalue ->_r 0x55ba26123240
|       |         `-CXXThisExpr 0x55ba2612a238 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55ba2612a3f0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55ba2612a388 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55ba261231c8
|         | `-MemberExpr 0x55ba2612a358 <col:6> 'String::rep_t' lvalue ->_r 0x55ba26123240
|         |   `-CXXThisExpr 0x55ba2612a348 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55ba2612a3d8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55ba2612a3b8 <col:16> 'int' 0
|-CXXMethodDecl 0x55ba26123c28 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55ba26123a48 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55ba26123ac8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55ba26123b40 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55ba26123d00 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55ba26123f50 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55ba26123db8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55ba26123e38 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55ba26123eb0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55ba26124138 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55ba26124020 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55ba261240a0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55ba26124238 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55ba2612a528 <col:41, line:286:5>
|   `-ReturnStmt 0x55ba2612a518 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55ba2612a4e8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55ba2612a4b0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55ba2612a498 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55ba2612a478 <col:46> 'int' 1
|-CXXMethodDecl 0x55ba261244d8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55ba261242f0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55ba26124370 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55ba261243f0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55ba26128170 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55ba261245a0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55ba26128240 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55ba26128410 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55ba261282f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55ba26128378 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55ba261284d0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55ba26128598 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55ba26128698 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55ba26128710 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55ba26128788 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55ba261287f0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55ba261288f0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55ba26128940 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba261288d0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55ba261288b0 <col:22> 'int' 14
|-CXXMethodDecl 0x55ba26128b58 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55ba26128970 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55ba261289f0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55ba26128a70 <col:43> col:46 'int'
|-FriendDecl 0x55ba26128c60 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55ba26128cf0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba263971d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55ba263973a8 prev 0x55ba263971d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55ba26397438 <col:46, col:52> col:46 public
|-TypedefDecl 0x55ba26397460 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba26398dc0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55ba26398d70 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55ba26398d50 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55ba26397678 'type'
|     `-SubstTemplateTypeParmType 0x55ba26397640 'String' sugar
|       |-TemplateTypeParmType 0x55ba260de700 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260de6b0 'T'
|       `-RecordType 0x55ba26119ee0 'String'
|         `-CXXRecord 0x55ba26119e50 'String'
|-TypedefDecl 0x55ba26398e78 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55ba26398e40 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55ba26398e20 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55ba26398dc0 'type'
|     `-ElaboratedType 0x55ba26398d70 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55ba26398d50 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55ba26397678 'type'
|         `-SubstTemplateTypeParmType 0x55ba26397640 'String' sugar
|           |-TemplateTypeParmType 0x55ba260de700 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ba260de6b0 'T'
|           `-RecordType 0x55ba26119ee0 'String'
|             `-CXXRecord 0x55ba26119e50 'String'
|-CXXMethodDecl 0x55ba26398ff8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55ba26398f08 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55ba263990e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55ba263991c8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55ba263991c8
|-CXXMethodDecl 0x55ba26399498 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55ba263993a0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55ba263996d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ba26399550 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba263995c8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba263998a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ba26399798 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba26399810 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba26399a08 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55ba26399ad8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55ba26399d28 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ba26399b98 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55ba26399c10 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2639dfb8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55ba2639de30 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55ba2639dea8 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2639e178 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55ba2639e088 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2639e338 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55ba2639e240 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2639e3f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ba2639e4a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55ba2639e6d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ba2639e550 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba2639e5c8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2639e978 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55ba2639e880 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55ba2639ea40 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55ba2639ea90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55ba2639eae0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba26352690 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55ba26395c38 prev 0x55ba26352690 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55ba26397140 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55ba263970f0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55ba263970d0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55ba26396f80 'type'
|     `-SubstTemplateTypeParmType 0x55ba26396e10 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55ba260b44b0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55ba260b4458 'F'
|       `-RecordType 0x55ba26396a70 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55ba26396990 'typed_array_memory'
|-FieldDecl 0x55ba2639eb30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55ba2639eb80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55ba2639ebb8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55ba26395cd0 'String' sugar
|   |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|   `-RecordType 0x55ba26119ee0 'String'
|     `-CXXRecord 0x55ba26119e50 'String'
|-TypedefDecl 0x55ba2639ec48 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55ba2639ec10 'String &'
|   `-SubstTemplateTypeParmType 0x55ba26395cd0 'String' sugar
|     |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|     `-RecordType 0x55ba26119ee0 'String'
|       `-CXXRecord 0x55ba26119e50 'String'
|-TypedefDecl 0x55ba2639ecd8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55ba2639eca0 'const String &'
|   `-QualType 0x55ba26395cd1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ba26395cd0 'String' sugar
|       |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|       `-RecordType 0x55ba26119ee0 'String'
|         `-CXXRecord 0x55ba26119e50 'String'
|-TypedefDecl 0x55ba2639ed68 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55ba2639ed30 'String *'
|   `-SubstTemplateTypeParmType 0x55ba26395cd0 'String' sugar
|     |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|     `-RecordType 0x55ba26119ee0 'String'
|       `-CXXRecord 0x55ba26119e50 'String'
|-TypedefDecl 0x55ba2639edf8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55ba2639edc0 'const String *'
|   `-QualType 0x55ba26395cd1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ba26395cd0 'String' sugar
|       |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|       `-RecordType 0x55ba26119ee0 'String'
|         `-CXXRecord 0x55ba26119e50 'String'
|-TypedefDecl 0x55ba2639fa50 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55ba2639fa00 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55ba2639f9e0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55ba2639f918 'type'
|     `-LValueReferenceType 0x55ba2639f8e0 'const String &'
|       `-QualType 0x55ba2639f681 'const String' const
|         `-SubstTemplateTypeParmType 0x55ba2639f680 'String' sugar
|           |-TemplateTypeParmType 0x55ba260be400 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ba260be3a8 'T'
|           `-RecordType 0x55ba26119ee0 'String'
|             `-CXXRecord 0x55ba26119e50 'String'
|-TypedefDecl 0x55ba2639fab8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55ba2639eca0 'const String &'
|   `-QualType 0x55ba26395cd1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ba26395cd0 'String' sugar
|       |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|       `-RecordType 0x55ba26119ee0 'String'
|         `-CXXRecord 0x55ba26119e50 'String'
|-TypedefDecl 0x55ba2639fb10 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba2639fb78 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55ba2639ed30 'String *'
|   `-SubstTemplateTypeParmType 0x55ba26395cd0 'String' sugar
|     |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|     `-RecordType 0x55ba26119ee0 'String'
|       `-CXXRecord 0x55ba26119e50 'String'
|-TypedefDecl 0x55ba2639fbe0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55ba2639edc0 'const String *'
|   `-QualType 0x55ba26395cd1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ba26395cd0 'String' sugar
|       |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|       `-RecordType 0x55ba26119ee0 'String'
|         `-CXXRecord 0x55ba26119e50 'String'
|-EnumDecl 0x55ba2639fc38 <line:134:5> col:5
| `-EnumConstantDecl 0x55ba2639fd30 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55ba2639fd10 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55ba260ed0a8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55ba260ed080 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55ba260ed060 <col:40> 'int' 1
|-CXXConstructorDecl 0x55ba2639fdb8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55ba263a0048 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba2639fe70 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba2639ff10 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55ba263a02d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55ba263a01c0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55ba263a0598 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55ba263a0480 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55ba263a08b0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55ba263a0790 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55ba263a0bc0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55ba263a0aa0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55ba263a0eb0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba263a0cf8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba263a0d70 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ba263a0fd8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55ba263a1088 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263a10e0 <col:30> Inherited
|-CXXMethodDecl 0x55ba263a1128 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55ba263a11d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263a1230 <col:30> Inherited
|-CXXMethodDecl 0x55ba263a12f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ba263a13a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263a1400 <col:30> Inherited
|-CXXMethodDecl 0x55ba263a1448 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ba263a14f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263a1550 <col:30> Inherited
|-CXXMethodDecl 0x55ba263a1598 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ba263a1648 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263a16a0 <col:30> Inherited
|-CXXMethodDecl 0x55ba263a16e8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ba263a1798 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263a17f0 <col:30> Inherited
|-CXXMethodDecl 0x55ba263a1818 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ba263a18c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ba263a1978 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ba263a1b38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba263a1a28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba263a1aa0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ba263a1c88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55ba263a1bf8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263a1e38 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55ba263a1d40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ba263a1ef0 <col:20>
| `-OptimizeNoneAttr 0x55ba263a1f48 <col:30>
|-CXXMethodDecl 0x55ba263a2068 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55ba263a1f70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ba263a2120 <col:20>
| `-OptimizeNoneAttr 0x55ba263a2178 <col:30>
|-CXXMethodDecl 0x55ba263a2230 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ba263a21a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263a2378 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ba263a22e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263a24a8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55ba263a25a8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55ba263a2678 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55ba263a2748 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55ba263a2888 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ba263a27f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263a29d0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ba263a2940 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263a2b18 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55ba263a2a88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ba263a2bd0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55ba263a2cd0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55ba263a2c40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ba263a2d88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55ba263a2e48 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55ba263a2f48 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55ba263a30c8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55ba263a3008 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55ba263a3888 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55ba263a3180 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55ba263a37e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55ba263a36e8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55ba263a3968 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ba263a3ab8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55ba263a3a28 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ba263a3b70 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55ba263a3db8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba263a3c30 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55ba263a3ca8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ba263a3f48 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55ba263a3e88 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55ba263a4158 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55ba263a4010 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55ba263a4088 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55ba263a4218 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55ba263a4478 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55ba263a4380 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55ba263a4548 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55ba263a4548

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2641f0e8 prev 0x55ba262cfea8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba2641f1e0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55ba2641f270 <col:22, col:28> col:22 public
|-EnumDecl 0x55ba2641f298 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55ba2641f3b8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2641f398 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55ba2641f380 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55ba2641f360 <col:14> 'int' 999
| |-EnumConstantDecl 0x55ba2641f460 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2641f440 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55ba2641f428 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55ba2641f408 <col:14> 'int' 1
| |-EnumConstantDecl 0x55ba2641f4f0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2641f4d0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55ba2641f4b0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55ba2641f580 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2641f560 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55ba2641f540 <col:13> 'int' 1
| |-EnumConstantDecl 0x55ba2641f610 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2641f5f0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55ba2641f5d0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55ba2641f6a0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2641f680 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55ba2641f660 <col:13> 'int' 3
| |-EnumConstantDecl 0x55ba2641f730 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2641f710 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55ba2641f6f0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55ba2641f7c0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2641f7a0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55ba2641f780 <col:14> 'int' 5
| |-EnumConstantDecl 0x55ba2641f850 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2641f830 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55ba2641f810 <col:12> 'int' 6
| `-EnumConstantDecl 0x55ba2641f8e0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55ba2641f8c0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55ba2641f8a0 <col:13> 'int' 7
|-VarDecl 0x55ba2641f950 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55ba2641f9d8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55ba2641fa60 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55ba2641fae8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55ba2641fb70 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55ba2641fbf8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55ba2641fc80 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55ba2641fd08 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55ba2641fd90 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55ba2641fe18 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55ba2641fea0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55ba2641ffa0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55ba26425298 '_nerrors' 'int'
| | `-IntegerLiteral 0x55ba26425a28 <line:128:13> 'int' 0
| `-CompoundStmt 0x55ba26425a98 <col:16, line:129:5>
|-CXXDestructorDecl 0x55ba26420090 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55ba26425aa8 <col:29, line:132:5>
|-CXXMethodDecl 0x55ba26420248 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55ba26420180 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba26420310 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55ba264203f8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55ba26425b00 <col:44, line:161:5>
|   `-ReturnStmt 0x55ba26425af0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55ba26425ad8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55ba26425ab8 <col:9> 'ErrorHandler *' lvalue Var 0x55ba264252f8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55ba26420538 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55ba264204a8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba26420600 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55ba26425b60 <col:43, line:173:5>
|   `-ReturnStmt 0x55ba26425b50 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55ba26425b38 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55ba26425b18 <col:9> 'ErrorHandler *' lvalue Var 0x55ba26425370 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55ba264206b8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55ba26420738 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55ba26420848 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55ba264207b8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55ba26420998 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55ba26420908 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55ba26420af0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55ba26420a58 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55ba26420c48 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55ba26420bb0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55ba26420da0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55ba26420d08 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55ba26420fb0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba26420e58 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55ba26420ed8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55ba26421188 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba26421070 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55ba264210f0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55ba264213a8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba26421248 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55ba264212c8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55ba26421588 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba26421468 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55ba264214e8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55ba26421768 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba26421648 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55ba264216c8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55ba264218f0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55ba26421828 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55ba26421ac0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55ba264219a8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55ba26421a20 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55ba26425db8 <col:57, line:234:5>
|   `-ReturnStmt 0x55ba26425da8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55ba26425d90 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55ba26425d38 <col:9, col:41> 'int'
|         |-MemberExpr 0x55ba26425d08 <col:9> '<bound member function type>' ->xmessage 0x55ba264218f0
|         | `-CXXThisExpr 0x55ba26425cf8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55ba26425d78 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55ba26425d60 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55ba26425cd8 <col:18, col:40> 'String' (CXXTemporary 0x55ba26425cd8)
|               `-CallExpr 0x55ba26425ca0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55ba26425c88 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55ba26425c00 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55ba26423ab8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55ba26425c20 <col:31> 'const String' lvalue ParmVar 0x55ba26421a20 'str' 'const String &'
|                 `-DeclRefExpr 0x55ba26425c40 <col:36> 'const String' lvalue ParmVar 0x55ba264219a8 'anno' 'const String &'
|-CXXMethodDecl 0x55ba26421da0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55ba26421b80 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55ba26421c00 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55ba26421c78 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55ba26426048 <col:68, line:243:5>
|   `-ReturnStmt 0x55ba26426038 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55ba26426020 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55ba26425fc0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55ba26425f90 <col:9> '<bound member function type>' ->xmessage 0x55ba26421ac0
|         | `-CXXThisExpr 0x55ba26425f80 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55ba26425e58 <col:18> 'const String' lvalue ParmVar 0x55ba26421b80 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55ba26426008 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55ba26425ff0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55ba26425f60 <col:24, col:40> 'String' (CXXTemporary 0x55ba26425f60)
|               `-CXXMemberCallExpr 0x55ba26425ef8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55ba26425e88 <col:24> '<bound member function type>' ->vformat 0x55ba26422f80
|                 | `-CXXThisExpr 0x55ba26425e78 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55ba26425f28 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55ba26425eb8 <col:32> 'const char *' lvalue ParmVar 0x55ba26421c00 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55ba26425f40 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55ba26425ed8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55ba26421c78 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba26422040 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55ba26421e68 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55ba26421ee0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55ba26421f58 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55ba26426388 <col:23, line:254:5>
|   `-ReturnStmt 0x55ba26426378 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55ba26426360 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55ba26426300 <col:9, col:71> 'int'
|         |-MemberExpr 0x55ba264262d0 <col:9> '<bound member function type>' ->xmessage 0x55ba26421ac0
|         | `-CXXThisExpr 0x55ba264262c0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55ba26426348 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55ba26426330 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55ba26426280 <col:18, col:65> 'String' (CXXTemporary 0x55ba26426280)
|         |     `-CallExpr 0x55ba26426218 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55ba26426200 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55ba264260e8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55ba26423ab8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55ba26426108 <col:31> 'const String' lvalue ParmVar 0x55ba26421ee0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55ba26426260 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55ba26426248 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55ba264261e0 <col:37, col:64> 'String' (CXXTemporary 0x55ba264261e0)
|         |             `-CallExpr 0x55ba264261b0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55ba26426198 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55ba26426128 <col:37> 'String (const String &)' lvalue CXXMethod 0x55ba26424108 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55ba26426148 <col:56> 'const String' lvalue ParmVar 0x55ba26421e68 'landmark' 'const String &'
|         `-DeclRefExpr 0x55ba264262a0 <col:68> 'const String' lvalue ParmVar 0x55ba26421f58 'str' 'const String &'
|-CXXMethodDecl 0x55ba264223c0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55ba26422108 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55ba26422180 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55ba26422200 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55ba26422278 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55ba26426640 <col:34, line:267:5>
|   `-ReturnStmt 0x55ba26426630 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55ba26426618 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55ba264265b0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55ba26426580 <col:9> '<bound member function type>' ->xmessage 0x55ba26422040
|         | `-CXXThisExpr 0x55ba26426570 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55ba26426428 <col:18> 'const String' lvalue ParmVar 0x55ba26422108 'landmark' 'const String &'
|         |-DeclRefExpr 0x55ba26426448 <col:28> 'const String' lvalue ParmVar 0x55ba26422180 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55ba26426600 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55ba264265e8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55ba26426550 <col:34, col:50> 'String' (CXXTemporary 0x55ba26426550)
|               `-CXXMemberCallExpr 0x55ba264264e8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55ba26426478 <col:34> '<bound member function type>' ->vformat 0x55ba26422f80
|                 | `-CXXThisExpr 0x55ba26426468 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55ba26426518 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55ba264264a8 <col:42> 'const char *' lvalue ParmVar 0x55ba26422200 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55ba26426530 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55ba264264c8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55ba26422278 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba264224d0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55ba264266c0 <col:25, line:288:5>
|   `-ReturnStmt 0x55ba264266b0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55ba26426698 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55ba26426668 <col:9> 'const int' lvalue ->_nerrors 0x55ba26425298
|         `-CXXThisExpr 0x55ba26426658 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55ba264226e0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55ba26422588 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55ba26422608 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55ba264229c8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55ba264227a8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55ba26422828 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55ba264228a0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba26422b60 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55ba26422a98 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55ba26422da8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55ba26422c20 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55ba26422c98 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55ba26426920 <col:58, line:357:5>
|   `-ReturnStmt 0x55ba26426910 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55ba264268f8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55ba264268c8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55ba264268b0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55ba26426890 <col:9, col:29> 'String' (CXXTemporary 0x55ba26426890)
|             `-CallExpr 0x55ba26426820 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55ba26426808 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55ba26426788 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55ba264229c8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55ba26426728 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55ba26426858 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55ba26426748 <col:21> 'const char *' lvalue ParmVar 0x55ba26422c20 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55ba26426870 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55ba26426768 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55ba26422c98 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba26422f80 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55ba26422e70 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55ba26422ee8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba264230d8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55ba26423048 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55ba26423220 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55ba26423190 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55ba264234c0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55ba264232d8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55ba26423358 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55ba264233d0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55ba26423620 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55ba26423590 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55ba26426a38 <col:37, line:441:5>
|   `-IfStmt 0x55ba26426a20 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55ba264269a8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55ba26426978 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ba26426938 <col:6> 'int' lvalue ParmVar 0x55ba26423590 'level' 'int'
|     | `-ImplicitCastExpr 0x55ba26426990 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55ba26426958 <col:15> 'ErrorHandler::Level' EnumConstant 0x55ba2641f6a0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55ba26426a08 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55ba264269d8 <col:8> 'int' lvalue ->_nerrors 0x55ba26425298
|         `-CXXThisExpr 0x55ba264269c8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55ba264236e8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55ba26426ad0 <col:26, line:448:5>
|   `-BinaryOperator 0x55ba26426ab0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55ba26426a60 <col:2> 'int' lvalue ->_nerrors 0x55ba26425298
|     | `-CXXThisExpr 0x55ba26426a50 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55ba26426a90 <col:13> 'int' 0
|-CXXMethodDecl 0x55ba264238b0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55ba264237a0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55ba26423818 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55ba26423ab8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55ba26423970 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55ba264239e8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55ba26423d68 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55ba26423b78 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55ba26423bf8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55ba26423c78 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55ba26423e20 <col:59> 0 0
|-CXXMethodDecl 0x55ba26423fb8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55ba26423e98 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55ba26423f18 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55ba26427140 <col:70, line:534:5>
|   |-DeclStmt 0x55ba26426c40 <line:528:2, col:20>
|   | |-VarDecl 0x55ba26426af8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55ba26426b60 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55ba26426b98 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55ba26426c00 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55ba26426d10 <line:529:2, col:23>
|   | `-VarDecl 0x55ba26426c70 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55ba26426cf8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55ba26426cd8 <col:18> 'const char *' lvalue ParmVar 0x55ba26423e98 'begin' 'const char *'
|   |-DoStmt 0x55ba264270d8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55ba26427008 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55ba26426ff0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55ba26426fd0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55ba26426d28 <col:6> 'const char *' lvalue Var 0x55ba26426c70 'x' 'const char *'
|   | |     `-CallExpr 0x55ba26426f20 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55ba26426f08 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55ba26426ec0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55ba26425770 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55ba26426f88 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55ba26426f70 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55ba26426de0 <col:20, col:27> 'String' (CXXTemporary 0x55ba26426de0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55ba26426da8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55ba26426fa0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55ba26426e00 <col:30> 'const char *' lvalue Var 0x55ba26426c70 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55ba26426fb8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55ba26426e20 <col:33> 'const char *' lvalue ParmVar 0x55ba26423f18 'end' 'const char *'
|   | |       |-UnaryOperator 0x55ba26426e60 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55ba26426e40 <col:39> 'String' lvalue Var 0x55ba26426af8 'name' 'String'
|   | |       |-UnaryOperator 0x55ba26426e98 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55ba26426e78 <col:46> 'String' lvalue Var 0x55ba26426b98 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55ba26426eb0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55ba264270c0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55ba264270a8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55ba26427088 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55ba26427058 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|   |         `-ImplicitCastExpr 0x55ba26427040 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55ba26427020 <col:11> 'String' lvalue Var 0x55ba26426af8 'name' 'String'
|   `-ReturnStmt 0x55ba26427130 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55ba26427118 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55ba264270f8 <col:9> 'const char *' lvalue Var 0x55ba26426c70 'x' 'const char *'
|-CXXMethodDecl 0x55ba26424108 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55ba26424078 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55ba26427748 <col:55, line:550:5>
|   `-IfStmt 0x55ba26427720 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55ba26427380 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55ba26427368 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ba26427350 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ba26427330 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ba26427300 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|     | |       `-DeclRefExpr 0x55ba264271a0 <col:6> 'const String' lvalue ParmVar 0x55ba26424078 'x' 'const String &'
|     | `-BinaryOperator 0x55ba264272e0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55ba264272b0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55ba26427260 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55ba26427248 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55ba26427200 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55ba26136e80 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55ba264271c0 <col:11> 'const String' lvalue ParmVar 0x55ba26424078 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55ba264271e0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55ba264272c8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55ba26427298 <col:19> 'char' 123
|     |-ReturnStmt 0x55ba264273f0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55ba264273c0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55ba264273a0 <col:13> 'const String' lvalue ParmVar 0x55ba26424078 'x' 'const String &'
|     `-IfStmt 0x55ba264276f8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55ba26427488 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba26427470 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba26427450 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba26427420 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|       |       `-DeclRefExpr 0x55ba26427400 <col:11> 'const String' lvalue ParmVar 0x55ba26424078 'x' 'const String &'
|       |-ReturnStmt 0x55ba26427610 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55ba264275f8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55ba264275c8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55ba264275b0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55ba26427590 <col:13, col:29> 'String' (CXXTemporary 0x55ba26427590)
|       |         `-CallExpr 0x55ba26427540 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55ba26427528 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55ba264274a0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55ba264238b0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55ba26427570 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55ba264274c0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55ba264274e0 <col:28> 'const String' lvalue ParmVar 0x55ba26424078 'x' 'const String &'
|       `-ReturnStmt 0x55ba264276e8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55ba264276d0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55ba264276a0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55ba26427688 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55ba26427668 <col:13, col:20> 'String' (CXXTemporary 0x55ba26427668)
|                 `-CXXTemporaryObjectExpr 0x55ba26427630 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55ba264242d0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55ba264241c0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55ba26424238 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba26425a18 <col:71> 'bool' false
|-CXXRecordDecl 0x55ba26424380 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55ba26424678 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55ba26424610 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55ba264245b0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55ba26424570 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55ba26119ee0 'String'
|       | `-CXXRecord 0x55ba26119e50 'String'
|       |-BuiltinType 0x55ba25dee580 'int'
|       `-DecayedType 0x55ba262d0ef0 '__va_list_tag *' sugar
|         |-TypedefType 0x55ba262d0ec0 'va_list' sugar
|         | |-Typedef 0x55ba2600bfa0 'va_list'
|         | `-TypedefType 0x55ba2600bf50 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55ba25f43b78 '__gnuc_va_list'
|         |   `-TypedefType 0x55ba25f43ae0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55ba25e2fd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55ba25e2fce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55ba25def2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55ba25def238 '__va_list_tag'
|         `-PointerType 0x55ba26011840 '__va_list_tag *'
|           `-RecordType 0x55ba25def2d0 '__va_list_tag'
|             `-CXXRecord 0x55ba25def238 '__va_list_tag'
|-EnumDecl 0x55ba264246d0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55ba264247d0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba26424d30 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba264247b0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55ba26424790 <col:16> 'int' 1
| |-EnumConstantDecl 0x55ba26424860 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba26424d48 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26424840 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55ba26424820 <col:21> 'int' 2
| |-EnumConstantDecl 0x55ba264248f0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba26424d60 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba264248d0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55ba264248b0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55ba26424980 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba26424d78 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26424960 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55ba26424940 <col:17> 'int' 8
| |-EnumConstantDecl 0x55ba26424a10 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba26424d90 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba264249f0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55ba264249d0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55ba26424aa0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba26424da8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26424a80 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55ba26424a60 <col:19> 'int' 32
| |-EnumConstantDecl 0x55ba26424b30 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba26424dd0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26424b10 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55ba26424af0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55ba26424bc0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba26424de8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26424ba0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55ba26424b80 <col:14> 'int' 128
| |-EnumConstantDecl 0x55ba26424c50 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba26424e00 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26424c30 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55ba26424c10 <col:16> 'int' 256
| `-EnumConstantDecl 0x55ba26424ce0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55ba26424e18 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba26424cc0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55ba26424ca0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55ba26425028 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55ba26424e40 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55ba26424ee0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55ba264251b0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55ba264250e8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55ba26425258 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55ba26425298 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55ba264252f8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55ba26425370 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55ba26425770 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55ba264253e8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55ba26425468 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55ba264254e8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55ba26425560 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55ba264255d8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55ba26425650 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55ba26425898 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55ba26425898
| `-ParmVarDecl 0x55ba264259a8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55ba26427aa8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55ba26427aa8
  `-ParmVarDecl 0x55ba26427bb8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba262cff38 prev 0x55ba26315138 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba262d0030 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55ba262d00c0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55ba262d01f8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55ba262d00f8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55ba262d1620 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba262d1600 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55ba262d1198 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55ba262d16b0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55ba262d1670 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55ba262d00f8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55ba262d1200 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55ba262d1730 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba262d16f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55ba262d1260 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55ba262d1770 <col:54> 'bool' false
| `-CompoundStmt 0x55ba262d1878 <col:61, line:38:5>
|   `-BinaryOperator 0x55ba262d1858 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55ba262d17f0 <col:9> 'const Element *' lvalue ->_context 0x55ba262d1138
|     | `-CXXThisExpr 0x55ba262d17e0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55ba262d1840 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55ba262d1820 <col:20> 'int' 0
|-CXXConstructorDecl 0x55ba262d0408 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba262d02b8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55ba262d0330 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55ba262d1658 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba262d1638 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55ba262d1138 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55ba262d18d0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55ba262d1890 <col:20> 'const Element *' lvalue ParmVar 0x55ba262d02b8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55ba262d1198 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55ba262d1950 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55ba262d1910 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55ba262d0330 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55ba262d1200 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55ba262d19d0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba262d1990 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55ba262d1260 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55ba262d1a10 <col:73> 'bool' false
| `-CompoundStmt 0x55ba262d1a88 <col:80, line:46:5>
|-CXXMethodDecl 0x55ba262d0538 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55ba262d1b00 <col:36, line:51:5>
|   `-ReturnStmt 0x55ba262d1af0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55ba262d1ad8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55ba262d1aa8 <col:16> 'const Element *const' lvalue ->_context 0x55ba262d1138
|         `-CXXThisExpr 0x55ba262d1a98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55ba262d0628 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55ba262d1b80 <col:32, line:57:5>
|   `-ReturnStmt 0x55ba262d1b70 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55ba262d1b58 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55ba262d1b28 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55ba262d1198
|         `-CXXThisExpr 0x55ba262d1b18 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55ba262d06e8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55ba262d0870 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55ba262d07a0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55ba262d09c0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55ba262d0930 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55ba262d0b10 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55ba262d0a80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55ba262d0d18 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55ba262d0bc8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55ba262d0c40 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55ba262d1048 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55ba262d0dd8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55ba262d0e58 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55ba262d0f20 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55ba262d1100 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55ba262d1138 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55ba262d1198 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55ba262d1200 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55ba262d1260 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55ba262d12b0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55ba262d12b0
| `-ParmVarDecl 0x55ba262d13c8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55ba262d1468 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55ba262d1468
| `-ParmVarDecl 0x55ba262d1578 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55ba26434228 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba263dd940 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55ba263ddb18 prev 0x55ba263dd940 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55ba263ddba8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55ba263ddbd0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263df7a0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55ba263df750 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55ba263de080 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55ba263ddf80 'type'
|     `-TemplateSpecializationType 0x55ba263ddf10 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55ba263dddf0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55ba263dddd0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55ba263dddb0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55ba263ddef0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55ba263dde10 'char_array'
|-TypedefDecl 0x55ba263df858 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55ba263df820 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55ba263df800 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55ba263df7a0 'type'
|     `-ElaboratedType 0x55ba263df750 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55ba263de080 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55ba263ddf80 'type'
|         `-TemplateSpecializationType 0x55ba263ddf10 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55ba263dddf0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55ba263dddd0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55ba263dddb0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55ba263ddef0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55ba263dde10 'char_array'
|-CXXMethodDecl 0x55ba263df9d8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55ba263df8e8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55ba263dfac8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55ba263dfba8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55ba263dfe78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55ba263dfd80 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55ba263e00b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ba263dff30 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba263dffa8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba263e0288 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ba263e0178 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba263e01f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba263e03e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55ba263e04b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55ba263e0708 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ba263e0578 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55ba263e05f0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba263e0968 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55ba263e07d8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55ba263e0850 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba263e0b28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55ba263e0a38 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba263e0ce8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55ba263e0bf0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba263e0da0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ba263e0e50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55ba263e1088 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ba263e0f00 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba263e0f78 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba263e7738 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55ba263e1230 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55ba263e7800 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55ba263e7850 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55ba263e78a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba263dc348 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55ba263dc558 prev 0x55ba263dc348 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55ba263dd8b0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55ba263dd860 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55ba263dd840 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55ba263dd6f0 'type'
|     `-SubstTemplateTypeParmType 0x55ba263dd510 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55ba260b3d30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260b3cd8 'T'
|       `-RecordType 0x55ba263dd060 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55ba263dcf78 'sized_array_memory'
|-FieldDecl 0x55ba263e78f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55ba263e7940 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55ba263e7978 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55ba263dc5f0 'int' sugar
|   |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|   `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263e7a08 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55ba263e79d0 'int &'
|   `-SubstTemplateTypeParmType 0x55ba263dc5f0 'int' sugar
|     |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|     `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263e7ac8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55ba263e7a90 'const int &'
|   `-QualType 0x55ba263dc5f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ba263dc5f0 'int' sugar
|       |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|       `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263e7b58 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55ba263e7b20 'int *'
|   `-SubstTemplateTypeParmType 0x55ba263dc5f0 'int' sugar
|     |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|     `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263e7be8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55ba263e7bb0 'const int *'
|   `-QualType 0x55ba263dc5f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ba263dc5f0 'int' sugar
|       |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|       `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263e87d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55ba263e8780 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55ba263e8760 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55ba263e86f0 'type'
|     `-SubstTemplateTypeParmType 0x55ba263e84b0 'int' sugar
|       |-TemplateTypeParmType 0x55ba260beb30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260beae0 'T'
|       `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263e8838 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55ba263e7a90 'const int &'
|   `-QualType 0x55ba263dc5f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ba263dc5f0 'int' sugar
|       |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|       `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263e8890 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263e88f8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55ba263e7b20 'int *'
|   `-SubstTemplateTypeParmType 0x55ba263dc5f0 'int' sugar
|     |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|     `-BuiltinType 0x55ba25dee580 'int'
|-TypedefDecl 0x55ba263e8960 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55ba263e7bb0 'const int *'
|   `-QualType 0x55ba263dc5f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ba263dc5f0 'int' sugar
|       |-TemplateTypeParmType 0x55ba260eba20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba260eb9c8 'T'
|       `-BuiltinType 0x55ba25dee580 'int'
|-EnumDecl 0x55ba263e89b8 <line:134:5> col:5
| `-EnumConstantDecl 0x55ba263e8ab0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55ba263e8a90 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55ba260ed0a8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55ba260ed080 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55ba260ed060 <col:40> 'int' 1
|-CXXConstructorDecl 0x55ba263e8b38 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55ba263e8d88 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba263e8bf0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba263e8c90 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55ba263e9048 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55ba263e8f30 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55ba263e9308 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55ba263e91f0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55ba263e9650 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55ba263e9530 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55ba263e9960 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55ba263e9840 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55ba263e9c50 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba263e9a98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba263e9b10 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ba263e9d78 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55ba263e9e58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263e9eb0 <col:30> Inherited
|-CXXMethodDecl 0x55ba263e9ef8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55ba263e9fa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263ea000 <col:30> Inherited
|-CXXMethodDecl 0x55ba263ea0c8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ba263ea178 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263ea1d0 <col:30> Inherited
|-CXXMethodDecl 0x55ba263ea218 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ba263ea2c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263ea320 <col:30> Inherited
|-CXXMethodDecl 0x55ba263ea368 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ba263ea418 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263ea470 <col:30> Inherited
|-CXXMethodDecl 0x55ba263ea4b8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ba263ea568 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba263ea5c0 <col:30> Inherited
|-CXXMethodDecl 0x55ba263ea5e8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ba263ea698 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ba263ea748 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ba263ea908 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba263ea7f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba263ea870 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ba263eaa58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55ba263ea9c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263eac08 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55ba263eab10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ba263eacc0 <col:20>
| `-OptimizeNoneAttr 0x55ba263ead18 <col:30>
|-CXXMethodDecl 0x55ba263eae38 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55ba263ead40 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ba263eaef0 <col:20>
| `-OptimizeNoneAttr 0x55ba263eaf48 <col:30>
|-CXXMethodDecl 0x55ba263eb000 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ba263eaf70 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263eb148 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ba263eb0b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263eb278 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55ba263eb3a8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55ba263eb478 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55ba263eb548 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55ba263eb688 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ba263eb5f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263eb7d0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ba263eb740 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba263eb918 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55ba263eb888 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ba263eb9d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55ba263ebad0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55ba263eba40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ba263ebb88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55ba263ebc48 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55ba263ebd48 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55ba263ebec8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55ba263ebe08 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55ba263ec688 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55ba263ebf80 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55ba263ec5e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55ba263ec4e8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55ba263ec768 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ba263ec8b8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55ba263ec828 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ba263ec970 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55ba263ecbb8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba263eca30 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55ba263ecaa8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ba263ecd78 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55ba263ecc88 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55ba263ecfc8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55ba263ece40 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55ba263eceb8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55ba263ed088 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55ba263ed2e8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55ba263ed1f0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55ba263ed3b8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba263da4b8 prev 0x55ba262d6a98 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba263da5b0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55ba263da6a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55ba263ff130 <col:16, line:828:9>
|-CXXDestructorDecl 0x55ba263da790 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55ba263ff140 <col:25, line:830:9>
|-CXXMethodDecl 0x55ba263da890 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55ba263da940 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55ba263da9e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55ba263da9e8
| `-ParmVarDecl 0x55ba263daaf8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55ba263db2b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55ba263db2b8
  `-ParmVarDecl 0x55ba263db3c8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba262d68a8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55ba262d6a08 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55ba262d6a98 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55ba262d6b50 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55ba263bfee8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55ba262d6b88 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ba263ee978 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ba263ee958 <col:31> 'int' 0
|-CXXConstructorDecl 0x55ba263c0208 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55ba263c0080 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55ba263c00f8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ba263ee9b0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ba263ee990 <col:59> 'int' 0
|-CXXConstructorDecl 0x55ba263c03e0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba263c02d0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55ba263c0348 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ba263ee9e8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ba263ee9c8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55ba263c0798 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba263c0580 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55ba263c05f8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55ba263c0670 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ba263eea20 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ba263eea00 <col:31> 'int' 0
|-CXXConstructorDecl 0x55ba263c0958 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55ba263c0898 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55ba263c0a50 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55ba263c0c38 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55ba263c0b40 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55ba263c0d28 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55ba263eedd0 <col:24, line:291:5>
|   `-ReturnStmt 0x55ba263eedc0 <line:290:9, col:79>
|     `-BinaryOperator 0x55ba263eeda0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55ba263eec78 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55ba263eebd0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55ba263eebb0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55ba263eeaa8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55ba263eea90 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55ba263eea78 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55ba263eea48 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55ba263dc2e0
|       | |   |       `-CXXThisExpr 0x55ba263eea38 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55ba263eeb98 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55ba263eeb80 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55ba263eeb48 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55ba263eeb18 <col:28, col:35> '<bound member function type>' ->size 0x55ba263a1818
|       | |           `-ImplicitCastExpr 0x55ba263eeb68 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55ba263eeb00 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55ba263eead0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55ba263dc2e0
|       | |                 `-CXXThisExpr 0x55ba263eeac0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55ba263eec60 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55ba263eec48 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55ba263eec30 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55ba263eec00 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55ba263ed500
|       |         `-CXXThisExpr 0x55ba263eebf0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55ba263eed80 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55ba263eed68 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55ba263eed50 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55ba263eed10 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55ba263eecf8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55ba263eeca8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55ba263ed5b0
|         |     |   `-CXXThisExpr 0x55ba263eec98 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55ba263eecd8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55ba263eed30 <col:79> 'int' 0
|-CXXMethodDecl 0x55ba263c0de8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55ba263eefa8 <col:32, line:296:5>
|   `-ReturnStmt 0x55ba263eef98 <line:295:9, col:49>
|     `-BinaryOperator 0x55ba263eef78 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55ba263eee58 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55ba263eee40 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55ba263eee28 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55ba263eedf8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55ba263ed500
|       |       `-CXXThisExpr 0x55ba263eede8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55ba263eef58 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55ba263eef40 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55ba263eef28 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55ba263eeee8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55ba263eeed0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55ba263eee80 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55ba263ed5b0
|         |     |   `-CXXThisExpr 0x55ba263eee70 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55ba263eeeb0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55ba263eef08 <col:49> 'int' 0
|-CXXMethodDecl 0x55ba263c0ed8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55ba263ef1b8 <col:19, line:306:5>
|   |-IfStmt 0x55ba263ef0d8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55ba263ef018 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55ba263ef000 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55ba263eefd0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55ba263dc2e0
|   | |     `-CXXThisExpr 0x55ba263eefc0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55ba263ef0b8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55ba263ef088 <col:13, col:20> '<bound member function type>' ->clear 0x55ba263a4218
|   |     `-ImplicitCastExpr 0x55ba263ef070 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55ba263ef040 <col:13> 'Vector<String> *' lvalue ->_conf 0x55ba263dc2e0
|   |         `-CXXThisExpr 0x55ba263ef030 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55ba263ef160 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55ba263ef130 <col:9, col:16> '<bound member function type>' .clear 0x55ba263ed088
|   |   `-MemberExpr 0x55ba263ef100 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55ba263ed4a0
|   |     `-CXXThisExpr 0x55ba263ef0f0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55ba263ef1a8 <line:305:9, col:17>
|     `-UnaryOperator 0x55ba263ef190 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba263ef180 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ba263c1158 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55ba263c1060 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55ba263c12d8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55ba263c1210 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55ba263c1658 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55ba263c1380 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55ba263c15b8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55ba263c1428 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55ba263c14a0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55ba263ef4d8 <col:67, line:327:5>
|     |-WhileStmt 0x55ba263ef488 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55ba263ef2a0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55ba263ef220 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55ba2630d608 0x55ba26156be8 0x55ba261568c0 0x55ba26147090 0x55ba26146d40 0x55ba26146630 0x55ba26118fa0 0x55ba260a6470
|     | | |-DeclRefExpr 0x55ba263ef1e0 <col:16> 'Iter' lvalue ParmVar 0x55ba263c1428 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55ba263ef200 <col:25> 'Iter' lvalue ParmVar 0x55ba263c14a0 'end' 'Iter'
|     | `-CompoundStmt 0x55ba263ef468 <col:30, line:325:9>
|     |   |-CallExpr 0x55ba263ef408 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55ba263ef2e8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55ba263ef3d8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55ba263ef368 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|     |   |   `-DeclRefExpr 0x55ba263ef348 <col:24> 'Iter' lvalue ParmVar 0x55ba263c1428 'begin' 'Iter'
|     |   `-UnaryOperator 0x55ba263ef450 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55ba263ef430 <col:15> 'Iter' lvalue ParmVar 0x55ba263c1428 'begin' 'Iter'
|     `-ReturnStmt 0x55ba263ef4c8 <line:326:9, col:17>
|       `-UnaryOperator 0x55ba263ef4b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263ef4a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ba263c1760 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55ba263c16d0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55ba263c18a8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55ba263c1818 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55ba263c1970 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55ba263ef5b8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55ba263ef558 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55ba263ef508 <col:9> '<bound member function type>' ->reset_from 0x55ba263ed928
|   | | `-CXXThisExpr 0x55ba263ef4f8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55ba263ef538 <col:20> 'int' 0
|   `-ReturnStmt 0x55ba263ef5a8 <line:352:9, col:17>
|     `-UnaryOperator 0x55ba263ef590 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba263ef580 <col:17> 'Args *' this
|-VarDecl 0x55ba263c1a28 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ba263c1a90 <col:38> 'int' 1
|-VarDecl 0x55ba263c1b20 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ba263c1b88 <col:39> 'int' 2
|-VarDecl 0x55ba263c1c18 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ba263c1c80 <col:39> 'int' 4
|-VarDecl 0x55ba263c1d10 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ba263c1d78 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55ba263c20f8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55ba263c1df0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba263c2058 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ba263c1ea0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c1f48 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f1030 <col:43, line:371:5>
|     `-ReturnStmt 0x55ba263ef700 <line:370:9, col:34>
|       `-CallExpr 0x55ba263ef6c8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263ef5e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263ef668 <col:21> 'const char *' lvalue ParmVar 0x55ba263c1ea0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263ef688 <col:30> 'int' 0
|         `-DeclRefExpr 0x55ba263ef6a8 <col:33> 'T' lvalue ParmVar 0x55ba263c1f48 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263c2428 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55ba263c2160 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba263c2388 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ba263c2210 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c22b8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f1180 <col:45, line:375:5>
|     `-ReturnStmt 0x55ba263f1170 <line:374:9, col:42>
|       `-CallExpr 0x55ba263f1138 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f1058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f10d8 <col:21> 'const char *' lvalue ParmVar 0x55ba263c2210 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f10f8 <col:30> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int'
|         `-DeclRefExpr 0x55ba263f1118 <col:41> 'T' lvalue ParmVar 0x55ba263c22b8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263c2758 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55ba263c2490 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55ba263c26b8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55ba263c2540 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55ba263c25e8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55ba263f12d0 <col:45, line:379:5>
| |   `-ReturnStmt 0x55ba263f12c0 <line:378:9, col:43>
| |     `-CallExpr 0x55ba263f1288 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55ba263f11a8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55ba263f1228 <col:21> 'const char *' lvalue ParmVar 0x55ba263c2540 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55ba263f1248 <col:30> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int'
| |       `-DeclRefExpr 0x55ba263f1268 <col:42> 'T' lvalue ParmVar 0x55ba263c25e8 'x' 'T &'
| `-CXXMethodDecl 0x55ba264346b8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55ba264344d0 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55ba264345a8 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x55ba263c2a88 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55ba263c27c0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba263c29e8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ba263c2870 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c2918 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f14d0 <col:46, line:383:5>
|     `-ReturnStmt 0x55ba263f14c0 <line:382:9, col:55>
|       `-CallExpr 0x55ba263f1488 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f12f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f1378 <col:21> 'const char *' lvalue ParmVar 0x55ba263c2870 'keyword' 'const char *'
|         |-BinaryOperator 0x55ba263f1448 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55ba263f13f8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ba263f13d8 <col:30> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ba263f1430 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ba263f1410 <col:42> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55ba263f1468 <col:54> 'T' lvalue ParmVar 0x55ba263c2918 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263c2e88 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55ba263c2af0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba263c2de8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55ba263c2ba0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c2c20 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263c2cc8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f1610 <col:54, line:388:5>
|     |-CallExpr 0x55ba263f1598 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba263f14e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55ba263f1528 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55ba263f1538 <col:30> 'const char *' lvalue ParmVar 0x55ba263c2ba0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba263f1558 <col:39> 'int' lvalue ParmVar 0x55ba263c2c20 'flags' 'int'
|     | `-DeclRefExpr 0x55ba263f1578 <col:46> 'T' lvalue ParmVar 0x55ba263c2cc8 'x' 'T &'
|     `-ReturnStmt 0x55ba263f1600 <line:387:9, col:17>
|       `-UnaryOperator 0x55ba263f15e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f15d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263c3338 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55ba263c2ef8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba263c2f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba263c3298 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55ba263c3038 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c30d8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55ba263c3178 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba263f1780 <col:74, line:403:5>
|     `-ReturnStmt 0x55ba263f1770 <line:402:9, col:56>
|       `-CallExpr 0x55ba263f1730 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f1640 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f16b0 <col:28> 'const char *' lvalue ParmVar 0x55ba263c3038 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263f16d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55ba263f16f0 <col:40> 'T' lvalue ParmVar 0x55ba263c30d8 'x' 'T &'
|         `-DeclRefExpr 0x55ba263f1710 <col:43> 'const V' lvalue ParmVar 0x55ba263c3178 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ba263c37a8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55ba263c33a8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba263c3428 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba263c3708 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55ba263c34e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c3588 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55ba263c3628 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba263f18e8 <col:76, line:407:5>
|     `-ReturnStmt 0x55ba263f18d8 <line:406:9, col:65>
|       `-CallExpr 0x55ba263f1898 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f17a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f1818 <col:28> 'const char *' lvalue ParmVar 0x55ba263c34e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f1838 <col:37> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int'
|         |-DeclRefExpr 0x55ba263f1858 <col:49> 'T' lvalue ParmVar 0x55ba263c3588 'x' 'T &'
|         `-DeclRefExpr 0x55ba263f1878 <col:52> 'const V' lvalue ParmVar 0x55ba263c3628 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ba263c3cf8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55ba263c3818 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba263c3898 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba263c3c58 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55ba263c3958 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c39d8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263c3a78 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55ba263c3b18 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba263f1a50 <col:85, line:412:5>
|     |-CallExpr 0x55ba263f19d0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba263f1900 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55ba263f1940 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55ba263f1950 <col:37> 'const char *' lvalue ParmVar 0x55ba263c3958 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba263f1970 <col:46> 'int' lvalue ParmVar 0x55ba263c39d8 'flags' 'int'
|     | |-DeclRefExpr 0x55ba263f1990 <col:53> 'T' lvalue ParmVar 0x55ba263c3a78 'x' 'T &'
|     | `-DeclRefExpr 0x55ba263f19b0 <col:56> 'const V' lvalue ParmVar 0x55ba263c3b18 'default_value' 'const V &'
|     `-ReturnStmt 0x55ba263f1a40 <line:411:9, col:17>
|       `-UnaryOperator 0x55ba263f1a28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f1a18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263c4188 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55ba263c3d70 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c3de8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263c40e8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba263c3ea8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c3f20 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c3fc8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f1bd0 <col:53, line:425:5>
|     `-ReturnStmt 0x55ba263f1bc0 <line:424:9, col:42>
|       `-CallExpr 0x55ba263f1b80 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f1a80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f1b00 <col:21> 'const char *' lvalue ParmVar 0x55ba263c3ea8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263f1b20 <col:30> 'int' 0
|         |-DeclRefExpr 0x55ba263f1b40 <col:33> 'P' lvalue ParmVar 0x55ba263c3f20 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f1b60 <col:41> 'T' lvalue ParmVar 0x55ba263c3fc8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263c45d8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55ba263c41f8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c4278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263c4538 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba263c4338 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c43b0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c4458 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f1d48 <col:55, line:429:5>
|     `-ReturnStmt 0x55ba263f1d38 <line:428:9, col:50>
|       `-CallExpr 0x55ba263f1cf8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f1bf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f1c78 <col:21> 'const char *' lvalue ParmVar 0x55ba263c4338 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f1c98 <col:30> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int'
|         |-DeclRefExpr 0x55ba263f1cb8 <col:41> 'P' lvalue ParmVar 0x55ba263c43b0 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f1cd8 <col:49> 'T' lvalue ParmVar 0x55ba263c4458 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263c4a28 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55ba263c4648 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c46c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263c4988 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba263c4788 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c4800 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c48a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f1ec0 <col:55, line:433:5>
|     `-ReturnStmt 0x55ba263f1eb0 <line:432:9, col:51>
|       `-CallExpr 0x55ba263f1e70 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f1d70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f1df0 <col:21> 'const char *' lvalue ParmVar 0x55ba263c4788 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f1e10 <col:30> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int'
|         |-DeclRefExpr 0x55ba263f1e30 <col:42> 'P' lvalue ParmVar 0x55ba263c4800 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f1e50 <col:50> 'T' lvalue ParmVar 0x55ba263c48a8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263c4e78 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55ba263c4a98 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c4b18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263c4dd8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba263c4bd8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c4c50 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c4cf8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f20e8 <col:56, line:437:5>
|     `-ReturnStmt 0x55ba263f20d8 <line:436:9, col:63>
|       `-CallExpr 0x55ba263f2098 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f1ee8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f1f68 <col:21> 'const char *' lvalue ParmVar 0x55ba263c4bd8 'keyword' 'const char *'
|         |-BinaryOperator 0x55ba263f2038 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55ba263f1fe8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ba263f1fc8 <col:30> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ba263f2020 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ba263f2000 <col:42> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55ba263f2058 <col:54> 'P' lvalue ParmVar 0x55ba263c4c50 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f2078 <col:62> 'T' lvalue ParmVar 0x55ba263c4cf8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263c53a8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55ba263c4ee8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c4f68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263c5308 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba263c5028 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c50a8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263c5120 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c51c8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f2250 <col:64, line:442:5>
|     |-CallExpr 0x55ba263f21d0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba263f2100 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55ba263f2140 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55ba263f2150 <col:30> 'const char *' lvalue ParmVar 0x55ba263c5028 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba263f2170 <col:39> 'int' lvalue ParmVar 0x55ba263c50a8 'flags' 'int'
|     | |-DeclRefExpr 0x55ba263f2190 <col:46> 'P' lvalue ParmVar 0x55ba263c5120 'parser' 'P'
|     | `-DeclRefExpr 0x55ba263f21b0 <col:54> 'T' lvalue ParmVar 0x55ba263c51c8 'x' 'T &'
|     `-ReturnStmt 0x55ba263f2240 <line:441:9, col:17>
|       `-UnaryOperator 0x55ba263f2228 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f2218 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263c59a8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55ba263c5420 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c5498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55ba263c5518 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ba263c5908 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55ba263c55e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c5658 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c56f8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55ba263c57c8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba263f23e8 <col:84, line:458:5>
|     `-ReturnStmt 0x55ba263f23d8 <line:457:9, col:64>
|       `-CallExpr 0x55ba263f2390 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f2280 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f22f0 <col:28> 'const char *' lvalue ParmVar 0x55ba263c55e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263f2310 <col:37> 'int' 0
|         |-DeclRefExpr 0x55ba263f2330 <col:40> 'P' lvalue ParmVar 0x55ba263c5658 'parser' 'P'
|         |-DeclRefExpr 0x55ba263f2350 <col:48> 'T' lvalue ParmVar 0x55ba263c56f8 'x' 'T &'
|         `-DeclRefExpr 0x55ba263f2370 <col:51> 'const V' lvalue ParmVar 0x55ba263c57c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ba263c5f28 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55ba263c5a20 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c5a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55ba263c5b18 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ba263c5e88 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55ba263c5be0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c5c58 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c5cf8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55ba263c5d98 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba263f2578 <col:86, line:462:5>
|     `-ReturnStmt 0x55ba263f2568 <line:461:9, col:73>
|       `-CallExpr 0x55ba263f2520 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f2410 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f2480 <col:28> 'const char *' lvalue ParmVar 0x55ba263c5be0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f24a0 <col:37> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int'
|         |-DeclRefExpr 0x55ba263f24c0 <col:49> 'P' lvalue ParmVar 0x55ba263c5c58 'parser' 'P'
|         |-DeclRefExpr 0x55ba263f24e0 <col:57> 'T' lvalue ParmVar 0x55ba263c5cf8 'x' 'T &'
|         `-DeclRefExpr 0x55ba263f2500 <col:60> 'const V' lvalue ParmVar 0x55ba263c5d98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ba263c6588 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55ba263c5fa0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c6018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55ba263c6098 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ba263c64e8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55ba263c6160 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c61e0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263c6258 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c62f8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55ba263c6398 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba263f2708 <col:95, line:467:5>
|     |-CallExpr 0x55ba263f2680 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba263f2590 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55ba263f25d0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55ba263f25e0 <col:37> 'const char *' lvalue ParmVar 0x55ba263c6160 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba263f2600 <col:46> 'int' lvalue ParmVar 0x55ba263c61e0 'flags' 'int'
|     | |-DeclRefExpr 0x55ba263f2620 <col:53> 'P' lvalue ParmVar 0x55ba263c6258 'parser' 'P'
|     | |-DeclRefExpr 0x55ba263f2640 <col:61> 'T' lvalue ParmVar 0x55ba263c62f8 'x' 'T &'
|     | `-DeclRefExpr 0x55ba263f2660 <col:64> 'const V' lvalue ParmVar 0x55ba263c6398 'default_value' 'const V &'
|     `-ReturnStmt 0x55ba263f26f8 <line:466:9, col:17>
|       `-UnaryOperator 0x55ba263f26e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f26d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263c6b68 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55ba263c6608 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c6688 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba263c6708 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba263c6ac8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba263c67d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c6848 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c68e8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba263c6988 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba263f28b0 <col:63, line:481:5>
|     `-ReturnStmt 0x55ba263f28a0 <line:480:9, col:47>
|       `-CallExpr 0x55ba263f2858 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f2738 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f27b8 <col:21> 'const char *' lvalue ParmVar 0x55ba263c67d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263f27d8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55ba263f27f8 <col:33> 'P' lvalue ParmVar 0x55ba263c6848 'parser' 'P'
|         |-DeclRefExpr 0x55ba263f2818 <col:41> 'T1' lvalue ParmVar 0x55ba263c68e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ba263f2838 <col:45> 'T2' lvalue ParmVar 0x55ba263c6988 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ba263c70e8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55ba263c6be0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c6c58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba263c6cd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba263c7048 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba263c6da0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c6e18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c6eb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba263c6f58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba263f2a50 <col:65, line:485:5>
|     `-ReturnStmt 0x55ba263f2a40 <line:484:9, col:55>
|       `-CallExpr 0x55ba263f29f8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f28d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f2958 <col:21> 'const char *' lvalue ParmVar 0x55ba263c6da0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f2978 <col:30> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int'
|         |-DeclRefExpr 0x55ba263f2998 <col:41> 'P' lvalue ParmVar 0x55ba263c6e18 'parser' 'P'
|         |-DeclRefExpr 0x55ba263f29b8 <col:49> 'T1' lvalue ParmVar 0x55ba263c6eb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ba263f29d8 <col:53> 'T2' lvalue ParmVar 0x55ba263c6f58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ba263c7668 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55ba263c7160 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c71d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba263c7258 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba263c75c8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba263c7320 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c7398 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c7438 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba263c74d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba263f2bf0 <col:65, line:489:5>
|     `-ReturnStmt 0x55ba263f2be0 <line:488:9, col:56>
|       `-CallExpr 0x55ba263f2b98 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f2a78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f2af8 <col:21> 'const char *' lvalue ParmVar 0x55ba263c7320 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f2b18 <col:30> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int'
|         |-DeclRefExpr 0x55ba263f2b38 <col:42> 'P' lvalue ParmVar 0x55ba263c7398 'parser' 'P'
|         |-DeclRefExpr 0x55ba263f2b58 <col:50> 'T1' lvalue ParmVar 0x55ba263c7438 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ba263f2b78 <col:54> 'T2' lvalue ParmVar 0x55ba263c74d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ba263c7be8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55ba263c76e0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c7758 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba263c77d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba263c7b48 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba263c78a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c7918 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c79b8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba263c7a58 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba263f2e40 <col:66, line:493:5>
|     `-ReturnStmt 0x55ba263f2e30 <line:492:9, col:68>
|       `-CallExpr 0x55ba263f2de8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f2c18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f2c98 <col:21> 'const char *' lvalue ParmVar 0x55ba263c78a0 'keyword' 'const char *'
|         |-BinaryOperator 0x55ba263f2d68 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55ba263f2d18 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ba263f2cf8 <col:30> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ba263f2d50 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ba263f2d30 <col:42> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55ba263f2d88 <col:54> 'P' lvalue ParmVar 0x55ba263c7918 'parser' 'P'
|         |-DeclRefExpr 0x55ba263f2da8 <col:62> 'T1' lvalue ParmVar 0x55ba263c79b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ba263f2dc8 <col:66> 'T2' lvalue ParmVar 0x55ba263c7a58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ba263c92c8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55ba263c7c60 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263c7cd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba263c7d58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba263c9228 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba263c8ea0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c8f20 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263c8f98 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263c9038 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba263c90d8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba263f2fd0 <col:74, line:498:5>
|     |-CallExpr 0x55ba263f2f48 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba263f2e58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55ba263f2e98 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55ba263f2ea8 <col:30> 'const char *' lvalue ParmVar 0x55ba263c8ea0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba263f2ec8 <col:39> 'int' lvalue ParmVar 0x55ba263c8f20 'flags' 'int'
|     | |-DeclRefExpr 0x55ba263f2ee8 <col:46> 'P' lvalue ParmVar 0x55ba263c8f98 'parser' 'P'
|     | |-DeclRefExpr 0x55ba263f2f08 <col:54> 'T1' lvalue ParmVar 0x55ba263c9038 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55ba263f2f28 <col:58> 'T2' lvalue ParmVar 0x55ba263c90d8 'x2' 'T2 &'
|     `-ReturnStmt 0x55ba263f2fc0 <line:497:9, col:17>
|       `-UnaryOperator 0x55ba263f2fa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f2f98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263c9628 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55ba263c9348 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba263c9588 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba263c9400 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c9478 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55ba263f3118 <col:52, line:509:5>
|     `-ReturnStmt 0x55ba263f3108 <line:508:9, col:44>
|       `-CallExpr 0x55ba263f30d0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f3000 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f3070 <col:26> 'const char *' lvalue ParmVar 0x55ba263c9400 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263f3090 <col:35> 'int' 0
|         `-DeclRefExpr 0x55ba263f30b0 <col:38> 'P' lvalue ParmVar 0x55ba263c9478 'parser' 'P'
|-FunctionTemplateDecl 0x55ba263c9928 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55ba263c9690 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba263c9888 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba263c9740 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c97b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55ba263f3258 <col:54, line:513:5>
|     `-ReturnStmt 0x55ba263f3248 <line:512:9, col:52>
|       `-CallExpr 0x55ba263f3210 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f3140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f31b0 <col:26> 'const char *' lvalue ParmVar 0x55ba263c9740 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f31d0 <col:35> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int'
|         `-DeclRefExpr 0x55ba263f31f0 <col:46> 'P' lvalue ParmVar 0x55ba263c97b8 'parser' 'P'
|-FunctionTemplateDecl 0x55ba263c9c28 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55ba263c9990 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba263c9b88 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba263c9a40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c9ab8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55ba263f3398 <col:54, line:517:5>
|     `-ReturnStmt 0x55ba263f3388 <line:516:9, col:53>
|       `-CallExpr 0x55ba263f3350 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f3280 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f32f0 <col:26> 'const char *' lvalue ParmVar 0x55ba263c9a40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f3310 <col:35> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int'
|         `-DeclRefExpr 0x55ba263f3330 <col:47> 'P' lvalue ParmVar 0x55ba263c9ab8 'parser' 'P'
|-FunctionTemplateDecl 0x55ba263c9f28 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55ba263c9c90 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba263c9e88 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba263c9d40 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263c9db8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55ba263f3588 <col:55, line:521:5>
|     `-ReturnStmt 0x55ba263f3578 <line:520:9, col:65>
|       `-CallExpr 0x55ba263f3540 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f33c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f3430 <col:26> 'const char *' lvalue ParmVar 0x55ba263c9d40 'keyword' 'const char *'
|         |-BinaryOperator 0x55ba263f3500 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55ba263f34b0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ba263f3490 <col:35> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ba263f34e8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ba263f34c8 <col:47> 'const int' lvalue Var 0x55ba263c1b20 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55ba263f3520 <col:59> 'P' lvalue ParmVar 0x55ba263c9db8 'parser' 'P'
|-FunctionTemplateDecl 0x55ba263ca2f8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55ba263c9f90 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba263ca258 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55ba263ca040 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263ca0c0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263ca138 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55ba263f36c8 <col:63, line:526:5>
|     |-CallExpr 0x55ba263f3650 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba263f35a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55ba263f35e0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55ba263f35f0 <col:35> 'const char *' lvalue ParmVar 0x55ba263ca040 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba263f3610 <col:44> 'int' lvalue ParmVar 0x55ba263ca0c0 'flags' 'int'
|     | `-DeclRefExpr 0x55ba263f3630 <col:51> 'P' lvalue ParmVar 0x55ba263ca138 'parser' 'P'
|     `-ReturnStmt 0x55ba263f36b8 <line:525:9, col:17>
|       `-UnaryOperator 0x55ba263f36a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f3690 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263ca748 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55ba263ca368 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263ca3e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263ca6a8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba263ca4a8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263ca520 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263ca5c8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f3820 <col:58, line:541:5>
|     `-ReturnStmt 0x55ba263f3810 <line:540:9, col:39>
|       `-CallExpr 0x55ba263f37d8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f36f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f3778 <col:21> 'const char *' lvalue ParmVar 0x55ba263ca4a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f3798 <col:30> 'P' lvalue ParmVar 0x55ba263ca520 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f37b8 <col:38> 'T' lvalue ParmVar 0x55ba263ca5c8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263cab98 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55ba263ca7b8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263ca838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263caaf8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba263ca8f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263ca970 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263caa18 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f3958 <col:60, line:545:5>
|     `-ReturnStmt 0x55ba263f3948 <line:544:9, col:41>
|       `-CallExpr 0x55ba263f3910 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f3848 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f38b0 <col:23> 'const char *' lvalue ParmVar 0x55ba263ca8f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f38d0 <col:32> 'P' lvalue ParmVar 0x55ba263ca970 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f38f0 <col:40> 'T' lvalue ParmVar 0x55ba263caa18 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263cafe8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55ba263cac08 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263cac88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263caf48 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba263cad48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cadc0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263cae68 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f3a90 <col:60, line:549:5>
|     `-ReturnStmt 0x55ba263f3a80 <line:548:9, col:41>
|       `-CallExpr 0x55ba263f3a48 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f3980 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f39e8 <col:23> 'const char *' lvalue ParmVar 0x55ba263cad48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f3a08 <col:32> 'P' lvalue ParmVar 0x55ba263cadc0 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f3a28 <col:40> 'T' lvalue ParmVar 0x55ba263cae68 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263cb438 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55ba263cb058 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263cb0d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263cb398 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba263cb198 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cb210 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263cb2b8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f3bc8 <col:61, line:553:5>
|     `-ReturnStmt 0x55ba263f3bb8 <line:552:9, col:42>
|       `-CallExpr 0x55ba263f3b80 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f3ab8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f3b20 <col:24> 'const char *' lvalue ParmVar 0x55ba263cb198 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f3b40 <col:33> 'P' lvalue ParmVar 0x55ba263cb210 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f3b60 <col:41> 'T' lvalue ParmVar 0x55ba263cb2b8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263cb918 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55ba263cb4a8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263cb528 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263cb878 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba263cb5e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cb668 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263cb6e0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263cb788 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f3d40 <col:69, line:557:5>
|     `-ReturnStmt 0x55ba263f3d30 <line:556:9, col:46>
|       `-CallExpr 0x55ba263f3cf0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f3bf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f3c70 <col:21> 'const char *' lvalue ParmVar 0x55ba263cb5e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f3c90 <col:30> 'int' lvalue ParmVar 0x55ba263cb668 'flags' 'int'
|         |-DeclRefExpr 0x55ba263f3cb0 <col:37> 'P' lvalue ParmVar 0x55ba263cb6e0 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f3cd0 <col:45> 'T' lvalue ParmVar 0x55ba263cb788 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263cbc28 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55ba263cb990 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba263cbb88 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba263cba40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cbab8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55ba263f3e80 <col:56, line:571:5>
|     `-ReturnStmt 0x55ba263f3e70 <line:570:9, col:48>
|       `-CallExpr 0x55ba263f3e38 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f3d68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f3dd8 <col:30> 'const char *' lvalue ParmVar 0x55ba263cba40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263f3df8 <col:39> 'int' 0
|         `-DeclRefExpr 0x55ba263f3e18 <col:42> 'P' lvalue ParmVar 0x55ba263cbab8 'parser' 'P'
|-FunctionTemplateDecl 0x55ba263cbfb8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55ba263cbc90 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba263cbf18 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55ba263cbd40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cbdc0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263cbe38 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55ba263f4050 <col:67, line:576:5>
|     |-CallExpr 0x55ba263f3fd8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba263f3e98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55ba263f3ed8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55ba263f3ee8 <col:39> 'const char *' lvalue ParmVar 0x55ba263cbd40 'keyword' 'const char *'
|     | |-BinaryOperator 0x55ba263f3f98 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55ba263f3f48 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55ba263f3f08 <col:48> 'int' lvalue ParmVar 0x55ba263cbdc0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55ba263f3f80 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ba263f3f60 <col:56> 'const int' lvalue Var 0x55ba263c1d10 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55ba263f3fb8 <col:68> 'P' lvalue ParmVar 0x55ba263cbe38 'parser' 'P'
|     `-ReturnStmt 0x55ba263f4040 <line:575:9, col:17>
|       `-UnaryOperator 0x55ba263f4028 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f4018 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263cc408 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55ba263cc028 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263cc0a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263cc368 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba263cc168 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cc1e0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263cc288 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f41c0 <col:62, line:592:5>
|     `-ReturnStmt 0x55ba263f41b0 <line:591:9, col:51>
|       `-CallExpr 0x55ba263f4170 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f4080 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f40f0 <col:30> 'const char *' lvalue ParmVar 0x55ba263cc168 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263f4110 <col:39> 'int' 0
|         |-DeclRefExpr 0x55ba263f4130 <col:42> 'P' lvalue ParmVar 0x55ba263cc1e0 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f4150 <col:50> 'T' lvalue ParmVar 0x55ba263cc288 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263cc8e8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55ba263cc478 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263cc4f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263cc848 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba263cc5b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cc638 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263cc6b0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263cc758 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f43b8 <col:73, line:597:5>
|     |-CallExpr 0x55ba263f4338 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba263f41d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55ba263f4218 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55ba263f4228 <col:39> 'const char *' lvalue ParmVar 0x55ba263cc5b8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55ba263f42d8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55ba263f4288 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55ba263f4248 <col:48> 'int' lvalue ParmVar 0x55ba263cc638 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55ba263f42c0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ba263f42a0 <col:56> 'const int' lvalue Var 0x55ba263c1d10 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55ba263f42f8 <col:68> 'P' lvalue ParmVar 0x55ba263cc6b0 'parser' 'P'
|     | `-DeclRefExpr 0x55ba263f4318 <col:76> 'T' lvalue ParmVar 0x55ba263cc758 'x' 'T &'
|     `-ReturnStmt 0x55ba263f43a8 <line:596:9, col:17>
|       `-UnaryOperator 0x55ba263f4390 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f4380 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263cce98 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55ba263cc960 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263cc9d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263ccdf8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55ba263cca98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263ccb10 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263cccd0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ba263f4528 <col:65, line:614:5>
|     `-ReturnStmt 0x55ba263f4518 <line:613:9, col:46>
|       `-CallExpr 0x55ba263f44d8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f43e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f4458 <col:25> 'const char *' lvalue ParmVar 0x55ba263cca98 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263f4478 <col:34> 'int' 0
|         |-DeclRefExpr 0x55ba263f4498 <col:37> 'P' lvalue ParmVar 0x55ba263ccb10 'parser' 'P'
|         `-DeclRefExpr 0x55ba263f44b8 <col:45> 'Vector<T>' lvalue ParmVar 0x55ba263cccd0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55ba263cd2c8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55ba263ccf08 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba263cd228 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55ba263ccfc0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cd110 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ba263f4740 <col:55, line:618:5>
|     `-ReturnStmt 0x55ba263f4730 <line:617:9, col:55>
|       `-CallExpr 0x55ba263f46f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f4550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f45c0 <col:25> 'const char *' lvalue ParmVar 0x55ba263ccfc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba263f45e0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55ba263f46b0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55ba263f46d0 <col:54> 'Vector<T>' lvalue ParmVar 0x55ba263cd110 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55ba263cd898 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55ba263cd330 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263cd3a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263cd7f8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55ba263cd468 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cd4e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263cd560 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263cd6b0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ba263f4938 <col:76, line:623:5>
|     |-CallExpr 0x55ba263f48b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba263f4758 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55ba263f4798 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55ba263f47a8 <col:34> 'const char *' lvalue ParmVar 0x55ba263cd468 'keyword' 'const char *'
|     | |-BinaryOperator 0x55ba263f4858 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55ba263f4808 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55ba263f47c8 <col:43> 'int' lvalue ParmVar 0x55ba263cd4e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55ba263f4840 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ba263f4820 <col:51> 'const int' lvalue Var 0x55ba263c1d10 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55ba263f4878 <col:63> 'P' lvalue ParmVar 0x55ba263cd560 'parser' 'P'
|     | `-DeclRefExpr 0x55ba263f4898 <col:71> 'Vector<T>' lvalue ParmVar 0x55ba263cd6b0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55ba263f4928 <line:622:9, col:17>
|       `-UnaryOperator 0x55ba263f4910 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f4900 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263cddd8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55ba263cd910 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263cd988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263cdd38 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55ba263cda48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cdac8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263cdc10 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ba263f4ba0 <col:66, line:627:5>
|     `-ReturnStmt 0x55ba263f4b90 <line:626:9, col:59>
|       `-CallExpr 0x55ba263f4b50 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba263f4968 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba263f49d8 <col:25> 'const char *' lvalue ParmVar 0x55ba263cda48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba263f49f8 <col:34> 'int' lvalue ParmVar 0x55ba263cdac8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55ba263f4b10 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55ba263f4b30 <col:58> 'Vector<T>' lvalue ParmVar 0x55ba263cdc10 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55ba263cde68 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55ba263f4c20 <col:25, line:633:5>
|   `-ReturnStmt 0x55ba263f4c10 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55ba263f4bf8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55ba263f4bc8 <col:16> 'const bool' lvalue ->_status 0x55ba263dc148
|         `-CXXThisExpr 0x55ba263f4bb8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55ba263cdfe8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55ba263cdf20 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55ba263f4d08 <col:27, line:639:5>
|   |-BinaryOperator 0x55ba263f4cb0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ba263f4c38 <col:9> 'bool' lvalue ParmVar 0x55ba263cdf20 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ba263f4c98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ba263f4c68 <col:13> 'bool' lvalue ->_status 0x55ba263dc148
|   |     `-CXXThisExpr 0x55ba263f4c58 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55ba263f4cf8 <line:638:9, col:17>
|     `-UnaryOperator 0x55ba263f4ce0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba263f4cd0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ba263ce168 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55ba263ce0a8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55ba263f4df8 <col:39, line:644:5>
|   |-BinaryOperator 0x55ba263f4da0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ba263f4d28 <col:9> 'bool' lvalue ParmVar 0x55ba263ce0a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ba263f4d88 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ba263f4d58 <col:13> 'const bool' lvalue ->_status 0x55ba263dc148
|   |     `-CXXThisExpr 0x55ba263f4d48 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55ba263f4de8 <line:643:9, col:17>
|     `-UnaryOperator 0x55ba263f4dd0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba263f4dc0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55ba263ce230 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55ba263f4ea0 <col:30, line:651:5>
|   `-ReturnStmt 0x55ba263f4e90 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55ba263f4e78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55ba263f4e48 <col:16> 'bool' lvalue ->_read_status 0x55ba262d1260
|         `-ImplicitCastExpr 0x55ba263f4e28 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55ba263f4e18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55ba263ce378 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55ba263ce2e8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55ba263f4fa8 <col:32, line:658:5>
|   |-BinaryOperator 0x55ba263f4f50 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ba263f4eb8 <col:9> 'bool' lvalue ParmVar 0x55ba263ce2e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ba263f4f38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ba263f4f08 <col:13> 'bool' lvalue ->_read_status 0x55ba262d1260
|   |     `-ImplicitCastExpr 0x55ba263f4ee8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55ba263f4ed8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55ba263f4f98 <line:657:9, col:17>
|     `-UnaryOperator 0x55ba263f4f80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba263f4f70 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ba263ce4c8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55ba263ce438 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55ba263f50b8 <col:44, line:663:5>
|   |-BinaryOperator 0x55ba263f5060 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ba263f4fc8 <col:9> 'bool' lvalue ParmVar 0x55ba263ce438 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ba263f5048 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ba263f5018 <col:13> 'bool' lvalue ->_read_status 0x55ba262d1260
|   |     `-ImplicitCastExpr 0x55ba263f4ff8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55ba263f4fe8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55ba263f50a8 <line:662:9, col:17>
|     `-UnaryOperator 0x55ba263f5090 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba263f5080 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55ba263ce590 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55ba263ce658 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55ba263ce720 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55ba263ce7e8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55ba263ceaf8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55ba263ce888 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba263cea58 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55ba263ce968 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f5470 <col:19, line:706:5>
|     `-IfStmt 0x55ba263f5448 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55ba263f51b8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55ba263f5378 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55ba263f5348 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55ba263f5308 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55ba263f5210 <col:42> '<bound member function type>' ->simple_slot 0x55ba263ee5e0
|       |     | `-CXXThisExpr 0x55ba263f5200 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55ba263f52a8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55ba263f5260 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55ba2615b688
|       |     | `-DeclRefExpr 0x55ba263f5240 <col:55> 'T' lvalue ParmVar 0x55ba263ce968 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55ba263f52e8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55ba263f5438 <line:705:13, col:34>
|         `-CallExpr 0x55ba263f5410 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55ba263f5398 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55ba263f53f0 <col:33> 'T' lvalue ParmVar 0x55ba263ce968 'x' 'T &'
|-FunctionTemplateDecl 0x55ba263cedc8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55ba263ceb58 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba263ced28 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55ba263cec38 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55ba263f5850 <col:31, line:717:5>
|     |-DeclStmt 0x55ba263f55b0 <line:713:9, col:23>
|     | `-VarDecl 0x55ba263f5498 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55ba263f5588 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55ba263f5510 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55ba263f5568 <col:21> 'T' lvalue ParmVar 0x55ba263cec38 'x' 'T &'
|     |-IfStmt 0x55ba263f5800 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55ba263f56a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55ba263f57e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55ba263f5780 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55ba263f5710 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|     |   | `-DeclRefExpr 0x55ba263f56f0 <col:14> 'T *' lvalue Var 0x55ba263f5498 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55ba263f57c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55ba263f5838 <line:716:9, col:16>
|       `-DeclRefExpr 0x55ba263f5818 <col:16> 'T *' lvalue Var 0x55ba263f5498 's' 'T *'
|-FunctionTemplateDecl 0x55ba263cf1d8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55ba263cee28 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba263ceea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba263cf138 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55ba263cef88 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55ba263cf028 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55ba263f5b60 <col:37, line:726:5>
|     |-IfStmt 0x55ba263f5af0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55ba263f5b10 <line:723:13, col:26>
|     | | `-VarDecl 0x55ba263f58b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55ba263f59a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55ba263f5930 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55ba263f5988 <col:25> 'T' lvalue ParmVar 0x55ba263cef88 'x' 'T &'
|     | |-DeclRefExpr 0x55ba263f59d0 <col:16> 'T *' lvalue Var 0x55ba263f58b8 's' 'T *'
|     | `-BinaryOperator 0x55ba263f5ad0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55ba263f5a80 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55ba263f5a10 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|     |   | `-DeclRefExpr 0x55ba263f59f0 <col:14> 'T *' lvalue Var 0x55ba263f58b8 's' 'T *'
|     |   `-DeclRefExpr 0x55ba263f5ab0 <col:18> 'const V' lvalue ParmVar 0x55ba263cf028 'value' 'const V &'
|     `-ReturnStmt 0x55ba263f5b50 <line:725:9, col:17>
|       `-UnaryOperator 0x55ba263f5b38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba263f5b28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba263cf5d8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55ba263cf240 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba263cf538 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55ba263cf2f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cf370 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263cf418 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55ba263f6980 <col:65, line:737:5>
|     |-DeclStmt 0x55ba263f5bf8 <line:732:9, col:26>
|     | `-VarDecl 0x55ba263f5b90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ba263f6948 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55ba263f6968 <line:733:13, col:58>
|       | `-VarDecl 0x55ba263f5c20 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ba263f5e00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ba263f5dd0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ba263f5db8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ba263f5d98 <col:26, col:58> 'String' (CXXTemporary 0x55ba263f5d98)
|       |           `-CXXMemberCallExpr 0x55ba263f5d28 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ba263f5c98 <col:26> '<bound member function type>' ->find 0x55ba263edbf8
|       |             | `-CXXThisExpr 0x55ba263f5c88 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ba263f5d60 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba263f5cc8 <col:31> 'const char *' lvalue ParmVar 0x55ba263cf2f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ba263f5d78 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba263f5ce8 <col:40> 'int' lvalue ParmVar 0x55ba263cf370 'flags' 'int'
|       |             `-DeclRefExpr 0x55ba263f5d08 <col:47> 'Args::Slot *' lvalue Var 0x55ba263f5b90 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ba263f5eb8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba263f5ea0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba263f5e80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba263f5e50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|       |       `-ImplicitCastExpr 0x55ba263f5e38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ba263f5e18 <col:20> 'String' lvalue Var 0x55ba263f5c20 'str' 'String'
|       `-CompoundStmt 0x55ba263f6928 <col:61, line:736:9>
|         |-DeclStmt 0x55ba263f6370 <line:734:13, col:76>
|         | `-VarDecl 0x55ba263f5f08 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55ba263f6340 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ba263f62b0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ba263f62f8 <col:60> 'T' lvalue ParmVar 0x55ba263cf418 'variable' 'T &'
|         |     `-UnaryOperator 0x55ba263f6328 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ba263f6318 <col:71> 'Args *' this
|         `-CallExpr 0x55ba263f68f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55ba263f6398 <col:13> '<bound member function type>' ->postparse 0x55ba263ede08
|           | `-CXXThisExpr 0x55ba263f6388 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55ba263f68b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55ba263f63c8 <col:23> 'T *' lvalue Var 0x55ba263f5f08 's' 'T *'
|           | `-CallExpr 0x55ba263f6878 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55ba263f6650 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55ba263f6750 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55ba263f6770 <col:86> 'String' lvalue Var 0x55ba263f5c20 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55ba263f6820 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ba263f67b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|           |   | `-DeclRefExpr 0x55ba263f6790 <col:92> 'T *' lvalue Var 0x55ba263f5f08 's' 'T *'
|           |   `-UnaryOperator 0x55ba263f6860 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55ba263f6850 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55ba263f68d8 <col:103> 'Args::Slot *' lvalue Var 0x55ba263f5b90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba263cfb28 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55ba263cf648 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba263cf6c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba263cfa88 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55ba263cf788 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cf808 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263cf8a8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55ba263cf948 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55ba263f7820 <col:88, line:745:5>
|     |-DeclStmt 0x55ba263f6a18 <line:741:9, col:26>
|     | `-VarDecl 0x55ba263f69b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba263f6c38 <line:742:9, col:55>
|     | `-VarDecl 0x55ba263f6a40 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55ba263f6c20 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55ba263f6bf0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55ba263f6bd8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55ba263f6bb8 <col:22, col:54> 'String' (CXXTemporary 0x55ba263f6bb8)
|     |           `-CXXMemberCallExpr 0x55ba263f6b48 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55ba263f6ab8 <col:22> '<bound member function type>' ->find 0x55ba263edbf8
|     |             | `-CXXThisExpr 0x55ba263f6aa8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55ba263f6b80 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ba263f6ae8 <col:27> 'const char *' lvalue ParmVar 0x55ba263cf788 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55ba263f6b98 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ba263f6b08 <col:36> 'int' lvalue ParmVar 0x55ba263cf808 'flags' 'int'
|     |             `-DeclRefExpr 0x55ba263f6b28 <col:43> 'Args::Slot *' lvalue Var 0x55ba263f69b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55ba263f7010 <line:743:9, col:72>
|     | `-VarDecl 0x55ba263f6c88 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55ba263f6fe0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55ba263f6f50 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55ba263f6f98 <col:56> 'T' lvalue ParmVar 0x55ba263cf8a8 'variable' 'T &'
|     |     `-UnaryOperator 0x55ba263f6fc8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55ba263f6fb8 <col:67> 'Args *' this
|     `-CallExpr 0x55ba263f77f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55ba263f7038 <col:9> '<bound member function type>' ->postparse 0x55ba263ede08
|       | `-CXXThisExpr 0x55ba263f7028 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55ba263f77b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55ba263f7068 <col:19> 'T *' lvalue Var 0x55ba263f6c88 's' 'T *'
|       | `-ParenExpr 0x55ba263f7790 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55ba263f7760 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55ba263f7748 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55ba263f7730 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55ba263f7710 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55ba263f76e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|       |     |       `-ImplicitCastExpr 0x55ba263f76c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55ba263f7088 <col:25> 'String' lvalue Var 0x55ba263f6a40 'str' 'String'
|       |     |-CallExpr 0x55ba263f7538 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55ba263f7310 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55ba263f7410 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55ba263f7430 <col:89> 'String' lvalue Var 0x55ba263f6a40 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55ba263f74e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55ba263f7470 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|       |     | | `-DeclRefExpr 0x55ba263f7450 <col:95> 'T *' lvalue Var 0x55ba263f6c88 's' 'T *'
|       |     | `-UnaryOperator 0x55ba263f7520 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55ba263f7510 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55ba263f76a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55ba263f7688 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55ba263f7658 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55ba263f7608 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55ba263f7598 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|       |         | | `-DeclRefExpr 0x55ba263f7578 <col:109> 'T *' lvalue Var 0x55ba263f6c88 's' 'T *'
|       |         | `-DeclRefExpr 0x55ba263f7638 <col:113> 'const V' lvalue ParmVar 0x55ba263cf948 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55ba263f7678 <col:120> 'bool' true
|       `-DeclRefExpr 0x55ba263f77d0 <col:128> 'Args::Slot *' lvalue Var 0x55ba263f69b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba263d0058 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55ba263cfba0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263cfc18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263cffb8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba263cfcd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263cfd58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263cfdd0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263cfe78 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55ba263f8418 <col:75, line:754:5>
|     |-DeclStmt 0x55ba263f78c8 <line:749:9, col:26>
|     | `-VarDecl 0x55ba263f7860 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ba263f83e0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55ba263f8400 <line:750:13, col:58>
|       | `-VarDecl 0x55ba263f78f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ba263f7ad0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ba263f7aa0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ba263f7a88 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ba263f7a68 <col:26, col:58> 'String' (CXXTemporary 0x55ba263f7a68)
|       |           `-CXXMemberCallExpr 0x55ba263f79f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ba263f7968 <col:26> '<bound member function type>' ->find 0x55ba263edbf8
|       |             | `-CXXThisExpr 0x55ba263f7958 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ba263f7a30 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba263f7998 <col:31> 'const char *' lvalue ParmVar 0x55ba263cfcd8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ba263f7a48 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba263f79b8 <col:40> 'int' lvalue ParmVar 0x55ba263cfd58 'flags' 'int'
|       |             `-DeclRefExpr 0x55ba263f79d8 <col:47> 'Args::Slot *' lvalue Var 0x55ba263f7860 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ba263f7b88 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba263f7b70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba263f7b50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba263f7b20 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|       |       `-ImplicitCastExpr 0x55ba263f7b08 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ba263f7ae8 <col:20> 'String' lvalue Var 0x55ba263f78f0 'str' 'String'
|       `-CompoundStmt 0x55ba263f83c0 <col:61, line:753:9>
|         |-DeclStmt 0x55ba263f7f60 <line:751:13, col:63>
|         | `-VarDecl 0x55ba263f7bd8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55ba263f7f30 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ba263f7ea0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ba263f7ee8 <col:47> 'T' lvalue ParmVar 0x55ba263cfe78 'variable' 'T &'
|         |     `-UnaryOperator 0x55ba263f7f18 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ba263f7f08 <col:58> 'Args *' this
|         `-CallExpr 0x55ba263f8390 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55ba263f7f88 <col:13> '<bound member function type>' ->postparse 0x55ba263ede08
|           | `-CXXThisExpr 0x55ba263f7f78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55ba263f8350 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55ba263f7fb8 <col:23> 'T *' lvalue Var 0x55ba263f7bd8 's' 'T *'
|           | `-CallExpr 0x55ba263f8310 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55ba263f81a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55ba263f81e8 <col:56> 'P' lvalue ParmVar 0x55ba263cfdd0 'parser' 'P'
|           |   |-DeclRefExpr 0x55ba263f8208 <col:64> 'String' lvalue Var 0x55ba263f78f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55ba263f82b8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ba263f8248 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|           |   | `-DeclRefExpr 0x55ba263f8228 <col:70> 'T *' lvalue Var 0x55ba263f7bd8 's' 'T *'
|           |   `-UnaryOperator 0x55ba263f82f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55ba263f82e8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55ba263f8370 <col:81> 'Args::Slot *' lvalue Var 0x55ba263f7860 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba263d06b8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55ba263d00d0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba263d0148 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55ba263d01c8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ba263d0618 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55ba263d0290 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263d0310 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263d0388 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263d0428 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55ba263d04c8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55ba263fb4f8 <col:98, line:762:5>
|     |-DeclStmt 0x55ba263f84b0 <line:758:9, col:26>
|     | `-VarDecl 0x55ba263f8448 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba263f86d0 <line:759:9, col:55>
|     | `-VarDecl 0x55ba263f84d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55ba263f86b8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55ba263f8688 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55ba263f8670 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55ba263f8650 <col:22, col:54> 'String' (CXXTemporary 0x55ba263f8650)
|     |           `-CXXMemberCallExpr 0x55ba263f85e0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55ba263f8550 <col:22> '<bound member function type>' ->find 0x55ba263edbf8
|     |             | `-CXXThisExpr 0x55ba263f8540 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55ba263f8618 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ba263f8580 <col:27> 'const char *' lvalue ParmVar 0x55ba263d0290 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55ba263f8630 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ba263f85a0 <col:36> 'int' lvalue ParmVar 0x55ba263d0310 'flags' 'int'
|     |             `-DeclRefExpr 0x55ba263f85c0 <col:43> 'Args::Slot *' lvalue Var 0x55ba263f8448 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55ba263f8af0 <line:760:9, col:59>
|     | `-VarDecl 0x55ba263f8728 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55ba263f8ac0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55ba263f8a30 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55ba263f8a78 <col:43> 'T' lvalue ParmVar 0x55ba263d0428 'variable' 'T &'
|     |     `-UnaryOperator 0x55ba263f8aa8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55ba263f8a98 <col:54> 'Args *' this
|     `-CallExpr 0x55ba263fb4c8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55ba263f8b18 <col:9> '<bound member function type>' ->postparse 0x55ba263ede08
|       | `-CXXThisExpr 0x55ba263f8b08 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55ba263fb488 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55ba263f8b48 <col:19> 'T *' lvalue Var 0x55ba263f8728 's' 'T *'
|       | `-ParenExpr 0x55ba263fb468 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55ba263fb438 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55ba263fb420 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55ba263fb408 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55ba263fb3e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55ba263fb3b8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|       |     |       `-ImplicitCastExpr 0x55ba263fb3a0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55ba263f8b68 <col:25> 'String' lvalue Var 0x55ba263f84d8 'str' 'String'
|       |     |-CallExpr 0x55ba263f8ec0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55ba263f8d50 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55ba263f8d98 <col:59> 'P' lvalue ParmVar 0x55ba263d0388 'parser' 'P'
|       |     | |-DeclRefExpr 0x55ba263f8db8 <col:67> 'String' lvalue Var 0x55ba263f84d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55ba263f8e68 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55ba263f8df8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|       |     | | `-DeclRefExpr 0x55ba263f8dd8 <col:73> 'T *' lvalue Var 0x55ba263f8728 's' 'T *'
|       |     | `-UnaryOperator 0x55ba263f8ea8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55ba263f8e98 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55ba263fb380 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55ba263f9010 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55ba263f8fe0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55ba263f8f90 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55ba263f8f20 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|       |         | | `-DeclRefExpr 0x55ba263f8f00 <col:87> 'T *' lvalue Var 0x55ba263f8728 's' 'T *'
|       |         | `-DeclRefExpr 0x55ba263f8fc0 <col:91> 'const V' lvalue ParmVar 0x55ba263d04c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55ba263f9000 <col:98> 'bool' true
|       `-DeclRefExpr 0x55ba263fb4a8 <col:106> 'Args::Slot *' lvalue Var 0x55ba263f8448 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba263d0d28 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55ba263d0738 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263d07b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba263d0838 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba263d0c88 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba263d0900 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263d0980 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263d09f8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263d0a98 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55ba263d0b38 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55ba263fc4d8 <col:60, line:773:5>
|     |-DeclStmt 0x55ba263fb5a0 <line:767:9, col:26>
|     | `-VarDecl 0x55ba263fb538 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ba263fc4a0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55ba263fc4c0 <line:768:13, col:58>
|       | `-VarDecl 0x55ba263fb5c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ba263fb7a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ba263fb778 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ba263fb760 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ba263fb740 <col:26, col:58> 'String' (CXXTemporary 0x55ba263fb740)
|       |           `-CXXMemberCallExpr 0x55ba263fb6d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ba263fb640 <col:26> '<bound member function type>' ->find 0x55ba263edbf8
|       |             | `-CXXThisExpr 0x55ba263fb630 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ba263fb708 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba263fb670 <col:31> 'const char *' lvalue ParmVar 0x55ba263d0900 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ba263fb720 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba263fb690 <col:40> 'int' lvalue ParmVar 0x55ba263d0980 'flags' 'int'
|       |             `-DeclRefExpr 0x55ba263fb6b0 <col:47> 'Args::Slot *' lvalue Var 0x55ba263fb538 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ba263fb860 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba263fb848 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba263fb828 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba263fb7f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|       |       `-ImplicitCastExpr 0x55ba263fb7e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ba263fb7c0 <col:20> 'String' lvalue Var 0x55ba263fb5c8 'str' 'String'
|       `-CompoundStmt 0x55ba263fc478 <col:61, line:772:9>
|         |-DeclStmt 0x55ba263fbba0 <line:769:13, col:66>
|         | `-VarDecl 0x55ba263fb8b8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55ba263fbb70 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ba263fbae0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ba263fbb28 <col:49> 'T1' lvalue ParmVar 0x55ba263d0a98 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55ba263fbb58 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ba263fbb48 <col:61> 'Args *' this
|         |-DeclStmt 0x55ba263fbf10 <line:770:13, col:66>
|         | `-VarDecl 0x55ba263fbc28 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55ba263fbee0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ba263fbe50 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ba263fbe98 <col:49> 'T2' lvalue ParmVar 0x55ba263d0b38 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55ba263fbec8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ba263fbeb8 <col:61> 'Args *' this
|         `-CallExpr 0x55ba263fc448 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55ba263fbf38 <col:13> '<bound member function type>' ->postparse 0x55ba263ede08
|           | `-CXXThisExpr 0x55ba263fbf28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55ba263fc408 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55ba263fbfa8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55ba263fbf68 <col:23> 'T1 *' lvalue Var 0x55ba263fb8b8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55ba263fbf88 <col:29> 'T2 *' lvalue Var 0x55ba263fbc28 's2' 'T2 *'
|           | `-CallExpr 0x55ba263fc3c0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55ba263fc190 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55ba263fc1d8 <col:63> 'P' lvalue ParmVar 0x55ba263d09f8 'parser' 'P'
|           |   |-DeclRefExpr 0x55ba263fc1f8 <col:71> 'String' lvalue Var 0x55ba263fb5c8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55ba263fc2a8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ba263fc238 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|           |   | `-DeclRefExpr 0x55ba263fc218 <col:77> 'T1 *' lvalue Var 0x55ba263fb8b8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55ba263fc368 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ba263fc2f8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|           |   | `-DeclRefExpr 0x55ba263fc2d8 <col:82> 'T2 *' lvalue Var 0x55ba263fbc28 's2' 'T2 *'
|           |   `-UnaryOperator 0x55ba263fc3a8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55ba263fc398 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55ba263fc428 <col:94> 'Args::Slot *' lvalue Var 0x55ba263fb538 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba263d95b8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55ba263d0da8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba263d9518 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55ba263d9300 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263d9380 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263d93f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55ba263fc9f0 <col:67, line:780:5>
|     |-DeclStmt 0x55ba263fc570 <line:777:9, col:26>
|     | `-VarDecl 0x55ba263fc508 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ba263fc9b8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55ba263fc9d8 <line:778:13, col:58>
|       | `-VarDecl 0x55ba263fc598 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ba263fc778 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ba263fc748 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ba263fc730 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ba263fc710 <col:26, col:58> 'String' (CXXTemporary 0x55ba263fc710)
|       |           `-CXXMemberCallExpr 0x55ba263fc6a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ba263fc610 <col:26> '<bound member function type>' ->find 0x55ba263edbf8
|       |             | `-CXXThisExpr 0x55ba263fc600 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ba263fc6d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba263fc640 <col:31> 'const char *' lvalue ParmVar 0x55ba263d9300 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ba263fc6f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba263fc660 <col:40> 'int' lvalue ParmVar 0x55ba263d9380 'flags' 'int'
|       |             `-DeclRefExpr 0x55ba263fc680 <col:47> 'Args::Slot *' lvalue Var 0x55ba263fc508 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ba263fc830 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba263fc818 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba263fc7f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba263fc7c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|       |       `-ImplicitCastExpr 0x55ba263fc7b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ba263fc790 <col:20> 'String' lvalue Var 0x55ba263fc598 'str' 'String'
|       `-CallExpr 0x55ba263fc988 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55ba263fc858 <col:13> '<bound member function type>' ->postparse 0x55ba263ede08
|         | `-CXXThisExpr 0x55ba263fc848 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55ba263fc938 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55ba263fc8a8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55ba263fc888 <col:23> 'P' lvalue ParmVar 0x55ba263d93f8 'parser' 'P'
|         | |-DeclRefExpr 0x55ba263fc8f0 <col:36> 'String' lvalue Var 0x55ba263fc598 'str' 'String'
|         | `-UnaryOperator 0x55ba263fc920 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55ba263fc910 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55ba263fc968 <col:49> 'Args::Slot *' lvalue Var 0x55ba263fc508 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba263d9958 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55ba263d9628 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba263d98b8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55ba263d96e0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263d9760 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263d97d8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55ba263fd360 <col:71, line:792:5>
|     |-DeclStmt 0x55ba263fca88 <line:784:9, col:26>
|     | `-VarDecl 0x55ba263fca20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba263fcb58 <line:785:9, col:29>
|     | `-VarDecl 0x55ba263fcab8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55ba263fcb40 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55ba263fcb20 <col:28> 'int' 1
|     |-WhileStmt 0x55ba263fd210 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55ba263fd230 <line:786:16, col:61>
|     | | `-VarDecl 0x55ba263fcb80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55ba263fcd60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55ba263fcd30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55ba263fcd18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55ba263fccf8 <col:29, col:61> 'String' (CXXTemporary 0x55ba263fccf8)
|     | |           `-CXXMemberCallExpr 0x55ba263fcc88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55ba263fcbf8 <col:29> '<bound member function type>' ->find 0x55ba263edbf8
|     | |             | `-CXXThisExpr 0x55ba263fcbe8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55ba263fccc0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba263fcc28 <col:34> 'const char *' lvalue ParmVar 0x55ba263d96e0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55ba263fccd8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba263fcc48 <col:43> 'int' lvalue ParmVar 0x55ba263d9760 'flags' 'int'
|     | |             `-DeclRefExpr 0x55ba263fcc68 <col:50> 'Args::Slot *' lvalue Var 0x55ba263fca20 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55ba263fce18 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ba263fce00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ba263fcde0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ba263fcdb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|     | |       `-ImplicitCastExpr 0x55ba263fcd98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55ba263fcd78 <col:23> 'String' lvalue Var 0x55ba263fcb80 'str' 'String'
|     | `-CompoundStmt 0x55ba263fd1e8 <col:64, line:790:9>
|     |   |-CallExpr 0x55ba263fcf70 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55ba263fce40 <col:13> '<bound member function type>' ->postparse 0x55ba263ede08
|     |   | | `-CXXThisExpr 0x55ba263fce30 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55ba263fcf20 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55ba263fce90 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55ba263fce70 <col:23> 'P' lvalue ParmVar 0x55ba263d97d8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55ba263fced8 <col:36> 'String' lvalue Var 0x55ba263fcb80 'str' 'String'
|     |   | | `-UnaryOperator 0x55ba263fcf08 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55ba263fcef8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55ba263fcf50 <col:49> 'Args::Slot *' lvalue Var 0x55ba263fca20 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55ba263fd108 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55ba263fcfa0 <col:13> 'int' lvalue Var 0x55ba263fcab8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55ba263fd0f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55ba263fd0d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55ba263fd038 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55ba263fd018 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55ba263fd000 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55ba263fcfc0 <col:28> 'int' lvalue Var 0x55ba263fcab8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55ba263fcfe0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55ba263fd0b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55ba263fd088 <col:49> 'bool' lvalue ->_read_status 0x55ba262d1260
|     |   |         `-ImplicitCastExpr 0x55ba263fd068 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55ba263fd058 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55ba263fd1b8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55ba263fd128 <col:13> 'int' lvalue ParmVar 0x55ba263d9760 'flags' 'int'
|     |     `-UnaryOperator 0x55ba263fd1a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55ba263fd188 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ba263fd168 <col:23> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55ba263fd340 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55ba263fd278 <col:9> 'bool' lvalue ->_read_status 0x55ba262d1260
|       | `-ImplicitCastExpr 0x55ba263fd258 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55ba263fd248 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55ba263fd320 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55ba263fd300 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55ba263fd2e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55ba263fd2a8 <col:25> 'int' lvalue Var 0x55ba263fcab8 'read_status' 'int'
|           `-IntegerLiteral 0x55ba263fd2c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55ba263d9e38 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55ba263d99c8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263d9a48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263d9d98 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba263d9b08 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263d9b88 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263d9c00 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263d9ca8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55ba263fe2f0 <col:84, line:805:5>
|     |-DeclStmt 0x55ba263fd408 <line:796:9, col:26>
|     | `-VarDecl 0x55ba263fd3a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba263fd4d8 <line:797:9, col:29>
|     | `-VarDecl 0x55ba263fd438 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55ba263fd4c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55ba263fd4a0 <col:28> 'int' 1
|     |-DeclStmt 0x55ba263fd810 <line:798:9, col:71>
|     | `-VarDecl 0x55ba263fd528 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55ba263fd7e0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55ba263fd750 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55ba263fd798 <col:55> 'T' lvalue ParmVar 0x55ba263d9ca8 'variable' 'T &'
|     |     `-UnaryOperator 0x55ba263fd7c8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55ba263fd7b8 <col:66> 'Args *' this
|     |-WhileStmt 0x55ba263fe1a0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55ba263fe1c0 <line:799:16, col:61>
|     | | `-VarDecl 0x55ba263fd838 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55ba263fda18 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55ba263fd9e8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55ba263fd9d0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55ba263fd9b0 <col:29, col:61> 'String' (CXXTemporary 0x55ba263fd9b0)
|     | |           `-CXXMemberCallExpr 0x55ba263fd940 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55ba263fd8b0 <col:29> '<bound member function type>' ->find 0x55ba263edbf8
|     | |             | `-CXXThisExpr 0x55ba263fd8a0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55ba263fd978 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba263fd8e0 <col:34> 'const char *' lvalue ParmVar 0x55ba263d9b08 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55ba263fd990 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba263fd900 <col:43> 'int' lvalue ParmVar 0x55ba263d9b88 'flags' 'int'
|     | |             `-DeclRefExpr 0x55ba263fd920 <col:50> 'Args::Slot *' lvalue Var 0x55ba263fd3a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55ba263fdad0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ba263fdab8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ba263fda98 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ba263fda68 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|     | |       `-ImplicitCastExpr 0x55ba263fda50 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55ba263fda30 <col:23> 'String' lvalue Var 0x55ba263fd838 'str' 'String'
|     | `-CompoundStmt 0x55ba263fe178 <col:64, line:803:9>
|     |   |-CallExpr 0x55ba263fdf00 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55ba263fdaf8 <col:13> '<bound member function type>' ->postparse 0x55ba263ede08
|     |   | | `-CXXThisExpr 0x55ba263fdae8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55ba263fdec0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55ba263fdb28 <col:23> 'T *' lvalue Var 0x55ba263fd528 's' 'T *'
|     |   | | `-CallExpr 0x55ba263fde80 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55ba263fdd10 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55ba263fdd58 <col:56> 'P' lvalue ParmVar 0x55ba263d9c00 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55ba263fdd78 <col:64> 'String' lvalue Var 0x55ba263fd838 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55ba263fde28 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55ba263fddb8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|     |   | |   | `-DeclRefExpr 0x55ba263fdd98 <col:70> 'T *' lvalue Var 0x55ba263fd528 's' 'T *'
|     |   | |   `-UnaryOperator 0x55ba263fde68 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55ba263fde58 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55ba263fdee0 <col:81> 'Args::Slot *' lvalue Var 0x55ba263fd3a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55ba263fe098 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55ba263fdf30 <col:13> 'int' lvalue Var 0x55ba263fd438 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55ba263fe080 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55ba263fe060 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55ba263fdfc8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55ba263fdfa8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55ba263fdf90 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55ba263fdf50 <col:28> 'int' lvalue Var 0x55ba263fd438 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55ba263fdf70 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55ba263fe048 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55ba263fe018 <col:49> 'bool' lvalue ->_read_status 0x55ba262d1260
|     |   |         `-ImplicitCastExpr 0x55ba263fdff8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55ba263fdfe8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55ba263fe148 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55ba263fe0b8 <col:13> 'int' lvalue ParmVar 0x55ba263d9b88 'flags' 'int'
|     |     `-UnaryOperator 0x55ba263fe130 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55ba263fe118 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ba263fe0f8 <col:23> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55ba263fe2d0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55ba263fe208 <col:9> 'bool' lvalue ->_read_status 0x55ba262d1260
|       | `-ImplicitCastExpr 0x55ba263fe1e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55ba263fe1d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55ba263fe2b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55ba263fe290 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55ba263fe278 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55ba263fe238 <col:25> 'int' lvalue Var 0x55ba263fd438 'read_status' 'int'
|           `-IntegerLiteral 0x55ba263fe258 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55ba263da418 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55ba263d9eb0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba263d9f28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba263da378 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55ba263d9fe8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba263da068 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55ba263da0e0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55ba263da230 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55ba263ff0f8 <col:87, line:821:5>
|     |-DeclStmt 0x55ba263fe3a0 <line:809:9, col:26>
|     | `-VarDecl 0x55ba263fe338 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba263fe470 <line:810:9, col:29>
|     | `-VarDecl 0x55ba263fe3d0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55ba263fe458 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55ba263fe438 <col:28> 'int' 1
|     |-DeclStmt 0x55ba263fe6b8 <line:811:9, col:38>
|     | `-VarDecl 0x55ba263fe5a0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55ba263fe690 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55ba263fe618 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55ba263fe670 <col:29> 'Vector<T>' lvalue ParmVar 0x55ba263da230 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55ba263fefa8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55ba263fefc8 <line:812:16, col:61>
|     | | `-VarDecl 0x55ba263fe6e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55ba263fe8c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55ba263fe890 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55ba263fe878 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55ba263fe858 <col:29, col:61> 'String' (CXXTemporary 0x55ba263fe858)
|     | |           `-CXXMemberCallExpr 0x55ba263fe7e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55ba263fe758 <col:29> '<bound member function type>' ->find 0x55ba263edbf8
|     | |             | `-CXXThisExpr 0x55ba263fe748 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55ba263fe820 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba263fe788 <col:34> 'const char *' lvalue ParmVar 0x55ba263d9fe8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55ba263fe838 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba263fe7a8 <col:43> 'int' lvalue ParmVar 0x55ba263da068 'flags' 'int'
|     | |             `-DeclRefExpr 0x55ba263fe7c8 <col:50> 'Args::Slot *' lvalue Var 0x55ba263fe338 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55ba263fe978 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ba263fe960 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ba263fe940 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ba263fe910 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55ba2611d648
|     | |       `-ImplicitCastExpr 0x55ba263fe8f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55ba263fe8d8 <col:23> 'String' lvalue Var 0x55ba263fe6e0 'str' 'String'
|     | `-CompoundStmt 0x55ba263fef70 <col:64, line:819:9>
|     |   |-DeclStmt 0x55ba263fea38 <line:813:13, col:23>
|     |   | `-VarDecl 0x55ba263fe9a0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55ba263fea18 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55ba263febb8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55ba263fea60 <col:13> '<bound member function type>' ->postparse 0x55ba263ede08
|     |   | | `-CXXThisExpr 0x55ba263fea50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55ba263feb60 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55ba263feab0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55ba263fea90 <col:23> 'P' lvalue ParmVar 0x55ba263da0e0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55ba263feaf8 <col:36> 'String' lvalue Var 0x55ba263fe6e0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55ba263feb18 <col:41> 'T' lvalue Var 0x55ba263fe9a0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55ba263feb48 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55ba263feb38 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55ba263feb98 <col:53> 'Args::Slot *' lvalue Var 0x55ba263fe338 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55ba263fed10 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55ba263fec48 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55ba263fec18 <col:17> 'bool' lvalue ->_read_status 0x55ba262d1260
|     |   | |   `-ImplicitCastExpr 0x55ba263febf8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55ba263febe8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55ba263fece8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55ba263fec80 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55ba263fec60 <col:17> 'Vector<T> *' lvalue Var 0x55ba263fe5a0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55ba263fecc8 <col:30> 'T' lvalue Var 0x55ba263fe9a0 'sx' 'T'
|     |   |-BinaryOperator 0x55ba263fee90 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55ba263fed28 <col:13> 'int' lvalue Var 0x55ba263fe3d0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55ba263fee78 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55ba263fee58 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55ba263fedc0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55ba263feda0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55ba263fed88 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55ba263fed48 <col:28> 'int' lvalue Var 0x55ba263fe3d0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55ba263fed68 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55ba263fee40 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55ba263fee10 <col:49> 'bool' lvalue ->_read_status 0x55ba262d1260
|     |   |         `-ImplicitCastExpr 0x55ba263fedf0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55ba263fede0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55ba263fef40 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55ba263feeb0 <col:13> 'int' lvalue ParmVar 0x55ba263da068 'flags' 'int'
|     |     `-UnaryOperator 0x55ba263fef28 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55ba263fef10 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ba263feef0 <col:23> 'const int' lvalue Var 0x55ba263c1a28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55ba263ff0d8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55ba263ff010 <col:9> 'bool' lvalue ->_read_status 0x55ba262d1260
|       | `-ImplicitCastExpr 0x55ba263feff0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55ba263fefe0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55ba263ff0b8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55ba263ff098 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55ba263ff080 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55ba263ff040 <col:25> 'int' lvalue Var 0x55ba263fe3d0 'read_status' 'int'
|           `-IntegerLiteral 0x55ba263ff060 <col:40> 'int' 1
|-AccessSpecDecl 0x55ba263da490 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55ba263da4b8 prev 0x55ba262d6a98 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55ba263da5b0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55ba263da6a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55ba263ff130 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55ba263da790 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55ba263ff140 <col:25, line:830:9>
| |-CXXMethodDecl 0x55ba263da890 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55ba263da940 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55ba263da9e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55ba263da9e8
| | `-ParmVarDecl 0x55ba263daaf8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55ba263db2b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55ba263db2b8
|   `-ParmVarDecl 0x55ba263db3c8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55ba263dab68 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55ba263dacc8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55ba263daec0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55ba263dad70 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55ba263dade8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55ba263ff320 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55ba263db178 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55ba263ff190 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55ba263ff150 <col:20> 'void *' lvalue ParmVar 0x55ba263dad70 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55ba263db1e0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55ba263ff218 <col:32, col:45> 'char *' array Function 0x55ba25f412c8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55ba263ff200 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55ba263ff1d0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55ba263dade8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55ba263db240 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55ba263ff2e0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55ba263ff2a0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55ba263dade8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55ba263ff3a0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55ba263dafc0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55ba263da790 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55ba263ff428 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55ba263ff408 <line:840:13, col:22> 'void' array Function 0x55ba25f41628 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55ba263ff3f0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55ba263ff3c0 <col:22> 'char *' lvalue ->_slot 0x55ba263db1e0
| |         `-CXXThisExpr 0x55ba263ff3b0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55ba263db0c0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55ba263da890 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55ba263ff618 <col:22, line:844:9>
| |   `-CallExpr 0x55ba263ff580 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55ba263ff568 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55ba263ff548 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55ba2604d0a8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55ba263ff5b8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55ba263ff498 <col:20> 'void *' lvalue ->_ptr 0x55ba263db178
| |     |   `-CXXThisExpr 0x55ba263ff488 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55ba263ff5e8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55ba263ff5d0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55ba263ff4d8 <col:26> 'char *' lvalue ->_slot 0x55ba263db1e0
| |     |     `-CXXThisExpr 0x55ba263ff4c8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55ba263ff600 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55ba263ff518 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55ba263db240
| |         `-CXXThisExpr 0x55ba263ff508 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55ba263db178 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55ba263db1e0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55ba263db240 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55ba263db438 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55ba263db438
| | `-ParmVarDecl 0x55ba263db548 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55ba263db5e8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55ba263db5e8
|   `-ParmVarDecl 0x55ba263db6f8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55ba263db898 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55ba263db768 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55ba263db808 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55ba263dbb30 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55ba263dbd28 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55ba263dbbf8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55ba263dbea8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55ba263ff650 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55ba263ff630 <col:20> 'T *' lvalue ParmVar 0x55ba263dbbf8 'ptr' 'T *'
|   | `-CompoundStmt 0x55ba263ff6a0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55ba263dbdf8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55ba263da890 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55ba263ff850 <col:22, line:857:9>
|   |   `-CallExpr 0x55ba263ff820 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55ba263ff6b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55ba261057d8 0x55ba260afb08
|   |     |-CXXOperatorCallExpr 0x55ba263ff7b0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55ba263ff740 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba26312788 0x55ba263123a8 0x55ba26311fd8 0x55ba26311bf8 0x55ba26311818 0x55ba26311448
|   |     | `-MemberExpr 0x55ba263ff710 <col:29> 'T *' lvalue ->_ptr 0x55ba263dbea8
|   |     |   `-CXXThisExpr 0x55ba263ff700 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55ba263ff7f0 <col:35> 'T' lvalue ->_slot 0x55ba263dbf08
|   |       `-CXXThisExpr 0x55ba263ff7e0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55ba263dbea8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55ba263dbf08 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55ba263dbf70 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55ba263dc070 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55ba263dc0c0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba263dc050 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55ba263dc030 <col:31> 'int' 48
|-FieldDecl 0x55ba263dc0e8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55ba263dc148 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55ba263dc1a8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55ba263dc2e0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55ba263ed4a0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55ba263ed500 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55ba263ed5b0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55ba263ed7d8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55ba263ed6e0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55ba263ed928 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55ba263ed898 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55ba263edbf8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55ba263ed9e8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55ba263eda68 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55ba263edb10 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55ba263ede08 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55ba263edcc0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55ba263edd38 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55ba263eded8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55ba263ee028 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55ba263edf90 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55ba263ee3b8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55ba263ee0e8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55ba263ee168 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55ba263ee210 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55ba263ee2c8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55ba263ee5e0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55ba263ee490 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55ba263ee508 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55ba263ee8f8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55ba263ee690 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55ba263ee858 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55ba263ee768 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba263280e8 prev 0x55ba2631d2f0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba263281e0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55ba263282d0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55ba263283f8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55ba26328578 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55ba263286f8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55ba26328878 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55ba263396a8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ba26339f18 <col:11>
|-CXXDestructorDecl 0x55ba26339780 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ba263398b8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55ba263398b8
| `-ParmVarDecl 0x55ba263399c8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55ba26339a68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ba26339a68
| `-ParmVarDecl 0x55ba26339b78 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55ba2633c938 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2633ca48 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55ba2633ccc8 <col:11>
|   `-ReturnStmt 0x55ba2633ccb8 <col:11>
|     `-UnaryOperator 0x55ba2633cca0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2633cc90 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55ba2633cab8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ba2633cab8
  `-ParmVarDecl 0x55ba2633cbc8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba263288e0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba263289f8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55ba26328a98 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55ba26328b00 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55ba26328b68 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55ba26328bd0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55ba26328c30 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55ba26328cf0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55ba26328d50 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55ba26328db0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55ba263395b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55ba26328a98 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55ba26339f28 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55ba26339f80 <col:12>
|-CXXConstructorDecl 0x55ba26339be8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55ba26339be8
| `-ParmVarDecl 0x55ba26339cf8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55ba26339d98 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55ba26339d98
| `-ParmVarDecl 0x55ba26339ea8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55ba2633c020 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba26316a00 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba26316b18 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55ba26316ba8 <col:16, col:22> col:16 public
|-EnumDecl 0x55ba26316bd0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55ba26316cd0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55ba26316db0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26316cb0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55ba26316c90 <col:21> 'int' 28
| `-EnumConstantDecl 0x55ba26316d60 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55ba26316dc8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba26316d40 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55ba26316d20 <col:22> 'int' 64
|-CXXMethodDecl 0x55ba26317108 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55ba26316df0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba26316e70 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55ba26316ee8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba26316f60 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba263171c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55ba263173c8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55ba26317240 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55ba263172b8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba26317478 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55ba263175d8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55ba263174e8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba26317680 <col:72> warn_unused_result ""
|-TypedefDecl 0x55ba263179e0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55ba26317970 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55ba26317910 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55ba263178d0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55ba25dee4e0 'void'
|       |-PointerType 0x55ba26096da0 'unsigned char *'
|       | `-BuiltinType 0x55ba25dee5e0 'unsigned char'
|       |-TypedefType 0x55ba25e93370 'size_t' sugar
|       | |-Typedef 0x55ba25e5ebe0 'size_t'
|       | `-BuiltinType 0x55ba25dee640 'unsigned long'
|       `-PointerType 0x55ba25deece0 'void *'
|         `-BuiltinType 0x55ba25dee4e0 'void'
|-CXXMethodDecl 0x55ba26317e58 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55ba26317a50 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55ba26317ac8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba26317b60 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55ba26317be0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55ba26332550 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55ba26332538 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55ba26332500 <col:58> 'int' 0
| |-ParmVarDecl 0x55ba26317c60 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55ba26332578 <col:76> 'int' 0
| |-ParmVarDecl 0x55ba26317ce0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55ba26332598 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55ba26317f28 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55ba26317fa8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55ba26318068 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55ba26318108 <col:20>
| `-OptimizeNoneAttr 0x55ba26318160 <col:30>
|-CXXMethodDecl 0x55ba263181d8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55ba26318278 <col:20>
| `-OptimizeNoneAttr 0x55ba263182d0 <col:30>
|-CXXMethodDecl 0x55ba26318348 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55ba263183e8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55ba26318498 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55ba26318538 <col:20>
| |-OptimizeNoneAttr 0x55ba26318590 <col:30>
| `-WarnUnusedResultAttr 0x55ba263185b8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55ba26318610 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55ba263186b0 <col:20>
| `-OptimizeNoneAttr 0x55ba26318708 <col:30>
|-CXXMethodDecl 0x55ba26318758 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55ba263187f8 <col:20>
| `-OptimizeNoneAttr 0x55ba26318850 <col:30>
|-CXXMethodDecl 0x55ba26318898 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55ba26318938 <col:20>
| `-OptimizeNoneAttr 0x55ba26318990 <col:30>
|-CXXMethodDecl 0x55ba263189d8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba26318a98 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba26318b60 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55ba26318c28 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55ba26318ce8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba26318e08 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55ba26332660 <col:54, line:99:5>
|   `-ReturnStmt 0x55ba26332650 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55ba26332638 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55ba26332608 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55ba263290e8
|         `-CXXThisExpr 0x55ba263325f8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55ba26318fa8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55ba26318eb8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55ba26332710 <col:67, line:103:5>
|   `-BinaryOperator 0x55ba263326f0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55ba26332688 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55ba263290e8
|     | `-CXXThisExpr 0x55ba26332678 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55ba263326d8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55ba263326b8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55ba26318eb8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55ba263190a0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55ba26332790 <col:33, line:107:5>
|   `-ReturnStmt 0x55ba26332780 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55ba26332768 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55ba26332738 <col:16> 'void *' lvalue ->_destructor_argument 0x55ba26329150
|         `-CXXThisExpr 0x55ba26332728 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55ba26319160 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55ba26332dc0 <col:25, line:113:5>
|   |-ParenExpr 0x55ba26332b08 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55ba26332ad8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26332848 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55ba26332820 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55ba263327e8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55ba263327b8 <col:24> '<bound member function type>' ->shared 0x55ba263181d8
|   |   |       `-ImplicitCastExpr 0x55ba26332808 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55ba263327a8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55ba263328a8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26332888 <col:42> 'int' 0
|   |   `-CallExpr 0x55ba26332a38 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55ba26332a20 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26332a00 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26332a78 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26332918 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55ba26332a90 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26332940 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26332aa8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26332978 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55ba26332ac0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba263329e8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba263329d0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26332998 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55ba26332d08 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55ba26332b38 <col:2> 'unsigned char *' lvalue ->_head 0x55ba26328ef0
|   | | `-CXXThisExpr 0x55ba26332b28 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55ba26332cf0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55ba26332cd0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55ba26332b78 <col:10> 'unsigned char *' lvalue ->_data 0x55ba26328f58
|   |     | `-CXXThisExpr 0x55ba26332b68 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55ba26332cb8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55ba26332c98 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55ba26332bb8 <col:18> 'unsigned char *' lvalue ->_tail 0x55ba26328fc0
|   |         | `-CXXThisExpr 0x55ba26332ba8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55ba26332c80 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55ba26332c60 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55ba26332bf8 <col:26> 'unsigned char *' lvalue ->_end 0x55ba26329028
|   |             | `-CXXThisExpr 0x55ba26332be8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55ba26332c48 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55ba26332c28 <col:33> 'int' 0
|   `-BinaryOperator 0x55ba26332da0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55ba26332d38 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55ba263290e8
|     | `-CXXThisExpr 0x55ba26332d28 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55ba26332d88 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55ba26332d68 <col:16> 'int' 0
|-CXXMethodDecl 0x55ba263192a0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55ba26319210 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba26319348 <col:20>
| |-OptimizeNoneAttr 0x55ba263193a0 <col:30>
| `-WarnUnusedResultAttr 0x55ba263193c8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55ba26319498 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55ba26319408 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba26319540 <col:20>
| |-OptimizeNoneAttr 0x55ba26319598 <col:30>
| `-WarnUnusedResultAttr 0x55ba263195c0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55ba263196f8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55ba26319600 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba263197a0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55ba263198a0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55ba26319810 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba26319948 <col:20>
| `-OptimizeNoneAttr 0x55ba263199a0 <col:30>
|-CXXMethodDecl 0x55ba26319a68 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55ba263199d8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba26319b10 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55ba26319c10 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55ba26319b80 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba26319cb8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55ba26319db8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55ba26319d28 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba26319e60 <col:20>
| `-OptimizeNoneAttr 0x55ba26319eb8 <col:30>
|-CXXMethodDecl 0x55ba2631a048 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55ba26319ef8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55ba26319f70 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55ba263325b8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55ba2631a0f8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55ba2631a2f8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55ba2631a170 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55ba2631a1e8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2631a508 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55ba2631a3b8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ba2631a430 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2631a718 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55ba2631a5c8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55ba2631a648 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55ba263325c8 <col:39> 'int' 0
|-CXXMethodDecl 0x55ba2631a7e8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55ba2631a8b0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55ba2631a978 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ba2631aa38 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2631ab00 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55ba2631ac48 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55ba2631abb8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55ba2631ae18 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55ba2631ad08 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55ba2631ad80 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2631aee8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55ba2631afa8 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55ba2631b048 <col:20>
| `-OptimizeNoneAttr 0x55ba2631b0a0 <col:30>
|-CXXMethodDecl 0x55ba2631b0f0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55ba2631b190 <col:20>
| `-OptimizeNoneAttr 0x55ba2631b1e8 <col:30>
|-CXXMethodDecl 0x55ba2631b238 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ba2631b2f8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2631b3c0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55ba2631b460 <col:20>
| `-OptimizeNoneAttr 0x55ba2631b4b8 <col:30>
|-CXXMethodDecl 0x55ba2631b608 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55ba2631b4f8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55ba2631b570 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2631b758 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55ba2631b6c8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2631b830 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55ba2631b8f0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55ba2631b990 <col:20>
| `-OptimizeNoneAttr 0x55ba2631b9e8 <col:30>
|-CXXMethodDecl 0x55ba2631ba38 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55ba2631bad8 <col:20>
| `-OptimizeNoneAttr 0x55ba2631bb30 <col:30>
|-CXXMethodDecl 0x55ba2631bb80 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ba2631bc48 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55ba2631bce8 <col:20>
| `-OptimizeNoneAttr 0x55ba2631bd40 <col:30>
|-CXXMethodDecl 0x55ba2631bd88 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55ba2631bea8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55ba2631c018 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55ba2631bf58 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55ba2631c108 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55ba2631c1a8 <col:20>
| `-OptimizeNoneAttr 0x55ba2631c200 <col:30>
|-CXXMethodDecl 0x55ba2631c250 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ba2631c310 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2631c548 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55ba2631c3c0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55ba2631c438 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba2631c5f8 <col:20>
| `-OptimizeNoneAttr 0x55ba2631c650 <col:30>
|-CXXMethodDecl 0x55ba2631c6f8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55ba2631c798 <col:20>
| `-OptimizeNoneAttr 0x55ba2631c7f0 <col:30>
|-CXXMethodDecl 0x55ba2631c840 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55ba2631c8e0 <col:20>
| `-OptimizeNoneAttr 0x55ba2631c938 <col:30>
|-CXXMethodDecl 0x55ba2631c980 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55ba2631ca20 <col:20>
| `-OptimizeNoneAttr 0x55ba2631ca78 <col:30>
|-CXXMethodDecl 0x55ba2631cb78 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55ba2631cab0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55ba2631cc20 <col:20>
| `-OptimizeNoneAttr 0x55ba2631cc78 <col:30>
|-CXXMethodDecl 0x55ba2631ce38 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55ba2631ccb0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55ba2631cd28 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba2631cee8 <col:20>
| `-OptimizeNoneAttr 0x55ba2631cf40 <col:30>
|-CXXMethodDecl 0x55ba2631cfe8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55ba2631d108 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55ba2631d228 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55ba2631d2c8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55ba2631d2f0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55ba2631d418 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55ba2631d4b8 <col:20>
| `-OptimizeNoneAttr 0x55ba2631d510 <col:30>
|-CXXMethodDecl 0x55ba2631d5b8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55ba2631d658 <col:20>
| `-OptimizeNoneAttr 0x55ba2631d6b0 <col:30>
|-AccessSpecDecl 0x55ba2631d6d8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55ba2631d700 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55ba2631d800 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55ba2631d850 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2631d7e0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55ba2631d7c0 <col:14> 'int' 48
|-CXXMethodDecl 0x55ba2631d8b8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55ba2631d958 <col:20>
| `-OptimizeNoneAttr 0x55ba2631d9b0 <col:30>
|-CXXMethodDecl 0x55ba2631da28 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55ba2631dac8 <col:20>
| `-OptimizeNoneAttr 0x55ba2631db20 <col:30>
|-CXXMethodDecl 0x55ba2631dbe8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55ba2631db58 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55ba2631dd88 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55ba2631df28 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55ba2631de38 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55ba2631dfd0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55ba2631e0d0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2631e480 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2631e0b0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba2631e090 <col:9> 'int' 0
| |-EnumConstantDecl 0x55ba2631e160 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2631e498 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2631e140 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55ba2631e120 <col:14> 'int' 1
| |-EnumConstantDecl 0x55ba2631e1f0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2631e4b0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2631e1d0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55ba2631e1b0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55ba2631e280 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2631e4c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2631e260 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55ba2631e240 <col:14> 'int' 3
| |-EnumConstantDecl 0x55ba2631e310 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2631e4e0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2631e2f0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55ba2631e2d0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55ba2631e3a0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2631e4f8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2631e380 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55ba2631e360 <col:13> 'int' 5
| `-EnumConstantDecl 0x55ba2631e430 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55ba2631e510 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2631e410 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55ba2631e3f0 <col:14> 'int' 6
|-CXXMethodDecl 0x55ba2631e578 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55ba2631e618 <col:20>
| `-OptimizeNoneAttr 0x55ba2631e670 <col:30>
|-CXXMethodDecl 0x55ba2631e768 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55ba2631e6a8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55ba2631e810 <col:20>
| `-OptimizeNoneAttr 0x55ba2631e868 <col:30>
|-CXXMethodDecl 0x55ba2631e8d8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55ba2631ea00 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55ba2631eb78 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55ba2631eab0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55ba2631ec40 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55ba2631ed08 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55ba2631ee48 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55ba2631edb8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55ba2631eef0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55ba2631eff0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55ba2631f1f0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2631efd0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba2631efb0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55ba2631f080 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55ba2631f208 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2631f060 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55ba2631f040 <col:45> 'int' 4
| |-EnumConstantDecl 0x55ba2631f110 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55ba2631f220 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2631f0f0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba2631f0d0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55ba2631f1a0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55ba2631f238 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2631f180 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55ba2631f160 <col:47> 'int' 16
|-CXXMethodDecl 0x55ba2631f298 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55ba2631f408 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55ba2631f348 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55ba2631f4b0 <col:20>
| `-OptimizeNoneAttr 0x55ba2631f508 <col:30>
|-CXXMethodDecl 0x55ba2631f558 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55ba26332ee0 <col:18, col:36>
|   `-ReturnStmt 0x55ba26332ed0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55ba26332eb8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55ba26332e98 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55ba26332e68 <col:27> '<bound member function type>' ->xanno 0x55ba2631d5b8
|           `-CXXThisExpr 0x55ba26332e58 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55ba2631f650 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55ba26332ff0 <col:30, col:48>
|   `-ReturnStmt 0x55ba26332fe0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55ba26332fc8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55ba26332fa8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55ba26332f78 <col:39> '<bound member function type>' ->xanno 0x55ba2631d418
|           `-CXXThisExpr 0x55ba26332f68 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55ba2631f738 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55ba26333188 <col:24, col:50>
|   `-ReturnStmt 0x55ba26333178 <col:26, col:47>
|     `-UnaryOperator 0x55ba26333160 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ba26333140 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55ba26333128 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba263330d8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55ba263283f8
|         |   `-CXXMemberCallExpr 0x55ba263330b8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55ba26333088 <col:34> '<bound member function type>' ->xanno 0x55ba2631d5b8
|         |       `-CXXThisExpr 0x55ba26333078 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55ba26333108 <col:46> 'int' 0
|-CXXMethodDecl 0x55ba2631f840 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55ba26333358 <col:36, col:62>
|   `-ReturnStmt 0x55ba26333348 <col:38, col:59>
|     `-UnaryOperator 0x55ba26333330 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ba26333310 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55ba263332f8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba26333270 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55ba263283f8
|         |   `-CXXMemberCallExpr 0x55ba26333250 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55ba26333220 <col:46> '<bound member function type>' ->xanno 0x55ba2631d418
|         |       `-CXXThisExpr 0x55ba26333210 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55ba263332a0 <col:58> 'int' 0
|-CXXMethodDecl 0x55ba2631f958 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55ba263334f0 <col:26, col:53>
|   `-ReturnStmt 0x55ba263334e0 <col:28, col:50>
|     `-UnaryOperator 0x55ba263334c8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ba263334a8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55ba26333490 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba26333440 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55ba263286f8
|         |   `-CXXMemberCallExpr 0x55ba26333420 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55ba263333f0 <col:36> '<bound member function type>' ->xanno 0x55ba2631d5b8
|         |       `-CXXThisExpr 0x55ba263333e0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55ba26333470 <col:49> 'int' 0
|-CXXMethodDecl 0x55ba2631fa78 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55ba263336c8 <col:38, col:65>
|   `-ReturnStmt 0x55ba263336b8 <col:40, col:62>
|     `-UnaryOperator 0x55ba263336a0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ba26333680 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55ba26333668 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba263335d8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55ba263286f8
|         |   `-CXXMemberCallExpr 0x55ba263335b8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55ba26333588 <col:48> '<bound member function type>' ->xanno 0x55ba2631d418
|         |       `-CXXThisExpr 0x55ba26333578 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55ba26333608 <col:61> 'int' 0
|-CXXMethodDecl 0x55ba2631fc28 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55ba2631fb30 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55ba26333d98 <col:34, line:463:5>
|   |-ParenExpr 0x55ba26333be0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55ba26333bb0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26333818 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba263337e8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26333738 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26333720 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba263336e0 <col:23> 'int' lvalue ParmVar 0x55ba2631fb30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26333700 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba263337c8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26333798 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26333758 <col:33> 'int' lvalue ParmVar 0x55ba2631fb30 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55ba263337b0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55ba26333778 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55ba26333878 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26333858 <col:56> 'int' 0
|   |   `-CallExpr 0x55ba26333b10 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55ba26333af8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26333ad8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26333b50 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26333968 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55ba26333b68 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26333998 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26333b80 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba263339d0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55ba26333b98 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba26333ac0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba26333aa8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26333a68 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55ba26333d88 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55ba26333d70 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55ba26333d50 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55ba26333d20 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba26333cd0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55ba263283f8
|         |   `-CXXMemberCallExpr 0x55ba26333cb0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55ba26333c80 <col:9> '<bound member function type>' ->xanno 0x55ba2631d418
|         |       `-CXXThisExpr 0x55ba26333c70 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55ba26333d38 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55ba26333d00 <col:21> 'int' lvalue ParmVar 0x55ba2631fb30 'i' 'int'
|-CXXMethodDecl 0x55ba2631fe78 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55ba2631fce8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55ba2631fd60 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55ba26334428 <col:40, line:472:5>
|   |-ParenExpr 0x55ba26334240 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55ba26334210 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26333ef0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba26333ec0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26333e10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26333df8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26333db8 <col:23> 'int' lvalue ParmVar 0x55ba2631fce8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26333dd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26333ea0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26333e70 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26333e30 <col:33> 'int' lvalue ParmVar 0x55ba2631fce8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55ba26333e88 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55ba26333e50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55ba26333f50 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26333f30 <col:56> 'int' 0
|   |   `-CallExpr 0x55ba26334170 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55ba26334158 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26334138 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba263341b0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26333fc0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55ba263341c8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26333ff0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba263341e0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26334028 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55ba263341f8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba26334120 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba26334108 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba263340c8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55ba26334408 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55ba263343b0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55ba26334380 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55ba26334330 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55ba263283f8
|     | |   `-CXXMemberCallExpr 0x55ba26334310 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55ba263342e0 <col:2> '<bound member function type>' ->xanno 0x55ba2631d5b8
|     | |       `-CXXThisExpr 0x55ba263342d0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55ba26334398 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ba26334360 <col:14> 'int' lvalue ParmVar 0x55ba2631fce8 'i' 'int'
|     `-ImplicitCastExpr 0x55ba263343f0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55ba263343d0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ba2631fd60 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55ba26320038 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55ba2631ff40 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55ba26334ba8 <col:36, line:485:5>
|   |-ParenExpr 0x55ba26334910 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba263348e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba263345c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba26334590 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba263344a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26334488 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26334448 <col:23> 'int' lvalue ParmVar 0x55ba2631ff40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26334468 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26334570 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26334558 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba263344c0 <col:33> 'int' lvalue ParmVar 0x55ba2631ff40 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26334538 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba26334520 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba263344e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba26334500 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ba26334620 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26334600 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba26334840 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba26334828 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26334808 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26334880 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26334690 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ba26334898 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba263346c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba263348b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26334700 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55ba263348c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba263347f0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba263347d8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26334798 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55ba26334b98 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55ba26334b80 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55ba26334b68 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba26334b38 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55ba26334ad8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba26334aa8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba26334a20 <col:61, col:70> 'char const[48]' lvalue ->c 0x55ba263282d0
|             |   `-CXXMemberCallExpr 0x55ba26334a00 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba263349d0 <col:61> '<bound member function type>' ->xanno 0x55ba2631d418
|             |       `-CXXThisExpr 0x55ba263349c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba26334ac0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba26334a50 <col:74> 'int' lvalue ParmVar 0x55ba2631ff40 'i' 'int'
|-CXXMethodDecl 0x55ba26320288 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55ba263200f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba26320170 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55ba263352f8 <col:42, line:500:5>
|   |-ParenExpr 0x55ba26335090 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba26335060 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26334d40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba26334d10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26334c20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26334c08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26334bc8 <col:23> 'int' lvalue ParmVar 0x55ba263200f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26334be8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26334cf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26334cd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26334c40 <col:33> 'int' lvalue ParmVar 0x55ba263200f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26334cb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba26334ca0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba26334c60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba26334c80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ba26334da0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26334d80 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba26334fc0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba26334fa8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26334f88 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26335000 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26334e10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ba26335018 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26334e48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26335030 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26334e80 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55ba26335048 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba26334f70 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba26334f58 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26334f18 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55ba263352d8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55ba26335288 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba26335258 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba26335200 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba263351d0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba26335180 <col:48, col:57> 'char [48]' lvalue ->c 0x55ba263282d0
|     |     |   `-CXXMemberCallExpr 0x55ba26335160 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba26335130 <col:48> '<bound member function type>' ->xanno 0x55ba2631d5b8
|     |     |       `-CXXThisExpr 0x55ba26335120 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba263351e8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba263351b0 <col:61> 'int' lvalue ParmVar 0x55ba263200f8 'i' 'int'
|     `-ImplicitCastExpr 0x55ba263352c0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55ba263352a0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55ba26320170 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55ba26320448 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55ba26320350 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55ba26335a58 <col:35, line:513:5>
|   |-ParenExpr 0x55ba26335768 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba26335738 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26335490 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba26335460 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26335370 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26335358 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26335318 <col:23> 'int' lvalue ParmVar 0x55ba26320350 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26335338 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26335440 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26335428 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26335390 <col:33> 'int' lvalue ParmVar 0x55ba26320350 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26335408 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba263353f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba263353b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba263353d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ba263354f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba263354d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba26335698 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba26335680 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26335660 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba263356d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26335560 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ba263356f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26335598 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26335708 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba263355d0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55ba26335720 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba26335648 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba26335630 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba263355f0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55ba26335a48 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55ba26335a30 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55ba26335a18 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba263359e8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55ba26335960 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba26335930 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba263358e0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55ba263282d0
|             |   `-CXXMemberCallExpr 0x55ba263358c0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba26335890 <col:60> '<bound member function type>' ->xanno 0x55ba2631d418
|             |       `-CXXThisExpr 0x55ba26335880 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba26335948 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba26335910 <col:73> 'int' lvalue ParmVar 0x55ba26320350 'i' 'int'
|-CXXMethodDecl 0x55ba26320698 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55ba26320508 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba26320580 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55ba26336178 <col:41, line:528:5>
|   |-ParenExpr 0x55ba26335f00 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba26335ed0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26335bf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba26335bc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26335ad0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26335ab8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26335a78 <col:23> 'int' lvalue ParmVar 0x55ba26320508 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26335a98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26335ba0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26335b88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26335af0 <col:33> 'int' lvalue ParmVar 0x55ba26320508 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26335b68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba26335b50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba26335b10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba26335b30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ba26335c50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26335c30 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba26335e30 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba26335e18 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26335df8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26335e70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26335cc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ba26335e88 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26335cf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26335ea0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26335d30 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55ba26335eb8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba26335de0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba26335dc8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26335d88 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55ba26336158 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55ba26336108 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba263360d8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba26336080 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba26336040 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba26335ff0 <col:47, col:56> 'char [48]' lvalue ->c 0x55ba263282d0
|     |     |   `-CXXMemberCallExpr 0x55ba26335fd0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba26335fa0 <col:47> '<bound member function type>' ->xanno 0x55ba2631d5b8
|     |     |       `-CXXThisExpr 0x55ba26335f90 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba26336058 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba26336020 <col:60> 'int' lvalue ParmVar 0x55ba26320508 'i' 'int'
|     `-ImplicitCastExpr 0x55ba26336140 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55ba26336120 <col:65> 'int16_t':'short' lvalue ParmVar 0x55ba26320580 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55ba26320858 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55ba26320760 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55ba26336848 <col:36, line:541:5>
|   |-ParenExpr 0x55ba263365e8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba263365b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26336310 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba263362e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba263361f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba263361d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26336198 <col:23> 'int' lvalue ParmVar 0x55ba26320760 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba263361b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba263362c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba263362a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26336210 <col:33> 'int' lvalue ParmVar 0x55ba26320760 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26336288 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba26336270 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba26336230 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba26336250 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55ba26336370 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26336350 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba26336518 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba26336500 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba263364e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26336558 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba263363e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55ba26336570 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26336418 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26336588 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26336450 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55ba263365a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba263364c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba263364b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26336470 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55ba26336838 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55ba26336820 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55ba26336808 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba263367d8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55ba26336780 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba26336750 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba26336700 <col:61, col:70> 'char const[48]' lvalue ->c 0x55ba263282d0
|             |   `-CXXMemberCallExpr 0x55ba263366e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba263366b0 <col:61> '<bound member function type>' ->xanno 0x55ba2631d418
|             |       `-CXXThisExpr 0x55ba263366a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba26336768 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba26336730 <col:74> 'int' lvalue ParmVar 0x55ba26320760 'i' 'int'
|-CXXMethodDecl 0x55ba26320a28 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55ba26320918 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55ba26320990 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba26320ad8 <col:20>
| `-OptimizeNoneAttr 0x55ba26320b30 <col:30>
|-CXXMethodDecl 0x55ba26320c68 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55ba26320b70 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55ba26336f18 <col:35, line:562:5>
|   |-ParenExpr 0x55ba26336cb8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba26336c88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba263369e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba263369b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba263368c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba263368a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26336868 <col:23> 'int' lvalue ParmVar 0x55ba26320b70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26336888 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26336990 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26336978 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba263368e0 <col:33> 'int' lvalue ParmVar 0x55ba26320b70 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26336958 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba26336940 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba26336900 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba26336920 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55ba26336a40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26336a20 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba26336be8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba26336bd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26336bb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26336c28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26336ab0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55ba26336c40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26336ae8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26336c58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26336b20 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55ba26336c70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba26336b98 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba26336b80 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26336b40 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55ba26336f08 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55ba26336ef0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55ba26336ed8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba26336ea8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55ba26336e50 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba26336e20 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba26336dd0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55ba263282d0
|             |   `-CXXMemberCallExpr 0x55ba26336db0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba26336d80 <col:60> '<bound member function type>' ->xanno 0x55ba2631d418
|             |       `-CXXThisExpr 0x55ba26336d70 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba26336e38 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba26336e00 <col:73> 'int' lvalue ParmVar 0x55ba26320b70 'i' 'int'
|-CXXMethodDecl 0x55ba26320e78 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55ba26320d28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba26320da0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55ba263375f8 <col:41, line:577:5>
|   |-ParenExpr 0x55ba26337388 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba26337358 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba263370b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba26337080 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26336f90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26336f78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26336f38 <col:23> 'int' lvalue ParmVar 0x55ba26320d28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26336f58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26337060 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26337048 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26336fb0 <col:33> 'int' lvalue ParmVar 0x55ba26320d28 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26337028 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba26337010 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba26336fd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba26336ff0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55ba26337110 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba263370f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba263372b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba263372a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26337280 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba263372f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26337180 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55ba26337310 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba263371b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26337328 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba263371f0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55ba26337340 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba26337268 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba26337250 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26337210 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55ba263375d8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55ba26337588 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba26337558 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba263374f8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba263374c8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba26337478 <col:47, col:56> 'char [48]' lvalue ->c 0x55ba263282d0
|     |     |   `-CXXMemberCallExpr 0x55ba26337458 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba26337428 <col:47> '<bound member function type>' ->xanno 0x55ba2631d5b8
|     |     |       `-CXXThisExpr 0x55ba26337418 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba263374e0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba263374a8 <col:60> 'int' lvalue ParmVar 0x55ba26320d28 'i' 'int'
|     `-ImplicitCastExpr 0x55ba263375c0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55ba263375a0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55ba26320da0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55ba26321038 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55ba26320f40 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55ba26337d28 <col:36, line:591:5>
|   |-ParenExpr 0x55ba26337a68 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba26337a38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26337790 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba26337760 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26337670 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26337658 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26337618 <col:23> 'int' lvalue ParmVar 0x55ba26320f40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26337638 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26337740 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26337728 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26337690 <col:33> 'int' lvalue ParmVar 0x55ba26320f40 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26337708 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba263376f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba263376b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba263376d0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55ba263377f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba263377d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba26337998 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba26337980 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26337960 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba263379d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26337860 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55ba263379f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26337898 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26337a08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba263378d0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55ba26337a20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba26337948 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba26337930 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba263378f0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55ba26337d18 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55ba26337d00 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55ba26337ce8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba26337cb8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55ba26337c30 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba26337c00 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba26337bb0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55ba263282d0
|             |   `-CXXMemberCallExpr 0x55ba26337b90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba26337b60 <col:61> '<bound member function type>' ->xanno 0x55ba2631d418
|             |       `-CXXThisExpr 0x55ba26337b50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba26337c18 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba26337be0 <col:74> 'int' lvalue ParmVar 0x55ba26320f40 'i' 'int'
|-CXXMethodDecl 0x55ba26321288 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55ba263210f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba26321170 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55ba26338408 <col:42, line:606:5>
|   |-ParenExpr 0x55ba26338198 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba26338168 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26337ec0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba26337e90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26337da0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26337d88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26337d48 <col:23> 'int' lvalue ParmVar 0x55ba263210f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26337d68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26337e70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba26337e58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26337dc0 <col:33> 'int' lvalue ParmVar 0x55ba263210f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26337e38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba26337e20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba26337de0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba26337e00 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55ba26337f20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26337f00 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba263380c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba263380b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba26338090 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26338108 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26337f90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55ba26338120 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26337fc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26338138 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26338000 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55ba26338150 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba26338078 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba26338060 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26338020 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55ba263383e8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55ba26338398 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba26338368 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba26338308 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba263382d8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba26338288 <col:48, col:57> 'char [48]' lvalue ->c 0x55ba263282d0
|     |     |   `-CXXMemberCallExpr 0x55ba26338268 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba26338238 <col:48> '<bound member function type>' ->xanno 0x55ba2631d5b8
|     |     |       `-CXXThisExpr 0x55ba26338228 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba263382f0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba263382b8 <col:61> 'int' lvalue ParmVar 0x55ba263210f8 'i' 'int'
|     `-ImplicitCastExpr 0x55ba263383d0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55ba263383b0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55ba26321170 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55ba26321420 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55ba26321350 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55ba26338c78 <col:33, line:620:5>
|   |-ParenExpr 0x55ba263389f0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55ba263389c0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26338610 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba263385e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26338480 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26338468 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26338428 <col:23> 'int' lvalue ParmVar 0x55ba26321350 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26338448 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba263385c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55ba263385a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba263384a0 <col:33> 'int' lvalue ParmVar 0x55ba26321350 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26338588 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba26338570 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba263384c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55ba26338548 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55ba26338530 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55ba263384f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55ba26338670 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26338650 <col:79> 'int' 0
|   |   `-CallExpr 0x55ba26338920 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55ba26338908 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba263388e8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26338960 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26338758 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55ba26338978 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba263387a0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26338990 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba263387d8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55ba263389a8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba263388d0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba263388b8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26338878 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55ba26338c68 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55ba26338c50 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55ba26338c38 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba26338c08 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55ba26338b80 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba26338b50 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba26338b00 <col:67, col:76> 'char const[48]' lvalue ->c 0x55ba263282d0
|             |   `-CXXMemberCallExpr 0x55ba26338ae0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba26338ab0 <col:67> '<bound member function type>' ->xanno 0x55ba2631d418
|             |       `-CXXThisExpr 0x55ba26338aa0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba26338b68 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba26338b30 <col:80> 'int' lvalue ParmVar 0x55ba26321350 'i' 'int'
|-CXXMethodDecl 0x55ba26321638 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55ba263214e0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba26321560 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55ba263394a0 <col:45, line:635:5>
|   |-ParenExpr 0x55ba263391e8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55ba263391b8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55ba26338e80 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba26338e50 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba26338cf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba26338cd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba26338c98 <col:23> 'int' lvalue ParmVar 0x55ba263214e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba26338cb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba26338e30 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55ba26338e18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba26338d10 <col:33> 'int' lvalue ParmVar 0x55ba263214e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba26338df8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba26338de0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba26338d30 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2631d800 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55ba26338db8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55ba26338da0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55ba26338d68 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55ba26338ee0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba26338ec0 <col:79> 'int' 0
|   |   `-CallExpr 0x55ba26339118 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55ba26339100 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba263390e0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba25e8a0d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba26339158 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26338f50 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55ba26339170 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba26338f98 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba26339188 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba26338fd0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55ba263391a0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba263390c8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba263390b0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba26339068 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55ba26339480 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55ba263393e8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba263393b8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba26339358 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba26339328 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba263392d8 <col:54, col:63> 'char [48]' lvalue ->c 0x55ba263282d0
|     |     |   `-CXXMemberCallExpr 0x55ba263392b8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba26339288 <col:54> '<bound member function type>' ->xanno 0x55ba2631d5b8
|     |     |       `-CXXThisExpr 0x55ba26339278 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba26339340 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba26339308 <col:67> 'int' lvalue ParmVar 0x55ba263214e0 'i' 'int'
|     `-CXXConstCastExpr 0x55ba26339450 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55ba26339438 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55ba26339400 <col:91> 'const void *' lvalue ParmVar 0x55ba26321560 'x' 'const void *'
|-CXXMethodDecl 0x55ba26321708 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55ba26339528 <col:34, line:640:5>
|   `-ReturnStmt 0x55ba26339518 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55ba26339500 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55ba263394d0 <col:16> 'Packet *' lvalue ->_data_packet 0x55ba26328e88
|         `-CXXThisExpr 0x55ba263394c0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55ba26321848 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55ba263217b8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba263325e8 <col:46> 'bool' true
|-CXXMethodDecl 0x55ba263219c8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55ba26321900 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55ba26321a70 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55ba26322220 <line:660:22> "" ""
| |-EnumConstantDecl 0x55ba26321b70 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba26322290 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26321b50 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55ba26321b30 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55ba26316cd0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55ba26321c00 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba263222a8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26321be0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55ba26321bc0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55ba26316d60 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55ba26321c90 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba263222c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26321c70 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba26321c50 <col:21> 'int' 0
| |-EnumConstantDecl 0x55ba26321d20 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba263222d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26321d00 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55ba26321ce0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55ba26321db0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba263222f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26321d90 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55ba26321d70 <col:21> 'int' 16
| |-EnumConstantDecl 0x55ba26321e40 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba26322308 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26321e20 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55ba26321e00 <col:19> 'int' 32
| |-EnumConstantDecl 0x55ba26321ed0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba26322320 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26321eb0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55ba26321e90 <col:19> 'int' EnumConstant 0x55ba26321d20 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55ba26321f60 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba26322338 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26321f40 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55ba26321f20 <col:19> 'int' EnumConstant 0x55ba26321e40 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55ba26322030 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba26322350 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba26322010 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55ba26321ff0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55ba26321fb0 <col:23> 'int' EnumConstant 0x55ba26321f60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55ba26321fd0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55ba26322100 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba26322368 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba263220e0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55ba263220c0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55ba26322080 <col:23> 'int' EnumConstant 0x55ba26321f60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55ba263220a0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55ba263221d0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55ba26322380 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba263221b0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55ba26322190 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55ba26322150 <col:23> 'int' EnumConstant 0x55ba26321f60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55ba26322170 <col:40> 'int' 8
|-CXXMethodDecl 0x55ba263223c0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55ba26322460 <col:68> "" ""
|-CXXMethodDecl 0x55ba263224f8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55ba26322598 <col:45> "" ""
|-CXXMethodDecl 0x55ba26322630 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55ba263226d0 <col:57> "" ""
|-CXXMethodDecl 0x55ba26322768 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55ba26322808 <col:45> "" ""
|-CXXMethodDecl 0x55ba263228a0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55ba26322940 <col:57> "" ""
|-CXXMethodDecl 0x55ba263229d0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55ba26322a70 <col:51> "" ""
|-CXXMethodDecl 0x55ba26322b00 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55ba26322ba0 <col:63> "" ""
|-CXXMethodDecl 0x55ba26322c30 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55ba26322cd0 <col:53> "" ""
|-CXXMethodDecl 0x55ba26322d60 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55ba26322e00 <col:65> "" ""
|-CXXMethodDecl 0x55ba26322f18 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55ba26322e88 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55ba26322fc0 <col:61> "" ""
|-CXXMethodDecl 0x55ba26323158 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55ba26323048 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55ba263230c0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55ba26323208 <col:67> "" ""
|-CXXMethodDecl 0x55ba26323320 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55ba26323290 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55ba263233c8 <col:63> "" ""
|-CXXMethodDecl 0x55ba26323560 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55ba26323450 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ba263234c8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55ba26323610 <col:69> "" ""
|-CXXMethodDecl 0x55ba26323728 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55ba26323698 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55ba263237d0 <col:63> "" ""
|-CXXMethodDecl 0x55ba26325ea8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55ba26325d98 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ba26325e10 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ba26325f58 <col:69> "" ""
|-CXXMethodDecl 0x55ba26326070 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55ba26325fe0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55ba26326118 <col:62> "" ""
|-CXXMethodDecl 0x55ba263262b0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55ba263261a0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ba26326218 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55ba26326360 <col:68> "" ""
|-CXXMethodDecl 0x55ba26326478 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55ba263263e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55ba26326520 <col:63> "" ""
|-CXXMethodDecl 0x55ba263266b8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55ba263265a8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ba26326620 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55ba26326768 <col:69> "" ""
|-CXXMethodDecl 0x55ba263267f8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55ba26326898 <col:64> "" ""
|-CXXMethodDecl 0x55ba26326928 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55ba263269c8 <col:52> "" ""
|-CXXMethodDecl 0x55ba26326a58 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55ba26326af8 <col:67> "" ""
|-CXXMethodDecl 0x55ba26326b88 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55ba26326c28 <col:55> "" ""
|-CXXMethodDecl 0x55ba26326d40 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55ba26326cb0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55ba26326de8 <col:58> "" ""
|-CXXMethodDecl 0x55ba26326f80 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55ba26326e70 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ba26326ee8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55ba26327030 <col:62> "" ""
|-CXXMethodDecl 0x55ba26327148 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55ba263270b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55ba263271f0 <col:58> "" ""
|-CXXMethodDecl 0x55ba26327388 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55ba26327278 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ba263272f0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55ba26327438 <col:62> "" ""
|-CXXMethodDecl 0x55ba26327550 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55ba263274c0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55ba263275f8 <col:60> "" ""
|-CXXMethodDecl 0x55ba26327790 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55ba26327680 <col:34> col:37 'int'
| |-ParmVarDecl 0x55ba263276f8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55ba26327840 <col:64> "" ""
|-CXXMethodDecl 0x55ba26327958 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55ba263278c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55ba26327a00 <col:58> "" ""
|-CXXMethodDecl 0x55ba26327b98 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55ba26327a88 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ba26327b00 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55ba26327c48 <col:62> "" ""
|-CXXMethodDecl 0x55ba26327d60 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55ba26327cd0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55ba26327e08 <col:59> "" ""
|-CXXMethodDecl 0x55ba26327fa0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55ba26327e90 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ba26327f08 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ba26328050 <col:63> "" ""
|-AccessSpecDecl 0x55ba263280c0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55ba263280e8 prev 0x55ba2631d2f0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ba263281e0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55ba263282d0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55ba263283f8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55ba26328578 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55ba263286f8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55ba26328878 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55ba263396a8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55ba26339f18 <col:11>
| |-CXXDestructorDecl 0x55ba26339780 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55ba263398b8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55ba263398b8
| | `-ParmVarDecl 0x55ba263399c8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55ba26339a68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ba26339a68
| | `-ParmVarDecl 0x55ba26339b78 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55ba2633c938 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ba2633ca48 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55ba2633ccc8 <col:11>
| |   `-ReturnStmt 0x55ba2633ccb8 <col:11>
| |     `-UnaryOperator 0x55ba2633cca0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55ba2633cc90 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55ba2633cab8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ba2633cab8
|   `-ParmVarDecl 0x55ba2633cbc8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55ba263288e0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ba263289f8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55ba26328a98 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55ba26328b00 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55ba26328b68 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55ba26328bd0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55ba26328c30 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55ba26328cf0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55ba26328d50 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55ba26328db0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55ba263395b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55ba26328a98 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55ba26339f28 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55ba26339f80 <col:12>
| |-CXXConstructorDecl 0x55ba26339be8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55ba26339be8
| | `-ParmVarDecl 0x55ba26339cf8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55ba26339d98 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55ba26339d98
| | `-ParmVarDecl 0x55ba26339ea8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55ba2633c020 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55ba26328e28 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55ba26328e88 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55ba26328ef0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55ba26328f58 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55ba26328fc0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55ba26329028 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55ba26329088 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55ba263290e8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55ba26329150 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55ba263291d8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55ba26328e28 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55ba26339550 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55ba26329088 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55ba26339f90 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55ba26339ff0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55ba26329378 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55ba263292b8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55ba26329470 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55ba26329658 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55ba26329560 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55ba26329928 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55ba26329710 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba26329788 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ba26329800 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba26329b48 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55ba263299f8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55ba26329a70 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55ba26332128 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55ba26329c08 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55ba26329c80 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55ba26329cf8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55ba26332280 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55ba263321f0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba263323c8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55ba26332338 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55ba263324c0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba26084628 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba26084748 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55ba26084810 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55ba26154de0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ba2615a0f8 <col:8>
|-CXXConstructorDecl 0x55ba26154ee8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55ba26154ee8
| `-ParmVarDecl 0x55ba26154ff8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55ba26155098 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba261551a8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55ba26084810 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55ba2615a310 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55ba2615a2e0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55ba26084810
| |     `-CXXStaticCastExpr 0x55ba2615a2b0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55ba2615a280 <col:8> 'in_addr' lvalue ParmVar 0x55ba261551a8 '' 'in_addr &&'
| `-CompoundStmt 0x55ba2615a358 <col:8>
`-CXXDestructorDecl 0x55ba2615a590 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2614cac8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55ba2614cbe8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55ba2614ccd0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55ba2614ccb0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55ba2614cc78 <col:22> 'int' 4
|-FieldDecl 0x55ba2614cd78 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55ba2614cd58 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55ba2614cd20 <col:21> 'int' 4
|-FieldDecl 0x55ba2614cdd8 <line:33:5, col:13> col:13 referenced ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55ba2614ce38 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55ba2614ce98 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55ba2614cef8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55ba2614cf58 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55ba2614cfb8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55ba2614d018 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55ba2614d088 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55ba2614d0f8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2633a090 prev 0x55ba26316950 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55ba2633a1c8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55ba2633a258 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55ba2633a300 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55ba2633a3a0 <col:20>
| `-OptimizeNoneAttr 0x55ba2633a3f8 <col:30>
|-CXXMethodDecl 0x55ba2633a448 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55ba2633a4e8 <col:20>
| `-OptimizeNoneAttr 0x55ba2633a540 <col:30>
|-CXXMethodDecl 0x55ba2633a590 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55ba2633a658 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55ba2633a720 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55ba2633a838 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55ba2633a900 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55ba2633a9a0 <col:20>
| `-OptimizeNoneAttr 0x55ba2633a9f8 <col:30>
|-CXXMethodDecl 0x55ba2633aa68 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55ba2633ab08 <col:20>
| `-OptimizeNoneAttr 0x55ba2633ab60 <col:30>
|-CXXMethodDecl 0x55ba2633ac08 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55ba2633aca8 <col:20>
| `-OptimizeNoneAttr 0x55ba2633ad00 <col:30>
|-CXXMethodDecl 0x55ba2633ad50 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55ba2633ae68 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55ba2633af88 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55ba2633b0a8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55ba2633b170 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55ba2633b210 <col:62> "" ""
|-AccessSpecDecl 0x55ba2633b280 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55ba2633b2e0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55ba2633bed8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55ba2633c100 <col:29, col:31>
|-CXXMethodDecl 0x55ba2633b3a8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55ba2633b4e8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55ba2633b458 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55ba2633b5e0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55ba2633c110 <col:23, col:25>
|-CXXMethodDecl 0x55ba2633b798 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55ba2633b6d0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55ba2633ba68 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55ba2633b850 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba2633b8c8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ba2633b940 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2633bbf8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55ba2633bb30 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55ba2633bcf0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55ba2633bd58 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55ba2633bd58
  `-ParmVarDecl 0x55ba2633be68 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba26417610 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba26417728 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55ba264177b8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55ba264179f8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55ba264177f0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55ba26417870 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55ba264178e8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55ba26417c10 <col:81> 'const ArgContext' lvalue Var 0x55ba263ff878 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55ba26417b50 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55ba26417ac0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55ba26417d68 <col:35, line:1261:5>
|   `-ReturnStmt 0x55ba26417d58 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55ba26417d40 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55ba26417d10 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55ba26417cf8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55ba26417cd0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55ba26417cb0 <col:16, col:24> 'String' (CXXTemporary 0x55ba26417cb0)
|               `-CXXConstructExpr 0x55ba26417c78 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55ba26417c60 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55ba26417c40 <col:23> 'bool' lvalue ParmVar 0x55ba26417ac0 'x' 'bool'
|-CXXConstructorDecl 0x55ba2646eec8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55ba2646efa0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ba2646f0d8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55ba2646f0d8
| `-ParmVarDecl 0x55ba2646f1e8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55ba2646f288 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55ba2646f398 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55ba2646fff0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba26417da8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55ba26418008 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55ba2646edd8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ba2646f408 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55ba2646f408
| `-ParmVarDecl 0x55ba2646f518 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55ba2646f5b8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2646f6c8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55ba26470000 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55ba2646ffd0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55ba2646ffa0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55ba2646ff70 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55ba2646f6c8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55ba26470070 <col:19>
`-CXXDestructorDecl 0x55ba2646f768 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
