
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | union Classification::Wordwise::Insn::(anonymous at ../elements/standard/classification.hh:35:5)
         0 |   unsigned char [4] c
         0 |   uint32_t u
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Classification::Wordwise::Insn::(anonymous at ../elements/standard/classification.hh:39:5)
         0 |   unsigned char [4] c
         0 |   uint32_t u
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct Classification::Wordwise::Insn
         0 |   uint16_t offset
         2 |   uint8_t padding
         3 |   uint8_t short_output
         4 |   union Classification::Wordwise::Insn::(anonymous at ../elements/standard/classification.hh:35:5) mask
         4 |     unsigned char [4] c
         4 |     uint32_t u
         8 |   union Classification::Wordwise::Insn::(anonymous at ../elements/standard/classification.hh:39:5) value
         8 |     unsigned char [4] c
         8 |     uint32_t u
        12 |   int32_t [2] j
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133b37d8 prev 0x5559132abda8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5559133b38d0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5559133b3960 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5559133b39d8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5559133b3a98 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5559133b3b60 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5559133b3cd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5559133b3c10 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5559133b3d80 <col:24>
| `-OptimizeNoneAttr 0x5559133b3dd8 <col:34>
|-CXXMethodDecl 0x5559133b3e20 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5559133b40d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5559133b3ed0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5559133b3f48 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5559133b3fc8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5559133b4190 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5559133b41c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5559133b4230 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5559133b42b8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5559133b45d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5559133b4370 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5559133b43e8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5559133b4460 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5559133b44e0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5559133b46f0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5559133bc088 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5559133bc088
| `-ParmVarDecl 0x5559133bc198 <col:11> col:11 'const Element::Port &'
`-CXXConstructorDecl 0x5559133bc238 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5559133bc238
  `-ParmVarDecl 0x5559133bc348 <col:11> col:11 'Element::Port &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913394b80 prev 0x555913394900 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555913394c78 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x555913394d08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x555913394d68 <line:31:5, col:13> col:5 Element 'void ()'
|-CXXDestructorDecl 0x555913394e58 <line:32:5, col:22> col:13 ~Element 'void ()' virtual noexcept-unevaluated 0x555913394e58
|-VarDecl 0x555913394f58 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x555913395128 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x555913394fd8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x555913395050 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5559133952b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5559133951f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x555913395360 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x555913395498 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5559133953d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x555913395638 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x555913395578 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5559133957d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x555913395718 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x555913395880 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x555913395980 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x555913395a60 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555913395960 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x555913395940 <col:26> 'int' 1
| `-EnumConstantDecl 0x555913395a10 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x555913395a78 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559133959f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5559133959d0 <col:44> 'int' 2
|-CXXMethodDecl 0x555913395bc0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x555913395aa8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x555913395b28 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x555913395d18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x555913395c88 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x555913395f58 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x555913395dd8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x555913395e50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x555913396008 <col:20>
| `-OptimizeNoneAttr 0x555913396060 <col:30>
|-CXXMethodDecl 0x555913396168 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5559133960a0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x555913396210 <col:20>
| `-OptimizeNoneAttr 0x555913396268 <col:30>
|-CXXMethodDecl 0x5559133962b8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x555913396380 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x555913396498 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x555913396520 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5559133965a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x555913396630 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5559133966b8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x555913396748 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x555913396808 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x555913396890 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x555913396918 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5559133969a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x555913396a28 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x555913396ab0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x555913396b40 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x555913396c00 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x555913396c90 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5559132a9890 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5559132a97f8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5559132a9a20 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5559132a9950 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5559132a9cc0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5559132a9ad8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5559132a9b58 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5559132a9bd8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5559132a9d78 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5559132a9e80 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5559132aa110 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132a9e60 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5559132a9e40 <col:33> 'int' 0
| |-EnumConstantDecl 0x5559132a9f10 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5559132aa128 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132a9ef0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5559132a9ed0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5559132a9fa0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5559132aa140 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132a9f80 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5559132a9f60 <col:38> 'int' 90
| |-EnumConstantDecl 0x5559132aa030 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5559132aa158 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132aa010 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5559132a9ff0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5559132aa0c0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5559132aa170 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559132aa0a0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5559132aa080 <col:32> 'int' 2000
|-CXXMethodDecl 0x5559132aa1b0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5559132aa5f0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5559132aa460 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5559132aa4d8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559132aa6c0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5559132aa840 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5559132aa770 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559132aaa48 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5559132aa8f8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5559132aa970 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559132aab48 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5559132aabe8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5559132aacb0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5559132aad40 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5559132aaf70 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132aad20 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5559132aad00 <col:36> 'int' EnumConstant 0x5559132aacb0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5559132aad90 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5559132aade0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5559132aae30 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5559132aae80 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5559132aaed0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5559132aaf20 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5559132ab058 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5559132aaf98 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5559132ab120 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5559132ab1e0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5559132ab2a0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5559132ab360 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5559132ab478 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5559132ab540 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5559132ab6c0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5559132ab5f0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5559132ab7e8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5559132ab9e8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5559132ab898 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5559132ab918 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5559133b74d8 <col:54, line:127:5>
|   |-ParenExpr 0x5559133b7388 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5559133b7358 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5559133b7048 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5559133b7020 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5559133b7008 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5559133b6ff0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5559133b6fc0 <col:31> 'Router *' lvalue ->_router 0x5559133b4ea0
|   |   |         `-CXXThisExpr 0x5559133b6fb0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5559133b70a8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5559133b7088 <col:48> 'int' 0
|   |   `-CallExpr 0x5559133b72b8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5559133b72a0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5559133b7280 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5559133b72f8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133b7118 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5559133b7310 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133b7138 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5559133b7328 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5559133b7170 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5559133b7340 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5559133b7268 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5559133b7250 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5559133b7208 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5559133b7420 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5559133b73b8 <col:9> 'Router *' lvalue ->_router 0x5559133b4ea0
|   | | `-CXXThisExpr 0x5559133b73a8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5559133b7408 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5559133b73e8 <col:19> 'Router *' lvalue ParmVar 0x5559132ab898 'r' 'Router *'
|   `-BinaryOperator 0x5559133b74b8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5559133b7450 <col:9> 'int' lvalue ->_eindex 0x5559133b4f08
|     | `-CXXThisExpr 0x5559133b7440 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5559133b74a0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5559133b7480 <col:19> 'int' lvalue ParmVar 0x5559132ab918 'eindex' 'int'
|-CXXMethodDecl 0x5559132abb70 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5559132abaa8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5559132abc40 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5559132abd08 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5559132abda8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5559132abff8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5559132abe70 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5559132abef0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5559132ac0a8 <col:20>
| `-OptimizeNoneAttr 0x5559132ac100 <col:30>
|-CXXMethodDecl 0x5559132ac208 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5559132ac140 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5559132ac2b0 <col:20>
| `-OptimizeNoneAttr 0x5559132ac308 <col:30>
|-CXXMethodDecl 0x5559132ac3d8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5559132ac348 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5559132ac480 <col:20>
| `-OptimizeNoneAttr 0x5559132ac4d8 <col:30>
|-CXXMethodDecl 0x5559132ac668 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5559132ac510 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5559132ac590 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5559132ac7f8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5559132ac730 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5559132ac948 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5559132ac8b8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5559132aca98 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5559132aca08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5559132acbe8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5559132acb58 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5559132acea8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5559132acca0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5559132acd20 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5559132acdc8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5559132acf80 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5559132ad040 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5559132ad310 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5559132ad1c0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5559132ad238 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5559132ad438 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5559132ad610 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5559132ad4f0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5559132ad570 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5559132ad7f8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5559132ad6d8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5559132ad758 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5559132adb68 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5559132ad8b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5559132ad930 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5559132ad9b0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5559133b6ac0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5559133b6aa0 <col:106> 'int' 0
| `-ParmVarDecl 0x5559132ada28 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5559133b6af8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5559133b6ad8 <col:126> 'int' 0
|-CXXMethodDecl 0x5559132adee8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5559132adc38 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5559132adcb0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5559132add30 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5559132adda8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5559133b6b30 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5559133b6b10 <col:114> 'int' 0
|-CXXMethodDecl 0x5559132ae278 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5559132adfc0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5559132ae038 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5559132ae0b8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5559133b6b48 <col:96> 'int' 0
| `-ParmVarDecl 0x5559132ae130 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5559133b6b88 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5559133b6b68 <col:116> 'int' 0
|-CXXMethodDecl 0x5559132ae5f8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5559132ae348 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5559132ae3c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5559132ae440 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5559133b6bc0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5559133b6ba0 <col:109> 'int' 0
| `-ParmVarDecl 0x5559132ae4b8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5559133b6bf8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5559133b6bd8 <col:129> 'int' 0
|-CXXMethodDecl 0x5559132ae978 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5559132ae6c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5559132ae740 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5559132ae7c0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5559132ae838 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5559133b6c30 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5559133b6c10 <col:117> 'int' 0
|-CXXMethodDecl 0x5559132aed08 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5559132aea50 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559132aeac8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5559132aeb48 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5559133b6c48 <col:99> 'int' 0
| `-ParmVarDecl 0x5559132aebc0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5559133b6c88 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5559133b6c68 <col:119> 'int' 0
|-CXXMethodDecl 0x5559132af128 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5559132aedd8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5559132aee58 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5559132aeed0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5559132aef50 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5559133b6cc0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5559133b6ca0 <col:108> 'int' 0
| `-ParmVarDecl 0x5559132aefd0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5559133b6cf8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5559133b6cd8 <col:141> 'int' 0
|-CXXMethodDecl 0x5559132af548 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5559132af200 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5559132af280 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5559132af2f8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5559132af378 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5559132af3f8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5559133b6d10 <col:121> 'int' 0
|-CXXMethodDecl 0x5559132af978 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5559132af628 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5559132af6a8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5559132af720 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5559132af7a0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5559133b6d30 <col:98> 'int' 0
| `-ParmVarDecl 0x5559132af820 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5559133b6d50 <col:123> 'int' 0
|-CXXMethodDecl 0x5559132afc40 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5559132afa50 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5559132afad0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5559132afb50 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5559133b6d70 <col:80> 'int' 0
|-EnumDecl 0x5559132afcf8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5559132afe00 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5559132b0090 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132afde0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5559132afdc0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5559132afe90 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5559132b00a8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132afe70 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5559132afe50 <col:40> 'int' 2
| |-EnumConstantDecl 0x5559132aff20 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5559132b00c0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132aff00 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5559132afee0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5559132affb0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5559132b00d8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132aff90 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5559132aff70 <col:36> 'int' 7
| `-EnumConstantDecl 0x5559132b0040 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5559132b00f0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559132b0020 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5559132b0000 <col:34> 'int' 6
|-CXXMethodDecl 0x5559132b03a8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5559132b0118 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5559132b01b8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5559132b0238 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5559132b02b0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5559133b6e28 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5559133b6e10 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5559133b6df8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5559133b6dd8 <col:98, col:105> 'String' (CXXTemporary 0x5559133b6dd8)
|           `-CXXTemporaryObjectExpr 0x5559133b6da0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5559132b0648 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5559132b0478 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5559132b04f0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5559132b0568 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5559133b6ed8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5559133b6ec0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5559133b6ea8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5559133b6e88 <col:94, col:101> 'String' (CXXTemporary 0x5559133b6e88)
| |         `-CXXTemporaryObjectExpr 0x5559133b6e50 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5559133b76c0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5559133b7638 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5559133b7608 <col:9> '<bound member function type>' ->add_task_handlers 0x5559132b03a8
|     | `-CXXThisExpr 0x5559133b75f8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5559133b7678 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5559133b7578 <col:27> 'Task *' lvalue ParmVar 0x5559132b0478 'task' 'Task *'
|     |-ImplicitCastExpr 0x5559133b7690 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5559133b7598 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5559132b04f0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5559133b76a8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5559133b75b8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5559132b0040 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5559133b75d8 <col:62> 'const String' lvalue ParmVar 0x5559132b0568 'prefix' 'const String &'
|-CXXMethodDecl 0x5559132b0858 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5559132b0710 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5559132b0788 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5559133b6f88 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5559133b6f70 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5559133b6f58 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5559133b6f38 <col:70, col:77> 'String' (CXXTemporary 0x5559133b6f38)
| |         `-CXXTemporaryObjectExpr 0x5559133b6f00 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5559133b7898 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5559133b7810 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5559133b77e0 <col:9> '<bound member function type>' ->add_task_handlers 0x5559132b03a8
|     | `-CXXThisExpr 0x5559133b77d0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5559133b7850 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5559133b7750 <col:27> 'Task *' lvalue ParmVar 0x5559132b0710 'task' 'Task *'
|     |-ImplicitCastExpr 0x5559133b7868 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5559133b7770 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5559133b7880 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5559133b7790 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5559132b0040 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5559133b77b0 <col:57> 'const String' lvalue ParmVar 0x5559132b0788 'prefix' 'const String &'
|-CXXMethodDecl 0x5559132b0b38 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5559132b0920 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559132b09a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559132b0a18 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5559132b0de8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5559132b0c08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559132b0c88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559132b0d08 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5559132b10d8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5559132b0eb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559132b0f38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559132b0fb0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5559132b1388 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5559132b11a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559132b1228 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559132b12a8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5559132b1638 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5559132b1458 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559132b14d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559132b1558 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5559133b0b38 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5559132b1708 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b09e0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559133b0a58 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5559133b0de8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5559133b0c08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b0c88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559133b0d08 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5559133b1098 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5559133b0eb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b0f38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559133b0fb8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5559133b1378 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5559133b1168 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b11e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559133b1290 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5559133b1658 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5559133b1448 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b14c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559133b1570 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5559133b18c0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5559133b1728 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5559133b17a8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5559133b1820 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5559133b1b68 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5559133b1990 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5559133b1a10 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5559133b1a88 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5559133b1e18 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5559133b1c38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b1cb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559133b1d38 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5559133b20c8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5559133b1ee8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b1f68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559133b1fe0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5559133b2378 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5559133b2198 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b2218 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559133b2290 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5559133b2648 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5559133b2448 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b24c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5559133b2568 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5559133b2978 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5559133b2718 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5559133b2798 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5559133b2810 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5559133b2888 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5559133b6fa0 <col:93> 'bool' false
|-CXXMethodDecl 0x5559133b2b60 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5559133b2a48 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5559133b2ac8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5559133b2d38 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5559133b2c20 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5559133b2ca0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5559133b3018 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5559133b2df8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5559133b2e70 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5559133b2ef0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5559133b2f68 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5559133b3308 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5559133b30e8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5559133b3160 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5559133b31e0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5559133b3258 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5559133b3540 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5559133b33e0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5559133b3460 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5559133b3728 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5559133b3608 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5559133b3688 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5559133b37d8 prev 0x5559132abda8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5559133b38d0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5559133b3960 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5559133b39d8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5559133b3a98 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5559133b3b60 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5559133b3cd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5559133b3c10 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5559133b3d80 <col:24>
| | `-OptimizeNoneAttr 0x5559133b3dd8 <col:34>
| |-CXXMethodDecl 0x5559133b3e20 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5559133b40d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5559133b3ed0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5559133b3f48 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5559133b3fc8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5559133b4190 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5559133b41c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5559133b4230 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5559133b42b8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5559133b45d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5559133b4370 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5559133b43e8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5559133b4460 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5559133b44e0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5559133b46f0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5559133bc088 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5559133bc088
| | `-ParmVarDecl 0x5559133bc198 <col:11> col:11 'const Element::Port &'
| `-CXXConstructorDecl 0x5559133bc238 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5559133bc238
|   `-ParmVarDecl 0x5559133bc348 <col:11> col:11 'Element::Port &&'
|-CXXMethodDecl 0x5559133b4768 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5559133b4808 <col:38> "" ""
|-CXXMethodDecl 0x5559133b4898 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5559133b4938 <col:44> "" ""
|-AccessSpecDecl 0x5559133b49a8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5559133b49d0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5559133b4ad0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5559133b4b20 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559133b4ab0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5559133b4a90 <col:27> 'int' 4
|-FieldDecl 0x5559133b4bd8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5559133b4d88 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5559133b4e40 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5559133b4ea0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5559133b4f08 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5559133b5058 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5559133b4f98 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5559133b5208 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5559133b5118 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5559133b53e8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5559133b52c8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5559133b5348 <col:25> col:28 'int'
|-CXXMethodDecl 0x5559133b5690 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5559133b54b0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5559133b5530 <col:28> col:31 'int'
| `-ParmVarDecl 0x5559133b55a8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5559133b5748 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5559133b5810 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5559133b5860 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5559133b58b0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5559133b5a90 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5559133b5940 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5559133b59b8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559133b5d38 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5559133b5b58 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5559133b5bd8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5559133b5c50 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5559133b5f58 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5559133b5e08 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5559133b5e88 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5559133b6290 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5559133b6018 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5559133b6098 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5559133b6110 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5559133b6190 <col:57> col:60 'int'
|-CXXMethodDecl 0x5559133b6478 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5559133b6360 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5559133b63e0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5559133b65c8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5559133b6538 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5559133b6948 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5559133b6688 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5559133b6708 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5559133b6780 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5559133b6800 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5559133b6a60 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133d7200 prev 0x555913394990 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5559133d72f8 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5559133d7388 <col:22, col:28> col:22 public
|-EnumDecl 0x5559133d73b0 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5559133d74c8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5559133d74a8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5559133d7490 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5559133d7470 <col:14> 'int' 999
| |-EnumConstantDecl 0x5559133d7570 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5559133d7550 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5559133d7538 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5559133d7518 <col:14> 'int' 1
| |-EnumConstantDecl 0x5559133d7600 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5559133d75e0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5559133d75c0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5559133d7690 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5559133d7670 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5559133d7650 <col:13> 'int' 1
| |-EnumConstantDecl 0x5559133d7720 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5559133d7700 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5559133d76e0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5559133d77b0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5559133d7790 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5559133d7770 <col:13> 'int' 3
| |-EnumConstantDecl 0x5559133d7840 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5559133d7820 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5559133d7800 <col:15> 'int' 4
| |-EnumConstantDecl 0x5559133d78d0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5559133d78b0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5559133d7890 <col:14> 'int' 5
| |-EnumConstantDecl 0x5559133d7960 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5559133d7940 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5559133d7920 <col:12> 'int' 6
| `-EnumConstantDecl 0x5559133d79f0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5559133d79d0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5559133d79b0 <col:13> 'int' 7
|-VarDecl 0x5559133d7a60 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5559133d7ae8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5559133d7b70 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5559133d7bf8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5559133d7c80 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5559133d7d08 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5559133d7d90 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5559133d7e18 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5559133d7ea0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5559133d7f28 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5559133d7fb0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5559133d80b0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5559133dd4c8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5559133ddc58 <line:128:13> 'int' 0
| `-CompoundStmt 0x5559133ddcc8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5559133d81a0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5559133ddcd8 <col:29, line:132:5>
|-CXXMethodDecl 0x5559133d8358 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5559133d8290 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559133d8420 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5559133d8508 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5559133ddd30 <col:44, line:161:5>
|   `-ReturnStmt 0x5559133ddd20 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5559133ddd08 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5559133ddce8 <col:9> 'ErrorHandler *' lvalue Var 0x5559133dd528 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5559133d8678 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5559133d85b8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559133d8740 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5559133ddd90 <col:43, line:173:5>
|   `-ReturnStmt 0x5559133ddd80 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5559133ddd68 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5559133ddd48 <col:9> 'ErrorHandler *' lvalue Var 0x5559133dd5a0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5559133d87f8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5559133d8878 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5559133d8988 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5559133d88f8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5559133d8ad8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5559133d8a48 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5559133d8c30 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5559133d8b98 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5559133d8d88 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5559133d8cf0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5559133d8ee0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5559133d8e48 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5559133d90f0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5559133d8f98 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5559133d9018 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5559133d92c8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5559133d91b0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5559133d9230 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5559133d94e8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5559133d9388 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5559133d9408 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5559133d96c8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5559133d95a8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5559133d9628 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5559133d98a8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5559133d9788 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5559133d9808 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5559133d9a30 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5559133d9968 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5559133d9c00 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5559133d9ae8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5559133d9b60 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5559133ddfe8 <col:57, line:234:5>
|   `-ReturnStmt 0x5559133ddfd8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5559133ddfc0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5559133ddf68 <col:9, col:41> 'int'
|         |-MemberExpr 0x5559133ddf38 <col:9> '<bound member function type>' ->xmessage 0x5559133d9a30
|         | `-CXXThisExpr 0x5559133ddf28 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5559133ddfa8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5559133ddf90 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5559133ddf08 <col:18, col:40> 'String' (CXXTemporary 0x5559133ddf08)
|               `-CallExpr 0x5559133dded0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5559133ddeb8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5559133dde30 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5559133dbcb0 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5559133dde50 <col:31> 'const String' lvalue ParmVar 0x5559133d9b60 'str' 'const String &'
|                 `-DeclRefExpr 0x5559133dde70 <col:36> 'const String' lvalue ParmVar 0x5559133d9ae8 'anno' 'const String &'
|-CXXMethodDecl 0x5559133d9f40 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5559133d9cc0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5559133d9d40 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5559133d9e10 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5559133de278 <col:68, line:243:5>
|   `-ReturnStmt 0x5559133de268 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5559133de250 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5559133de1f0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5559133de1c0 <col:9> '<bound member function type>' ->xmessage 0x5559133d9c00
|         | `-CXXThisExpr 0x5559133de1b0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5559133de088 <col:18> 'const String' lvalue ParmVar 0x5559133d9cc0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5559133de238 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5559133de220 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5559133de190 <col:24, col:40> 'String' (CXXTemporary 0x5559133de190)
|               `-CXXMemberCallExpr 0x5559133de128 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5559133de0b8 <col:24> '<bound member function type>' ->vformat 0x5559133db120
|                 | `-CXXThisExpr 0x5559133de0a8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5559133de158 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5559133de0e8 <col:32> 'const char *' lvalue ParmVar 0x5559133d9d40 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5559133de170 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5559133de108 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5559133d9e10 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5559133da1e0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5559133da008 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5559133da080 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5559133da0f8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5559133de5b8 <col:23, line:254:5>
|   `-ReturnStmt 0x5559133de5a8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5559133de590 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5559133de530 <col:9, col:71> 'int'
|         |-MemberExpr 0x5559133de500 <col:9> '<bound member function type>' ->xmessage 0x5559133d9c00
|         | `-CXXThisExpr 0x5559133de4f0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5559133de578 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5559133de560 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5559133de4b0 <col:18, col:65> 'String' (CXXTemporary 0x5559133de4b0)
|         |     `-CallExpr 0x5559133de448 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5559133de430 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5559133de318 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5559133dbcb0 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5559133de338 <col:31> 'const String' lvalue ParmVar 0x5559133da080 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5559133de490 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5559133de478 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5559133de410 <col:37, col:64> 'String' (CXXTemporary 0x5559133de410)
|         |             `-CallExpr 0x5559133de3e0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5559133de3c8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5559133de358 <col:37> 'String (const String &)' lvalue CXXMethod 0x5559133dc308 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5559133de378 <col:56> 'const String' lvalue ParmVar 0x5559133da008 'landmark' 'const String &'
|         `-DeclRefExpr 0x5559133de4d0 <col:68> 'const String' lvalue ParmVar 0x5559133da0f8 'str' 'const String &'
|-CXXMethodDecl 0x5559133da560 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5559133da2a8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5559133da320 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5559133da3a0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5559133da418 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5559133de870 <col:34, line:267:5>
|   `-ReturnStmt 0x5559133de860 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5559133de848 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5559133de7e0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5559133de7b0 <col:9> '<bound member function type>' ->xmessage 0x5559133da1e0
|         | `-CXXThisExpr 0x5559133de7a0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5559133de658 <col:18> 'const String' lvalue ParmVar 0x5559133da2a8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5559133de678 <col:28> 'const String' lvalue ParmVar 0x5559133da320 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5559133de830 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5559133de818 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5559133de780 <col:34, col:50> 'String' (CXXTemporary 0x5559133de780)
|               `-CXXMemberCallExpr 0x5559133de718 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5559133de6a8 <col:34> '<bound member function type>' ->vformat 0x5559133db120
|                 | `-CXXThisExpr 0x5559133de698 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5559133de748 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5559133de6d8 <col:42> 'const char *' lvalue ParmVar 0x5559133da3a0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5559133de760 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5559133de6f8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5559133da418 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5559133da670 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5559133de8f0 <col:25, line:288:5>
|   `-ReturnStmt 0x5559133de8e0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5559133de8c8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5559133de898 <col:9> 'const int' lvalue ->_nerrors 0x5559133dd4c8
|         `-CXXThisExpr 0x5559133de888 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5559133da880 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5559133da728 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5559133da7a8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5559133dab68 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5559133da948 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5559133da9c8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5559133daa40 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5559133dad00 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5559133dac38 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5559133daf48 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5559133dadc0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5559133dae38 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5559133deb50 <col:58, line:357:5>
|   `-ReturnStmt 0x5559133deb40 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5559133deb28 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5559133deaf8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5559133deae0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5559133deac0 <col:9, col:29> 'String' (CXXTemporary 0x5559133deac0)
|             `-CallExpr 0x5559133dea50 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5559133dea38 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5559133de9b8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5559133dab68 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5559133de958 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5559133dea88 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5559133de978 <col:21> 'const char *' lvalue ParmVar 0x5559133dadc0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5559133deaa0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5559133de998 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5559133dae38 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5559133db120 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5559133db010 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5559133db088 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5559133db278 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5559133db1e8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5559133db3f8 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5559133db330 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5559133db690 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5559133db4b0 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5559133db530 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5559133db5a8 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5559133db7f0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5559133db760 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5559133dec68 <col:37, line:441:5>
|   `-IfStmt 0x5559133dec50 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5559133debd8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5559133deba8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5559133deb68 <col:6> 'int' lvalue ParmVar 0x5559133db760 'level' 'int'
|     | `-ImplicitCastExpr 0x5559133debc0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5559133deb88 <col:15> 'ErrorHandler::Level' EnumConstant 0x5559133d77b0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5559133dec38 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5559133dec08 <col:8> 'int' lvalue ->_nerrors 0x5559133dd4c8
|         `-CXXThisExpr 0x5559133debf8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5559133db8b8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5559133ded00 <col:26, line:448:5>
|   `-BinaryOperator 0x5559133dece0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5559133dec90 <col:2> 'int' lvalue ->_nerrors 0x5559133dd4c8
|     | `-CXXThisExpr 0x5559133dec80 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5559133decc0 <col:13> 'int' 0
|-CXXMethodDecl 0x5559133dba80 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5559133db970 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5559133db9e8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5559133dbcb0 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5559133dbb40 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5559133dbbb8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5559133dbf68 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5559133dbd70 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5559133dbdf0 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5559133dbe70 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5559133dc020 <col:59> 0 0
|-CXXMethodDecl 0x5559133dc1b8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5559133dc098 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5559133dc118 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5559133df370 <col:70, line:534:5>
|   |-DeclStmt 0x5559133dee70 <line:528:2, col:20>
|   | |-VarDecl 0x5559133ded28 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5559133ded90 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5559133dedc8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5559133dee30 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5559133def40 <line:529:2, col:23>
|   | `-VarDecl 0x5559133deea0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5559133def28 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5559133def08 <col:18> 'const char *' lvalue ParmVar 0x5559133dc098 'begin' 'const char *'
|   |-DoStmt 0x5559133df308 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5559133df238 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5559133df220 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5559133df200 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5559133def58 <col:6> 'const char *' lvalue Var 0x5559133deea0 'x' 'const char *'
|   | |     `-CallExpr 0x5559133df150 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5559133df138 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5559133df0f0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5559133dd9a0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5559133df1b8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5559133df1a0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5559133df010 <col:20, col:27> 'String' (CXXTemporary 0x5559133df010)
|   | |       |     `-CXXTemporaryObjectExpr 0x5559133defd8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5559133df1d0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5559133df030 <col:30> 'const char *' lvalue Var 0x5559133deea0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5559133df1e8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5559133df050 <col:33> 'const char *' lvalue ParmVar 0x5559133dc118 'end' 'const char *'
|   | |       |-UnaryOperator 0x5559133df090 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5559133df070 <col:39> 'String' lvalue Var 0x5559133ded28 'name' 'String'
|   | |       |-UnaryOperator 0x5559133df0c8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5559133df0a8 <col:46> 'String' lvalue Var 0x5559133dedc8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5559133df0e0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5559133df2f0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5559133df2d8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5559133df2b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5559133df288 <col:11> '<bound member function type>' .operator int (String::*)() const 0x555913036728
|   |         `-ImplicitCastExpr 0x5559133df270 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5559133df250 <col:11> 'String' lvalue Var 0x5559133ded28 'name' 'String'
|   `-ReturnStmt 0x5559133df360 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5559133df348 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5559133df328 <col:9> 'const char *' lvalue Var 0x5559133deea0 'x' 'const char *'
|-CXXMethodDecl 0x5559133dc308 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5559133dc278 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5559133df978 <col:55, line:550:5>
|   `-IfStmt 0x5559133df950 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5559133df5b0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5559133df598 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5559133df580 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5559133df560 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5559133df530 <col:6> '<bound member function type>' .operator int (String::*)() const 0x555913036728
|     | |       `-DeclRefExpr 0x5559133df3d0 <col:6> 'const String' lvalue ParmVar 0x5559133dc278 'x' 'const String &'
|     | `-BinaryOperator 0x5559133df510 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5559133df4e0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5559133df490 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5559133df478 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5559133df430 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5559130517f0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5559133df3f0 <col:11> 'const String' lvalue ParmVar 0x5559133dc278 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5559133df410 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5559133df4f8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5559133df4c8 <col:19> 'char' 123
|     |-ReturnStmt 0x5559133df620 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5559133df5f0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5559133df5d0 <col:13> 'const String' lvalue ParmVar 0x5559133dc278 'x' 'const String &'
|     `-IfStmt 0x5559133df928 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5559133df6b8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5559133df6a0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5559133df680 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5559133df650 <col:11> '<bound member function type>' .operator int (String::*)() const 0x555913036728
|       |       `-DeclRefExpr 0x5559133df630 <col:11> 'const String' lvalue ParmVar 0x5559133dc278 'x' 'const String &'
|       |-ReturnStmt 0x5559133df840 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5559133df828 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5559133df7f8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5559133df7e0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5559133df7c0 <col:13, col:29> 'String' (CXXTemporary 0x5559133df7c0)
|       |         `-CallExpr 0x5559133df770 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5559133df758 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5559133df6d0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5559133dba80 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5559133df7a0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5559133df6f0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5559133df710 <col:28> 'const String' lvalue ParmVar 0x5559133dc278 'x' 'const String &'
|       `-ReturnStmt 0x5559133df918 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5559133df900 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5559133df8d0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5559133df8b8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5559133df898 <col:13, col:20> 'String' (CXXTemporary 0x5559133df898)
|                 `-CXXTemporaryObjectExpr 0x5559133df860 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5559133dc508 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5559133dc3c0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5559133dc438 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5559133ddc48 <col:71> 'bool' false
|-CXXRecordDecl 0x5559133dc5b8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5559133dc8b8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5559133dc850 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5559133dc7f0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5559133dc7b0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x555913032a10 'String'
|       | `-CXXRecord 0x555913032980 'String'
|       |-BuiltinType 0x555912df5580 'int'
|       `-DecayedType 0x5559133d9de0 '__va_list_tag *' sugar
|         |-TypedefType 0x5559133d9db0 'va_list' sugar
|         | |-Typedef 0x555913069b30 'va_list'
|         | `-TypedefType 0x555913069ae0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x555913064b88 '__gnuc_va_list'
|         |   `-TypedefType 0x555913064af0 '__builtin_va_list' sugar
|         |     |-Typedef 0x555912e36d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x555912e36ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x555912df62d0 '__va_list_tag'
|         |         `-CXXRecord 0x555912df6238 '__va_list_tag'
|         `-PointerType 0x55591306f710 '__va_list_tag *'
|           `-RecordType 0x555912df62d0 '__va_list_tag'
|             `-CXXRecord 0x555912df6238 '__va_list_tag'
|-EnumDecl 0x5559133dc910 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5559133dca10 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5559133dcf70 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133dc9f0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5559133dc9d0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5559133dcaa0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5559133dcf88 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133dca80 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5559133dca60 <col:21> 'int' 2
| |-EnumConstantDecl 0x5559133dcb30 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5559133dcfa0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133dcb10 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5559133dcaf0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5559133dcbc0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5559133dcfb8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133dcba0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5559133dcb80 <col:17> 'int' 8
| |-EnumConstantDecl 0x5559133dcc50 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5559133dcfd0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133dcc30 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5559133dcc10 <col:22> 'int' 16
| |-EnumConstantDecl 0x5559133dcce0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5559133dcfe8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133dccc0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5559133dcca0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5559133dcd70 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5559133dd000 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133dcd50 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5559133dcd30 <col:17> 'int' 64
| |-EnumConstantDecl 0x5559133dce00 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5559133dd018 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133dcde0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5559133dcdc0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5559133dce90 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5559133dd030 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133dce70 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5559133dce50 <col:16> 'int' 256
| `-EnumConstantDecl 0x5559133dcf20 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5559133dd048 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559133dcf00 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5559133dcee0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5559133dd258 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5559133dd070 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5559133dd110 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5559133dd3e0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5559133dd318 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5559133dd488 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5559133dd4c8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5559133dd528 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5559133dd5a0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5559133dd9a0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5559133dd618 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5559133dd698 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5559133dd718 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5559133dd790 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5559133dd808 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5559133dd880 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5559133ddac8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5559133ddac8
| `-ParmVarDecl 0x5559133ddbd8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5559133dfcd8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5559133dfcd8
  `-ParmVarDecl 0x5559133dfde8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55591303c080 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55591303e3a0 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55591303e440 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55591303e4a0 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55591303e500 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55591303e5b0 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55591303e8c0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55591303e9d8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55591303ea80 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55591303eae8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55591303eb78 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x555913042ac0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555913042ef8 <col:12>
|-CXXConstructorDecl 0x555913042bc8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555913042cd8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55591303ea80 'data' 'const char *'
| | `-ImplicitCastExpr 0x555913045b60 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x555913045b30 <col:12> 'const char *const' lvalue .data 0x55591303ea80
| |     `-DeclRefExpr 0x555913045b10 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913042cd8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55591303eae8 'length' 'int'
| | `-ImplicitCastExpr 0x555913045bf0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555913045bc0 <col:12> 'const int' lvalue .length 0x55591303eae8
| |     `-DeclRefExpr 0x555913045ba0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913042cd8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55591303eb78 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x555913045c80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x555913045c50 <col:12> 'String::memo_t *const' lvalue .memo 0x55591303eb78
| |     `-DeclRefExpr 0x555913045c30 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913042cd8 '' 'const String::rep_t &'
| `-CompoundStmt 0x555913045cd8 <col:12>
|-CXXConstructorDecl 0x555913042d78 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555913042d78
| `-ParmVarDecl 0x555913042e88 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55591304b8a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x555913057208 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555913057318 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x555913057830 <col:12>
|   |-BinaryOperator 0x555913057648 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x555913057600 <col:12> 'const char *' lvalue ->data 0x55591303ea80
|   | | `-CXXThisExpr 0x5559130575f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555913057630 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5559130575c0 <col:12> 'const char *const' lvalue .data 0x55591303ea80
|   |     `-DeclRefExpr 0x5559130575a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913057318 '' 'const String::rep_t &'
|   |-BinaryOperator 0x555913057710 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5559130576c8 <col:12> 'int' lvalue ->length 0x55591303eae8
|   | | `-CXXThisExpr 0x5559130576b8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5559130576f8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x555913057688 <col:12> 'const int' lvalue .length 0x55591303eae8
|   |     `-DeclRefExpr 0x555913057668 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913057318 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5559130577d8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x555913057790 <col:12> 'String::memo_t *' lvalue ->memo 0x55591303eb78
|   | | `-CXXThisExpr 0x555913057780 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5559130577c0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x555913057750 <col:12> 'String::memo_t *const' lvalue .memo 0x55591303eb78
|   |     `-DeclRefExpr 0x555913057730 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913057318 '' 'const String::rep_t &'
|   `-ReturnStmt 0x555913057820 <col:12>
|     `-UnaryOperator 0x555913057808 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5559130577f8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x555913057388 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555913057388
  `-ParmVarDecl 0x555913057498 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913032980 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555913032a98 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x555913032b28 <col:16, col:22> col:16 public
|-TypedefDecl 0x555913032b68 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x555912df5fd0 'const char *'
|   `-QualType 0x555912df5521 'const char' const
|     `-BuiltinType 0x555912df5520 'char'
|-TypedefDecl 0x555913032bf0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x555913032bc0 'String::const_iterator' sugar
|   |-Typedef 0x555913032b68 'const_iterator'
|   `-PointerType 0x555912df5fd0 'const char *'
|     `-QualType 0x555912df5521 'const char' const
|       `-BuiltinType 0x555912df5520 'char'
|-TypedefDecl 0x555913032d90 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x555913032d00 'int (String::*)() const'
|   |-RecordType 0x555913032a10 'String'
|   | `-CXXRecord 0x555913032980 'String'
|   `-ParenType 0x555913032ca0 'int () const' sugar
|     `-FunctionProtoType 0x555913032c70 'int () const' const cdecl
|       `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913032df8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x555912f4d910 'int64_t' sugar
|   |-Typedef 0x555912e5e390 'int64_t'
|   `-TypedefType 0x555912e37630 '__int64_t' sugar
|     |-Typedef 0x555912e37208 '__int64_t'
|     `-BuiltinType 0x555912df55a0 'long'
|-TypedefDecl 0x555913032e60 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x555912f4d830 'uint64_t' sugar
|   |-Typedef 0x555912e5e530 'uint64_t'
|   `-TypedefType 0x555912e376c0 '__uint64_t' sugar
|     |-Typedef 0x555912e37278 '__uint64_t'
|     `-BuiltinType 0x555912df5640 'unsigned long'
|-TypedefDecl 0x555913032ef0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x555913032ec0 'String::intmax_t' sugar
|   |-Typedef 0x555913032df8 'intmax_t'
|   `-TypedefType 0x555912f4d910 'int64_t' sugar
|     |-Typedef 0x555912e5e390 'int64_t'
|     `-TypedefType 0x555912e37630 '__int64_t' sugar
|       |-Typedef 0x555912e37208 '__int64_t'
|       `-BuiltinType 0x555912df55a0 'long'
|-TypedefDecl 0x555913032f80 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x555913032f50 'String::uintmax_t' sugar
|   |-Typedef 0x555913032e60 'uintmax_t'
|   `-TypedefType 0x555912f4d830 'uint64_t' sugar
|     |-Typedef 0x555912e5e530 'uint64_t'
|     `-TypedefType 0x555912e376c0 '__uint64_t' sugar
|       |-Typedef 0x555912e37278 '__uint64_t'
|       `-BuiltinType 0x555912df5640 'unsigned long'
|-CXXConstructorDecl 0x555913033040 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5559130331e8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x555913033128 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x555913033398 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5559130332d8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5559130334f0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x555913033460 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x555913033770 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5559130335b8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x555913033638 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5559130339c8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x555913033870 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5559130338f0 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x555913033be8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x555913033a98 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x555913033b18 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x555913033e08 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x555913033cb8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x555913033d38 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x555913033f98 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x555913033ed0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x555913034118 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x555913034058 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5559130342a8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5559130341e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x555913034400 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x555913034370 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x555913034588 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5559130344c8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x555913034718 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x555913034650 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5559130348a8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5559130347e0 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x555913034a38 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x555913034970 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x555913034bc8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x555913034b00 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x555913034d58 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x555913034c90 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x555913034e50 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x555913034f78 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5559130350f8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x555913035030 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x555913035248 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5559130351b8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5559130352f0 <col:63> "" ""
|-CXXMethodDecl 0x555913035438 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x555913035378 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x555913035648 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5559130354f8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x555913035578 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x555913035ce8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x555913035b90 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x555913035c10 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x555913035fc8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x555913035da8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x555913035e28 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x555913042590 <col:55> 'int' 10
| `-ParmVarDecl 0x555913035ea0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5559130425b0 <col:76> 'bool' true
|-CXXMethodDecl 0x5559130362a8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x555913036090 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x555913036110 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5559130425c0 <col:56> 'int' 10
| `-ParmVarDecl 0x555913036188 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5559130425e0 <col:77> 'bool' true
|-CXXMethodDecl 0x5559130363b0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x555913036478 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x555913036540 <line:81:5, col:60> col:52 used c_str 'const char *() const'
| |-NoInlineAttr 0x5559130365e0 <col:20>
| `-OptimizeNoneAttr 0x555913036638 <col:30>
|-CXXConversionDecl 0x555913036728 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5559130367f8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5559130368b8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5559130369a8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x555913036a68 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x555913036be8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x555913036b20 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x555913036d38 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x555913036ca8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x555913036e28 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x555913036ee8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x555913037138 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x555913036fa0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x555913037020 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x555913037398 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x555913037200 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x555913037280 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x555913037468 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x555913037678 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x555913037520 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5559130375a0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x555913037898 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x555913037740 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5559130377c0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x555913037a28 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x555913037960 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x555913037fb0 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x555913038128 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x555913038060 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555913038338 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5559130381e8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x555913038268 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x555913038550 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5559130383f8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x555913038470 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5559130386e0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x555913038610 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555913038900 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5559130387a0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x555913038820 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x555913038a50 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5559130389c0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x555913038c28 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x555913038b10 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x555913038b90 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x555913038d78 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x555913038ce8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x555913038f90 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x555913038e30 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x555913038eb0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5559130425f0 <col:39> 'int' 0
|-CXXMethodDecl 0x5559130391b0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x555913039050 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5559130390d0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x555913042610 <col:48> 'int' 0
|-CXXMethodDecl 0x555913039390 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x555913039270 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5559130392f0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x555913042630 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x555913039460 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x555913039520 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5559130395e0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5559130396a0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x555913039760 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x555913039908 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x555913039810 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x555913039a88 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5559130399c0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x555913039c08 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x555913039b48 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x555913039d88 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x555913039cc0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x555913039ed0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x555913039e40 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55591303a290 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55591303a200 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55591303a468 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55591303a350 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55591303a3d0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55591303a648 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55591303a530 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55591303a5b0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55591303a798 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55591303a708 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55591303a9a8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55591303a858 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55591303a8d8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55591303ab08 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55591303aa70 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55591303ac60 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55591303abc8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55591303ad08 <col:57> "" ""
|-CXXMethodDecl 0x55591303ae18 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55591303ad88 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55591303af68 <line:153:5, col:47> col:20 used operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55591303aed8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55591303b0e8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55591303b020 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55591303b1b0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55591303b270 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55591303b330 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55591303b3d0 <col:49> "" ""
|-CXXMethodDecl 0x55591303b460 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55591303b520 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55591303b610 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55591303b6d8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55591303b798 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55591303b858 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55591303b950 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55591303ba18 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55591303bae0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55591303bcb8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55591303bb98 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55591303bc18 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55591303bee0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55591303bd80 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55591303be00 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55591303bff0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55591303c058 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55591303c080 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55591303e3a0 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55591303e440 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55591303e4a0 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55591303e500 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55591303e5b0 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55591303e618 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55591303e858 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55591303e8a8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55591303e838 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55591303e748 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55591303e6f0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55591303e730 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55591303e710 <col:32> 'int' 8
|-CXXRecordDecl 0x55591303e8c0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55591303e9d8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55591303ea80 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55591303eae8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55591303eb78 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x555913042ac0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x555913042ef8 <col:12>
| |-CXXConstructorDecl 0x555913042bc8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555913042cd8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55591303ea80 'data' 'const char *'
| | | `-ImplicitCastExpr 0x555913045b60 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x555913045b30 <col:12> 'const char *const' lvalue .data 0x55591303ea80
| | |     `-DeclRefExpr 0x555913045b10 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913042cd8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55591303eae8 'length' 'int'
| | | `-ImplicitCastExpr 0x555913045bf0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x555913045bc0 <col:12> 'const int' lvalue .length 0x55591303eae8
| | |     `-DeclRefExpr 0x555913045ba0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913042cd8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55591303eb78 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x555913045c80 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x555913045c50 <col:12> 'String::memo_t *const' lvalue .memo 0x55591303eb78
| | |     `-DeclRefExpr 0x555913045c30 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913042cd8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x555913045cd8 <col:12>
| |-CXXConstructorDecl 0x555913042d78 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555913042d78
| | `-ParmVarDecl 0x555913042e88 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55591304b8a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x555913057208 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555913057318 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x555913057830 <col:12>
| |   |-BinaryOperator 0x555913057648 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x555913057600 <col:12> 'const char *' lvalue ->data 0x55591303ea80
| |   | | `-CXXThisExpr 0x5559130575f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555913057630 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5559130575c0 <col:12> 'const char *const' lvalue .data 0x55591303ea80
| |   |     `-DeclRefExpr 0x5559130575a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913057318 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x555913057710 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5559130576c8 <col:12> 'int' lvalue ->length 0x55591303eae8
| |   | | `-CXXThisExpr 0x5559130576b8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5559130576f8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x555913057688 <col:12> 'const int' lvalue .length 0x55591303eae8
| |   |     `-DeclRefExpr 0x555913057668 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913057318 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5559130577d8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x555913057790 <col:12> 'String::memo_t *' lvalue ->memo 0x55591303eb78
| |   | | `-CXXThisExpr 0x555913057780 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5559130577c0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x555913057750 <col:12> 'String::memo_t *const' lvalue .memo 0x55591303eb78
| |   |     `-DeclRefExpr 0x555913057730 <col:12> 'const String::rep_t' lvalue ParmVar 0x555913057318 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x555913057820 <col:12>
| |     `-UnaryOperator 0x555913057808 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5559130577f8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x555913057388 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555913057388
|   `-ParmVarDecl 0x555913057498 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55591303ebf0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55591303ee38 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55591303ec58 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55591303ecd8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55591303ed50 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x555913042a80 <col:79, line:261:5>
|   |-BinaryOperator 0x5559130426f8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x555913042690 <col:2, col:5> 'const char *' lvalue .data 0x55591303ea80
|   | | `-MemberExpr 0x555913042660 <col:2> 'String::rep_t' lvalue ->_r 0x55591303ebf0
|   | |   `-CXXThisExpr 0x555913042650 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5559130426e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5559130426c0 <col:12> 'const char *' lvalue ParmVar 0x55591303ec58 'data' 'const char *'
|   |-BinaryOperator 0x5559130427c0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x555913042758 <col:2, col:5> 'int' lvalue .length 0x55591303eae8
|   | | `-MemberExpr 0x555913042728 <col:2> 'String::rep_t' lvalue ->_r 0x55591303ebf0
|   | |   `-CXXThisExpr 0x555913042718 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5559130427a8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555913042788 <col:14> 'int' lvalue ParmVar 0x55591303ecd8 'length' 'int'
|   `-IfStmt 0x555913042a68 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5559130428e0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5559130428c8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5559130428a8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x555913042888 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x555913042820 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55591303eb78
|     |       | `-MemberExpr 0x5559130427f0 <col:7> 'String::rep_t' lvalue ->_r 0x55591303ebf0
|     |       |   `-CXXThisExpr 0x5559130427e0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x555913042870 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x555913042850 <col:17> 'String::memo_t *' lvalue ParmVar 0x55591303ed50 'memo' 'String::memo_t *'
|     `-CallExpr 0x555913042a40 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x555913042a28 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555913042930 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5559130193f8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x555913042998 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55591303e440
|         `-ImplicitCastExpr 0x555913042980 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555913042960 <col:27> 'String::memo_t *' lvalue ParmVar 0x55591303ed50 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55591303f0e8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55591303ef08 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55591303ef88 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55591303f000 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55591303ebf0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x555913042f08 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x555913043098 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x555913043000 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x555913042f70 <col:2> '<bound member function type>' ->assign_memo 0x55591303ee38
|     | `-ImplicitCastExpr 0x555913043038 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x555913042f60 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x555913043050 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x555913042fa0 <col:14> 'const char *' lvalue ParmVar 0x55591303ef08 'data' 'const char *'
|     |-ImplicitCastExpr 0x555913043068 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x555913042fc0 <col:20> 'int' lvalue ParmVar 0x55591303ef88 'length' 'int'
|     `-ImplicitCastExpr 0x555913043080 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555913042fe0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55591303f000 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55591303f278 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55591303f1b8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5559130432f0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x555913043270 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5559130430c0 <col:2> '<bound member function type>' ->assign_memo 0x55591303ee38
|     | `-CXXThisExpr 0x5559130430b0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5559130432a8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x555913043140 <col:14, col:19> 'const char *' lvalue .data 0x55591303ea80
|     |   `-MemberExpr 0x555913043110 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55591303ebf0
|     |     `-DeclRefExpr 0x5559130430f0 <col:14> 'const String' lvalue ParmVar 0x55591303f1b8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5559130432c0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5559130431c0 <col:25, col:30> 'int' lvalue .length 0x55591303eae8
|     |   `-MemberExpr 0x555913043190 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55591303ebf0
|     |     `-DeclRefExpr 0x555913043170 <col:25> 'const String' lvalue ParmVar 0x55591303f1b8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5559130432d8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x555913043240 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55591303eb78
|         `-MemberExpr 0x555913043210 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55591303ebf0
|           `-DeclRefExpr 0x5559130431f0 <col:38> 'const String' lvalue ParmVar 0x55591303f1b8 'x' 'const String &'
|-CXXMethodDecl 0x55591303f340 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x555913044368 <col:31, line:278:5>
|   `-IfStmt 0x555913044350 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x555913043390 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x555913043378 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x555913043348 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55591303eb78
|     |     `-MemberExpr 0x555913043318 <col:6> 'String::rep_t' lvalue ->_r 0x55591303ebf0
|     |       `-CXXThisExpr 0x555913043308 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x555913044328 <col:15, line:277:2>
|       |-ParenExpr 0x555913043930 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x555913043900 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5559130434a0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x555913043488 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x555913043470 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x555913043430 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55591303e440
|       |   |       `-ImplicitCastExpr 0x555913043418 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5559130433e8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55591303eb78
|       |   |           `-MemberExpr 0x5559130433b8 <col:27> 'String::rep_t' lvalue ->_r 0x55591303ebf0
|       |   |             `-CXXThisExpr 0x5559130433a8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x555913043500 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5559130434e0 <col:54> 'int' 0
|       |   `-CallExpr 0x555913043860 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x555913043848 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5559130437d0 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5559130438a0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5559130435e8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5559130438b8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x555913043698 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5559130438d0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5559130436d0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5559130438e8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5559130437b8 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5559130437a0 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x555913043768 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x555913044248 <line:274:6, line:275:22>
|       | |-CallExpr 0x555913043b40 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x555913043b28 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x555913043aa0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55591301e170 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x555913043a70 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55591303e440
|       | |   `-ImplicitCastExpr 0x555913043a58 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x555913043a28 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55591303eb78
|       | |       `-MemberExpr 0x5559130439f8 <col:40> 'String::rep_t' lvalue ->_r 0x55591303ebf0
|       | |         `-CXXThisExpr 0x5559130439e8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x555913043c40 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x555913043c28 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x555913043b68 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x555913040018 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x555913044230 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x555913043bc8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55591303eb78
|       |       `-MemberExpr 0x555913043b98 <col:15> 'String::rep_t' lvalue ->_r 0x55591303ebf0
|       |         `-CXXThisExpr 0x555913043b88 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x555913044308 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5559130442a0 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55591303eb78
|         | `-MemberExpr 0x555913044270 <col:6> 'String::rep_t' lvalue ->_r 0x55591303ebf0
|         |   `-CXXThisExpr 0x555913044260 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5559130442f0 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5559130442d0 <col:16> 'int' 0
|-CXXMethodDecl 0x55591303f5d8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55591303f3f8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55591303f478 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55591303f4f0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55591303f6b0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55591303f900 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55591303f768 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55591303f7e8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55591303f860 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55591303fae8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55591303f9d0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55591303fa50 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55591303fbe8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x555913044460 <col:41, line:286:5>
|   `-ReturnStmt 0x555913044450 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x555913044420 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5559130443e8 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5559130443d0 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5559130443b0 <col:46> 'int' 1
|-CXXMethodDecl 0x55591303fe88 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55591303fca0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55591303fd20 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55591303fda0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x555913040018 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55591303ff50 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5559130400e8 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5559130402b8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5559130401a0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x555913040220 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x555913041c70 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x555913041db8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x555913041ef8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x555913041f70 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x555913041fe8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x555913042050 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x555913042150 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5559130421a0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555913042130 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x555913042110 <col:22> 'int' 14
|-CXXMethodDecl 0x5559130423b8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5559130421d0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x555913042250 <col:38> col:41 'int'
| `-ParmVarDecl 0x5559130422d0 <col:43> col:46 'int'
|-FriendDecl 0x5559130424c0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x555913042550 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55591348ec80 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55591348ed98 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x55591348ee40 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x55591348eea8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x55591348ef10 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x55591348efc0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x55591348ee40 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x55591348fe40 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x55591348fdf8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x55591348fdc0 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x55591348fda8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55591348fd50 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55591305cdc0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x55591348eea8 'len' 'int'
| | `-IntegerLiteral 0x55591348feb8 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x55591348ef10 'cap' 'int'
| | `-IntegerLiteral 0x55591348ff20 <col:20> 'int' 0
| `-CompoundStmt 0x55591348ffa0 <col:23, line:119:2>
|-CXXConstructorDecl 0x55591348f138 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x55591348f078 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x55591348ffb0 <col:37, line:121:2>
|-CXXConstructorDecl 0x555913492238 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555913492348 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55591348ee40 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x555913493d00 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x555913493cd0 <col:12> 'unsigned char *const' lvalue .s 0x55591348ee40
| |     `-DeclRefExpr 0x555913493cb0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555913492348 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55591348eea8 'len' 'int'
| | `-ImplicitCastExpr 0x555913493d90 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555913493d60 <col:12> 'const int' lvalue .len 0x55591348eea8
| |     `-DeclRefExpr 0x555913493d40 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555913492348 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55591348ef10 'cap' 'int'
| | `-ImplicitCastExpr 0x555913493e20 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555913493df0 <col:12> 'const int' lvalue .cap 0x55591348ef10
| |     `-DeclRefExpr 0x555913493dd0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555913492348 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x555913493e78 <col:12>
|-CXXConstructorDecl 0x5559134923e8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5559134923e8
| `-ParmVarDecl 0x5559134924f8 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x555913494130 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55591348a428 prev 0x5559133e8538 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55591348a520 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x55591348a5b0 <col:21, col:27> col:21 public
|-TypedefDecl 0x55591348a5f0 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x555912df5fd0 'const char *'
|   `-QualType 0x555912df5521 'const char' const
|     `-BuiltinType 0x555912df5520 'char'
|-TypedefDecl 0x55591348a660 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x555912df61a0 'char *'
|   `-BuiltinType 0x555912df5520 'char'
|-TypedefDecl 0x55591348a7a0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x55591348a710 'int (StringAccum::*)() const'
|   |-RecordType 0x555913032960 'StringAccum'
|   | `-CXXRecord 0x55591348a428 'StringAccum'
|   `-ParenType 0x555913032ca0 'int () const' sugar
|     `-FunctionProtoType 0x555913032c70 'int () const' const cdecl
|       `-BuiltinType 0x555912df5580 'int'
|-CXXConstructorDecl 0x55591348a860 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x55591348a9b0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x55591348a920 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x55591348ab00 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x55591348aa70 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x55591348aca8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x55591348abe8 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x55591348ae58 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x55591348ad98 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x55591348af50 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x55591348b108 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x55591348b040 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x55591348b288 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x55591348b1c0 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x55591348b380 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55591348b448 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x55591348b510 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55591348b5d8 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x55591348b6a0 <line:54:5, col:23> col:17 used c_str 'const char *()'
|-CXXConversionDecl 0x55591348b808 <line:56:5, col:45> col:12 used operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55591348b8d8 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55591348b998 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55591348baa8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55591348bbb8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55591348bc78 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55591348bd38 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55591348be80 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55591348bdf0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55591348c010 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x55591348bf40 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x55591348c0d8 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55591348c1d0 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x55591348c290 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55591348c358 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x55591348c418 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55591348c4d8 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55591348c598 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55591348c6e8 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x55591348c650 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x55591348c838 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x55591348c7a8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x55591348c990 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x55591348c8f8 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x55591348cae0 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x55591348ca50 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x55591348cd00 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x55591348cba0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x55591348cc20 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x55591348fc78 <col:53> 'int' 0
|-CXXMethodDecl 0x55591348ce58 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x55591348cdc8 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x55591348fc98 <col:34> 'int' 1
|-CXXMethodDecl 0x55591348cfa0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x55591348cf10 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55591348d0f0 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x55591348d060 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x55591348d240 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x55591348d1b0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x55591348d390 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55591348d300 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55591348d568 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55591348d450 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55591348d4d0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55591348d748 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55591348d630 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x55591348d6b0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x55591348d928 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55591348d810 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55591348d890 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55591348db08 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55591348d9f0 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x55591348da70 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x55591348dce8 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55591348dbd0 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55591348dc50 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55591348e048 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x55591348de30 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55591348deb0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55591348fcb8 <col:56> 'int' 10
| `-ParmVarDecl 0x55591348df28 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55591348fcd8 <col:77> 'bool' true
|-CXXMethodDecl 0x55591348e3a8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x55591348e190 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55591348e210 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x55591348fce8 <col:57> 'int' 10
| `-ParmVarDecl 0x55591348e288 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55591348fd08 <col:78> 'bool' true
|-CXXMethodDecl 0x55591348e5d0 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x55591348e478 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x55591348e4f8 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x55591348e6c8 <line:98:5, col:24> col:12 take_string 'String ()'
|-CXXMethodDecl 0x55591348e838 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x55591348e778 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x55591348e988 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x55591348e8f8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x55591348ea30 <col:51> "" ""
|-AccessSpecDecl 0x55591348eaa0 <line:106:3, col:10> col:3 private
|-EnumDecl 0x55591348eac8 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x55591348ec18 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x55591348ec68 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55591348ebf8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x55591348ebc8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55591303e858 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x55591348ec80 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55591348ed98 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x55591348ee40 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x55591348eea8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x55591348ef10 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x55591348efc0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x55591348ee40 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x55591348fe40 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x55591348fdf8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x55591348fdc0 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x55591348fda8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x55591348fd50 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55591305cdc0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x55591348eea8 'len' 'int'
| | | `-IntegerLiteral 0x55591348feb8 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x55591348ef10 'cap' 'int'
| | | `-IntegerLiteral 0x55591348ff20 <col:20> 'int' 0
| | `-CompoundStmt 0x55591348ffa0 <col:23, line:119:2>
| |-CXXConstructorDecl 0x55591348f138 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x55591348f078 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x55591348ffb0 <col:37, line:121:2>
| |-CXXConstructorDecl 0x555913492238 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555913492348 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55591348ee40 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x555913493d00 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x555913493cd0 <col:12> 'unsigned char *const' lvalue .s 0x55591348ee40
| | |     `-DeclRefExpr 0x555913493cb0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555913492348 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55591348eea8 'len' 'int'
| | | `-ImplicitCastExpr 0x555913493d90 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x555913493d60 <col:12> 'const int' lvalue .len 0x55591348eea8
| | |     `-DeclRefExpr 0x555913493d40 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555913492348 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55591348ef10 'cap' 'int'
| | | `-ImplicitCastExpr 0x555913493e20 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x555913493df0 <col:12> 'const int' lvalue .cap 0x55591348ef10
| | |     `-DeclRefExpr 0x555913493dd0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555913492348 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x555913493e78 <col:12>
| |-CXXConstructorDecl 0x5559134923e8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5559134923e8
| | `-ParmVarDecl 0x5559134924f8 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x555913494130 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x55591348f210 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x55591348f310 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x55591348f278 <col:16> col:19 'int'
|-CXXMethodDecl 0x55591348f4f0 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x55591348f3d0 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x55591348f450 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x55591348f6d0 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x55591348f5b8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55591348f638 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55591348f828 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x55591348f798 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x55591348f978 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x55591348f8e8 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x55591348fc38 <line:132:5, col:70> col:25
  `-FunctionDecl 0x55591348fb78 parent 0x555912df5488 <col:5, col:70> col:25 used operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x55591348fa30 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x55591348faa8 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct StaticNameDB::Entry
         0 |   const char * name
         8 |   uint32_t value
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class NameDB
         0 |   (NameDB vtable pointer)
         8 |   uint32_t _type
        16 |   class String _context
        16 |     struct String::rep_t _r
        16 |       const char * data
        24 |       int length
        32 |       struct String::memo_t * memo
        40 |   size_t _value_size
        48 |   class NameDB * _context_parent
        56 |   class NameDB * _context_sibling
        64 |   class NameDB * _context_child
        72 |   class NameInfo * _installed
           | [sizeof=80, dsize=80, align=8,
           |  nvsize=80, nvalign=8]

*** Dumping AST Record Layout
         0 | class StaticNameDB
         0 |   class NameDB (primary base)
         0 |     (NameDB vtable pointer)
         8 |     uint32_t _type
        16 |     class String _context
        16 |       struct String::rep_t _r
        16 |         const char * data
        24 |         int length
        32 |         struct String::memo_t * memo
        40 |     size_t _value_size
        48 |     class NameDB * _context_parent
        56 |     class NameDB * _context_sibling
        64 |     class NameDB * _context_child
        72 |     class NameInfo * _installed
        80 |   const struct StaticNameDB::Entry * _entries
        88 |   size_t _nentries
           | [sizeof=96, dsize=96, align=8,
           |  nvsize=96, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class NameDB *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class NameInfo
         0 |   class Vector<class NameDB *> _namedb_roots
         0 |     class vector_memory<class sized_array_memory<8> > vm_
         0 |       vector_memory<class sized_array_memory<8> >::type * l_
         8 |       vector_memory::size_type n_
        12 |       vector_memory::size_type capacity_
        16 |   class Vector<class NameDB *> _namedbs
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5559134b2ab0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x5559134b2c88 prev 0x5559134b2ab0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5559134b2d18 <col:46, col:52> col:46 public
|-TypedefDecl 0x5559134b2d40 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x5559134b4910 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x5559134b48c0 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x5559134b31f0 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x5559134b30f0 'type'
|     `-TemplateSpecializationType 0x5559134b3080 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5559134b2f60 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x5559134b2f40 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5559134b2f20 <col:24> 'unsigned long' 8
|       `-RecordType 0x5559134b3060 'char_array<8>'
|         `-ClassTemplateSpecialization 0x5559134b2f80 'char_array'
|-TypedefDecl 0x5559134b49c8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x5559134b4990 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x5559134b4970 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x5559134b4910 'type'
|     `-ElaboratedType 0x5559134b48c0 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x5559134b31f0 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x5559134b30f0 'type'
|         `-TemplateSpecializationType 0x5559134b3080 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5559134b2f60 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x5559134b2f40 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5559134b2f20 <col:24> 'unsigned long' 8
|           `-RecordType 0x5559134b3060 'char_array<8>'
|             `-ClassTemplateSpecialization 0x5559134b2f80 'char_array'
|-CXXMethodDecl 0x5559134b4b48 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x5559134b4a58 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x5559134b4c38 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5559134b4d18 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5559134b4d18
|-CXXMethodDecl 0x5559134b4fe8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5559134b4ef0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x5559134b5228 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5559134b50a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5559134b5118 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5559134b53f8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5559134b52e8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5559134b5360 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5559134b5558 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5559134b5628 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5559134b5878 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5559134b56e8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5559134b5760 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5559134b5ad8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x5559134b5948 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5559134b59c0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5559134b5c98 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5559134b5ba8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5559134b5e58 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5559134b5d60 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5559134b5f10 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5559134b5fc0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5559134b61f8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5559134b6070 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5559134b60e8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5559134b6498 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5559134b63a0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x5559134b6560 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x5559134b65b0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5559134b6600 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5559134b0640 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'NameDB *'
|-CXXRecordDecl 0x5559134b0848 prev 0x5559134b0640 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5559134b2a20 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<NameDB *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5559134b29d0 'typename array_memory<NameDB *>::type' sugar
|   `-TypedefType 0x5559134b29b0 'conditional<true, sized_array_memory<8>, typed_array_memory<NameDB *> >::type' sugar
|     |-Typedef 0x5559134b2860 'type'
|     `-SubstTemplateTypeParmType 0x5559134b2680 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x555913100590 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913100538 'T'
|       `-RecordType 0x5559134b1140 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5559134b1058 'sized_array_memory'
|-FieldDecl 0x5559134b6650 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<NameDB *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5559134b66a0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5559134b66d8 <line:118:5, col:15> col:15 value_type 'NameDB *':'NameDB *'
| `-SubstTemplateTypeParmType 0x5559134b08e0 'NameDB *' sugar
|   |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555913337d78 'T'
|   `-PointerType 0x5559134ae7d0 'NameDB *'
|     `-RecordType 0x5559134acf40 'NameDB'
|       `-CXXRecord 0x5559134bd528 'NameDB'
|-TypedefDecl 0x5559134b6798 <line:119:5, col:16> col:16 reference 'NameDB *&'
| `-LValueReferenceType 0x5559134b6760 'NameDB *&'
|   `-SubstTemplateTypeParmType 0x5559134b08e0 'NameDB *' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-PointerType 0x5559134ae7d0 'NameDB *'
|       `-RecordType 0x5559134acf40 'NameDB'
|         `-CXXRecord 0x5559134bd528 'NameDB'
|-TypedefDecl 0x5559134b6858 <line:120:5, col:22> col:22 const_reference 'NameDB *const &'
| `-LValueReferenceType 0x5559134b6820 'NameDB *const &'
|   `-QualType 0x5559134b08e1 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x5559134b08e0 'NameDB *' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-PointerType 0x5559134ae7d0 'NameDB *'
|         `-RecordType 0x5559134acf40 'NameDB'
|           `-CXXRecord 0x5559134bd528 'NameDB'
|-TypedefDecl 0x5559134b6918 <line:121:5, col:16> col:16 pointer 'NameDB **'
| `-PointerType 0x5559134b68e0 'NameDB **'
|   `-SubstTemplateTypeParmType 0x5559134b08e0 'NameDB *' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-PointerType 0x5559134ae7d0 'NameDB *'
|       `-RecordType 0x5559134acf40 'NameDB'
|         `-CXXRecord 0x5559134bd528 'NameDB'
|-TypedefDecl 0x5559134b69d8 <line:122:5, col:22> col:22 const_pointer 'NameDB *const *'
| `-PointerType 0x5559134b69a0 'NameDB *const *'
|   `-QualType 0x5559134b08e1 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x5559134b08e0 'NameDB *' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-PointerType 0x5559134ae7d0 'NameDB *'
|         `-RecordType 0x5559134acf40 'NameDB'
|           `-CXXRecord 0x5559134bd528 'NameDB'
|-TypedefDecl 0x5559134b75b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<NameDB *>::type':'NameDB *'
| `-ElaboratedType 0x5559134b7560 'typename fast_argument<NameDB *>::type' sugar
|   `-TypedefType 0x5559134b7540 'fast_argument<NameDB *, false>::type' sugar
|     |-Typedef 0x5559134b74d0 'type'
|     `-SubstTemplateTypeParmType 0x5559134b7290 'NameDB *' sugar
|       |-TemplateTypeParmType 0x55591310a0d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55591310a080 'T'
|       `-PointerType 0x5559134ae7d0 'NameDB *'
|         `-RecordType 0x5559134acf40 'NameDB'
|           `-CXXRecord 0x5559134bd528 'NameDB'
|-TypedefDecl 0x5559134b7618 <line:126:5, col:22> col:22 const_access_type 'NameDB *const &'
| `-LValueReferenceType 0x5559134b6820 'NameDB *const &'
|   `-QualType 0x5559134b08e1 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x5559134b08e0 'NameDB *' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-PointerType 0x5559134ae7d0 'NameDB *'
|         `-RecordType 0x5559134acf40 'NameDB'
|           `-CXXRecord 0x5559134bd528 'NameDB'
|-TypedefDecl 0x5559134b7670 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x5559134b76d8 <line:130:5, col:16> col:16 iterator 'NameDB **'
| `-PointerType 0x5559134b68e0 'NameDB **'
|   `-SubstTemplateTypeParmType 0x5559134b08e0 'NameDB *' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-PointerType 0x5559134ae7d0 'NameDB *'
|       `-RecordType 0x5559134acf40 'NameDB'
|         `-CXXRecord 0x5559134bd528 'NameDB'
|-TypedefDecl 0x5559134b7740 <line:131:5, col:22> col:22 const_iterator 'NameDB *const *'
| `-PointerType 0x5559134b69a0 'NameDB *const *'
|   `-QualType 0x5559134b08e1 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x5559134b08e0 'NameDB *' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-PointerType 0x5559134ae7d0 'NameDB *'
|         `-RecordType 0x5559134acf40 'NameDB'
|           `-CXXRecord 0x5559134bd528 'NameDB'
|-EnumDecl 0x5559134b7798 <line:134:5> col:5
| `-EnumConstantDecl 0x5559134b7890 <col:12, col:40> col:12 RESERVE_GROW 'Vector<NameDB *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5559134b7870 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555913338e08 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555913338de0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555913338dc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5559134b7918 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5559134b7ba8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x5559134b79d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5559134b7a70 <col:41, col:61> col:61 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXConstructorDecl 0x5559134b7e68 <line:139:5, col:37> col:12 Vector 'void (const Vector<NameDB *> &)' inline
| `-ParmVarDecl 0x5559134b7d50 <col:19, col:36> col:36 x 'const Vector<NameDB *> &'
|-CXXConstructorDecl 0x5559134b8128 <line:141:5, col:32> col:12 Vector 'void (Vector<NameDB *> &&)' inline
| `-ParmVarDecl 0x5559134b8010 <col:19, col:31> col:31 x 'Vector<NameDB *> &&'
|-CXXMethodDecl 0x5559134b8470 <line:144:5, col:51> col:23 operator= 'Vector<NameDB *> &(const Vector<NameDB *> &)' inline
| `-ParmVarDecl 0x5559134b8350 <col:33, col:50> col:50 x 'const Vector<NameDB *> &'
|-CXXMethodDecl 0x5559134b8780 <line:146:5, col:46> col:23 operator= 'Vector<NameDB *> &(Vector<NameDB *> &&)' inline
| `-ParmVarDecl 0x5559134b8660 <col:33, col:45> col:45 x 'Vector<NameDB *> &&'
|-CXXMethodDecl 0x5559134b8a70 <line:148:5, col:70> col:23 assign 'Vector<NameDB *> &(Vector::size_type, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x5559134b88b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5559134b8930 <col:43, col:69> col:63 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x5559134b8bc8 <line:150:5, col:55> col:49 begin 'Vector<NameDB *>::iterator ()'
| |-NoInlineAttr 0x5559134b8ca8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559134b8d00 <col:30> Inherited
|-CXXMethodDecl 0x5559134b8d48 <line:151:5, col:53> col:49 end 'Vector<NameDB *>::iterator ()'
| |-NoInlineAttr 0x5559134b8df8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559134b8e50 <col:30> Inherited
|-CXXMethodDecl 0x5559134b8f18 <line:152:5, col:63> col:55 begin 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x5559134b8fc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559134b9020 <col:30> Inherited
|-CXXMethodDecl 0x5559134b9068 <line:153:5, col:61> col:55 end 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x5559134b9118 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559134b9170 <col:30> Inherited
|-CXXMethodDecl 0x5559134b91b8 <line:154:5, col:64> col:55 cbegin 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x5559134b9268 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559134b92c0 <col:30> Inherited
|-CXXMethodDecl 0x5559134b9308 <line:155:5, col:62> col:55 cend 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x5559134b93b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559134b9410 <col:30> Inherited
|-CXXMethodDecl 0x5559134b9438 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5559134b94e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5559134b9598 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5559134b9758 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x5559134b9648 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5559134b96c0 <col:37, col:63> col:57 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x5559134b98a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5559134b9818 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559134b9a58 <line:163:5, col:65> col:43 operator[] 'NameDB *&(Vector::size_type)'
| |-ParmVarDecl 0x5559134b9960 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5559134b9b10 <col:20>
| `-OptimizeNoneAttr 0x5559134b9b68 <col:30>
|-CXXMethodDecl 0x5559134b9c88 <line:164:5, col:73> col:49 operator[] 'NameDB *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5559134b9b90 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5559134b9d40 <col:20>
| `-OptimizeNoneAttr 0x5559134b9d98 <col:30>
|-CXXMethodDecl 0x5559134b9e50 <line:165:5, col:29> col:15 at 'NameDB *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5559134b9dc0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559134b9f98 <line:166:5, col:37> col:21 at 'NameDB *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5559134b9f08 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559134ba0c8 <line:167:5, col:21> col:15 front 'NameDB *&()' inline
|-CXXMethodDecl 0x5559134ba1f8 <line:168:5, col:29> col:21 front 'NameDB *const &() const' inline
|-CXXMethodDecl 0x5559134ba2c8 <line:169:5, col:20> col:15 back 'NameDB *&()' inline
|-CXXMethodDecl 0x5559134bac50 <line:170:5, col:28> col:21 back 'NameDB *const &() const' inline
|-CXXMethodDecl 0x5559134bad90 <line:172:5, col:39> col:15 unchecked_at 'NameDB *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5559134bad00 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559134baed8 <line:173:5, col:47> col:21 unchecked_at 'NameDB *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5559134bae48 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559134bb020 <line:174:5, col:59> col:15 at_u 'NameDB *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5559134baf90 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5559134bb0d8 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5559134bb1d8 <line:175:5, col:71> col:21 at_u 'NameDB *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5559134bb148 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5559134bb290 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5559134bb348 <line:177:5, col:20> col:15 data 'NameDB **()' inline
|-CXXMethodDecl 0x5559134bb448 <line:178:5, col:28> col:21 data 'NameDB *const *() const' inline
|-CXXMethodDecl 0x5559134bb5c8 <line:180:5, col:48> col:17 push_back 'void (Vector<NameDB *>::value_argument_type)' inline
| `-ParmVarDecl 0x5559134bb508 <col:27, col:47> col:47 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-FunctionTemplateDecl 0x5559134bbd88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5559134bb680 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<NameDB *>':'fast_argument<NameDB *, false>'
| `-CXXMethodDecl 0x5559134bbce8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (NameDB *&&)' inline
|   `-ParmVarDecl 0x5559134bbbe8 <col:58, col:62> col:62 v 'NameDB *&&'
|-CXXMethodDecl 0x5559134bbe68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5559134bbfb8 <line:186:5, col:49> col:17 push_front 'void (Vector<NameDB *>::value_argument_type)' inline
| `-ParmVarDecl 0x5559134bbf28 <col:28, col:48> col:48 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x5559134bc070 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5559134bc2b8 <line:189:5, col:62> col:21 insert 'Vector<NameDB *>::iterator (Vector<NameDB *>::iterator, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x5559134bc130 <col:28, col:37> col:37 it 'Vector<NameDB *>::iterator':'NameDB **'
| `-ParmVarDecl 0x5559134bc1a8 <col:41, col:61> col:61 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x5559134bc478 <line:190:5, col:38> col:21 erase 'Vector<NameDB *>::iterator (Vector<NameDB *>::iterator)' inline
| `-ParmVarDecl 0x5559134bc388 <col:27, col:36> col:36 it 'Vector<NameDB *>::iterator':'NameDB **'
|-CXXMethodDecl 0x5559134bc6c8 <line:191:5, col:49> col:21 erase 'Vector<NameDB *>::iterator (Vector<NameDB *>::iterator, Vector<NameDB *>::iterator)' inline
| |-ParmVarDecl 0x5559134bc540 <col:27, col:36> col:36 a 'Vector<NameDB *>::iterator':'NameDB **'
| `-ParmVarDecl 0x5559134bc5b8 <col:39, col:48> col:48 b 'Vector<NameDB *>::iterator':'NameDB **'
|-CXXMethodDecl 0x5559134bc788 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5559134bc9e8 <line:195:5, col:34> col:17 swap 'void (Vector<NameDB *> &)' inline
| `-ParmVarDecl 0x5559134bc8f0 <col:22, col:33> col:33 x 'Vector<NameDB *> &'
`-CXXDestructorDecl 0x5559134bcab8 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5559134bcab8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559134acff0 <../dummy_inc/click/nameinfo.hh:11:1, line:243:1> line:11:7 referenced class NameInfo definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5559134ad108 <col:1, col:7> col:7 implicit referenced class NameInfo
|-AccessSpecDecl 0x5559134ad198 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5559134ad220 <line:16:5, col:14> col:5 NameInfo 'void ()'
|-CXXDestructorDecl 0x5559134ad310 <line:23:5, col:15> col:5 ~NameInfo 'void ()' noexcept-unevaluated 0x5559134ad310
|-CXXMethodDecl 0x5559134ad410 <line:29:5, col:35> col:17 static_initialize 'void ()' static
|-CXXMethodDecl 0x5559134ad4d0 <line:35:5, col:32> col:17 static_cleanup 'void ()' static
|-EnumDecl 0x5559134ad570 <line:38:5, line:63:5> line:38:10 DBType
| |-EnumConstantDecl 0x5559134ad670 <line:39:2, col:11> col:2 T_NONE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae3b0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ad650 <col:11> 'int' Int: 0
| |     `-IntegerLiteral 0x5559134ad630 <col:11> 'int' 0
| |-EnumConstantDecl 0x5559134ad700 <line:40:2, col:19> col:2 T_SCHEDULEINFO 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae3c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ad6e0 <col:19> 'int' Int: 1
| |     `-IntegerLiteral 0x5559134ad6c0 <col:19> 'int' 1
| |-EnumConstantDecl 0x5559134ad790 <line:41:2, col:17> col:2 T_ANNOTATION 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae3e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ad770 <col:17> 'int' Int: 2
| |     `-IntegerLiteral 0x5559134ad750 <col:17> 'int' 2
| |-EnumConstantDecl 0x5559134ad820 <line:42:2, col:18> col:2 T_SCRIPT_INSN 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae3f8 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ad800 <col:18> 'int' Int: 3
| |     `-IntegerLiteral 0x5559134ad7e0 <col:18> 'int' 3
| |-EnumConstantDecl 0x5559134ad8b0 <line:43:2, col:12> col:2 T_SIGNO 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae410 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ad890 <col:12> 'int' Int: 4
| |     `-IntegerLiteral 0x5559134ad870 <col:12> 'int' 4
| |-EnumConstantDecl 0x5559134ad940 <line:44:2, col:15> col:2 T_SPINLOCK 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae428 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ad920 <col:15> 'int' Int: 5
| |     `-IntegerLiteral 0x5559134ad900 <col:15> 'int' 5
| |-EnumConstantDecl 0x5559134ad9d0 <line:45:2, col:20> col:2 T_ETHERNET_ADDR 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae440 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ad9b0 <col:20> 'int' Int: 16777217
| |     `-IntegerLiteral 0x5559134ad990 <col:20> 'int' 16777217
| |-EnumConstantDecl 0x5559134ada60 <line:46:2, col:14> col:2 T_IP_ADDR 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae458 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ada40 <col:14> 'int' Int: 67108865
| |     `-IntegerLiteral 0x5559134ada20 <col:14> 'int' 67108865
| |-EnumConstantDecl 0x5559134adaf0 <line:47:2, col:16> col:2 T_IP_PREFIX 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae470 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134adad0 <col:16> 'int' Int: 67108866
| |     `-IntegerLiteral 0x5559134adab0 <col:16> 'int' 67108866
| |-EnumConstantDecl 0x5559134adb80 <line:48:2, col:15> col:2 referenced T_IP_PROTO 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae488 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134adb60 <col:15> 'int' Int: 67108867
| |     `-IntegerLiteral 0x5559134adb40 <col:15> 'int' 67108867
| |-EnumConstantDecl 0x5559134adc10 <line:49:2, col:20> col:2 referenced T_IPFILTER_TYPE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae4a0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134adbf0 <col:20> 'int' Int: 67108868
| |     `-IntegerLiteral 0x5559134adbd0 <col:20> 'int' 67108868
| |-EnumConstantDecl 0x5559134adca0 <line:50:2, col:14> col:2 referenced T_TCP_OPT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae4b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134adc80 <col:14> 'int' Int: 67108869
| |     `-IntegerLiteral 0x5559134adc60 <col:14> 'int' 67108869
| |-EnumConstantDecl 0x5559134add30 <line:51:2, col:25> col:2 T_IPREWRITER_PATTERN 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae4d0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134add10 <col:25> 'int' Int: 67108870
| |     `-IntegerLiteral 0x5559134adcf0 <col:25> 'int' 67108870
| |-EnumConstantDecl 0x5559134addc0 <line:52:2, col:16> col:2 referenced T_ICMP_TYPE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae4e8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134adda0 <col:16> 'int' Int: 67174400
| |     `-IntegerLiteral 0x5559134add80 <col:16> 'int' 67174400
| |-EnumConstantDecl 0x5559134ade50 <line:53:2, col:16> col:2 T_ICMP_CODE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae500 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ade30 <col:16> 'int' Int: 67174656
| |     `-IntegerLiteral 0x5559134ade10 <col:16> 'int' 67174656
| |-EnumConstantDecl 0x5559134adee0 <line:54:2, col:14> col:2 T_IP_PORT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae518 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134adec0 <col:14> 'int' Int: 67239936
| |     `-IntegerLiteral 0x5559134adea0 <col:14> 'int' 67239936
| |-EnumConstantDecl 0x5559134adf70 <line:55:2, col:15> col:2 referenced T_TCP_PORT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae530 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134adf50 <col:15> 'int' Int: 67239942
| |     `-IntegerLiteral 0x5559134adf30 <col:15> 'int' 67239942
| |-EnumConstantDecl 0x5559134ae000 <line:56:2, col:15> col:2 referenced T_UDP_PORT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae548 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134adfe0 <col:15> 'int' Int: 67239953
| |     `-IntegerLiteral 0x5559134adfc0 <col:15> 'int' 67239953
| |-EnumConstantDecl 0x5559134ae090 <line:57:2, col:19> col:2 T_IP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae560 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ae070 <col:19> 'int' Int: 67305472
| |     `-IntegerLiteral 0x5559134ae050 <col:19> 'int' 67305472
| |-EnumConstantDecl 0x5559134ae120 <line:58:2, col:21> col:2 T_ICMP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae578 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ae100 <col:21> 'int' Int: 67305473
| |     `-IntegerLiteral 0x5559134ae0e0 <col:21> 'int' 67305473
| |-EnumConstantDecl 0x5559134ae1b0 <line:59:2, col:20> col:2 T_TCP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae590 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ae190 <col:20> 'int' Int: 67305478
| |     `-IntegerLiteral 0x5559134ae170 <col:20> 'int' 67305478
| |-EnumConstantDecl 0x5559134ae240 <line:60:2, col:20> col:2 T_UDP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae5a8 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ae220 <col:20> 'int' Int: 67305489
| |     `-IntegerLiteral 0x5559134ae200 <col:20> 'int' 67305489
| |-EnumConstantDecl 0x5559134ae2d0 <line:61:2, col:15> col:2 T_IP6_ADDR 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x5559134ae5c0 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134ae2b0 <col:15> 'int' Int: 100663297
| |     `-IntegerLiteral 0x5559134ae290 <col:15> 'int' 100663297
| `-EnumConstantDecl 0x5559134ae360 <line:62:2, col:17> col:2 T_IP6_PREFIX 'NameInfo::DBType'
|   `-ImplicitCastExpr 0x5559134ae5d8 <col:17> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559134ae340 <col:17> 'int' Int: 100663298
|       `-IntegerLiteral 0x5559134ae320 <col:17> 'int' 100663298
|-CXXMethodDecl 0x5559134ae8d8 <line:85:5, line:86:35> line:85:20 used getdb 'NameDB *(uint32_t, const Element *, size_t, bool)' static
| |-ParmVarDecl 0x5559134ae600 <col:26, col:35> col:35 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134ae678 <col:41, col:56> col:56 context 'const Element *'
| |-ParmVarDecl 0x5559134ae6f0 <line:86:5, col:12> col:12 value_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x5559134ae768 <col:24, col:29> col:29 create 'bool'
|-CXXMethodDecl 0x5559134aeaf8 <line:104:5, col:61> col:17 used installdb 'void (NameDB *, const Element *)' static
| |-ParmVarDecl 0x5559134ae9a8 <col:27, col:35> col:35 db 'NameDB *'
| `-ParmVarDecl 0x5559134aea20 <col:39, col:54> col:54 context 'const Element *'
|-CXXMethodDecl 0x5559134aec78 <line:112:5, col:39> col:17 used uninstalldb 'void (NameDB *)' static
| `-ParmVarDecl 0x5559134aebb8 <col:29, col:37> col:37 db 'NameDB *'
|-CXXMethodDecl 0x5559134af068 <line:127:5, line:128:65> line:127:17 used query 'bool (uint32_t, const Element *, const String &, void *, size_t)' static
| |-ParmVarDecl 0x5559134aed30 <col:23, col:32> col:32 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134aeda8 <col:38, col:53> col:53 context 'const Element *'
| |-ParmVarDecl 0x5559134aee20 <line:128:9, col:23> col:23 name 'const String &'
| |-ParmVarDecl 0x5559134aeea0 <col:29, col:35> col:35 value_store 'void *'
| `-ParmVarDecl 0x5559134aef18 <col:48, col:55> col:55 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x5559134af3e8 <line:147:5, line:148:46> line:147:17 query_int 'bool (uint32_t, const Element *, const String &, int32_t *)' static
| |-ParmVarDecl 0x5559134af140 <col:27, col:36> col:36 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134af1b8 <col:42, col:57> col:57 context 'const Element *'
| |-ParmVarDecl 0x5559134af230 <line:148:6, col:20> col:20 name 'const String &'
| `-ParmVarDecl 0x5559134af2a8 <col:26, col:35> col:35 value_store 'int32_t *'
|-CXXMethodDecl 0x5559134af768 <line:151:5, line:152:47> line:151:17 query_int 'bool (uint32_t, const Element *, const String &, uint32_t *)' static
| |-ParmVarDecl 0x5559134af4b8 <col:27, col:36> col:36 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134af530 <col:42, col:57> col:57 context 'const Element *'
| |-ParmVarDecl 0x5559134af5a8 <line:152:6, col:20> col:20 name 'const String &'
| `-ParmVarDecl 0x5559134af620 <col:26, col:36> col:36 value_store 'uint32_t *'
|-CXXMethodDecl 0x5559134afae8 <line:167:5, line:168:43> line:167:19 used revquery 'String (uint32_t, const Element *, const void *, size_t)' static
| |-ParmVarDecl 0x5559134af838 <col:28, col:37> col:37 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134af8b0 <col:43, col:58> col:58 context 'const Element *'
| |-ParmVarDecl 0x5559134af930 <line:168:7, col:19> col:19 value 'const void *'
| `-ParmVarDecl 0x5559134af9a8 <col:26, col:33> col:33 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x5559134afdc8 <line:182:5, line:183:24> line:182:26 revquery_int 'String (uint32_t, const Element *, int32_t)' static inline
| |-ParmVarDecl 0x5559134afbb8 <col:39, col:48> col:48 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134afc30 <col:54, col:69> col:69 context 'const Element *'
| `-ParmVarDecl 0x5559134afca8 <line:183:11, col:19> col:19 value 'int32_t':'int'
|-CXXMethodDecl 0x5559134b01c8 <line:202:5, line:203:66> line:202:24 define 'bool (uint32_t, const Element *, const String &, const void *, size_t)' static inline
| |-ParmVarDecl 0x5559134afe90 <col:31, col:40> col:40 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134aff08 <col:46, col:61> col:61 context 'const Element *'
| |-ParmVarDecl 0x5559134aff80 <line:203:10, col:24> col:24 name 'const String &'
| |-ParmVarDecl 0x5559134b0000 <col:30, col:42> col:42 value 'const void *'
| `-ParmVarDecl 0x5559134b0078 <col:49, col:56> col:56 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x5559134b0548 <line:220:5, line:221:40> line:220:24 define_int 'bool (uint32_t, const Element *, const String &, int32_t)' static inline
| |-ParmVarDecl 0x5559134b02a0 <col:35, col:44> col:44 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134b0318 <col:50, col:65> col:65 context 'const Element *'
| |-ParmVarDecl 0x5559134b0390 <line:221:7, col:21> col:21 name 'const String &'
| `-ParmVarDecl 0x5559134b0408 <col:27, col:35> col:35 value 'int32_t':'int'
|-AccessSpecDecl 0x5559134b0608 <line:230:3, col:10> col:3 private
|-FieldDecl 0x5559134bcba0 <line:232:5, col:22> col:22 _namedb_roots 'Vector<NameDB *>':'Vector<NameDB *>'
|-FieldDecl 0x5559134bcca0 <line:233:5, col:22> col:22 _namedbs 'Vector<NameDB *>':'Vector<NameDB *>'
|-CXXMethodDecl 0x5559134bcd38 <line:235:5, col:73> col:20 install_dynamic_sentinel 'NameDB *()' inline
| `-CompoundStmt 0x5559134bd510 <col:47, col:73>
|   `-ReturnStmt 0x5559134bd500 <col:49, col:67>
|     `-CStyleCastExpr 0x5559134bd4d8 <col:56, col:67> 'NameDB *' <BitCast>
|       `-CXXThisExpr 0x5559134bd4b8 <col:67> 'NameInfo *' this
|-CXXMethodDecl 0x5559134bd098 <line:236:5, col:87> col:13 namedb 'NameDB *(uint32_t, size_t, const String &, NameDB *)'
| |-ParmVarDecl 0x5559134bcde8 <col:20, col:29> col:29 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134bce60 <col:35, col:42> col:42 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5559134bced8 <col:48, col:62> col:62 prefix 'const String &'
| `-ParmVarDecl 0x5559134bcf50 <col:70, col:78> col:78 installer 'NameDB *'
|-CXXConstructorDecl 0x5559134bd188 <line:11:7> col:7 implicit NameInfo 'void (const NameInfo &)' inline default noexcept-unevaluated 0x5559134bd188
| `-ParmVarDecl 0x5559134bd298 <col:7> col:7 'const NameInfo &'
`-CXXMethodDecl 0x5559134bd338 <col:7> col:7 implicit operator= 'NameInfo &(const NameInfo &)' inline default noexcept-unevaluated 0x5559134bd338
  `-ParmVarDecl 0x5559134bd448 <col:7> col:7 'const NameInfo &'

Layout: <CGRecordLayout
  LLVMType:%class.NameInfo = type { %class.Vector, %class.Vector }
  NonVirtualBaseLLVMType:%class.NameInfo = type { %class.Vector, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559134bd528 prev 0x5559134aceb0 <../dummy_inc/click/nameinfo.hh:245:1, line:348:1> line:245:7 referenced class NameDB definition
|-DefinitionData polymorphic abstract has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5559134bd620 <col:1, col:7> col:7 implicit referenced class NameDB
|-AccessSpecDecl 0x5559134bd6b0 <col:16, col:22> col:16 public
|-CXXConstructorDecl 0x5559134bd918 <line:253:5, col:74> col:12 used NameDB 'void (uint32_t, const String &, size_t)' inline
| |-ParmVarDecl 0x5559134bd6e8 <col:19, col:28> col:28 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134bd760 <col:34, col:48> col:48 context 'const String &'
| `-ParmVarDecl 0x5559134bd7d8 <col:57, col:64> col:64 value_size 'size_t':'unsigned long'
|-CXXDestructorDecl 0x5559134bda20 <line:259:5, line:261:5> line:259:13 used ~NameDB 'void () noexcept' virtual
| `-CompoundStmt 0x5559134bf078 <col:23, line:261:5>
|   `-CallExpr 0x5559134bf050 <line:260:2, col:28> 'void'
|     |-ImplicitCastExpr 0x5559134bf038 <col:2, col:12> 'void (*)(NameDB *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5559134befc8 <col:2, col:12> 'void (NameDB *)' lvalue CXXMethod 0x5559134aec78 'uninstalldb' 'void (NameDB *)'
|     `-CXXThisExpr 0x5559134beff8 <col:24> 'NameDB *' this
|-CXXMethodDecl 0x5559134bdb48 <line:264:5, line:266:5> line:264:14 type 'uint32_t () const'
| `-CompoundStmt 0x5559134bf0f8 <col:27, line:266:5>
|   `-ReturnStmt 0x5559134bf0e8 <line:265:2, col:9>
|     `-ImplicitCastExpr 0x5559134bf0d0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5559134bf0a0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_type 0x5559134be900
|         `-CXXThisExpr 0x5559134bf090 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x5559134bdc08 <line:269:5, line:271:5> line:269:19 context 'const String &() const'
| `-CompoundStmt 0x5559134bf160 <col:35, line:271:5>
|   `-ReturnStmt 0x5559134bf150 <line:270:2, col:9>
|     `-MemberExpr 0x5559134bf120 <col:9> 'const String' lvalue ->_context 0x5559134be960
|       `-CXXThisExpr 0x5559134bf110 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x5559134bdcf8 <line:279:5, line:281:5> line:279:13 context_parent 'NameDB *() const'
| `-CompoundStmt 0x5559134bf1e0 <col:36, line:281:5>
|   `-ReturnStmt 0x5559134bf1d0 <line:280:2, col:9>
|     `-ImplicitCastExpr 0x5559134bf1b8 <col:9> 'NameDB *' <LValueToRValue>
|       `-MemberExpr 0x5559134bf188 <col:9> 'NameDB *const' lvalue ->_context_parent 0x5559134bea20
|         `-CXXThisExpr 0x5559134bf178 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x5559134bddb8 <line:284:5, line:286:5> line:284:12 value_size 'size_t () const'
| `-CompoundStmt 0x5559134bf260 <col:31, line:286:5>
|   `-ReturnStmt 0x5559134bf250 <line:285:2, col:9>
|     `-ImplicitCastExpr 0x5559134bf238 <col:9> 'size_t':'unsigned long' <LValueToRValue>
|       `-MemberExpr 0x5559134bf208 <col:9> 'const size_t':'const unsigned long' lvalue ->_value_size 0x5559134be9c0
|         `-CXXThisExpr 0x5559134bf1f8 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x5559134be088 <line:295:5, col:78> col:18 query 'bool (const String &, void *, size_t)' virtual pure
| |-ParmVarDecl 0x5559134bde68 <col:24, col:38> col:38 name 'const String &'
| |-ParmVarDecl 0x5559134bdee8 <col:44, col:50> col:50 value 'void *'
| `-ParmVarDecl 0x5559134bdf60 <col:57, col:64> col:64 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x5559134be2e8 <line:305:5, col:65> col:20 revquery 'String (const void *, size_t)' virtual
| |-ParmVarDecl 0x5559134be158 <col:29, col:41> col:41 value 'const void *'
| `-ParmVarDecl 0x5559134be1d0 <col:48, col:55> col:55 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x5559134be5c8 <line:315:5, col:81> col:18 used define 'bool (const String &, const void *, size_t)' virtual
| |-ParmVarDecl 0x5559134be3a8 <col:25, col:39> col:39 name 'const String &'
| |-ParmVarDecl 0x5559134be428 <col:45, col:57> col:57 value 'const void *'
| `-ParmVarDecl 0x5559134be4a0 <col:64, col:71> col:71 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x5559134be818 <line:324:5, col:61> col:17 define_int 'bool (const String &, int32_t)' inline
| |-ParmVarDecl 0x5559134be690 <col:28, col:42> col:42 name 'const String &'
| `-ParmVarDecl 0x5559134be708 <col:48, col:56> col:56 value 'int32_t':'int'
|-AccessSpecDecl 0x5559134be8c8 <line:332:3, col:10> col:3 private
|-FieldDecl 0x5559134be900 <line:334:5, col:14> col:14 referenced _type 'uint32_t':'unsigned int'
|-FieldDecl 0x5559134be960 <line:335:5, col:12> col:12 referenced _context 'String'
|-FieldDecl 0x5559134be9c0 <line:336:5, col:12> col:12 referenced _value_size 'size_t':'unsigned long'
|-FieldDecl 0x5559134bea20 <line:337:5, col:13> col:13 referenced _context_parent 'NameDB *'
|-FieldDecl 0x5559134bea80 <line:338:5, col:13> col:13 _context_sibling 'NameDB *'
|-FieldDecl 0x5559134beae0 <line:339:5, col:13> col:13 _context_child 'NameDB *'
|-FieldDecl 0x5559134beb40 <line:340:5, col:15> col:15 _installed 'NameInfo *'
|-FriendDecl 0x5559134bebe0 <line:346:5, col:18> col:12 'class NameInfo':'NameInfo'
|-CXXConstructorDecl 0x5559134bec48 <line:245:7> col:7 implicit NameDB 'void (const NameDB &)' inline default noexcept-unevaluated 0x5559134bec48
| `-ParmVarDecl 0x5559134bed58 <col:7> col:7 'const NameDB &'
`-CXXMethodDecl 0x5559134bedf8 <col:7> col:7 implicit operator= 'NameDB &(const NameDB &)' inline default noexcept-unevaluated 0x5559134bedf8
  `-ParmVarDecl 0x5559134bef08 <col:7> col:7 'const NameDB &'

Layout: <CGRecordLayout
  LLVMType:%class.NameDB = type { i32 (...)**, i32, %class.String, i64, %class.NameDB*, %class.NameDB*, %class.NameDB*, %class.NameInfo* }
  NonVirtualBaseLLVMType:%class.NameDB = type { i32 (...)**, i32, %class.String, i64, %class.NameDB*, %class.NameDB*, %class.NameDB*, %class.NameInfo* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559134bf490 <../dummy_inc/click/nameinfo.hh:352:5, line:355:5> line:352:12 referenced struct Entry definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5559134bf5a8 <col:5, col:12> col:12 implicit struct Entry
|-FieldDecl 0x5559134bf650 <line:353:2, col:14> col:14 name 'const char *'
|-FieldDecl 0x5559134bf6b0 <line:354:2, col:11> col:11 referenced value 'uint32_t':'unsigned int'
`-CXXDestructorDecl 0x5559132dbd80 <line:352:12> col:12 implicit referenced ~Entry 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StaticNameDB::Entry" = type { i8*, i32 }
  NonVirtualBaseLLVMType:%"struct.StaticNameDB::Entry" = type { i8*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559134bf278 <../dummy_inc/click/nameinfo.hh:350:1, line:401:1> line:350:7 referenced class StaticNameDB definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'NameDB'
|-CXXRecordDecl 0x5559134bf3d8 <col:1, col:7> col:7 implicit referenced class StaticNameDB
|-AccessSpecDecl 0x5559134bf468 <col:38, col:44> col:38 public
|-CXXRecordDecl 0x5559134bf490 <line:352:5, line:355:5> line:352:12 referenced struct Entry definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5559134bf5a8 <col:5, col:12> col:12 implicit struct Entry
| |-FieldDecl 0x5559134bf650 <line:353:2, col:14> col:14 name 'const char *'
| |-FieldDecl 0x5559134bf6b0 <line:354:2, col:11> col:11 referenced value 'uint32_t':'unsigned int'
| `-CXXDestructorDecl 0x5559132dbd80 <line:352:12> col:12 implicit referenced ~Entry 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5559134bfa48 <line:369:5, line:370:37> line:369:12 used StaticNameDB 'void (uint32_t, const String &, const StaticNameDB::Entry *, size_t)' inline
| |-ParmVarDecl 0x5559134bf728 <col:25, col:34> col:34 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559134bf7a0 <col:40, col:54> col:54 context 'const String &'
| |-ParmVarDecl 0x5559134bf848 <line:370:4, col:17> col:17 entry 'const StaticNameDB::Entry *'
| `-ParmVarDecl 0x5559134bf8c0 <col:24, col:31> col:31 nentry 'size_t':'unsigned long'
|-CXXMethodDecl 0x5559134bfcb8 <line:379:5, col:66> col:10 query 'bool (const String &, void *, size_t)'
| |-Overrides: [ 0x5559134be088 NameDB::query 'bool (const String &, void *, size_t)' ]
| |-ParmVarDecl 0x5559134bfb20 <col:16, col:30> col:30 name 'const String &'
| |-ParmVarDecl 0x5559134bfba0 <col:36, col:42> col:42 value 'void *'
| `-ParmVarDecl 0x5559134bfc18 <col:49, col:56> col:56 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x5559134bfe98 <line:388:5, col:57> col:12 revquery 'String (const void *, size_t)'
| |-Overrides: [ 0x5559134be2e8 NameDB::revquery 'String (const void *, size_t)' ]
| |-ParmVarDecl 0x5559134bfd88 <col:21, col:33> col:33 value 'const void *'
| `-ParmVarDecl 0x5559134bfe00 <col:40, col:47> col:47 value_size 'size_t':'unsigned long'
|-AccessSpecDecl 0x5559134bff48 <line:396:3, col:10> col:3 private
|-FieldDecl 0x5559134bff80 <line:398:5, col:18> col:18 _entries 'const StaticNameDB::Entry *'
|-FieldDecl 0x5559134bffe0 <line:399:5, col:12> col:12 _nentries 'size_t':'unsigned long'
|-CXXConstructorDecl 0x5559134c0058 <line:350:7> col:7 implicit StaticNameDB 'void (const StaticNameDB &)' inline default noexcept-unevaluated 0x5559134c0058
| `-ParmVarDecl 0x5559134c0168 <col:7> col:7 'const StaticNameDB &'
|-CXXConstructorDecl 0x5559134c0208 <col:7> col:7 implicit StaticNameDB 'void (StaticNameDB &&)' inline default noexcept-unevaluated 0x5559134c0208
| `-ParmVarDecl 0x5559134c0318 <col:7> col:7 'StaticNameDB &&'
|-CXXMethodDecl 0x5559134c03b8 <col:7> col:7 implicit operator= 'StaticNameDB &(const StaticNameDB &)' inline default noexcept-unevaluated 0x5559134c03b8
| `-ParmVarDecl 0x5559134c04c8 <col:7> col:7 'const StaticNameDB &'
|-CXXMethodDecl 0x5559134c0538 <col:7> col:7 implicit operator= 'StaticNameDB &(StaticNameDB &&)' inline default noexcept-unevaluated 0x5559134c0538
| `-ParmVarDecl 0x5559134c0648 <col:7> col:7 'StaticNameDB &&'
`-CXXDestructorDecl 0x5559134c06d0 <col:7> col:7 implicit ~StaticNameDB 'void ()' inline default noexcept-unevaluated 0x5559134c06d0
  `-Overrides: [ 0x5559134bda20 NameDB::~NameDB 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.StaticNameDB = type { %class.NameDB, %"struct.StaticNameDB::Entry"*, i64 }
  NonVirtualBaseLLVMType:%class.StaticNameDB = type { %class.NameDB, %"struct.StaticNameDB::Entry"*, i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<unsigned int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Classification::Wordwise::CompressedProgram
         0 |   class Vector<unsigned int> _zprog
         0 |     class vector_memory<class sized_array_memory<4> > vm_
         0 |       vector_memory<class sized_array_memory<4> >::type * l_
         8 |       vector_memory::size_type n_
        12 |       vector_memory::size_type capacity_
        16 |   int _output_everything
        20 |   unsigned int _safe_length
        24 |   unsigned int _align_offset
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPFilter
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Classification::Wordwise::CompressedProgram _zprog
       112 |     class Vector<unsigned int> _zprog
       112 |       class vector_memory<class sized_array_memory<4> > vm_
       112 |         vector_memory<class sized_array_memory<4> >::type * l_
       120 |         vector_memory::size_type n_
       124 |         vector_memory::size_type capacity_
       128 |     int _output_everything
       132 |     unsigned int _safe_length
       136 |     unsigned int _align_offset
           | [sizeof=144, dsize=144, align=8,
           |  nvsize=144, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555913368a10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x555913368be8 prev 0x555913368a10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555913368c78 <col:46, col:52> col:46 public
|-TypedefDecl 0x555913368ca0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x55591336a870 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55591336a820 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x555913369150 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x555913369050 'type'
|     `-TemplateSpecializationType 0x555913368fe0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x555913368ec0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x555913368ea0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x555913368e80 <col:24> 'unsigned long' 4
|       `-RecordType 0x555913368fc0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x555913368ee0 'char_array'
|-TypedefDecl 0x55591336a928 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55591336a8f0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55591336a8d0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55591336a870 'type'
|     `-ElaboratedType 0x55591336a820 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x555913369150 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x555913369050 'type'
|         `-TemplateSpecializationType 0x555913368fe0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x555913368ec0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x555913368ea0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x555913368e80 <col:24> 'unsigned long' 4
|           `-RecordType 0x555913368fc0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x555913368ee0 'char_array'
|-CXXMethodDecl 0x55591336aac8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55591336a9d8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55591336abb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55591336ac98 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55591336af68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55591336ae70 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55591336b1a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55591336b020 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55591336b098 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55591336b378 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55591336b268 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55591336b2e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55591336b4d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55591336b5a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55591336b7f8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55591336b668 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55591336b6e0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55591336ba58 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55591336b8c8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55591336b940 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55591336bc18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55591336bb28 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55591336bdd8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55591336bce0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55591336be90 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55591336bf40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55591336c178 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55591336bff0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55591336c068 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55591336c418 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55591336c320 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55591336c4e0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55591336c530 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55591336c580 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555913367630 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x555913367838 prev 0x555913367630 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555913368980 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<unsigned int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x555913368930 'typename array_memory<unsigned int>::type' sugar
|   `-TypedefType 0x555913368910 'conditional<true, sized_array_memory<4>, typed_array_memory<unsigned int> >::type' sugar
|     |-Typedef 0x5559133687c0 'type'
|     `-SubstTemplateTypeParmType 0x5559133685e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x555913100590 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913100538 'T'
|       `-RecordType 0x555913368130 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x555913368048 'sized_array_memory'
|-FieldDecl 0x55591336c5d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<unsigned int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55591336c620 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55591336c658 <line:118:5, col:15> col:15 value_type 'unsigned int':'unsigned int'
| `-SubstTemplateTypeParmType 0x5559133678d0 'unsigned int' sugar
|   |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555913337d78 'T'
|   `-BuiltinType 0x555912df5620 'unsigned int'
|-TypedefDecl 0x55591336c6e8 <line:119:5, col:16> col:16 reference 'unsigned int &'
| `-LValueReferenceType 0x55591336c6b0 'unsigned int &'
|   `-SubstTemplateTypeParmType 0x5559133678d0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-BuiltinType 0x555912df5620 'unsigned int'
|-TypedefDecl 0x55591336c7a8 <line:120:5, col:22> col:22 const_reference 'const unsigned int &'
| `-LValueReferenceType 0x55591336c770 'const unsigned int &'
|   `-QualType 0x5559133678d1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5559133678d0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-BuiltinType 0x555912df5620 'unsigned int'
|-TypedefDecl 0x55591336c838 <line:121:5, col:16> col:16 pointer 'unsigned int *'
| `-PointerType 0x55591336c800 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5559133678d0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-BuiltinType 0x555912df5620 'unsigned int'
|-TypedefDecl 0x55591336c8c8 <line:122:5, col:22> col:22 const_pointer 'const unsigned int *'
| `-PointerType 0x55591336c890 'const unsigned int *'
|   `-QualType 0x5559133678d1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5559133678d0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-BuiltinType 0x555912df5620 'unsigned int'
|-TypedefDecl 0x55591336d4b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<unsigned int>::type':'unsigned int'
| `-ElaboratedType 0x55591336d460 'typename fast_argument<unsigned int>::type' sugar
|   `-TypedefType 0x55591336d440 'fast_argument<unsigned int, false>::type' sugar
|     |-Typedef 0x55591336d3d0 'type'
|     `-SubstTemplateTypeParmType 0x55591336d190 'unsigned int' sugar
|       |-TemplateTypeParmType 0x55591310a0d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55591310a080 'T'
|       `-BuiltinType 0x555912df5620 'unsigned int'
|-TypedefDecl 0x55591336d518 <line:126:5, col:22> col:22 const_access_type 'const unsigned int &'
| `-LValueReferenceType 0x55591336c770 'const unsigned int &'
|   `-QualType 0x5559133678d1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5559133678d0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-BuiltinType 0x555912df5620 'unsigned int'
|-TypedefDecl 0x55591336d570 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x55591336d5d8 <line:130:5, col:16> col:16 iterator 'unsigned int *'
| `-PointerType 0x55591336c800 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5559133678d0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-BuiltinType 0x555912df5620 'unsigned int'
|-TypedefDecl 0x55591336d640 <line:131:5, col:22> col:22 const_iterator 'const unsigned int *'
| `-PointerType 0x55591336c890 'const unsigned int *'
|   `-QualType 0x5559133678d1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5559133678d0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-BuiltinType 0x555912df5620 'unsigned int'
|-EnumDecl 0x55591336d698 <line:134:5> col:5
| `-EnumConstantDecl 0x55591336d790 <col:12, col:40> col:12 RESERVE_GROW 'Vector<unsigned int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55591336d770 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555913338e08 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555913338de0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555913338dc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55591336d818 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55591336da68 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x55591336d8d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591336d970 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXConstructorDecl 0x55591336dd28 <line:139:5, col:37> col:12 Vector 'void (const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x55591336dc10 <col:19, col:36> col:36 x 'const Vector<unsigned int> &'
|-CXXConstructorDecl 0x55591336dfe8 <line:141:5, col:32> col:12 Vector 'void (Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x55591336ded0 <col:19, col:31> col:31 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x55591336e330 <line:144:5, col:51> col:23 operator= 'Vector<unsigned int> &(const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x55591336e210 <col:33, col:50> col:50 x 'const Vector<unsigned int> &'
|-CXXMethodDecl 0x55591336e640 <line:146:5, col:46> col:23 operator= 'Vector<unsigned int> &(Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x55591336e520 <col:33, col:45> col:45 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x55591336f1d0 <line:148:5, col:70> col:23 assign 'Vector<unsigned int> &(Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x55591336e778 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591336e7f0 <col:43, col:69> col:63 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x55591336f2f8 <line:150:5, col:55> col:49 begin 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x55591336f3d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591336f430 <col:30> Inherited
|-CXXMethodDecl 0x55591336f478 <line:151:5, col:53> col:49 end 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x55591336f528 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591336f580 <col:30> Inherited
|-CXXMethodDecl 0x55591336f618 <line:152:5, col:63> col:55 used begin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x55591336f6c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591336f720 <col:30> Inherited
|-CXXMethodDecl 0x55591336f768 <line:153:5, col:61> col:55 used end 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x55591336f818 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591336f870 <col:30> Inherited
|-CXXMethodDecl 0x55591336f8b8 <line:154:5, col:64> col:55 cbegin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x55591336f968 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591336f9c0 <col:30> Inherited
|-CXXMethodDecl 0x55591336fa08 <line:155:5, col:62> col:55 cend 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x55591336fab8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591336fb10 <col:30> Inherited
|-CXXMethodDecl 0x55591336fb38 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591336fbe8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591336fc98 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55591336fe58 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x55591336fd48 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591336fdc0 <col:37, col:63> col:57 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x55591336ffa8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55591336ff18 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x555913370158 <line:163:5, col:65> col:43 operator[] 'unsigned int &(Vector::size_type)'
| |-ParmVarDecl 0x555913370060 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555913370210 <col:20>
| `-OptimizeNoneAttr 0x555913370268 <col:30>
|-CXXMethodDecl 0x555913370388 <line:164:5, col:73> col:49 operator[] 'const unsigned int &(Vector::size_type) const'
| |-ParmVarDecl 0x555913370290 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555913370440 <col:20>
| `-OptimizeNoneAttr 0x555913370498 <col:30>
|-CXXMethodDecl 0x555913370550 <line:165:5, col:29> col:15 at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5559133704c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555913370698 <line:166:5, col:37> col:21 at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555913370608 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559133707c8 <line:167:5, col:21> col:15 front 'unsigned int &()' inline
|-CXXMethodDecl 0x5559133708f8 <line:168:5, col:29> col:21 front 'const unsigned int &() const' inline
|-CXXMethodDecl 0x5559133709c8 <line:169:5, col:20> col:15 back 'unsigned int &()' inline
|-CXXMethodDecl 0x555913370a98 <line:170:5, col:28> col:21 back 'const unsigned int &() const' inline
|-CXXMethodDecl 0x555913370bd8 <line:172:5, col:39> col:15 unchecked_at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x555913370b48 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555913370d20 <line:173:5, col:47> col:21 unchecked_at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555913370c90 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555913370e68 <line:174:5, col:59> col:15 at_u 'unsigned int &(Vector::size_type)' inline
| |-ParmVarDecl 0x555913370dd8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555913370f20 <col:48> Inherited "" ""
|-CXXMethodDecl 0x555913371020 <line:175:5, col:71> col:21 at_u 'const unsigned int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x555913370f90 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5559133710d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x555913371198 <line:177:5, col:20> col:15 data 'unsigned int *()' inline
|-CXXMethodDecl 0x555913371298 <line:178:5, col:28> col:21 data 'const unsigned int *() const' inline
|-CXXMethodDecl 0x555913371418 <line:180:5, col:48> col:17 push_back 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x555913371358 <col:27, col:47> col:47 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-FunctionTemplateDecl 0x555913371bd8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5559133714d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<unsigned int>':'fast_argument<unsigned int, false>'
| `-CXXMethodDecl 0x555913371b38 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (unsigned int &&)' inline
|   `-ParmVarDecl 0x555913371a38 <col:58, col:62> col:62 v 'unsigned int &&'
|-CXXMethodDecl 0x555913371cb8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555913371e08 <line:186:5, col:49> col:17 push_front 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x555913371d78 <col:28, col:48> col:48 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x555913371ec0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555913372108 <line:189:5, col:62> col:21 insert 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x555913371f80 <col:28, col:37> col:37 it 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x555913371ff8 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5559133722c8 <line:190:5, col:38> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator)' inline
| `-ParmVarDecl 0x5559133721d8 <col:27, col:36> col:36 it 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x555913372518 <line:191:5, col:49> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::iterator)' inline
| |-ParmVarDecl 0x555913372390 <col:27, col:36> col:36 a 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x555913372408 <col:39, col:48> col:48 b 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x5559133725d8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x555913372838 <line:195:5, col:34> col:17 swap 'void (Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x555913372740 <col:22, col:33> col:33 x 'Vector<unsigned int> &'
`-CXXDestructorDecl 0x555913372908 <line:111:7> col:7 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x555913373480 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133669d8 <../elements/standard/classification.hh:238:1, line:276:1> line:238:7 referenced class CompressedProgram definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial
|-CXXRecordDecl 0x555913366af8 <col:1, col:7> col:7 implicit referenced class CompressedProgram
|-AccessSpecDecl 0x555913366b88 <col:27, col:33> col:27 public
|-CXXConstructorDecl 0x555913366c10 <line:240:5, line:243:5> line:240:5 used CompressedProgram 'void ()'
| |-CXXCtorInitializer Field 0x5559133729f0 '_zprog' 'Vector<uint32_t>':'Vector<unsigned int>'
| | `-CXXConstructExpr 0x555913373410 <col:5> 'Vector<uint32_t>':'Vector<unsigned int>' 'void ()'
| |-CXXCtorInitializer Field 0x555913372a58 '_output_everything' 'int'
| | `-UnaryOperator 0x555913373258 <line:241:23, col:24> 'int' prefix '-'
| |   `-ImplicitCastExpr 0x555913373240 <col:24> 'int' <IntegralCast>
| |     `-DeclRefExpr 0x555913373220 <col:24> 'Classification::Jumps' EnumConstant 0x55591300a288 'j_never' 'Classification::Jumps'
| |-CXXCtorInitializer Field 0x555913372ac0 '_safe_length' 'unsigned int'
| | `-CStyleCastExpr 0x555913373320 <col:47, col:59> 'unsigned int' <NoOp>
| |   `-ImplicitCastExpr 0x555913373308 <col:58, col:59> 'unsigned int' <IntegralCast> part_of_explicit_cast
| |     `-UnaryOperator 0x5559133732d8 <col:58, col:59> 'int' prefix '-'
| |       `-IntegerLiteral 0x5559133732b8 <col:59> 'int' 1
| |-CXXCtorInitializer Field 0x555913372b28 '_align_offset' 'unsigned int'
| | `-ImplicitCastExpr 0x5559133733d0 <line:242:18> 'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x555913373390 <col:18> 'int' 0
| `-CompoundStmt 0x555913373490 <col:21, line:243:5>
|-CXXMethodDecl 0x555913366d10 <line:245:5, line:247:5> line:245:14 align_offset 'unsigned int () const'
| `-CompoundStmt 0x555913373508 <col:35, line:247:5>
|   `-ReturnStmt 0x5559133734f8 <line:246:2, col:9>
|     `-ImplicitCastExpr 0x5559133734e0 <col:9> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5559133734b0 <col:9> 'const unsigned int' lvalue ->_align_offset 0x555913372b28
|         `-CXXThisExpr 0x5559133734a0 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x555913366dd8 <line:248:5, line:250:5> line:248:9 used output_everything 'int () const'
| `-CompoundStmt 0x555913373588 <col:35, line:250:5>
|   `-ReturnStmt 0x555913373578 <line:249:2, col:9>
|     `-ImplicitCastExpr 0x555913373560 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x555913373530 <col:9> 'const int' lvalue ->_output_everything 0x555913372a58
|         `-CXXThisExpr 0x555913373520 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x555913366ea0 <line:251:5, line:253:5> line:251:14 used safe_length 'unsigned int () const'
| `-CompoundStmt 0x555913373608 <col:34, line:253:5>
|   `-ReturnStmt 0x5559133735f8 <line:252:2, col:9>
|     `-ImplicitCastExpr 0x5559133735e0 <col:9> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5559133735b0 <col:9> 'const unsigned int' lvalue ->_safe_length 0x555913372ac0
|         `-CXXThisExpr 0x5559133735a0 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x555913366f60 <line:255:5, line:257:5> line:255:21 used begin 'const uint32_t *() const'
| `-CompoundStmt 0x555913373748 <col:35, line:257:5>
|   `-ReturnStmt 0x555913373738 <line:256:2, col:22>
|     `-CXXMemberCallExpr 0x5559133736f0 <col:9, col:22> 'Vector<unsigned int>::const_iterator':'const unsigned int *'
|       `-MemberExpr 0x5559133736c0 <col:9, col:16> '<bound member function type>' .begin 0x55591336f618
|         `-MemberExpr 0x555913373630 <col:9> 'const Vector<uint32_t>':'const Vector<unsigned int>' lvalue ->_zprog 0x5559133729f0
|           `-CXXThisExpr 0x555913373620 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x555913367020 <line:258:5, line:260:5> line:258:21 end 'const uint32_t *() const'
| `-CompoundStmt 0x555913373860 <col:33, line:260:5>
|   `-ReturnStmt 0x555913373850 <line:259:2, col:20>
|     `-CXXMemberCallExpr 0x555913373830 <col:9, col:20> 'Vector<unsigned int>::const_iterator':'const unsigned int *'
|       `-MemberExpr 0x555913373800 <col:9, col:16> '<bound member function type>' .end 0x55591336f768
|         `-MemberExpr 0x555913373770 <col:9> 'const Vector<uint32_t>':'const Vector<unsigned int>' lvalue ->_zprog 0x5559133729f0
|           `-CXXThisExpr 0x555913373760 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x5559133672a8 <line:262:5, line:263:30> line:262:10 compile 'void (const Classification::Wordwise::Program &, bool, unsigned int)'
| |-ParmVarDecl 0x5559133670d0 <col:18, col:33> col:33 prog 'const Classification::Wordwise::Program &'
| |-ParmVarDecl 0x555913367148 <col:39, col:44> col:44 perform_binary_search 'bool'
| `-ParmVarDecl 0x5559133671c8 <line:263:4, col:13> col:13 min_binary_search 'unsigned int'
|-CXXMethodDecl 0x555913367488 <line:265:5, col:64> col:10 warn_unused_outputs 'void (int, ErrorHandler *) const'
| |-ParmVarDecl 0x555913367378 <col:30, col:34> col:34 noutputs 'int'
| `-ParmVarDecl 0x5559133673f0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555913367558 <line:267:5, col:22> col:12 unparse 'String () const'
|-AccessSpecDecl 0x5559133675f8 <line:269:3, col:10> col:3 private
|-FieldDecl 0x5559133729f0 <line:271:5, col:22> col:22 referenced _zprog 'Vector<uint32_t>':'Vector<unsigned int>'
|-FieldDecl 0x555913372a58 <line:272:5, col:9> col:9 referenced _output_everything 'int'
|-FieldDecl 0x555913372ac0 <line:273:5, col:14> col:14 referenced _safe_length 'unsigned int'
|-FieldDecl 0x555913372b28 <line:274:5, col:14> col:14 referenced _align_offset 'unsigned int'
|-CXXConstructorDecl 0x555913372ba8 <line:238:7> col:7 implicit CompressedProgram 'void (const Classification::Wordwise::CompressedProgram &)' inline default noexcept-unevaluated 0x555913372ba8
| `-ParmVarDecl 0x555913372cb8 <col:7> col:7 'const Classification::Wordwise::CompressedProgram &'
|-CXXConstructorDecl 0x555913372d58 <col:7> col:7 implicit CompressedProgram 'void (Classification::Wordwise::CompressedProgram &&)' inline default noexcept-unevaluated 0x555913372d58
| `-ParmVarDecl 0x555913372e68 <col:7> col:7 'Classification::Wordwise::CompressedProgram &&'
|-CXXMethodDecl 0x555913372f08 <col:7> col:7 implicit operator= 'Classification::Wordwise::CompressedProgram &(const Classification::Wordwise::CompressedProgram &)' inline default noexcept-unevaluated 0x555913372f08
| `-ParmVarDecl 0x555913373018 <col:7> col:7 'const Classification::Wordwise::CompressedProgram &'
|-CXXMethodDecl 0x555913373088 <col:7> col:7 implicit operator= 'Classification::Wordwise::CompressedProgram &(Classification::Wordwise::CompressedProgram &&)' inline default noexcept-unevaluated 0x555913373088
| `-ParmVarDecl 0x555913373198 <col:7> col:7 'Classification::Wordwise::CompressedProgram &&'
`-CXXDestructorDecl 0x5559134fd5a8 <col:7> col:7 implicit used ~CompressedProgram 'void () noexcept' inline default
  `-CompoundStmt 0x5559134fd690 <col:7>

Layout: <CGRecordLayout
  LLVMType:%"class.Classification::Wordwise::CompressedProgram" = type <{ %class.Vector.0, i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Classification::Wordwise::CompressedProgram.base" = type <{ %class.Vector.0, i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133bf1e8 <../elements/ip/ipfilter.hh:110:1, line:301:1> line:110:7 class IPFilter definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5559133bf348 <col:1, col:7> col:7 implicit referenced class IPFilter
|-AccessSpecDecl 0x5559133bf3d8 <col:35, col:41> col:35 public
|-CXXConstructorDecl 0x5559133bf460 <line:112:5, col:14> col:5 IPFilter 'void ()'
|-CXXDestructorDecl 0x5559133bf550 <line:113:5, col:15> col:5 ~IPFilter 'void ()' noexcept-unevaluated 0x5559133bf550
| `-Overrides: [ 0x555913394e58 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5559133bf650 <line:115:5, col:35> col:17 static_initialize 'void ()' static
|-CXXMethodDecl 0x5559133bf710 <line:116:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5559133bf800 <line:118:5, col:57> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5559133962b8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5559133c9ea0 <col:36, col:57>
|   `-ReturnStmt 0x5559133c9e90 <col:38, col:45>
|     `-ImplicitCastExpr 0x5559133c9e78 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5559133c9e58 <col:45> 'const char [9]' lvalue "IPFilter"
|-CXXMethodDecl 0x5559133bf8c8 <line:119:5, col:52> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x555913396380 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5559133c9f00 <col:36, col:52>
|   `-ReturnStmt 0x5559133c9ef0 <col:38, col:45>
|     `-ImplicitCastExpr 0x5559133c9ed8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5559133c9eb8 <col:45> 'const char [4]' lvalue "1/-"
|-CXXMethodDecl 0x5559133bf990 <line:120:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x555913396748 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5559133c9f60 <col:36, col:51>
|   `-ReturnStmt 0x5559133c9f50 <col:38, col:45>
|     `-ImplicitCastExpr 0x5559133c9f38 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5559133c9f18 <col:45> 'const char []' lvalue Var 0x555913396890 'PUSH' 'const char []'
|-CXXMethodDecl 0x5559133bfa58 <line:122:5, col:44> col:17 flags 'const char *() const'
| |-Overrides: [ 0x555913396c90 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x5559133c9ff8 <col:31, col:44>
|   `-ReturnStmt 0x5559133c9fe8 <col:33, col:40>
|     `-ImplicitCastExpr 0x5559133c9fd0 <col:40> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5559133c9fb8 <col:40> 'const char [1]' lvalue ""
|-CXXMethodDecl 0x5559133bfb18 <line:123:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5559132ad040 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5559133ca030 <col:39, col:54>
|   `-ReturnStmt 0x5559133ca020 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x5559133ca010 <col:48> 'bool' true
|-CXXMethodDecl 0x5559133bfdf0 <line:125:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5559132aa5f0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5559133bfca0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5559133bfd18 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5559133bfec0 <line:126:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5559132aa6c0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5559133c0088 <line:128:5, col:33> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x555913395128 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5559133bff78 <col:15, col:19> col:19 port 'int'
| `-ParmVarDecl 0x5559133bfff0 <col:25, col:32> col:33 'Packet *'
|-TypedefDecl 0x5559133c01f0 <line:130:5, col:57> col:57 referenced IPFilterProgram 'Classification::Wordwise::CompressedProgram':'Classification::Wordwise::CompressedProgram'
| `-ElaboratedType 0x5559133c0180 'Classification::Wordwise::CompressedProgram' sugar
|   `-RecordType 0x555913366a70 'Classification::Wordwise::CompressedProgram'
|     `-CXXRecord 0x5559133669d8 'CompressedProgram'
|-CXXMethodDecl 0x5559133c06e8 <line:131:5, line:133:52> line:131:17 parse_program 'void (IPFilter::IPFilterProgram &, const Vector<String> &, int, const Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x5559133c02a8 <col:31, col:48> col:48 zprog 'IPFilter::IPFilterProgram &'
| |-ParmVarDecl 0x5559133c0420 <line:132:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5559133c04a0 <col:38, col:42> col:42 noutputs 'int'
| |-ParmVarDecl 0x5559133c0518 <line:133:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5559133c0590 <col:34, col:48> col:48 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559133c0980 <line:134:5, col:74> col:23 match 'int (const IPFilter::IPFilterProgram &, const Packet *)' static inline
| |-ParmVarDecl 0x5559133c07e8 <col:29, col:52> col:52 zprog 'const IPFilter::IPFilterProgram &'
| `-ParmVarDecl 0x5559133c0860 <col:59, col:73> col:73 p 'const Packet *'
|-EnumDecl 0x5559133c0a30 <line:136:5, line:176:5> line:136:5
| |-EnumConstantDecl 0x5559133c0b30 <line:137:2, col:14> col:2 TYPE_NONE 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3b90 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c0b10 <col:14> 'int' Int: 0
| |     `-IntegerLiteral 0x5559133c0af0 <col:14> 'int' 0
| |-EnumConstantDecl 0x5559133c0bc0 <line:138:2, col:14> col:2 referenced TYPE_TYPE 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3ba8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c0ba0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5559133c0b80 <col:14> 'int' 1
| |-EnumConstantDecl 0x5559133c0c50 <line:139:2, col:16> col:2 referenced TYPE_SYNTAX 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3bc0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c0c30 <col:16> 'int' Int: 2
| |     `-IntegerLiteral 0x5559133c0c10 <col:16> 'int' 2
| |-EnumConstantDecl 0x5559133c0ce0 <line:140:2, col:13> col:2 TYPE_INT 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3bd8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c0cc0 <col:13> 'int' Int: 3
| |     `-IntegerLiteral 0x5559133c0ca0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5559133c0d70 <line:142:2, col:14> col:2 referenced TYPE_HOST 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3bf0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c0d50 <col:14> 'int' Int: 10
| |     `-IntegerLiteral 0x5559133c0d30 <col:14> 'int' 10
| |-EnumConstantDecl 0x5559133c0e00 <line:143:2, col:15> col:2 referenced TYPE_PROTO 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3c08 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c0de0 <col:15> 'int' Int: 11
| |     `-IntegerLiteral 0x5559133c0dc0 <col:15> 'int' 11
| |-EnumConstantDecl 0x5559133c0e90 <line:144:2, col:16> col:2 referenced TYPE_IPFRAG 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3c20 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c0e70 <col:16> 'int' Int: 12
| |     `-IntegerLiteral 0x5559133c0e50 <col:16> 'int' 12
| |-EnumConstantDecl 0x5559133c0f20 <line:145:2, col:14> col:2 referenced TYPE_PORT 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3c38 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c0f00 <col:14> 'int' Int: 13
| |     `-IntegerLiteral 0x5559133c0ee0 <col:14> 'int' 13
| |-EnumConstantDecl 0x5559133c0fb0 <line:146:2, col:16> col:2 referenced TYPE_TCPOPT 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3c50 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c0f90 <col:16> 'int' Int: 14
| |     `-IntegerLiteral 0x5559133c0f70 <col:16> 'int' 14
| |-EnumConstantDecl 0x5559133c1040 <line:147:2, col:15> col:2 TYPE_ETHER 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3c68 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c1020 <col:15> 'int' Int: 15
| |     `-IntegerLiteral 0x5559133c1000 <col:15> 'int' 15
| |-EnumConstantDecl 0x5559133c10d0 <line:149:2, col:13> col:2 referenced TYPE_NET 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3c80 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c10b0 <col:13> 'int' Int: 30
| |     `-IntegerLiteral 0x5559133c1090 <col:13> 'int' 30
| |-EnumConstantDecl 0x5559133c1160 <line:150:2, col:18> col:2 referenced TYPE_IPUNFRAG 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3c98 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c1140 <col:18> 'int' Int: 31
| |     `-IntegerLiteral 0x5559133c1120 <col:18> 'int' 31
| |-EnumConstantDecl 0x5559133c11f0 <line:151:2, col:15> col:2 referenced TYPE_IPECT 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3cb0 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c11d0 <col:15> 'int' Int: 32
| |     `-IntegerLiteral 0x5559133c11b0 <col:15> 'int' 32
| |-EnumConstantDecl 0x5559133c1280 <line:152:2, col:14> col:2 referenced TYPE_IPCE 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3cc8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c1260 <col:14> 'int' Int: 33
| |     `-IntegerLiteral 0x5559133c1240 <col:14> 'int' 33
| |-EnumConstantDecl 0x5559133c1310 <line:154:2, col:15> col:2 referenced TYPE_FIELD 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3ce0 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c12f0 <col:15> 'int' Int: 1073741824
| |     `-IntegerLiteral 0x5559133c12d0 <col:15> 'int' 1073741824
| |-EnumConstantDecl 0x5559133c13a0 <line:160:2, col:22> col:2 referenced FIELD_PROTO_SHIFT 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3cf8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c1380 <col:22> 'int' Int: 21
| |     `-IntegerLiteral 0x5559133c1360 <col:22> 'int' 21
| |-EnumConstantDecl 0x5559133c1490 <line:161:2, col:48> col:2 FIELD_PROTO_MASK 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3d10 <col:21, col:48> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c1470 <col:21, col:48> 'int' Int: 1071644672
| |     `-ParenExpr 0x5559133c1450 <col:21, col:48> 'int'
| |       `-BinaryOperator 0x5559133c1430 <col:22, col:31> 'int' '<<'
| |         |-IntegerLiteral 0x5559133c13f0 <col:22> 'int' 511
| |         `-DeclRefExpr 0x5559133c1410 <col:31> 'int' EnumConstant 0x5559133c13a0 'FIELD_PROTO_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |-EnumConstantDecl 0x5559133c1520 <line:162:2, col:23> col:2 referenced FIELD_OFFSET_SHIFT 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3d28 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c1500 <col:23> 'int' Int: 5
| |     `-IntegerLiteral 0x5559133c14e0 <col:23> 'int' 5
| |-EnumConstantDecl 0x5559133c1610 <line:163:2, col:51> col:2 FIELD_OFFSET_MASK 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3d40 <col:22, col:51> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c15f0 <col:22, col:51> 'int' Int: 2097120
| |     `-ParenExpr 0x5559133c15d0 <col:22, col:51> 'int'
| |       `-BinaryOperator 0x5559133c15b0 <col:23, col:33> 'int' '<<'
| |         |-IntegerLiteral 0x5559133c1570 <col:23> 'int' 65535
| |         `-DeclRefExpr 0x5559133c1590 <col:33> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |-EnumConstantDecl 0x5559133c16a0 <line:164:2, col:23> col:2 referenced FIELD_LENGTH_SHIFT 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3d58 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c1680 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5559133c1660 <col:23> 'int' 0
| |-EnumConstantDecl 0x5559133c1790 <line:165:2, col:49> col:2 FIELD_LENGTH_MASK 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3d70 <col:22, col:49> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c1770 <col:22, col:49> 'int' Int: 31
| |     `-ParenExpr 0x5559133c1750 <col:22, col:49> 'int'
| |       `-BinaryOperator 0x5559133c1730 <col:23, col:31> 'int' '<<'
| |         |-IntegerLiteral 0x5559133c16f0 <col:23> 'int' 31
| |         `-DeclRefExpr 0x5559133c1710 <col:31> 'int' EnumConstant 0x5559133c16a0 'FIELD_LENGTH_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |-EnumConstantDecl 0x5559133c1980 <line:166:2, col:64> col:2 FIELD_CSUM 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3d88 <col:15, col:64> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c1960 <col:15, col:64> 'int' Int: 1073744399
| |     `-ParenExpr 0x5559133c1940 <col:15, col:64> 'int'
| |       `-BinaryOperator 0x5559133c1920 <col:16, col:62> 'int' '|'
| |         |-BinaryOperator 0x5559133c18e0 <col:16, col:58> 'int' '|'
| |         | |-DeclRefExpr 0x5559133c17e0 <col:16> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | `-ParenExpr 0x5559133c18c0 <col:29, col:58> 'int'
| |         |   `-BinaryOperator 0x5559133c18a0 <col:30, col:40> 'int' '<<'
| |         |     |-ParenExpr 0x5559133c1860 <col:30, col:35> 'int'
| |         |     | `-BinaryOperator 0x5559133c1840 <col:31, col:34> 'int' '*'
| |         |     |   |-IntegerLiteral 0x5559133c1800 <col:31> 'int' 10
| |         |     |   `-IntegerLiteral 0x5559133c1820 <col:34> 'int' 8
| |         |     `-DeclRefExpr 0x5559133c1880 <col:40> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         `-IntegerLiteral 0x5559133c1900 <col:62> 'int' 15
| |-EnumConstantDecl 0x5559133c2ba0 <line:167:2, col:64> col:2 referenced FIELD_IPLEN 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3da0 <col:16, col:64> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c2b80 <col:16, col:64> 'int' Int: 1073742351
| |     `-ParenExpr 0x5559133c2b60 <col:16, col:64> 'int'
| |       `-BinaryOperator 0x5559133c2b40 <col:17, col:62> 'int' '|'
| |         |-BinaryOperator 0x5559133c2b00 <col:17, col:58> 'int' '|'
| |         | |-DeclRefExpr 0x5559133c19d0 <col:17> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | `-ParenExpr 0x5559133c2ae0 <col:30, col:58> 'int'
| |         |   `-BinaryOperator 0x5559133c2ac0 <col:31, col:40> 'int' '<<'
| |         |     |-ParenExpr 0x5559133c2a80 <col:31, col:35> 'int'
| |         |     | `-BinaryOperator 0x5559133c2a60 <col:32, col:34> 'int' '*'
| |         |     |   |-IntegerLiteral 0x5559133c2a20 <col:32> 'int' 2
| |         |     |   `-IntegerLiteral 0x5559133c2a40 <col:34> 'int' 8
| |         |     `-DeclRefExpr 0x5559133c2aa0 <col:40> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         `-IntegerLiteral 0x5559133c2b20 <col:62> 'int' 15
| |-EnumConstantDecl 0x5559133c2d90 <line:168:2, col:61> col:2 referenced FIELD_ID 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3db8 <col:13, col:61> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c2d70 <col:13, col:61> 'int' Int: 1073742863
| |     `-ParenExpr 0x5559133c2d50 <col:13, col:61> 'int'
| |       `-BinaryOperator 0x5559133c2d30 <col:14, col:59> 'int' '|'
| |         |-BinaryOperator 0x5559133c2cf0 <col:14, col:55> 'int' '|'
| |         | |-DeclRefExpr 0x5559133c2bf0 <col:14> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | `-ParenExpr 0x5559133c2cd0 <col:27, col:55> 'int'
| |         |   `-BinaryOperator 0x5559133c2cb0 <col:28, col:37> 'int' '<<'
| |         |     |-ParenExpr 0x5559133c2c70 <col:28, col:32> 'int'
| |         |     | `-BinaryOperator 0x5559133c2c50 <col:29, col:31> 'int' '*'
| |         |     |   |-IntegerLiteral 0x5559133c2c10 <col:29> 'int' 4
| |         |     |   `-IntegerLiteral 0x5559133c2c30 <col:31> 'int' 8
| |         |     `-DeclRefExpr 0x5559133c2c90 <col:37> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         `-IntegerLiteral 0x5559133c2d10 <col:59> 'int' 15
| |-EnumConstantDecl 0x5559133c2f20 <line:169:2, col:61> col:2 referenced FIELD_VERSION 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3dd0 <col:18, col:61> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c2f00 <col:18, col:61> 'int' Int: 1073741827
| |     `-ParenExpr 0x5559133c2ee0 <col:18, col:61> 'int'
| |       `-BinaryOperator 0x5559133c2ec0 <col:19, col:60> 'int' '|'
| |         |-BinaryOperator 0x5559133c2e80 <col:19, col:56> 'int' '|'
| |         | |-DeclRefExpr 0x5559133c2de0 <col:19> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | `-ParenExpr 0x5559133c2e60 <col:32, col:56> 'int'
| |         |   `-BinaryOperator 0x5559133c2e40 <col:33, col:38> 'int' '<<'
| |         |     |-IntegerLiteral 0x5559133c2e00 <col:33> 'int' 0
| |         |     `-DeclRefExpr 0x5559133c2e20 <col:38> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         `-IntegerLiteral 0x5559133c2ea0 <col:60> 'int' 3
| |-EnumConstantDecl 0x5559133c30b0 <line:170:2, col:56> col:2 referenced FIELD_HL 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3de8 <col:13, col:56> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c3090 <col:13, col:56> 'int' Int: 1073741955
| |     `-ParenExpr 0x5559133c3070 <col:13, col:56> 'int'
| |       `-BinaryOperator 0x5559133c3050 <col:14, col:55> 'int' '|'
| |         |-BinaryOperator 0x5559133c3010 <col:14, col:51> 'int' '|'
| |         | |-DeclRefExpr 0x5559133c2f70 <col:14> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | `-ParenExpr 0x5559133c2ff0 <col:27, col:51> 'int'
| |         |   `-BinaryOperator 0x5559133c2fd0 <col:28, col:33> 'int' '<<'
| |         |     |-IntegerLiteral 0x5559133c2f90 <col:28> 'int' 4
| |         |     `-DeclRefExpr 0x5559133c2fb0 <col:33> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         `-IntegerLiteral 0x5559133c3030 <col:55> 'int' 3
| |-EnumConstantDecl 0x5559133c32a0 <line:171:2, col:61> col:2 referenced FIELD_TOS 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3e00 <col:14, col:61> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c3280 <col:14, col:61> 'int' Int: 1073742087
| |     `-ParenExpr 0x5559133c3260 <col:14, col:61> 'int'
| |       `-BinaryOperator 0x5559133c3240 <col:15, col:60> 'int' '|'
| |         |-BinaryOperator 0x5559133c3200 <col:15, col:56> 'int' '|'
| |         | |-DeclRefExpr 0x5559133c3100 <col:15> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | `-ParenExpr 0x5559133c31e0 <col:28, col:56> 'int'
| |         |   `-BinaryOperator 0x5559133c31c0 <col:29, col:38> 'int' '<<'
| |         |     |-ParenExpr 0x5559133c3180 <col:29, col:33> 'int'
| |         |     | `-BinaryOperator 0x5559133c3160 <col:30, col:32> 'int' '*'
| |         |     |   |-IntegerLiteral 0x5559133c3120 <col:30> 'int' 1
| |         |     |   `-IntegerLiteral 0x5559133c3140 <col:32> 'int' 8
| |         |     `-DeclRefExpr 0x5559133c31a0 <col:38> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         `-IntegerLiteral 0x5559133c3220 <col:60> 'int' 7
| |-EnumConstantDecl 0x5559133c3490 <line:172:2, col:62> col:2 referenced FIELD_DSCP 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3e18 <col:15, col:62> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c3470 <col:15, col:62> 'int' Int: 1073742085
| |     `-ParenExpr 0x5559133c3450 <col:15, col:62> 'int'
| |       `-BinaryOperator 0x5559133c3430 <col:16, col:61> 'int' '|'
| |         |-BinaryOperator 0x5559133c33f0 <col:16, col:57> 'int' '|'
| |         | |-DeclRefExpr 0x5559133c32f0 <col:16> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | `-ParenExpr 0x5559133c33d0 <col:29, col:57> 'int'
| |         |   `-BinaryOperator 0x5559133c33b0 <col:30, col:39> 'int' '<<'
| |         |     |-ParenExpr 0x5559133c3370 <col:30, col:34> 'int'
| |         |     | `-BinaryOperator 0x5559133c3350 <col:31, col:33> 'int' '*'
| |         |     |   |-IntegerLiteral 0x5559133c3310 <col:31> 'int' 1
| |         |     |   `-IntegerLiteral 0x5559133c3330 <col:33> 'int' 8
| |         |     `-DeclRefExpr 0x5559133c3390 <col:39> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         `-IntegerLiteral 0x5559133c3410 <col:61> 'int' 5
| |-EnumConstantDecl 0x5559133c3680 <line:173:2, col:61> col:2 referenced FIELD_TTL 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3e30 <col:14, col:61> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c3660 <col:14, col:61> 'int' Int: 1073743879
| |     `-ParenExpr 0x5559133c3640 <col:14, col:61> 'int'
| |       `-BinaryOperator 0x5559133c3620 <col:15, col:60> 'int' '|'
| |         |-BinaryOperator 0x5559133c35e0 <col:15, col:56> 'int' '|'
| |         | |-DeclRefExpr 0x5559133c34e0 <col:15> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | `-ParenExpr 0x5559133c35c0 <col:28, col:56> 'int'
| |         |   `-BinaryOperator 0x5559133c35a0 <col:29, col:38> 'int' '<<'
| |         |     |-ParenExpr 0x5559133c3560 <col:29, col:33> 'int'
| |         |     | `-BinaryOperator 0x5559133c3540 <col:30, col:32> 'int' '*'
| |         |     |   |-IntegerLiteral 0x5559133c3500 <col:30> 'int' 8
| |         |     |   `-IntegerLiteral 0x5559133c3520 <col:32> 'int' 8
| |         |     `-DeclRefExpr 0x5559133c3580 <col:38> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         `-IntegerLiteral 0x5559133c3600 <col:60> 'int' 7
| |-EnumConstantDecl 0x5559133c3910 <line:174:2, col:94> col:2 referenced FIELD_TCP_WIN 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| | `-ImplicitCastExpr 0x5559133c3e48 <col:18, col:94> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c38f0 <col:18, col:94> 'int' Int: 1086328335
| |     `-ParenExpr 0x5559133c38d0 <col:18, col:94> 'int'
| |       `-BinaryOperator 0x5559133c38b0 <col:19, col:92> 'int' '|'
| |         |-BinaryOperator 0x5559133c3870 <col:19, col:88> 'int' '|'
| |         | |-BinaryOperator 0x5559133c3770 <col:19, col:55> 'int' '|'
| |         | | |-DeclRefExpr 0x5559133c36d0 <col:19> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | | `-ParenExpr 0x5559133c3750 <col:32, col:55> 'int'
| |         | |   `-BinaryOperator 0x5559133c3730 <col:33, col:38> 'int' '<<'
| |         | |     |-IntegerLiteral 0x5559133c36f0 <col:33> 'int' 6
| |         | |     `-DeclRefExpr 0x5559133c3710 <col:38> 'int' EnumConstant 0x5559133c13a0 'FIELD_PROTO_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         | `-ParenExpr 0x5559133c3850 <col:59, col:88> 'int'
| |         |   `-BinaryOperator 0x5559133c3830 <col:60, col:70> 'int' '<<'
| |         |     |-ParenExpr 0x5559133c37f0 <col:60, col:65> 'int'
| |         |     | `-BinaryOperator 0x5559133c37d0 <col:61, col:64> 'int' '*'
| |         |     |   |-IntegerLiteral 0x5559133c3790 <col:61> 'int' 14
| |         |     |   `-IntegerLiteral 0x5559133c37b0 <col:64> 'int' 8
| |         |     `-DeclRefExpr 0x5559133c3810 <col:70> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
| |         `-IntegerLiteral 0x5559133c3890 <col:92> 'int' 15
| `-EnumConstantDecl 0x5559133c3b40 <line:175:2, col:90> col:2 referenced FIELD_ICMP_TYPE 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
|   `-ImplicitCastExpr 0x5559133c3e60 <col:20, col:90> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559133c3b20 <col:20, col:90> 'int' Int: 1075838983
|       `-ParenExpr 0x5559133c3b00 <col:20, col:90> 'int'
|         `-BinaryOperator 0x5559133c3ae0 <col:21, col:89> 'int' '|'
|           |-BinaryOperator 0x5559133c3aa0 <col:21, col:85> 'int' '|'
|           | |-BinaryOperator 0x5559133c3a00 <col:21, col:57> 'int' '|'
|           | | |-DeclRefExpr 0x5559133c3960 <col:21> 'int' EnumConstant 0x5559133c1310 'TYPE_FIELD' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
|           | | `-ParenExpr 0x5559133c39e0 <col:34, col:57> 'int'
|           | |   `-BinaryOperator 0x5559133c39c0 <col:35, col:40> 'int' '<<'
|           | |     |-IntegerLiteral 0x5559133c3980 <col:35> 'int' 1
|           | |     `-DeclRefExpr 0x5559133c39a0 <col:40> 'int' EnumConstant 0x5559133c13a0 'FIELD_PROTO_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
|           | `-ParenExpr 0x5559133c3a80 <col:61, col:85> 'int'
|           |   `-BinaryOperator 0x5559133c3a60 <col:62, col:67> 'int' '<<'
|           |     |-IntegerLiteral 0x5559133c3a20 <col:62> 'int' 0
|           |     `-DeclRefExpr 0x5559133c3a40 <col:67> 'int' EnumConstant 0x5559133c1520 'FIELD_OFFSET_SHIFT' 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:136:5)'
|           `-IntegerLiteral 0x5559133c3ac0 <col:89> 'int' 7
|-EnumDecl 0x5559133c3e78 <line:178:5, line:180:5> line:178:5
| `-EnumConstantDecl 0x5559133c3f98 <line:179:2, col:13> col:2 referenced UNKNOWN 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:178:5)'
|   `-ConstantExpr 0x5559133c3f78 <col:12, col:13> 'int' Int: -1000
|     `-UnaryOperator 0x5559133c3f60 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x5559133c3f40 <col:13> 'int' 1000
|-EnumDecl 0x5559133c3fe8 <line:182:5, line:184:5> line:182:5
| |-EnumConstantDecl 0x5559133c40f0 <line:183:2, col:11> col:2 SD_SRC 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:182:5)'
| | `-ImplicitCastExpr 0x5559133c42f0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c40d0 <col:11> 'int' Int: 1
| |     `-IntegerLiteral 0x5559133c40b0 <col:11> 'int' 1
| |-EnumConstantDecl 0x5559133c4180 <col:14, col:23> col:14 SD_DST 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:182:5)'
| | `-ImplicitCastExpr 0x5559133c4308 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c4160 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5559133c4140 <col:23> 'int' 2
| |-EnumConstantDecl 0x5559133c4210 <col:26, col:35> col:26 SD_AND 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:182:5)'
| | `-ImplicitCastExpr 0x5559133c4320 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c41f0 <col:35> 'int' Int: 3
| |     `-IntegerLiteral 0x5559133c41d0 <col:35> 'int' 3
| `-EnumConstantDecl 0x5559133c42a0 <col:38, col:46> col:38 SD_OR 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:182:5)'
|   `-ImplicitCastExpr 0x5559133c4338 <col:46> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559133c4280 <col:46> 'int' Int: 4
|       `-IntegerLiteral 0x5559133c4260 <col:46> 'int' 4
|-EnumDecl 0x5559133c4350 <line:186:5, line:188:5> line:186:5
| |-EnumConstantDecl 0x5559133c4450 <line:187:2, col:10> col:2 OP_EQ 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:186:5)'
| | `-ImplicitCastExpr 0x5559133c45c0 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c4430 <col:10> 'int' Int: 0
| |     `-IntegerLiteral 0x5559133c4410 <col:10> 'int' 0
| |-EnumConstantDecl 0x5559133c44e0 <col:13, col:21> col:13 OP_GT 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:186:5)'
| | `-ImplicitCastExpr 0x5559133c45d8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c44c0 <col:21> 'int' Int: 1
| |     `-IntegerLiteral 0x5559133c44a0 <col:21> 'int' 1
| `-EnumConstantDecl 0x5559133c4570 <col:24, col:32> col:24 OP_LT 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:186:5)'
|   `-ImplicitCastExpr 0x5559133c45f0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559133c4550 <col:32> 'int' Int: 2
|       `-IntegerLiteral 0x5559133c4530 <col:32> 'int' 2
|-EnumDecl 0x5559133c4608 <line:190:5, line:195:5> line:190:5
| |-EnumConstantDecl 0x5559133c4710 <line:192:2, col:15> col:2 offset_mac 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:190:5)'
| | `-ImplicitCastExpr 0x5559133c4880 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c46f0 <col:15> 'int' Int: 0
| |     `-IntegerLiteral 0x5559133c46d0 <col:15> 'int' 0
| |-EnumConstantDecl 0x5559133c47a0 <line:193:2, col:15> col:2 referenced offset_net 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:190:5)'
| | `-ImplicitCastExpr 0x5559133c4898 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c4780 <col:15> 'int' Int: 256
| |     `-IntegerLiteral 0x5559133c4760 <col:15> 'int' 256
| `-EnumConstantDecl 0x5559133c4830 <line:194:2, col:18> col:2 referenced offset_transp 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:190:5)'
|   `-ImplicitCastExpr 0x5559133c48b0 <col:18> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559133c4810 <col:18> 'int' Int: 512
|       `-IntegerLiteral 0x5559133c47f0 <col:18> 'int' 512
|-EnumDecl 0x5559133c48c8 <line:197:5, line:200:5> line:197:5
| |-EnumConstantDecl 0x5559133c49d0 <line:198:2, col:26> col:2 referenced PERFORM_BINARY_SEARCH 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:197:5)'
| | `-ImplicitCastExpr 0x5559133c4ab0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559133c49b0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5559133c4990 <col:26> 'int' 1
| `-EnumConstantDecl 0x5559133c4a60 <line:199:2, col:22> col:2 referenced MIN_BINARY_SEARCH 'IPFilter::(anonymous enum at ../elements/ip/ipfilter.hh:197:5)'
|   `-ImplicitCastExpr 0x5559133c4ac8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559133c4a40 <col:22> 'int' Int: 7
|       `-IntegerLiteral 0x5559133c4a20 <col:22> 'int' 7
|-CXXRecordDecl 0x5559133c4ae0 <line:202:5, line:207:5> line:202:11 referenced union PrimitiveData definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5559133c4bf8 <col:5, col:11> col:11 implicit union PrimitiveData
| |-FieldDecl 0x5559133c4c98 <line:203:2, col:11> col:11 u 'uint32_t':'unsigned int'
| |-FieldDecl 0x5559133c4cf8 <line:204:2, col:10> col:10 i 'int32_t':'int'
| |-FieldDecl 0x5559133c4d68 <line:205:2, col:17> col:17 ip4 'struct in_addr':'in_addr'
| |-FieldDecl 0x5559133c4e20 <line:206:2, col:19> col:16 c 'unsigned char [8]'
| |-CXXConstructorDecl 0x5559133ca060 <line:202:11> col:11 implicit used PrimitiveData 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5559133ca478 <col:11>
| |-CXXConstructorDecl 0x5559133ca140 <col:11> col:11 implicit constexpr PrimitiveData 'void (const IPFilter::PrimitiveData &)' inline default trivial noexcept-unevaluated 0x5559133ca140
| | `-ParmVarDecl 0x5559133ca258 <col:11> col:11 'const IPFilter::PrimitiveData &'
| |-CXXConstructorDecl 0x5559133ca2f8 <col:11> col:11 implicit constexpr PrimitiveData 'void (IPFilter::PrimitiveData &&)' inline default trivial noexcept-unevaluated 0x5559133ca2f8
| | `-ParmVarDecl 0x5559133ca408 <col:11> col:11 'IPFilter::PrimitiveData &&'
| `-CXXDestructorDecl 0x5559133ca968 <col:11> col:11 implicit ~PrimitiveData 'void ()' inline default trivial noexcept-unevaluated 0x5559133ca968
|-CXXRecordDecl 0x5559133c4e88 <line:209:5, line:251:5> line:209:12 referenced struct Primitive definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5559133c4fa8 <col:5, col:12> col:12 implicit referenced struct Primitive
| |-FieldDecl 0x5559133c5050 <line:211:2, col:6> col:6 referenced _type 'int'
| |-FieldDecl 0x5559133c50b8 <line:212:2, col:6> col:6 _data 'int'
| |-FieldDecl 0x5559133c5120 <line:214:2, col:6> col:6 _op 'int'
| |-FieldDecl 0x5559133c5180 <line:215:2, col:7> col:7 _op_negated 'bool'
| |-FieldDecl 0x5559133c51e8 <line:217:2, col:6> col:6 _srcdst 'int'
| |-FieldDecl 0x5559133c5250 <line:218:2, col:6> col:6 referenced _transp_proto 'int'
| |-FieldDecl 0x5559133c52b0 <line:220:2, col:16> col:16 _u 'IPFilter::PrimitiveData'
| |-FieldDecl 0x5559133c5310 <line:221:2, col:16> col:16 _mask 'IPFilter::PrimitiveData'
| |-CXXConstructorDecl 0x5559133c53c0 <line:223:2, col:25> col:2 used Primitive 'void ()'
| | |-CXXCtorInitializer Field 0x5559133c52b0 '_u' 'IPFilter::PrimitiveData'
| | | `-CXXConstructExpr 0x5559133ca488 <col:2> 'IPFilter::PrimitiveData' 'void () noexcept'
| | |-CXXCtorInitializer Field 0x5559133c5310 '_mask' 'IPFilter::PrimitiveData'
| | | `-CXXConstructExpr 0x5559133ca4d8 <col:2> 'IPFilter::PrimitiveData' 'void () noexcept'
| | `-CompoundStmt 0x5559133ca598 <col:14, col:25>
| |   `-CXXMemberCallExpr 0x5559133ca578 <col:16, col:22> 'void'
| |     `-MemberExpr 0x5559133ca548 <col:16> '<bound member function type>' ->clear 0x5559133c5488
| |       `-CXXThisExpr 0x5559133ca538 <col:16> 'IPFilter::Primitive *' implicit this
| |-CXXMethodDecl 0x5559133c5488 <line:225:2, col:13> col:7 used clear 'void ()'
| |-CXXMethodDecl 0x5559133c5688 <line:226:2, col:35> col:7 set_type 'void (int, ErrorHandler *)'
| | |-ParmVarDecl 0x5559133c5540 <col:16> col:19 'int'
| | `-ParmVarDecl 0x5559133c55b8 <col:21, col:34> col:35 'ErrorHandler *'
| |-CXXMethodDecl 0x5559133c5860 <line:227:2, col:37> col:7 set_srcdst 'void (int, ErrorHandler *)'
| | |-ParmVarDecl 0x5559133c5750 <col:18> col:21 'int'
| | `-ParmVarDecl 0x5559133c57c8 <col:23, col:36> col:37 'ErrorHandler *'
| |-CXXMethodDecl 0x5559133c5a38 <line:228:2, col:43> col:7 set_transp_proto 'void (int, ErrorHandler *)'
| | |-ParmVarDecl 0x5559133c5928 <col:24> col:27 'int'
| | `-ParmVarDecl 0x5559133c59a0 <col:29, col:42> col:43 'ErrorHandler *'
| |-CXXMethodDecl 0x5559133c5db0 <line:230:2, line:231:26> line:230:6 set_mask 'int (uint32_t, int, uint32_t, ErrorHandler *)'
| | |-ParmVarDecl 0x5559133c5af8 <col:15, col:24> col:24 full_mask 'uint32_t':'unsigned int'
| | |-ParmVarDecl 0x5559133c5b78 <col:35, col:39> col:39 shift 'int'
| | |-ParmVarDecl 0x5559133c5bf0 <col:46, col:55> col:55 provided_mask 'uint32_t':'unsigned int'
| | `-ParmVarDecl 0x5559133c5c68 <line:231:8, col:22> col:22 errh 'ErrorHandler *'
| |-CXXMethodDecl 0x5559133c61d0 <line:232:2, line:234:23> line:232:6 check 'int (const IPFilter::Primitive &, int, int, const IPFilter::PrimitiveData &, ErrorHandler *)'
| | |-ParmVarDecl 0x5559133c5ea8 <col:12, col:29> col:29 prev_prim 'const IPFilter::Primitive &'
| | |-ParmVarDecl 0x5559133c5f28 <col:40, col:44> col:44 level 'int'
| | |-ParmVarDecl 0x5559133c5fa8 <line:233:5, col:9> col:9 mask_dt 'int'
| | |-ParmVarDecl 0x5559133c6048 <col:18, col:39> col:39 mask 'const IPFilter::PrimitiveData &'
| | `-ParmVarDecl 0x5559133c60c0 <line:234:5, col:19> col:19 errh 'ErrorHandler *'
| |-CXXMethodDecl 0x5559133c65e8 <line:235:2, col:72> col:7 compile 'void (Classification::Wordwise::Program &, Vector<int> &) const'
| | |-ParmVarDecl 0x5559133c6350 <col:15, col:50> col:50 p 'Classification::Wordwise::Program &'
| | `-ParmVarDecl 0x5559133c64a0 <col:53, col:66> col:66 tree 'Vector<int> &'
| |-CXXMethodDecl 0x5559133c66b8 <line:237:2, col:26> col:7 has_transp_proto 'bool () const'
| |-CXXMethodDecl 0x5559133c6778 <line:238:2, col:28> col:7 negation_is_simple 'bool () const'
| |-CXXMethodDecl 0x5559133c6838 <line:239:2, col:21> col:7 simple_negate 'void ()'
| |-CXXMethodDecl 0x5559133c68f8 <line:241:2, col:24> col:9 unparse_type 'String () const'
| |-CXXMethodDecl 0x5559133c69b8 <line:242:2, col:22> col:9 unparse_op 'String () const'
| |-CXXMethodDecl 0x5559133c6bc8 <line:243:2, col:49> col:16 used unparse_type 'String (int, int)' static
| | |-ParmVarDecl 0x5559133c6a70 <col:29, col:33> col:33 srcdst 'int'
| | `-ParmVarDecl 0x5559133c6af0 <col:41, col:45> col:45 type 'int'
| |-CXXMethodDecl 0x5559133c6d20 <line:244:2, col:53> col:16 used unparse_transp_proto 'String (int)' static
| | `-ParmVarDecl 0x5559133c6c90 <col:37, col:41> col:41 transp_proto 'int'
| |-AccessSpecDecl 0x5559133c6dc8 <line:246:7, col:14> col:7 private
| |-CXXMethodDecl 0x5559133c6f60 <line:248:2, col:54> col:6 type_error 'int (ErrorHandler *, const char *) const'
| | |-ParmVarDecl 0x5559133c6e00 <col:17, col:31> col:31 errh 'ErrorHandler *'
| | `-ParmVarDecl 0x5559133c6e80 <col:37, col:49> col:49 msg 'const char *'
| |-CXXMethodDecl 0x5559133c7528 <line:249:2, col:138> col:7 add_comparison_exprs 'void (Classification::Wordwise::Program &, Vector<int> &, int, int, bool, bool) const'
| | |-ParmVarDecl 0x5559133c7070 <col:28, col:63> col:63 p 'Classification::Wordwise::Program &'
| | |-ParmVarDecl 0x5559133c71c0 <col:66, col:79> col:79 tree 'Vector<int> &'
| | |-ParmVarDecl 0x5559133c7240 <col:85, col:89> col:89 offset 'int'
| | |-ParmVarDecl 0x5559133c72c0 <col:97, col:101> col:101 shift 'int'
| | |-ParmVarDecl 0x5559133c7338 <col:108, col:113> col:113 swapped 'bool'
| | `-ParmVarDecl 0x5559133c73b0 <col:122, col:127> col:127 op_negate 'bool'
| |-CXXConstructorDecl 0x5559133ca7e8 <line:209:12> col:12 implicit constexpr Primitive 'void (const IPFilter::Primitive &)' inline default trivial noexcept-unevaluated 0x5559133ca7e8
| | `-ParmVarDecl 0x5559133ca8f8 <col:12> col:12 'const IPFilter::Primitive &'
| `-CXXConstructorDecl 0x5559133d3cc8 <col:12> col:12 implicit constexpr Primitive 'void (IPFilter::Primitive &&)' inline default trivial noexcept-unevaluated 0x5559133d3cc8
|   `-ParmVarDecl 0x5559133d3dd8 <col:12> col:12 'IPFilter::Primitive &&'
|-AccessSpecDecl 0x5559133c7610 <line:253:3, col:12> col:3 protected
|-FieldDecl 0x5559133c7648 <line:255:5, col:21> col:21 _zprog 'IPFilter::IPFilterProgram':'Classification::Wordwise::CompressedProgram'
|-AccessSpecDecl 0x5559133c7698 <line:257:3, col:10> col:3 private
|-CXXMethodDecl 0x5559133c7ab0 <line:259:5, line:260:51> line:259:16 lookup 'int (String, int, int, uint32_t &, const Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x5559133c76d0 <col:23, col:30> col:30 word 'String' destroyed
| |-ParmVarDecl 0x5559133c7750 <col:36, col:40> col:40 type 'int'
| |-ParmVarDecl 0x5559133c77d0 <col:46, col:50> col:50 transp_proto 'int'
| |-ParmVarDecl 0x5559133c7848 <col:64, col:74> col:74 data 'uint32_t &'
| |-ParmVarDecl 0x5559133c78c0 <line:260:9, col:24> col:24 context 'const Element *'
| `-ParmVarDecl 0x5559133c7938 <col:33, col:47> col:47 errh 'ErrorHandler *'
|-CXXRecordDecl 0x5559133c7b80 <line:262:5, line:294:5> line:262:12 struct Parser definition
| |-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5559133c7c98 <col:5, col:12> col:12 implicit referenced struct Parser
| |-FieldDecl 0x5559133c7e10 <line:263:2, col:24> col:24 _words 'const Vector<String> &'
| |-FieldDecl 0x5559133c7f50 <line:264:2, col:15> col:15 _tree 'Vector<int> &'
| |-FieldDecl 0x5559133c8000 <line:265:2, col:37> col:37 _prog 'Classification::Wordwise::Program &'
| |-FieldDecl 0x5559133c8060 <line:266:2, col:17> col:17 _context 'const Element *'
| |-FieldDecl 0x5559133c80c0 <line:267:2, col:16> col:16 _errh 'ErrorHandler *'
| |-FieldDecl 0x5559133c8120 <line:268:2, col:12> col:12 _prev_prim 'IPFilter::Primitive'
| |-CXXConstructorDecl 0x5559133c86e8 <line:270:2, line:275:2> line:270:2 Parser 'void (const Vector<String> &, Vector<int> &, Classification::Wordwise::Program &, const Element *, ErrorHandler *)'
| | |-ParmVarDecl 0x5559133c8250 <col:9, col:31> col:31 used words 'const Vector<String> &'
| | |-ParmVarDecl 0x5559133c83a0 <col:38, col:51> col:51 used tree 'Vector<int> &'
| | |-ParmVarDecl 0x5559133c8468 <line:271:9, col:44> col:44 used prog 'Classification::Wordwise::Program &'
| | |-ParmVarDecl 0x5559133c84e0 <line:272:9, col:24> col:24 used context 'const Element *'
| | |-ParmVarDecl 0x5559133c8558 <col:33, col:47> col:47 used errh 'ErrorHandler *'
| | |-CXXCtorInitializer Field 0x5559133c7e10 '_words' 'const Vector<String> &'
| | | `-DeclRefExpr 0x5559133ca5b0 <line:273:15> 'const Vector<String>':'const Vector<String>' lvalue ParmVar 0x5559133c8250 'words' 'const Vector<String> &'
| | |-CXXCtorInitializer Field 0x5559133c7f50 '_tree' 'Vector<int> &'
| | | `-DeclRefExpr 0x5559133ca618 <col:29> 'Vector<int>':'Vector<int>' lvalue ParmVar 0x5559133c83a0 'tree' 'Vector<int> &'
| | |-CXXCtorInitializer Field 0x5559133c8000 '_prog' 'Classification::Wordwise::Program &'
| | | `-DeclRefExpr 0x5559133ca680 <col:42> 'Classification::Wordwise::Program':'Classification::Wordwise::Program' lvalue ParmVar 0x5559133c8468 'prog' 'Classification::Wordwise::Program &'
| | |-CXXCtorInitializer Field 0x5559133c8060 '_context' 'const Element *'
| | | `-ImplicitCastExpr 0x5559133ca728 <col:58> 'const Element *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5559133ca6e8 <col:58> 'const Element *' lvalue ParmVar 0x5559133c84e0 'context' 'const Element *'
| | |-CXXCtorInitializer Field 0x5559133c80c0 '_errh' 'ErrorHandler *'
| | | `-ImplicitCastExpr 0x5559133ca7a8 <line:274:14> 'ErrorHandler *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5559133ca768 <col:14> 'ErrorHandler *' lvalue ParmVar 0x5559133c8558 'errh' 'ErrorHandler *'
| | |-CXXCtorInitializer Field 0x5559133c8120 '_prev_prim' 'IPFilter::Primitive'
| | | `-CXXConstructExpr 0x5559133d3e48 <line:270:2> 'IPFilter::Primitive' 'void ()'
| | `-CompoundStmt 0x5559133d3ec8 <line:274:20, line:275:2>
| |-CXXRecordDecl 0x5559133c87b8 <line:277:2, line:283:2> line:277:9 struct parse_state definition
| | |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x5559133c88d8 <col:2, col:9> col:9 implicit referenced struct parse_state
| | |-FieldDecl 0x5559133c8980 <line:278:6, col:10> col:10 state 'int'
| | |-FieldDecl 0x5559133c89e8 <line:279:6, col:10> col:10 last_pos 'int'
| | `-CXXConstructorDecl 0x5559133c8b28 <line:280:6, line:282:6> line:280:6 parse_state 'void (int)'
| |   |-ParmVarDecl 0x5559133c8a50 <col:18, col:22> col:22 used s 'int'
| |   |-CXXCtorInitializer Field 0x5559133c8980 'state' 'int'
| |   | `-ImplicitCastExpr 0x5559133d3f18 <line:281:11> 'int' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5559133d3ed8 <col:11> 'int' lvalue ParmVar 0x5559133c8a50 's' 'int'
| |   `-CompoundStmt 0x5559133d3f60 <col:14, line:282:6>
| |-EnumDecl 0x5559133c8bf0 <line:284:2, line:290:2> line:284:2
| | |-EnumConstantDecl 0x5559133c8cb0 <line:285:6> col:6 s_expr0 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8d00 <col:15> col:15 s_expr1 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8d50 <col:24> col:24 s_expr2 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8da0 <line:286:6> col:6 s_orexpr0 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8df0 <col:17> col:17 s_orexpr1 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8e40 <line:287:6> col:6 s_term0 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8e90 <col:15> col:15 s_term1 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8ee0 <col:24> col:24 s_term2 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8f30 <line:288:6> col:6 s_factor0 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8f80 <col:17> col:17 s_factor1 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c8fd0 <col:28> col:28 s_factor2 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c9020 <line:289:6> col:6 s_factor0_neg 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | |-EnumConstantDecl 0x5559133c9070 <col:21> col:21 s_factor1_neg 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| | `-EnumConstantDecl 0x5559133c90c0 <col:36> col:36 s_factor2_neg 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-CXXMethodDecl 0x5559133c9240 <line:291:2, col:37> col:7 parse_slot 'void (int, int)'
| | |-ParmVarDecl 0x5559133c9128 <col:18, col:22> col:22 output 'int'
| | `-ParmVarDecl 0x5559133c91a8 <col:30, col:34> col:34 pos 'int'
| |-CXXMethodDecl 0x5559133c93a0 <line:292:2, col:34> col:6 parse_expr_iterative 'int (int)'
| | `-ParmVarDecl 0x5559133c9308 <col:27, col:31> col:31 pos 'int'
| `-CXXMethodDecl 0x5559133c9578 <line:293:2, col:38> col:6 parse_test 'int (int, bool)'
|   |-ParmVarDecl 0x5559133c9460 <col:17, col:21> col:21 pos 'int'
|   `-ParmVarDecl 0x5559133c94d8 <col:26, col:31> col:31 negated 'bool'
|-CXXMethodDecl 0x5559133c9870 <line:296:5, line:297:43> line:296:16 used length_checked_match 'int (const IPFilter::IPFilterProgram &, const Packet *, int)' static
| |-ParmVarDecl 0x5559133c9650 <col:37, col:60> col:60 zprog 'const IPFilter::IPFilterProgram &'
| |-ParmVarDecl 0x5559133c96c8 <line:297:9, col:23> col:23 p 'const Packet *'
| `-ParmVarDecl 0x5559133c9748 <col:26, col:30> col:30 packet_length 'int'
|-CXXMethodDecl 0x5559133c9a50 <line:299:5, col:61> col:19 program_string 'String (Element *, void *)' static
| |-ParmVarDecl 0x5559133c9938 <col:34, col:43> col:43 e 'Element *'
| `-ParmVarDecl 0x5559133c99b8 <col:46, col:52> col:52 user_data 'void *'
|-CXXConstructorDecl 0x5559133c9b28 <line:110:7> col:7 implicit IPFilter 'void (const IPFilter &)' inline default_delete noexcept-unevaluated 0x5559133c9b28
| `-ParmVarDecl 0x5559133c9c38 <col:7> col:7 'const IPFilter &'
`-CXXMethodDecl 0x5559133c9cd8 <col:7> col:7 implicit operator= 'IPFilter &(const IPFilter &)' inline default_delete noexcept-unevaluated 0x5559133c9cd8
  `-ParmVarDecl 0x5559133c9de8 <col:7> col:7 'const IPFilter &'

Layout: <CGRecordLayout
  LLVMType:%class.IPFilter = type { %class.Element.base, [4 x i8], %"class.Classification::Wordwise::CompressedProgram" }
  NonVirtualBaseLLVMType:%class.IPFilter = type { %class.Element.base, [4 x i8], %"class.Classification::Wordwise::CompressedProgram" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union IPFilter::PrimitiveData
         0 |   uint32_t u
         0 |   int32_t i
         0 |   struct in_addr ip4
         0 |     in_addr_t s_addr
         0 |   unsigned char [8] c
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct IPFilter::Primitive
         0 |   int _type
         4 |   int _data
         8 |   int _op
        12 |   _Bool _op_negated
        16 |   int _srcdst
        20 |   int _transp_proto
        24 |   union IPFilter::PrimitiveData _u
        24 |     uint32_t u
        24 |     int32_t i
        24 |     struct in_addr ip4
        24 |       in_addr_t s_addr
        24 |     unsigned char [8] c
        32 |   union IPFilter::PrimitiveData _mask
        32 |     uint32_t u
        32 |     int32_t i
        32 |     struct in_addr ip4
        32 |       in_addr_t s_addr
        32 |     unsigned char [8] c
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55591307dd08 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55591307de28 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55591307def0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55591312c2e0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555913131ce8 <col:8>
|-CXXConstructorDecl 0x55591312c3e8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55591312c3e8
| `-ParmVarDecl 0x55591312c4f8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55591312c598 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55591312c6a8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55591307def0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x555913131f00 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x555913131ed0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55591307def0
| |     `-CXXStaticCastExpr 0x555913131ea0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x555913131e70 <col:8> 'in_addr' lvalue ParmVar 0x55591312c6a8 '' 'in_addr &&'
| `-CompoundStmt 0x555913131f48 <col:8>
`-CXXDestructorDecl 0x555913132180 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133c4ae0 <../elements/ip/ipfilter.hh:202:5, line:207:5> line:202:11 referenced union PrimitiveData definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5559133c4bf8 <col:5, col:11> col:11 implicit union PrimitiveData
|-FieldDecl 0x5559133c4c98 <line:203:2, col:11> col:11 u 'uint32_t':'unsigned int'
|-FieldDecl 0x5559133c4cf8 <line:204:2, col:10> col:10 i 'int32_t':'int'
|-FieldDecl 0x5559133c4d68 <line:205:2, col:17> col:17 ip4 'struct in_addr':'in_addr'
|-FieldDecl 0x5559133c4e20 <line:206:2, col:19> col:16 c 'unsigned char [8]'
|-CXXConstructorDecl 0x5559133ca060 <line:202:11> col:11 implicit used PrimitiveData 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5559133ca478 <col:11>
|-CXXConstructorDecl 0x5559133ca140 <col:11> col:11 implicit constexpr PrimitiveData 'void (const IPFilter::PrimitiveData &)' inline default trivial noexcept-unevaluated 0x5559133ca140
| `-ParmVarDecl 0x5559133ca258 <col:11> col:11 'const IPFilter::PrimitiveData &'
|-CXXConstructorDecl 0x5559133ca2f8 <col:11> col:11 implicit constexpr PrimitiveData 'void (IPFilter::PrimitiveData &&)' inline default trivial noexcept-unevaluated 0x5559133ca2f8
| `-ParmVarDecl 0x5559133ca408 <col:11> col:11 'IPFilter::PrimitiveData &&'
`-CXXDestructorDecl 0x5559133ca968 <col:11> col:11 implicit ~PrimitiveData 'void ()' inline default trivial noexcept-unevaluated 0x5559133ca968

Layout: <CGRecordLayout
  LLVMType:%"union.IPFilter::PrimitiveData" = type { i32, [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133c4e88 <../elements/ip/ipfilter.hh:209:5, line:251:5> line:209:12 referenced struct Primitive definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5559133c4fa8 <col:5, col:12> col:12 implicit referenced struct Primitive
|-FieldDecl 0x5559133c5050 <line:211:2, col:6> col:6 referenced _type 'int'
|-FieldDecl 0x5559133c50b8 <line:212:2, col:6> col:6 referenced _data 'int'
|-FieldDecl 0x5559133c5120 <line:214:2, col:6> col:6 referenced _op 'int'
|-FieldDecl 0x5559133c5180 <line:215:2, col:7> col:7 referenced _op_negated 'bool'
|-FieldDecl 0x5559133c51e8 <line:217:2, col:6> col:6 referenced _srcdst 'int'
|-FieldDecl 0x5559133c5250 <line:218:2, col:6> col:6 referenced _transp_proto 'int'
|-FieldDecl 0x5559133c52b0 <line:220:2, col:16> col:16 _u 'IPFilter::PrimitiveData'
|-FieldDecl 0x5559133c5310 <line:221:2, col:16> col:16 _mask 'IPFilter::PrimitiveData'
|-CXXConstructorDecl 0x5559133c53c0 <line:223:2, col:25> col:2 used Primitive 'void ()'
| |-CXXCtorInitializer Field 0x5559133c52b0 '_u' 'IPFilter::PrimitiveData'
| | `-CXXConstructExpr 0x5559133ca488 <col:2> 'IPFilter::PrimitiveData' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5559133c5310 '_mask' 'IPFilter::PrimitiveData'
| | `-CXXConstructExpr 0x5559133ca4d8 <col:2> 'IPFilter::PrimitiveData' 'void () noexcept'
| `-CompoundStmt 0x5559133ca598 <col:14, col:25>
|   `-CXXMemberCallExpr 0x5559133ca578 <col:16, col:22> 'void'
|     `-MemberExpr 0x5559133ca548 <col:16> '<bound member function type>' ->clear 0x5559133c5488
|       `-CXXThisExpr 0x5559133ca538 <col:16> 'IPFilter::Primitive *' implicit this
|-CXXMethodDecl 0x5559133c5488 <line:225:2, col:13> col:7 used clear 'void ()'
|-CXXMethodDecl 0x5559133c5688 <line:226:2, col:35> col:7 set_type 'void (int, ErrorHandler *)'
| |-ParmVarDecl 0x5559133c5540 <col:16> col:19 'int'
| `-ParmVarDecl 0x5559133c55b8 <col:21, col:34> col:35 'ErrorHandler *'
|-CXXMethodDecl 0x5559133c5860 <line:227:2, col:37> col:7 set_srcdst 'void (int, ErrorHandler *)'
| |-ParmVarDecl 0x5559133c5750 <col:18> col:21 'int'
| `-ParmVarDecl 0x5559133c57c8 <col:23, col:36> col:37 'ErrorHandler *'
|-CXXMethodDecl 0x5559133c5a38 <line:228:2, col:43> col:7 set_transp_proto 'void (int, ErrorHandler *)'
| |-ParmVarDecl 0x5559133c5928 <col:24> col:27 'int'
| `-ParmVarDecl 0x5559133c59a0 <col:29, col:42> col:43 'ErrorHandler *'
|-CXXMethodDecl 0x5559133c5db0 <line:230:2, line:231:26> line:230:6 set_mask 'int (uint32_t, int, uint32_t, ErrorHandler *)'
| |-ParmVarDecl 0x5559133c5af8 <col:15, col:24> col:24 full_mask 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559133c5b78 <col:35, col:39> col:39 shift 'int'
| |-ParmVarDecl 0x5559133c5bf0 <col:46, col:55> col:55 provided_mask 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5559133c5c68 <line:231:8, col:22> col:22 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559133c61d0 <line:232:2, line:234:23> line:232:6 check 'int (const IPFilter::Primitive &, int, int, const IPFilter::PrimitiveData &, ErrorHandler *)'
| |-ParmVarDecl 0x5559133c5ea8 <col:12, col:29> col:29 prev_prim 'const IPFilter::Primitive &'
| |-ParmVarDecl 0x5559133c5f28 <col:40, col:44> col:44 level 'int'
| |-ParmVarDecl 0x5559133c5fa8 <line:233:5, col:9> col:9 mask_dt 'int'
| |-ParmVarDecl 0x5559133c6048 <col:18, col:39> col:39 mask 'const IPFilter::PrimitiveData &'
| `-ParmVarDecl 0x5559133c60c0 <line:234:5, col:19> col:19 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559133c65e8 <line:235:2, col:72> col:7 compile 'void (Classification::Wordwise::Program &, Vector<int> &) const'
| |-ParmVarDecl 0x5559133c6350 <col:15, col:50> col:50 p 'Classification::Wordwise::Program &'
| `-ParmVarDecl 0x5559133c64a0 <col:53, col:66> col:66 tree 'Vector<int> &'
|-CXXMethodDecl 0x5559133c66b8 <line:237:2, col:26> col:7 has_transp_proto 'bool () const'
|-CXXMethodDecl 0x5559133c6778 <line:238:2, col:28> col:7 negation_is_simple 'bool () const'
|-CXXMethodDecl 0x5559133c6838 <line:239:2, col:21> col:7 simple_negate 'void ()'
|-CXXMethodDecl 0x5559133c68f8 <line:241:2, col:24> col:9 unparse_type 'String () const'
|-CXXMethodDecl 0x5559133c69b8 <line:242:2, col:22> col:9 unparse_op 'String () const'
|-CXXMethodDecl 0x5559133c6bc8 <line:243:2, col:49> col:16 used unparse_type 'String (int, int)' static
| |-ParmVarDecl 0x5559133c6a70 <col:29, col:33> col:33 srcdst 'int'
| `-ParmVarDecl 0x5559133c6af0 <col:41, col:45> col:45 type 'int'
|-CXXMethodDecl 0x5559133c6d20 <line:244:2, col:53> col:16 used unparse_transp_proto 'String (int)' static
| `-ParmVarDecl 0x5559133c6c90 <col:37, col:41> col:41 transp_proto 'int'
|-AccessSpecDecl 0x5559133c6dc8 <line:246:7, col:14> col:7 private
|-CXXMethodDecl 0x5559133c6f60 <line:248:2, col:54> col:6 type_error 'int (ErrorHandler *, const char *) const'
| |-ParmVarDecl 0x5559133c6e00 <col:17, col:31> col:31 errh 'ErrorHandler *'
| `-ParmVarDecl 0x5559133c6e80 <col:37, col:49> col:49 msg 'const char *'
|-CXXMethodDecl 0x5559133c7528 <line:249:2, col:138> col:7 add_comparison_exprs 'void (Classification::Wordwise::Program &, Vector<int> &, int, int, bool, bool) const'
| |-ParmVarDecl 0x5559133c7070 <col:28, col:63> col:63 p 'Classification::Wordwise::Program &'
| |-ParmVarDecl 0x5559133c71c0 <col:66, col:79> col:79 tree 'Vector<int> &'
| |-ParmVarDecl 0x5559133c7240 <col:85, col:89> col:89 offset 'int'
| |-ParmVarDecl 0x5559133c72c0 <col:97, col:101> col:101 shift 'int'
| |-ParmVarDecl 0x5559133c7338 <col:108, col:113> col:113 swapped 'bool'
| `-ParmVarDecl 0x5559133c73b0 <col:122, col:127> col:127 op_negate 'bool'
|-CXXConstructorDecl 0x5559133ca7e8 <line:209:12> col:12 implicit constexpr Primitive 'void (const IPFilter::Primitive &)' inline default trivial noexcept-unevaluated 0x5559133ca7e8
| `-ParmVarDecl 0x5559133ca8f8 <col:12> col:12 'const IPFilter::Primitive &'
`-CXXConstructorDecl 0x5559133d3cc8 <col:12> col:12 implicit constexpr Primitive 'void (IPFilter::Primitive &&)' inline default trivial noexcept-unevaluated 0x5559133d3cc8
  `-ParmVarDecl 0x5559133d3dd8 <col:12> col:12 'IPFilter::Primitive &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.IPFilter::Primitive" = type { i32, i32, i32, i8, i32, i32, %"union.IPFilter::PrimitiveData", %"union.IPFilter::PrimitiveData" }
  NonVirtualBaseLLVMType:%"struct.IPFilter::Primitive" = type { i32, i32, i32, i8, i32, i32, %"union.IPFilter::PrimitiveData", %"union.IPFilter::PrimitiveData" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<20> >
         0 |   vector_memory<class sized_array_memory<20> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Classification::Wordwise::Insn>
         0 |   class vector_memory<class sized_array_memory<20> > vm_
         0 |     vector_memory<class sized_array_memory<20> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Classification::Wordwise::Program
         0 |   class Vector<struct Classification::Wordwise::Insn> _insn
         0 |     class vector_memory<class sized_array_memory<20> > vm_
         0 |       vector_memory<class sized_array_memory<20> >::type * l_
         8 |       vector_memory::size_type n_
        12 |       vector_memory::size_type capacity_
        16 |   int _output_everything
        20 |   unsigned int _safe_length
        24 |   unsigned int _align_offset
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555913357f30 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<20>'
|-CXXRecordDecl 0x555913358108 prev 0x555913357f30 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555913358198 <col:46, col:52> col:46 public
|-TypedefDecl 0x5559133581c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913359d90 <line:13:5, col:31> col:31 type 'typename sized_array_memory<20>::type':'char_array<20>'
| `-ElaboratedType 0x555913359d40 'typename sized_array_memory<20>::type' sugar
|   `-TypedefType 0x555913358670 'sized_array_memory<20>::type' sugar
|     |-Typedef 0x555913358570 'type'
|     `-TemplateSpecializationType 0x555913358500 'char_array<20UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5559133583e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 20
|       |   `-SubstNonTypeTemplateParmExpr 0x5559133583c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5559133583a0 <col:24> 'unsigned long' 20
|       `-RecordType 0x5559133584e0 'char_array<20>'
|         `-ClassTemplateSpecialization 0x555913358400 'char_array'
|-TypedefDecl 0x555913359e48 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<20> >::type *'
| `-PointerType 0x555913359e10 'vector_memory<sized_array_memory<20> >::type *'
|   `-TypedefType 0x555913359df0 'vector_memory<sized_array_memory<20> >::type' sugar
|     |-Typedef 0x555913359d90 'type'
|     `-ElaboratedType 0x555913359d40 'typename sized_array_memory<20>::type' sugar
|       `-TypedefType 0x555913358670 'sized_array_memory<20>::type' sugar
|         |-Typedef 0x555913358570 'type'
|         `-TemplateSpecializationType 0x555913358500 'char_array<20UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5559133583e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 20
|           |   `-SubstNonTypeTemplateParmExpr 0x5559133583c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5559133583a0 <col:24> 'unsigned long' 20
|           `-RecordType 0x5559133584e0 'char_array<20>'
|             `-ClassTemplateSpecialization 0x555913358400 'char_array'
|-CXXMethodDecl 0x555913359fc8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<20> >::type *) const' inline
| `-ParmVarDecl 0x555913359ed8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXConstructorDecl 0x55591335a0b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55591335a198 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55591335a468 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<20> > &)'
| `-ParmVarDecl 0x55591335a370 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<20> > &'
|-CXXMethodDecl 0x55591335a6a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<20> >::type *)'
| |-ParmVarDecl 0x55591335a520 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55591335a598 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55591335a878 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<20> >::type *)'
| |-ParmVarDecl 0x55591335a768 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55591335a7e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55591335a9d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<20> >::iterator ()'
|-CXXMethodDecl 0x55591335aaa8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<20> >::iterator ()'
|-CXXMethodDecl 0x55591335acf8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<20> >::iterator (vector_memory<sized_array_memory<20> >::iterator, const vector_memory<sized_array_memory<20> >::type *)'
| |-ParmVarDecl 0x55591335ab68 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<20> >::iterator':'vector_memory<sized_array_memory<20> >::type *'
| `-ParmVarDecl 0x55591335abe0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55591335af58 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<20> >::iterator (vector_memory<sized_array_memory<20> >::iterator, vector_memory<sized_array_memory<20> >::iterator)'
| |-ParmVarDecl 0x55591335adc8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<20> >::iterator':'vector_memory<sized_array_memory<20> >::type *'
| `-ParmVarDecl 0x55591335ae40 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<20> >::iterator':'vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55591335b118 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<20> >::type *)' inline
| `-ParmVarDecl 0x55591335b028 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55591335b2d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<20> >::type *)' inline
| `-ParmVarDecl 0x55591335b1e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55591335b390 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55591335b440 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55591335b700 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<20> >::type *)'
| |-ParmVarDecl 0x55591335b4f0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55591335b568 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55591335b998 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<20> > &)'
| `-ParmVarDecl 0x55591335b8a0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<20> > &'
|-FieldDecl 0x55591335ba60 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<20> >::type *'
|-FieldDecl 0x55591335bab0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55591335bb00 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.4 = type { %struct.char_array.5*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.4 = type { %struct.char_array.5*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555913356880 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Classification::Wordwise::Insn'
|-CXXRecordDecl 0x555913356a88 prev 0x555913356880 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555913357ea0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Insn>::type':'sized_array_memory<20>'
| `-ElaboratedType 0x555913357e50 'typename array_memory<Insn>::type' sugar
|   `-TypedefType 0x555913357e30 'conditional<true, sized_array_memory<20>, typed_array_memory<Classification::Wordwise::Insn> >::type' sugar
|     |-Typedef 0x555913357ce0 'type'
|     `-SubstTemplateTypeParmType 0x555913357b00 'sized_array_memory<20>' sugar
|       |-TemplateTypeParmType 0x555913100590 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913100538 'T'
|       `-RecordType 0x5559133575c0 'sized_array_memory<20>'
|         `-ClassTemplateSpecialization 0x5559133574d8 'sized_array_memory'
|-FieldDecl 0x55591335bb50 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Classification::Wordwise::Insn>::array_memory_type>':'vector_memory<sized_array_memory<20> >' mutable
|-AccessSpecDecl 0x55591335bba0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55591335bbd8 <line:118:5, col:15> col:15 value_type 'Classification::Wordwise::Insn':'Classification::Wordwise::Insn'
| `-SubstTemplateTypeParmType 0x555913356b20 'Classification::Wordwise::Insn' sugar
|   |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555913337d78 'T'
|   `-RecordType 0x55591300a850 'Classification::Wordwise::Insn'
|     `-CXXRecord 0x55591300a7c0 'Insn'
|-TypedefDecl 0x55591335bc68 <line:119:5, col:16> col:16 reference 'Classification::Wordwise::Insn &'
| `-LValueReferenceType 0x55591335bc30 'Classification::Wordwise::Insn &'
|   `-SubstTemplateTypeParmType 0x555913356b20 'Classification::Wordwise::Insn' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x55591300a850 'Classification::Wordwise::Insn'
|       `-CXXRecord 0x55591300a7c0 'Insn'
|-TypedefDecl 0x55591335bcf8 <line:120:5, col:22> col:22 const_reference 'const Classification::Wordwise::Insn &'
| `-LValueReferenceType 0x55591335bcc0 'const Classification::Wordwise::Insn &'
|   `-QualType 0x555913356b21 'const Classification::Wordwise::Insn' const
|     `-SubstTemplateTypeParmType 0x555913356b20 'Classification::Wordwise::Insn' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x55591300a850 'Classification::Wordwise::Insn'
|         `-CXXRecord 0x55591300a7c0 'Insn'
|-TypedefDecl 0x55591335bd88 <line:121:5, col:16> col:16 pointer 'Classification::Wordwise::Insn *'
| `-PointerType 0x55591335bd50 'Classification::Wordwise::Insn *'
|   `-SubstTemplateTypeParmType 0x555913356b20 'Classification::Wordwise::Insn' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x55591300a850 'Classification::Wordwise::Insn'
|       `-CXXRecord 0x55591300a7c0 'Insn'
|-TypedefDecl 0x55591335be18 <line:122:5, col:22> col:22 const_pointer 'const Classification::Wordwise::Insn *'
| `-PointerType 0x55591335bde0 'const Classification::Wordwise::Insn *'
|   `-QualType 0x555913356b21 'const Classification::Wordwise::Insn' const
|     `-SubstTemplateTypeParmType 0x555913356b20 'Classification::Wordwise::Insn' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x55591300a850 'Classification::Wordwise::Insn'
|         `-CXXRecord 0x55591300a7c0 'Insn'
|-TypedefDecl 0x55591335cc80 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Insn>::type':'const Classification::Wordwise::Insn &'
| `-ElaboratedType 0x55591335cc30 'typename fast_argument<Insn>::type' sugar
|   `-TypedefType 0x55591335cc10 'fast_argument<Classification::Wordwise::Insn, true>::type' sugar
|     |-Typedef 0x55591335cb48 'type'
|     `-LValueReferenceType 0x55591335cb10 'const Classification::Wordwise::Insn &'
|       `-QualType 0x55591335c8b1 'const Classification::Wordwise::Insn' const
|         `-SubstTemplateTypeParmType 0x55591335c8b0 'Classification::Wordwise::Insn' sugar
|           |-TemplateTypeParmType 0x5559131099a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555913109948 'T'
|           `-RecordType 0x55591300a850 'Classification::Wordwise::Insn'
|             `-CXXRecord 0x55591300a7c0 'Insn'
|-TypedefDecl 0x55591335cce8 <line:126:5, col:22> col:22 const_access_type 'const Classification::Wordwise::Insn &'
| `-LValueReferenceType 0x55591335bcc0 'const Classification::Wordwise::Insn &'
|   `-QualType 0x555913356b21 'const Classification::Wordwise::Insn' const
|     `-SubstTemplateTypeParmType 0x555913356b20 'Classification::Wordwise::Insn' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x55591300a850 'Classification::Wordwise::Insn'
|         `-CXXRecord 0x55591300a7c0 'Insn'
|-TypedefDecl 0x55591335cd40 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x55591335cda8 <line:130:5, col:16> col:16 iterator 'Classification::Wordwise::Insn *'
| `-PointerType 0x55591335bd50 'Classification::Wordwise::Insn *'
|   `-SubstTemplateTypeParmType 0x555913356b20 'Classification::Wordwise::Insn' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x55591300a850 'Classification::Wordwise::Insn'
|       `-CXXRecord 0x55591300a7c0 'Insn'
|-TypedefDecl 0x55591335ce10 <line:131:5, col:22> col:22 const_iterator 'const Classification::Wordwise::Insn *'
| `-PointerType 0x55591335bde0 'const Classification::Wordwise::Insn *'
|   `-QualType 0x555913356b21 'const Classification::Wordwise::Insn' const
|     `-SubstTemplateTypeParmType 0x555913356b20 'Classification::Wordwise::Insn' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x55591300a850 'Classification::Wordwise::Insn'
|         `-CXXRecord 0x55591300a7c0 'Insn'
|-EnumDecl 0x55591335ce68 <line:134:5> col:5
| `-EnumConstantDecl 0x55591335cf60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Classification::Wordwise::Insn>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55591335cf40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555913338e08 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555913338de0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555913338dc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55591335cfe8 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55591335d278 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| |-ParmVarDecl 0x55591335d0a0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591335d140 <col:41, col:61> col:61 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXConstructorDecl 0x55591335d538 <line:139:5, col:37> col:12 Vector 'void (const Vector<Classification::Wordwise::Insn> &)' inline
| `-ParmVarDecl 0x55591335d420 <col:19, col:36> col:36 x 'const Vector<Classification::Wordwise::Insn> &'
|-CXXConstructorDecl 0x55591335d7f8 <line:141:5, col:32> col:12 Vector 'void (Vector<Classification::Wordwise::Insn> &&)' inline
| `-ParmVarDecl 0x55591335d6e0 <col:19, col:31> col:31 x 'Vector<Classification::Wordwise::Insn> &&'
|-CXXMethodDecl 0x55591335db40 <line:144:5, col:51> col:23 operator= 'Vector<Classification::Wordwise::Insn> &(const Vector<Classification::Wordwise::Insn> &)' inline
| `-ParmVarDecl 0x55591335da20 <col:33, col:50> col:50 x 'const Vector<Classification::Wordwise::Insn> &'
|-CXXMethodDecl 0x55591335de50 <line:146:5, col:46> col:23 operator= 'Vector<Classification::Wordwise::Insn> &(Vector<Classification::Wordwise::Insn> &&)' inline
| `-ParmVarDecl 0x55591335dd30 <col:33, col:45> col:45 x 'Vector<Classification::Wordwise::Insn> &&'
|-CXXMethodDecl 0x55591335e140 <line:148:5, col:70> col:23 assign 'Vector<Classification::Wordwise::Insn> &(Vector::size_type, Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| |-ParmVarDecl 0x55591335df88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591335e000 <col:43, col:69> col:63 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXMethodDecl 0x55591335e298 <line:150:5, col:55> col:49 begin 'Vector<Classification::Wordwise::Insn>::iterator ()'
| |-NoInlineAttr 0x55591335e378 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591335e3d0 <col:30> Inherited
|-CXXMethodDecl 0x55591335e418 <line:151:5, col:53> col:49 end 'Vector<Classification::Wordwise::Insn>::iterator ()'
| |-NoInlineAttr 0x55591335e4c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591335e520 <col:30> Inherited
|-CXXMethodDecl 0x55591335e5b8 <line:152:5, col:63> col:55 used begin 'Vector<Classification::Wordwise::Insn>::const_iterator () const'
| |-NoInlineAttr 0x55591335e668 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591335e6c0 <col:30> Inherited
|-CXXMethodDecl 0x55591335e708 <line:153:5, col:61> col:55 used end 'Vector<Classification::Wordwise::Insn>::const_iterator () const'
| |-NoInlineAttr 0x55591335e7b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591335e810 <col:30> Inherited
|-CXXMethodDecl 0x55591335e858 <line:154:5, col:64> col:55 cbegin 'Vector<Classification::Wordwise::Insn>::const_iterator () const'
| |-NoInlineAttr 0x55591335e908 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591335e960 <col:30> Inherited
|-CXXMethodDecl 0x55591335e9a8 <line:155:5, col:62> col:55 cend 'Vector<Classification::Wordwise::Insn>::const_iterator () const'
| |-NoInlineAttr 0x55591335ea58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591335eab0 <col:30> Inherited
|-CXXMethodDecl 0x55591335ead8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591335eb88 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591335ec38 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55591335edf8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| |-ParmVarDecl 0x55591335ece8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591335ed60 <col:37, col:63> col:57 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXMethodDecl 0x55591335ef48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55591335eeb8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591335f0f8 <line:163:5, col:65> col:43 used operator[] 'Classification::Wordwise::Insn &(Vector::size_type)'
| |-ParmVarDecl 0x55591335f000 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55591335f1b0 <col:20>
| `-OptimizeNoneAttr 0x55591335f208 <col:30>
|-CXXMethodDecl 0x55591335f2f8 <line:164:5, col:73> col:49 used operator[] 'const Classification::Wordwise::Insn &(Vector::size_type) const'
| |-ParmVarDecl 0x55591335f230 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55591335f3b0 <col:20>
| `-OptimizeNoneAttr 0x55591335f408 <col:30>
|-CXXMethodDecl 0x55591335f4c0 <line:165:5, col:29> col:15 at 'Classification::Wordwise::Insn &(Vector::size_type)' inline
| `-ParmVarDecl 0x55591335f430 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591335f608 <line:166:5, col:37> col:21 at 'const Classification::Wordwise::Insn &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55591335f578 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555913361b50 <line:167:5, col:21> col:15 front 'Classification::Wordwise::Insn &()' inline
|-CXXMethodDecl 0x555913361c78 <line:168:5, col:29> col:21 front 'const Classification::Wordwise::Insn &() const' inline
|-CXXMethodDecl 0x555913361d48 <line:169:5, col:20> col:15 used back 'Classification::Wordwise::Insn &()' inline
|-CXXMethodDecl 0x555913361e18 <line:170:5, col:28> col:21 back 'const Classification::Wordwise::Insn &() const' inline
|-CXXMethodDecl 0x555913361f58 <line:172:5, col:39> col:15 unchecked_at 'Classification::Wordwise::Insn &(Vector::size_type)' inline
| `-ParmVarDecl 0x555913361ec8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559133620a0 <line:173:5, col:47> col:21 unchecked_at 'const Classification::Wordwise::Insn &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555913362010 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559133621e8 <line:174:5, col:59> col:15 at_u 'Classification::Wordwise::Insn &(Vector::size_type)' inline
| |-ParmVarDecl 0x555913362158 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5559133622a0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5559133623a0 <line:175:5, col:71> col:21 at_u 'const Classification::Wordwise::Insn &(Vector::size_type) const' inline
| |-ParmVarDecl 0x555913362310 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555913362458 <col:60> Inherited "" ""
|-CXXMethodDecl 0x555913362518 <line:177:5, col:20> col:15 data 'Classification::Wordwise::Insn *()' inline
|-CXXMethodDecl 0x555913362618 <line:178:5, col:28> col:21 data 'const Classification::Wordwise::Insn *() const' inline
|-CXXMethodDecl 0x555913362798 <line:180:5, col:48> col:17 push_back 'void (Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| `-ParmVarDecl 0x5559133626d8 <col:27, col:47> col:47 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-FunctionTemplateDecl 0x555913362f58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x555913362850 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Classification::Wordwise::Insn>':'fast_argument<Classification::Wordwise::Insn, true>'
| `-CXXMethodDecl 0x555913362eb8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Classification::Wordwise::Insn &&)' inline
|   `-ParmVarDecl 0x555913362db8 <col:58, col:62> col:62 v 'Classification::Wordwise::Insn &&'
|-CXXMethodDecl 0x555913363038 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555913363188 <line:186:5, col:49> col:17 push_front 'void (Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| `-ParmVarDecl 0x5559133630f8 <col:28, col:48> col:48 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXMethodDecl 0x555913363240 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555913363488 <line:189:5, col:62> col:21 insert 'Vector<Classification::Wordwise::Insn>::iterator (Vector<Classification::Wordwise::Insn>::iterator, Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| |-ParmVarDecl 0x555913363300 <col:28, col:37> col:37 it 'Vector<Classification::Wordwise::Insn>::iterator':'Classification::Wordwise::Insn *'
| `-ParmVarDecl 0x555913363378 <col:41, col:61> col:61 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXMethodDecl 0x555913363648 <line:190:5, col:38> col:21 erase 'Vector<Classification::Wordwise::Insn>::iterator (Vector<Classification::Wordwise::Insn>::iterator)' inline
| `-ParmVarDecl 0x555913363558 <col:27, col:36> col:36 it 'Vector<Classification::Wordwise::Insn>::iterator':'Classification::Wordwise::Insn *'
|-CXXMethodDecl 0x555913363898 <line:191:5, col:49> col:21 erase 'Vector<Classification::Wordwise::Insn>::iterator (Vector<Classification::Wordwise::Insn>::iterator, Vector<Classification::Wordwise::Insn>::iterator)' inline
| |-ParmVarDecl 0x555913363710 <col:27, col:36> col:36 a 'Vector<Classification::Wordwise::Insn>::iterator':'Classification::Wordwise::Insn *'
| `-ParmVarDecl 0x555913363788 <col:39, col:48> col:48 b 'Vector<Classification::Wordwise::Insn>::iterator':'Classification::Wordwise::Insn *'
|-CXXMethodDecl 0x555913363958 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x555913363bb8 <line:195:5, col:34> col:17 swap 'void (Vector<Classification::Wordwise::Insn> &)' inline
| `-ParmVarDecl 0x555913363ac0 <col:22, col:33> col:33 x 'Vector<Classification::Wordwise::Insn> &'
`-CXXDestructorDecl 0x555913363c88 <line:111:7> col:7 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x555913365258 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.3 = type { %class.vector_memory.4 }
  NonVirtualBaseLLVMType:%class.Vector.3 = type { %class.vector_memory.4 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913353790 <../elements/standard/classification.hh:155:1, line:235:1> line:155:7 referenced class Program definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_implicit
|-CXXRecordDecl 0x5559133538a8 <col:1, col:7> col:7 implicit referenced class Program
|-AccessSpecDecl 0x555913353938 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x555913353a48 <line:157:5, line:160:5> line:157:5 Program 'void (unsigned int)'
| |-ParmVarDecl 0x555913353978 <col:13, col:37> col:22 used align_offset 'unsigned int' cinit
| | `-ImplicitCastExpr 0x555913364fd0 <col:37> 'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x555913364fb0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555913363d70 '_insn' 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>'
| | `-CXXConstructExpr 0x5559133651e8 <col:5> 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>' 'void ()'
| |-CXXCtorInitializer Field 0x555913363dd8 '_output_everything' 'int'
| | `-UnaryOperator 0x555913365030 <line:158:23, col:24> 'int' prefix '-'
| |   `-ImplicitCastExpr 0x555913365018 <col:24> 'int' <IntegralCast>
| |     `-DeclRefExpr 0x555913364ff8 <col:24> 'Classification::Jumps' EnumConstant 0x55591300a288 'j_never' 'Classification::Jumps'
| |-CXXCtorInitializer Field 0x555913363e40 '_safe_length' 'unsigned int'
| | `-CStyleCastExpr 0x5559133650f8 <col:47, col:59> 'unsigned int' <NoOp>
| |   `-ImplicitCastExpr 0x5559133650e0 <col:58, col:59> 'unsigned int' <IntegralCast> part_of_explicit_cast
| |     `-UnaryOperator 0x5559133650b0 <col:58, col:59> 'int' prefix '-'
| |       `-IntegerLiteral 0x555913365090 <col:59> 'int' 1
| |-CXXCtorInitializer Field 0x555913363ea8 '_align_offset' 'unsigned int'
| | `-ImplicitCastExpr 0x5559133651a8 <line:159:18> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x555913365168 <col:18> 'unsigned int' lvalue ParmVar 0x555913353978 'align_offset' 'unsigned int'
| `-CompoundStmt 0x555913365268 <col:32, line:160:5>
|-CXXMethodDecl 0x555913353b50 <line:162:5, line:164:5> line:162:14 align_offset 'unsigned int () const'
| `-CompoundStmt 0x5559133652e0 <col:35, line:164:5>
|   `-ReturnStmt 0x5559133652d0 <line:163:2, col:9>
|     `-ImplicitCastExpr 0x5559133652b8 <col:9> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x555913365288 <col:9> 'const unsigned int' lvalue ->_align_offset 0x555913363ea8
|         `-CXXThisExpr 0x555913365278 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x555913353c18 <line:165:5, line:167:5> line:165:9 output_everything 'int () const'
| `-CompoundStmt 0x555913365360 <col:35, line:167:5>
|   `-ReturnStmt 0x555913365350 <line:166:2, col:9>
|     `-ImplicitCastExpr 0x555913365338 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x555913365308 <col:9> 'const int' lvalue ->_output_everything 0x555913363dd8
|         `-CXXThisExpr 0x5559133652f8 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x555913353ce0 <line:168:5, line:170:5> line:168:14 safe_length 'unsigned int () const'
| `-CompoundStmt 0x5559133653e0 <col:34, line:170:5>
|   `-ReturnStmt 0x5559133653d0 <line:169:2, col:9>
|     `-ImplicitCastExpr 0x5559133653b8 <col:9> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x555913365388 <col:9> 'const unsigned int' lvalue ->_safe_length 0x555913363e40
|         `-CXXThisExpr 0x555913365378 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x555913353da8 <line:172:5, line:174:5> line:172:9 ninsn 'int () const'
| `-CompoundStmt 0x5559133654c8 <col:23, line:174:5>
|   `-ReturnStmt 0x5559133654b8 <line:173:2, col:20>
|     `-CXXMemberCallExpr 0x555913365468 <col:9, col:20> 'Vector::size_type':'int'
|       `-MemberExpr 0x555913365438 <col:9, col:15> '<bound member function type>' .size 0x55591335ead8
|         `-MemberExpr 0x555913365408 <col:9> 'const Vector<Classification::Wordwise::Insn>':'const Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x555913363d70
|           `-CXXThisExpr 0x5559133653f8 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x555913353f28 <line:175:5, line:177:5> line:175:17 insn 'const Classification::Wordwise::Insn &(int) const'
| |-ParmVarDecl 0x555913353e60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x555913365638 <col:35, line:177:5>
|   `-ReturnStmt 0x555913365628 <line:176:2, col:16>
|     `-CXXOperatorCallExpr 0x5559133655f0 <col:9, col:16> 'const Classification::Wordwise::Insn':'const Classification::Wordwise::Insn' lvalue
|       |-ImplicitCastExpr 0x5559133655d8 <col:14, col:16> 'const Classification::Wordwise::Insn &(*)(Vector::size_type) const' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555913365558 <col:14, col:16> 'const Classification::Wordwise::Insn &(Vector::size_type) const' lvalue CXXMethod 0x55591335f2f8 'operator[]' 'const Classification::Wordwise::Insn &(Vector::size_type) const'
|       |-MemberExpr 0x5559133654f0 <col:9> 'const Vector<Classification::Wordwise::Insn>':'const Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x555913363d70
|       | `-CXXThisExpr 0x5559133654e0 <col:9> 'const Classification::Wordwise::Program *' implicit this
|       `-ImplicitCastExpr 0x555913365540 <col:15> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x555913365520 <col:15> 'int' lvalue ParmVar 0x555913353e60 'i' 'int'
|-CXXMethodDecl 0x555913354018 <line:178:5, line:180:5> line:178:17 begin 'const Classification::Wordwise::Insn *() const'
| `-CompoundStmt 0x555913365750 <col:31, line:180:5>
|   `-ReturnStmt 0x555913365740 <line:179:2, col:21>
|     `-CXXMemberCallExpr 0x555913365720 <col:9, col:21> 'Vector<Classification::Wordwise::Insn>::const_iterator':'const Classification::Wordwise::Insn *'
|       `-MemberExpr 0x5559133656f0 <col:9, col:15> '<bound member function type>' .begin 0x55591335e5b8
|         `-MemberExpr 0x555913365660 <col:9> 'const Vector<Classification::Wordwise::Insn>':'const Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x555913363d70
|           `-CXXThisExpr 0x555913365650 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x5559133540d8 <line:181:5, line:183:5> line:181:17 end 'const Classification::Wordwise::Insn *() const'
| `-CompoundStmt 0x555913365868 <col:29, line:183:5>
|   `-ReturnStmt 0x555913365858 <line:182:2, col:19>
|     `-CXXMemberCallExpr 0x555913365838 <col:9, col:19> 'Vector<Classification::Wordwise::Insn>::const_iterator':'const Classification::Wordwise::Insn *'
|       `-MemberExpr 0x555913365808 <col:9, col:15> '<bound member function type>' .end 0x55591335e708
|         `-MemberExpr 0x555913365778 <col:9> 'const Vector<Classification::Wordwise::Insn>':'const Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x555913363d70
|           `-CXXThisExpr 0x555913365768 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x5559133541f8 <line:185:5, line:187:5> line:185:11 back 'Classification::Wordwise::Insn &()'
| `-CompoundStmt 0x555913365980 <col:18, line:187:5>
|   `-ReturnStmt 0x555913365970 <line:186:2, col:20>
|     `-CXXMemberCallExpr 0x555913365950 <col:9, col:20> 'Classification::Wordwise::Insn':'Classification::Wordwise::Insn' lvalue
|       `-MemberExpr 0x555913365920 <col:9, col:15> '<bound member function type>' .back 0x555913361d48
|         `-MemberExpr 0x555913365890 <col:9> 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x555913363d70
|           `-CXXThisExpr 0x555913365880 <col:9> 'Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x555913354768 <line:189:5, col:79> col:10 used add_insn 'void (Vector<int> &, int, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5559133544b0 <col:19, col:32> col:32 tree 'Vector<int> &'
| |-ParmVarDecl 0x555913354530 <col:38, col:42> col:42 offset 'int'
| |-ParmVarDecl 0x5559133545a8 <col:50, col:59> col:59 value 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555913354620 <col:66, col:75> col:75 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913354948 <line:191:5, col:32> col:17 init_subtree 'Vector<int> () const'
|-CXXMethodDecl 0x555913354bc8 <line:192:5, col:43> col:10 used start_subtree 'void (Vector<int> &) const'
| `-ParmVarDecl 0x555913354ad0 <col:24, col:37> col:37 tree 'Vector<int> &'
|-CXXMethodDecl 0x555913354ee8 <line:198:5, col:67> col:10 used negate_subtree 'void (Vector<int> &, bool)'
| |-ParmVarDecl 0x555913354d60 <col:25, col:38> col:38 tree 'Vector<int> &'
| `-ParmVarDecl 0x555913354dd8 <col:44, col:62> col:49 flip_short 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555913364fe8 <col:62> 'bool' false
|-CXXMethodDecl 0x555913355208 <line:199:5, line:201:5> line:199:17 used finish_subtree 'void (Vector<int> &, Classification::Combiner)' inline
| |-ParmVarDecl 0x555913355080 <col:32, col:45> col:45 used tree 'Vector<int> &'
| |-ParmVarDecl 0x5559133550f8 <col:51, col:60> col:60 used op 'Classification::Combiner'
| `-CompoundStmt 0x5559133669c0 <col:64, line:201:5>
|   `-CXXMemberCallExpr 0x555913365ac8 <line:200:9, col:54> 'void'
|     |-MemberExpr 0x555913365a98 <col:9> '<bound member function type>' ->finish_subtree 0x555913355658
|     | `-CXXThisExpr 0x555913365a88 <col:9> 'Classification::Wordwise::Program *' implicit this
|     |-DeclRefExpr 0x555913365a08 <col:24> 'Vector<int>':'Vector<int>' lvalue ParmVar 0x555913355080 'tree' 'Vector<int> &'
|     |-ImplicitCastExpr 0x555913365b08 <col:30> 'Classification::Combiner' <LValueToRValue>
|     | `-DeclRefExpr 0x555913365a28 <col:30> 'Classification::Combiner' lvalue ParmVar 0x5559133550f8 'op' 'Classification::Combiner'
|     |-ImplicitCastExpr 0x555913366990 <col:34> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x555913365a48 <col:34> 'Classification::Jumps' EnumConstant 0x55591300a328 'j_success' 'Classification::Jumps'
|     `-ImplicitCastExpr 0x5559133669a8 <col:45> 'int' <IntegralCast>
|       `-DeclRefExpr 0x555913365a68 <col:45> 'Classification::Jumps' EnumConstant 0x55591300a2d8 'j_failure' 'Classification::Jumps'
|-CXXMethodDecl 0x555913355658 <line:202:5, col:81> col:10 used finish_subtree 'void (Vector<int> &, Classification::Combiner, int, int)'
| |-ParmVarDecl 0x5559133553a0 <col:25, col:38> col:38 tree 'Vector<int> &'
| |-ParmVarDecl 0x555913355418 <col:44, col:53> col:53 op 'Classification::Combiner'
| |-ParmVarDecl 0x555913355498 <col:57, col:61> col:61 success 'int'
| `-ParmVarDecl 0x555913355518 <col:70, col:74> col:74 failure 'int'
|-CXXMethodDecl 0x5559133557c0 <line:204:5, col:33> col:10 set_failure 'void (int)'
| `-ParmVarDecl 0x555913355730 <col:22, col:26> col:26 failure 'int'
|-CXXMethodDecl 0x555913355968 <line:205:5, col:52> col:10 add_or_program 'void (const Classification::Wordwise::Program &)'
| `-ParmVarDecl 0x5559133558a8 <col:25, col:40> col:40 next_program 'const Classification::Wordwise::Program &'
|-CXXMethodDecl 0x555913355a30 <line:207:5, col:36> col:10 combine_compatible_states 'void ()'
|-CXXMethodDecl 0x555913355af0 <line:208:5, col:31> col:10 remove_unused_states 'void ()'
|-CXXMethodDecl 0x555913355bb0 <line:209:5, col:29> col:10 unaligned_optimize 'void ()'
|-CXXMethodDecl 0x555913355e08 <line:210:5, col:52> col:10 count_inbranches 'void (Vector<int> &) const'
| `-ParmVarDecl 0x555913355d40 <col:27, col:40> col:40 inbranches 'Vector<int> &'
|-CXXMethodDecl 0x5559133560a8 <line:211:5, col:103> col:10 bubble_sort_and_exprs 'void (const int *, const int *, int)'
| |-ParmVarDecl 0x555913355ec8 <col:32, col:43> col:43 offset_map_begin 'const int *'
| |-ParmVarDecl 0x555913355f48 <col:61, col:72> col:72 offset_map_end 'const int *'
| `-ParmVarDecl 0x555913355fc8 <col:88, col:92> col:92 last_offset 'int'
|-CXXMethodDecl 0x555913356318 <line:212:5, col:90> col:10 optimize 'void (const int *, const int *, int)'
| |-ParmVarDecl 0x555913356178 <col:19, col:30> col:30 offset_map_begin 'const int *'
| |-ParmVarDecl 0x5559133561f8 <col:48, col:59> col:59 offset_map_end 'const int *'
| `-ParmVarDecl 0x555913356278 <col:75, col:79> col:79 last_offset 'int'
|-CXXMethodDecl 0x555913356558 <line:214:5, col:64> col:10 warn_unused_outputs 'void (int, ErrorHandler *) const'
| |-ParmVarDecl 0x5559133563e8 <col:30, col:34> col:34 noutputs 'int'
| `-ParmVarDecl 0x555913356488 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5559133566e0 <line:216:5, col:30> col:9 match 'int (const Packet *)'
| `-ParmVarDecl 0x555913356618 <col:15, col:29> col:29 p 'const Packet *'
|-CXXMethodDecl 0x5559133567a8 <line:218:5, col:22> col:12 unparse 'String () const'
|-AccessSpecDecl 0x555913356848 <line:220:3, col:10> col:3 private
|-FieldDecl 0x555913363d70 <line:222:5, col:18> col:18 referenced _insn 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>'
|-FieldDecl 0x555913363dd8 <line:223:5, col:9> col:9 referenced _output_everything 'int'
|-FieldDecl 0x555913363e40 <line:224:5, col:14> col:14 referenced _safe_length 'unsigned int'
|-FieldDecl 0x555913363ea8 <line:225:5, col:14> col:14 referenced _align_offset 'unsigned int'
|-CXXMethodDecl 0x555913364188 <line:227:5, col:72> col:10 redirect_subtree 'void (int, int, int, int)'
| |-ParmVarDecl 0x555913363f10 <col:27, col:31> col:31 first 'int'
| |-ParmVarDecl 0x555913363f90 <col:38, col:42> col:42 next 'int'
| |-ParmVarDecl 0x555913364010 <col:48, col:52> col:52 success 'int'
| `-ParmVarDecl 0x555913364090 <col:61, col:65> col:65 failure 'int'
|-CXXMethodDecl 0x5559133642f0 <line:229:5, col:45> col:9 used length_checked_match 'int (const Packet *)'
| `-ParmVarDecl 0x555913364258 <col:30, col:44> col:44 p 'const Packet *'
|-CXXMethodDecl 0x5559133645a0 <line:230:5, col:78> col:23 map_offset 'int (int, const int *, const int *)' static inline
| |-ParmVarDecl 0x5559133643b0 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x555913364430 <col:46, col:57> col:57 begin 'const int *'
| `-ParmVarDecl 0x5559133644b0 <col:64, col:75> col:75 end 'const int *'
|-CXXMethodDecl 0x555913364818 <line:231:5, col:76> col:16 hard_map_offset 'int (int, const int *, const int *)' static
| |-ParmVarDecl 0x555913364670 <col:32, col:36> col:36 offset 'int'
| |-ParmVarDecl 0x5559133646f0 <col:44, col:55> col:55 begin 'const int *'
| `-ParmVarDecl 0x555913364770 <col:62, col:73> col:73 end 'const int *'
|-FriendDecl 0x555913364920 <line:233:5, col:18> col:12 'class DominatorOptimizer':'Classification::Wordwise::DominatorOptimizer'
|-CXXConstructorDecl 0x555913364960 <line:155:7> col:7 implicit Program 'void (const Classification::Wordwise::Program &)' inline default noexcept-unevaluated 0x555913364960
| `-ParmVarDecl 0x555913364a48 <col:7> col:7 'const Classification::Wordwise::Program &'
|-CXXConstructorDecl 0x555913364ae8 <col:7> col:7 implicit Program 'void (Classification::Wordwise::Program &&)' inline default noexcept-unevaluated 0x555913364ae8
| `-ParmVarDecl 0x555913364bf8 <col:7> col:7 'Classification::Wordwise::Program &&'
|-CXXMethodDecl 0x555913364c98 <col:7> col:7 implicit operator= 'Classification::Wordwise::Program &(const Classification::Wordwise::Program &)' inline default noexcept-unevaluated 0x555913364c98
| `-ParmVarDecl 0x555913364da8 <col:7> col:7 'const Classification::Wordwise::Program &'
`-CXXMethodDecl 0x555913364e18 <col:7> col:7 implicit operator= 'Classification::Wordwise::Program &(Classification::Wordwise::Program &&)' inline default noexcept-unevaluated 0x555913364e18
  `-ParmVarDecl 0x555913364f28 <col:7> col:7 'Classification::Wordwise::Program &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Classification::Wordwise::Program" = type <{ %class.Vector.3, i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Classification::Wordwise::Program.base" = type <{ %class.Vector.3, i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5559133542b0 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x555913374898 prev 0x5559133542b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5559133758b0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x555913375860 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x555913375840 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5559133756f0 'type'
|     `-SubstTemplateTypeParmType 0x5559133685e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x555913100590 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913100538 'T'
|       `-RecordType 0x555913368130 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x555913368048 'sized_array_memory'
|-FieldDecl 0x5559133759b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x555913375a00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x555913375a38 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x555913374930 'int' sugar
|   |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555913337d78 'T'
|   `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913375ac8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x555913375a90 'int &'
|   `-SubstTemplateTypeParmType 0x555913374930 'int' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913375b88 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x555913375b50 'const int &'
|   `-QualType 0x555913374931 'const int' const
|     `-SubstTemplateTypeParmType 0x555913374930 'int' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913375c18 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x555913375be0 'int *'
|   `-SubstTemplateTypeParmType 0x555913374930 'int' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913375ca8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x555913375c70 'const int *'
|   `-QualType 0x555913374931 'const int' const
|     `-SubstTemplateTypeParmType 0x555913374930 'int' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913376890 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x555913376840 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x555913376820 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5559133767b0 'type'
|     `-SubstTemplateTypeParmType 0x555913376570 'int' sugar
|       |-TemplateTypeParmType 0x55591310a0d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55591310a080 'T'
|       `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x5559133768f8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x555913375b50 'const int &'
|   `-QualType 0x555913374931 'const int' const
|     `-SubstTemplateTypeParmType 0x555913374930 'int' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913376950 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x5559133769b8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x555913375be0 'int *'
|   `-SubstTemplateTypeParmType 0x555913374930 'int' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913376a20 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x555913375c70 'const int *'
|   `-QualType 0x555913374931 'const int' const
|     `-SubstTemplateTypeParmType 0x555913374930 'int' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-BuiltinType 0x555912df5580 'int'
|-EnumDecl 0x555913376a78 <line:134:5> col:5
| `-EnumConstantDecl 0x555913376b70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x555913376b50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555913338e08 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555913338de0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555913338dc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x555913376bf8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x555913376e48 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555913376cb0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555913376d50 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x555913377108 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x555913376ff0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55591337a0b8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x555913379fa0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55591337a3d0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55591337a2b0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55591337a6e0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55591337a5c0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55591337a9d0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55591337a818 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591337a890 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55591337aaf8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55591337abd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591337ac30 <col:30> Inherited
|-CXXMethodDecl 0x55591337ac78 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55591337ad28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591337ad80 <col:30> Inherited
|-CXXMethodDecl 0x55591337ae48 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55591337aef8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591337af50 <col:30> Inherited
|-CXXMethodDecl 0x55591337af98 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55591337b048 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591337b0a0 <col:30> Inherited
|-CXXMethodDecl 0x55591337b0e8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55591337b198 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591337b1f0 <col:30> Inherited
|-CXXMethodDecl 0x55591337b238 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55591337b2e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591337b340 <col:30> Inherited
|-CXXMethodDecl 0x55591337b368 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591337b418 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591337b4c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55591337b688 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55591337b578 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591337b5f0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55591337b7d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55591337b748 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591337b988 <line:163:5, col:65> col:43 used operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55591337b890 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55591337ba40 <col:20>
| `-OptimizeNoneAttr 0x55591337ba98 <col:30>
|-CXXMethodDecl 0x55591337bbb8 <line:164:5, col:73> col:49 used operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55591337bac0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55591337bc70 <col:20>
| `-OptimizeNoneAttr 0x55591337bcc8 <col:30>
|-CXXMethodDecl 0x55591337bd80 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55591337bcf0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591337bec8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55591337be38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591337bff8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55591337c128 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55591337c1f8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55591337c2c8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55591337c408 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55591337c378 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591337c550 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55591337c4c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591337c698 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55591337c608 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55591337c750 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55591337c850 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55591337c7c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55591337c908 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55591337c9c8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55591337cac8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55591337cc48 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55591337cb88 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55591337d408 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55591337cd00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55591337d368 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55591337d268 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55591337d4e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55591337d638 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55591337d5a8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55591337d6f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55591337d938 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55591337d7b0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55591337d828 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55591337daf8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55591337da08 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55591337dd48 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55591337dbc0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55591337dc38 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55591337de08 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55591337e068 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55591337df70 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55591337e138 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55591337e138

Layout: <CGRecordLayout
  LLVMType:%class.Vector.6 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.6 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct IPFilter::Parser::parse_state
         0 |   int state
         4 |   int last_pos
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct IPFilter::Parser
         0 |   const Vector<class String> & _words
         8 |   Vector<int> & _tree
        16 |   Classification::Wordwise::Program & _prog
        24 |   const class Element * _context
        32 |   class ErrorHandler * _errh
        40 |   struct IPFilter::Primitive _prev_prim
        40 |     int _type
        44 |     int _data
        48 |     int _op
        52 |     _Bool _op_negated
        56 |     int _srcdst
        60 |     int _transp_proto
        64 |     union IPFilter::PrimitiveData _u
        64 |       uint32_t u
        64 |       int32_t i
        64 |       struct in_addr ip4
        64 |         in_addr_t s_addr
        64 |       unsigned char [8] c
        72 |     union IPFilter::PrimitiveData _mask
        72 |       uint32_t u
        72 |       int32_t i
        72 |       struct in_addr ip4
        72 |         in_addr_t s_addr
        72 |       unsigned char [8] c
           | [sizeof=80, dsize=80, align=8,
           |  nvsize=80, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555913414a50 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x555913414c28 prev 0x555913414a50 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555913414cb8 <col:46, col:52> col:46 public
|-TypedefDecl 0x555913414ce0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913416680 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x555913416630 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x555913416610 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x555913414ef8 'type'
|     `-SubstTemplateTypeParmType 0x555913414ec0 'String' sugar
|       |-TemplateTypeParmType 0x55591332e620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55591332e5d0 'T'
|       `-RecordType 0x555913032a10 'String'
|         `-CXXRecord 0x555913032980 'String'
|-TypedefDecl 0x555913416738 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x555913416700 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5559134166e0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x555913416680 'type'
|     `-ElaboratedType 0x555913416630 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x555913416610 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x555913414ef8 'type'
|         `-SubstTemplateTypeParmType 0x555913414ec0 'String' sugar
|           |-TemplateTypeParmType 0x55591332e620 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55591332e5d0 'T'
|           `-RecordType 0x555913032a10 'String'
|             `-CXXRecord 0x555913032980 'String'
|-CXXMethodDecl 0x5559134168b8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5559134167c8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5559134169a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x555913416a88 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x555913416d58 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555913416c60 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x555913416f98 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555913416e10 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555913416e88 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555913417168 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555913417058 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5559134170d0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5559134172c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x555913417398 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5559134175e8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555913417458 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5559134174d0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555913417848 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5559134176b8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x555913417730 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555913417a08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x555913417918 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555913417bc8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x555913417ad0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555913417c80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555913417d30 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x555913417f68 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555913417de0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555913417e58 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555913418208 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555913418110 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5559134182d0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x555913418320 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x555913418370 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5559132aa260 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5559134136f8 prev 0x5559132aa260 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5559134149c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x555913414970 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x555913414950 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x555913414800 'type'
|     `-SubstTemplateTypeParmType 0x555913414690 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x555913100d10 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x555913100cb8 'F'
|       `-RecordType 0x5559134142f0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x555913414210 'typed_array_memory'
|-FieldDecl 0x5559134183c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x555913418410 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x555913418448 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x555913413790 'String' sugar
|   |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555913337d78 'T'
|   `-RecordType 0x555913032a10 'String'
|     `-CXXRecord 0x555913032980 'String'
|-TypedefDecl 0x5559134184d8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5559134184a0 'String &'
|   `-SubstTemplateTypeParmType 0x555913413790 'String' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x555913032a10 'String'
|       `-CXXRecord 0x555913032980 'String'
|-TypedefDecl 0x555913418568 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x555913418530 'const String &'
|   `-QualType 0x555913413791 'const String' const
|     `-SubstTemplateTypeParmType 0x555913413790 'String' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x555913032a10 'String'
|         `-CXXRecord 0x555913032980 'String'
|-TypedefDecl 0x5559134185f8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5559134185c0 'String *'
|   `-SubstTemplateTypeParmType 0x555913413790 'String' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x555913032a10 'String'
|       `-CXXRecord 0x555913032980 'String'
|-TypedefDecl 0x555913418688 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x555913418650 'const String *'
|   `-QualType 0x555913413791 'const String' const
|     `-SubstTemplateTypeParmType 0x555913413790 'String' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x555913032a10 'String'
|         `-CXXRecord 0x555913032980 'String'
|-TypedefDecl 0x5559134192e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x555913419290 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x555913419270 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5559134191a8 'type'
|     `-LValueReferenceType 0x555913419170 'const String &'
|       `-QualType 0x555913418f11 'const String' const
|         `-SubstTemplateTypeParmType 0x555913418f10 'String' sugar
|           |-TemplateTypeParmType 0x5559131099a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555913109948 'T'
|           `-RecordType 0x555913032a10 'String'
|             `-CXXRecord 0x555913032980 'String'
|-TypedefDecl 0x555913419348 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x555913418530 'const String &'
|   `-QualType 0x555913413791 'const String' const
|     `-SubstTemplateTypeParmType 0x555913413790 'String' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x555913032a10 'String'
|         `-CXXRecord 0x555913032980 'String'
|-TypedefDecl 0x5559134193a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x555913419408 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5559134185c0 'String *'
|   `-SubstTemplateTypeParmType 0x555913413790 'String' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x555913032a10 'String'
|       `-CXXRecord 0x555913032980 'String'
|-TypedefDecl 0x555913419470 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x555913418650 'const String *'
|   `-QualType 0x555913413791 'const String' const
|     `-SubstTemplateTypeParmType 0x555913413790 'String' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x555913032a10 'String'
|         `-CXXRecord 0x555913032980 'String'
|-EnumDecl 0x5559134194c8 <line:134:5> col:5
| `-EnumConstantDecl 0x5559134195c0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5559134195a0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555913338e08 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555913338de0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555913338dc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x555913419648 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5559134198d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555913419700 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5559134197a0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x555913419b68 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x555913419a50 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x555913419e28 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x555913419d10 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55591341a140 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55591341a020 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55591341a450 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55591341a330 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55591341a740 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55591341a588 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591341a600 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55591341a868 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55591341a918 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591341a970 <col:30> Inherited
|-CXXMethodDecl 0x55591341a9b8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55591341aa68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591341aac0 <col:30> Inherited
|-CXXMethodDecl 0x55591341ab88 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55591341ac38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591341ac90 <col:30> Inherited
|-CXXMethodDecl 0x55591341acd8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55591341ad88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591341ade0 <col:30> Inherited
|-CXXMethodDecl 0x55591341ae28 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55591341aed8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591341af30 <col:30> Inherited
|-CXXMethodDecl 0x55591341af78 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55591341b028 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591341b080 <col:30> Inherited
|-CXXMethodDecl 0x55591341b0a8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591341b158 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591341b208 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55591341b3c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55591341b2b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591341b330 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55591341b518 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55591341b488 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591341b6c8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55591341b5d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55591341b780 <col:20>
| `-OptimizeNoneAttr 0x55591341b7d8 <col:30>
|-CXXMethodDecl 0x55591341b8f8 <line:164:5, col:73> col:49 used operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55591341b800 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55591341b9b0 <col:20>
| `-OptimizeNoneAttr 0x55591341ba08 <col:30>
|-CXXMethodDecl 0x55591341bac0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55591341ba30 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591341bc08 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55591341bb78 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591341bd38 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55591341be38 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55591341bf08 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55591341bfd8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55591341c118 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55591341c088 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591341c260 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55591341c1d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591341c3a8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55591341c318 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55591341c460 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55591341c560 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55591341c4d0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55591341c618 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55591341c6d8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55591341c7d8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55591341c958 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55591341c898 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55591341d0e8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55591341ca10 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| |-CXXMethodDecl 0x55591341d048 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
| | `-ParmVarDecl 0x55591341cf48 <col:58, col:62> col:62 v 'String &&'
| `-CXXMethodDecl 0x5559135c1658 <col:5, col:63> col:48 used push_back 'typename fast_argument<String, true>::enable_rvalue_reference (String &&)' inline
|   |-TemplateArgument type 'fast_argument<String, true>'
|   `-ParmVarDecl 0x5559135c1580 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55591341d1c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55591341d318 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55591341d288 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55591341d3d0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55591341d618 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55591341d490 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55591341d508 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55591341d7a8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55591341d6e8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55591341d9f0 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55591341d870 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55591341d8e8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55591341dab0 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55591341dd08 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55591341dc10 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55591341ddd8 <line:111:7> col:7 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5559132d7cb8 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  NonVirtualBaseLLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133c7b80 <../elements/ip/ipfilter.hh:262:5, line:294:5> line:262:12 struct Parser definition
|-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5559133c7c98 <col:5, col:12> col:12 implicit referenced struct Parser
|-FieldDecl 0x5559133c7e10 <line:263:2, col:24> col:24 referenced _words 'const Vector<String> &'
|-FieldDecl 0x5559133c7f50 <line:264:2, col:15> col:15 referenced _tree 'Vector<int> &'
|-FieldDecl 0x5559133c8000 <line:265:2, col:37> col:37 referenced _prog 'Classification::Wordwise::Program &'
|-FieldDecl 0x5559133c8060 <line:266:2, col:17> col:17 _context 'const Element *'
|-FieldDecl 0x5559133c80c0 <line:267:2, col:16> col:16 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5559133c8120 <line:268:2, col:12> col:12 _prev_prim 'IPFilter::Primitive'
|-CXXConstructorDecl 0x5559133c86e8 <line:270:2, line:275:2> line:270:2 Parser 'void (const Vector<String> &, Vector<int> &, Classification::Wordwise::Program &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5559133c8250 <col:9, col:31> col:31 used words 'const Vector<String> &'
| |-ParmVarDecl 0x5559133c83a0 <col:38, col:51> col:51 used tree 'Vector<int> &'
| |-ParmVarDecl 0x5559133c8468 <line:271:9, col:44> col:44 used prog 'Classification::Wordwise::Program &'
| |-ParmVarDecl 0x5559133c84e0 <line:272:9, col:24> col:24 used context 'const Element *'
| |-ParmVarDecl 0x5559133c8558 <col:33, col:47> col:47 used errh 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5559133c7e10 '_words' 'const Vector<String> &'
| | `-DeclRefExpr 0x5559133ca5b0 <line:273:15> 'const Vector<String>':'const Vector<String>' lvalue ParmVar 0x5559133c8250 'words' 'const Vector<String> &'
| |-CXXCtorInitializer Field 0x5559133c7f50 '_tree' 'Vector<int> &'
| | `-DeclRefExpr 0x5559133ca618 <col:29> 'Vector<int>':'Vector<int>' lvalue ParmVar 0x5559133c83a0 'tree' 'Vector<int> &'
| |-CXXCtorInitializer Field 0x5559133c8000 '_prog' 'Classification::Wordwise::Program &'
| | `-DeclRefExpr 0x5559133ca680 <col:42> 'Classification::Wordwise::Program':'Classification::Wordwise::Program' lvalue ParmVar 0x5559133c8468 'prog' 'Classification::Wordwise::Program &'
| |-CXXCtorInitializer Field 0x5559133c8060 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5559133ca728 <col:58> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5559133ca6e8 <col:58> 'const Element *' lvalue ParmVar 0x5559133c84e0 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5559133c80c0 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5559133ca7a8 <line:274:14> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5559133ca768 <col:14> 'ErrorHandler *' lvalue ParmVar 0x5559133c8558 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5559133c8120 '_prev_prim' 'IPFilter::Primitive'
| | `-CXXConstructExpr 0x5559133d3e48 <line:270:2> 'IPFilter::Primitive' 'void ()'
| `-CompoundStmt 0x5559133d3ec8 <line:274:20, line:275:2>
|-CXXRecordDecl 0x5559133c87b8 <line:277:2, line:283:2> line:277:9 referenced struct parse_state definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5559133c88d8 <col:2, col:9> col:9 implicit referenced struct parse_state
| |-FieldDecl 0x5559133c8980 <line:278:6, col:10> col:10 referenced state 'int'
| |-FieldDecl 0x5559133c89e8 <line:279:6, col:10> col:10 referenced last_pos 'int'
| |-CXXConstructorDecl 0x5559133c8b28 <line:280:6, line:282:6> line:280:6 used parse_state 'void (int)'
| | |-ParmVarDecl 0x5559133c8a50 <col:18, col:22> col:22 used s 'int'
| | |-CXXCtorInitializer Field 0x5559133c8980 'state' 'int'
| | | `-ImplicitCastExpr 0x5559133d3f18 <line:281:11> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5559133d3ed8 <col:11> 'int' lvalue ParmVar 0x5559133c8a50 's' 'int'
| | `-CompoundStmt 0x5559133d3f60 <col:14, line:282:6>
| |-CXXConstructorDecl 0x5559135c9fc0 <line:277:9> col:9 implicit constexpr parse_state 'void (const IPFilter::Parser::parse_state &)' inline default trivial noexcept-unevaluated 0x5559135c9fc0
| | `-ParmVarDecl 0x5559135ca0d8 <col:9> col:9 'const IPFilter::Parser::parse_state &'
| |-CXXConstructorDecl 0x5559135ca148 <col:9> col:9 implicit used constexpr parse_state 'void (IPFilter::Parser::parse_state &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5559135ca258 <col:9> col:9 used 'IPFilter::Parser::parse_state &&'
| | |-CXXCtorInitializer Field 0x5559133c8980 'state' 'int'
| | | `-ImplicitCastExpr 0x5559135ca5d0 <col:9> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5559135ca5a0 <col:9> 'int' xvalue .state 0x5559133c8980
| | |     `-CXXStaticCastExpr 0x5559135ca570 <col:9> 'IPFilter::Parser::parse_state' xvalue static_cast<struct IPFilter::Parser::parse_state &&> <NoOp>
| | |       `-DeclRefExpr 0x5559135ca540 <col:9> 'IPFilter::Parser::parse_state' lvalue ParmVar 0x5559135ca258 '' 'IPFilter::Parser::parse_state &&'
| | |-CXXCtorInitializer Field 0x5559133c89e8 'last_pos' 'int'
| | | `-ImplicitCastExpr 0x5559135ca6a0 <col:9> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5559135ca670 <col:9> 'int' xvalue .last_pos 0x5559133c89e8
| | |     `-CXXStaticCastExpr 0x5559135ca640 <col:9> 'IPFilter::Parser::parse_state' xvalue static_cast<struct IPFilter::Parser::parse_state &&> <NoOp>
| | |       `-DeclRefExpr 0x5559135ca610 <col:9> 'IPFilter::Parser::parse_state' lvalue ParmVar 0x5559135ca258 '' 'IPFilter::Parser::parse_state &&'
| | `-CompoundStmt 0x5559135ca6f0 <col:9>
| `-CXXDestructorDecl 0x5559135ca310 <col:9> col:9 implicit referenced ~parse_state 'void () noexcept' inline default trivial
|-EnumDecl 0x5559133c8bf0 <line:284:2, line:290:2> line:284:2
| |-EnumConstantDecl 0x5559133c8cb0 <line:285:6> col:6 referenced s_expr0 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8d00 <col:15> col:15 referenced s_expr1 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8d50 <col:24> col:24 referenced s_expr2 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8da0 <line:286:6> col:6 referenced s_orexpr0 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8df0 <col:17> col:17 referenced s_orexpr1 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8e40 <line:287:6> col:6 referenced s_term0 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8e90 <col:15> col:15 referenced s_term1 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8ee0 <col:24> col:24 referenced s_term2 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8f30 <line:288:6> col:6 referenced s_factor0 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8f80 <col:17> col:17 referenced s_factor1 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c8fd0 <col:28> col:28 referenced s_factor2 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c9020 <line:289:6> col:6 referenced s_factor0_neg 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| |-EnumConstantDecl 0x5559133c9070 <col:21> col:21 referenced s_factor1_neg 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
| `-EnumConstantDecl 0x5559133c90c0 <col:36> col:36 referenced s_factor2_neg 'IPFilter::Parser::(anonymous enum at ../elements/ip/ipfilter.hh:284:2)'
|-CXXMethodDecl 0x5559133c9240 <line:291:2, col:37> col:7 parse_slot 'void (int, int)'
| |-ParmVarDecl 0x5559133c9128 <col:18, col:22> col:22 output 'int'
| `-ParmVarDecl 0x5559133c91a8 <col:30, col:34> col:34 pos 'int'
|-CXXMethodDecl 0x5559133c93a0 <line:292:2, col:34> col:6 parse_expr_iterative 'int (int)'
| `-ParmVarDecl 0x5559133c9308 <col:27, col:31> col:31 pos 'int'
`-CXXMethodDecl 0x5559133c9578 <line:293:2, col:38> col:6 used parse_test 'int (int, bool)'
  |-ParmVarDecl 0x5559133c9460 <col:17, col:21> col:21 pos 'int'
  `-ParmVarDecl 0x5559133c94d8 <col:26, col:31> col:31 negated 'bool'

Layout: <CGRecordLayout
  LLVMType:%"struct.IPFilter::Parser" = type { %class.Vector.7*, %class.Vector.6*, %"class.Classification::Wordwise::Program"*, %class.Element*, %class.ErrorHandler*, %"struct.IPFilter::Primitive" }
  NonVirtualBaseLLVMType:%"struct.IPFilter::Parser" = type { %class.Vector.7*, %class.Vector.6*, %"class.Classification::Wordwise::Program"*, %class.Element*, %class.ErrorHandler*, %"struct.IPFilter::Primitive" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Vector<struct IPFilter::Parser::parse_state>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5559135c2d90 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPFilter::Parser::parse_state'
|-CXXRecordDecl 0x5559135c3000 prev 0x5559135c2d90 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5559135c40d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<parse_state>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5559135c4080 'typename array_memory<parse_state>::type' sugar
|   `-TypedefType 0x5559135c4060 'conditional<true, sized_array_memory<8>, typed_array_memory<IPFilter::Parser::parse_state> >::type' sugar
|     |-Typedef 0x5559135c3f10 'type'
|     `-SubstTemplateTypeParmType 0x5559134b2680 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x555913100590 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913100538 'T'
|       `-RecordType 0x5559134b1140 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5559134b1058 'sized_array_memory'
|-FieldDecl 0x5559135c41d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPFilter::Parser::parse_state>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5559135c4220 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5559135c4258 <line:118:5, col:15> col:15 value_type 'IPFilter::Parser::parse_state':'IPFilter::Parser::parse_state'
| `-SubstTemplateTypeParmType 0x5559135c3090 'IPFilter::Parser::parse_state' sugar
|   |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555913337d78 'T'
|   `-RecordType 0x5559133c8850 'IPFilter::Parser::parse_state'
|     `-CXXRecord 0x5559133c87b8 'parse_state'
|-TypedefDecl 0x5559135c4318 <line:119:5, col:16> col:16 reference 'IPFilter::Parser::parse_state &'
| `-LValueReferenceType 0x5559135c42e0 'IPFilter::Parser::parse_state &'
|   `-SubstTemplateTypeParmType 0x5559135c3090 'IPFilter::Parser::parse_state' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x5559133c8850 'IPFilter::Parser::parse_state'
|       `-CXXRecord 0x5559133c87b8 'parse_state'
|-TypedefDecl 0x5559135c43d8 <line:120:5, col:22> col:22 const_reference 'const IPFilter::Parser::parse_state &'
| `-LValueReferenceType 0x5559135c43a0 'const IPFilter::Parser::parse_state &'
|   `-QualType 0x5559135c3091 'const IPFilter::Parser::parse_state' const
|     `-SubstTemplateTypeParmType 0x5559135c3090 'IPFilter::Parser::parse_state' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x5559133c8850 'IPFilter::Parser::parse_state'
|         `-CXXRecord 0x5559133c87b8 'parse_state'
|-TypedefDecl 0x5559135c4468 <line:121:5, col:16> col:16 pointer 'IPFilter::Parser::parse_state *'
| `-PointerType 0x5559135c4430 'IPFilter::Parser::parse_state *'
|   `-SubstTemplateTypeParmType 0x5559135c3090 'IPFilter::Parser::parse_state' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x5559133c8850 'IPFilter::Parser::parse_state'
|       `-CXXRecord 0x5559133c87b8 'parse_state'
|-TypedefDecl 0x5559135c4528 <line:122:5, col:22> col:22 const_pointer 'const IPFilter::Parser::parse_state *'
| `-PointerType 0x5559135c44f0 'const IPFilter::Parser::parse_state *'
|   `-QualType 0x5559135c3091 'const IPFilter::Parser::parse_state' const
|     `-SubstTemplateTypeParmType 0x5559135c3090 'IPFilter::Parser::parse_state' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x5559133c8850 'IPFilter::Parser::parse_state'
|         `-CXXRecord 0x5559133c87b8 'parse_state'
|-TypedefDecl 0x5559135c5100 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<parse_state>::type':'IPFilter::Parser::parse_state'
| `-ElaboratedType 0x5559135c50b0 'typename fast_argument<parse_state>::type' sugar
|   `-TypedefType 0x5559135c5090 'fast_argument<IPFilter::Parser::parse_state, false>::type' sugar
|     |-Typedef 0x5559135c5020 'type'
|     `-SubstTemplateTypeParmType 0x5559135c4de0 'IPFilter::Parser::parse_state' sugar
|       |-TemplateTypeParmType 0x55591310a0d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55591310a080 'T'
|       `-RecordType 0x5559133c8850 'IPFilter::Parser::parse_state'
|         `-CXXRecord 0x5559133c87b8 'parse_state'
|-TypedefDecl 0x5559135c5168 <line:126:5, col:22> col:22 const_access_type 'const IPFilter::Parser::parse_state &'
| `-LValueReferenceType 0x5559135c43a0 'const IPFilter::Parser::parse_state &'
|   `-QualType 0x5559135c3091 'const IPFilter::Parser::parse_state' const
|     `-SubstTemplateTypeParmType 0x5559135c3090 'IPFilter::Parser::parse_state' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x5559133c8850 'IPFilter::Parser::parse_state'
|         `-CXXRecord 0x5559133c87b8 'parse_state'
|-TypedefDecl 0x5559135c51c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x5559135c5228 <line:130:5, col:16> col:16 iterator 'IPFilter::Parser::parse_state *'
| `-PointerType 0x5559135c4430 'IPFilter::Parser::parse_state *'
|   `-SubstTemplateTypeParmType 0x5559135c3090 'IPFilter::Parser::parse_state' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x5559133c8850 'IPFilter::Parser::parse_state'
|       `-CXXRecord 0x5559133c87b8 'parse_state'
|-TypedefDecl 0x5559135c5290 <line:131:5, col:22> col:22 const_iterator 'const IPFilter::Parser::parse_state *'
| `-PointerType 0x5559135c44f0 'const IPFilter::Parser::parse_state *'
|   `-QualType 0x5559135c3091 'const IPFilter::Parser::parse_state' const
|     `-SubstTemplateTypeParmType 0x5559135c3090 'IPFilter::Parser::parse_state' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x5559133c8850 'IPFilter::Parser::parse_state'
|         `-CXXRecord 0x5559133c87b8 'parse_state'
|-EnumDecl 0x5559135c52e8 <line:134:5> col:5
| `-EnumConstantDecl 0x5559135c53e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPFilter::Parser::parse_state>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5559135c53c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555913338e08 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555913338de0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555913338dc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5559135c5468 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5559135c56f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPFilter::Parser::parse_state>::value_argument_type)' inline
| |-ParmVarDecl 0x5559135c5520 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5559135c55c0 <col:41, col:61> col:61 v 'Vector<IPFilter::Parser::parse_state>::value_argument_type':'IPFilter::Parser::parse_state'
|-CXXConstructorDecl 0x5559135c59b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPFilter::Parser::parse_state> &)' inline
| `-ParmVarDecl 0x5559135c58a0 <col:19, col:36> col:36 x 'const Vector<IPFilter::Parser::parse_state> &'
|-CXXConstructorDecl 0x5559135c5c78 <line:141:5, col:32> col:12 Vector 'void (Vector<IPFilter::Parser::parse_state> &&)' inline
| `-ParmVarDecl 0x5559135c5b60 <col:19, col:31> col:31 x 'Vector<IPFilter::Parser::parse_state> &&'
|-CXXMethodDecl 0x5559135c5fc0 <line:144:5, col:51> col:23 operator= 'Vector<IPFilter::Parser::parse_state> &(const Vector<IPFilter::Parser::parse_state> &)' inline
| `-ParmVarDecl 0x5559135c5ea0 <col:33, col:50> col:50 x 'const Vector<IPFilter::Parser::parse_state> &'
|-CXXMethodDecl 0x5559135c62d0 <line:146:5, col:46> col:23 operator= 'Vector<IPFilter::Parser::parse_state> &(Vector<IPFilter::Parser::parse_state> &&)' inline
| `-ParmVarDecl 0x5559135c61b0 <col:33, col:45> col:45 x 'Vector<IPFilter::Parser::parse_state> &&'
|-CXXMethodDecl 0x5559135c65c0 <line:148:5, col:70> col:23 assign 'Vector<IPFilter::Parser::parse_state> &(Vector::size_type, Vector<IPFilter::Parser::parse_state>::value_argument_type)' inline
| |-ParmVarDecl 0x5559135c6408 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5559135c6480 <col:43, col:69> col:63 v 'Vector<IPFilter::Parser::parse_state>::value_argument_type':'IPFilter::Parser::parse_state'
|-CXXMethodDecl 0x5559135c6718 <line:150:5, col:55> col:49 begin 'Vector<IPFilter::Parser::parse_state>::iterator ()'
| |-NoInlineAttr 0x5559135c67f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559135c6850 <col:30> Inherited
|-CXXMethodDecl 0x5559135c6898 <line:151:5, col:53> col:49 end 'Vector<IPFilter::Parser::parse_state>::iterator ()'
| |-NoInlineAttr 0x5559135c6948 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559135c69a0 <col:30> Inherited
|-CXXMethodDecl 0x5559135c6a68 <line:152:5, col:63> col:55 begin 'Vector<IPFilter::Parser::parse_state>::const_iterator () const'
| |-NoInlineAttr 0x5559135c6b18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559135c6b70 <col:30> Inherited
|-CXXMethodDecl 0x5559135c6bb8 <line:153:5, col:61> col:55 end 'Vector<IPFilter::Parser::parse_state>::const_iterator () const'
| |-NoInlineAttr 0x5559135c6c68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559135c6cc0 <col:30> Inherited
|-CXXMethodDecl 0x5559135c6d08 <line:154:5, col:64> col:55 cbegin 'Vector<IPFilter::Parser::parse_state>::const_iterator () const'
| |-NoInlineAttr 0x5559135c6db8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559135c6e10 <col:30> Inherited
|-CXXMethodDecl 0x5559135c6e58 <line:155:5, col:62> col:55 cend 'Vector<IPFilter::Parser::parse_state>::const_iterator () const'
| |-NoInlineAttr 0x5559135c6f08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5559135c6f60 <col:30> Inherited
|-CXXMethodDecl 0x5559135c6f88 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5559135c7038 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5559135c70e8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5559135c72a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPFilter::Parser::parse_state>::value_argument_type)' inline
| |-ParmVarDecl 0x5559135c7198 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5559135c7210 <col:37, col:63> col:57 v 'Vector<IPFilter::Parser::parse_state>::value_argument_type':'IPFilter::Parser::parse_state'
|-CXXMethodDecl 0x5559135c73f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5559135c7368 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559135c75a8 <line:163:5, col:65> col:43 operator[] 'IPFilter::Parser::parse_state &(Vector::size_type)'
| |-ParmVarDecl 0x5559135c74b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5559135c7660 <col:20>
| `-OptimizeNoneAttr 0x5559135c76b8 <col:30>
|-CXXMethodDecl 0x5559135c77d8 <line:164:5, col:73> col:49 operator[] 'const IPFilter::Parser::parse_state &(Vector::size_type) const'
| |-ParmVarDecl 0x5559135c76e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5559135c7890 <col:20>
| `-OptimizeNoneAttr 0x5559135c78e8 <col:30>
|-CXXMethodDecl 0x5559135c79a0 <line:165:5, col:29> col:15 at 'IPFilter::Parser::parse_state &(Vector::size_type)' inline
| `-ParmVarDecl 0x5559135c7910 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559135c7ae8 <line:166:5, col:37> col:21 at 'const IPFilter::Parser::parse_state &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5559135c7a58 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559135c7c18 <line:167:5, col:21> col:15 front 'IPFilter::Parser::parse_state &()' inline
|-CXXMethodDecl 0x5559135c7d48 <line:168:5, col:29> col:21 front 'const IPFilter::Parser::parse_state &() const' inline
|-CXXMethodDecl 0x5559135c7e18 <line:169:5, col:20> col:15 used back 'IPFilter::Parser::parse_state &()' inline
|-CXXMethodDecl 0x5559135c7ee8 <line:170:5, col:28> col:21 back 'const IPFilter::Parser::parse_state &() const' inline
|-CXXMethodDecl 0x5559135c8028 <line:172:5, col:39> col:15 unchecked_at 'IPFilter::Parser::parse_state &(Vector::size_type)' inline
| `-ParmVarDecl 0x5559135c7f98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559135c8170 <line:173:5, col:47> col:21 unchecked_at 'const IPFilter::Parser::parse_state &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5559135c80e0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559135c82b8 <line:174:5, col:59> col:15 at_u 'IPFilter::Parser::parse_state &(Vector::size_type)' inline
| |-ParmVarDecl 0x5559135c8228 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5559135c8370 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5559135c8470 <line:175:5, col:71> col:21 at_u 'const IPFilter::Parser::parse_state &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5559135c83e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5559135c8528 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5559135c8640 <line:177:5, col:20> col:15 data 'IPFilter::Parser::parse_state *()' inline
|-CXXMethodDecl 0x5559135c8738 <line:178:5, col:28> col:21 data 'const IPFilter::Parser::parse_state *() const' inline
|-CXXMethodDecl 0x5559135c88e8 <line:180:5, col:48> col:17 used push_back 'void (Vector<IPFilter::Parser::parse_state>::value_argument_type)' inline
| `-ParmVarDecl 0x5559135c87f8 <col:27, col:47> col:47 v 'Vector<IPFilter::Parser::parse_state>::value_argument_type':'IPFilter::Parser::parse_state'
|-FunctionTemplateDecl 0x5559135c90a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5559135c89a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPFilter::Parser::parse_state>':'fast_argument<IPFilter::Parser::parse_state, false>'
| `-CXXMethodDecl 0x5559135c9008 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPFilter::Parser::parse_state &&)' inline
|   `-ParmVarDecl 0x5559135c8f08 <col:58, col:62> col:62 v 'IPFilter::Parser::parse_state &&'
|-CXXMethodDecl 0x5559135c9188 <line:185:5, col:26> col:17 used pop_back 'void ()' inline
|-CXXMethodDecl 0x5559135c92d8 <line:186:5, col:49> col:17 push_front 'void (Vector<IPFilter::Parser::parse_state>::value_argument_type)' inline
| `-ParmVarDecl 0x5559135c9248 <col:28, col:48> col:48 v 'Vector<IPFilter::Parser::parse_state>::value_argument_type':'IPFilter::Parser::parse_state'
|-CXXMethodDecl 0x5559135c9390 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5559135c95d8 <line:189:5, col:62> col:21 insert 'Vector<IPFilter::Parser::parse_state>::iterator (Vector<IPFilter::Parser::parse_state>::iterator, Vector<IPFilter::Parser::parse_state>::value_argument_type)' inline
| |-ParmVarDecl 0x5559135c9450 <col:28, col:37> col:37 it 'Vector<IPFilter::Parser::parse_state>::iterator':'IPFilter::Parser::parse_state *'
| `-ParmVarDecl 0x5559135c94c8 <col:41, col:61> col:61 v 'Vector<IPFilter::Parser::parse_state>::value_argument_type':'IPFilter::Parser::parse_state'
|-CXXMethodDecl 0x5559135c9798 <line:190:5, col:38> col:21 erase 'Vector<IPFilter::Parser::parse_state>::iterator (Vector<IPFilter::Parser::parse_state>::iterator)' inline
| `-ParmVarDecl 0x5559135c96a8 <col:27, col:36> col:36 it 'Vector<IPFilter::Parser::parse_state>::iterator':'IPFilter::Parser::parse_state *'
|-CXXMethodDecl 0x5559135c99e8 <line:191:5, col:49> col:21 erase 'Vector<IPFilter::Parser::parse_state>::iterator (Vector<IPFilter::Parser::parse_state>::iterator, Vector<IPFilter::Parser::parse_state>::iterator)' inline
| |-ParmVarDecl 0x5559135c9860 <col:27, col:36> col:36 a 'Vector<IPFilter::Parser::parse_state>::iterator':'IPFilter::Parser::parse_state *'
| `-ParmVarDecl 0x5559135c98d8 <col:39, col:48> col:48 b 'Vector<IPFilter::Parser::parse_state>::iterator':'IPFilter::Parser::parse_state *'
|-CXXMethodDecl 0x5559135c9aa8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5559135c9d08 <line:195:5, col:34> col:17 swap 'void (Vector<IPFilter::Parser::parse_state> &)' inline
| `-ParmVarDecl 0x5559135c9c10 <col:22, col:33> col:33 x 'Vector<IPFilter::Parser::parse_state> &'
`-CXXDestructorDecl 0x5559135c9dd8 <line:111:7> col:7 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5559135c9ee8 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.9 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.9 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133c87b8 <../elements/ip/ipfilter.hh:277:2, line:283:2> line:277:9 referenced struct parse_state definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5559133c88d8 <col:2, col:9> col:9 implicit referenced struct parse_state
|-FieldDecl 0x5559133c8980 <line:278:6, col:10> col:10 referenced state 'int'
|-FieldDecl 0x5559133c89e8 <line:279:6, col:10> col:10 referenced last_pos 'int'
|-CXXConstructorDecl 0x5559133c8b28 <line:280:6, line:282:6> line:280:6 used parse_state 'void (int)'
| |-ParmVarDecl 0x5559133c8a50 <col:18, col:22> col:22 used s 'int'
| |-CXXCtorInitializer Field 0x5559133c8980 'state' 'int'
| | `-ImplicitCastExpr 0x5559133d3f18 <line:281:11> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5559133d3ed8 <col:11> 'int' lvalue ParmVar 0x5559133c8a50 's' 'int'
| `-CompoundStmt 0x5559133d3f60 <col:14, line:282:6>
|-CXXConstructorDecl 0x5559135c9fc0 <line:277:9> col:9 implicit constexpr parse_state 'void (const IPFilter::Parser::parse_state &)' inline default trivial noexcept-unevaluated 0x5559135c9fc0
| `-ParmVarDecl 0x5559135ca0d8 <col:9> col:9 'const IPFilter::Parser::parse_state &'
|-CXXConstructorDecl 0x5559135ca148 <col:9> col:9 implicit used constexpr parse_state 'void (IPFilter::Parser::parse_state &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5559135ca258 <col:9> col:9 used 'IPFilter::Parser::parse_state &&'
| |-CXXCtorInitializer Field 0x5559133c8980 'state' 'int'
| | `-ImplicitCastExpr 0x5559135ca5d0 <col:9> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5559135ca5a0 <col:9> 'int' xvalue .state 0x5559133c8980
| |     `-CXXStaticCastExpr 0x5559135ca570 <col:9> 'IPFilter::Parser::parse_state' xvalue static_cast<struct IPFilter::Parser::parse_state &&> <NoOp>
| |       `-DeclRefExpr 0x5559135ca540 <col:9> 'IPFilter::Parser::parse_state' lvalue ParmVar 0x5559135ca258 '' 'IPFilter::Parser::parse_state &&'
| |-CXXCtorInitializer Field 0x5559133c89e8 'last_pos' 'int'
| | `-ImplicitCastExpr 0x5559135ca6a0 <col:9> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5559135ca670 <col:9> 'int' xvalue .last_pos 0x5559133c89e8
| |     `-CXXStaticCastExpr 0x5559135ca640 <col:9> 'IPFilter::Parser::parse_state' xvalue static_cast<struct IPFilter::Parser::parse_state &&> <NoOp>
| |       `-DeclRefExpr 0x5559135ca610 <col:9> 'IPFilter::Parser::parse_state' lvalue ParmVar 0x5559135ca258 '' 'IPFilter::Parser::parse_state &&'
| `-CompoundStmt 0x5559135ca6f0 <col:9>
`-CXXDestructorDecl 0x5559135ca310 <col:9> col:9 implicit referenced ~parse_state 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.IPFilter::Parser::parse_state" = type { i32, i32 }
  NonVirtualBaseLLVMType:%"struct.IPFilter::Parser::parse_state" = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913474ff0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555913475108 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x555913475198 <col:16, col:22> col:16 public
|-EnumDecl 0x5559134751c0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5559134752c0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555913475510 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134752a0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x555913475280 <col:21> 'int' 0
| |-EnumConstantDecl 0x555913475350 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555913475528 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555913475330 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x555913475310 <col:24> 'int' 22
| |-EnumConstantDecl 0x5559134753e0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555913475540 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559134753c0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5559134753a0 <col:24> 'int' 34
| |-EnumConstantDecl 0x555913475470 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555913475558 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555913475450 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x555913475430 <col:25> 'int' 95
| `-EnumConstantDecl 0x5559134754c0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x555913476ed0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555913477308 <col:7>
|-CXXConstructorDecl 0x555913476fd8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x555913476fd8
| `-ParmVarDecl 0x5559134770e8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x555913477188 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x555913477188
| `-ParmVarDecl 0x555913477298 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x555913479448 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913475588 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5559134756e8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x555913475778 <col:32, col:38> col:32 public
|-TypedefDecl 0x5559134757b0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x555912f4d670 'uint32_t' sugar
|   |-Typedef 0x555912e5e4c8 'uint32_t'
|   `-TypedefType 0x555912e375a0 '__uint32_t' sugar
|     |-Typedef 0x555912e37198 '__uint32_t'
|     `-BuiltinType 0x555912df5620 'unsigned int'
|-CXXConstructorDecl 0x5559134758f8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x555913475820 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x555913476dd8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x555913477318 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x555913476690 'base' 'int'
| | `-ImplicitCastExpr 0x555913476e78 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x555913476e38 <col:16> 'int' lvalue ParmVar 0x555913475820 'b' 'int'
| `-CompoundStmt 0x555913477388 <col:19, line:1046:5>
|-CXXMethodDecl 0x555913475df0 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5559134759c0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x555913475a40 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x555913475ab8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x555913475b38 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x555913475bf8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x555913475c78 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x555913476248 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x555913475ec0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x5559134761a8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x555913475f68 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x555913476008 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x555913476080 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x555913476df8 <col:82> 'const ArgContext' lvalue Var 0x55591346afd8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x5559134782b8 <col:94, line:1067:5>
|     |-DeclStmt 0x555913477518 <line:1054:9, col:64>
|     | `-VarDecl 0x5559134773a8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x5559134774d0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x555913477738 <line:1055:9, col:91>
|     | `-VarDecl 0x555913477548 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x555913477710 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x5559134776f0 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x5559134776a0 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x555913477680 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x555913477628 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x5559134775d8 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x555913477608 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x555913477668 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x555913477648 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x5559134776d0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x555913477898 <line:1056:9, col:27>
|     | `-VarDecl 0x555913477830 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x555913477ce0 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x555913477c10 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x555913477b90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5559132e3178 0x555913131568 0x555913131240 0x5559130f5fe0 0x555913060a10 0x5559130606c0 0x55591305ffb0 0x555913020600
|     | | |-CallExpr 0x555913477ad0 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x5559134778c0 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x555913477970 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x555913477940 <col:19, col:23> '<bound member function type>' .begin 0x555913050bd8
|     | | | |   `-DeclRefExpr 0x555913477920 <col:19> 'const String' lvalue ParmVar 0x555913475f68 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5559134779e0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5559134779b0 <col:32, col:36> '<bound member function type>' .end 0x555913050df0
|     | | | |   `-DeclRefExpr 0x555913477990 <col:32> 'const String' lvalue ParmVar 0x555913475f68 'str' 'const String &'
|     | | | |-DeclRefExpr 0x555913477a00 <col:43> 'const bool' lvalue Var 0x5559134773a8 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x555913477a68 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x555913477a48 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x555913477a90 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x555913477830 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x555913477ab0 <col:73> 'const int' lvalue Var 0x555913477548 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x555913477b70 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x555913477b40 <col:16, col:20> '<bound member function type>' .end 0x555913050df0
|     | |     `-DeclRefExpr 0x555913477b20 <col:16> 'const String' lvalue ParmVar 0x555913475f68 'str' 'const String &'
|     | `-BinaryOperator 0x555913477cc0 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x555913477c58 <col:13> 'int' lvalue ->status 0x5559134766f8
|     |   | `-CXXThisExpr 0x555913477c48 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x555913477ca8 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x555913477c88 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555913475350 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x555913477f30 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x555913477e18 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x555913477e00 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x555913477de8 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x555913477d08 <col:13> 'int' lvalue ->status 0x5559134766f8
|     | | |     `-CXXThisExpr 0x555913477cf8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x555913477dc8 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x555913477d98 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x555913477d48 <col:23> 'int' lvalue ->status 0x5559134766f8
|     | |   |   `-CXXThisExpr 0x555913477d38 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x555913477db0 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x555913477d78 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5559134753e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x555913477f10 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x555913477eb0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x555913477e58 <col:13, col:18> '<bound member function type>' .error 0x5559134293f0
|     |   | | `-DeclRefExpr 0x555913477e38 <col:13> 'const ArgContext' lvalue ParmVar 0x555913476080 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x555913477ed8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x555913477e88 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x555913477f00 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x555913477ef0 <col:20> 'bool' false
|     |-DeclStmt 0x555913478108 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5559134780b0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x555913478040 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x555913478268 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555913478120 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x555913123518
|     | |-DeclRefExpr 0x555913478168 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x555913477830 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x555913478238 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x5559134781b0 <col:64> 'V' lvalue ParmVar 0x555913476008 'result' 'V &'
|     `-ReturnStmt 0x5559134782a8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x555913478298 <col:16> 'bool' true
|-FunctionTemplateDecl 0x555913476608 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5559134762b8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x555913476568 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x555913476368 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x555913476408 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x555913476480 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x555913476e18 <col:71> 'const ArgContext' lvalue Var 0x55591346afd8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x555913478a28 <col:83, line:1083:5>
| |   |-DeclStmt 0x555913478380 <line:1071:9, col:12>
| |   | `-VarDecl 0x555913478318 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x555913478a00 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x555913478610 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x555913478498 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x555913478460 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5559134783a8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x555913478400 <col:31> 'const String' lvalue ParmVar 0x555913476368 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x555913478420 <col:36> 'V' lvalue Var 0x555913478318 'x' 'V'
| |     | |   `-DeclRefExpr 0x555913478440 <col:39> 'const ArgContext' lvalue ParmVar 0x555913476480 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5559134785f0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5559134785d0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5559134785b8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5559134785a0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5559134784c0 <col:17> 'int' lvalue ->status 0x5559134766f8
| |     |     |     `-CXXThisExpr 0x5559134784b0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x555913478580 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x555913478550 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x555913478500 <col:27> 'int' lvalue ->status 0x5559134766f8
| |     |       |   `-CXXThisExpr 0x5559134784f0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x555913478568 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x555913478530 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5559134753e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x555913478640 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x555913478630 <col:20> 'bool' false
| |     `-IfStmt 0x5559134789d8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5559134786e0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5559134786b0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x555913478660 <col:18> 'int' lvalue ->status 0x5559134766f8
| |       | |   `-CXXThisExpr 0x555913478650 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5559134786c8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x555913478690 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5559134753e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x555913478918 <col:42, line:1079:9>
| |       | |-CallExpr 0x5559134788c0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x555913478710 <line:1076:13> '<bound member function type>' ->range_error 0x555913476d08
| |       | | | `-CXXThisExpr 0x555913478700 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x555913478740 <col:25> 'const ArgContext' lvalue ParmVar 0x555913476480 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x555913478820 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x555913478898 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x555913478878 <col:43> 'V' lvalue Var 0x555913478318 'x' 'V'
| |       | `-ReturnStmt 0x555913478908 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5559134788f8 <col:20> 'bool' false
| |       `-CompoundStmt 0x5559134789b8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x555913478978 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x555913478938 <col:13> 'V' lvalue ParmVar 0x555913476408 'result' 'V &'
| |         | `-DeclRefExpr 0x555913478958 <col:22> 'V' lvalue Var 0x555913478318 'x' 'V'
| |         `-ReturnStmt 0x5559134789a8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x555913478998 <col:20> 'bool' true
| |-CXXMethodDecl 0x5559132da428 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5559132da208 <col:16, col:30> col:30 str 'const String &'
| | |-ParmVarDecl 0x5559132da2d8 <col:35, col:38> col:38 result 'int &'
| | `-ParmVarDecl 0x5559132da340 <col:46, col:71> col:64 args 'const ArgContext &' cinit
| |   `-DeclRefExpr 0x555913476e18 <col:71> 'const ArgContext' lvalue Var 0x55591346afd8 'blank_args' 'const ArgContext'
| `-CXXMethodDecl 0x555913619a88 <col:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x555913619868 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x555913619938 <col:35, col:38> col:38 result 'unsigned int &'
|   `-ParmVarDecl 0x5559136199a0 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x555913476e18 <col:71> 'const ArgContext' lvalue Var 0x55591346afd8 'blank_args' 'const ArgContext'
|-FieldDecl 0x555913476690 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x5559134766f8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x555913476748 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x555913476a00 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x555913476788 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x555913476808 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x555913476880 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x555913476900 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x555913476d08 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x555913476ad0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x555913476b48 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x555913476be0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x555913479288 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x555913479288
| `-ParmVarDecl 0x5559134793d8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x555913479558 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x555913479558
| `-ParmVarDecl 0x555913479668 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x5559132d9f88 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913428ae8 prev 0x5559132eacc8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555913428be0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x555913428c70 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x555913428d78 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x555913428ca8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55591342a150 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55591342a130 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555913429cc8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55591342a1e0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55591342a1a0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x555913428ca8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555913429d30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55591342a260 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55591342a220 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555913429d90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55591342a2a0 <col:54> 'bool' false
| `-CompoundStmt 0x55591342a3a8 <col:61, line:38:5>
|   `-BinaryOperator 0x55591342a388 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55591342a320 <col:9> 'const Element *' lvalue ->_context 0x555913429c68
|     | `-CXXThisExpr 0x55591342a310 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55591342a370 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55591342a350 <col:20> 'int' 0
|-CXXConstructorDecl 0x555913428f88 <line:44:5, line:46:5> line:44:5 used ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555913428e38 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x555913428eb0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55591342a188 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55591342a168 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x555913429c68 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55591342a400 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55591342a3c0 <col:20> 'const Element *' lvalue ParmVar 0x555913428e38 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x555913429cc8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55591342a480 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55591342a440 <col:36> 'ErrorHandler *' lvalue ParmVar 0x555913428eb0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555913429d30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55591342a500 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55591342a4c0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x555913429d90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55591342a540 <col:73> 'bool' false
| `-CompoundStmt 0x55591342a5b8 <col:80, line:46:5>
|-CXXMethodDecl 0x5559134290b8 <line:49:5, line:51:5> line:49:20 used context 'const Element *() const'
| `-CompoundStmt 0x55591342a630 <col:36, line:51:5>
|   `-ReturnStmt 0x55591342a620 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55591342a608 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55591342a5d8 <col:16> 'const Element *const' lvalue ->_context 0x555913429c68
|         `-CXXThisExpr 0x55591342a5c8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5559134291a8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55591342a6b0 <col:32, line:57:5>
|   `-ReturnStmt 0x55591342a6a0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55591342a688 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55591342a658 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x555913429cc8
|         `-CXXThisExpr 0x55591342a648 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x555913429268 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5559134293f0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x555913429320 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x555913429540 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5559134294b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555913429690 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x555913429600 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555913429898 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x555913429748 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5559134297c0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x555913429b78 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x555913429958 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5559134299d8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x555913429a50 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x555913429c30 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x555913429c68 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x555913429cc8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x555913429d30 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x555913429d90 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x555913429de0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x555913429de0
| `-ParmVarDecl 0x555913429ef8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x555913429f98 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x555913429f98
| `-ParmVarDecl 0x55591342a0a8 <col:7> col:7 'const ArgContext &'
|-CXXConstructorDecl 0x55591361a5b8 <col:7> col:7 implicit constexpr ArgContext 'void (ArgContext &&)' inline default trivial noexcept-unevaluated 0x55591361a5b8
| `-ParmVarDecl 0x55591361a6c8 <col:7> col:7 'ArgContext &&'
`-CXXDestructorDecl 0x55591361a888 <col:7> col:7 implicit referenced ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55591313a530 prev 0x555913128b28 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55591313a628 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x55591313a6b8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x55591313aae0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x55591313a6f8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x55591313a778 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x55591313a8b0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x55591313a960 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x55591313ada8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x55591313abb0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55591313ac28 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x55591313acc8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55591313b6a8 <col:34> 'const ArgContext' lvalue Var 0x555913128ac0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55591313b0f8 <line:372:5, line:375:5> line:372:17 used parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55591313ae70 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55591313af60 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x55591313afd8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55591313b6c8 <col:34> 'const ArgContext' lvalue Var 0x555913128ac0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55591313b8a8 <col:46, line:375:5>
|   `-ReturnStmt 0x55591313b898 <line:374:2, col:63>
|     `-CallExpr 0x55591313b860 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x55591313b848 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55591313b800 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x55591313ada8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x55591313b760 <col:15> 'const String' lvalue ParmVar 0x55591313ae70 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55591313b7b0 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55591313b780 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55591313af60 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x55591313b7e0 <col:59> 'const ArgContext' lvalue ParmVar 0x55591313afd8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55591313b5d8 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x55591313b1c0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55591313b440 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x55591313b4b8 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55591313b6e8 <col:34> 'const ArgContext' lvalue Var 0x555913128ac0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x555913619e08 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x555913619f08 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x555913619f08
| `-ParmVarDecl 0x55591361a018 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x55591361a0b8 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x55591361a0b8
| `-ParmVarDecl 0x55591361a1c8 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x55591361a268 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559134aa9c0 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5559134aaad8 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x5559134aab68 <col:25, col:31> col:25 public
|-TypedefDecl 0x5559134aaba0 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x555912df54e0 'void'
|-CXXConstructorDecl 0x5559134aace8 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x5559134aac10 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x5559134abf50 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x5559134ab880 'flags_' 'int'
| | `-ImplicitCastExpr 0x5559134abff0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5559134abfb0 <col:45> 'int' lvalue ParmVar 0x5559134aac10 'flags' 'int'
| `-CompoundStmt 0x5559134ac038 <col:52, col:53>
|-CXXMethodDecl 0x5559134aafa8 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x5559134aada8 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5559134aae48 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x5559134aaec0 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5559134abf70 <col:88> 'const ArgContext' lvalue Var 0x5559134aa958 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5559134ac218 <col:100, line:210:5>
|   `-ReturnStmt 0x5559134ac208 <line:209:9, col:46>
|     `-CallExpr 0x5559134ac1b0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x5559134ac198 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5559134ac150 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x5559134abb48 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x5559134ac0b0 <col:22> 'const String' lvalue ParmVar 0x5559134aada8 'str' 'const String &'
|       |-DeclRefExpr 0x5559134ac0d0 <col:27> 'EtherAddress' lvalue ParmVar 0x5559134aae48 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5559134ac0f0 <col:34> 'const ArgContext' lvalue ParmVar 0x5559134aaec0 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x5559134ac1f0 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x5559134ac120 <col:40> 'int' lvalue ->flags_ 0x5559134ab880
|           `-CXXThisExpr 0x5559134ac110 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5559134ab248 <line:211:5, line:213:5> line:211:17 used parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x5559134ab070 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5559134ab0f0 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x5559134ab168 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5559134abf90 <col:89> 'const ArgContext' lvalue Var 0x5559134aa958 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5559134ac3f0 <col:101, line:213:5>
|   `-ReturnStmt 0x5559134ac3e0 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x5559134ac3a8 <col:9, col:66> 'bool'
|       |-MemberExpr 0x5559134ac378 <col:9> '<bound member function type>' ->parse 0x5559134aafa8
|       | `-CXXThisExpr 0x5559134ac368 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5559134ac298 <col:15> 'const String' lvalue ParmVar 0x5559134ab070 'str' 'const String &'
|       |-UnaryOperator 0x5559134ac330 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5559134ac300 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5559134ac2e8 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5559134ac2b8 <col:54> 'unsigned char *' lvalue ParmVar 0x5559134ab0f0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5559134ac348 <col:62> 'const ArgContext' lvalue ParmVar 0x5559134ab168 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5559134ab4e8 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x5559134ab310 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5559134ab388 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x5559134ab400 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x5559134ac5d8 <col:82, line:216:5>
|   `-ReturnStmt 0x5559134ac5c8 <line:215:9, col:53>
|     `-CallExpr 0x5559134ac570 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x5559134ac558 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5559134ac510 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x5559134abe78 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x5559134ac470 <col:29> 'const String' lvalue ParmVar 0x5559134ab310 'str' 'const String &'
|       |-DeclRefExpr 0x5559134ac490 <col:34> 'EtherAddress' lvalue ParmVar 0x5559134ab388 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5559134ac4b0 <col:41> 'Args' lvalue ParmVar 0x5559134ab400 'args' 'Args &'
|       `-ImplicitCastExpr 0x5559134ac5b0 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5559134ac4e0 <col:47> 'int' lvalue ->flags_ 0x5559134ab880
|           `-CXXThisExpr 0x5559134ac4d0 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5559134ab788 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x5559134ab5b0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5559134ab630 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x5559134ab6a8 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x5559134ac7b0 <col:83, line:219:5>
|   `-ReturnStmt 0x5559134ac7a0 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x5559134ac768 <col:9, col:73> 'bool'
|       |-MemberExpr 0x5559134ac738 <col:9> '<bound member function type>' ->direct_parse 0x5559134ab4e8
|       | `-CXXThisExpr 0x5559134ac728 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5559134ac658 <col:22> 'const String' lvalue ParmVar 0x5559134ab5b0 'str' 'const String &'
|       |-UnaryOperator 0x5559134ac6f0 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5559134ac6c0 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5559134ac6a8 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5559134ac678 <col:61> 'unsigned char *' lvalue ParmVar 0x5559134ab630 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5559134ac708 <col:69> 'Args' lvalue ParmVar 0x5559134ab6a8 'args' 'Args &'
|-AccessSpecDecl 0x5559134ab840 <line:220:3, col:10> col:3 private
|-FieldDecl 0x5559134ab880 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x5559134abb48 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x5559134ab8e0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5559134ab958 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x5559134ab9d0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x5559134aba50 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x5559134abe78 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x5559134abc18 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x5559134abc90 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x5559134abd08 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x5559134abd88 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x55591361ac38 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x55591361ac38
| `-ParmVarDecl 0x55591361ad48 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x55591361ade8 <col:7> col:7 implicit constexpr EtherAddressArg 'void (EtherAddressArg &&)' inline default trivial noexcept-unevaluated 0x55591361ade8
| `-ParmVarDecl 0x55591361aef8 <col:7> col:7 'EtherAddressArg &&'
`-CXXDestructorDecl 0x55591361afc0 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPrefixArg
         0 |   _Bool allow_bare_address
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55591313b8c0 <../dummy_inc/click/ipaddress.hh:382:1, line:396:1> line:382:7 referenced class IPPrefixArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55591313b9d8 <col:1, col:7> col:7 implicit referenced class IPPrefixArg
|-AccessSpecDecl 0x55591313ba68 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x55591313bb78 <line:383:5, line:385:5> line:383:5 used IPPrefixArg 'void (bool)'
| |-ParmVarDecl 0x55591313baa0 <col:17, col:44> col:22 used allow_bare_address_ 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55591313c3b0 <col:44> 'bool' false
| |-CXXCtorInitializer Field 0x55591313c348 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x55591313c440 <line:384:23> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x55591313c400 <col:23> 'bool' lvalue ParmVar 0x55591313baa0 'allow_bare_address_' 'bool'
| `-CompoundStmt 0x55591313c488 <col:44, line:385:5>
|-CXXMethodDecl 0x55591313bec8 <line:386:5, line:388:46> line:386:10 used parse 'bool (const String &, IPAddress &, IPAddress &, const ArgContext &) const'
| |-ParmVarDecl 0x55591313bc38 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55591313bcb0 <line:387:9, col:20> col:20 result_addr 'IPAddress &'
| |-ParmVarDecl 0x55591313bd28 <col:33, col:44> col:44 result_mask 'IPAddress &'
| `-ParmVarDecl 0x55591313bda0 <line:388:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55591313c3c0 <col:34> 'const ArgContext' lvalue Var 0x555913128ac0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55591313c278 <line:389:5, line:394:5> line:389:10 used parse 'bool (const String &, struct in_addr &, struct in_addr &, const ArgContext &) const'
| |-ParmVarDecl 0x55591313bf98 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x55591313c028 <line:390:9, col:25> col:25 used result_addr 'struct in_addr &'
| |-ParmVarDecl 0x55591313c0b8 <col:38, col:54> col:54 used result_mask 'struct in_addr &'
| |-ParmVarDecl 0x55591313c130 <line:391:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55591313c3e0 <col:34> 'const ArgContext' lvalue Var 0x555913128ac0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55591313c698 <col:52, line:394:5>
|   `-ReturnStmt 0x55591313c688 <line:392:2, line:393:56>
|     `-CXXMemberCallExpr 0x55591313c648 <line:392:9, line:393:56> 'bool'
|       |-MemberExpr 0x55591313c618 <line:392:9> '<bound member function type>' ->parse 0x55591313bec8
|       | `-CXXThisExpr 0x55591313c608 <col:9> 'const IPPrefixArg *' implicit this
|       |-DeclRefExpr 0x55591313c508 <col:15> 'const String' lvalue ParmVar 0x55591313bf98 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55591313c558 <col:20, col:61> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55591313c528 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55591313c028 'result_addr' 'struct in_addr &'
|       |-CXXReinterpretCastExpr 0x55591313c5b8 <line:393:8, col:49> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55591313c588 <col:38> 'struct in_addr':'in_addr' lvalue ParmVar 0x55591313c0b8 'result_mask' 'struct in_addr &'
|       `-DeclRefExpr 0x55591313c5e8 <col:52> 'const ArgContext' lvalue ParmVar 0x55591313c130 'args' 'const ArgContext &'
|-FieldDecl 0x55591313c348 <line:395:5, col:10> col:10 allow_bare_address 'bool'
|-CXXConstructorDecl 0x55591361e428 <line:382:7> col:7 implicit constexpr IPPrefixArg 'void (const IPPrefixArg &)' inline default trivial noexcept-unevaluated 0x55591361e428
| `-ParmVarDecl 0x55591361e538 <col:7> col:7 'const IPPrefixArg &'
|-CXXConstructorDecl 0x55591361e5d8 <col:7> col:7 implicit constexpr IPPrefixArg 'void (IPPrefixArg &&)' inline default trivial noexcept-unevaluated 0x55591361e5d8
| `-ParmVarDecl 0x55591361e6e8 <col:7> col:7 'IPPrefixArg &&'
`-CXXDestructorDecl 0x55591361e7b0 <col:7> col:7 implicit referenced ~IPPrefixArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPrefixArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPPrefixArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class Classification::Wordwise::Program> >
         0 |   vector_memory<class typed_array_memory<class Classification::Wordwise::Program> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Classification::Wordwise::Program>
         0 |   class vector_memory<class typed_array_memory<class Classification::Wordwise::Program> > vm_
         0 |     vector_memory<class typed_array_memory<class Classification::Wordwise::Program> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555913608a00 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<Classification::Wordwise::Program>'
|-CXXRecordDecl 0x555913608bd8 prev 0x555913608a00 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555913608c68 <col:46, col:52> col:46 public
|-TypedefDecl 0x555913608c90 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x55591360a5f0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<Program>::type':'Classification::Wordwise::Program'
| `-ElaboratedType 0x55591360a5a0 'typename typed_array_memory<Program>::type' sugar
|   `-TypedefType 0x55591360a580 'typed_array_memory<Classification::Wordwise::Program>::type' sugar
|     |-Typedef 0x555913608ea8 'type'
|     `-SubstTemplateTypeParmType 0x555913608e70 'Classification::Wordwise::Program' sugar
|       |-TemplateTypeParmType 0x55591332e620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55591332e5d0 'T'
|       `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|         `-CXXRecord 0x555913353790 'Program'
|-TypedefDecl 0x55591360a6a8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
| `-PointerType 0x55591360a670 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|   `-TypedefType 0x55591360a650 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type' sugar
|     |-Typedef 0x55591360a5f0 'type'
|     `-ElaboratedType 0x55591360a5a0 'typename typed_array_memory<Program>::type' sugar
|       `-TypedefType 0x55591360a580 'typed_array_memory<Classification::Wordwise::Program>::type' sugar
|         |-Typedef 0x555913608ea8 'type'
|         `-SubstTemplateTypeParmType 0x555913608e70 'Classification::Wordwise::Program' sugar
|           |-TemplateTypeParmType 0x55591332e620 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55591332e5d0 'T'
|           `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|             `-CXXRecord 0x555913353790 'Program'
|-CXXMethodDecl 0x55591360a828 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *) const' inline
| `-ParmVarDecl 0x55591360a738 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|-CXXConstructorDecl 0x55591360a918 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55591360a9f8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55591360acc8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<Classification::Wordwise::Program> > &)'
| `-ParmVarDecl 0x55591360abd0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<Classification::Wordwise::Program> > &'
|-CXXMethodDecl 0x55591360af08 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *)'
| |-ParmVarDecl 0x55591360ad80 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55591360adf8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|-CXXMethodDecl 0x55591360b0d8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *)'
| |-ParmVarDecl 0x55591360afc8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55591360b040 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|-CXXMethodDecl 0x55591360b238 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator ()'
|-CXXMethodDecl 0x55591360b308 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator ()'
|-CXXMethodDecl 0x55591360b558 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator (vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator, const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *)'
| |-ParmVarDecl 0x55591360b3c8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator':'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
| `-ParmVarDecl 0x55591360b440 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|-CXXMethodDecl 0x55591360b7b8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator (vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator, vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator)'
| |-ParmVarDecl 0x55591360b628 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator':'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
| `-ParmVarDecl 0x55591360b6a0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::iterator':'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|-CXXMethodDecl 0x55591360b978 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *)' inline
| `-ParmVarDecl 0x55591360b888 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|-CXXMethodDecl 0x55591360bb08 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *)' inline
| `-ParmVarDecl 0x55591360ba40 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|-CXXMethodDecl 0x55591360bbc0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55591360bc70 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55591360bea8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *)'
| |-ParmVarDecl 0x55591360bd20 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55591360bd98 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|-CXXMethodDecl 0x55591360c148 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<Classification::Wordwise::Program> > &)'
| `-ParmVarDecl 0x55591360c050 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<Classification::Wordwise::Program> > &'
|-FieldDecl 0x55591360c210 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<Classification::Wordwise::Program> >::type *'
|-FieldDecl 0x55591360c260 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55591360c2b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.11 = type { %"class.Classification::Wordwise::Program"*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.11 = type { %"class.Classification::Wordwise::Program"*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5559136075c0 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Classification::Wordwise::Program'
|-CXXRecordDecl 0x555913607830 prev 0x5559136075c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555913608970 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Program>::type':'typed_array_memory<Classification::Wordwise::Program>'
| `-ElaboratedType 0x555913608920 'typename array_memory<Program>::type' sugar
|   `-TypedefType 0x555913608900 'conditional<false, sized_array_memory<32>, typed_array_memory<Classification::Wordwise::Program> >::type' sugar
|     |-Typedef 0x5559136087b0 'type'
|     `-SubstTemplateTypeParmType 0x555913608640 'typed_array_memory<Classification::Wordwise::Program>' sugar
|       |-TemplateTypeParmType 0x555913100d10 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x555913100cb8 'F'
|       `-RecordType 0x5559136082a0 'typed_array_memory<Classification::Wordwise::Program>'
|         `-ClassTemplateSpecialization 0x5559136081c0 'typed_array_memory'
|-FieldDecl 0x55591360c300 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Classification::Wordwise::Program>::array_memory_type>':'vector_memory<typed_array_memory<Classification::Wordwise::Program> >' mutable
|-AccessSpecDecl 0x55591360c350 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55591360c388 <line:118:5, col:15> col:15 value_type 'Classification::Wordwise::Program':'Classification::Wordwise::Program'
| `-SubstTemplateTypeParmType 0x5559136078c0 'Classification::Wordwise::Program' sugar
|   |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555913337d78 'T'
|   `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|     `-CXXRecord 0x555913353790 'Program'
|-TypedefDecl 0x55591360c418 <line:119:5, col:16> col:16 reference 'Classification::Wordwise::Program &'
| `-LValueReferenceType 0x55591360c3e0 'Classification::Wordwise::Program &'
|   `-SubstTemplateTypeParmType 0x5559136078c0 'Classification::Wordwise::Program' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|       `-CXXRecord 0x555913353790 'Program'
|-TypedefDecl 0x55591360c4a8 <line:120:5, col:22> col:22 const_reference 'const Classification::Wordwise::Program &'
| `-LValueReferenceType 0x55591360c470 'const Classification::Wordwise::Program &'
|   `-QualType 0x5559136078c1 'const Classification::Wordwise::Program' const
|     `-SubstTemplateTypeParmType 0x5559136078c0 'Classification::Wordwise::Program' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|         `-CXXRecord 0x555913353790 'Program'
|-TypedefDecl 0x55591360c538 <line:121:5, col:16> col:16 pointer 'Classification::Wordwise::Program *'
| `-PointerType 0x55591360c500 'Classification::Wordwise::Program *'
|   `-SubstTemplateTypeParmType 0x5559136078c0 'Classification::Wordwise::Program' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|       `-CXXRecord 0x555913353790 'Program'
|-TypedefDecl 0x55591360c5c8 <line:122:5, col:22> col:22 const_pointer 'const Classification::Wordwise::Program *'
| `-PointerType 0x55591360c590 'const Classification::Wordwise::Program *'
|   `-QualType 0x5559136078c1 'const Classification::Wordwise::Program' const
|     `-SubstTemplateTypeParmType 0x5559136078c0 'Classification::Wordwise::Program' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|         `-CXXRecord 0x555913353790 'Program'
|-TypedefDecl 0x55591360d220 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Program>::type':'const Classification::Wordwise::Program &'
| `-ElaboratedType 0x55591360d1d0 'typename fast_argument<Program>::type' sugar
|   `-TypedefType 0x55591360d1b0 'fast_argument<Classification::Wordwise::Program, true>::type' sugar
|     |-Typedef 0x55591360d0e8 'type'
|     `-LValueReferenceType 0x55591360d0b0 'const Classification::Wordwise::Program &'
|       `-QualType 0x55591360ce51 'const Classification::Wordwise::Program' const
|         `-SubstTemplateTypeParmType 0x55591360ce50 'Classification::Wordwise::Program' sugar
|           |-TemplateTypeParmType 0x5559131099a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555913109948 'T'
|           `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|             `-CXXRecord 0x555913353790 'Program'
|-TypedefDecl 0x55591360d288 <line:126:5, col:22> col:22 const_access_type 'const Classification::Wordwise::Program &'
| `-LValueReferenceType 0x55591360c470 'const Classification::Wordwise::Program &'
|   `-QualType 0x5559136078c1 'const Classification::Wordwise::Program' const
|     `-SubstTemplateTypeParmType 0x5559136078c0 'Classification::Wordwise::Program' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|         `-CXXRecord 0x555913353790 'Program'
|-TypedefDecl 0x55591360d2e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555912df5580 'int'
|-TypedefDecl 0x55591360d348 <line:130:5, col:16> col:16 iterator 'Classification::Wordwise::Program *'
| `-PointerType 0x55591360c500 'Classification::Wordwise::Program *'
|   `-SubstTemplateTypeParmType 0x5559136078c0 'Classification::Wordwise::Program' sugar
|     |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555913337d78 'T'
|     `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|       `-CXXRecord 0x555913353790 'Program'
|-TypedefDecl 0x55591360d3b0 <line:131:5, col:22> col:22 const_iterator 'const Classification::Wordwise::Program *'
| `-PointerType 0x55591360c590 'const Classification::Wordwise::Program *'
|   `-QualType 0x5559136078c1 'const Classification::Wordwise::Program' const
|     `-SubstTemplateTypeParmType 0x5559136078c0 'Classification::Wordwise::Program' sugar
|       |-TemplateTypeParmType 0x555913337dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555913337d78 'T'
|       `-RecordType 0x555913353820 'Classification::Wordwise::Program'
|         `-CXXRecord 0x555913353790 'Program'
|-EnumDecl 0x55591360d408 <line:134:5> col:5
| `-EnumConstantDecl 0x55591360d500 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Classification::Wordwise::Program>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55591360d4e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555913338e08 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555913338de0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555913338dc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55591360d588 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55591360d818 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Classification::Wordwise::Program>::value_argument_type)' inline
| |-ParmVarDecl 0x55591360d640 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591360d6e0 <col:41, col:61> col:61 v 'Vector<Classification::Wordwise::Program>::value_argument_type':'const Classification::Wordwise::Program &'
|-CXXConstructorDecl 0x55591360dad8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Classification::Wordwise::Program> &)' inline
| `-ParmVarDecl 0x55591360d9c0 <col:19, col:36> col:36 x 'const Vector<Classification::Wordwise::Program> &'
|-CXXConstructorDecl 0x55591360dd98 <line:141:5, col:32> col:12 Vector 'void (Vector<Classification::Wordwise::Program> &&)' inline
| `-ParmVarDecl 0x55591360dc80 <col:19, col:31> col:31 x 'Vector<Classification::Wordwise::Program> &&'
|-CXXMethodDecl 0x55591363e780 <line:144:5, col:51> col:23 operator= 'Vector<Classification::Wordwise::Program> &(const Vector<Classification::Wordwise::Program> &)' inline
| `-ParmVarDecl 0x55591363e660 <col:33, col:50> col:50 x 'const Vector<Classification::Wordwise::Program> &'
|-CXXMethodDecl 0x55591363ea90 <line:146:5, col:46> col:23 operator= 'Vector<Classification::Wordwise::Program> &(Vector<Classification::Wordwise::Program> &&)' inline
| `-ParmVarDecl 0x55591363e970 <col:33, col:45> col:45 x 'Vector<Classification::Wordwise::Program> &&'
|-CXXMethodDecl 0x55591363ed80 <line:148:5, col:70> col:23 assign 'Vector<Classification::Wordwise::Program> &(Vector::size_type, Vector<Classification::Wordwise::Program>::value_argument_type)' inline
| |-ParmVarDecl 0x55591363ebc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591363ec40 <col:43, col:69> col:63 v 'Vector<Classification::Wordwise::Program>::value_argument_type':'const Classification::Wordwise::Program &'
|-CXXMethodDecl 0x55591363eea8 <line:150:5, col:55> col:49 begin 'Vector<Classification::Wordwise::Program>::iterator ()'
| |-NoInlineAttr 0x55591363ef88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591363efe0 <col:30> Inherited
|-CXXMethodDecl 0x55591363f028 <line:151:5, col:53> col:49 end 'Vector<Classification::Wordwise::Program>::iterator ()'
| |-NoInlineAttr 0x55591363f0d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591363f130 <col:30> Inherited
|-CXXMethodDecl 0x55591363f1f8 <line:152:5, col:63> col:55 begin 'Vector<Classification::Wordwise::Program>::const_iterator () const'
| |-NoInlineAttr 0x55591363f2a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591363f300 <col:30> Inherited
|-CXXMethodDecl 0x55591363f348 <line:153:5, col:61> col:55 end 'Vector<Classification::Wordwise::Program>::const_iterator () const'
| |-NoInlineAttr 0x55591363f3f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591363f450 <col:30> Inherited
|-CXXMethodDecl 0x55591363f498 <line:154:5, col:64> col:55 cbegin 'Vector<Classification::Wordwise::Program>::const_iterator () const'
| |-NoInlineAttr 0x55591363f548 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591363f5a0 <col:30> Inherited
|-CXXMethodDecl 0x55591363f5e8 <line:155:5, col:62> col:55 cend 'Vector<Classification::Wordwise::Program>::const_iterator () const'
| |-NoInlineAttr 0x55591363f698 <col:20> Inherited
| `-OptimizeNoneAttr 0x55591363f6f0 <col:30> Inherited
|-CXXMethodDecl 0x55591363f718 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591363f7c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55591363f878 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55591363fa38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Classification::Wordwise::Program>::value_argument_type)' inline
| |-ParmVarDecl 0x55591363f928 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55591363f9a0 <col:37, col:63> col:57 v 'Vector<Classification::Wordwise::Program>::value_argument_type':'const Classification::Wordwise::Program &'
|-CXXMethodDecl 0x55591363fb88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55591363faf8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55591363fd38 <line:163:5, col:65> col:43 used operator[] 'Classification::Wordwise::Program &(Vector::size_type)'
| |-ParmVarDecl 0x55591363fc40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55591363fdf0 <col:20>
| `-OptimizeNoneAttr 0x55591363fe48 <col:30>
|-CXXMethodDecl 0x55591363ff68 <line:164:5, col:73> col:49 operator[] 'const Classification::Wordwise::Program &(Vector::size_type) const'
| |-ParmVarDecl 0x55591363fe70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555913640020 <col:20>
| `-OptimizeNoneAttr 0x555913640078 <col:30>
|-CXXMethodDecl 0x555913640130 <line:165:5, col:29> col:15 at 'Classification::Wordwise::Program &(Vector::size_type)' inline
| `-ParmVarDecl 0x5559136400a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555913640278 <line:166:5, col:37> col:21 at 'const Classification::Wordwise::Program &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5559136401e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5559136403a8 <line:167:5, col:21> col:15 front 'Classification::Wordwise::Program &()' inline
|-CXXMethodDecl 0x5559136404d8 <line:168:5, col:29> col:21 front 'const Classification::Wordwise::Program &() const' inline
|-CXXMethodDecl 0x5559136405a8 <line:169:5, col:20> col:15 used back 'Classification::Wordwise::Program &()' inline
|-CXXMethodDecl 0x555913640678 <line:170:5, col:28> col:21 back 'const Classification::Wordwise::Program &() const' inline
|-CXXMethodDecl 0x5559136407b8 <line:172:5, col:39> col:15 unchecked_at 'Classification::Wordwise::Program &(Vector::size_type)' inline
| `-ParmVarDecl 0x555913640728 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555913640900 <line:173:5, col:47> col:21 unchecked_at 'const Classification::Wordwise::Program &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555913640870 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555913640a48 <line:174:5, col:59> col:15 at_u 'Classification::Wordwise::Program &(Vector::size_type)' inline
| |-ParmVarDecl 0x5559136409b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555913640b00 <col:48> Inherited "" ""
|-CXXMethodDecl 0x555913640c00 <line:175:5, col:71> col:21 at_u 'const Classification::Wordwise::Program &(Vector::size_type) const' inline
| |-ParmVarDecl 0x555913640b70 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555913640cb8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x555913640d78 <line:177:5, col:20> col:15 data 'Classification::Wordwise::Program *()' inline
|-CXXMethodDecl 0x555913640e78 <line:178:5, col:28> col:21 data 'const Classification::Wordwise::Program *() const' inline
|-CXXMethodDecl 0x555913640ff8 <line:180:5, col:48> col:17 push_back 'void (Vector<Classification::Wordwise::Program>::value_argument_type)' inline
| `-ParmVarDecl 0x555913640f38 <col:27, col:47> col:47 v 'Vector<Classification::Wordwise::Program>::value_argument_type':'const Classification::Wordwise::Program &'
|-FunctionTemplateDecl 0x555913641788 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5559136410b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Classification::Wordwise::Program>':'fast_argument<Classification::Wordwise::Program, true>'
| |-CXXMethodDecl 0x5559136416e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Classification::Wordwise::Program &&)' inline
| | `-ParmVarDecl 0x5559136415e8 <col:58, col:62> col:62 v 'Classification::Wordwise::Program &&'
| `-CXXMethodDecl 0x555913644668 <col:5, col:63> col:48 used push_back 'typename fast_argument<Program, true>::enable_rvalue_reference (Classification::Wordwise::Program &&)' inline
|   |-TemplateArgument type 'fast_argument<Classification::Wordwise::Program, true>'
|   `-ParmVarDecl 0x555913644590 <col:58, col:62> col:62 v 'Classification::Wordwise::Program &&'
|-CXXMethodDecl 0x555913641868 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5559136419b8 <line:186:5, col:49> col:17 push_front 'void (Vector<Classification::Wordwise::Program>::value_argument_type)' inline
| `-ParmVarDecl 0x555913641928 <col:28, col:48> col:48 v 'Vector<Classification::Wordwise::Program>::value_argument_type':'const Classification::Wordwise::Program &'
|-CXXMethodDecl 0x555913641a70 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555913641cb8 <line:189:5, col:62> col:21 insert 'Vector<Classification::Wordwise::Program>::iterator (Vector<Classification::Wordwise::Program>::iterator, Vector<Classification::Wordwise::Program>::value_argument_type)' inline
| |-ParmVarDecl 0x555913641b30 <col:28, col:37> col:37 it 'Vector<Classification::Wordwise::Program>::iterator':'Classification::Wordwise::Program *'
| `-ParmVarDecl 0x555913641ba8 <col:41, col:61> col:61 v 'Vector<Classification::Wordwise::Program>::value_argument_type':'const Classification::Wordwise::Program &'
|-CXXMethodDecl 0x555913641e48 <line:190:5, col:38> col:21 erase 'Vector<Classification::Wordwise::Program>::iterator (Vector<Classification::Wordwise::Program>::iterator)' inline
| `-ParmVarDecl 0x555913641d88 <col:27, col:36> col:36 it 'Vector<Classification::Wordwise::Program>::iterator':'Classification::Wordwise::Program *'
|-CXXMethodDecl 0x555913642058 <line:191:5, col:49> col:21 erase 'Vector<Classification::Wordwise::Program>::iterator (Vector<Classification::Wordwise::Program>::iterator, Vector<Classification::Wordwise::Program>::iterator)' inline
| |-ParmVarDecl 0x555913641f10 <col:27, col:36> col:36 a 'Vector<Classification::Wordwise::Program>::iterator':'Classification::Wordwise::Program *'
| `-ParmVarDecl 0x555913641f88 <col:39, col:48> col:48 b 'Vector<Classification::Wordwise::Program>::iterator':'Classification::Wordwise::Program *'
|-CXXMethodDecl 0x555913642118 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x555913642378 <line:195:5, col:34> col:17 swap 'void (Vector<Classification::Wordwise::Program> &)' inline
| `-ParmVarDecl 0x555913642280 <col:22, col:33> col:33 x 'Vector<Classification::Wordwise::Program> &'
`-CXXDestructorDecl 0x555913642448 <line:111:7> col:7 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x555913642558 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.10 = type { %class.vector_memory.11 }
  NonVirtualBaseLLVMType:%class.Vector.10 = type { %class.vector_memory.11 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorVeneer
         0 |   class ErrorHandler (primary base)
         0 |     (ErrorHandler vtable pointer)
         8 |     int _nerrors
        16 |   class ErrorHandler * _errh
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class PrefixErrorHandler
         0 |   class ErrorVeneer (primary base)
         0 |     class ErrorHandler (primary base)
         0 |       (ErrorHandler vtable pointer)
         8 |       int _nerrors
        16 |     class ErrorHandler * _errh
        24 |   class String _prefix
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133e0628 <../dummy_inc/click/error.hh:618:1, line:638:1> line:618:7 referenced class ErrorVeneer definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'ErrorHandler'
|-CXXRecordDecl 0x5559133e0788 <col:1, col:7> col:7 implicit referenced class ErrorVeneer
|-AccessSpecDecl 0x5559133e0818 <col:43, col:49> col:43 public
|-CXXConstructorDecl 0x5559133e0928 <line:625:5, line:627:5> line:625:5 used ErrorVeneer 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5559133e0850 <col:17, col:31> col:31 used errh 'ErrorHandler *'
| |-CXXCtorInitializer 'ErrorHandler'
| | `-CXXConstructExpr 0x5559133e1940 <col:5> 'ErrorHandler' 'void ()'
| |-CXXCtorInitializer Field 0x5559133e10e8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5559133e1900 <line:626:10> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5559133e18c0 <col:10> 'ErrorHandler *' lvalue ParmVar 0x5559133e0850 'errh' 'ErrorHandler *'
| `-CompoundStmt 0x5559133e19b0 <col:16, line:627:5>
|-CXXMethodDecl 0x5559133e0b00 <line:629:5, col:48> col:12 vformat 'String (const char *, __va_list_tag *)'
| |-Overrides: [ 0x5559133db120 ErrorHandler::vformat 'String (const char *, __va_list_tag *)' ]
| |-ParmVarDecl 0x5559133e09f0 <col:20, col:32> col:32 fmt 'const char *'
| `-ParmVarDecl 0x5559133e0a68 <col:37, col:45> col:45 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5559133e0c50 <line:630:5, col:38> col:12 decorate 'String (const String &)'
| |-Overrides: [ 0x5559133db3f8 ErrorHandler::decorate 'String (const String &)' ]
| `-ParmVarDecl 0x5559133e0bc0 <col:21, col:35> col:35 str 'const String &'
|-CXXMethodDecl 0x5559133e0ea8 <line:631:5, col:61> col:11 emit 'void *(const String &, void *, bool)'
| |-Overrides: [ 0x5559133db690 ErrorHandler::emit 'void *(const String &, void *, bool)' ]
| |-ParmVarDecl 0x5559133e0d08 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5559133e0d88 <col:35, col:41> col:41 user_data 'void *'
| `-ParmVarDecl 0x5559133e0e00 <col:52, col:57> col:57 more 'bool'
|-CXXMethodDecl 0x5559133e1008 <line:632:5, col:27> col:10 account 'void (int)'
| |-Overrides: [ 0x5559133db7f0 ErrorHandler::account 'void (int)' ]
| `-ParmVarDecl 0x5559133e0f78 <col:18, col:22> col:22 level 'int'
|-AccessSpecDecl 0x5559133e10b0 <line:634:3, col:10> col:3 private
|-FieldDecl 0x5559133e10e8 <line:636:5, col:19> col:19 _errh 'ErrorHandler *'
|-CXXConstructorDecl 0x5559133e1168 <line:618:7> col:7 implicit constexpr ErrorVeneer 'void (const ErrorVeneer &)' inline default noexcept-unevaluated 0x5559133e1168
| `-ParmVarDecl 0x5559133e1278 <col:7> col:7 'const ErrorVeneer &'
|-CXXConstructorDecl 0x5559133e1318 <col:7> col:7 implicit constexpr ErrorVeneer 'void (ErrorVeneer &&)' inline default noexcept-unevaluated 0x5559133e1318
| `-ParmVarDecl 0x5559133e1428 <col:7> col:7 'ErrorVeneer &&'
|-CXXMethodDecl 0x5559133e14c8 <col:7> col:7 implicit operator= 'ErrorVeneer &(const ErrorVeneer &)' inline default noexcept-unevaluated 0x5559133e14c8
| `-ParmVarDecl 0x5559133e15d8 <col:7> col:7 'const ErrorVeneer &'
|-CXXMethodDecl 0x5559133e1648 <col:7> col:7 implicit operator= 'ErrorVeneer &(ErrorVeneer &&)' inline default noexcept-unevaluated 0x5559133e1648
| `-ParmVarDecl 0x5559133e1758 <col:7> col:7 'ErrorVeneer &&'
`-CXXDestructorDecl 0x5559133e17e0 <col:7> col:7 implicit used ~ErrorVeneer 'void () noexcept' inline default
  |-Overrides: [ 0x5559133d81a0 ErrorHandler::~ErrorHandler 'void () noexcept' ]
  `-CompoundStmt 0x5559133e3868 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.ErrorVeneer = type { %class.ErrorHandler.base, %class.ErrorHandler* }
  NonVirtualBaseLLVMType:%class.ErrorVeneer = type { %class.ErrorHandler.base, %class.ErrorHandler* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559133e5a68 <../dummy_inc/click/error.hh:808:1, line:821:1> line:808:7 referenced class PrefixErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'ErrorVeneer'
|-CXXRecordDecl 0x5559133e5bc8 <col:1, col:7> col:7 implicit referenced class PrefixErrorHandler
|-AccessSpecDecl 0x5559133e5c58 <col:49, col:55> col:49 public
|-CXXConstructorDecl 0x5559133e5e18 <line:813:5, col:64> col:5 used PrefixErrorHandler 'void (ErrorHandler *, const String &)'
| |-ParmVarDecl 0x5559133e5c90 <col:24, col:38> col:38 errh 'ErrorHandler *'
| `-ParmVarDecl 0x5559133e5d08 <col:44, col:58> col:58 prefix 'const String &'
|-CXXMethodDecl 0x5559133e5f70 <line:815:5, col:38> col:12 decorate 'String (const String &)'
| |-Overrides: [ 0x5559133e0c50 ErrorVeneer::decorate 'String (const String &)' ]
| `-ParmVarDecl 0x5559133e5ee0 <col:21, col:35> col:35 str 'const String &'
|-AccessSpecDecl 0x5559133e6018 <line:817:3, col:10> col:3 private
|-FieldDecl 0x5559133e6050 <line:819:5, col:12> col:12 _prefix 'String'
|-CXXConstructorDecl 0x5559133e60c8 <line:808:7> col:7 implicit PrefixErrorHandler 'void (const PrefixErrorHandler &)' inline default noexcept-unevaluated 0x5559133e60c8
| `-ParmVarDecl 0x5559133e61d8 <col:7> col:7 'const PrefixErrorHandler &'
|-CXXConstructorDecl 0x5559133e6278 <col:7> col:7 implicit PrefixErrorHandler 'void (PrefixErrorHandler &&)' inline default noexcept-unevaluated 0x5559133e6278
| `-ParmVarDecl 0x5559133e6388 <col:7> col:7 'PrefixErrorHandler &&'
|-CXXMethodDecl 0x5559133e6428 <col:7> col:7 implicit operator= 'PrefixErrorHandler &(const PrefixErrorHandler &)' inline default noexcept-unevaluated 0x5559133e6428
| `-ParmVarDecl 0x5559133e6538 <col:7> col:7 'const PrefixErrorHandler &'
|-CXXMethodDecl 0x5559133e65a8 <col:7> col:7 implicit operator= 'PrefixErrorHandler &(PrefixErrorHandler &&)' inline default noexcept-unevaluated 0x5559133e65a8
| `-ParmVarDecl 0x5559133e66b8 <col:7> col:7 'PrefixErrorHandler &&'
`-CXXDestructorDecl 0x5559133e6740 <col:7> col:7 implicit used ~PrefixErrorHandler 'void () noexcept' inline default
  |-Overrides: [ 0x5559133e17e0 ErrorVeneer::~ErrorVeneer 'void () noexcept' ]
  `-CompoundStmt 0x555913643250 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.PrefixErrorHandler = type { %class.ErrorVeneer, %class.String }
  NonVirtualBaseLLVMType:%class.PrefixErrorHandler = type { %class.ErrorVeneer, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913014ca8 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555913014dc8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x555913014e58 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x555913014f28 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x555913015010 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x555913015ec8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555913015d70 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913016078 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x555913015f80 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5559130161c0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x555913016130 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x555913016308 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555913016278 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913016450 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5559130163c0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913016518 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x555913016698 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5559130165d0 <col:28> col:31 'int'
|-CXXMethodDecl 0x555913016760 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5559130168a8 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x555913016818 <col:28> col:31 'int'
|-CXXMethodDecl 0x555913016a28 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x555913016960 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913016b70 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x555913016ae0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913016c38 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x555913016e78 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555913016ce8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555913016d60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5559130170c8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555913016f38 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555913016fb0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555913017178 <col:86> "" ""
|-CXXMethodDecl 0x5559130173e8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x555913017258 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5559130172d0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913017598 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5559130174a8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x555913017748 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x555913017650 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x555913017a18 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x555913017800 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x555913017878 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5559130178f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913017d80 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x555913017ae0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x555913017b58 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555913017bd0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555913017e38 <col:115> "" ""
|-AccessSpecDecl 0x555913017ea8 <line:84:3, col:10> col:3 private
|-FieldDecl 0x555913017ee0 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913018388 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x555913018388
| `-ParmVarDecl 0x555913018498 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x555913018538 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x555913018538
| `-ParmVarDecl 0x555913018648 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5559130600b8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555913314490 <col:7>
|-CXXConstructorDecl 0x555913060190 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x555913060190
| `-ParmVarDecl 0x5559130602a8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x555913060318 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x555913060318
| `-ParmVarDecl 0x555913060428 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x555913316e00 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913303078 prev 0x5559132f2f10 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555913303170 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x555913303260 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x555913303388 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x555913303508 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x555913303688 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x555913303808 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5559133145f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555913314e68 <col:11>
|-CXXDestructorDecl 0x5559133146d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x555913314808 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x555913314808
| `-ParmVarDecl 0x555913314918 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5559133149b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5559133149b8
| `-ParmVarDecl 0x555913314ac8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5559132f7d08 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5559132f7e18 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5559132f8098 <col:11>
|   `-ReturnStmt 0x5559132f8088 <col:11>
|     `-UnaryOperator 0x5559132f8070 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5559132f8060 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5559132f7e88 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5559132f7e88
  `-ParmVarDecl 0x5559132f7f98 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913303870 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555913303988 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x555913303a28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x555913303a90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x555913303af8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x555913303b60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x555913303bc0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x555913303c80 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x555913303ce0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x555913303d40 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x555913314508 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x555913303a28 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x555913314e78 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x555913314ed0 <col:12>
|-CXXConstructorDecl 0x555913314b38 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x555913314b38
| `-ParmVarDecl 0x555913314c48 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x555913314ce8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x555913314ce8
| `-ParmVarDecl 0x555913314df8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5559132f73f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559132ec630 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5559132ec748 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5559132ec7d8 <col:16, col:22> col:16 public
|-EnumDecl 0x5559132ec800 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5559132ec900 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5559132ec9e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132ec8e0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5559132ec8c0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5559132ec990 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5559132ec9f8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559132ec970 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5559132ec950 <col:22> 'int' 64
|-CXXMethodDecl 0x5559132ecd38 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5559132eca20 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559132ecaa0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5559132ecb18 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559132ecb90 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5559132ecdf8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5559132ecff8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5559132ece70 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5559132ecee8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5559132ed0a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5559132ed208 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5559132ed118 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5559132ed2b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5559132ed5e0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5559132ed570 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5559132ed510 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5559132ed4d0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x555912df54e0 'void'
|       |-PointerType 0x55591304b5d0 'unsigned char *'
|       | `-BuiltinType 0x555912df55e0 'unsigned char'
|       |-TypedefType 0x555912e9d3c0 'size_t' sugar
|       | |-Typedef 0x555912e65be0 'size_t'
|       | `-BuiltinType 0x555912df5640 'unsigned long'
|       `-PointerType 0x555912df5ce0 'void *'
|         `-BuiltinType 0x555912df54e0 'void'
|-CXXMethodDecl 0x5559132eda58 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5559132ed650 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5559132ed6c8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5559132ed760 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5559132ed7e0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5559133051d0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5559133051b8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x555913305180 <col:58> 'int' 0
| |-ParmVarDecl 0x5559132ed860 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5559133051f8 <col:76> 'int' 0
| |-ParmVarDecl 0x5559132ed8e0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x555913305218 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5559132edb28 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5559132edba8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5559132edc68 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5559132edd08 <col:20>
| `-OptimizeNoneAttr 0x5559132edd60 <col:30>
|-CXXMethodDecl 0x5559132eddd8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5559132ede78 <col:20>
| `-OptimizeNoneAttr 0x5559132eded0 <col:30>
|-CXXMethodDecl 0x5559132edf48 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5559132edfe8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5559132ee098 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5559132ee138 <col:20>
| |-OptimizeNoneAttr 0x5559132ee190 <col:30>
| `-WarnUnusedResultAttr 0x5559132ee1b8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5559132ee210 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5559132ee2b0 <col:20>
| `-OptimizeNoneAttr 0x5559132ee308 <col:30>
|-CXXMethodDecl 0x5559132ee358 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5559132ee3f8 <col:20>
| `-OptimizeNoneAttr 0x5559132ee450 <col:30>
|-CXXMethodDecl 0x5559132ee498 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5559132ee538 <col:20>
| `-OptimizeNoneAttr 0x5559132ee590 <col:30>
|-CXXMethodDecl 0x5559132ee5d8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5559132ee698 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5559132ee760 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5559132ee828 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5559132ee8e8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5559132eea08 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5559133052e0 <col:54, line:99:5>
|   `-ReturnStmt 0x5559133052d0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5559133052b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x555913305288 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555913304078
|         `-CXXThisExpr 0x555913305278 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5559132eeba8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5559132eeab8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x555913305390 <col:67, line:103:5>
|   `-BinaryOperator 0x555913305370 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x555913305308 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555913304078
|     | `-CXXThisExpr 0x5559133052f8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x555913305358 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x555913305338 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5559132eeab8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5559132eeca0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x555913305410 <col:33, line:107:5>
|   `-ReturnStmt 0x555913305400 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5559133053e8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5559133053b8 <col:16> 'void *' lvalue ->_destructor_argument 0x5559133040e0
|         `-CXXThisExpr 0x5559133053a8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5559132eed60 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x555913305a40 <col:25, line:113:5>
|   |-ParenExpr 0x555913305788 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x555913305758 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5559133054c8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5559133054a0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x555913305468 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x555913305438 <col:24> '<bound member function type>' ->shared 0x5559132eddd8
|   |   |       `-ImplicitCastExpr 0x555913305488 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x555913305428 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x555913305528 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913305508 <col:42> 'int' 0
|   |   `-CallExpr 0x5559133056b8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5559133056a0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555913305680 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5559133056f8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913305598 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x555913305710 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133055c0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555913305728 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5559133055f8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x555913305740 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913305668 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913305650 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555913305618 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x555913305988 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5559133057b8 <col:2> 'unsigned char *' lvalue ->_head 0x555913303e80
|   | | `-CXXThisExpr 0x5559133057a8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x555913305970 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x555913305950 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5559133057f8 <col:10> 'unsigned char *' lvalue ->_data 0x555913303ee8
|   |     | `-CXXThisExpr 0x5559133057e8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x555913305938 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x555913305918 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x555913305838 <col:18> 'unsigned char *' lvalue ->_tail 0x555913303f50
|   |         | `-CXXThisExpr 0x555913305828 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x555913305900 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5559133058e0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x555913305878 <col:26> 'unsigned char *' lvalue ->_end 0x555913303fb8
|   |             | `-CXXThisExpr 0x555913305868 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5559133058c8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5559133058a8 <col:33> 'int' 0
|   `-BinaryOperator 0x555913305a20 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5559133059b8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555913304078
|     | `-CXXThisExpr 0x5559133059a8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x555913305a08 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5559133059e8 <col:16> 'int' 0
|-CXXMethodDecl 0x5559132eeea0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5559132eee10 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5559132eef48 <col:20>
| |-OptimizeNoneAttr 0x5559132eefa0 <col:30>
| `-WarnUnusedResultAttr 0x5559132eefc8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5559132ef098 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5559132ef008 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5559132ef140 <col:20>
| |-OptimizeNoneAttr 0x5559132ef198 <col:30>
| `-WarnUnusedResultAttr 0x5559132ef1c0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5559132ef2f8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5559132ef200 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5559132ef3d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5559132ef4d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5559132ef440 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5559132ef578 <col:20>
| `-OptimizeNoneAttr 0x5559132ef5d0 <col:30>
|-CXXMethodDecl 0x5559132ef698 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5559132ef608 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5559132ef740 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5559132ef840 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5559132ef7b0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5559132ef8e8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5559132ef9e8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5559132ef958 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5559132efa90 <col:20>
| `-OptimizeNoneAttr 0x5559132efae8 <col:30>
|-CXXMethodDecl 0x5559132efc78 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5559132efb28 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5559132efba0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x555913305238 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5559132efd28 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5559132eff28 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5559132efda0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5559132efe18 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5559132f0138 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5559132effe8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5559132f0060 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5559132f0348 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5559132f01f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5559132f0278 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x555913305248 <col:39> 'int' 0
|-CXXMethodDecl 0x5559132f0418 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5559132f04e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5559132f05a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5559132f0668 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5559132f0730 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5559132f0878 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5559132f07e8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5559132f0a48 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5559132f0938 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5559132f09b0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5559132f0b18 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5559132f0bd8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5559132f0c78 <col:20>
| `-OptimizeNoneAttr 0x5559132f0cd0 <col:30>
|-CXXMethodDecl 0x5559132f0d20 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5559132f0dc0 <col:20>
| `-OptimizeNoneAttr 0x5559132f0e18 <col:30>
|-CXXMethodDecl 0x5559132f0e68 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5559132f0f28 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5559132f0ff0 <line:292:5, col:61> col:44 used network_length 'int () const'
| |-NoInlineAttr 0x5559132f1090 <col:20>
| `-OptimizeNoneAttr 0x5559132f10e8 <col:30>
|-CXXMethodDecl 0x5559132f1238 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5559132f1128 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5559132f11a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5559132f1388 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5559132f12f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5559132f1450 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5559132f1510 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5559132f15b0 <col:20>
| `-OptimizeNoneAttr 0x5559132f1608 <col:30>
|-CXXMethodDecl 0x5559132f1658 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5559132f16f8 <col:20>
| `-OptimizeNoneAttr 0x5559132f1750 <col:30>
|-CXXMethodDecl 0x5559132f17a0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5559132f1868 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5559132f1908 <col:20>
| `-OptimizeNoneAttr 0x5559132f1960 <col:30>
|-CXXMethodDecl 0x5559132f19a8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5559132f1ac8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5559132f1c38 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5559132f1b78 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5559132f1d28 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5559132f1dc8 <col:20>
| `-OptimizeNoneAttr 0x5559132f1e20 <col:30>
|-CXXMethodDecl 0x5559132f1e70 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5559132f1f30 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5559132f2168 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5559132f1fe0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5559132f2058 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5559132f2218 <col:20>
| `-OptimizeNoneAttr 0x5559132f2270 <col:30>
|-CXXMethodDecl 0x5559132f2318 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5559132f23b8 <col:20>
| `-OptimizeNoneAttr 0x5559132f2410 <col:30>
|-CXXMethodDecl 0x5559132f2460 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5559132f2500 <col:20>
| `-OptimizeNoneAttr 0x5559132f2558 <col:30>
|-CXXMethodDecl 0x5559132f25a0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5559132f2640 <col:20>
| `-OptimizeNoneAttr 0x5559132f2698 <col:30>
|-CXXMethodDecl 0x5559132f2798 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5559132f26d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5559132f2840 <col:20>
| `-OptimizeNoneAttr 0x5559132f2898 <col:30>
|-CXXMethodDecl 0x5559132f2a58 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5559132f28d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5559132f2948 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5559132f2b08 <col:20>
| `-OptimizeNoneAttr 0x5559132f2b60 <col:30>
|-CXXMethodDecl 0x5559132f2c08 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5559132f2d28 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5559132f2e48 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5559132f2ee8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5559132f2f10 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5559132f3038 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5559132f30d8 <col:20>
| `-OptimizeNoneAttr 0x5559132f3130 <col:30>
|-CXXMethodDecl 0x5559132f31d8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5559132f3278 <col:20>
| `-OptimizeNoneAttr 0x5559132f32d0 <col:30>
|-AccessSpecDecl 0x5559132f32f8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5559132f3320 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5559132f3440 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5559132f3490 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559132f3420 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5559132f3400 <col:14> 'int' 48
|-CXXMethodDecl 0x5559132f34f8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5559132f3598 <col:20>
| `-OptimizeNoneAttr 0x5559132f35f0 <col:30>
|-CXXMethodDecl 0x5559132f3668 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5559132f3708 <col:20>
| `-OptimizeNoneAttr 0x5559132f3760 <col:30>
|-CXXMethodDecl 0x5559132f3828 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5559132f3798 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5559132f39c8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5559132f3b68 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5559132f3a78 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5559132f3c10 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5559132f3d10 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5559132f40c0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132f3cf0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5559132f3cd0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5559132f3da0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5559132f40d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132f3d80 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5559132f3d60 <col:14> 'int' 1
| |-EnumConstantDecl 0x5559132f3e30 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5559132f40f0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132f3e10 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5559132f3df0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5559132f3ec0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5559132f4108 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132f3ea0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5559132f3e80 <col:14> 'int' 3
| |-EnumConstantDecl 0x5559132f3f50 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5559132f4120 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132f3f30 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5559132f3f10 <col:13> 'int' 4
| |-EnumConstantDecl 0x5559132f3fe0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5559132f4138 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132f3fc0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5559132f3fa0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5559132f4070 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5559132f4150 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559132f4050 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5559132f4030 <col:14> 'int' 6
|-CXXMethodDecl 0x5559132f41b8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5559132f4258 <col:20>
| `-OptimizeNoneAttr 0x5559132f42b0 <col:30>
|-CXXMethodDecl 0x5559132f43a8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5559132f42e8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5559132f4450 <col:20>
| `-OptimizeNoneAttr 0x5559132f44a8 <col:30>
|-CXXMethodDecl 0x5559132f4518 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5559132f4640 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5559132f47b8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5559132f46f0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5559132f4880 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5559132f4948 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5559132f4a88 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5559132f49f8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5559132f4b30 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5559132f4c30 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5559132f4e30 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132f4c10 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5559132f4bf0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5559132f4cc0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5559132f4e48 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132f4ca0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5559132f4c80 <col:45> 'int' 4
| |-EnumConstantDecl 0x5559132f4d50 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5559132f4e60 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132f4d30 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5559132f4d10 <col:24> 'int' 0
| `-EnumConstantDecl 0x5559132f4de0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5559132f4e78 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559132f4dc0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5559132f4da0 <col:47> 'int' 16
|-CXXMethodDecl 0x5559132f4ed8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5559132f5048 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5559132f4f88 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5559132f50f0 <col:20>
| `-OptimizeNoneAttr 0x5559132f5148 <col:30>
|-CXXMethodDecl 0x5559132f5198 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x555913305b60 <col:18, col:36>
|   `-ReturnStmt 0x555913305b50 <col:20, col:33>
|     `-ImplicitCastExpr 0x555913305b38 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x555913305b18 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x555913305ae8 <col:27> '<bound member function type>' ->xanno 0x5559132f31d8
|           `-CXXThisExpr 0x555913305ad8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5559132f5290 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x555913305c70 <col:30, col:48>
|   `-ReturnStmt 0x555913305c60 <col:32, col:45>
|     `-ImplicitCastExpr 0x555913305c48 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x555913305c28 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x555913305bf8 <col:39> '<bound member function type>' ->xanno 0x5559132f3038
|           `-CXXThisExpr 0x555913305be8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5559132f5378 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x555913305e08 <col:24, col:50>
|   `-ReturnStmt 0x555913305df8 <col:26, col:47>
|     `-UnaryOperator 0x555913305de0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555913305dc0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x555913305da8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555913305d58 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x555913303388
|         |   `-CXXMemberCallExpr 0x555913305d38 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x555913305d08 <col:34> '<bound member function type>' ->xanno 0x5559132f31d8
|         |       `-CXXThisExpr 0x555913305cf8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x555913305d88 <col:46> 'int' 0
|-CXXMethodDecl 0x5559132f5468 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x555913305fd8 <col:36, col:62>
|   `-ReturnStmt 0x555913305fc8 <col:38, col:59>
|     `-UnaryOperator 0x555913305fb0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555913305f90 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x555913305f78 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555913305ef0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x555913303388
|         |   `-CXXMemberCallExpr 0x555913305ed0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555913305ea0 <col:46> '<bound member function type>' ->xanno 0x5559132f3038
|         |       `-CXXThisExpr 0x555913305e90 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x555913305f20 <col:58> 'int' 0
|-CXXMethodDecl 0x5559132f5588 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x555913306170 <col:26, col:53>
|   `-ReturnStmt 0x555913306160 <col:28, col:50>
|     `-UnaryOperator 0x555913306148 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555913306128 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x555913306110 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5559133060c0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x555913303688
|         |   `-CXXMemberCallExpr 0x5559133060a0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x555913306070 <col:36> '<bound member function type>' ->xanno 0x5559132f31d8
|         |       `-CXXThisExpr 0x555913306060 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5559133060f0 <col:49> 'int' 0
|-CXXMethodDecl 0x5559132f56a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x555913306348 <col:38, col:65>
|   `-ReturnStmt 0x555913306338 <col:40, col:62>
|     `-UnaryOperator 0x555913306320 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555913306300 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5559133062e8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555913306258 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x555913303688
|         |   `-CXXMemberCallExpr 0x555913306238 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555913306208 <col:48> '<bound member function type>' ->xanno 0x5559132f3038
|         |       `-CXXThisExpr 0x5559133061f8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x555913306288 <col:61> 'int' 0
|-CXXMethodDecl 0x5559132f5858 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5559132f5760 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x555913306a18 <col:34, line:463:5>
|   |-ParenExpr 0x555913306860 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x555913306830 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x555913306498 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555913306468 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5559133063b8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5559133063a0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555913306360 <col:23> 'int' lvalue ParmVar 0x5559132f5760 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555913306380 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913306448 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555913306418 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5559133063d8 <col:33> 'int' lvalue ParmVar 0x5559132f5760 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x555913306430 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5559133063f8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5559133064f8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5559133064d8 <col:56> 'int' 0
|   |   `-CallExpr 0x555913306790 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x555913306778 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555913306758 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5559133067d0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133065e8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5559133067e8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913306618 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555913306800 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913306650 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x555913306818 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913306740 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913306728 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5559133066e8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x555913306a08 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5559133069f0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5559133069d0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5559133069a0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555913306950 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x555913303388
|         |   `-CXXMemberCallExpr 0x555913306930 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555913306900 <col:9> '<bound member function type>' ->xanno 0x5559132f3038
|         |       `-CXXThisExpr 0x5559133068f0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5559133069b8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x555913306980 <col:21> 'int' lvalue ParmVar 0x5559132f5760 'i' 'int'
|-CXXMethodDecl 0x5559132f5aa8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5559132f5918 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5559132f5990 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55591330f378 <col:40, line:472:5>
|   |-ParenExpr 0x55591330f190 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55591330f160 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x555913306b70 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555913306b40 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555913306a90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555913306a78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555913306a38 <col:23> 'int' lvalue ParmVar 0x5559132f5918 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555913306a58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913306b20 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555913306af0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555913306ab0 <col:33> 'int' lvalue ParmVar 0x5559132f5918 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x555913306b08 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x555913306ad0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x555913306bd0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913306bb0 <col:56> 'int' 0
|   |   `-CallExpr 0x55591330f0c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55591330f0a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55591330f088 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55591330f100 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55591330ef10 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55591330f118 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55591330ef40 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55591330f130 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55591330ef78 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55591330f148 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55591330f070 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55591330f058 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55591330f018 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55591330f358 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55591330f300 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55591330f2d0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55591330f280 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x555913303388
|     | |   `-CXXMemberCallExpr 0x55591330f260 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55591330f230 <col:2> '<bound member function type>' ->xanno 0x5559132f31d8
|     | |       `-CXXThisExpr 0x55591330f220 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55591330f2e8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55591330f2b0 <col:14> 'int' lvalue ParmVar 0x5559132f5918 'i' 'int'
|     `-ImplicitCastExpr 0x55591330f340 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55591330f320 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5559132f5990 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5559132f5c68 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5559132f5b70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55591330faf8 <col:36, line:485:5>
|   |-ParenExpr 0x55591330f860 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55591330f830 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55591330f510 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55591330f4e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55591330f3f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55591330f3d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55591330f398 <col:23> 'int' lvalue ParmVar 0x5559132f5b70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55591330f3b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55591330f4c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55591330f4a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55591330f410 <col:33> 'int' lvalue ParmVar 0x5559132f5b70 'i' 'int'
|   |   |     `-BinaryOperator 0x55591330f488 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55591330f470 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55591330f430 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55591330f450 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55591330f570 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55591330f550 <col:60> 'int' 0
|   |   `-CallExpr 0x55591330f790 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55591330f778 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55591330f758 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55591330f7d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55591330f5e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55591330f7e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55591330f618 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55591330f800 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55591330f650 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55591330f818 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55591330f740 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55591330f728 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55591330f6e8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55591330fae8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55591330fad0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55591330fab8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55591330fa88 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55591330fa28 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55591330f9f8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55591330f970 <col:61, col:70> 'char const[48]' lvalue ->c 0x555913303260
|             |   `-CXXMemberCallExpr 0x55591330f950 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55591330f920 <col:61> '<bound member function type>' ->xanno 0x5559132f3038
|             |       `-CXXThisExpr 0x55591330f910 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55591330fa10 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55591330f9a0 <col:74> 'int' lvalue ParmVar 0x5559132f5b70 'i' 'int'
|-CXXMethodDecl 0x5559132f5eb8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5559132f5d28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5559132f5da0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x555913310248 <col:42, line:500:5>
|   |-ParenExpr 0x55591330ffe0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55591330ffb0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55591330fc90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55591330fc60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55591330fb70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55591330fb58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55591330fb18 <col:23> 'int' lvalue ParmVar 0x5559132f5d28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55591330fb38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55591330fc40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55591330fc28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55591330fb90 <col:33> 'int' lvalue ParmVar 0x5559132f5d28 'i' 'int'
|   |   |     `-BinaryOperator 0x55591330fc08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55591330fbf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55591330fbb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55591330fbd0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55591330fcf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55591330fcd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55591330ff10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55591330fef8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55591330fed8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55591330ff50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55591330fd60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55591330ff68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55591330fd98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55591330ff80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55591330fdd0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55591330ff98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55591330fec0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55591330fea8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55591330fe68 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x555913310228 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5559133101d8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5559133101a8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x555913310150 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555913310120 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5559133100d0 <col:48, col:57> 'char [48]' lvalue ->c 0x555913303260
|     |     |   `-CXXMemberCallExpr 0x5559133100b0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555913310080 <col:48> '<bound member function type>' ->xanno 0x5559132f31d8
|     |     |       `-CXXThisExpr 0x555913310070 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555913310138 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555913310100 <col:61> 'int' lvalue ParmVar 0x5559132f5d28 'i' 'int'
|     `-ImplicitCastExpr 0x555913310210 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5559133101f0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5559132f5da0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5559132f6078 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5559132f5f80 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5559133109a8 <col:35, line:513:5>
|   |-ParenExpr 0x5559133106b8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x555913310688 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5559133103e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5559133103b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5559133102c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5559133102a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555913310268 <col:23> 'int' lvalue ParmVar 0x5559132f5f80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555913310288 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913310390 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555913310378 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5559133102e0 <col:33> 'int' lvalue ParmVar 0x5559132f5f80 'i' 'int'
|   |   |     `-BinaryOperator 0x555913310358 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555913310340 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555913310300 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555913310320 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555913310440 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913310420 <col:60> 'int' 0
|   |   `-CallExpr 0x5559133105e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5559133105d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5559133105b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555913310628 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133104b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555913310640 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133104e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555913310658 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913310520 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x555913310670 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913310598 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913310580 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555913310540 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x555913310998 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x555913310980 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x555913310968 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555913310938 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5559133108b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x555913310880 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555913310830 <col:60, col:69> 'char const[48]' lvalue ->c 0x555913303260
|             |   `-CXXMemberCallExpr 0x555913310810 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5559133107e0 <col:60> '<bound member function type>' ->xanno 0x5559132f3038
|             |       `-CXXThisExpr 0x5559133107d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555913310898 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555913310860 <col:73> 'int' lvalue ParmVar 0x5559132f5f80 'i' 'int'
|-CXXMethodDecl 0x5559132f62c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5559132f6138 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5559132f61b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5559133110b8 <col:41, line:528:5>
|   |-ParenExpr 0x555913310e50 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x555913310e20 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555913310b40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555913310b10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555913310a20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555913310a08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5559133109c8 <col:23> 'int' lvalue ParmVar 0x5559132f6138 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5559133109e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913310af0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555913310ad8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555913310a40 <col:33> 'int' lvalue ParmVar 0x5559132f6138 'i' 'int'
|   |   |     `-BinaryOperator 0x555913310ab8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555913310aa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555913310a60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555913310a80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555913310ba0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913310b80 <col:60> 'int' 0
|   |   `-CallExpr 0x555913310d80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555913310d68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555913310d48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555913310dc0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913310c10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555913310dd8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913310c48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555913310df0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913310c80 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x555913310e08 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913310d30 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913310d18 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555913310cd8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x555913311098 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x555913311048 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555913311018 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x555913310fc0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555913310f90 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555913310f40 <col:47, col:56> 'char [48]' lvalue ->c 0x555913303260
|     |     |   `-CXXMemberCallExpr 0x555913310f20 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555913310ef0 <col:47> '<bound member function type>' ->xanno 0x5559132f31d8
|     |     |       `-CXXThisExpr 0x555913310ee0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555913310fa8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555913310f70 <col:60> 'int' lvalue ParmVar 0x5559132f6138 'i' 'int'
|     `-ImplicitCastExpr 0x555913311080 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x555913311060 <col:65> 'int16_t':'short' lvalue ParmVar 0x5559132f61b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5559132f6488 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5559132f6390 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555913311788 <col:36, line:541:5>
|   |-ParenExpr 0x555913311528 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5559133114f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555913311250 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555913311220 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555913311130 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555913311118 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5559133110d8 <col:23> 'int' lvalue ParmVar 0x5559132f6390 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5559133110f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913311200 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5559133111e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555913311150 <col:33> 'int' lvalue ParmVar 0x5559132f6390 'i' 'int'
|   |   |     `-BinaryOperator 0x5559133111c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5559133111b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555913311170 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555913311190 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5559133112b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913311290 <col:60> 'int' 0
|   |   `-CallExpr 0x555913311458 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555913311440 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555913311420 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555913311498 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913311320 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5559133114b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913311358 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5559133114c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913311390 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5559133114e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913311408 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5559133113f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5559133113b0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x555913311778 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x555913311760 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x555913311748 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555913311718 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5559133116c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555913311690 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555913311640 <col:61, col:70> 'char const[48]' lvalue ->c 0x555913303260
|             |   `-CXXMemberCallExpr 0x555913311620 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5559133115f0 <col:61> '<bound member function type>' ->xanno 0x5559132f3038
|             |       `-CXXThisExpr 0x5559133115e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5559133116a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555913311670 <col:74> 'int' lvalue ParmVar 0x5559132f6390 'i' 'int'
|-CXXMethodDecl 0x5559132f6658 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5559132f6548 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5559132f65c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5559132f6708 <col:20>
| `-OptimizeNoneAttr 0x5559132f6760 <col:30>
|-CXXMethodDecl 0x5559132f6898 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5559132f67a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x555913311e58 <col:35, line:562:5>
|   |-ParenExpr 0x555913311bf8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x555913311bc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555913311920 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5559133118f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555913311800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5559133117e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5559133117a8 <col:23> 'int' lvalue ParmVar 0x5559132f67a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5559133117c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5559133118d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5559133118b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555913311820 <col:33> 'int' lvalue ParmVar 0x5559132f67a0 'i' 'int'
|   |   |     `-BinaryOperator 0x555913311898 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555913311880 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555913311840 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555913311860 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555913311980 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913311960 <col:60> 'int' 0
|   |   `-CallExpr 0x555913311b28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555913311b10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555913311af0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555913311b68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133119f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555913311b80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913311a28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555913311b98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913311a60 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x555913311bb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913311ad8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913311ac0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555913311a80 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x555913311e48 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x555913311e30 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x555913311e18 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555913311de8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x555913311d90 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x555913311d60 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555913311d10 <col:60, col:69> 'char const[48]' lvalue ->c 0x555913303260
|             |   `-CXXMemberCallExpr 0x555913311cf0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555913311cc0 <col:60> '<bound member function type>' ->xanno 0x5559132f3038
|             |       `-CXXThisExpr 0x555913311cb0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555913311d78 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555913311d40 <col:73> 'int' lvalue ParmVar 0x5559132f67a0 'i' 'int'
|-CXXMethodDecl 0x5559132f6aa8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5559132f6958 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5559132f69d0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x555913312538 <col:41, line:577:5>
|   |-ParenExpr 0x5559133122c8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x555913312298 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555913311ff0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555913311fc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555913311ed0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555913311eb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555913311e78 <col:23> 'int' lvalue ParmVar 0x5559132f6958 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555913311e98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913311fa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555913311f88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555913311ef0 <col:33> 'int' lvalue ParmVar 0x5559132f6958 'i' 'int'
|   |   |     `-BinaryOperator 0x555913311f68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555913311f50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555913311f10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555913311f30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555913312050 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913312030 <col:60> 'int' 0
|   |   `-CallExpr 0x5559133121f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5559133121e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5559133121c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555913312238 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133120c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555913312250 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133120f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555913312268 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913312130 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x555913312280 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5559133121a8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913312190 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555913312150 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x555913312518 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5559133124c8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555913312498 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x555913312438 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555913312408 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5559133123b8 <col:47, col:56> 'char [48]' lvalue ->c 0x555913303260
|     |     |   `-CXXMemberCallExpr 0x555913312398 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555913312368 <col:47> '<bound member function type>' ->xanno 0x5559132f31d8
|     |     |       `-CXXThisExpr 0x555913312358 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555913312420 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5559133123e8 <col:60> 'int' lvalue ParmVar 0x5559132f6958 'i' 'int'
|     `-ImplicitCastExpr 0x555913312500 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5559133124e0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5559132f69d0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5559132f6c68 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5559132f6b70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555913312c68 <col:36, line:591:5>
|   |-ParenExpr 0x5559133129a8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x555913312978 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5559133126d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5559133126a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5559133125b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555913312598 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555913312558 <col:23> 'int' lvalue ParmVar 0x5559132f6b70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555913312578 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913312680 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555913312668 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5559133125d0 <col:33> 'int' lvalue ParmVar 0x5559132f6b70 'i' 'int'
|   |   |     `-BinaryOperator 0x555913312648 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555913312630 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5559133125f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555913312610 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x555913312730 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913312710 <col:60> 'int' 0
|   |   `-CallExpr 0x5559133128d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5559133128c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5559133128a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555913312918 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133127a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x555913312930 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133127d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555913312948 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913312810 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x555913312960 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913312888 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913312870 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555913312830 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x555913312c58 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x555913312c40 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x555913312c28 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555913312bf8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x555913312b70 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555913312b40 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555913312af0 <col:61, col:70> 'char const[48]' lvalue ->c 0x555913303260
|             |   `-CXXMemberCallExpr 0x555913312ad0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555913312aa0 <col:61> '<bound member function type>' ->xanno 0x5559132f3038
|             |       `-CXXThisExpr 0x555913312a90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555913312b58 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555913312b20 <col:74> 'int' lvalue ParmVar 0x5559132f6b70 'i' 'int'
|-CXXMethodDecl 0x5559132f6eb8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5559132f6d28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5559132f6da0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x555913313358 <col:42, line:606:5>
|   |-ParenExpr 0x5559133130f0 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5559133130c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555913312e00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555913312dd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555913312ce0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555913312cc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555913312c88 <col:23> 'int' lvalue ParmVar 0x5559132f6d28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555913312ca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913312db0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555913312d98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555913312d00 <col:33> 'int' lvalue ParmVar 0x5559132f6d28 'i' 'int'
|   |   |     `-BinaryOperator 0x555913312d78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555913312d60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555913312d20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555913312d40 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x555913312e60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913312e40 <col:60> 'int' 0
|   |   `-CallExpr 0x555913313020 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555913313008 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555913312fe8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555913313060 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913312ed0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x555913313078 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913312f20 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555913313090 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913312f58 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5559133130a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913312fd0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913312fb8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555913312f78 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x555913313338 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5559133132e8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5559133132b8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x555913313260 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555913313230 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5559133131e0 <col:48, col:57> 'char [48]' lvalue ->c 0x555913303260
|     |     |   `-CXXMemberCallExpr 0x5559133131c0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555913313190 <col:48> '<bound member function type>' ->xanno 0x5559132f31d8
|     |     |       `-CXXThisExpr 0x555913313180 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555913313248 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555913313210 <col:61> 'int' lvalue ParmVar 0x5559132f6d28 'i' 'int'
|     `-ImplicitCastExpr 0x555913313320 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x555913313300 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5559132f6da0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5559132f7050 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5559132f6f80 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x555913313bc8 <col:33, line:620:5>
|   |-ParenExpr 0x555913313940 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x555913313910 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x555913313560 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555913313530 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5559133133d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5559133133b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555913313378 <col:23> 'int' lvalue ParmVar 0x5559132f6f80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555913313398 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913313510 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5559133134f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5559133133f0 <col:33> 'int' lvalue ParmVar 0x5559132f6f80 'i' 'int'
|   |   |     `-BinaryOperator 0x5559133134d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5559133134c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555913313410 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x555913313498 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x555913313480 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x555913313448 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5559133135c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5559133135a0 <col:79> 'int' 0
|   |   `-CallExpr 0x555913313870 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x555913313858 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555913313838 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5559133138b0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133136a8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5559133138c8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5559133136f0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5559133138e0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913313728 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5559133138f8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913313820 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913313808 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5559133137c8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x555913313bb8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x555913313ba0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x555913313b88 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555913313b58 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x555913313ad0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x555913313aa0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555913313a50 <col:67, col:76> 'char const[48]' lvalue ->c 0x555913303260
|             |   `-CXXMemberCallExpr 0x555913313a30 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555913313a00 <col:67> '<bound member function type>' ->xanno 0x5559132f3038
|             |       `-CXXThisExpr 0x5559133139f0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555913313ab8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555913313a80 <col:80> 'int' lvalue ParmVar 0x5559132f6f80 'i' 'int'
|-CXXMethodDecl 0x5559132f7268 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5559132f7110 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5559132f7190 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5559133143f0 <col:45, line:635:5>
|   |-ParenExpr 0x555913314138 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x555913314108 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x555913313dd0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555913313da0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555913313c40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555913313c28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555913313be8 <col:23> 'int' lvalue ParmVar 0x5559132f7110 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555913313c08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555913313d80 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x555913313d68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555913313c60 <col:33> 'int' lvalue ParmVar 0x5559132f7110 'i' 'int'
|   |   |     `-BinaryOperator 0x555913313d48 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555913313d30 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555913313c80 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5559132f3440 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x555913313d08 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x555913313cf0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x555913313cb8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x555913313e30 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555913313e10 <col:79> 'int' 0
|   |   `-CallExpr 0x555913314068 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x555913314050 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555913314030 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555912e94120 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5559133140a8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913313ea0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5559133140c0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555913313ee8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5559133140d8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555913313f20 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5559133140f0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555913314018 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555913314000 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555913313fb8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5559133143d0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x555913314338 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555913314308 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5559133142a8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555913314278 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555913314228 <col:54, col:63> 'char [48]' lvalue ->c 0x555913303260
|     |     |   `-CXXMemberCallExpr 0x555913314208 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5559133141d8 <col:54> '<bound member function type>' ->xanno 0x5559132f31d8
|     |     |       `-CXXThisExpr 0x5559133141c8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555913314290 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555913314258 <col:67> 'int' lvalue ParmVar 0x5559132f7110 'i' 'int'
|     `-CXXConstCastExpr 0x5559133143a0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x555913314388 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x555913314350 <col:91> 'const void *' lvalue ParmVar 0x5559132f7190 'x' 'const void *'
|-CXXMethodDecl 0x5559132f7338 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x555913314478 <col:34, line:640:5>
|   `-ReturnStmt 0x555913314468 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x555913314450 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x555913314420 <col:16> 'Packet *' lvalue ->_data_packet 0x555913303e18
|         `-CXXThisExpr 0x555913314410 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5559132fdc60 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5559132fdbd0 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555913305268 <col:46> 'bool' true
|-CXXMethodDecl 0x5559132fddd8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5559132fdd18 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5559132fde80 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5559132fe630 <line:660:22> "" ""
| |-EnumConstantDecl 0x5559132fdf80 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe6a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fdf60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5559132fdf40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5559132ec900 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5559132fe010 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe6b8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fdff0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5559132fdfd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5559132ec990 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5559132fe0a0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe6d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fe080 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5559132fe060 <col:21> 'int' 0
| |-EnumConstantDecl 0x5559132fe130 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe6e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fe110 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5559132fe0f0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5559132fe1c0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe700 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fe1a0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5559132fe180 <col:21> 'int' 16
| |-EnumConstantDecl 0x5559132fe250 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe718 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fe230 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5559132fe210 <col:19> 'int' 32
| |-EnumConstantDecl 0x5559132fe2e0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe730 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fe2c0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5559132fe2a0 <col:19> 'int' EnumConstant 0x5559132fe130 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5559132fe370 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe748 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fe350 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5559132fe330 <col:19> 'int' EnumConstant 0x5559132fe250 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5559132fe440 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe760 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fe420 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5559132fe400 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5559132fe3c0 <col:23> 'int' EnumConstant 0x5559132fe370 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5559132fe3e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5559132fe510 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5559132fe778 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5559132fe4f0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5559132fe4d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5559132fe490 <col:23> 'int' EnumConstant 0x5559132fe370 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5559132fe4b0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5559132fe5e0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5559132fe790 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5559132fe5c0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5559132fe5a0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5559132fe560 <col:23> 'int' EnumConstant 0x5559132fe370 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5559132fe580 <col:40> 'int' 8
|-CXXMethodDecl 0x5559132fe7d0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5559132fe870 <col:68> "" ""
|-CXXMethodDecl 0x5559132fe908 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5559132fe9a8 <col:45> "" ""
|-CXXMethodDecl 0x5559132fea40 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5559132feae0 <col:57> "" ""
|-CXXMethodDecl 0x5559132feb78 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5559132fec18 <col:45> "" ""
|-CXXMethodDecl 0x5559132fecb0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5559132fed50 <col:57> "" ""
|-CXXMethodDecl 0x5559132fede0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5559132fee80 <col:51> "" ""
|-CXXMethodDecl 0x5559132fef10 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5559132fefb0 <col:63> "" ""
|-CXXMethodDecl 0x5559132ff040 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5559132ff0e0 <col:53> "" ""
|-CXXMethodDecl 0x5559132ff170 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5559132ff210 <col:65> "" ""
|-CXXMethodDecl 0x5559132ff328 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5559132ff298 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5559132ff3d0 <col:61> "" ""
|-CXXMethodDecl 0x5559132ff568 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5559132ff458 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5559132ff4d0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5559132ff618 <col:67> "" ""
|-CXXMethodDecl 0x5559132ff730 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5559132ff6a0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5559132ff7d8 <col:63> "" ""
|-CXXMethodDecl 0x5559132ff970 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5559132ff860 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5559132ff8d8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5559132ffa20 <col:69> "" ""
|-CXXMethodDecl 0x5559132ffb38 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5559132ffaa8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5559132ffbe0 <col:63> "" ""
|-CXXMethodDecl 0x5559132ffd78 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5559132ffc68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5559132ffce0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5559132ffe28 <col:69> "" ""
|-CXXMethodDecl 0x5559132fff40 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5559132ffeb0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5559132fffe8 <col:62> "" ""
|-CXXMethodDecl 0x555913300180 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x555913300070 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5559133000e8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x555913300230 <col:68> "" ""
|-CXXMethodDecl 0x555913300348 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5559133002b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5559133003f0 <col:63> "" ""
|-CXXMethodDecl 0x555913300588 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x555913300478 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5559133004f0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x555913300638 <col:69> "" ""
|-CXXMethodDecl 0x5559133006c8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x555913300768 <col:64> "" ""
|-CXXMethodDecl 0x5559133007f8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x555913300898 <col:52> "" ""
|-CXXMethodDecl 0x555913300928 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5559133009c8 <col:67> "" ""
|-CXXMethodDecl 0x555913300a58 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x555913300af8 <col:55> "" ""
|-CXXMethodDecl 0x555913300c10 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x555913300b80 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555913300cb8 <col:58> "" ""
|-CXXMethodDecl 0x555913300e50 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x555913300d40 <col:33> col:36 'int'
| |-ParmVarDecl 0x555913300db8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x555913300f00 <col:62> "" ""
|-CXXMethodDecl 0x555913301018 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x555913300f88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5559133010c0 <col:58> "" ""
|-CXXMethodDecl 0x555913301258 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x555913301148 <col:33> col:36 'int'
| |-ParmVarDecl 0x5559133011c0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x555913301308 <col:62> "" ""
|-CXXMethodDecl 0x555913301420 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x555913301390 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5559133014c8 <col:60> "" ""
|-CXXMethodDecl 0x555913301660 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x555913301550 <col:34> col:37 'int'
| |-ParmVarDecl 0x5559133015c8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x555913301710 <col:64> "" ""
|-CXXMethodDecl 0x555913301828 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x555913301798 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5559133018d0 <col:58> "" ""
|-CXXMethodDecl 0x555913301a68 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x555913301958 <col:33> col:36 'int'
| |-ParmVarDecl 0x5559133019d0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x555913301b18 <col:62> "" ""
|-CXXMethodDecl 0x555913302cf0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x555913302c60 <col:33> col:36 'int'
| `-DeprecatedAttr 0x555913302d98 <col:59> "" ""
|-CXXMethodDecl 0x555913302f30 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x555913302e20 <col:33> col:36 'int'
| |-ParmVarDecl 0x555913302e98 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555913302fe0 <col:63> "" ""
|-AccessSpecDecl 0x555913303050 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x555913303078 prev 0x5559132f2f10 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555913303170 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x555913303260 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x555913303388 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x555913303508 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x555913303688 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x555913303808 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5559133145f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x555913314e68 <col:11>
| |-CXXDestructorDecl 0x5559133146d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x555913314808 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x555913314808
| | `-ParmVarDecl 0x555913314918 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5559133149b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5559133149b8
| | `-ParmVarDecl 0x555913314ac8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5559132f7d08 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5559132f7e18 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5559132f8098 <col:11>
| |   `-ReturnStmt 0x5559132f8088 <col:11>
| |     `-UnaryOperator 0x5559132f8070 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5559132f8060 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5559132f7e88 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5559132f7e88
|   `-ParmVarDecl 0x5559132f7f98 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x555913303870 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555913303988 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x555913303a28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x555913303a90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x555913303af8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x555913303b60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x555913303bc0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x555913303c80 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x555913303ce0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x555913303d40 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x555913314508 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x555913303a28 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x555913314e78 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x555913314ed0 <col:12>
| |-CXXConstructorDecl 0x555913314b38 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x555913314b38
| | `-ParmVarDecl 0x555913314c48 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x555913314ce8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x555913314ce8
| | `-ParmVarDecl 0x555913314df8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5559132f73f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x555913303db8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x555913303e18 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x555913303e80 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x555913303ee8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x555913303f50 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x555913303fb8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x555913304018 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x555913304078 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5559133040e0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x555913304168 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x555913303db8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5559133144a0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x555913304018 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x555913314ee0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x555913314f40 <col:21, line:755:5>
|-CXXConstructorDecl 0x555913304308 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x555913304248 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x555913304400 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5559133045e8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5559133044f0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5559133048b8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5559133046a0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555913304718 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555913304790 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913304ad8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x555913304988 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x555913304a00 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x555913304da8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x555913304b98 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x555913304c10 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x555913304c88 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x555913304f00 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x555913304e70 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555913305048 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x555913304fb8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x555913305140 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<20>
         0 |   char [20] x
           | [sizeof=20, dsize=20, align=1,
           |  nvsize=20, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555913358400 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 20
|-PackedAttr 0x55591364e3f0 <line:167:18>
|-CXXRecordDecl 0x55591364e4b0 prev 0x555913358400 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55591364e5c0 <line:166:5, col:13> col:10 x 'char [20]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.5 = type { [20 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.5 = type { [20 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<4>
         0 |   char [4] x
           | [sizeof=4, dsize=4, align=1,
           |  nvsize=4, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555913368ee0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 4
|-PackedAttr 0x555913684698 <line:167:18>
|-CXXRecordDecl 0x555913684758 prev 0x555913368ee0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x555913684868 <line:166:5, col:13> col:10 x 'char [4]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.2 = type { [4 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.2 = type { [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<8>
         0 |   char [8] x
           | [sizeof=8, dsize=8, align=1,
           |  nvsize=8, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5559134b2f80 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 8
|-PackedAttr 0x555913691b98 <line:167:18>
|-CXXRecordDecl 0x555913691c58 prev 0x5559134b2f80 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x555913691d68 <line:166:5, col:13> col:10 x 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [8 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555913128ef8 prev 0x5559131018f8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555913128ff0 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x555913129080 <col:19, col:25> col:19 public
|-TypedefDecl 0x5559131290b8 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x555912f4d380 'uninitialized_type'
|   `-CXXRecord 0x555912f4d2e8 'uninitialized_type'
|-CXXConstructorDecl 0x555913129170 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55591312b8f0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55591312b998 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55591312b958 <col:10> 'int' 0
| `-CompoundStmt 0x55591312b9e0 <col:13, line:22:5>
|-CXXConstructorDecl 0x5559131292c0 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x555913129230 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55591312b8f0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55591312ba30 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55591312b9f0 <col:10> 'unsigned int' lvalue ParmVar 0x555913129230 'x' 'unsigned int'
| `-CompoundStmt 0x55591312ba78 <col:13, line:27:5>
|-CXXConstructorDecl 0x555913129418 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x555913129388 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55591312b8f0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55591312bae0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55591312bac8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55591312ba88 <col:10> 'int' lvalue ParmVar 0x555913129388 'x' 'int'
| `-CompoundStmt 0x55591312bb28 <col:13, line:31:5>
|-CXXConstructorDecl 0x555913129570 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5559131294e0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55591312b8f0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55591312bb90 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55591312bb78 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55591312bb38 <col:10> 'unsigned long' lvalue ParmVar 0x5559131294e0 'x' 'unsigned long'
| `-CompoundStmt 0x55591312bbd8 <col:13, line:35:5>
|-CXXConstructorDecl 0x5559131296c8 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x555913129638 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55591312b8f0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55591312bc40 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55591312bc28 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55591312bbe8 <col:10> 'long' lvalue ParmVar 0x555913129638 'x' 'long'
| `-CompoundStmt 0x55591312bc88 <col:13, line:39:5>
|-CXXConstructorDecl 0x555913129888 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x555913129798 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55591312b8f0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55591312bd08 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55591312bcb8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55591307def0
| |     `-DeclRefExpr 0x55591312bc98 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x555913129798 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55591312bd50 <col:20, line:44:5>
|-CXXConstructorDecl 0x555913129a18 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x555913129950 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55591312beb8 <col:51, line:56:5>
|   `-BinaryOperator 0x55591312be98 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55591312bd70 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55591312b8f0
|     | `-CXXThisExpr 0x55591312bd60 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55591312be80 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55591312be68 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55591312be48 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55591312be18 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55591312be00 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55591312bda0 <col:47> 'const unsigned char *' lvalue ParmVar 0x555913129950 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x555913129b68 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x555913129ad8 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x555913129d18 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x555913129c58 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55591312bf28 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55591312bf00 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55591312bed0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x555913129c58 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x555913129ea8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x555913129de0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x555913129f98 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x555913130368 <col:46, line:83:5>
|   `-ReturnStmt 0x555913130358 <line:82:2, col:29>
|     `-ExprWithCleanups 0x555913130340 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x555913130310 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5559131301c8 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5559131300b0 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55591312ff98 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55591312bf50 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55591312a088 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x555913130418 <col:31, line:88:5>
|   `-ReturnStmt 0x555913130408 <line:87:2, col:10>
|     `-UnaryOperator 0x5559131303f0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5559131303d8 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5559131303c0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x555913130390 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55591312b8f0
|             `-CXXThisExpr 0x555913130380 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55591312a148 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x555913130498 <col:34, line:93:5>
|   `-ReturnStmt 0x555913130488 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x555913130470 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x555913130440 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55591312b8f0
|         `-CXXThisExpr 0x555913130430 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55591312a218 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x555913130518 <col:38, line:101:5>
|   `-ReturnStmt 0x555913130508 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5559131304f0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5559131304c0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55591312b8f0
|         `-CXXThisExpr 0x5559131304b0 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55591312a2e8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5559131307e8 <col:38, line:108:5>
|   `-ReturnStmt 0x5559131307d8 <line:107:2, col:58>
|     `-BinaryOperator 0x5559131307b8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5559131306d0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5559131306b0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x555913130698 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x555913130540 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55591312b8f0
|       |   |   `-CXXThisExpr 0x555913130530 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x555913130670 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x555913130658 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5559131305d8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5559130e1ff0 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5559131305b8 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x555913130790 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x555913130778 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x555913130758 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5559130e1ff0 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x555913130738 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55591312a3a8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x555913130a58 <col:39, line:112:5>
|   `-ReturnStmt 0x555913130a48 <line:111:2, col:56>
|     `-BinaryOperator 0x555913130a28 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x555913130940 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x555913130920 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x555913130908 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x555913130810 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55591312b8f0
|       |   |   `-CXXThisExpr 0x555913130800 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5559131308e0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5559131308c8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5559131308a8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5559130e1ff0 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x555913130888 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x555913130a00 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5559131309e8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5559131309c8 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5559130e1ff0 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5559131309a8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55591312a4d8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55591312a5e0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55591312a6f0 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55591312a7e0 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55591312a8a0 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55591312a968 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55591312ab68 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55591312aa18 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55591312aa90 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55591312ace8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55591312ac28 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55591312ae30 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55591312ada0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55591312afd8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55591312aee8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55591312b120 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55591312b090 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55591312b268 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55591312b1d8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55591312b330 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55591312b3f0 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55591312b568 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55591312b4a0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55591312b630 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55591312b718 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55591312b7c0 <col:51> "" ""
|-TypedefDecl 0x55591312b860 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x555913101990 'IPAddress'
|   `-CXXRecord 0x555913128ef8 'IPAddress'
|-AccessSpecDecl 0x55591312b8b8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55591312b8f0 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55591312bf98 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55591312bf98
| `-ParmVarDecl 0x55591312c0a8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55591312c148 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55591312c258 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55591312b8f0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5559131302b8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x555913130270 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55591312b8f0
| |     `-CXXStaticCastExpr 0x555913130240 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x555913130210 <col:7> 'IPAddress' lvalue ParmVar 0x55591312c258 '' 'IPAddress &&'
| `-CompoundStmt 0x555913130300 <col:7>
`-CXXDestructorDecl 0x55591312ffc8 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5559134a53f0 prev 0x5559133f6360 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x5559134a6e58 <line:148:18>
|-CXXRecordDecl 0x5559134a54e8 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x5559134a5578 <col:22, col:28> col:22 public
|-TypedefDecl 0x5559134a55b0 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x555912f4d380 'uninitialized_type'
|   `-CXXRecord 0x555912f4d2e8 'uninitialized_type'
|-CXXConstructorDecl 0x5559134a5640 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x5559134a7158 <col:27, line:16:5>
|   `-BinaryOperator 0x5559134a7138 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5559134a6f40 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5559134a6f28 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5559134a6ed8 <col:2> 'uint16_t [3]' lvalue ->_data 0x5559134a6c58
|     | |   `-CXXThisExpr 0x5559134a6ec8 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5559134a6f08 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5559134a7120 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5559134a7100 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5559134a6fd8 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5559134a6fc0 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5559134a6f70 <col:13> 'uint16_t [3]' lvalue ->_data 0x5559134a6c58
|         | |   `-CXXThisExpr 0x5559134a6f60 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5559134a6fa0 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5559134a70e8 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5559134a70c8 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5559134a7070 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5559134a7058 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5559134a7008 <col:24> 'uint16_t [3]' lvalue ->_data 0x5559134a6c58
|             | |   `-CXXThisExpr 0x5559134a6ff8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5559134a7038 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5559134a70b0 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x5559134a7090 <col:35> 'int' 0
|-CXXConstructorDecl 0x5559134a5790 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x5559134a5700 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x5559134a7320 <col:61, line:24:5>
|   `-CallExpr 0x5559134a7270 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x5559134a7258 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5559134a7238 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x555913022768 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x5559134a72c0 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x5559134a72a8 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x5559134a71c8 <col:9> 'uint16_t [3]' lvalue ->_data 0x5559134a6c58
|     |     `-CXXThisExpr 0x5559134a71b8 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x5559134a72f0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5559134a72d8 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5559134a71f8 <col:16> 'const unsigned char *' lvalue ParmVar 0x5559134a5700 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x5559134a7308 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x5559134a7218 <col:22> 'int' 6
|-CXXConstructorDecl 0x5559134a58e0 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5559134a5850 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5559134a7390 <col:59, line:29:5>
|   `-CStyleCastExpr 0x5559134a7368 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5559134a7338 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5559134a5850 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5559134a59d8 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x5559134a7ad8 <col:42, line:34:5>
|   `-ReturnStmt 0x5559134a7ac8 <line:33:2, col:28>
|     `-ExprWithCleanups 0x5559134a7ab0 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x5559134a7a80 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5559134a78b8 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5559134a7830 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5559134a7720 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x5559134a7708 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x5559134a73b8 <col:22> 'int' 65535
|-CXXMethodDecl 0x5559134a5a98 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x5559134a5b38 <col:59> "" ""
|-TypedefDecl 0x5559134a5cb8 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x5559134a5c30 'bool (EtherAddress::*)() const'
|   |-RecordType 0x555913394b60 'EtherAddress'
|   | `-CXXRecord 0x5559134a53f0 'EtherAddress'
|   `-ParenType 0x5559134a5bd0 'bool () const' sugar
|     `-FunctionProtoType 0x555912ea0100 'bool () const' const cdecl
|       `-BuiltinType 0x555912df5500 'bool'
|-CXXConversionDecl 0x5559134a5df8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x5559134a7eb8 <col:51, line:43:5>
|   `-ReturnStmt 0x5559134a7ea8 <line:42:2, col:70>
|     `-ConditionalOperator 0x5559134a7e78 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x5559134a7da0 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x5559134a7cb8 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x5559134a7c70 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x5559134a7c58 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5559134a7ba0 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5559134a7b88 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5559134a7b00 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|       | | |     |   `-CXXThisExpr 0x5559134a7af0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5559134a7b30 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5559134a7ca0 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x5559134a7c88 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5559134a7c38 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5559134a7c20 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5559134a7bd0 <col:21> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|       | |       |   `-CXXThisExpr 0x5559134a7bc0 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5559134a7c00 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x5559134a7d88 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5559134a7d70 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5559134a7d50 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5559134a7d38 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5559134a7ce8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|       |       |   `-CXXThisExpr 0x5559134a7cd8 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5559134a7d18 <col:39> 'int' 2
|       |-UnaryOperator 0x5559134a7e28 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5559134a7df8 <col:45, col:59> 'bool () const' CXXMethod 0x5559134a5ec8 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x5559134a7e60 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5559134a7e40 <col:70> 'int' 0
|-CXXMethodDecl 0x5559134a5ec8 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x5559134a8078 <col:34, line:51:5>
|   `-ReturnStmt 0x5559134a8068 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x5559134a8050 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5559134a8030 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5559134a8018 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5559134a8000 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5559134a7fc0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5559134a7f80 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5559134a7f50 <col:9> '<bound member function type>' ->data 0x5559134a6360
|         |     |   `-CXXThisExpr 0x5559134a7f40 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5559134a7fa0 <col:16> 'int' 0
|         `-IntegerLiteral 0x5559134a7fe0 <col:21> 'int' 1
|-CXXMethodDecl 0x5559134a5f88 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x5559134a8238 <col:34, line:59:5>
|   `-ReturnStmt 0x5559134a8228 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x5559134a8210 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5559134a81f0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5559134a81d8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5559134a81c0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5559134a8180 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5559134a8140 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5559134a8110 <col:9> '<bound member function type>' ->data 0x5559134a6360
|         |     |   `-CXXThisExpr 0x5559134a8100 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5559134a8160 <col:16> 'int' 0
|         `-IntegerLiteral 0x5559134a81a0 <col:21> 'int' 2
|-CXXMethodDecl 0x5559134a6048 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x5559134a8538 <col:38, line:66:5>
|   `-ReturnStmt 0x5559134a8528 <line:65:2, col:43>
|     `-BinaryOperator 0x5559134a8508 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x5559134a84c8 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x5559134a83e0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x5559134a8398 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x5559134a8380 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5559134a82c8 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5559134a82b0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5559134a8260 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|       | | |     |   `-CXXThisExpr 0x5559134a8250 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5559134a8290 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5559134a83c8 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x5559134a83b0 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5559134a8360 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5559134a8348 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5559134a82f8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|       | |       |   `-CXXThisExpr 0x5559134a82e8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5559134a8328 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x5559134a84b0 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x5559134a8498 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5559134a8478 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5559134a8460 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5559134a8410 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|       |       |   `-CXXThisExpr 0x5559134a8400 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5559134a8440 <col:37> 'int' 2
|       `-IntegerLiteral 0x5559134a84e8 <col:43> 'int' 196605
|-CXXMethodDecl 0x5559134a61c8 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x5559134a6100 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x5559134a8688 <col:64, line:75:5>
|   `-ReturnStmt 0x5559134a8678 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x5559134a8658 <col:9, col:68> 'bool'
|       `-MemberExpr 0x5559134a8628 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x5559134a6048
|         `-CXXReinterpretCastExpr 0x5559134a8598 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x5559134a8580 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x5559134a8550 <col:48> 'const unsigned char *' lvalue ParmVar 0x5559134a6100 'data' 'const unsigned char *'
|-CXXMethodDecl 0x5559134a6298 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x5559134a8750 <col:34, line:80:5>
|   `-ReturnStmt 0x5559134a8740 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x5559134a8710 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5559134a86f8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5559134a86b0 <col:43> 'uint16_t [3]' lvalue ->_data 0x5559134a6c58
|           `-CXXThisExpr 0x5559134a86a0 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x5559134a6360 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x5559134a8818 <col:46, line:85:5>
|   `-ReturnStmt 0x5559134a8808 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x5559134a87d8 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5559134a87c0 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5559134a8778 <col:49> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|           `-CXXThisExpr 0x5559134a8768 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5559134a64a8 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x5559134a8898 <col:42, line:91:5>
|   `-ReturnStmt 0x5559134a8888 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x5559134a8870 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x5559134a8840 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|         `-CXXThisExpr 0x5559134a8830 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5559134a6598 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x5559134a8ca8 <col:36, line:97:5>
|   `-ReturnStmt 0x5559134a8c98 <line:95:2, line:96:31>
|     `-BinaryOperator 0x5559134a8c78 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x5559134a8af8 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x5559134a8ad8 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x5559134a8ac0 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x5559134a8aa8 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x5559134a8928 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x5559134a8910 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x5559134a88c0 <col:10> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|       |   |     |   `-CXXThisExpr 0x5559134a88b0 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x5559134a88f0 <col:16> 'int' 2
|       |   `-ParenExpr 0x5559134a8a88 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x5559134a8a68 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x5559134a8a20 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x5559134a8a08 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x5559134a89f0 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x5559134a89c0 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x5559134a89a8 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x5559134a8958 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|       |       |       |   `-CXXThisExpr 0x5559134a8948 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x5559134a8988 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x5559134a8a48 <col:43> 'int' 16
|       `-ParenExpr 0x5559134a8c58 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x5559134a8c38 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x5559134a8bf0 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x5559134a8bd8 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x5559134a8bc0 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x5559134a8b90 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x5559134a8b78 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x5559134a8b28 <col:18> 'uint16_t const[3]' lvalue ->_data 0x5559134a6c58
|           |       |   `-CXXThisExpr 0x5559134a8b18 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x5559134a8b58 <col:24> 'int' 0
|           `-IntegerLiteral 0x5559134a8c18 <col:30> 'int' 9
|-CXXMethodDecl 0x5559134a6658 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x5559134a8db8 <col:35, line:111:5>
|   `-ReturnStmt 0x5559134a8da8 <line:110:2, col:22>
|     `-ExprWithCleanups 0x5559134a8d90 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x5559134a8d60 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5559134a8d48 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5559134a8d28 <col:9, col:22> 'String' (CXXTemporary 0x5559134a8d28)
|             `-CXXMemberCallExpr 0x5559134a8d00 <col:9, col:22> 'String'
|               `-MemberExpr 0x5559134a8cd0 <col:9> '<bound member function type>' ->unparse_dash 0x5559134a67d8
|                 `-CXXThisExpr 0x5559134a8cc0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5559134a6718 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x5559134a67d8 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x5559134a6898 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5559134a6938 <col:44> "" ""
|-CXXConversionDecl 0x5559134a69d8 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5559134a6a80 <col:51> "" ""
|-TypedefDecl 0x5559134a6b38 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x5559134a6b00 'const EtherAddress &'
|   `-QualType 0x555913394b61 'const EtherAddress' const
|     `-RecordType 0x555913394b60 'EtherAddress'
|       `-CXXRecord 0x5559134a53f0 'EtherAddress'
|-AccessSpecDecl 0x5559134a6b90 <line:140:2, col:9> col:2 private
|-FieldDecl 0x5559134a6c58 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x5559134a6da8 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x5559134a6cb8 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5559134a9060 <col:30, line:146:5>
|   `-BinaryOperator 0x5559134a9040 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5559134a8e48 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5559134a8e30 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5559134a8de0 <col:2> 'uint16_t [3]' lvalue ->_data 0x5559134a6c58
|     | |   `-CXXThisExpr 0x5559134a8dd0 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5559134a8e10 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5559134a9028 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5559134a9008 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5559134a8ee0 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5559134a8ec8 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5559134a8e78 <col:13> 'uint16_t [3]' lvalue ->_data 0x5559134a6c58
|         | |   `-CXXThisExpr 0x5559134a8e68 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5559134a8ea8 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5559134a8ff0 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5559134a8fd0 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5559134a8f78 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5559134a8f60 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5559134a8f10 <col:24> 'uint16_t [3]' lvalue ->_data 0x5559134a6c58
|             | |   `-CXXThisExpr 0x5559134a8f00 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5559134a8f40 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5559134a8fb8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x5559134a8f98 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x5559134a6cb8 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x5559134a73d8 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x5559134a73d8
| `-ParmVarDecl 0x5559134a74e8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x5559134a7588 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5559134a7698 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x5559134a6c58 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x5559134a7a20 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x5559134a79a8 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x5559134a7960 <col:7> 'uint16_t [3]' xvalue ._data 0x5559134a6c58
| |   |   `-CXXStaticCastExpr 0x5559134a7930 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x5559134a7900 <col:7> 'EtherAddress' lvalue ParmVar 0x5559134a7698 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x5559134a7a08 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x5559134a79e8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x5559134a79d0 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x5559134a79a8 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x5559134a7960 <col:7> 'uint16_t [3]' xvalue ._data 0x5559134a6c58
| |       |     `-CXXStaticCastExpr 0x5559134a7930 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x5559134a7900 <col:7> 'EtherAddress' lvalue ParmVar 0x5559134a7698 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x5559134a79c0 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x5559134a7a70 <col:7>
`-CXXDestructorDecl 0x5559134a7750 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>
