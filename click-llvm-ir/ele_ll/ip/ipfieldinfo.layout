
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPField
         0 |   int32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3dd3d78 <../elements/ip/ipfieldinfo.hh:7:1, line:53:1> line:7:7 class IPField definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x562cb3dd3e98 <col:1, col:7> col:7 implicit referenced class IPField
|-AccessSpecDecl 0x562cb3dd3f28 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x562cb3dd3fb0 <line:9:5, col:28> col:5 IPField 'void ()'
| |-CXXCtorInitializer Field 0x562cb3dd5e40 '_val' 'int32_t':'int'
| | `-UnaryOperator 0x562cb3dd5f48 <col:22, col:23> 'int' prefix '-'
| |   `-IntegerLiteral 0x562cb3dd5f28 <col:23> 'int' 1
| `-CompoundStmt 0x562cb3dd5fb0 <col:26, col:28>
|-CXXConstructorDecl 0x562cb3dd4128 <line:10:5, col:36> col:5 IPField 'void (int32_t)'
| |-ParmVarDecl 0x562cb3dd4068 <col:13, col:21> col:21 used f 'int32_t':'int'
| |-CXXCtorInitializer Field 0x562cb3dd5e40 '_val' 'int32_t':'int'
| | `-ImplicitCastExpr 0x562cb3dd6000 <col:31> 'int32_t':'int' <LValueToRValue>
| |   `-DeclRefExpr 0x562cb3dd5fc0 <col:31> 'int32_t':'int' lvalue ParmVar 0x562cb3dd4068 'f' 'int32_t':'int'
| `-CompoundStmt 0x562cb3dd6048 <col:34, col:36>
|-CXXConstructorDecl 0x562cb3dd43d8 <line:11:5, col:54> col:5 IPField 'void (int, int, int)'
| |-ParmVarDecl 0x562cb3dd41f0 <col:13, col:17> col:17 proto 'int'
| |-ParmVarDecl 0x562cb3dd4270 <col:24, col:28> col:28 bit_offset 'int'
| `-ParmVarDecl 0x562cb3dd42f0 <col:40, col:44> col:44 bit_length 'int'
|-CXXMethodDecl 0x562cb3dd44e8 <line:13:5, col:48> col:17 ok 'bool () const' inline
| `-CompoundStmt 0x562cb3dd6100 <col:28, col:48>
|   `-ReturnStmt 0x562cb3dd60f0 <col:30, col:45>
|     `-BinaryOperator 0x562cb3dd60d0 <col:37, col:45> 'bool' '>='
|       |-ImplicitCastExpr 0x562cb3dd60b8 <col:37> 'int32_t':'int' <LValueToRValue>
|       | `-MemberExpr 0x562cb3dd6068 <col:37> 'const int32_t':'const int' lvalue ->_val 0x562cb3dd5e40
|       |   `-CXXThisExpr 0x562cb3dd6058 <col:37> 'const IPField *' implicit this
|       `-IntegerLiteral 0x562cb3dd6098 <col:45> 'int' 0
|-CXXMethodDecl 0x562cb3dd45d8 <line:14:5, col:49> col:20 value 'int32_t () const' inline
| `-CompoundStmt 0x562cb3dd6180 <col:34, col:49>
|   `-ReturnStmt 0x562cb3dd6170 <col:36, col:43>
|     `-ImplicitCastExpr 0x562cb3dd6158 <col:43> 'int32_t':'int' <LValueToRValue>
|       `-MemberExpr 0x562cb3dd6128 <col:43> 'const int32_t':'const int' lvalue ->_val 0x562cb3dd5e40
|         `-CXXThisExpr 0x562cb3dd6118 <col:43> 'const IPField *' implicit this
|-CXXMethodDecl 0x562cb3dd46a0 <line:16:5, col:75> col:16 proto 'int () const' inline
| `-CompoundStmt 0x562cb3dd62d0 <col:30, col:75>
|   `-ReturnStmt 0x562cb3dd62c0 <col:32, col:62>
|     `-BinaryOperator 0x562cb3dd62a0 <col:39, col:62> 'int' '>>'
|       |-ParenExpr 0x562cb3dd6248 <col:39, col:57> 'int'
|       | `-BinaryOperator 0x562cb3dd6228 <col:40, col:47> 'int' '&'
|       |   |-ImplicitCastExpr 0x562cb3dd61f8 <col:40> 'int32_t':'int' <LValueToRValue>
|       |   | `-MemberExpr 0x562cb3dd61a8 <col:40> 'const int32_t':'const int' lvalue ->_val 0x562cb3dd5e40
|       |   |   `-CXXThisExpr 0x562cb3dd6198 <col:40> 'const IPField *' implicit this
|       |   `-ImplicitCastExpr 0x562cb3dd6210 <col:47> 'int' <IntegralCast>
|       |     `-DeclRefExpr 0x562cb3dd61d8 <col:47> 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)' EnumConstant 0x562cb3dd4cc0 'PROTO_MASK' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
|       `-ImplicitCastExpr 0x562cb3dd6288 <col:62> 'int' <IntegralCast>
|         `-DeclRefExpr 0x562cb3dd6268 <col:62> 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)' EnumConstant 0x562cb3dd4b60 'PROTO_SHIFT' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
|-CXXMethodDecl 0x562cb3dd4768 <line:18:5, col:29> col:16 bit_offset 'int () const' inline
|-CXXMethodDecl 0x562cb3dd4830 <line:19:5, col:29> col:16 bit_length 'int () const' inline
|-CXXMethodDecl 0x562cb3dd48f8 <line:21:5, col:30> col:16 byte_offset 'int () const' inline
|-CXXMethodDecl 0x562cb3dd49c0 <line:22:5, col:30> col:16 byte_length 'int () const' inline
|-EnumDecl 0x562cb3dd4a60 <line:24:5, line:39:5> line:24:5
| |-EnumConstantDecl 0x562cb3dd4b60 <line:25:2, col:16> col:2 referenced PROTO_SHIFT 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd5210 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd4b40 <col:16> 'int' Int: 20
| |     `-IntegerLiteral 0x562cb3dd4b20 <col:16> 'int' 20
| |-EnumConstantDecl 0x562cb3dd4bf0 <line:26:2, col:14> col:2 referenced MAX_PROTO 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd5228 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd4bd0 <col:14> 'int' Int: 511
| |     `-IntegerLiteral 0x562cb3dd4bb0 <col:14> 'int' 511
| |-EnumConstantDecl 0x562cb3dd4cc0 <line:27:2, col:28> col:2 referenced PROTO_MASK 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd5240 <col:15, col:28> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd4ca0 <col:15, col:28> 'int' Int: 535822336
| |     `-BinaryOperator 0x562cb3dd4c80 <col:15, col:28> 'int' '<<'
| |       |-DeclRefExpr 0x562cb3dd4c40 <col:15> 'int' EnumConstant 0x562cb3dd4bf0 'MAX_PROTO' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| |       `-DeclRefExpr 0x562cb3dd4c60 <col:28> 'int' EnumConstant 0x562cb3dd4b60 'PROTO_SHIFT' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| |-EnumConstantDecl 0x562cb3dd4d50 <line:29:2, col:17> col:2 referenced OFFSET_SHIFT 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd5258 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd4d30 <col:17> 'int' Int: 6
| |     `-IntegerLiteral 0x562cb3dd4d10 <col:17> 'int' 6
| |-EnumConstantDecl 0x562cb3dd4de0 <line:30:2, col:15> col:2 referenced MAX_OFFSET 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd5270 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd4dc0 <col:15> 'int' Int: 8191
| |     `-IntegerLiteral 0x562cb3dd4da0 <col:15> 'int' 8191
| |-EnumConstantDecl 0x562cb3dd4eb0 <line:31:2, col:30> col:2 referenced OFFSET_MASK 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd5288 <col:16, col:30> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd4e90 <col:16, col:30> 'int' Int: 524224
| |     `-BinaryOperator 0x562cb3dd4e70 <col:16, col:30> 'int' '<<'
| |       |-DeclRefExpr 0x562cb3dd4e30 <col:16> 'int' EnumConstant 0x562cb3dd4de0 'MAX_OFFSET' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| |       `-DeclRefExpr 0x562cb3dd4e50 <col:30> 'int' EnumConstant 0x562cb3dd4d50 'OFFSET_SHIFT' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| |-EnumConstantDecl 0x562cb3dd4f40 <line:33:2, col:17> col:2 referenced LENGTH_SHIFT 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd52a0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd4f20 <col:17> 'int' Int: 0
| |     `-IntegerLiteral 0x562cb3dd4f00 <col:17> 'int' 0
| |-EnumConstantDecl 0x562cb3dd4fd0 <line:34:2, col:15> col:2 referenced MAX_LENGTH 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd52b8 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd4fb0 <col:15> 'int' Int: 63
| |     `-IntegerLiteral 0x562cb3dd4f90 <col:15> 'int' 63
| |-EnumConstantDecl 0x562cb3dd50a0 <line:35:2, col:30> col:2 referenced LENGTH_MASK 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd52d0 <col:16, col:30> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd5080 <col:16, col:30> 'int' Int: 63
| |     `-BinaryOperator 0x562cb3dd5060 <col:16, col:30> 'int' '<<'
| |       |-DeclRefExpr 0x562cb3dd5020 <col:16> 'int' EnumConstant 0x562cb3dd4fd0 'MAX_LENGTH' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| |       `-DeclRefExpr 0x562cb3dd5040 <col:30> 'int' EnumConstant 0x562cb3dd4f40 'LENGTH_SHIFT' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| |-EnumConstantDecl 0x562cb3dd5130 <line:37:2, col:10> col:2 referenced BYTES 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| | `-ImplicitCastExpr 0x562cb3dd52e8 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd5110 <col:10> 'int' Int: 524288
| |     `-IntegerLiteral 0x562cb3dd50f0 <col:10> 'int' 524288
| `-EnumConstantDecl 0x562cb3dd51c0 <line:38:2, col:11> col:2 referenced MARKER 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
|   `-ImplicitCastExpr 0x562cb3dd5300 <col:11> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3dd51a0 <col:11> 'int' Int: 1073741824
|       `-IntegerLiteral 0x562cb3dd5180 <col:11> 'int' 1073741824
|-EnumDecl 0x562cb3dd5318 <line:41:5, line:44:5> line:41:5
| |-EnumConstantDecl 0x562cb3dd5550 <line:42:2, col:53> col:2 F_IP_TOS 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:41:5)'
| | `-ImplicitCastExpr 0x562cb3dd5760 <col:13, col:53> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dd5530 <col:13, col:53> 'int' Int: 519
| |     `-BinaryOperator 0x562cb3dd5510 <col:13, col:53> 'int' '|'
| |       |-ParenExpr 0x562cb3dd5458 <col:13, col:31> 'int'
| |       | `-BinaryOperator 0x562cb3dd5438 <col:14, col:19> 'int' '<<'
| |       |   |-IntegerLiteral 0x562cb3dd53e0 <col:14> 'int' 8
| |       |   `-ImplicitCastExpr 0x562cb3dd5420 <col:19> 'int' <IntegralCast>
| |       |     `-DeclRefExpr 0x562cb3dd5400 <col:19> 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)' EnumConstant 0x562cb3dd4d50 'OFFSET_SHIFT' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| |       `-ParenExpr 0x562cb3dd54f0 <col:35, col:53> 'int'
| |         `-BinaryOperator 0x562cb3dd54d0 <col:36, col:41> 'int' '<<'
| |           |-IntegerLiteral 0x562cb3dd5478 <col:36> 'int' 7
| |           `-ImplicitCastExpr 0x562cb3dd54b8 <col:41> 'int' <IntegralCast>
| |             `-DeclRefExpr 0x562cb3dd5498 <col:41> 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)' EnumConstant 0x562cb3dd4f40 'LENGTH_SHIFT' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
| `-EnumConstantDecl 0x562cb3dd5710 <line:43:2, col:55> col:2 F_ICMP_TYPE 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:41:5)'
|   `-ImplicitCastExpr 0x562cb3dd5778 <col:16, col:55> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3dd56f0 <col:16, col:55> 'int' Int: 1048583
|       `-BinaryOperator 0x562cb3dd56d0 <col:16, col:55> 'int' '|'
|         |-ParenExpr 0x562cb3dd5618 <col:16, col:33> 'int'
|         | `-BinaryOperator 0x562cb3dd55f8 <col:17, col:22> 'int' '<<'
|         |   |-IntegerLiteral 0x562cb3dd55a0 <col:17> 'int' 1
|         |   `-ImplicitCastExpr 0x562cb3dd55e0 <col:22> 'int' <IntegralCast>
|         |     `-DeclRefExpr 0x562cb3dd55c0 <col:22> 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)' EnumConstant 0x562cb3dd4b60 'PROTO_SHIFT' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
|         `-ParenExpr 0x562cb3dd56b0 <col:37, col:55> 'int'
|           `-BinaryOperator 0x562cb3dd5690 <col:38, col:43> 'int' '<<'
|             |-IntegerLiteral 0x562cb3dd5638 <col:38> 'int' 7
|             `-ImplicitCastExpr 0x562cb3dd5678 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x562cb3dd5658 <col:43> 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)' EnumConstant 0x562cb3dd4f40 'LENGTH_SHIFT' 'IPField::(anonymous enum at ../elements/ip/ipfieldinfo.hh:24:5)'
|-CXXMethodDecl 0x562cb3dd5b30 <line:46:5, col:130> col:24 parse 'const char *(const char *, const char *, int, IPField *, ErrorHandler *, Element *)' static
| |-ParmVarDecl 0x562cb3dd57a8 <col:30, col:42> col:42 begin 'const char *'
| |-ParmVarDecl 0x562cb3dd5828 <col:49, col:61> col:61 end 'const char *'
| |-ParmVarDecl 0x562cb3dd58a8 <col:66, col:70> col:70 proto 'int'
| |-ParmVarDecl 0x562cb3dd5920 <col:77, col:86> col:86 result 'IPField *'
| |-ParmVarDecl 0x562cb3dd5998 <col:94, col:108> col:108 errh 'ErrorHandler *'
| `-ParmVarDecl 0x562cb3dd5a10 <col:114, col:129> col:123 elt 'Element *' cinit
|   `-ImplicitCastExpr 0x562cb3dd5ec8 <col:129> 'Element *' <NullToPointer>
|     `-IntegerLiteral 0x562cb3dd5ea8 <col:129> 'int' 0
|-CXXMethodDecl 0x562cb3dd5d58 <line:47:5, col:64> col:12 unparse 'String (Element *, bool)'
| |-ParmVarDecl 0x562cb3dd5c10 <col:20, col:35> col:29 elt 'Element *' cinit
| | `-ImplicitCastExpr 0x562cb3dd5f00 <col:35> 'Element *' <NullToPointer>
| |   `-IntegerLiteral 0x562cb3dd5ee0 <col:35> 'int' 0
| `-ParmVarDecl 0x562cb3dd5c88 <col:38, col:59> col:43 tcpdump_rules 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562cb3dd5f18 <col:59> 'bool' false
|-AccessSpecDecl 0x562cb3dd5e08 <line:49:3, col:10> col:3 private
|-FieldDecl 0x562cb3dd5e40 <line:51:5, col:13> col:13 referenced _val 'int32_t':'int'
|-CXXConstructorDecl 0x562cb3dfec38 <line:7:7> col:7 implicit constexpr IPField 'void (const IPField &)' inline default trivial noexcept-unevaluated 0x562cb3dfec38
| `-ParmVarDecl 0x562cb3dfed48 <col:7> col:7 'const IPField &'
`-CXXConstructorDecl 0x562cb3dfede8 <col:7> col:7 implicit constexpr IPField 'void (IPField &&)' inline default trivial noexcept-unevaluated 0x562cb3dfede8
  `-ParmVarDecl 0x562cb3dfeef8 <col:7> col:7 'IPField &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPField = type { i32 }
  NonVirtualBaseLLVMType:%class.IPField = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct StaticNameDB::Entry
         0 |   const char * name
         8 |   uint32_t value
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class NameDB
         0 |   (NameDB vtable pointer)
         8 |   uint32_t _type
        16 |   class String _context
        16 |     struct String::rep_t _r
        16 |       const char * data
        24 |       int length
        32 |       struct String::memo_t * memo
        40 |   size_t _value_size
        48 |   class NameDB * _context_parent
        56 |   class NameDB * _context_sibling
        64 |   class NameDB * _context_child
        72 |   class NameInfo * _installed
           | [sizeof=80, dsize=80, align=8,
           |  nvsize=80, nvalign=8]

*** Dumping AST Record Layout
         0 | class StaticNameDB
         0 |   class NameDB (primary base)
         0 |     (NameDB vtable pointer)
         8 |     uint32_t _type
        16 |     class String _context
        16 |       struct String::rep_t _r
        16 |         const char * data
        24 |         int length
        32 |         struct String::memo_t * memo
        40 |     size_t _value_size
        48 |     class NameDB * _context_parent
        56 |     class NameDB * _context_sibling
        64 |     class NameDB * _context_child
        72 |     class NameInfo * _installed
        80 |   const struct StaticNameDB::Entry * _entries
        88 |   size_t _nentries
           | [sizeof=96, dsize=96, align=8,
           |  nvsize=96, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3a83990 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x562cb3a83aa8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x562cb3a83b48 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x562cb3a83ba8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x562cb3a83c08 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x562cb3a83cb8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3a83fc0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562cb3a840d8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x562cb3a84180 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x562cb3a841e8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x562cb3a84278 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x562cb3a8a170 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562cb3a8a5a8 <col:12>
|-CXXConstructorDecl 0x562cb3a8a278 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562cb3a8a388 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562cb3a84180 'data' 'const char *'
| | `-ImplicitCastExpr 0x562cb3a8cb30 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x562cb3a8cb00 <col:12> 'const char *const' lvalue .data 0x562cb3a84180
| |     `-DeclRefExpr 0x562cb3a8cae0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a8a388 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562cb3a841e8 'length' 'int'
| | `-ImplicitCastExpr 0x562cb3a8cbc0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562cb3a8cb90 <col:12> 'const int' lvalue .length 0x562cb3a841e8
| |     `-DeclRefExpr 0x562cb3a8cb70 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a8a388 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562cb3a84278 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x562cb3a8cc50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x562cb3a8cc20 <col:12> 'String::memo_t *const' lvalue .memo 0x562cb3a84278
| |     `-DeclRefExpr 0x562cb3a8cc00 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a8a388 '' 'const String::rep_t &'
| `-CompoundStmt 0x562cb3a8cca8 <col:12>
|-CXXConstructorDecl 0x562cb3a8a428 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562cb3a8a428
| `-ParmVarDecl 0x562cb3a8a538 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x562cb3a8fa20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x562cb3a9b458 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562cb3a9b568 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x562cb3a9ba80 <col:12>
|   |-BinaryOperator 0x562cb3a9b898 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x562cb3a9b850 <col:12> 'const char *' lvalue ->data 0x562cb3a84180
|   | | `-CXXThisExpr 0x562cb3a9b840 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562cb3a9b880 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x562cb3a9b810 <col:12> 'const char *const' lvalue .data 0x562cb3a84180
|   |     `-DeclRefExpr 0x562cb3a9b7f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a9b568 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562cb3a9b960 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x562cb3a9b918 <col:12> 'int' lvalue ->length 0x562cb3a841e8
|   | | `-CXXThisExpr 0x562cb3a9b908 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562cb3a9b948 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x562cb3a9b8d8 <col:12> 'const int' lvalue .length 0x562cb3a841e8
|   |     `-DeclRefExpr 0x562cb3a9b8b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a9b568 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562cb3a9ba28 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x562cb3a9b9e0 <col:12> 'String::memo_t *' lvalue ->memo 0x562cb3a84278
|   | | `-CXXThisExpr 0x562cb3a9b9d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562cb3a9ba10 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x562cb3a9b9a0 <col:12> 'String::memo_t *const' lvalue .memo 0x562cb3a84278
|   |     `-DeclRefExpr 0x562cb3a9b980 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a9b568 '' 'const String::rep_t &'
|   `-ReturnStmt 0x562cb3a9ba70 <col:12>
|     `-UnaryOperator 0x562cb3a9ba58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562cb3a9ba48 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x562cb3a9b5d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562cb3a9b5d8
  `-ParmVarDecl 0x562cb3a9b6e8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3a7ae70 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562cb3a7af88 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x562cb3a7b018 <col:16, col:22> col:16 public
|-TypedefDecl 0x562cb3a7b058 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x562cb374dfd0 'const char *'
|   `-QualType 0x562cb374d521 'const char' const
|     `-BuiltinType 0x562cb374d520 'char'
|-TypedefDecl 0x562cb3a7b0e0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x562cb3a7b0b0 'String::const_iterator' sugar
|   |-Typedef 0x562cb3a7b058 'const_iterator'
|   `-PointerType 0x562cb374dfd0 'const char *'
|     `-QualType 0x562cb374d521 'const char' const
|       `-BuiltinType 0x562cb374d520 'char'
|-TypedefDecl 0x562cb3a7b250 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x562cb3a7b1c0 'int (String::*)() const'
|   |-RecordType 0x562cb3a7af00 'String'
|   | `-CXXRecord 0x562cb3a7ae70 'String'
|   `-ParenType 0x562cb3a7b160 'int () const' sugar
|     `-FunctionProtoType 0x562cb3a4ed30 'int () const' const cdecl
|       `-BuiltinType 0x562cb374d580 'int'
|-TypedefDecl 0x562cb3a7b2b8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x562cb38a3b70 'int64_t' sugar
|   |-Typedef 0x562cb37b6390 'int64_t'
|   `-TypedefType 0x562cb378f630 '__int64_t' sugar
|     |-Typedef 0x562cb378f208 '__int64_t'
|     `-BuiltinType 0x562cb374d5a0 'long'
|-TypedefDecl 0x562cb3a7b320 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x562cb38a3a90 'uint64_t' sugar
|   |-Typedef 0x562cb37b6530 'uint64_t'
|   `-TypedefType 0x562cb378f6c0 '__uint64_t' sugar
|     |-Typedef 0x562cb378f278 '__uint64_t'
|     `-BuiltinType 0x562cb374d640 'unsigned long'
|-TypedefDecl 0x562cb3a7b3b0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x562cb3a7b380 'String::intmax_t' sugar
|   |-Typedef 0x562cb3a7b2b8 'intmax_t'
|   `-TypedefType 0x562cb38a3b70 'int64_t' sugar
|     |-Typedef 0x562cb37b6390 'int64_t'
|     `-TypedefType 0x562cb378f630 '__int64_t' sugar
|       |-Typedef 0x562cb378f208 '__int64_t'
|       `-BuiltinType 0x562cb374d5a0 'long'
|-TypedefDecl 0x562cb3a7b440 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x562cb3a7b410 'String::uintmax_t' sugar
|   |-Typedef 0x562cb3a7b320 'uintmax_t'
|   `-TypedefType 0x562cb38a3a90 'uint64_t' sugar
|     |-Typedef 0x562cb37b6530 'uint64_t'
|     `-TypedefType 0x562cb378f6c0 '__uint64_t' sugar
|       |-Typedef 0x562cb378f278 '__uint64_t'
|       `-BuiltinType 0x562cb374d640 'unsigned long'
|-CXXConstructorDecl 0x562cb3a7b500 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x562cb3a7b6a8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x562cb3a7b5e8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x562cb3a7b858 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x562cb3a7b798 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x562cb3a7b9b0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x562cb3a7b920 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x562cb3a7bbc8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x562cb3a7ba78 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x562cb3a7baf8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x562cb3a7bde8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x562cb3a7bc98 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x562cb3a7bd18 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x562cb3a7c008 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562cb3a7beb8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x562cb3a7bf38 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x562cb3a7c228 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x562cb3a7c0d8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x562cb3a7c158 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x562cb3a7c3b8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x562cb3a7c2f0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x562cb3a7c538 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x562cb3a7c478 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x562cb3a7c6c8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x562cb3a7c600 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x562cb3a7c820 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x562cb3a7c790 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x562cb3a7c978 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x562cb3a7c8e8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x562cb3a7cad0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x562cb3a7ca40 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x562cb3a7cc58 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x562cb3a7cb98 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x562cb3a7cde8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x562cb3a7cd20 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x562cb3a7cf78 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x562cb3a7ceb0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x562cb3a7d108 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x562cb3a7d040 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x562cb3a7d200 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x562cb3a7d328 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x562cb3a7d4a8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x562cb3a7d3e0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x562cb3a7d5f8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x562cb3a7d568 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x562cb3a7d6a0 <col:63> "" ""
|-CXXMethodDecl 0x562cb3a7d7e8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x562cb3a7d728 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x562cb3a7d9f8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x562cb3a7d8a8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x562cb3a7d928 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x562cb3a7dc68 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x562cb3a7dac0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x562cb3a7db90 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x562cb3a7df48 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x562cb3a7dd28 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x562cb3a7dda8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x562cb3a89c40 <col:55> 'int' 10
| `-ParmVarDecl 0x562cb3a7de20 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562cb3a89c60 <col:76> 'bool' true
|-CXXMethodDecl 0x562cb3a7e228 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x562cb3a7e010 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x562cb3a7e090 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x562cb3a89c70 <col:56> 'int' 10
| `-ParmVarDecl 0x562cb3a7e108 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562cb3a89c90 <col:77> 'bool' true
|-CXXMethodDecl 0x562cb3a7e330 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x562cb3a7e3f8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x562cb3a7e4c0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x562cb3a7e560 <col:20>
| `-OptimizeNoneAttr 0x562cb3a7e5b8 <col:30>
|-CXXConversionDecl 0x562cb3a7e6a8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x562cb3a7e778 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x562cb3a7e838 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x562cb3a7e928 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x562cb3a7e9e8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x562cb3a7eb68 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x562cb3a7eaa0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x562cb3a7ecb8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x562cb3a7ec28 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x562cb3a7eda8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x562cb3a7ee68 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x562cb3a7f0b8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x562cb3a7ef20 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x562cb3a7efa0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x562cb3a7f318 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x562cb3a7f180 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x562cb3a7f200 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x562cb3a7f3e8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x562cb3a7f5f8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x562cb3a7f4a0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x562cb3a7f520 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x562cb3a7f818 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x562cb3a7f6c0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x562cb3a7f740 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x562cb3a7f9a8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x562cb3a7f8e0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x562cb3a7fa98 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x562cb3a7fc08 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x562cb3a7fb48 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562cb3a7fe18 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x562cb3a7fcc8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x562cb3a7fd48 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x562cb3a80030 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x562cb3a7fed8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x562cb3a7ff50 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x562cb3a801c0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x562cb3a800f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562cb3a803e0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x562cb3a80280 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x562cb3a80300 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x562cb3a80530 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x562cb3a804a0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x562cb3a80708 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x562cb3a805f0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x562cb3a80670 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x562cb3a80858 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x562cb3a807c8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x562cb3a80a70 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x562cb3a80910 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x562cb3a80990 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x562cb3a89ca0 <col:39> 'int' 0
|-CXXMethodDecl 0x562cb3a80c90 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x562cb3a80b30 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x562cb3a80bb0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x562cb3a89cc0 <col:48> 'int' 0
|-CXXMethodDecl 0x562cb3a80e70 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x562cb3a80d50 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x562cb3a80dd0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x562cb3a89ce0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x562cb3a80f40 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x562cb3a81000 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x562cb3a810c0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x562cb3a81180 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x562cb3a81240 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x562cb3a813e8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x562cb3a812f0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x562cb3a81568 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x562cb3a814a0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x562cb3a816e8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x562cb3a81628 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x562cb3a81868 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x562cb3a817a0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x562cb3a819b0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x562cb3a81920 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562cb3a81ba0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x562cb3a81a70 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x562cb3a81d78 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x562cb3a81c60 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x562cb3a81ce0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x562cb3a81f58 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562cb3a81e40 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x562cb3a81ec0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x562cb3a820a8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x562cb3a82018 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x562cb3a822b8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x562cb3a82168 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x562cb3a821e8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x562cb3a82418 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x562cb3a82380 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x562cb3a82570 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x562cb3a824d8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x562cb3a82618 <col:57> "" ""
|-CXXMethodDecl 0x562cb3a82728 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x562cb3a82698 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x562cb3a82878 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x562cb3a827e8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x562cb3a829f8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x562cb3a82930 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x562cb3a82ac0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x562cb3a82b80 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x562cb3a82c40 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x562cb3a82ce0 <col:49> "" ""
|-CXXMethodDecl 0x562cb3a82d70 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x562cb3a82e30 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x562cb3a82f20 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x562cb3a82fe8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x562cb3a830a8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x562cb3a83168 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x562cb3a83260 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x562cb3a83328 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x562cb3a833f0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x562cb3a835c8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x562cb3a834a8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x562cb3a83528 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x562cb3a837f0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x562cb3a83690 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x562cb3a83710 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x562cb3a83900 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x562cb3a83968 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x562cb3a83990 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x562cb3a83aa8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x562cb3a83b48 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x562cb3a83ba8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x562cb3a83c08 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x562cb3a83cb8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x562cb3a83d20 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x562cb3a83f58 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x562cb3a83fa8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3a83f38 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x562cb3a83e48 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x562cb3a83df0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x562cb3a83e30 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x562cb3a83e10 <col:32> 'int' 8
|-CXXRecordDecl 0x562cb3a83fc0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562cb3a840d8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x562cb3a84180 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x562cb3a841e8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x562cb3a84278 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x562cb3a8a170 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x562cb3a8a5a8 <col:12>
| |-CXXConstructorDecl 0x562cb3a8a278 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562cb3a8a388 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562cb3a84180 'data' 'const char *'
| | | `-ImplicitCastExpr 0x562cb3a8cb30 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x562cb3a8cb00 <col:12> 'const char *const' lvalue .data 0x562cb3a84180
| | |     `-DeclRefExpr 0x562cb3a8cae0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a8a388 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562cb3a841e8 'length' 'int'
| | | `-ImplicitCastExpr 0x562cb3a8cbc0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x562cb3a8cb90 <col:12> 'const int' lvalue .length 0x562cb3a841e8
| | |     `-DeclRefExpr 0x562cb3a8cb70 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a8a388 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562cb3a84278 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x562cb3a8cc50 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x562cb3a8cc20 <col:12> 'String::memo_t *const' lvalue .memo 0x562cb3a84278
| | |     `-DeclRefExpr 0x562cb3a8cc00 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a8a388 '' 'const String::rep_t &'
| | `-CompoundStmt 0x562cb3a8cca8 <col:12>
| |-CXXConstructorDecl 0x562cb3a8a428 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562cb3a8a428
| | `-ParmVarDecl 0x562cb3a8a538 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x562cb3a8fa20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x562cb3a9b458 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562cb3a9b568 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x562cb3a9ba80 <col:12>
| |   |-BinaryOperator 0x562cb3a9b898 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x562cb3a9b850 <col:12> 'const char *' lvalue ->data 0x562cb3a84180
| |   | | `-CXXThisExpr 0x562cb3a9b840 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562cb3a9b880 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x562cb3a9b810 <col:12> 'const char *const' lvalue .data 0x562cb3a84180
| |   |     `-DeclRefExpr 0x562cb3a9b7f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a9b568 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562cb3a9b960 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x562cb3a9b918 <col:12> 'int' lvalue ->length 0x562cb3a841e8
| |   | | `-CXXThisExpr 0x562cb3a9b908 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562cb3a9b948 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x562cb3a9b8d8 <col:12> 'const int' lvalue .length 0x562cb3a841e8
| |   |     `-DeclRefExpr 0x562cb3a9b8b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a9b568 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562cb3a9ba28 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x562cb3a9b9e0 <col:12> 'String::memo_t *' lvalue ->memo 0x562cb3a84278
| |   | | `-CXXThisExpr 0x562cb3a9b9d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562cb3a9ba10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x562cb3a9b9a0 <col:12> 'String::memo_t *const' lvalue .memo 0x562cb3a84278
| |   |     `-DeclRefExpr 0x562cb3a9b980 <col:12> 'const String::rep_t' lvalue ParmVar 0x562cb3a9b568 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x562cb3a9ba70 <col:12>
| |     `-UnaryOperator 0x562cb3a9ba58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x562cb3a9ba48 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x562cb3a9b5d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562cb3a9b5d8
|   `-ParmVarDecl 0x562cb3a9b6e8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x562cb3a842f0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x562cb3a84538 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x562cb3a84358 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x562cb3a843d8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x562cb3a84450 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x562cb3a8a130 <col:79, line:261:5>
|   |-BinaryOperator 0x562cb3a89da8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x562cb3a89d40 <col:2, col:5> 'const char *' lvalue .data 0x562cb3a84180
|   | | `-MemberExpr 0x562cb3a89d10 <col:2> 'String::rep_t' lvalue ->_r 0x562cb3a842f0
|   | |   `-CXXThisExpr 0x562cb3a89d00 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x562cb3a89d90 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x562cb3a89d70 <col:12> 'const char *' lvalue ParmVar 0x562cb3a84358 'data' 'const char *'
|   |-BinaryOperator 0x562cb3a89e70 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x562cb3a89e08 <col:2, col:5> 'int' lvalue .length 0x562cb3a841e8
|   | | `-MemberExpr 0x562cb3a89dd8 <col:2> 'String::rep_t' lvalue ->_r 0x562cb3a842f0
|   | |   `-CXXThisExpr 0x562cb3a89dc8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x562cb3a89e58 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x562cb3a89e38 <col:14> 'int' lvalue ParmVar 0x562cb3a843d8 'length' 'int'
|   `-IfStmt 0x562cb3a8a118 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x562cb3a89f90 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x562cb3a89f78 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x562cb3a89f58 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x562cb3a89f38 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x562cb3a89ed0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x562cb3a84278
|     |       | `-MemberExpr 0x562cb3a89ea0 <col:7> 'String::rep_t' lvalue ->_r 0x562cb3a842f0
|     |       |   `-CXXThisExpr 0x562cb3a89e90 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x562cb3a89f20 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x562cb3a89f00 <col:17> 'String::memo_t *' lvalue ParmVar 0x562cb3a84450 'memo' 'String::memo_t *'
|     `-CallExpr 0x562cb3a8a0f0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x562cb3a8a0d8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x562cb3a89fe0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x562cb3a74f30 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x562cb3a8a048 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562cb3a83b48
|         `-ImplicitCastExpr 0x562cb3a8a030 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x562cb3a8a010 <col:27> 'String::memo_t *' lvalue ParmVar 0x562cb3a84450 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x562cb3a847e8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x562cb3a84608 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x562cb3a84688 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x562cb3a84700 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x562cb3a842f0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x562cb3a8a5b8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x562cb3a8a748 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x562cb3a8a6b0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x562cb3a8a620 <col:2> '<bound member function type>' ->assign_memo 0x562cb3a84538
|     | `-ImplicitCastExpr 0x562cb3a8a6e8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x562cb3a8a610 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x562cb3a8a700 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x562cb3a8a650 <col:14> 'const char *' lvalue ParmVar 0x562cb3a84608 'data' 'const char *'
|     |-ImplicitCastExpr 0x562cb3a8a718 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x562cb3a8a670 <col:20> 'int' lvalue ParmVar 0x562cb3a84688 'length' 'int'
|     `-ImplicitCastExpr 0x562cb3a8a730 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x562cb3a8a690 <col:28> 'String::memo_t *' lvalue ParmVar 0x562cb3a84700 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x562cb3a84978 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x562cb3a848b8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x562cb3a8a9a0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x562cb3a8a920 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x562cb3a8a770 <col:2> '<bound member function type>' ->assign_memo 0x562cb3a84538
|     | `-CXXThisExpr 0x562cb3a8a760 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x562cb3a8a958 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x562cb3a8a7f0 <col:14, col:19> 'const char *' lvalue .data 0x562cb3a84180
|     |   `-MemberExpr 0x562cb3a8a7c0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x562cb3a842f0
|     |     `-DeclRefExpr 0x562cb3a8a7a0 <col:14> 'const String' lvalue ParmVar 0x562cb3a848b8 'x' 'const String &'
|     |-ImplicitCastExpr 0x562cb3a8a970 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x562cb3a8a870 <col:25, col:30> 'int' lvalue .length 0x562cb3a841e8
|     |   `-MemberExpr 0x562cb3a8a840 <col:25, col:27> 'String::rep_t' lvalue ._r 0x562cb3a842f0
|     |     `-DeclRefExpr 0x562cb3a8a820 <col:25> 'const String' lvalue ParmVar 0x562cb3a848b8 'x' 'const String &'
|     `-ImplicitCastExpr 0x562cb3a8a988 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x562cb3a8a8f0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x562cb3a84278
|         `-MemberExpr 0x562cb3a8a8c0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x562cb3a842f0
|           `-DeclRefExpr 0x562cb3a8a8a0 <col:38> 'const String' lvalue ParmVar 0x562cb3a848b8 'x' 'const String &'
|-CXXMethodDecl 0x562cb3a84a40 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x562cb3a8b360 <col:31, line:278:5>
|   `-IfStmt 0x562cb3a8b348 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x562cb3a8aa40 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x562cb3a8aa28 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x562cb3a8a9f8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x562cb3a84278
|     |     `-MemberExpr 0x562cb3a8a9c8 <col:6> 'String::rep_t' lvalue ->_r 0x562cb3a842f0
|     |       `-CXXThisExpr 0x562cb3a8a9b8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x562cb3a8b320 <col:15, line:277:2>
|       |-ParenExpr 0x562cb3a8aef0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x562cb3a8aec0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x562cb3a8ab50 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x562cb3a8ab38 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x562cb3a8ab20 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x562cb3a8aae0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562cb3a83b48
|       |   |       `-ImplicitCastExpr 0x562cb3a8aac8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x562cb3a8aa98 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x562cb3a84278
|       |   |           `-MemberExpr 0x562cb3a8aa68 <col:27> 'String::rep_t' lvalue ->_r 0x562cb3a842f0
|       |   |             `-CXXThisExpr 0x562cb3a8aa58 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x562cb3a8abb0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x562cb3a8ab90 <col:54> 'int' 0
|       |   `-CallExpr 0x562cb3a8ae20 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x562cb3a8ae08 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x562cb3a8ad88 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562cb37ea380 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x562cb3a8ae60 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562cb3a8ac98 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x562cb3a8ae78 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562cb3a8acc8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x562cb3a8ae90 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x562cb3a8ad00 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x562cb3a8aea8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x562cb3a8ad70 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x562cb3a8ad58 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x562cb3a8ad20 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x562cb3a8b240 <line:274:6, line:275:22>
|       | |-CallExpr 0x562cb3a8b100 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x562cb3a8b0e8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x562cb3a8b060 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x562cb3a76370 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x562cb3a8b030 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562cb3a83b48
|       | |   `-ImplicitCastExpr 0x562cb3a8b018 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x562cb3a8afe8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x562cb3a84278
|       | |       `-MemberExpr 0x562cb3a8afb8 <col:40> 'String::rep_t' lvalue ->_r 0x562cb3a842f0
|       | |         `-CXXThisExpr 0x562cb3a8afa8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x562cb3a8b200 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x562cb3a8b1e8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x562cb3a8b128 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x562cb3a85718 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x562cb3a8b228 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x562cb3a8b188 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x562cb3a84278
|       |       `-MemberExpr 0x562cb3a8b158 <col:15> 'String::rep_t' lvalue ->_r 0x562cb3a842f0
|       |         `-CXXThisExpr 0x562cb3a8b148 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x562cb3a8b300 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x562cb3a8b298 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x562cb3a84278
|         | `-MemberExpr 0x562cb3a8b268 <col:6> 'String::rep_t' lvalue ->_r 0x562cb3a842f0
|         |   `-CXXThisExpr 0x562cb3a8b258 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x562cb3a8b2e8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x562cb3a8b2c8 <col:16> 'int' 0
|-CXXMethodDecl 0x562cb3a84cd8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x562cb3a84af8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x562cb3a84b78 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x562cb3a84bf0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x562cb3a84db0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x562cb3a85000 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x562cb3a84e68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x562cb3a84ee8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x562cb3a84f60 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x562cb3a851e8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x562cb3a850d0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x562cb3a85150 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x562cb3a852e8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x562cb3a8b438 <col:41, line:286:5>
|   `-ReturnStmt 0x562cb3a8b428 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x562cb3a8b3f8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x562cb3a8b3c0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x562cb3a8b3a8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x562cb3a8b388 <col:46> 'int' 1
|-CXXMethodDecl 0x562cb3a85588 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x562cb3a853a0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x562cb3a85420 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x562cb3a854a0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x562cb3a85718 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x562cb3a85650 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x562cb3a857e8 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x562cb3a859b8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x562cb3a858a0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x562cb3a85920 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x562cb3a85a78 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x562cb3a894a0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x562cb3a895a8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x562cb3a89620 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x562cb3a89698 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x562cb3a89700 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x562cb3a89800 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x562cb3a89850 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3a897e0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x562cb3a897c0 <col:22> 'int' 14
|-CXXMethodDecl 0x562cb3a89a68 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x562cb3a89880 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x562cb3a89900 <col:38> col:41 'int'
| `-ParmVarDecl 0x562cb3a89980 <col:43> col:46 'int'
|-FriendDecl 0x562cb3a89b70 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x562cb3a89c00 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class NameDB *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class NameInfo
         0 |   class Vector<class NameDB *> _namedb_roots
         0 |     class vector_memory<class sized_array_memory<8> > vm_
         0 |       vector_memory<class sized_array_memory<8> >::type * l_
         8 |       vector_memory::size_type n_
        12 |       vector_memory::size_type capacity_
        16 |   class Vector<class NameDB *> _namedbs
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562cb3d39d50 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x562cb3d39f28 prev 0x562cb3d39d50 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x562cb3d39fb8 <col:46, col:52> col:46 public
|-TypedefDecl 0x562cb3d39fe0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562cb374d580 'int'
|-TypedefDecl 0x562cb3d3bbb0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x562cb3d3bb60 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x562cb3d3a490 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x562cb3d3a390 'type'
|     `-TemplateSpecializationType 0x562cb3d3a320 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x562cb3d3a200 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x562cb3d3a1e0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x562cb3d3a1c0 <col:24> 'unsigned long' 8
|       `-RecordType 0x562cb3d3a300 'char_array<8>'
|         `-ClassTemplateSpecialization 0x562cb3d3a220 'char_array'
|-TypedefDecl 0x562cb3d3bc68 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x562cb3d3bc30 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x562cb3d3bc10 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x562cb3d3bbb0 'type'
|     `-ElaboratedType 0x562cb3d3bb60 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x562cb3d3a490 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x562cb3d3a390 'type'
|         `-TemplateSpecializationType 0x562cb3d3a320 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x562cb3d3a200 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x562cb3d3a1e0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x562cb3d3a1c0 <col:24> 'unsigned long' 8
|           `-RecordType 0x562cb3d3a300 'char_array<8>'
|             `-ClassTemplateSpecialization 0x562cb3d3a220 'char_array'
|-CXXMethodDecl 0x562cb3d3bde8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x562cb3d3bcf8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x562cb3d3bed8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562cb3d3c010 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x562cb3d3c010
|-CXXMethodDecl 0x562cb3d3c2d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x562cb3d3c1e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x562cb3d3c518 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x562cb3d3c390 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562cb3d3c408 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x562cb3d3c6e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x562cb3d3c5d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562cb3d3c650 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x562cb3d3c848 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x562cb3d3c918 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x562cb3d3cb68 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x562cb3d3c9d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x562cb3d3ca50 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x562cb3d3cdc8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x562cb3d3cc38 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x562cb3d3ccb0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x562cb3d3cf88 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x562cb3d3ce98 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x562cb3d3d148 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x562cb3d3d050 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x562cb3d3d200 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562cb3d3d2b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x562cb3d3d4e8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x562cb3d3d360 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562cb3d3d3d8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x562cb3d3d788 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x562cb3d3d690 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x562cb3d3d850 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x562cb3d3d8a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x562cb3d3d8f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562cb3d38970 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'NameDB *'
|-CXXRecordDecl 0x562cb3d38b78 prev 0x562cb3d38970 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x562cb3d39cc0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<NameDB *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x562cb3d39c70 'typename array_memory<NameDB *>::type' sugar
|   `-TypedefType 0x562cb3d39c50 'conditional<true, sized_array_memory<8>, typed_array_memory<NameDB *> >::type' sugar
|     |-Typedef 0x562cb3d39b00 'type'
|     `-SubstTemplateTypeParmType 0x562cb3d39920 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x562cb3967c80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562cb3967c28 'T'
|       `-RecordType 0x562cb3d39470 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x562cb3d39388 'sized_array_memory'
|-FieldDecl 0x562cb3d3d940 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<NameDB *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x562cb3d3d990 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x562cb3d3d9c8 <line:118:5, col:15> col:15 value_type 'NameDB *':'NameDB *'
| `-SubstTemplateTypeParmType 0x562cb3d38c10 'NameDB *' sugar
|   |-TemplateTypeParmType 0x562cb3a4b710 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x562cb3a4b6b8 'T'
|   `-PointerType 0x562cb3d36b00 'NameDB *'
|     `-RecordType 0x562cb3d35270 'NameDB'
|       `-CXXRecord 0x562cb3d43f68 'NameDB'
|-TypedefDecl 0x562cb3d3da88 <line:119:5, col:16> col:16 reference 'NameDB *&'
| `-LValueReferenceType 0x562cb3d3da50 'NameDB *&'
|   `-SubstTemplateTypeParmType 0x562cb3d38c10 'NameDB *' sugar
|     |-TemplateTypeParmType 0x562cb3a4b710 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562cb3a4b6b8 'T'
|     `-PointerType 0x562cb3d36b00 'NameDB *'
|       `-RecordType 0x562cb3d35270 'NameDB'
|         `-CXXRecord 0x562cb3d43f68 'NameDB'
|-TypedefDecl 0x562cb3d3db48 <line:120:5, col:22> col:22 const_reference 'NameDB *const &'
| `-LValueReferenceType 0x562cb3d3db10 'NameDB *const &'
|   `-QualType 0x562cb3d38c11 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x562cb3d38c10 'NameDB *' sugar
|       |-TemplateTypeParmType 0x562cb3a4b710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562cb3a4b6b8 'T'
|       `-PointerType 0x562cb3d36b00 'NameDB *'
|         `-RecordType 0x562cb3d35270 'NameDB'
|           `-CXXRecord 0x562cb3d43f68 'NameDB'
|-TypedefDecl 0x562cb3d3dc08 <line:121:5, col:16> col:16 pointer 'NameDB **'
| `-PointerType 0x562cb3d3dbd0 'NameDB **'
|   `-SubstTemplateTypeParmType 0x562cb3d38c10 'NameDB *' sugar
|     |-TemplateTypeParmType 0x562cb3a4b710 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562cb3a4b6b8 'T'
|     `-PointerType 0x562cb3d36b00 'NameDB *'
|       `-RecordType 0x562cb3d35270 'NameDB'
|         `-CXXRecord 0x562cb3d43f68 'NameDB'
|-TypedefDecl 0x562cb3d3dcc8 <line:122:5, col:22> col:22 const_pointer 'NameDB *const *'
| `-PointerType 0x562cb3d3dc90 'NameDB *const *'
|   `-QualType 0x562cb3d38c11 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x562cb3d38c10 'NameDB *' sugar
|       |-TemplateTypeParmType 0x562cb3a4b710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562cb3a4b6b8 'T'
|       `-PointerType 0x562cb3d36b00 'NameDB *'
|         `-RecordType 0x562cb3d35270 'NameDB'
|           `-CXXRecord 0x562cb3d43f68 'NameDB'
|-TypedefDecl 0x562cb3d3e8a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<NameDB *>::type':'NameDB *'
| `-ElaboratedType 0x562cb3d3e850 'typename fast_argument<NameDB *>::type' sugar
|   `-TypedefType 0x562cb3d3e830 'fast_argument<NameDB *, false>::type' sugar
|     |-Typedef 0x562cb3d3e7c0 'type'
|     `-SubstTemplateTypeParmType 0x562cb3d3e580 'NameDB *' sugar
|       |-TemplateTypeParmType 0x562cb3972270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562cb3972220 'T'
|       `-PointerType 0x562cb3d36b00 'NameDB *'
|         `-RecordType 0x562cb3d35270 'NameDB'
|           `-CXXRecord 0x562cb3d43f68 'NameDB'
|-TypedefDecl 0x562cb3d3e908 <line:126:5, col:22> col:22 const_access_type 'NameDB *const &'
| `-LValueReferenceType 0x562cb3d3db10 'NameDB *const &'
|   `-QualType 0x562cb3d38c11 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x562cb3d38c10 'NameDB *' sugar
|       |-TemplateTypeParmType 0x562cb3a4b710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562cb3a4b6b8 'T'
|       `-PointerType 0x562cb3d36b00 'NameDB *'
|         `-RecordType 0x562cb3d35270 'NameDB'
|           `-CXXRecord 0x562cb3d43f68 'NameDB'
|-TypedefDecl 0x562cb3d3e960 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562cb374d580 'int'
|-TypedefDecl 0x562cb3d3e9c8 <line:130:5, col:16> col:16 iterator 'NameDB **'
| `-PointerType 0x562cb3d3dbd0 'NameDB **'
|   `-SubstTemplateTypeParmType 0x562cb3d38c10 'NameDB *' sugar
|     |-TemplateTypeParmType 0x562cb3a4b710 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562cb3a4b6b8 'T'
|     `-PointerType 0x562cb3d36b00 'NameDB *'
|       `-RecordType 0x562cb3d35270 'NameDB'
|         `-CXXRecord 0x562cb3d43f68 'NameDB'
|-TypedefDecl 0x562cb3d3ea30 <line:131:5, col:22> col:22 const_iterator 'NameDB *const *'
| `-PointerType 0x562cb3d3dc90 'NameDB *const *'
|   `-QualType 0x562cb3d38c11 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x562cb3d38c10 'NameDB *' sugar
|       |-TemplateTypeParmType 0x562cb3a4b710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562cb3a4b6b8 'T'
|       `-PointerType 0x562cb3d36b00 'NameDB *'
|         `-RecordType 0x562cb3d35270 'NameDB'
|           `-CXXRecord 0x562cb3d43f68 'NameDB'
|-EnumDecl 0x562cb3d3ea88 <line:134:5> col:5
| `-EnumConstantDecl 0x562cb3d3eb80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<NameDB *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x562cb3d3eb60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x562cb3a4d0f8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x562cb3a4d0d0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x562cb3a4d0b0 <col:40> 'int' 1
|-CXXConstructorDecl 0x562cb3d3ec08 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x562cb3d3ee98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x562cb3d3ecc0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562cb3d3ed60 <col:41, col:61> col:61 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXConstructorDecl 0x562cb3d3f158 <line:139:5, col:37> col:12 Vector 'void (const Vector<NameDB *> &)' inline
| `-ParmVarDecl 0x562cb3d3f040 <col:19, col:36> col:36 x 'const Vector<NameDB *> &'
|-CXXConstructorDecl 0x562cb3d3f418 <line:141:5, col:32> col:12 Vector 'void (Vector<NameDB *> &&)' inline
| `-ParmVarDecl 0x562cb3d3f300 <col:19, col:31> col:31 x 'Vector<NameDB *> &&'
|-CXXMethodDecl 0x562cb3d3f760 <line:144:5, col:51> col:23 operator= 'Vector<NameDB *> &(const Vector<NameDB *> &)' inline
| `-ParmVarDecl 0x562cb3d3f640 <col:33, col:50> col:50 x 'const Vector<NameDB *> &'
|-CXXMethodDecl 0x562cb3d3fa70 <line:146:5, col:46> col:23 operator= 'Vector<NameDB *> &(Vector<NameDB *> &&)' inline
| `-ParmVarDecl 0x562cb3d3f950 <col:33, col:45> col:45 x 'Vector<NameDB *> &&'
|-CXXMethodDecl 0x562cb3d3fd60 <line:148:5, col:70> col:23 assign 'Vector<NameDB *> &(Vector::size_type, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x562cb3d3fba8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562cb3d3fc20 <col:43, col:69> col:63 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x562cb3d3feb8 <line:150:5, col:55> col:49 begin 'Vector<NameDB *>::iterator ()'
| |-NoInlineAttr 0x562cb3d3ff98 <col:20> Inherited
| `-OptimizeNoneAttr 0x562cb3d3fff0 <col:30> Inherited
|-CXXMethodDecl 0x562cb3d40038 <line:151:5, col:53> col:49 end 'Vector<NameDB *>::iterator ()'
| |-NoInlineAttr 0x562cb3d400e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562cb3d40140 <col:30> Inherited
|-CXXMethodDecl 0x562cb3d40208 <line:152:5, col:63> col:55 begin 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x562cb3d402b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562cb3d40310 <col:30> Inherited
|-CXXMethodDecl 0x562cb3d40358 <line:153:5, col:61> col:55 end 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x562cb3d40408 <col:20> Inherited
| `-OptimizeNoneAttr 0x562cb3d40460 <col:30> Inherited
|-CXXMethodDecl 0x562cb3d404a8 <line:154:5, col:64> col:55 cbegin 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x562cb3d40558 <col:20> Inherited
| `-OptimizeNoneAttr 0x562cb3d405b0 <col:30> Inherited
|-CXXMethodDecl 0x562cb3d405f8 <line:155:5, col:62> col:55 cend 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x562cb3d406a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562cb3d40700 <col:30> Inherited
|-CXXMethodDecl 0x562cb3d40728 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562cb3d407d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562cb3d40888 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562cb3d40a48 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x562cb3d40938 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562cb3d409b0 <col:37, col:63> col:57 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x562cb3d40b98 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x562cb3d40b08 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x562cb3d40d48 <line:163:5, col:65> col:43 operator[] 'NameDB *&(Vector::size_type)'
| |-ParmVarDecl 0x562cb3d40c50 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562cb3d40e00 <col:20>
| `-OptimizeNoneAttr 0x562cb3d40e58 <col:30>
|-CXXMethodDecl 0x562cb3d40f78 <line:164:5, col:73> col:49 operator[] 'NameDB *const &(Vector::size_type) const'
| |-ParmVarDecl 0x562cb3d40e80 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562cb3d41030 <col:20>
| `-OptimizeNoneAttr 0x562cb3d41088 <col:30>
|-CXXMethodDecl 0x562cb3d41140 <line:165:5, col:29> col:15 at 'NameDB *&(Vector::size_type)' inline
| `-ParmVarDecl 0x562cb3d410b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562cb3d41288 <line:166:5, col:37> col:21 at 'NameDB *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562cb3d411f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562cb3d413b8 <line:167:5, col:21> col:15 front 'NameDB *&()' inline
|-CXXMethodDecl 0x562cb3d414e8 <line:168:5, col:29> col:21 front 'NameDB *const &() const' inline
|-CXXMethodDecl 0x562cb3d415b8 <line:169:5, col:20> col:15 back 'NameDB *&()' inline
|-CXXMethodDecl 0x562cb3d41688 <line:170:5, col:28> col:21 back 'NameDB *const &() const' inline
|-CXXMethodDecl 0x562cb3d417c8 <line:172:5, col:39> col:15 unchecked_at 'NameDB *&(Vector::size_type)' inline
| `-ParmVarDecl 0x562cb3d41738 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562cb3d41910 <line:173:5, col:47> col:21 unchecked_at 'NameDB *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562cb3d41880 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562cb3d41a58 <line:174:5, col:59> col:15 at_u 'NameDB *&(Vector::size_type)' inline
| |-ParmVarDecl 0x562cb3d419c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562cb3d41b10 <col:48> Inherited "" ""
|-CXXMethodDecl 0x562cb3d41c10 <line:175:5, col:71> col:21 at_u 'NameDB *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x562cb3d41b80 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562cb3d41cc8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x562cb3d41d88 <line:177:5, col:20> col:15 data 'NameDB **()' inline
|-CXXMethodDecl 0x562cb3d41e88 <line:178:5, col:28> col:21 data 'NameDB *const *() const' inline
|-CXXMethodDecl 0x562cb3d42008 <line:180:5, col:48> col:17 push_back 'void (Vector<NameDB *>::value_argument_type)' inline
| `-ParmVarDecl 0x562cb3d41f48 <col:27, col:47> col:47 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-FunctionTemplateDecl 0x562cb3d427c8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x562cb3d420c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<NameDB *>':'fast_argument<NameDB *, false>'
| `-CXXMethodDecl 0x562cb3d42728 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (NameDB *&&)' inline
|   `-ParmVarDecl 0x562cb3d42628 <col:58, col:62> col:62 v 'NameDB *&&'
|-CXXMethodDecl 0x562cb3d428a8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562cb3d429f8 <line:186:5, col:49> col:17 push_front 'void (Vector<NameDB *>::value_argument_type)' inline
| `-ParmVarDecl 0x562cb3d42968 <col:28, col:48> col:48 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x562cb3d42ab0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x562cb3d42cf8 <line:189:5, col:62> col:21 insert 'Vector<NameDB *>::iterator (Vector<NameDB *>::iterator, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x562cb3d42b70 <col:28, col:37> col:37 it 'Vector<NameDB *>::iterator':'NameDB **'
| `-ParmVarDecl 0x562cb3d42be8 <col:41, col:61> col:61 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x562cb3d42eb8 <line:190:5, col:38> col:21 erase 'Vector<NameDB *>::iterator (Vector<NameDB *>::iterator)' inline
| `-ParmVarDecl 0x562cb3d42dc8 <col:27, col:36> col:36 it 'Vector<NameDB *>::iterator':'NameDB **'
|-CXXMethodDecl 0x562cb3d43108 <line:191:5, col:49> col:21 erase 'Vector<NameDB *>::iterator (Vector<NameDB *>::iterator, Vector<NameDB *>::iterator)' inline
| |-ParmVarDecl 0x562cb3d42f80 <col:27, col:36> col:36 a 'Vector<NameDB *>::iterator':'NameDB **'
| `-ParmVarDecl 0x562cb3d42ff8 <col:39, col:48> col:48 b 'Vector<NameDB *>::iterator':'NameDB **'
|-CXXMethodDecl 0x562cb3d431c8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x562cb3d43428 <line:195:5, col:34> col:17 swap 'void (Vector<NameDB *> &)' inline
| `-ParmVarDecl 0x562cb3d43330 <col:22, col:33> col:33 x 'Vector<NameDB *> &'
`-CXXDestructorDecl 0x562cb3d434f8 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x562cb3d434f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3d35320 <../dummy_inc/click/nameinfo.hh:11:1, line:243:1> line:11:7 referenced class NameInfo definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562cb3d35438 <col:1, col:7> col:7 implicit referenced class NameInfo
|-AccessSpecDecl 0x562cb3d354c8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x562cb3d35550 <line:16:5, col:14> col:5 NameInfo 'void ()'
|-CXXDestructorDecl 0x562cb3d35640 <line:23:5, col:15> col:5 ~NameInfo 'void ()' noexcept-unevaluated 0x562cb3d35640
|-CXXMethodDecl 0x562cb3d35740 <line:29:5, col:35> col:17 static_initialize 'void ()' static
|-CXXMethodDecl 0x562cb3d35800 <line:35:5, col:32> col:17 static_cleanup 'void ()' static
|-EnumDecl 0x562cb3d358a0 <line:38:5, line:63:5> line:38:10 DBType
| |-EnumConstantDecl 0x562cb3d359a0 <line:39:2, col:11> col:2 T_NONE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d366e0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35980 <col:11> 'int' Int: 0
| |     `-IntegerLiteral 0x562cb3d35960 <col:11> 'int' 0
| |-EnumConstantDecl 0x562cb3d35a30 <line:40:2, col:19> col:2 T_SCHEDULEINFO 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d366f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35a10 <col:19> 'int' Int: 1
| |     `-IntegerLiteral 0x562cb3d359f0 <col:19> 'int' 1
| |-EnumConstantDecl 0x562cb3d35ac0 <line:41:2, col:17> col:2 T_ANNOTATION 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36710 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35aa0 <col:17> 'int' Int: 2
| |     `-IntegerLiteral 0x562cb3d35a80 <col:17> 'int' 2
| |-EnumConstantDecl 0x562cb3d35b50 <line:42:2, col:18> col:2 T_SCRIPT_INSN 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36728 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35b30 <col:18> 'int' Int: 3
| |     `-IntegerLiteral 0x562cb3d35b10 <col:18> 'int' 3
| |-EnumConstantDecl 0x562cb3d35be0 <line:43:2, col:12> col:2 T_SIGNO 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36740 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35bc0 <col:12> 'int' Int: 4
| |     `-IntegerLiteral 0x562cb3d35ba0 <col:12> 'int' 4
| |-EnumConstantDecl 0x562cb3d35c70 <line:44:2, col:15> col:2 T_SPINLOCK 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36758 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35c50 <col:15> 'int' Int: 5
| |     `-IntegerLiteral 0x562cb3d35c30 <col:15> 'int' 5
| |-EnumConstantDecl 0x562cb3d35d00 <line:45:2, col:20> col:2 T_ETHERNET_ADDR 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36770 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35ce0 <col:20> 'int' Int: 16777217
| |     `-IntegerLiteral 0x562cb3d35cc0 <col:20> 'int' 16777217
| |-EnumConstantDecl 0x562cb3d35d90 <line:46:2, col:14> col:2 T_IP_ADDR 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36788 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35d70 <col:14> 'int' Int: 67108865
| |     `-IntegerLiteral 0x562cb3d35d50 <col:14> 'int' 67108865
| |-EnumConstantDecl 0x562cb3d35e20 <line:47:2, col:16> col:2 T_IP_PREFIX 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d367a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35e00 <col:16> 'int' Int: 67108866
| |     `-IntegerLiteral 0x562cb3d35de0 <col:16> 'int' 67108866
| |-EnumConstantDecl 0x562cb3d35eb0 <line:48:2, col:15> col:2 T_IP_PROTO 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d367b8 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35e90 <col:15> 'int' Int: 67108867
| |     `-IntegerLiteral 0x562cb3d35e70 <col:15> 'int' 67108867
| |-EnumConstantDecl 0x562cb3d35f40 <line:49:2, col:20> col:2 T_IPFILTER_TYPE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d367d0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35f20 <col:20> 'int' Int: 67108868
| |     `-IntegerLiteral 0x562cb3d35f00 <col:20> 'int' 67108868
| |-EnumConstantDecl 0x562cb3d35fd0 <line:50:2, col:14> col:2 T_TCP_OPT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d367e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d35fb0 <col:14> 'int' Int: 67108869
| |     `-IntegerLiteral 0x562cb3d35f90 <col:14> 'int' 67108869
| |-EnumConstantDecl 0x562cb3d36060 <line:51:2, col:25> col:2 T_IPREWRITER_PATTERN 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36800 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d36040 <col:25> 'int' Int: 67108870
| |     `-IntegerLiteral 0x562cb3d36020 <col:25> 'int' 67108870
| |-EnumConstantDecl 0x562cb3d360f0 <line:52:2, col:16> col:2 T_ICMP_TYPE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36818 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d360d0 <col:16> 'int' Int: 67174400
| |     `-IntegerLiteral 0x562cb3d360b0 <col:16> 'int' 67174400
| |-EnumConstantDecl 0x562cb3d36180 <line:53:2, col:16> col:2 T_ICMP_CODE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36830 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d36160 <col:16> 'int' Int: 67174656
| |     `-IntegerLiteral 0x562cb3d36140 <col:16> 'int' 67174656
| |-EnumConstantDecl 0x562cb3d36210 <line:54:2, col:14> col:2 T_IP_PORT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36848 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d361f0 <col:14> 'int' Int: 67239936
| |     `-IntegerLiteral 0x562cb3d361d0 <col:14> 'int' 67239936
| |-EnumConstantDecl 0x562cb3d362a0 <line:55:2, col:15> col:2 T_TCP_PORT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36860 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d36280 <col:15> 'int' Int: 67239942
| |     `-IntegerLiteral 0x562cb3d36260 <col:15> 'int' 67239942
| |-EnumConstantDecl 0x562cb3d36330 <line:56:2, col:15> col:2 T_UDP_PORT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36878 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d36310 <col:15> 'int' Int: 67239953
| |     `-IntegerLiteral 0x562cb3d362f0 <col:15> 'int' 67239953
| |-EnumConstantDecl 0x562cb3d363c0 <line:57:2, col:19> col:2 referenced T_IP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d36890 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d363a0 <col:19> 'int' Int: 67305472
| |     `-IntegerLiteral 0x562cb3d36380 <col:19> 'int' 67305472
| |-EnumConstantDecl 0x562cb3d36450 <line:58:2, col:21> col:2 referenced T_ICMP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d368a8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d36430 <col:21> 'int' Int: 67305473
| |     `-IntegerLiteral 0x562cb3d36410 <col:21> 'int' 67305473
| |-EnumConstantDecl 0x562cb3d364e0 <line:59:2, col:20> col:2 referenced T_TCP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d368c0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d364c0 <col:20> 'int' Int: 67305478
| |     `-IntegerLiteral 0x562cb3d364a0 <col:20> 'int' 67305478
| |-EnumConstantDecl 0x562cb3d36570 <line:60:2, col:20> col:2 referenced T_UDP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d368d8 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d36550 <col:20> 'int' Int: 67305489
| |     `-IntegerLiteral 0x562cb3d36530 <col:20> 'int' 67305489
| |-EnumConstantDecl 0x562cb3d36600 <line:61:2, col:15> col:2 T_IP6_ADDR 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x562cb3d368f0 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3d365e0 <col:15> 'int' Int: 100663297
| |     `-IntegerLiteral 0x562cb3d365c0 <col:15> 'int' 100663297
| `-EnumConstantDecl 0x562cb3d36690 <line:62:2, col:17> col:2 T_IP6_PREFIX 'NameInfo::DBType'
|   `-ImplicitCastExpr 0x562cb3d36908 <col:17> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3d36670 <col:17> 'int' Int: 100663298
|       `-IntegerLiteral 0x562cb3d36650 <col:17> 'int' 100663298
|-CXXMethodDecl 0x562cb3d36c08 <line:85:5, line:86:35> line:85:20 used getdb 'NameDB *(uint32_t, const Element *, size_t, bool)' static
| |-ParmVarDecl 0x562cb3d36930 <col:26, col:35> col:35 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d369a8 <col:41, col:56> col:56 context 'const Element *'
| |-ParmVarDecl 0x562cb3d36a20 <line:86:5, col:12> col:12 value_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x562cb3d36a98 <col:24, col:29> col:29 create 'bool'
|-CXXMethodDecl 0x562cb3d36e28 <line:104:5, col:61> col:17 used installdb 'void (NameDB *, const Element *)' static
| |-ParmVarDecl 0x562cb3d36cd8 <col:27, col:35> col:35 db 'NameDB *'
| `-ParmVarDecl 0x562cb3d36d50 <col:39, col:54> col:54 context 'const Element *'
|-CXXMethodDecl 0x562cb3d36fa8 <line:112:5, col:39> col:17 used uninstalldb 'void (NameDB *)' static
| `-ParmVarDecl 0x562cb3d36ee8 <col:29, col:37> col:37 db 'NameDB *'
|-CXXMethodDecl 0x562cb3d37398 <line:127:5, line:128:65> line:127:17 used query 'bool (uint32_t, const Element *, const String &, void *, size_t)' static
| |-ParmVarDecl 0x562cb3d37060 <col:23, col:32> col:32 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d370d8 <col:38, col:53> col:53 context 'const Element *'
| |-ParmVarDecl 0x562cb3d37150 <line:128:9, col:23> col:23 name 'const String &'
| |-ParmVarDecl 0x562cb3d371d0 <col:29, col:35> col:35 value_store 'void *'
| `-ParmVarDecl 0x562cb3d37248 <col:48, col:55> col:55 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x562cb3d37718 <line:147:5, line:148:46> line:147:17 query_int 'bool (uint32_t, const Element *, const String &, int32_t *)' static
| |-ParmVarDecl 0x562cb3d37470 <col:27, col:36> col:36 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d374e8 <col:42, col:57> col:57 context 'const Element *'
| |-ParmVarDecl 0x562cb3d37560 <line:148:6, col:20> col:20 name 'const String &'
| `-ParmVarDecl 0x562cb3d375d8 <col:26, col:35> col:35 value_store 'int32_t *'
|-CXXMethodDecl 0x562cb3d37a98 <line:151:5, line:152:47> line:151:17 query_int 'bool (uint32_t, const Element *, const String &, uint32_t *)' static
| |-ParmVarDecl 0x562cb3d377e8 <col:27, col:36> col:36 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d37860 <col:42, col:57> col:57 context 'const Element *'
| |-ParmVarDecl 0x562cb3d378d8 <line:152:6, col:20> col:20 name 'const String &'
| `-ParmVarDecl 0x562cb3d37950 <col:26, col:36> col:36 value_store 'uint32_t *'
|-CXXMethodDecl 0x562cb3d37e18 <line:167:5, line:168:43> line:167:19 used revquery 'String (uint32_t, const Element *, const void *, size_t)' static
| |-ParmVarDecl 0x562cb3d37b68 <col:28, col:37> col:37 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d37be0 <col:43, col:58> col:58 context 'const Element *'
| |-ParmVarDecl 0x562cb3d37c60 <line:168:7, col:19> col:19 value 'const void *'
| `-ParmVarDecl 0x562cb3d37cd8 <col:26, col:33> col:33 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x562cb3d380f8 <line:182:5, line:183:24> line:182:26 revquery_int 'String (uint32_t, const Element *, int32_t)' static inline
| |-ParmVarDecl 0x562cb3d37ee8 <col:39, col:48> col:48 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d37f60 <col:54, col:69> col:69 context 'const Element *'
| `-ParmVarDecl 0x562cb3d37fd8 <line:183:11, col:19> col:19 value 'int32_t':'int'
|-CXXMethodDecl 0x562cb3d384f8 <line:202:5, line:203:66> line:202:24 define 'bool (uint32_t, const Element *, const String &, const void *, size_t)' static inline
| |-ParmVarDecl 0x562cb3d381c0 <col:31, col:40> col:40 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d38238 <col:46, col:61> col:61 context 'const Element *'
| |-ParmVarDecl 0x562cb3d382b0 <line:203:10, col:24> col:24 name 'const String &'
| |-ParmVarDecl 0x562cb3d38330 <col:30, col:42> col:42 value 'const void *'
| `-ParmVarDecl 0x562cb3d383a8 <col:49, col:56> col:56 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x562cb3d38878 <line:220:5, line:221:40> line:220:24 define_int 'bool (uint32_t, const Element *, const String &, int32_t)' static inline
| |-ParmVarDecl 0x562cb3d385d0 <col:35, col:44> col:44 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d38648 <col:50, col:65> col:65 context 'const Element *'
| |-ParmVarDecl 0x562cb3d386c0 <line:221:7, col:21> col:21 name 'const String &'
| `-ParmVarDecl 0x562cb3d38738 <col:27, col:35> col:35 value 'int32_t':'int'
|-AccessSpecDecl 0x562cb3d38938 <line:230:3, col:10> col:3 private
|-FieldDecl 0x562cb3d435e0 <line:232:5, col:22> col:22 _namedb_roots 'Vector<NameDB *>':'Vector<NameDB *>'
|-FieldDecl 0x562cb3d436e0 <line:233:5, col:22> col:22 _namedbs 'Vector<NameDB *>':'Vector<NameDB *>'
|-CXXMethodDecl 0x562cb3d43778 <line:235:5, col:73> col:20 install_dynamic_sentinel 'NameDB *()' inline
| `-CompoundStmt 0x562cb3d43f50 <col:47, col:73>
|   `-ReturnStmt 0x562cb3d43f40 <col:49, col:67>
|     `-CStyleCastExpr 0x562cb3d43f18 <col:56, col:67> 'NameDB *' <BitCast>
|       `-CXXThisExpr 0x562cb3d43ef8 <col:67> 'NameInfo *' this
|-CXXMethodDecl 0x562cb3d43ad8 <line:236:5, col:87> col:13 namedb 'NameDB *(uint32_t, size_t, const String &, NameDB *)'
| |-ParmVarDecl 0x562cb3d43828 <col:20, col:29> col:29 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d438a0 <col:35, col:42> col:42 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x562cb3d43918 <col:48, col:62> col:62 prefix 'const String &'
| `-ParmVarDecl 0x562cb3d43990 <col:70, col:78> col:78 installer 'NameDB *'
|-CXXConstructorDecl 0x562cb3d43bc8 <line:11:7> col:7 implicit NameInfo 'void (const NameInfo &)' inline default noexcept-unevaluated 0x562cb3d43bc8
| `-ParmVarDecl 0x562cb3d43cd8 <col:7> col:7 'const NameInfo &'
`-CXXMethodDecl 0x562cb3d43d78 <col:7> col:7 implicit operator= 'NameInfo &(const NameInfo &)' inline default noexcept-unevaluated 0x562cb3d43d78
  `-ParmVarDecl 0x562cb3d43e88 <col:7> col:7 'const NameInfo &'

Layout: <CGRecordLayout
  LLVMType:%class.NameInfo = type { %class.Vector, %class.Vector }
  NonVirtualBaseLLVMType:%class.NameInfo = type { %class.Vector, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3d43f68 prev 0x562cb3d351d8 <../dummy_inc/click/nameinfo.hh:245:1, line:348:1> line:245:7 referenced class NameDB definition
|-DefinitionData polymorphic abstract has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x562cb3d44088 <col:1, col:7> col:7 implicit referenced class NameDB
|-AccessSpecDecl 0x562cb3d44118 <col:16, col:22> col:16 public
|-CXXConstructorDecl 0x562cb3d44378 <line:253:5, col:74> col:12 used NameDB 'void (uint32_t, const String &, size_t)' inline
| |-ParmVarDecl 0x562cb3d44150 <col:19, col:28> col:28 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d441c8 <col:34, col:48> col:48 context 'const String &'
| `-ParmVarDecl 0x562cb3d44240 <col:57, col:64> col:64 value_size 'size_t':'unsigned long'
|-CXXDestructorDecl 0x562cb3d44480 <line:259:5, line:261:5> line:259:13 used ~NameDB 'void () noexcept' virtual
| `-CompoundStmt 0x562cb3d45b08 <col:23, line:261:5>
|   `-CallExpr 0x562cb3d45ae0 <line:260:2, col:28> 'void'
|     |-ImplicitCastExpr 0x562cb3d45ac8 <col:2, col:12> 'void (*)(NameDB *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x562cb3d45a58 <col:2, col:12> 'void (NameDB *)' lvalue CXXMethod 0x562cb3d36fa8 'uninstalldb' 'void (NameDB *)'
|     `-CXXThisExpr 0x562cb3d45a88 <col:24> 'NameDB *' this
|-CXXMethodDecl 0x562cb3d445a8 <line:264:5, line:266:5> line:264:14 type 'uint32_t () const'
| `-CompoundStmt 0x562cb3d45b88 <col:27, line:266:5>
|   `-ReturnStmt 0x562cb3d45b78 <line:265:2, col:9>
|     `-ImplicitCastExpr 0x562cb3d45b60 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x562cb3d45b30 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_type 0x562cb3d45390
|         `-CXXThisExpr 0x562cb3d45b20 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x562cb3d44668 <line:269:5, line:271:5> line:269:19 context 'const String &() const'
| `-CompoundStmt 0x562cb3d45bf0 <col:35, line:271:5>
|   `-ReturnStmt 0x562cb3d45be0 <line:270:2, col:9>
|     `-MemberExpr 0x562cb3d45bb0 <col:9> 'const String' lvalue ->_context 0x562cb3d453f0
|       `-CXXThisExpr 0x562cb3d45ba0 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x562cb3d44758 <line:279:5, line:281:5> line:279:13 context_parent 'NameDB *() const'
| `-CompoundStmt 0x562cb3d45c70 <col:36, line:281:5>
|   `-ReturnStmt 0x562cb3d45c60 <line:280:2, col:9>
|     `-ImplicitCastExpr 0x562cb3d45c48 <col:9> 'NameDB *' <LValueToRValue>
|       `-MemberExpr 0x562cb3d45c18 <col:9> 'NameDB *const' lvalue ->_context_parent 0x562cb3d454b0
|         `-CXXThisExpr 0x562cb3d45c08 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x562cb3d44848 <line:284:5, line:286:5> line:284:12 value_size 'size_t () const'
| `-CompoundStmt 0x562cb3d45cf0 <col:31, line:286:5>
|   `-ReturnStmt 0x562cb3d45ce0 <line:285:2, col:9>
|     `-ImplicitCastExpr 0x562cb3d45cc8 <col:9> 'size_t':'unsigned long' <LValueToRValue>
|       `-MemberExpr 0x562cb3d45c98 <col:9> 'const size_t':'const unsigned long' lvalue ->_value_size 0x562cb3d45450
|         `-CXXThisExpr 0x562cb3d45c88 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x562cb3d44b18 <line:295:5, col:78> col:18 query 'bool (const String &, void *, size_t)' virtual pure
| |-ParmVarDecl 0x562cb3d448f8 <col:24, col:38> col:38 name 'const String &'
| |-ParmVarDecl 0x562cb3d44978 <col:44, col:50> col:50 value 'void *'
| `-ParmVarDecl 0x562cb3d449f0 <col:57, col:64> col:64 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x562cb3d44d78 <line:305:5, col:65> col:20 revquery 'String (const void *, size_t)' virtual
| |-ParmVarDecl 0x562cb3d44be8 <col:29, col:41> col:41 value 'const void *'
| `-ParmVarDecl 0x562cb3d44c60 <col:48, col:55> col:55 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x562cb3d45058 <line:315:5, col:81> col:18 used define 'bool (const String &, const void *, size_t)' virtual
| |-ParmVarDecl 0x562cb3d44e38 <col:25, col:39> col:39 name 'const String &'
| |-ParmVarDecl 0x562cb3d44eb8 <col:45, col:57> col:57 value 'const void *'
| `-ParmVarDecl 0x562cb3d44f30 <col:64, col:71> col:71 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x562cb3d452a8 <line:324:5, col:61> col:17 define_int 'bool (const String &, int32_t)' inline
| |-ParmVarDecl 0x562cb3d45120 <col:28, col:42> col:42 name 'const String &'
| `-ParmVarDecl 0x562cb3d45198 <col:48, col:56> col:56 value 'int32_t':'int'
|-AccessSpecDecl 0x562cb3d45358 <line:332:3, col:10> col:3 private
|-FieldDecl 0x562cb3d45390 <line:334:5, col:14> col:14 referenced _type 'uint32_t':'unsigned int'
|-FieldDecl 0x562cb3d453f0 <line:335:5, col:12> col:12 referenced _context 'String'
|-FieldDecl 0x562cb3d45450 <line:336:5, col:12> col:12 referenced _value_size 'size_t':'unsigned long'
|-FieldDecl 0x562cb3d454b0 <line:337:5, col:13> col:13 referenced _context_parent 'NameDB *'
|-FieldDecl 0x562cb3d45510 <line:338:5, col:13> col:13 _context_sibling 'NameDB *'
|-FieldDecl 0x562cb3d45570 <line:339:5, col:13> col:13 _context_child 'NameDB *'
|-FieldDecl 0x562cb3d455d0 <line:340:5, col:15> col:15 _installed 'NameInfo *'
|-FriendDecl 0x562cb3d45670 <line:346:5, col:18> col:12 'class NameInfo':'NameInfo'
|-CXXConstructorDecl 0x562cb3d456d8 <line:245:7> col:7 implicit NameDB 'void (const NameDB &)' inline default noexcept-unevaluated 0x562cb3d456d8
| `-ParmVarDecl 0x562cb3d457e8 <col:7> col:7 'const NameDB &'
`-CXXMethodDecl 0x562cb3d45888 <col:7> col:7 implicit operator= 'NameDB &(const NameDB &)' inline default noexcept-unevaluated 0x562cb3d45888
  `-ParmVarDecl 0x562cb3d45998 <col:7> col:7 'const NameDB &'

Layout: <CGRecordLayout
  LLVMType:%class.NameDB = type { i32 (...)**, i32, %class.String, i64, %class.NameDB*, %class.NameDB*, %class.NameDB*, %class.NameInfo* }
  NonVirtualBaseLLVMType:%class.NameDB = type { i32 (...)**, i32, %class.String, i64, %class.NameDB*, %class.NameDB*, %class.NameDB*, %class.NameInfo* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3d45f20 <../dummy_inc/click/nameinfo.hh:352:5, line:355:5> line:352:12 referenced struct Entry definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562cb3d46038 <col:5, col:12> col:12 implicit struct Entry
|-FieldDecl 0x562cb3d460e0 <line:353:2, col:14> col:14 name 'const char *'
|-FieldDecl 0x562cb3d46140 <line:354:2, col:11> col:11 referenced value 'uint32_t':'unsigned int'
`-CXXDestructorDecl 0x562cb3df3bb8 <line:352:12> col:12 implicit referenced ~Entry 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StaticNameDB::Entry" = type { i8*, i32 }
  NonVirtualBaseLLVMType:%"struct.StaticNameDB::Entry" = type { i8*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3d45d08 <../dummy_inc/click/nameinfo.hh:350:1, line:401:1> line:350:7 referenced class StaticNameDB definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'NameDB'
|-CXXRecordDecl 0x562cb3d45e68 <col:1, col:7> col:7 implicit referenced class StaticNameDB
|-AccessSpecDecl 0x562cb3d45ef8 <col:38, col:44> col:38 public
|-CXXRecordDecl 0x562cb3d45f20 <line:352:5, line:355:5> line:352:12 referenced struct Entry definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562cb3d46038 <col:5, col:12> col:12 implicit struct Entry
| |-FieldDecl 0x562cb3d460e0 <line:353:2, col:14> col:14 name 'const char *'
| |-FieldDecl 0x562cb3d46140 <line:354:2, col:11> col:11 referenced value 'uint32_t':'unsigned int'
| `-CXXDestructorDecl 0x562cb3df3bb8 <line:352:12> col:12 implicit referenced ~Entry 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562cb3d464d8 <line:369:5, line:370:37> line:369:12 used StaticNameDB 'void (uint32_t, const String &, const StaticNameDB::Entry *, size_t)' inline
| |-ParmVarDecl 0x562cb3d461b8 <col:25, col:34> col:34 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562cb3d46230 <col:40, col:54> col:54 context 'const String &'
| |-ParmVarDecl 0x562cb3d462d8 <line:370:4, col:17> col:17 entry 'const StaticNameDB::Entry *'
| `-ParmVarDecl 0x562cb3d46350 <col:24, col:31> col:31 nentry 'size_t':'unsigned long'
|-CXXMethodDecl 0x562cb3d46748 <line:379:5, col:66> col:10 query 'bool (const String &, void *, size_t)'
| |-Overrides: [ 0x562cb3d44b18 NameDB::query 'bool (const String &, void *, size_t)' ]
| |-ParmVarDecl 0x562cb3d465b0 <col:16, col:30> col:30 name 'const String &'
| |-ParmVarDecl 0x562cb3d46630 <col:36, col:42> col:42 value 'void *'
| `-ParmVarDecl 0x562cb3d466a8 <col:49, col:56> col:56 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x562cb3d46928 <line:388:5, col:57> col:12 revquery 'String (const void *, size_t)'
| |-Overrides: [ 0x562cb3d44d78 NameDB::revquery 'String (const void *, size_t)' ]
| |-ParmVarDecl 0x562cb3d46818 <col:21, col:33> col:33 value 'const void *'
| `-ParmVarDecl 0x562cb3d46890 <col:40, col:47> col:47 value_size 'size_t':'unsigned long'
|-AccessSpecDecl 0x562cb3d469d8 <line:396:3, col:10> col:3 private
|-FieldDecl 0x562cb3d46a10 <line:398:5, col:18> col:18 _entries 'const StaticNameDB::Entry *'
|-FieldDecl 0x562cb3d46a70 <line:399:5, col:12> col:12 _nentries 'size_t':'unsigned long'
|-CXXConstructorDecl 0x562cb3d46ae8 <line:350:7> col:7 implicit StaticNameDB 'void (const StaticNameDB &)' inline default noexcept-unevaluated 0x562cb3d46ae8
| `-ParmVarDecl 0x562cb3d46bf8 <col:7> col:7 'const StaticNameDB &'
|-CXXConstructorDecl 0x562cb3d46c98 <col:7> col:7 implicit StaticNameDB 'void (StaticNameDB &&)' inline default noexcept-unevaluated 0x562cb3d46c98
| `-ParmVarDecl 0x562cb3d46da8 <col:7> col:7 'StaticNameDB &&'
|-CXXMethodDecl 0x562cb3d46e48 <col:7> col:7 implicit operator= 'StaticNameDB &(const StaticNameDB &)' inline default noexcept-unevaluated 0x562cb3d46e48
| `-ParmVarDecl 0x562cb3d46f58 <col:7> col:7 'const StaticNameDB &'
|-CXXMethodDecl 0x562cb3d46fc8 <col:7> col:7 implicit operator= 'StaticNameDB &(StaticNameDB &&)' inline default noexcept-unevaluated 0x562cb3d46fc8
| `-ParmVarDecl 0x562cb3d470d8 <col:7> col:7 'StaticNameDB &&'
`-CXXDestructorDecl 0x562cb3d47160 <col:7> col:7 implicit ~StaticNameDB 'void ()' inline default noexcept-unevaluated 0x562cb3d47160
  `-Overrides: [ 0x562cb3d44480 NameDB::~NameDB 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.StaticNameDB = type { %class.NameDB, %"struct.StaticNameDB::Entry"*, i64 }
  NonVirtualBaseLLVMType:%class.StaticNameDB = type { %class.NameDB, %"struct.StaticNameDB::Entry"*, i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3dc93b8 prev 0x562cb3dbd1f8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562cb3dc94b0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x562cb3dc9540 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x562cb3dc95b8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x562cb3dc9678 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x562cb3dc9740 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x562cb3dc98b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x562cb3dc97f0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x562cb3dc9960 <col:24>
| `-OptimizeNoneAttr 0x562cb3dc99b8 <col:34>
|-CXXMethodDecl 0x562cb3dc9a00 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x562cb3dc9cb8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x562cb3dc9ab0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x562cb3dc9b28 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x562cb3dc9ba8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x562cb3dc9d70 <line:229:7, col:14> col:7 private
|-FieldDecl 0x562cb3dc9da8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x562cb3dc9e10 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x562cb3dc9e98 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x562cb3dca1b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x562cb3dc9f50 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x562cb3dc9fc8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x562cb3dca040 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x562cb3dca0c0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x562cb3dca2d0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x562cb3dd0be8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562cb3dd0be8
| `-ParmVarDecl 0x562cb3dd0cf8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x562cb3dd0d98 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562cb3dd0d98
| `-ParmVarDecl 0x562cb3dd0ea8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x562cb3dd7068 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3db8c40 prev 0x562cb3db89e0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562cb3db8d38 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x562cb3db8dc8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x562cb3db8e28 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x562cb3db8f18 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x562cb3db9018 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x562cb3db91e8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x562cb3db9098 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x562cb3db9110 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x562cb3db9378 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x562cb3db92b0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x562cb3db9420 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x562cb3db9558 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x562cb3db9490 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x562cb3db96f8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x562cb3db9638 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x562cb3db9898 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x562cb3db97d8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x562cb3db9940 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x562cb3db9a40 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x562cb3db9b20 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3db9a20 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x562cb3db9a00 <col:26> 'int' 1
| `-EnumConstantDecl 0x562cb3db9ad0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x562cb3db9b38 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3db9ab0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x562cb3db9a90 <col:44> 'int' 2
|-CXXMethodDecl 0x562cb3db9c80 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x562cb3db9b68 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x562cb3db9be8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x562cb3db9dd8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x562cb3db9d48 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x562cb3db9fe8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x562cb3db9e98 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x562cb3db9f10 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x562cb3dba098 <col:20>
| `-OptimizeNoneAttr 0x562cb3dba0f0 <col:30>
|-CXXMethodDecl 0x562cb3dba1f8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x562cb3dba130 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x562cb3dba2a0 <col:20>
| `-OptimizeNoneAttr 0x562cb3dba2f8 <col:30>
|-CXXMethodDecl 0x562cb3dba348 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x562cb3dba410 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x562cb3dba4f8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x562cb3dba580 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x562cb3dba608 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x562cb3dba690 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x562cb3dba718 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x562cb3dba7a8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x562cb3dba868 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x562cb3dba8f0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x562cb3dba978 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x562cb3dbaa00 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x562cb3dbaa88 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x562cb3dbab10 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x562cb3dbaba0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x562cb3dbac60 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x562cb3dbacf0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x562cb3dbae40 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x562cb3dbada8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x562cb3dbafd0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x562cb3dbaf00 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x562cb3dbb270 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x562cb3dbb088 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x562cb3dbb108 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x562cb3dbb188 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x562cb3dbb328 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x562cb3dbb430 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562cb3dbb6c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dbb410 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x562cb3dbb3f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x562cb3dbb4c0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562cb3dbb6d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dbb4a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x562cb3dbb480 <col:32> 'int' 20
| |-EnumConstantDecl 0x562cb3dbb550 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562cb3dbb6f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dbb530 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x562cb3dbb510 <col:38> 'int' 90
| |-EnumConstantDecl 0x562cb3dbb5e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562cb3dbb708 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dbb5c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x562cb3dbb5a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x562cb3dbb670 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x562cb3dbb720 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3dbb650 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x562cb3dbb630 <col:32> 'int' 2000
|-CXXMethodDecl 0x562cb3dbb760 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x562cb3dbba70 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562cb3dbb8e0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x562cb3dbb958 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dbbb40 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x562cb3dbbcc0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x562cb3dbbbf0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dbbec8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562cb3dbbd78 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x562cb3dbbdf0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dbbfc8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x562cb3dbc068 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x562cb3dbc130 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x562cb3dbc1c0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x562cb3dbc3f0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dbc1a0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x562cb3dbc180 <col:36> 'int' EnumConstant 0x562cb3dbc130 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x562cb3dbc210 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562cb3dbc260 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562cb3dbc2b0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562cb3dbc300 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562cb3dbc350 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x562cb3dbc3a0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x562cb3dbc4d8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x562cb3dbc418 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x562cb3dbc5a0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x562cb3dbc660 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x562cb3dbc720 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x562cb3dbc7e0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x562cb3dbc8c8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x562cb3dbc990 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x562cb3dbcb10 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x562cb3dbca40 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x562cb3dbcc38 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x562cb3dbce38 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x562cb3dbcce8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x562cb3dbcd68 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x562cb3dcd0b8 <col:54, line:127:5>
|   |-ParenExpr 0x562cb3dccf68 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x562cb3dccf38 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x562cb3dccc20 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x562cb3dccbf8 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x562cb3dccbe0 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x562cb3dccbc8 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x562cb3dccb98 <col:31> 'Router *' lvalue ->_router 0x562cb3dcaab0
|   |   |         `-CXXThisExpr 0x562cb3dccb88 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x562cb3dccc80 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562cb3dccc60 <col:48> 'int' 0
|   |   `-CallExpr 0x562cb3dcce98 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x562cb3dcce80 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562cb3dcce60 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562cb37ea380 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562cb3dcced8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562cb3dcccf0 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x562cb3dccef0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562cb3dccd10 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x562cb3dccf08 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562cb3dccd48 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x562cb3dccf20 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562cb3dcce48 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562cb3dcce30 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562cb3dccde8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x562cb3dcd000 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x562cb3dccf98 <col:9> 'Router *' lvalue ->_router 0x562cb3dcaab0
|   | | `-CXXThisExpr 0x562cb3dccf88 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x562cb3dccfe8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x562cb3dccfc8 <col:19> 'Router *' lvalue ParmVar 0x562cb3dbcce8 'r' 'Router *'
|   `-BinaryOperator 0x562cb3dcd098 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x562cb3dcd030 <col:9> 'int' lvalue ->_eindex 0x562cb3dcab18
|     | `-CXXThisExpr 0x562cb3dcd020 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x562cb3dcd080 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x562cb3dcd060 <col:19> 'int' lvalue ParmVar 0x562cb3dbcd68 'eindex' 'int'
|-CXXMethodDecl 0x562cb3dbcfc0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x562cb3dbcef8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x562cb3dbd090 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x562cb3dbd158 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x562cb3dbd1f8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x562cb3dbd448 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x562cb3dbd2c0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x562cb3dbd340 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x562cb3dbd4f8 <col:20>
| `-OptimizeNoneAttr 0x562cb3dbd550 <col:30>
|-CXXMethodDecl 0x562cb3dbd658 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x562cb3dbd590 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x562cb3dbd700 <col:20>
| `-OptimizeNoneAttr 0x562cb3dbd758 <col:30>
|-CXXMethodDecl 0x562cb3dbd828 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x562cb3dbd798 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x562cb3dbd8d0 <col:20>
| `-OptimizeNoneAttr 0x562cb3dbd928 <col:30>
|-CXXMethodDecl 0x562cb3dbdab8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x562cb3dbd960 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x562cb3dbd9e0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x562cb3dbdc48 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x562cb3dbdb80 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x562cb3dbdd98 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562cb3dbdd08 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x562cb3dbdee8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x562cb3dbde58 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562cb3dbe038 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562cb3dbdfa8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562cb3dbe2f8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x562cb3dbe0f0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x562cb3dbe170 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x562cb3dbe218 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x562cb3dbe3d0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x562cb3dbe490 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x562cb3dbe760 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562cb3dbe610 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x562cb3dbe688 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dbe888 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x562cb3dbea60 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x562cb3dbe940 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x562cb3dbe9c0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x562cb3dbec48 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x562cb3dbeb28 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x562cb3dbeba8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x562cb3dc2a18 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x562cb3dbed08 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562cb3dc27e0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562cb3dc2860 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562cb3dcc698 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562cb3dcc678 <col:106> 'int' 0
| `-ParmVarDecl 0x562cb3dc28d8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562cb3dcc6d0 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562cb3dcc6b0 <col:126> 'int' 0
|-CXXMethodDecl 0x562cb3dc2d98 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562cb3dc2ae8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562cb3dc2b60 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562cb3dc2be0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x562cb3dc2c58 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562cb3dcc708 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562cb3dcc6e8 <col:114> 'int' 0
|-CXXMethodDecl 0x562cb3dc3128 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562cb3dc2e70 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x562cb3dc2ee8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562cb3dc2f68 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x562cb3dcc720 <col:96> 'int' 0
| `-ParmVarDecl 0x562cb3dc2fe0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562cb3dcc760 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562cb3dcc740 <col:116> 'int' 0
|-CXXMethodDecl 0x562cb3dc34a8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x562cb3dc31f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x562cb3dc3270 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562cb3dc32f0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562cb3dcc798 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562cb3dcc778 <col:109> 'int' 0
| `-ParmVarDecl 0x562cb3dc3368 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562cb3dcc7d0 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562cb3dcc7b0 <col:129> 'int' 0
|-CXXMethodDecl 0x562cb3dc3828 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562cb3dc3578 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x562cb3dc35f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562cb3dc3670 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x562cb3dc36e8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562cb3dcc808 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562cb3dcc7e8 <col:117> 'int' 0
|-CXXMethodDecl 0x562cb3dc3bb8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562cb3dc3900 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc3978 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562cb3dc39f8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x562cb3dcc820 <col:99> 'int' 0
| `-ParmVarDecl 0x562cb3dc3a70 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562cb3dcc860 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562cb3dcc840 <col:119> 'int' 0
|-CXXMethodDecl 0x562cb3dc3fd8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x562cb3dc3c88 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562cb3dc3d08 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562cb3dc3d80 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562cb3dc3e00 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562cb3dcc898 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562cb3dcc878 <col:108> 'int' 0
| `-ParmVarDecl 0x562cb3dc3e80 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x562cb3dcc8d0 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x562cb3dcc8b0 <col:141> 'int' 0
|-CXXMethodDecl 0x562cb3dc43f8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x562cb3dc40b0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562cb3dc4130 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562cb3dc41a8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562cb3dc4228 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x562cb3dc42a8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x562cb3dcc8e8 <col:121> 'int' 0
|-CXXMethodDecl 0x562cb3dc4828 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x562cb3dc44d8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x562cb3dc4558 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x562cb3dc45d0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562cb3dc4650 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x562cb3dcc908 <col:98> 'int' 0
| `-ParmVarDecl 0x562cb3dc46d0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x562cb3dcc928 <col:123> 'int' 0
|-CXXMethodDecl 0x562cb3dc4af0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x562cb3dc4900 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562cb3dc4980 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x562cb3dc4a00 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x562cb3dcc948 <col:80> 'int' 0
|-EnumDecl 0x562cb3dc4ba8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x562cb3dc4cb0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562cb3dc4f40 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dc4c90 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x562cb3dc4c70 <col:42> 'int' 1
| |-EnumConstantDecl 0x562cb3dc4d40 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562cb3dc4f58 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dc4d20 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x562cb3dc4d00 <col:40> 'int' 2
| |-EnumConstantDecl 0x562cb3dc4dd0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562cb3dc4f70 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dc4db0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x562cb3dc4d90 <col:44> 'int' 4
| |-EnumConstantDecl 0x562cb3dc4e60 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562cb3dc4f88 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3dc4e40 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x562cb3dc4e20 <col:36> 'int' 7
| `-EnumConstantDecl 0x562cb3dc4ef0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x562cb3dc4fa0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3dc4ed0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x562cb3dc4eb0 <col:34> 'int' 6
|-CXXMethodDecl 0x562cb3dc5258 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x562cb3dc4fc8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x562cb3dc5068 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x562cb3dc50e8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x562cb3dc5160 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x562cb3dcca00 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x562cb3dcc9e8 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x562cb3dcc9d0 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x562cb3dcc9b0 <col:98, col:105> 'String' (CXXTemporary 0x562cb3dcc9b0)
|           `-CXXTemporaryObjectExpr 0x562cb3dcc978 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x562cb3dc54f8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x562cb3dc5328 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562cb3dc53a0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x562cb3dc5418 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x562cb3dccab0 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x562cb3dcca98 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x562cb3dcca80 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x562cb3dcca60 <col:94, col:101> 'String' (CXXTemporary 0x562cb3dcca60)
| |         `-CXXTemporaryObjectExpr 0x562cb3dcca28 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x562cb3dcd2a0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x562cb3dcd218 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x562cb3dcd1e8 <col:9> '<bound member function type>' ->add_task_handlers 0x562cb3dc5258
|     | `-CXXThisExpr 0x562cb3dcd1d8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562cb3dcd258 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562cb3dcd158 <col:27> 'Task *' lvalue ParmVar 0x562cb3dc5328 'task' 'Task *'
|     |-ImplicitCastExpr 0x562cb3dcd270 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x562cb3dcd178 <col:33> 'NotifierSignal *' lvalue ParmVar 0x562cb3dc53a0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x562cb3dcd288 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562cb3dcd198 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562cb3dc4ef0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x562cb3dcd1b8 <col:62> 'const String' lvalue ParmVar 0x562cb3dc5418 'prefix' 'const String &'
|-CXXMethodDecl 0x562cb3dc5708 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x562cb3dc55c0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562cb3dc5638 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x562cb3dccb60 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x562cb3dccb48 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x562cb3dccb30 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x562cb3dccb10 <col:70, col:77> 'String' (CXXTemporary 0x562cb3dccb10)
| |         `-CXXTemporaryObjectExpr 0x562cb3dccad8 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x562cb3dcd478 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x562cb3dcd3f0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x562cb3dcd3c0 <col:9> '<bound member function type>' ->add_task_handlers 0x562cb3dc5258
|     | `-CXXThisExpr 0x562cb3dcd3b0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562cb3dcd430 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562cb3dcd330 <col:27> 'Task *' lvalue ParmVar 0x562cb3dc55c0 'task' 'Task *'
|     |-ImplicitCastExpr 0x562cb3dcd448 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x562cb3dcd350 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x562cb3dcd460 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562cb3dcd370 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562cb3dc4ef0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x562cb3dcd390 <col:57> 'const String' lvalue ParmVar 0x562cb3dc5638 'prefix' 'const String &'
|-CXXMethodDecl 0x562cb3dc59e8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x562cb3dc57d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc5850 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc58c8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x562cb3dc5c98 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x562cb3dc5ab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc5b38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc5bb8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x562cb3dc5f88 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x562cb3dc5d68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc5de8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc5e60 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x562cb3dc6238 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x562cb3dc6058 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc60d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc6158 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x562cb3dc64e8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x562cb3dc6308 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc6388 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc6408 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x562cb3dc6798 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x562cb3dc65b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc6638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc66b0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x562cb3dc6a48 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x562cb3dc6868 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc68e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc6968 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x562cb3dc6cf8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x562cb3dc6b18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc6b98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc6c18 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x562cb3dc6fa8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x562cb3dc6dc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc6e48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc6ec8 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x562cb3dc7258 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x562cb3dc7078 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc70f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc7178 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x562cb3dc74c0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x562cb3dc7328 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x562cb3dc73a8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x562cb3dc7420 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x562cb3dc7768 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x562cb3dc7590 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x562cb3dc7610 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x562cb3dc7688 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x562cb3dc7a18 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x562cb3dc7838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc78b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc7938 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x562cb3dc7cc8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x562cb3dc7ae8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc7b68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc7be0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x562cb3dc7f78 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x562cb3dc7d98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc7e18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc7e90 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x562cb3dc8228 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x562cb3dc8048 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc80c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562cb3dc8140 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x562cb3dc8558 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x562cb3dc82f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562cb3dc8378 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x562cb3dc83f0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x562cb3dc8468 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562cb3dccb78 <col:93> 'bool' false
|-CXXMethodDecl 0x562cb3dc8740 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562cb3dc8628 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x562cb3dc86a8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x562cb3dc8918 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562cb3dc8800 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x562cb3dc8880 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x562cb3dc8bf8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x562cb3dc89d8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x562cb3dc8a50 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x562cb3dc8ad0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x562cb3dc8b48 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dc8ee8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x562cb3dc8cc8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x562cb3dc8d40 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x562cb3dc8dc0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x562cb3dc8e38 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dc9120 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x562cb3dc8fc0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x562cb3dc9040 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x562cb3dc9308 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x562cb3dc91e8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x562cb3dc9268 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x562cb3dc93b8 prev 0x562cb3dbd1f8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562cb3dc94b0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x562cb3dc9540 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x562cb3dc95b8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x562cb3dc9678 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x562cb3dc9740 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x562cb3dc98b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x562cb3dc97f0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x562cb3dc9960 <col:24>
| | `-OptimizeNoneAttr 0x562cb3dc99b8 <col:34>
| |-CXXMethodDecl 0x562cb3dc9a00 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x562cb3dc9cb8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x562cb3dc9ab0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x562cb3dc9b28 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x562cb3dc9ba8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x562cb3dc9d70 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x562cb3dc9da8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x562cb3dc9e10 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x562cb3dc9e98 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x562cb3dca1b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x562cb3dc9f50 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x562cb3dc9fc8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x562cb3dca040 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x562cb3dca0c0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x562cb3dca2d0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x562cb3dd0be8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562cb3dd0be8
| | `-ParmVarDecl 0x562cb3dd0cf8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x562cb3dd0d98 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562cb3dd0d98
| | `-ParmVarDecl 0x562cb3dd0ea8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x562cb3dd7068 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x562cb3dca348 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x562cb3dca3e8 <col:38> "" ""
|-CXXMethodDecl 0x562cb3dca478 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x562cb3dca518 <col:44> "" ""
|-AccessSpecDecl 0x562cb3dca588 <line:260:3, col:10> col:3 private
|-EnumDecl 0x562cb3dca5b0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x562cb3dca6b0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x562cb3dca700 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3dca690 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x562cb3dca670 <col:27> 'int' 4
|-FieldDecl 0x562cb3dca7f0 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x562cb3dca998 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x562cb3dcaa50 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x562cb3dcaab0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x562cb3dcab18 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x562cb3dcac68 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x562cb3dcaba8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x562cb3dcae18 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x562cb3dcad28 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x562cb3dcaff8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x562cb3dcaed8 <col:20> col:23 'int'
| `-ParmVarDecl 0x562cb3dcaf58 <col:25> col:28 'int'
|-CXXMethodDecl 0x562cb3dcb2a0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x562cb3dcb0c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x562cb3dcb140 <col:28> col:31 'int'
| `-ParmVarDecl 0x562cb3dcb1b8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x562cb3dcb358 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x562cb3dcb420 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x562cb3dcb470 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x562cb3dcb4c0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x562cb3dcb6a0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x562cb3dcb550 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x562cb3dcb5c8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dcb948 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x562cb3dcb768 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x562cb3dcb7e8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x562cb3dcb860 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dcbb68 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x562cb3dcba18 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x562cb3dcba98 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x562cb3dcbea0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x562cb3dcbc28 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x562cb3dcbca8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x562cb3dcbd20 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x562cb3dcbda0 <col:57> col:60 'int'
|-CXXMethodDecl 0x562cb3dcc088 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562cb3dcbf70 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x562cb3dcbff0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x562cb3dcc1d8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x562cb3dcc148 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x562cb3dcc558 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x562cb3dcc298 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x562cb3dcc318 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x562cb3dcc390 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x562cb3dcc410 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x562cb3dcc638 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct __va_list_tag
         0 |   unsigned int gp_offset
         4 |   unsigned int fp_offset
         8 |   void * overflow_arg_area
        16 |   void * reg_save_area
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb374e238 <<invalid sloc>> <invalid sloc> implicit struct __va_list_tag definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-TypeVisibilityAttr 0x562cb374e2f0 <<invalid sloc>> Implicit Default
|-FieldDecl 0x562cb374e3b0 <<invalid sloc>> <invalid sloc> gp_offset 'unsigned int'
|-FieldDecl 0x562cb374e400 <<invalid sloc>> <invalid sloc> fp_offset 'unsigned int'
|-FieldDecl 0x562cb378ec40 <<invalid sloc>> <invalid sloc> overflow_arg_area 'void *'
|-FieldDecl 0x562cb378ec90 <<invalid sloc>> <invalid sloc> reg_save_area 'void *'
|-CXXConstructorDecl 0x562cb3e0a1d8 <<invalid sloc>> <invalid sloc> implicit used __va_list_tag 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562cb3e0a608 <<invalid sloc>>
|-CXXConstructorDecl 0x562cb3e0a2d8 <<invalid sloc>> <invalid sloc> implicit constexpr __va_list_tag 'void (const __va_list_tag &)' inline default trivial noexcept-unevaluated 0x562cb3e0a2d8
| `-ParmVarDecl 0x562cb3e0a3e8 <<invalid sloc>> <invalid sloc> 'const __va_list_tag &'
|-CXXConstructorDecl 0x562cb3e0a488 <<invalid sloc>> <invalid sloc> implicit constexpr __va_list_tag 'void (__va_list_tag &&)' inline default trivial noexcept-unevaluated 0x562cb3e0a488
| `-ParmVarDecl 0x562cb3e0a598 <<invalid sloc>> <invalid sloc> '__va_list_tag &&'
`-CXXDestructorDecl 0x562cb3e0a658 <<invalid sloc>> <invalid sloc> implicit referenced ~__va_list_tag 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.__va_list_tag = type { i32, i32, i8*, i8* }
  NonVirtualBaseLLVMType:%struct.__va_list_tag = type { i32, i32, i8*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3dd8600 prev 0x562cb3db8a70 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562cb3dd86f8 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x562cb3dd8788 <col:22, col:28> col:22 public
|-EnumDecl 0x562cb3dd87b0 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x562cb3dd88c8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x562cb3dd88a8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x562cb3dd8890 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562cb3dd8870 <col:14> 'int' 999
| |-EnumConstantDecl 0x562cb3dd8970 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x562cb3dd8950 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x562cb3dd8938 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562cb3dd8918 <col:14> 'int' 1
| |-EnumConstantDecl 0x562cb3dd8a00 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x562cb3dd89e0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x562cb3dd89c0 <col:17> 'int' 0
| |-EnumConstantDecl 0x562cb3dd8a90 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x562cb3dd8a70 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x562cb3dd8a50 <col:13> 'int' 1
| |-EnumConstantDecl 0x562cb3dd8b20 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x562cb3dd8b00 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x562cb3dd8ae0 <col:16> 'int' 2
| |-EnumConstantDecl 0x562cb3dd8bb0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x562cb3dd8b90 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x562cb3dd8b70 <col:13> 'int' 3
| |-EnumConstantDecl 0x562cb3dd8c40 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x562cb3dd8c20 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x562cb3dd8c00 <col:15> 'int' 4
| |-EnumConstantDecl 0x562cb3dd8cd0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x562cb3dd8cb0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x562cb3dd8c90 <col:14> 'int' 5
| |-EnumConstantDecl 0x562cb3dd8d60 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x562cb3dd8d40 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x562cb3dd8d20 <col:12> 'int' 6
| `-EnumConstantDecl 0x562cb3dd8df0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x562cb3dd8dd0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x562cb3dd8db0 <col:13> 'int' 7
|-VarDecl 0x562cb3dd8e60 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x562cb3dd8ee8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x562cb3dd8f70 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x562cb3dd8ff8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x562cb3dd9080 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x562cb3dd9108 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x562cb3dd9190 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x562cb3dd9218 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x562cb3dd92a0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x562cb3dd9328 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x562cb3dd93b0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x562cb3dd94b0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x562cb3de0c18 '_nerrors' 'int'
| | `-IntegerLiteral 0x562cb3de13a8 <line:128:13> 'int' 0
| `-CompoundStmt 0x562cb3de1418 <col:16, line:129:5>
|-CXXDestructorDecl 0x562cb3dd95a0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x562cb3de1428 <col:29, line:132:5>
|-CXXMethodDecl 0x562cb3dd9758 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x562cb3dd9690 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dd9820 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x562cb3dd9908 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562cb3de1480 <col:44, line:161:5>
|   `-ReturnStmt 0x562cb3de1470 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x562cb3de1458 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562cb3de1438 <col:9> 'ErrorHandler *' lvalue Var 0x562cb3de0c78 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dd9a48 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x562cb3dd99b8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562cb3dd9b10 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562cb3de14e0 <col:43, line:173:5>
|   `-ReturnStmt 0x562cb3de14d0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x562cb3de14b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562cb3de1498 <col:9> 'ErrorHandler *' lvalue Var 0x562cb3de0cf0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x562cb3dd9bc8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x562cb3dd9c48 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x562cb3dd9d58 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x562cb3dd9cc8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x562cb3dd9ea8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x562cb3dd9e18 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562cb3dda000 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x562cb3dd9f68 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x562cb3dda158 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x562cb3dda0c0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562cb3dda2b0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x562cb3dda218 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562cb3dda4c0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562cb3dda368 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x562cb3dda3e8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x562cb3dda698 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562cb3dda580 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x562cb3dda600 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x562cb3ddcd38 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562cb3dda758 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x562cb3ddcc50 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x562cb3ddcf18 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562cb3ddcdf8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562cb3ddce78 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562cb3ddd0f8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562cb3ddcfd8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562cb3ddd058 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562cb3ddd280 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x562cb3ddd1b8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x562cb3ddd450 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x562cb3ddd338 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562cb3ddd3b0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x562cb3de1738 <col:57, line:234:5>
|   `-ReturnStmt 0x562cb3de1728 <line:233:2, col:41>
|     `-ExprWithCleanups 0x562cb3de1710 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562cb3de16b8 <col:9, col:41> 'int'
|         |-MemberExpr 0x562cb3de1688 <col:9> '<bound member function type>' ->xmessage 0x562cb3ddd280
|         | `-CXXThisExpr 0x562cb3de1678 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x562cb3de16f8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562cb3de16e0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562cb3de1658 <col:18, col:40> 'String' (CXXTemporary 0x562cb3de1658)
|               `-CallExpr 0x562cb3de1620 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x562cb3de1608 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x562cb3de1580 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562cb3ddf448 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x562cb3de15a0 <col:31> 'const String' lvalue ParmVar 0x562cb3ddd3b0 'str' 'const String &'
|                 `-DeclRefExpr 0x562cb3de15c0 <col:36> 'const String' lvalue ParmVar 0x562cb3ddd338 'anno' 'const String &'
|-CXXMethodDecl 0x562cb3ddd730 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562cb3ddd510 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562cb3ddd590 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x562cb3ddd608 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562cb3de19c8 <col:68, line:243:5>
|   `-ReturnStmt 0x562cb3de19b8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x562cb3de19a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562cb3de1940 <col:9, col:41> 'int'
|         |-MemberExpr 0x562cb3de1910 <col:9> '<bound member function type>' ->xmessage 0x562cb3ddd450
|         | `-CXXThisExpr 0x562cb3de1900 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562cb3de17d8 <col:18> 'const String' lvalue ParmVar 0x562cb3ddd510 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562cb3de1988 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562cb3de1970 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562cb3de18e0 <col:24, col:40> 'String' (CXXTemporary 0x562cb3de18e0)
|               `-CXXMemberCallExpr 0x562cb3de1878 <col:24, col:40> 'String'
|                 |-MemberExpr 0x562cb3de1808 <col:24> '<bound member function type>' ->vformat 0x562cb3dde910
|                 | `-CXXThisExpr 0x562cb3de17f8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562cb3de18a8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562cb3de1838 <col:32> 'const char *' lvalue ParmVar 0x562cb3ddd590 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562cb3de18c0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562cb3de1858 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562cb3ddd608 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562cb3ddd9d0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x562cb3ddd7f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562cb3ddd870 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562cb3ddd8e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x562cb3de1d08 <col:23, line:254:5>
|   `-ReturnStmt 0x562cb3de1cf8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x562cb3de1ce0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x562cb3de1c80 <col:9, col:71> 'int'
|         |-MemberExpr 0x562cb3de1c50 <col:9> '<bound member function type>' ->xmessage 0x562cb3ddd450
|         | `-CXXThisExpr 0x562cb3de1c40 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x562cb3de1cc8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x562cb3de1cb0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x562cb3de1c00 <col:18, col:65> 'String' (CXXTemporary 0x562cb3de1c00)
|         |     `-CallExpr 0x562cb3de1b98 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x562cb3de1b80 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x562cb3de1a68 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562cb3ddf448 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x562cb3de1a88 <col:31> 'const String' lvalue ParmVar 0x562cb3ddd870 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x562cb3de1be0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x562cb3de1bc8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x562cb3de1b60 <col:37, col:64> 'String' (CXXTemporary 0x562cb3de1b60)
|         |             `-CallExpr 0x562cb3de1b30 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x562cb3de1b18 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x562cb3de1aa8 <col:37> 'String (const String &)' lvalue CXXMethod 0x562cb3ddfa98 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x562cb3de1ac8 <col:56> 'const String' lvalue ParmVar 0x562cb3ddd7f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x562cb3de1c20 <col:68> 'const String' lvalue ParmVar 0x562cb3ddd8e8 'str' 'const String &'
|-CXXMethodDecl 0x562cb3dddd50 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562cb3ddda98 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562cb3dddb10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562cb3dddb90 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x562cb3dddc08 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562cb3de1fc0 <col:34, line:267:5>
|   `-ReturnStmt 0x562cb3de1fb0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x562cb3de1f98 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x562cb3de1f30 <col:9, col:51> 'int'
|         |-MemberExpr 0x562cb3de1f00 <col:9> '<bound member function type>' ->xmessage 0x562cb3ddd9d0
|         | `-CXXThisExpr 0x562cb3de1ef0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562cb3de1da8 <col:18> 'const String' lvalue ParmVar 0x562cb3ddda98 'landmark' 'const String &'
|         |-DeclRefExpr 0x562cb3de1dc8 <col:28> 'const String' lvalue ParmVar 0x562cb3dddb10 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562cb3de1f80 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x562cb3de1f68 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562cb3de1ed0 <col:34, col:50> 'String' (CXXTemporary 0x562cb3de1ed0)
|               `-CXXMemberCallExpr 0x562cb3de1e68 <col:34, col:50> 'String'
|                 |-MemberExpr 0x562cb3de1df8 <col:34> '<bound member function type>' ->vformat 0x562cb3dde910
|                 | `-CXXThisExpr 0x562cb3de1de8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562cb3de1e98 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562cb3de1e28 <col:42> 'const char *' lvalue ParmVar 0x562cb3dddb90 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562cb3de1eb0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562cb3de1e48 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562cb3dddc08 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562cb3ddde60 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x562cb3de2040 <col:25, line:288:5>
|   `-ReturnStmt 0x562cb3de2030 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x562cb3de2018 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x562cb3de1fe8 <col:9> 'const int' lvalue ->_nerrors 0x562cb3de0c18
|         `-CXXThisExpr 0x562cb3de1fd8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x562cb3dde070 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x562cb3dddf18 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x562cb3dddf98 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x562cb3dde358 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562cb3dde138 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x562cb3dde1b8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x562cb3dde230 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562cb3dde4f0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x562cb3dde428 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x562cb3dde738 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562cb3dde5b0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x562cb3dde628 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562cb3de22a0 <col:58, line:357:5>
|   `-ReturnStmt 0x562cb3de2290 <line:356:2, col:29>
|     `-ExprWithCleanups 0x562cb3de2278 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x562cb3de2248 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x562cb3de2230 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x562cb3de2210 <col:9, col:29> 'String' (CXXTemporary 0x562cb3de2210)
|             `-CallExpr 0x562cb3de21a0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x562cb3de2188 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x562cb3de2108 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x562cb3dde358 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x562cb3de20a8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x562cb3de21d8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x562cb3de20c8 <col:21> 'const char *' lvalue ParmVar 0x562cb3dde5b0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x562cb3de21f0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x562cb3de20e8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562cb3dde628 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562cb3dde910 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x562cb3dde800 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x562cb3dde878 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562cb3ddea68 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x562cb3dde9d8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x562cb3ddebb0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x562cb3ddeb20 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x562cb3ddee50 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x562cb3ddec68 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x562cb3ddece8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x562cb3dded60 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x562cb3ddefb0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x562cb3ddef20 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x562cb3de23b8 <col:37, line:441:5>
|   `-IfStmt 0x562cb3de23a0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x562cb3de2328 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x562cb3de22f8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x562cb3de22b8 <col:6> 'int' lvalue ParmVar 0x562cb3ddef20 'level' 'int'
|     | `-ImplicitCastExpr 0x562cb3de2310 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x562cb3de22d8 <col:15> 'ErrorHandler::Level' EnumConstant 0x562cb3dd8bb0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x562cb3de2388 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x562cb3de2358 <col:8> 'int' lvalue ->_nerrors 0x562cb3de0c18
|         `-CXXThisExpr 0x562cb3de2348 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x562cb3ddf078 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x562cb3de2450 <col:26, line:448:5>
|   `-BinaryOperator 0x562cb3de2430 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x562cb3de23e0 <col:2> 'int' lvalue ->_nerrors 0x562cb3de0c18
|     | `-CXXThisExpr 0x562cb3de23d0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x562cb3de2410 <col:13> 'int' 0
|-CXXMethodDecl 0x562cb3ddf240 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x562cb3ddf130 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x562cb3ddf1a8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x562cb3ddf448 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x562cb3ddf300 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x562cb3ddf378 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x562cb3ddf6f8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x562cb3ddf508 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x562cb3ddf588 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x562cb3ddf608 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x562cb3ddf7b0 <col:59> 0 0
|-CXXMethodDecl 0x562cb3ddf948 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x562cb3ddf828 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x562cb3ddf8a8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x562cb3de2ac0 <col:70, line:534:5>
|   |-DeclStmt 0x562cb3de25c0 <line:528:2, col:20>
|   | |-VarDecl 0x562cb3de2478 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x562cb3de24e0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x562cb3de2518 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x562cb3de2580 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x562cb3de2690 <line:529:2, col:23>
|   | `-VarDecl 0x562cb3de25f0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x562cb3de2678 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x562cb3de2658 <col:18> 'const char *' lvalue ParmVar 0x562cb3ddf828 'begin' 'const char *'
|   |-DoStmt 0x562cb3de2a58 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x562cb3de2988 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x562cb3de2970 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x562cb3de2950 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x562cb3de26a8 <col:6> 'const char *' lvalue Var 0x562cb3de25f0 'x' 'const char *'
|   | |     `-CallExpr 0x562cb3de28a0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x562cb3de2888 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x562cb3de2840 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x562cb3de10f0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x562cb3de2908 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x562cb3de28f0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x562cb3de2760 <col:20, col:27> 'String' (CXXTemporary 0x562cb3de2760)
|   | |       |     `-CXXTemporaryObjectExpr 0x562cb3de2728 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x562cb3de2920 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562cb3de2780 <col:30> 'const char *' lvalue Var 0x562cb3de25f0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x562cb3de2938 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562cb3de27a0 <col:33> 'const char *' lvalue ParmVar 0x562cb3ddf8a8 'end' 'const char *'
|   | |       |-UnaryOperator 0x562cb3de27e0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562cb3de27c0 <col:39> 'String' lvalue Var 0x562cb3de2478 'name' 'String'
|   | |       |-UnaryOperator 0x562cb3de2818 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562cb3de27f8 <col:46> 'String' lvalue Var 0x562cb3de2518 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x562cb3de2830 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x562cb3de2a40 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x562cb3de2a28 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x562cb3de2a08 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x562cb3de29d8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x562cb3a7e6a8
|   |         `-ImplicitCastExpr 0x562cb3de29c0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x562cb3de29a0 <col:11> 'String' lvalue Var 0x562cb3de2478 'name' 'String'
|   `-ReturnStmt 0x562cb3de2ab0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x562cb3de2a98 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x562cb3de2a78 <col:9> 'const char *' lvalue Var 0x562cb3de25f0 'x' 'const char *'
|-CXXMethodDecl 0x562cb3ddfa98 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x562cb3ddfa08 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x562cb3de30c8 <col:55, line:550:5>
|   `-IfStmt 0x562cb3de30a0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x562cb3de2d00 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x562cb3de2ce8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562cb3de2cd0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562cb3de2cb0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562cb3de2c80 <col:6> '<bound member function type>' .operator int (String::*)() const 0x562cb3a7e6a8
|     | |       `-DeclRefExpr 0x562cb3de2b20 <col:6> 'const String' lvalue ParmVar 0x562cb3ddfa08 'x' 'const String &'
|     | `-BinaryOperator 0x562cb3de2c60 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x562cb3de2c30 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x562cb3de2be0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x562cb3de2bc8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x562cb3de2b80 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x562cb3a97d40 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x562cb3de2b40 <col:11> 'const String' lvalue ParmVar 0x562cb3ddfa08 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x562cb3de2b60 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x562cb3de2c48 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x562cb3de2c18 <col:19> 'char' 123
|     |-ReturnStmt 0x562cb3de2d70 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x562cb3de2d40 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x562cb3de2d20 <col:13> 'const String' lvalue ParmVar 0x562cb3ddfa08 'x' 'const String &'
|     `-IfStmt 0x562cb3de3078 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x562cb3de2e08 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562cb3de2df0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562cb3de2dd0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562cb3de2da0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x562cb3a7e6a8
|       |       `-DeclRefExpr 0x562cb3de2d80 <col:11> 'const String' lvalue ParmVar 0x562cb3ddfa08 'x' 'const String &'
|       |-ReturnStmt 0x562cb3de2f90 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x562cb3de2f78 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x562cb3de2f48 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x562cb3de2f30 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x562cb3de2f10 <col:13, col:29> 'String' (CXXTemporary 0x562cb3de2f10)
|       |         `-CallExpr 0x562cb3de2ec0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x562cb3de2ea8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x562cb3de2e20 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x562cb3ddf240 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x562cb3de2ef0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x562cb3de2e40 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x562cb3de2e60 <col:28> 'const String' lvalue ParmVar 0x562cb3ddfa08 'x' 'const String &'
|       `-ReturnStmt 0x562cb3de3068 <line:549:6, col:20>
|         `-ExprWithCleanups 0x562cb3de3050 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x562cb3de3020 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x562cb3de3008 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x562cb3de2fe8 <col:13, col:20> 'String' (CXXTemporary 0x562cb3de2fe8)
|                 `-CXXTemporaryObjectExpr 0x562cb3de2fb0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x562cb3ddfc60 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x562cb3ddfb50 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x562cb3ddfbc8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562cb3de1398 <col:71> 'bool' false
|-CXXRecordDecl 0x562cb3ddfd10 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x562cb3de0008 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x562cb3ddffa0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x562cb3ddff40 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x562cb3ddff00 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x562cb3a7af00 'String'
|       | `-CXXRecord 0x562cb3a7ae70 'String'
|       |-BuiltinType 0x562cb374d580 'int'
|       `-DecayedType 0x562cb3cb8a70 '__va_list_tag *' sugar
|         |-TypedefType 0x562cb3cb8a40 'va_list' sugar
|         | |-Typedef 0x562cb39981b0 'va_list'
|         | `-TypedefType 0x562cb3998160 '__gnuc_va_list' sugar
|         |   |-Typedef 0x562cb3990dd8 '__gnuc_va_list'
|         |   `-TypedefType 0x562cb3990d40 '__builtin_va_list' sugar
|         |     |-Typedef 0x562cb378ed38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x562cb378ece0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x562cb374e2d0 '__va_list_tag'
|         |         `-CXXRecord 0x562cb374e238 '__va_list_tag'
|         `-PointerType 0x562cb399deb0 '__va_list_tag *'
|           `-RecordType 0x562cb374e2d0 '__va_list_tag'
|             `-CXXRecord 0x562cb374e238 '__va_list_tag'
|-EnumDecl 0x562cb3de0060 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x562cb3de0160 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562cb3de06c0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3de0140 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x562cb3de0120 <col:16> 'int' 1
| |-EnumConstantDecl 0x562cb3de01f0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562cb3de06d8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3de01d0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x562cb3de01b0 <col:21> 'int' 2
| |-EnumConstantDecl 0x562cb3de0280 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562cb3de06f0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3de0260 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x562cb3de0240 <col:22> 'int' 4
| |-EnumConstantDecl 0x562cb3de0310 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562cb3de0708 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3de02f0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x562cb3de02d0 <col:17> 'int' 8
| |-EnumConstantDecl 0x562cb3de03a0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562cb3de0720 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3de0380 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x562cb3de0360 <col:22> 'int' 16
| |-EnumConstantDecl 0x562cb3de0430 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562cb3de0738 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3de0410 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x562cb3de03f0 <col:19> 'int' 32
| |-EnumConstantDecl 0x562cb3de04c0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562cb3de0750 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3de04a0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x562cb3de0480 <col:17> 'int' 64
| |-EnumConstantDecl 0x562cb3de0550 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562cb3de0768 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3de0530 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x562cb3de0510 <col:14> 'int' 128
| |-EnumConstantDecl 0x562cb3de05e0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562cb3de0780 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562cb3de05c0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x562cb3de05a0 <col:16> 'int' 256
| `-EnumConstantDecl 0x562cb3de0670 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x562cb3de0798 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3de0650 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x562cb3de0630 <col:12> 'int' 1024
|-CXXMethodDecl 0x562cb3de09a8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x562cb3de07c0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x562cb3de0860 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x562cb3de0b30 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x562cb3de0a68 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x562cb3de0bd8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x562cb3de0c18 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x562cb3de0c78 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x562cb3de0cf0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x562cb3de10f0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x562cb3de0d68 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x562cb3de0de8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x562cb3de0e68 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x562cb3de0ee0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x562cb3de0f58 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x562cb3de0fd0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x562cb3de1218 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x562cb3de1218
| `-ParmVarDecl 0x562cb3de1328 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x562cb3de3428 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x562cb3de3428
  `-ParmVarDecl 0x562cb3de3538 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3d20850 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562cb3d20968 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x562cb3d20a10 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x562cb3d20a78 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x562cb3d20ae0 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x562cb3d20b90 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x562cb3d20a10 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x562cb3d21a10 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x562cb3d219c8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x562cb3d21990 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x562cb3d21978 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x562cb3d21920 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x562cb3aa1010 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x562cb3d20a78 'len' 'int'
| | `-IntegerLiteral 0x562cb3d21a88 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x562cb3d20ae0 'cap' 'int'
| | `-IntegerLiteral 0x562cb3d21af0 <col:20> 'int' 0
| `-CompoundStmt 0x562cb3d21b70 <col:23, line:119:2>
|-CXXConstructorDecl 0x562cb3d20d08 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x562cb3d20c48 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x562cb3d21b80 <col:37, line:121:2>
|-CXXConstructorDecl 0x562cb3d23d98 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562cb3d23ea8 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x562cb3d20a10 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x562cb3d25960 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x562cb3d25930 <col:12> 'unsigned char *const' lvalue .s 0x562cb3d20a10
| |     `-DeclRefExpr 0x562cb3d25910 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x562cb3d23ea8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x562cb3d20a78 'len' 'int'
| | `-ImplicitCastExpr 0x562cb3d259f0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562cb3d259c0 <col:12> 'const int' lvalue .len 0x562cb3d20a78
| |     `-DeclRefExpr 0x562cb3d259a0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x562cb3d23ea8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x562cb3d20ae0 'cap' 'int'
| | `-ImplicitCastExpr 0x562cb3d25a80 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562cb3d25a50 <col:12> 'const int' lvalue .cap 0x562cb3d20ae0
| |     `-DeclRefExpr 0x562cb3d25a30 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x562cb3d23ea8 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x562cb3d25ad8 <col:12>
|-CXXConstructorDecl 0x562cb3d23fe0 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x562cb3d23fe0
| `-ParmVarDecl 0x562cb3d240f8 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x562cb3d25d90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562cb3d1bfd0 prev 0x562cb3aadb20 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562cb3d1c0c8 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x562cb3d1c158 <col:21, col:27> col:21 public
|-TypedefDecl 0x562cb3d1c198 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x562cb374dfd0 'const char *'
|   `-QualType 0x562cb374d521 'const char' const
|     `-BuiltinType 0x562cb374d520 'char'
|-TypedefDecl 0x562cb3d1c208 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x562cb374e1a0 'char *'
|   `-BuiltinType 0x562cb374d520 'char'
|-TypedefDecl 0x562cb3d1c340 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x562cb3d1c2b0 'int (StringAccum::*)() const'
|   |-RecordType 0x562cb3a3a780 'StringAccum'
|   | `-CXXRecord 0x562cb3d1bfd0 'StringAccum'
|   `-ParenType 0x562cb3a7b160 'int () const' sugar
|     `-FunctionProtoType 0x562cb3a4ed30 'int () const' const cdecl
|       `-BuiltinType 0x562cb374d580 'int'
|-CXXConstructorDecl 0x562cb3d1c400 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x562cb3d1c550 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x562cb3d1c4c0 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x562cb3d1c6a0 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x562cb3d1c610 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x562cb3d1c848 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x562cb3d1c788 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x562cb3d1c9f8 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x562cb3d1c938 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x562cb3d1caf0 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x562cb3d1cca8 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x562cb3d1cbe0 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x562cb3d1ce28 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x562cb3d1cd60 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x562cb3d1cf20 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x562cb3d1cfe8 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x562cb3d1d0b0 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x562cb3d1d178 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x562cb3d1d240 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x562cb3d1d3a8 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x562cb3d1d478 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562cb3d1d538 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x562cb3d1d648 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x562cb3d1d758 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x562cb3d1d818 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x562cb3d1d8d8 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x562cb3d1da20 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x562cb3d1d990 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x562cb3d1dbe0 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x562cb3d1dae0 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x562cb3d1dca8 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x562cb3d1dda0 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x562cb3d1de60 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x562cb3d1df28 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x562cb3d1dfe8 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x562cb3d1e0a8 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x562cb3d1e168 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x562cb3d1e2b8 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x562cb3d1e220 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x562cb3d1e408 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x562cb3d1e378 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x562cb3d1e560 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x562cb3d1e4c8 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x562cb3d1e6b0 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x562cb3d1e620 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x562cb3d1e8d0 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x562cb3d1e770 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x562cb3d1e7f0 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x562cb3d21848 <col:53> 'int' 0
|-CXXMethodDecl 0x562cb3d1ea28 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x562cb3d1e998 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x562cb3d21868 <col:34> 'int' 1
|-CXXMethodDecl 0x562cb3d1eb70 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x562cb3d1eae0 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x562cb3d1ecc0 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x562cb3d1ec30 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x562cb3d1ee10 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x562cb3d1ed80 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x562cb3d1ef60 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x562cb3d1eed0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x562cb3d1f138 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x562cb3d1f020 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x562cb3d1f0a0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x562cb3d1f318 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x562cb3d1f200 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x562cb3d1f280 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x562cb3d1f4f8 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562cb3d1f3e0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x562cb3d1f460 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x562cb3d1f6d8 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x562cb3d1f5c0 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x562cb3d1f640 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x562cb3d1f8b8 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x562cb3d1f7a0 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x562cb3d1f820 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x562cb3d1fc18 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x562cb3d1fa00 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x562cb3d1fa80 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x562cb3d21888 <col:56> 'int' 10
| `-ParmVarDecl 0x562cb3d1faf8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562cb3d218a8 <col:77> 'bool' true
|-CXXMethodDecl 0x562cb3d1ff78 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x562cb3d1fd60 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x562cb3d1fde0 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x562cb3d218b8 <col:57> 'int' 10
| `-ParmVarDecl 0x562cb3d1fe58 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562cb3d218d8 <col:78> 'bool' true
|-CXXMethodDecl 0x562cb3d201a0 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x562cb3d20048 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x562cb3d200c8 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x562cb3d20298 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x562cb3d20408 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x562cb3d20348 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x562cb3d20558 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x562cb3d204c8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x562cb3d20600 <col:51> "" ""
|-AccessSpecDecl 0x562cb3d20670 <line:106:3, col:10> col:3 private
|-EnumDecl 0x562cb3d20698 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x562cb3d207e8 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x562cb3d20838 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562cb3d207c8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x562cb3d20798 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x562cb3a83f58 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x562cb3d20850 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562cb3d20968 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x562cb3d20a10 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x562cb3d20a78 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x562cb3d20ae0 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x562cb3d20b90 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x562cb3d20a10 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x562cb3d21a10 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x562cb3d219c8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x562cb3d21990 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x562cb3d21978 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x562cb3d21920 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x562cb3aa1010 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x562cb3d20a78 'len' 'int'
| | | `-IntegerLiteral 0x562cb3d21a88 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x562cb3d20ae0 'cap' 'int'
| | | `-IntegerLiteral 0x562cb3d21af0 <col:20> 'int' 0
| | `-CompoundStmt 0x562cb3d21b70 <col:23, line:119:2>
| |-CXXConstructorDecl 0x562cb3d20d08 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x562cb3d20c48 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x562cb3d21b80 <col:37, line:121:2>
| |-CXXConstructorDecl 0x562cb3d23d98 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562cb3d23ea8 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x562cb3d20a10 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x562cb3d25960 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x562cb3d25930 <col:12> 'unsigned char *const' lvalue .s 0x562cb3d20a10
| | |     `-DeclRefExpr 0x562cb3d25910 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x562cb3d23ea8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x562cb3d20a78 'len' 'int'
| | | `-ImplicitCastExpr 0x562cb3d259f0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x562cb3d259c0 <col:12> 'const int' lvalue .len 0x562cb3d20a78
| | |     `-DeclRefExpr 0x562cb3d259a0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x562cb3d23ea8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x562cb3d20ae0 'cap' 'int'
| | | `-ImplicitCastExpr 0x562cb3d25a80 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x562cb3d25a50 <col:12> 'const int' lvalue .cap 0x562cb3d20ae0
| | |     `-DeclRefExpr 0x562cb3d25a30 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x562cb3d23ea8 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x562cb3d25ad8 <col:12>
| |-CXXConstructorDecl 0x562cb3d23fe0 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x562cb3d23fe0
| | `-ParmVarDecl 0x562cb3d240f8 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x562cb3d25d90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x562cb3d20de0 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x562cb3d20ee0 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x562cb3d20e48 <col:16> col:19 'int'
|-CXXMethodDecl 0x562cb3d210c0 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x562cb3d20fa0 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x562cb3d21020 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x562cb3d212a0 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x562cb3d21188 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x562cb3d21208 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x562cb3d213f8 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x562cb3d21368 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x562cb3d21548 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x562cb3d214b8 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x562cb3d21808 <line:132:5, col:70> col:25
  `-FunctionDecl 0x562cb3d21748 parent 0x562cb374d488 <col:5, col:70> col:25 used operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x562cb3d21600 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x562cb3d21678 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>
