
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58b9a368 prev 0x563b58b91b08 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b58b9a460 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x563b58b9a4f0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x563b58b9a568 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x563b58b9a628 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x563b58b9a6f0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x563b58b9a868 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x563b58b9a7a0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x563b58b9a910 <col:24>
| `-OptimizeNoneAttr 0x563b58b9a968 <col:34>
|-CXXMethodDecl 0x563b58b9a9b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x563b58b9ac68 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x563b58b9aa60 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563b58b9aad8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x563b58b9ab58 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x563b58b9ad20 <line:229:7, col:14> col:7 private
|-FieldDecl 0x563b58b9ad58 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x563b58b9adc0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x563b58b9ae48 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x563b58b9b168 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x563b58b9af00 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563b58b9af78 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x563b58b9aff0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x563b58b9b070 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x563b58b9b280 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x563b58ba2bf8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x563b58ba2bf8
| `-ParmVarDecl 0x563b58ba2d08 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x563b58ba2da8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x563b58ba2da8
| `-ParmVarDecl 0x563b58ba2eb8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x563b58c5ca90 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58b8d380 prev 0x563b58b8d100 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563b58b8d478 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x563b58b8d508 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x563b58b8d568 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x563b58b8d658 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x563b58b8d758 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x563b58b8d928 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x563b58b8d7d8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x563b58b8d850 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x563b58b8dab8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x563b58b8d9f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x563b58b8db60 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x563b58b8dc98 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x563b58b8dbd0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x563b58b8de38 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x563b58b8dd78 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x563b58b8dfd8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x563b58b8df18 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x563b58b8e080 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x563b58b8e180 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x563b58b8e260 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b8e160 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x563b58b8e140 <col:26> 'int' 1
| `-EnumConstantDecl 0x563b58b8e210 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x563b58b8e278 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58b8e1f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x563b58b8e1d0 <col:44> 'int' 2
|-CXXMethodDecl 0x563b58b8e3c0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x563b58b8e2a8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x563b58b8e328 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x563b58b8e518 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x563b58b8e488 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x563b58b8e758 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x563b58b8e5d8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x563b58b8e650 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x563b58b8e808 <col:20>
| `-OptimizeNoneAttr 0x563b58b8e860 <col:30>
|-CXXMethodDecl 0x563b58b8e968 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x563b58b8e8a0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x563b58b8ea10 <col:20>
| `-OptimizeNoneAttr 0x563b58b8ea68 <col:30>
|-CXXMethodDecl 0x563b58b8eab8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x563b58b8eb80 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x563b58b8ec98 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x563b58b8ed20 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x563b58b8eda8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x563b58b8ee30 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x563b58b8eeb8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x563b58b8ef48 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x563b58b8f008 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x563b58b8f090 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x563b58b8f118 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x563b58b8f1a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x563b58b8f228 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x563b58b8f2b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x563b58b8f340 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x563b58b8f400 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x563b58b8f490 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x563b58b8f5e0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x563b58b8f548 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x563b58b8f770 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x563b58b8f6a0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x563b58b8fa20 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x563b58b8f828 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x563b58b8f8a8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x563b58b8f928 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x563b58b8fad8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x563b58b8fbe0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563b58b8fe70 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b8fbc0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x563b58b8fba0 <col:33> 'int' 0
| |-EnumConstantDecl 0x563b58b8fc70 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563b58b8fe88 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b8fc50 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x563b58b8fc30 <col:32> 'int' 20
| |-EnumConstantDecl 0x563b58b8fd00 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563b58b8fea0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b8fce0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x563b58b8fcc0 <col:38> 'int' 90
| |-EnumConstantDecl 0x563b58b8fd90 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563b58b8feb8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b8fd70 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x563b58b8fd50 <col:35> 'int' 100
| `-EnumConstantDecl 0x563b58b8fe20 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x563b58b8fed0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58b8fe00 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x563b58b8fde0 <col:32> 'int' 2000
|-CXXMethodDecl 0x563b58b8ff10 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x563b58b90350 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563b58b901c0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x563b58b90238 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b58b90420 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x563b58b905a0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x563b58b904d0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b58b907a8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563b58b90658 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x563b58b906d0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b58b908a8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x563b58b90948 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x563b58b90a10 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b58b90aa0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x563b58b90cd0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b90a80 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x563b58b90a60 <col:36> 'int' EnumConstant 0x563b58b90a10 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b58b90af0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b58b90b40 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b58b90b90 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b58b90be0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b58b90c30 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x563b58b90c80 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x563b58b90db8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x563b58b90cf8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x563b58b90e80 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x563b58b90f40 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x563b58b91000 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x563b58b910c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x563b58b911d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x563b58b912a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x563b58b91420 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x563b58b91350 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x563b58b91548 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x563b58b91748 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x563b58b915f8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x563b58b91678 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x563b58b9f098 <col:54, line:127:5>
|   |-ParenExpr 0x563b58b9ef48 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x563b58b9ef18 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b9ec08 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x563b58b9ebe0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x563b58b9ebc8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x563b58b9ebb0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x563b58b9eb80 <col:31> 'Router *' lvalue ->_router 0x563b58b9ca60
|   |   |         `-CXXThisExpr 0x563b58b9eb70 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x563b58b9ec68 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b9ec48 <col:48> 'int' 0
|   |   `-CallExpr 0x563b58b9ee78 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x563b58b9ee60 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b9ee40 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b9eeb8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b9ecd8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x563b58b9eed0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b9ecf8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x563b58b9eee8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b9ed30 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x563b58b9ef00 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b9ee28 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b9ee10 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b9edc8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x563b58b9efe0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x563b58b9ef78 <col:9> 'Router *' lvalue ->_router 0x563b58b9ca60
|   | | `-CXXThisExpr 0x563b58b9ef68 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x563b58b9efc8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563b58b9efa8 <col:19> 'Router *' lvalue ParmVar 0x563b58b915f8 'r' 'Router *'
|   `-BinaryOperator 0x563b58b9f078 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x563b58b9f010 <col:9> 'int' lvalue ->_eindex 0x563b58b9cac8
|     | `-CXXThisExpr 0x563b58b9f000 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x563b58b9f060 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x563b58b9f040 <col:19> 'int' lvalue ParmVar 0x563b58b91678 'eindex' 'int'
|-CXXMethodDecl 0x563b58b918d0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x563b58b91808 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x563b58b919a0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x563b58b91a68 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x563b58b91b08 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x563b58b91d58 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x563b58b91bd0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x563b58b91c50 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x563b58b91e08 <col:20>
| `-OptimizeNoneAttr 0x563b58b91e60 <col:30>
|-CXXMethodDecl 0x563b58b91f68 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x563b58b91ea0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x563b58b92010 <col:20>
| `-OptimizeNoneAttr 0x563b58b92068 <col:30>
|-CXXMethodDecl 0x563b58b92138 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x563b58b920a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x563b58b921e0 <col:20>
| `-OptimizeNoneAttr 0x563b58b92238 <col:30>
|-CXXMethodDecl 0x563b58b923c8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x563b58b92270 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x563b58b922f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x563b58b92558 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x563b58b92490 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x563b58b926a8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x563b58b92618 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x563b58b927f8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x563b58b92768 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x563b58b92948 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x563b58b928b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x563b58b92c08 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x563b58b92a00 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x563b58b92a80 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x563b58b92b28 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x563b58b92ce0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x563b58b92da0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x563b58b93070 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563b58b92f20 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x563b58b92f98 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x563b58b93198 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x563b58b93370 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x563b58b93250 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x563b58b932d0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x563b58b93558 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x563b58b93438 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x563b58b934b8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x563b58b938c8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x563b58b93618 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563b58b93690 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563b58b93710 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563b58b9e680 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563b58b9e660 <col:106> 'int' 0
| `-ParmVarDecl 0x563b58b93788 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b58b9e6b8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b58b9e698 <col:126> 'int' 0
|-CXXMethodDecl 0x563b58b93c68 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563b58b93998 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563b58b93a30 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563b58b93ab0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x563b58b93b28 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b58b9e6f0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b58b9e6d0 <col:114> 'int' 0
|-CXXMethodDecl 0x563b58b93ff8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563b58b93d40 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x563b58b93db8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563b58b93e38 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x563b58b9e708 <col:96> 'int' 0
| `-ParmVarDecl 0x563b58b93eb0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b58b9e748 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b58b9e728 <col:116> 'int' 0
|-CXXMethodDecl 0x563b58b94378 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x563b58b940c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x563b58b94140 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563b58b941c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563b58b9e780 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563b58b9e760 <col:109> 'int' 0
| `-ParmVarDecl 0x563b58b94238 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b58b9e7b8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b58b9e798 <col:129> 'int' 0
|-CXXMethodDecl 0x563b58b946f8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563b58b94448 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x563b58b944c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563b58b94540 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x563b58b945b8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b58b9e7f0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b58b9e7d0 <col:117> 'int' 0
|-CXXMethodDecl 0x563b58b94a88 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563b58b947d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b94848 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563b58b948c8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x563b58b9e808 <col:99> 'int' 0
| `-ParmVarDecl 0x563b58b94940 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b58b9e848 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b58b9e828 <col:119> 'int' 0
|-CXXMethodDecl 0x563b58b94ea8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x563b58b94b58 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x563b58b94bd8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x563b58b94c50 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563b58b94cd0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563b58b9e880 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563b58b9e860 <col:108> 'int' 0
| `-ParmVarDecl 0x563b58b94d50 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x563b58b9e8b8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x563b58b9e898 <col:141> 'int' 0
|-CXXMethodDecl 0x563b58b952c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x563b58b94f80 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x563b58b95000 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x563b58b95078 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563b58b950f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x563b58b95178 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563b58b9e8d0 <col:121> 'int' 0
|-CXXMethodDecl 0x563b58b956f8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x563b58b953a8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x563b58b95428 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x563b58b954a0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563b58b95520 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x563b58b9e8f0 <col:98> 'int' 0
| `-ParmVarDecl 0x563b58b955a0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563b58b9e910 <col:123> 'int' 0
|-CXXMethodDecl 0x563b58b959c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x563b58b957d0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563b58b95850 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x563b58b958d0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x563b58b9e930 <col:80> 'int' 0
|-EnumDecl 0x563b58b95a78 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x563b58b95b80 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563b58b95e10 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b95b60 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x563b58b95b40 <col:42> 'int' 1
| |-EnumConstantDecl 0x563b58b95c10 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563b58b95e28 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b95bf0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x563b58b95bd0 <col:40> 'int' 2
| |-EnumConstantDecl 0x563b58b95ca0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563b58b95e40 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b95c80 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x563b58b95c60 <col:44> 'int' 4
| |-EnumConstantDecl 0x563b58b95d30 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563b58b95e58 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b95d10 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x563b58b95cf0 <col:36> 'int' 7
| `-EnumConstantDecl 0x563b58b95dc0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x563b58b95e70 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58b95da0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x563b58b95d80 <col:34> 'int' 6
|-CXXMethodDecl 0x563b58b96128 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x563b58b95e98 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x563b58b95f38 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x563b58b95fb8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x563b58b96030 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x563b58b9e9e8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x563b58b9e9d0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x563b58b9e9b8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x563b58b9e998 <col:98, col:105> 'String' (CXXTemporary 0x563b58b9e998)
|           `-CXXTemporaryObjectExpr 0x563b58b9e960 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x563b58b963c8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x563b58b961f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x563b58b96270 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x563b58b962e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563b58b9ea98 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563b58b9ea80 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x563b58b9ea68 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563b58b9ea48 <col:94, col:101> 'String' (CXXTemporary 0x563b58b9ea48)
| |         `-CXXTemporaryObjectExpr 0x563b58b9ea10 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x563b58b9f280 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x563b58b9f1f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x563b58b9f1c8 <col:9> '<bound member function type>' ->add_task_handlers 0x563b58b96128
|     | `-CXXThisExpr 0x563b58b9f1b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x563b58b9f238 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x563b58b9f138 <col:27> 'Task *' lvalue ParmVar 0x563b58b961f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x563b58b9f250 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x563b58b9f158 <col:33> 'NotifierSignal *' lvalue ParmVar 0x563b58b96270 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x563b58b9f268 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563b58b9f178 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x563b58b95dc0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563b58b9f198 <col:62> 'const String' lvalue ParmVar 0x563b58b962e8 'prefix' 'const String &'
|-CXXMethodDecl 0x563b58b965d8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x563b58b96490 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x563b58b96508 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563b58b9eb48 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563b58b9eb30 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x563b58b9eb18 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563b58b9eaf8 <col:70, col:77> 'String' (CXXTemporary 0x563b58b9eaf8)
| |         `-CXXTemporaryObjectExpr 0x563b58b9eac0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x563b58b9f458 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x563b58b9f3d0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x563b58b9f3a0 <col:9> '<bound member function type>' ->add_task_handlers 0x563b58b96128
|     | `-CXXThisExpr 0x563b58b9f390 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x563b58b9f410 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x563b58b9f310 <col:27> 'Task *' lvalue ParmVar 0x563b58b96490 'task' 'Task *'
|     |-ImplicitCastExpr 0x563b58b9f428 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x563b58b9f330 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x563b58b9f440 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563b58b9f350 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x563b58b95dc0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563b58b9f370 <col:57> 'const String' lvalue ParmVar 0x563b58b96508 'prefix' 'const String &'
|-CXXMethodDecl 0x563b58b968b8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x563b58b966a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b96720 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b96798 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x563b58b96b68 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x563b58b96988 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b96a08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b96a88 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x563b58b96e58 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563b58b96c38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b96cb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b96d30 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x563b58b97108 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x563b58b96f28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b96fa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b97028 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x563b58b973b8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x563b58b971d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b97258 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b972d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x563b58b97668 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x563b58b97488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b97508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b97580 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x563b58b97918 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x563b58b97738 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b977b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b97838 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x563b58b97c28 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x563b58b97a40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b97ac0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b97b40 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x563b58b97f08 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x563b58b97cf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b97d78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b97e20 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x563b58b981e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x563b58b97fd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b98058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b98100 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x563b58b98450 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563b58b982b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563b58b98338 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563b58b983b0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x563b58b986f8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x563b58b98520 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563b58b985a0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563b58b98618 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x563b58b989a8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x563b58b987c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b98848 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b988c8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x563b58b98c58 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x563b58b98a78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b98af8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b98b70 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x563b58b98f08 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x563b58b98d28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b98da8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b98e20 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x563b58b991d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x563b58b98fd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b99058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b58b990f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x563b58b99508 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x563b58b992a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b58b99328 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x563b58b993a0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x563b58b99418 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563b58b9eb60 <col:93> 'bool' false
|-CXXMethodDecl 0x563b58b996f0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563b58b995d8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x563b58b99658 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x563b58b998c8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563b58b997b0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x563b58b99830 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x563b58b99ba8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563b58b99988 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x563b58b99a00 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x563b58b99a80 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x563b58b99af8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x563b58b99e98 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563b58b99c78 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x563b58b99cf0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x563b58b99d70 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x563b58b99de8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x563b58b9a0d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x563b58b99f70 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x563b58b99ff0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x563b58b9a2b8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x563b58b9a198 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x563b58b9a218 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x563b58b9a368 prev 0x563b58b91b08 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563b58b9a460 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x563b58b9a4f0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x563b58b9a568 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x563b58b9a628 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x563b58b9a6f0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x563b58b9a868 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x563b58b9a7a0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x563b58b9a910 <col:24>
| | `-OptimizeNoneAttr 0x563b58b9a968 <col:34>
| |-CXXMethodDecl 0x563b58b9a9b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x563b58b9ac68 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x563b58b9aa60 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563b58b9aad8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x563b58b9ab58 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x563b58b9ad20 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x563b58b9ad58 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x563b58b9adc0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x563b58b9ae48 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x563b58b9b168 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x563b58b9af00 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563b58b9af78 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x563b58b9aff0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x563b58b9b070 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x563b58b9b280 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x563b58ba2bf8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x563b58ba2bf8
| | `-ParmVarDecl 0x563b58ba2d08 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x563b58ba2da8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x563b58ba2da8
| | `-ParmVarDecl 0x563b58ba2eb8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x563b58c5ca90 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563b58b9b2f8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x563b58b9b398 <col:38> "" ""
|-CXXMethodDecl 0x563b58b9b428 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x563b58b9b4c8 <col:44> "" ""
|-AccessSpecDecl 0x563b58b9b538 <line:260:3, col:10> col:3 private
|-EnumDecl 0x563b58b9b560 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x563b58b9b660 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x563b58b9b6b0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58b9b640 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x563b58b9b620 <col:27> 'int' 4
|-FieldDecl 0x563b58b9b768 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x563b58b9b918 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x563b58b9b9d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x563b58b9ca60 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x563b58b9cac8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x563b58b9cc18 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x563b58b9cb58 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x563b58b9cdc8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x563b58b9ccd8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x563b58b9cfa8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x563b58b9ce88 <col:20> col:23 'int'
| `-ParmVarDecl 0x563b58b9cf08 <col:25> col:28 'int'
|-CXXMethodDecl 0x563b58b9d250 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x563b58b9d070 <col:23> col:26 'int'
| |-ParmVarDecl 0x563b58b9d0f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x563b58b9d168 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x563b58b9d308 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x563b58b9d3d0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x563b58b9d420 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x563b58b9d470 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x563b58b9d650 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x563b58b9d500 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x563b58b9d578 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b58b9d8f8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x563b58b9d718 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x563b58b9d798 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x563b58b9d810 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x563b58b9db18 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x563b58b9d9c8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x563b58b9da48 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x563b58b9de50 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x563b58b9dbd8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x563b58b9dc58 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x563b58b9dcd0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x563b58b9dd50 <col:57> col:60 'int'
|-CXXMethodDecl 0x563b58b9e038 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563b58b9df20 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x563b58b9dfa0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x563b58b9e188 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x563b58b9e0f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x563b58b9e508 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x563b58b9e248 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x563b58b9e2c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x563b58b9e340 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x563b58b9e3c0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x563b58b9e620 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class MarkIPHeader
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58ba5d68 <../elements/ip/markipheader.hh:22:1, line:37:1> line:22:7 class MarkIPHeader definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x563b58ba5ec8 <col:1, col:7> col:7 implicit referenced class MarkIPHeader
|-FieldDecl 0x563b58ba5f70 <line:24:3, col:7> col:7 _offset 'int'
|-AccessSpecDecl 0x563b58ba5fc0 <line:26:2, col:8> col:2 public
|-CXXConstructorDecl 0x563b58ba6050 <line:28:3, col:16> col:3 MarkIPHeader 'void ()'
|-CXXDestructorDecl 0x563b58ba6140 <line:29:3, col:17> col:3 ~MarkIPHeader 'void ()' noexcept-unevaluated 0x563b58ba6140
| `-Overrides: [ 0x563b58b8d658 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x563b58ba6270 <line:31:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x563b58b8eab8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x563b58ba6bb8 <col:34, col:59>
|   `-ReturnStmt 0x563b58ba6ba8 <col:36, col:43>
|     `-ImplicitCastExpr 0x563b58ba6b90 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x563b58ba6b68 <col:43> 'const char [13]' lvalue "MarkIPHeader"
|-CXXMethodDecl 0x563b58ba6338 <line:32:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x563b58b8eb80 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x563b58ba6c18 <col:34, col:54>
|   `-ReturnStmt 0x563b58ba6c08 <col:36, col:43>
|     `-ImplicitCastExpr 0x563b58ba6bf0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x563b58ba6bd0 <col:43> 'const char []' lvalue Var 0x563b58b8ee30 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x563b58ba6610 <line:33:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x563b58b90350 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x563b58ba64c0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x563b58ba6538 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x563b58ba6760 <line:35:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x563b58b8dc98 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x563b58ba66d0 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x563b58ba6838 <line:22:7> col:7 implicit MarkIPHeader 'void (const MarkIPHeader &)' inline default_delete noexcept-unevaluated 0x563b58ba6838
| `-ParmVarDecl 0x563b58ba6948 <col:7> col:7 'const MarkIPHeader &'
`-CXXMethodDecl 0x563b58ba69e8 <col:7> col:7 implicit operator= 'MarkIPHeader &(const MarkIPHeader &)' inline default_delete noexcept-unevaluated 0x563b58ba69e8
  `-ParmVarDecl 0x563b58ba6af8 <col:7> col:7 'const MarkIPHeader &'

Layout: <CGRecordLayout
  LLVMType:%class.MarkIPHeader = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.MarkIPHeader = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58960210 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x563b58960328 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x563b589603c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x563b58960428 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x563b58960488 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x563b58960538 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58960840 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b58960958 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x563b58960a00 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x563b58960a68 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x563b58960af8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x563b58966b90 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563b58966fc8 <col:12>
|-CXXConstructorDecl 0x563b58966c98 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563b58966da8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563b58960a00 'data' 'const char *'
| | `-ImplicitCastExpr 0x563b58969550 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x563b58969520 <col:12> 'const char *const' lvalue .data 0x563b58960a00
| |     `-DeclRefExpr 0x563b58969500 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58966da8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563b58960a68 'length' 'int'
| | `-ImplicitCastExpr 0x563b589695e0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563b589695b0 <col:12> 'const int' lvalue .length 0x563b58960a68
| |     `-DeclRefExpr 0x563b58969590 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58966da8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563b58960af8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x563b58969670 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x563b58969640 <col:12> 'String::memo_t *const' lvalue .memo 0x563b58960af8
| |     `-DeclRefExpr 0x563b58969620 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58966da8 '' 'const String::rep_t &'
| `-CompoundStmt 0x563b589696c8 <col:12>
|-CXXConstructorDecl 0x563b58966e48 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563b58966e48
| `-ParmVarDecl 0x563b58966f58 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x563b5896c4b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563b58977ec8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563b58977fd8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x563b589784f0 <col:12>
|   |-BinaryOperator 0x563b58978308 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563b589782c0 <col:12> 'const char *' lvalue ->data 0x563b58960a00
|   | | `-CXXThisExpr 0x563b589782b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563b589782f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x563b58978280 <col:12> 'const char *const' lvalue .data 0x563b58960a00
|   |     `-DeclRefExpr 0x563b58978260 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58977fd8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563b589783d0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x563b58978388 <col:12> 'int' lvalue ->length 0x563b58960a68
|   | | `-CXXThisExpr 0x563b58978378 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563b589783b8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x563b58978348 <col:12> 'const int' lvalue .length 0x563b58960a68
|   |     `-DeclRefExpr 0x563b58978328 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58977fd8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563b58978498 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x563b58978450 <col:12> 'String::memo_t *' lvalue ->memo 0x563b58960af8
|   | | `-CXXThisExpr 0x563b58978440 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563b58978480 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x563b58978410 <col:12> 'String::memo_t *const' lvalue .memo 0x563b58960af8
|   |     `-DeclRefExpr 0x563b589783f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58977fd8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x563b589784e0 <col:12>
|     `-UnaryOperator 0x563b589784c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b589784b8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x563b58978048 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563b58978048
  `-ParmVarDecl 0x563b58978158 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58957780 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563b58957898 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x563b58957928 <col:16, col:22> col:16 public
|-TypedefDecl 0x563b58957968 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x563b5862cfd0 'const char *'
|   `-QualType 0x563b5862c521 'const char' const
|     `-BuiltinType 0x563b5862c520 'char'
|-TypedefDecl 0x563b589579f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x563b589579c0 'String::const_iterator' sugar
|   |-Typedef 0x563b58957968 'const_iterator'
|   `-PointerType 0x563b5862cfd0 'const char *'
|     `-QualType 0x563b5862c521 'const char' const
|       `-BuiltinType 0x563b5862c520 'char'
|-TypedefDecl 0x563b58957b60 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x563b58957ad0 'int (String::*)() const'
|   |-RecordType 0x563b58957810 'String'
|   | `-CXXRecord 0x563b58957780 'String'
|   `-ParenType 0x563b58957a70 'int () const' sugar
|     `-FunctionProtoType 0x563b5892c610 'int () const' const cdecl
|       `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58957bc8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x563b587811f0 'int64_t' sugar
|   |-Typedef 0x563b58695390 'int64_t'
|   `-TypedefType 0x563b5866e630 '__int64_t' sugar
|     |-Typedef 0x563b5866e208 '__int64_t'
|     `-BuiltinType 0x563b5862c5a0 'long'
|-TypedefDecl 0x563b58957c30 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x563b58781110 'uint64_t' sugar
|   |-Typedef 0x563b58695530 'uint64_t'
|   `-TypedefType 0x563b5866e6c0 '__uint64_t' sugar
|     |-Typedef 0x563b5866e278 '__uint64_t'
|     `-BuiltinType 0x563b5862c640 'unsigned long'
|-TypedefDecl 0x563b58957cc0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x563b58957c90 'String::intmax_t' sugar
|   |-Typedef 0x563b58957bc8 'intmax_t'
|   `-TypedefType 0x563b587811f0 'int64_t' sugar
|     |-Typedef 0x563b58695390 'int64_t'
|     `-TypedefType 0x563b5866e630 '__int64_t' sugar
|       |-Typedef 0x563b5866e208 '__int64_t'
|       `-BuiltinType 0x563b5862c5a0 'long'
|-TypedefDecl 0x563b58957d50 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x563b58957d20 'String::uintmax_t' sugar
|   |-Typedef 0x563b58957c30 'uintmax_t'
|   `-TypedefType 0x563b58781110 'uint64_t' sugar
|     |-Typedef 0x563b58695530 'uint64_t'
|     `-TypedefType 0x563b5866e6c0 '__uint64_t' sugar
|       |-Typedef 0x563b5866e278 '__uint64_t'
|       `-BuiltinType 0x563b5862c640 'unsigned long'
|-CXXConstructorDecl 0x563b58957e10 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x563b58957fb8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x563b58957ef8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x563b58958168 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x563b589580a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x563b589582c0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x563b58958230 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x563b589584d8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x563b58958388 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x563b58958408 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x563b589586f8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x563b589585a8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x563b58958628 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x563b58958918 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563b589587c8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x563b58958848 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x563b58958b38 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x563b589589e8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x563b58958a68 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x563b58958cc8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x563b58958c00 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x563b58958e48 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x563b58958d88 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x563b58958fd8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x563b58958f10 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x563b58959130 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x563b589590a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x563b58959288 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x563b589591f8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x563b589593e0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x563b58959350 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x563b58959568 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x563b589594a8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x563b589596f8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x563b58959630 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x563b58959888 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x563b589597c0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x563b58959a18 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x563b58959950 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x563b58959b10 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x563b58959c38 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x563b58959db8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x563b58959cf0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x563b58959f08 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x563b58959e78 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x563b58959fc0 <col:63> "" ""
|-CXXMethodDecl 0x563b5895a108 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x563b5895a048 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x563b5895a318 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x563b5895a1c8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x563b5895a248 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x563b5895a538 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x563b5895a3e0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x563b5895a460 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x563b5895a818 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x563b5895a5f8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x563b5895a678 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x563b58966660 <col:55> 'int' 10
| `-ParmVarDecl 0x563b5895a6f0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563b58966680 <col:76> 'bool' true
|-CXXMethodDecl 0x563b5895aaf8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x563b5895a8e0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x563b5895a960 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x563b58966690 <col:56> 'int' 10
| `-ParmVarDecl 0x563b5895a9d8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563b589666b0 <col:77> 'bool' true
|-CXXMethodDecl 0x563b5895ac00 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x563b5895acc8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x563b5895ad90 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x563b5895ae30 <col:20>
| `-OptimizeNoneAttr 0x563b5895ae88 <col:30>
|-CXXConversionDecl 0x563b5895af78 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x563b5895b048 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x563b5895b108 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x563b5895b1f8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563b5895b2b8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563b5895b438 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x563b5895b370 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x563b5895b588 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x563b5895b4f8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x563b5895b678 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x563b5895b738 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x563b5895b988 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x563b5895b7f0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x563b5895b870 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x563b5895bbe8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x563b5895ba50 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x563b5895bad0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x563b5895bcb8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x563b5895bec8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x563b5895bd70 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x563b5895bdf0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x563b5895c0e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x563b5895bf90 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x563b5895c010 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x563b5895c278 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x563b5895c1b0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x563b5895c368 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x563b5895c4d8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x563b5895c418 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563b5895c6e8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x563b5895c598 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563b5895c618 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563b5895c900 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x563b5895c7a8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x563b5895c820 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x563b5895ca90 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x563b5895c9c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563b5895ccb0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x563b5895cb50 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x563b5895cbd0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563b5895ce00 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x563b5895cd70 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x563b5895cfd8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x563b5895cec0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563b5895cf40 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x563b5895d128 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x563b5895d098 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x563b5895d340 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x563b5895d1e0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x563b5895d260 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x563b589666c0 <col:39> 'int' 0
|-CXXMethodDecl 0x563b5895d560 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x563b5895d400 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x563b5895d480 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x563b589666e0 <col:48> 'int' 0
|-CXXMethodDecl 0x563b5895d740 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x563b5895d620 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x563b5895d6a0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x563b58966700 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x563b5895d810 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x563b5895d8d0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x563b5895d990 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x563b5895da50 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x563b5895db10 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x563b5895dcb8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x563b5895dbc0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x563b5895de38 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x563b5895dd70 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x563b5895e010 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x563b5895def8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x563b5895e188 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x563b5895e0c8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x563b5895e2d0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x563b5895e240 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563b5895e420 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x563b5895e390 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x563b5895e5f8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x563b5895e4e0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563b5895e560 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563b5895e7d8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563b5895e6c0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x563b5895e740 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x563b5895e928 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x563b5895e898 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x563b5895eb38 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x563b5895e9e8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x563b5895ea68 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x563b5895ec98 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x563b5895ec00 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563b5895edf0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x563b5895ed58 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x563b5895ee98 <col:57> "" ""
|-CXXMethodDecl 0x563b5895efa8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x563b5895ef18 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x563b5895f0f8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x563b5895f068 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x563b5895f278 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x563b5895f1b0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x563b5895f340 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x563b5895f400 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x563b5895f4c0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x563b5895f560 <col:49> "" ""
|-CXXMethodDecl 0x563b5895f5f0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x563b5895f6b0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x563b5895f7a0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x563b5895f868 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x563b5895f928 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x563b5895f9e8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x563b5895fae0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x563b5895fba8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x563b5895fc70 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x563b5895fe48 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x563b5895fd28 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x563b5895fda8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x563b58960070 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x563b5895ff10 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x563b5895ff90 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x563b58960180 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x563b589601e8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x563b58960210 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563b58960328 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x563b589603c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x563b58960428 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x563b58960488 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x563b58960538 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x563b589605a0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x563b589607d8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x563b58960828 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b589607b8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x563b589606c8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x563b58960670 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x563b589606b0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x563b58960690 <col:32> 'int' 8
|-CXXRecordDecl 0x563b58960840 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563b58960958 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x563b58960a00 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x563b58960a68 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x563b58960af8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x563b58966b90 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563b58966fc8 <col:12>
| |-CXXConstructorDecl 0x563b58966c98 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563b58966da8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563b58960a00 'data' 'const char *'
| | | `-ImplicitCastExpr 0x563b58969550 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x563b58969520 <col:12> 'const char *const' lvalue .data 0x563b58960a00
| | |     `-DeclRefExpr 0x563b58969500 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58966da8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563b58960a68 'length' 'int'
| | | `-ImplicitCastExpr 0x563b589695e0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x563b589695b0 <col:12> 'const int' lvalue .length 0x563b58960a68
| | |     `-DeclRefExpr 0x563b58969590 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58966da8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563b58960af8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x563b58969670 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x563b58969640 <col:12> 'String::memo_t *const' lvalue .memo 0x563b58960af8
| | |     `-DeclRefExpr 0x563b58969620 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58966da8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x563b589696c8 <col:12>
| |-CXXConstructorDecl 0x563b58966e48 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563b58966e48
| | `-ParmVarDecl 0x563b58966f58 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x563b5896c4b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x563b58977ec8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563b58977fd8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x563b589784f0 <col:12>
| |   |-BinaryOperator 0x563b58978308 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x563b589782c0 <col:12> 'const char *' lvalue ->data 0x563b58960a00
| |   | | `-CXXThisExpr 0x563b589782b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563b589782f0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x563b58978280 <col:12> 'const char *const' lvalue .data 0x563b58960a00
| |   |     `-DeclRefExpr 0x563b58978260 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58977fd8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563b589783d0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x563b58978388 <col:12> 'int' lvalue ->length 0x563b58960a68
| |   | | `-CXXThisExpr 0x563b58978378 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563b589783b8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x563b58978348 <col:12> 'const int' lvalue .length 0x563b58960a68
| |   |     `-DeclRefExpr 0x563b58978328 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58977fd8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563b58978498 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x563b58978450 <col:12> 'String::memo_t *' lvalue ->memo 0x563b58960af8
| |   | | `-CXXThisExpr 0x563b58978440 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563b58978480 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x563b58978410 <col:12> 'String::memo_t *const' lvalue .memo 0x563b58960af8
| |   |     `-DeclRefExpr 0x563b589783f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b58977fd8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x563b589784e0 <col:12>
| |     `-UnaryOperator 0x563b589784c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563b589784b8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x563b58978048 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563b58978048
|   `-ParmVarDecl 0x563b58978158 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x563b58960b70 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x563b58960db8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x563b58960bd8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x563b58960c58 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x563b58960cd0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x563b58966b50 <col:79, line:261:5>
|   |-BinaryOperator 0x563b589667c8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563b58966760 <col:2, col:5> 'const char *' lvalue .data 0x563b58960a00
|   | | `-MemberExpr 0x563b58966730 <col:2> 'String::rep_t' lvalue ->_r 0x563b58960b70
|   | |   `-CXXThisExpr 0x563b58966720 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563b589667b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563b58966790 <col:12> 'const char *' lvalue ParmVar 0x563b58960bd8 'data' 'const char *'
|   |-BinaryOperator 0x563b58966890 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x563b58966828 <col:2, col:5> 'int' lvalue .length 0x563b58960a68
|   | | `-MemberExpr 0x563b589667f8 <col:2> 'String::rep_t' lvalue ->_r 0x563b58960b70
|   | |   `-CXXThisExpr 0x563b589667e8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563b58966878 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563b58966858 <col:14> 'int' lvalue ParmVar 0x563b58960c58 'length' 'int'
|   `-IfStmt 0x563b58966b38 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x563b589669b0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563b58966998 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x563b58966978 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x563b58966958 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x563b589668f0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x563b58960af8
|     |       | `-MemberExpr 0x563b589668c0 <col:7> 'String::rep_t' lvalue ->_r 0x563b58960b70
|     |       |   `-CXXThisExpr 0x563b589668b0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x563b58966940 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x563b58966920 <col:17> 'String::memo_t *' lvalue ParmVar 0x563b58960cd0 'memo' 'String::memo_t *'
|     `-CallExpr 0x563b58966b10 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x563b58966af8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563b58966a00 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x563b5894f7e8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x563b58966a68 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563b589603c8
|         `-ImplicitCastExpr 0x563b58966a50 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563b58966a30 <col:27> 'String::memo_t *' lvalue ParmVar 0x563b58960cd0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x563b58961068 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x563b58960e88 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x563b58960f08 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x563b58960f80 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x563b58960b70 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x563b58966fd8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563b58967168 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x563b589670d0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x563b58967040 <col:2> '<bound member function type>' ->assign_memo 0x563b58960db8
|     | `-ImplicitCastExpr 0x563b58967108 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x563b58967030 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x563b58967120 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x563b58967070 <col:14> 'const char *' lvalue ParmVar 0x563b58960e88 'data' 'const char *'
|     |-ImplicitCastExpr 0x563b58967138 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x563b58967090 <col:20> 'int' lvalue ParmVar 0x563b58960f08 'length' 'int'
|     `-ImplicitCastExpr 0x563b58967150 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563b589670b0 <col:28> 'String::memo_t *' lvalue ParmVar 0x563b58960f80 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x563b589611f8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x563b58961138 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x563b589673c0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x563b58967340 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x563b58967190 <col:2> '<bound member function type>' ->assign_memo 0x563b58960db8
|     | `-CXXThisExpr 0x563b58967180 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x563b58967378 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x563b58967210 <col:14, col:19> 'const char *' lvalue .data 0x563b58960a00
|     |   `-MemberExpr 0x563b589671e0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x563b58960b70
|     |     `-DeclRefExpr 0x563b589671c0 <col:14> 'const String' lvalue ParmVar 0x563b58961138 'x' 'const String &'
|     |-ImplicitCastExpr 0x563b58967390 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x563b58967290 <col:25, col:30> 'int' lvalue .length 0x563b58960a68
|     |   `-MemberExpr 0x563b58967260 <col:25, col:27> 'String::rep_t' lvalue ._r 0x563b58960b70
|     |     `-DeclRefExpr 0x563b58967240 <col:25> 'const String' lvalue ParmVar 0x563b58961138 'x' 'const String &'
|     `-ImplicitCastExpr 0x563b589673a8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x563b58967310 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x563b58960af8
|         `-MemberExpr 0x563b589672e0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x563b58960b70
|           `-DeclRefExpr 0x563b589672c0 <col:38> 'const String' lvalue ParmVar 0x563b58961138 'x' 'const String &'
|-CXXMethodDecl 0x563b589612c0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x563b58967d80 <col:31, line:278:5>
|   `-IfStmt 0x563b58967d68 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x563b58967460 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563b58967448 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x563b58967418 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563b58960af8
|     |     `-MemberExpr 0x563b589673e8 <col:6> 'String::rep_t' lvalue ->_r 0x563b58960b70
|     |       `-CXXThisExpr 0x563b589673d8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x563b58967d40 <col:15, line:277:2>
|       |-ParenExpr 0x563b58967910 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x563b589678e0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x563b58967570 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x563b58967558 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x563b58967540 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x563b58967500 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563b589603c8
|       |   |       `-ImplicitCastExpr 0x563b589674e8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x563b589674b8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x563b58960af8
|       |   |           `-MemberExpr 0x563b58967488 <col:27> 'String::rep_t' lvalue ->_r 0x563b58960b70
|       |   |             `-CXXThisExpr 0x563b58967478 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x563b589675d0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x563b589675b0 <col:54> 'int' 0
|       |   `-CallExpr 0x563b58967840 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x563b58967828 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x563b589677a8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x563b58967880 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563b589676b8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x563b58967898 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563b589676e8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x563b589678b0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x563b58967720 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x563b589678c8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x563b58967790 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x563b58967778 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x563b58967740 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x563b58967c60 <line:274:6, line:275:22>
|       | |-CallExpr 0x563b58967b20 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x563b58967b08 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x563b58967a80 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x563b58950c30 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x563b58967a50 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563b589603c8
|       | |   `-ImplicitCastExpr 0x563b58967a38 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x563b58967a08 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x563b58960af8
|       | |       `-MemberExpr 0x563b589679d8 <col:40> 'String::rep_t' lvalue ->_r 0x563b58960b70
|       | |         `-CXXThisExpr 0x563b589679c8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x563b58967c20 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x563b58967c08 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563b58967b48 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x563b58965aa0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x563b58967c48 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x563b58967ba8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x563b58960af8
|       |       `-MemberExpr 0x563b58967b78 <col:15> 'String::rep_t' lvalue ->_r 0x563b58960b70
|       |         `-CXXThisExpr 0x563b58967b68 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x563b58967d20 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x563b58967cb8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563b58960af8
|         | `-MemberExpr 0x563b58967c88 <col:6> 'String::rep_t' lvalue ->_r 0x563b58960b70
|         |   `-CXXThisExpr 0x563b58967c78 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x563b58967d08 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x563b58967ce8 <col:16> 'int' 0
|-CXXMethodDecl 0x563b58961558 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x563b58961378 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563b589613f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563b58961470 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x563b58961630 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x563b58961880 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x563b589616e8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563b58961768 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563b589617e0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x563b58961a68 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x563b58961950 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x563b589619d0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x563b58961b68 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x563b58967e58 <col:41, line:286:5>
|   `-ReturnStmt 0x563b58967e48 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x563b58967e18 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x563b58967de0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x563b58967dc8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x563b58967da8 <col:46> 'int' 1
|-CXXMethodDecl 0x563b58961e08 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x563b58961c20 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x563b58961ca0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x563b58961d20 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x563b58965aa0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x563b58961ed0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x563b58965b70 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x563b58965d40 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x563b58965c28 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563b58965ca8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x563b58965e00 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x563b58965ec8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x563b58965fc8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x563b58966040 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x563b589660b8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x563b58966120 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x563b58966220 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x563b58966270 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58966200 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x563b589661e0 <col:22> 'int' 14
|-CXXMethodDecl 0x563b58966488 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x563b589662a0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x563b58966320 <col:38> col:41 'int'
| `-ParmVarDecl 0x563b589663a0 <col:43> col:46 'int'
|-FriendDecl 0x563b58966590 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x563b58966620 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b58a28f20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x563b58a290f8 prev 0x563b58a28f20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563b58a29188 <col:46, col:52> col:46 public
|-TypedefDecl 0x563b58a291b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58a2ab10 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x563b58a2aac0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x563b58a2aaa0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x563b58a293c8 'type'
|     `-SubstTemplateTypeParmType 0x563b58a29390 'String' sugar
|       |-TemplateTypeParmType 0x563b5891c030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b5891bfe0 'T'
|       `-RecordType 0x563b58957810 'String'
|         `-CXXRecord 0x563b58957780 'String'
|-TypedefDecl 0x563b58a2abc8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x563b58a2ab90 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x563b58a2ab70 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x563b58a2ab10 'type'
|     `-ElaboratedType 0x563b58a2aac0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x563b58a2aaa0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x563b58a293c8 'type'
|         `-SubstTemplateTypeParmType 0x563b58a29390 'String' sugar
|           |-TemplateTypeParmType 0x563b5891c030 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563b5891bfe0 'T'
|           `-RecordType 0x563b58957810 'String'
|             `-CXXRecord 0x563b58957780 'String'
|-CXXMethodDecl 0x563b58a2ad48 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x563b58a2ac58 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x563b58a2ae38 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x563b58a2af18 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x563b58a2af18
|-CXXMethodDecl 0x563b58a2b1e8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x563b58a2b0f0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x563b58a2b428 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563b58a2b2a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b58a2b318 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b58a2b5f8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563b58a2b4e8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b58a2b560 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b58a2b758 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x563b58a2b828 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x563b58a2ba78 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563b58a2b8e8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x563b58a2b960 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b58bd7c38 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x563b58a2bb48 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x563b58a2bbc0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b58bd7df8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x563b58bd7d08 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b58bd7fb8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x563b58bd7ec0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b58bd8070 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563b58bd8120 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x563b58bd8358 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563b58bd81d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b58bd8248 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b58bd85f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x563b58bd8500 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x563b58bd86c0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x563b58bd8710 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x563b58bd8760 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b58b8ffc0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x563b58a27988 prev 0x563b58b8ffc0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563b58a28e90 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x563b58a28e40 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x563b58a28e20 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x563b58a28cd0 'type'
|     `-SubstTemplateTypeParmType 0x563b58a28b60 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x563b588f1de0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x563b588f1d88 'F'
|       `-RecordType 0x563b58a287c0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x563b58a286e0 'typed_array_memory'
|-FieldDecl 0x563b58bd87b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x563b58bd8800 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563b58bd8838 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x563b58a27a20 'String' sugar
|   |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563b589292f8 'T'
|   `-RecordType 0x563b58957810 'String'
|     `-CXXRecord 0x563b58957780 'String'
|-TypedefDecl 0x563b58bd88c8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x563b58bd8890 'String &'
|   `-SubstTemplateTypeParmType 0x563b58a27a20 'String' sugar
|     |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b589292f8 'T'
|     `-RecordType 0x563b58957810 'String'
|       `-CXXRecord 0x563b58957780 'String'
|-TypedefDecl 0x563b58bd8958 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x563b58bd8920 'const String &'
|   `-QualType 0x563b58a27a21 'const String' const
|     `-SubstTemplateTypeParmType 0x563b58a27a20 'String' sugar
|       |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b589292f8 'T'
|       `-RecordType 0x563b58957810 'String'
|         `-CXXRecord 0x563b58957780 'String'
|-TypedefDecl 0x563b58bd89e8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x563b58bd89b0 'String *'
|   `-SubstTemplateTypeParmType 0x563b58a27a20 'String' sugar
|     |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b589292f8 'T'
|     `-RecordType 0x563b58957810 'String'
|       `-CXXRecord 0x563b58957780 'String'
|-TypedefDecl 0x563b58bd8a78 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x563b58bd8a40 'const String *'
|   `-QualType 0x563b58a27a21 'const String' const
|     `-SubstTemplateTypeParmType 0x563b58a27a20 'String' sugar
|       |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b589292f8 'T'
|       `-RecordType 0x563b58957810 'String'
|         `-CXXRecord 0x563b58957780 'String'
|-TypedefDecl 0x563b58bd96d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x563b58bd9680 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x563b58bd9660 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x563b58bd9598 'type'
|     `-LValueReferenceType 0x563b58bd9560 'const String &'
|       `-QualType 0x563b58bd9301 'const String' const
|         `-SubstTemplateTypeParmType 0x563b58bd9300 'String' sugar
|           |-TemplateTypeParmType 0x563b588fbd30 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563b588fbcd8 'T'
|           `-RecordType 0x563b58957810 'String'
|             `-CXXRecord 0x563b58957780 'String'
|-TypedefDecl 0x563b58bd9738 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x563b58bd8920 'const String &'
|   `-QualType 0x563b58a27a21 'const String' const
|     `-SubstTemplateTypeParmType 0x563b58a27a20 'String' sugar
|       |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b589292f8 'T'
|       `-RecordType 0x563b58957810 'String'
|         `-CXXRecord 0x563b58957780 'String'
|-TypedefDecl 0x563b58bd9790 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58bd97f8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x563b58bd89b0 'String *'
|   `-SubstTemplateTypeParmType 0x563b58a27a20 'String' sugar
|     |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b589292f8 'T'
|     `-RecordType 0x563b58957810 'String'
|       `-CXXRecord 0x563b58957780 'String'
|-TypedefDecl 0x563b58bd9860 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x563b58bd8a40 'const String *'
|   `-QualType 0x563b58a27a21 'const String' const
|     `-SubstTemplateTypeParmType 0x563b58a27a20 'String' sugar
|       |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b589292f8 'T'
|       `-RecordType 0x563b58957810 'String'
|         `-CXXRecord 0x563b58957780 'String'
|-EnumDecl 0x563b58bd98b8 <line:134:5> col:5
| `-EnumConstantDecl 0x563b58bd99b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563b58bd9990 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563b5892a9d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563b5892a9b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563b5892a990 <col:40> 'int' 1
|-CXXConstructorDecl 0x563b58bd9a38 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563b58bd9cc8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563b58bd9af0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b58bd9b90 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x563b58bd9f58 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x563b58bd9e40 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x563b58bda218 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x563b58bda100 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x563b58bda530 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x563b58bda410 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x563b58bda840 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x563b58bda720 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x563b58bdab30 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563b58bda978 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b58bda9f0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563b58bdac58 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x563b58bdad08 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58bdad60 <col:30> Inherited
|-CXXMethodDecl 0x563b58bdada8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x563b58bdae58 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58bdaeb0 <col:30> Inherited
|-CXXMethodDecl 0x563b58bdaf78 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563b58bdb028 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58bdb080 <col:30> Inherited
|-CXXMethodDecl 0x563b58bdb0c8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563b58bdb178 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58bdb1d0 <col:30> Inherited
|-CXXMethodDecl 0x563b58bdb218 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563b58bdb2c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58bdb320 <col:30> Inherited
|-CXXMethodDecl 0x563b58bdb368 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563b58bdb418 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58bdb470 <col:30> Inherited
|-CXXMethodDecl 0x563b58bdb498 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563b58bdb548 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563b58bdb5f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563b58bdb7b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563b58bdb6a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b58bdb720 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563b58bdb908 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563b58bdb878 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58bdbab8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x563b58bdb9c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563b58bdbb70 <col:20>
| `-OptimizeNoneAttr 0x563b58bdbbc8 <col:30>
|-CXXMethodDecl 0x563b58bdbce8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x563b58bdbbf0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563b58bdbda0 <col:20>
| `-OptimizeNoneAttr 0x563b58bdbdf8 <col:30>
|-CXXMethodDecl 0x563b58bdbeb0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563b58bdbe20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58bdbff8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563b58bdbf68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58bdc128 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x563b58bdc228 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x563b58bdc2f8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x563b58bdc3c8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x563b58bdc508 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563b58bdc478 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58bdc650 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563b58bdc5c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58bdc798 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x563b58bdc708 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563b58bdc850 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563b58bdc950 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563b58bdc8c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563b58bdca08 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563b58bdcac8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x563b58bdcbc8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x563b58bdcd48 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563b58bdcc88 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x563b58bdd508 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563b58bdce00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x563b58bdd468 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x563b58bdd368 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x563b58bdd5e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563b58bdd738 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563b58bdd6a8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563b58bdd7f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563b58bdda38 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563b58bdd8b0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563b58bdd928 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563b58bddbc8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x563b58bddb08 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563b58bdddd8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x563b58bddc90 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563b58bddd08 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563b58bdde98 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x563b58bde0f8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x563b58bde000 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x563b58bde1c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563b58bde1c8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58b0d768 prev 0x563b58b52a68 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b58b0d860 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x563b58b0d8f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x563b58b0da28 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x563b58b0d928 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563b58b0ee50 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563b58b0ee30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x563b58b0e9c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x563b58b0eee0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563b58b0eea0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x563b58b0d928 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x563b58b0ea30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x563b58b0ef60 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x563b58b0ef20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x563b58b0ea90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563b58b0efa0 <col:54> 'bool' false
| `-CompoundStmt 0x563b58b0f0a8 <col:61, line:38:5>
|   `-BinaryOperator 0x563b58b0f088 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x563b58b0f020 <col:9> 'const Element *' lvalue ->_context 0x563b58b0e968
|     | `-CXXThisExpr 0x563b58b0f010 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x563b58b0f070 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x563b58b0f050 <col:20> 'int' 0
|-CXXConstructorDecl 0x563b58b0dc38 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563b58b0dae8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x563b58b0db60 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563b58b0ee88 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563b58b0ee68 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x563b58b0e968 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x563b58b0f100 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x563b58b0f0c0 <col:20> 'const Element *' lvalue ParmVar 0x563b58b0dae8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x563b58b0e9c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x563b58b0f180 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563b58b0f140 <col:36> 'ErrorHandler *' lvalue ParmVar 0x563b58b0db60 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x563b58b0ea30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x563b58b0f200 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x563b58b0f1c0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x563b58b0ea90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563b58b0f240 <col:73> 'bool' false
| `-CompoundStmt 0x563b58b0f2b8 <col:80, line:46:5>
|-CXXMethodDecl 0x563b58b0dd68 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x563b58b0f330 <col:36, line:51:5>
|   `-ReturnStmt 0x563b58b0f320 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x563b58b0f308 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x563b58b0f2d8 <col:16> 'const Element *const' lvalue ->_context 0x563b58b0e968
|         `-CXXThisExpr 0x563b58b0f2c8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x563b58b0de58 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x563b58b0f3b0 <col:32, line:57:5>
|   `-ReturnStmt 0x563b58b0f3a0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x563b58b0f388 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x563b58b0f358 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x563b58b0e9c8
|         `-CXXThisExpr 0x563b58b0f348 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x563b58b0df18 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x563b58b0e0a0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x563b58b0dfd0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x563b58b0e1f0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x563b58b0e160 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563b58b0e340 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x563b58b0e2b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563b58b0e548 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x563b58b0e3f8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x563b58b0e470 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x563b58b0e878 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x563b58b0e608 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x563b58b0e688 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x563b58b0e750 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x563b58b0e930 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x563b58b0e968 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x563b58b0e9c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x563b58b0ea30 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x563b58b0ea90 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x563b58b0eae0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x563b58b0eae0
| `-ParmVarDecl 0x563b58b0ebf8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x563b58b0ec98 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x563b58b0ec98
| `-ParmVarDecl 0x563b58b0eda8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x563b58c5d578 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b58c1b0f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x563b58c1b2c8 prev 0x563b58c1b0f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563b58c1b358 <col:46, col:52> col:46 public
|-TypedefDecl 0x563b58c1b380 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c1cf50 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x563b58c1cf00 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x563b58c1b830 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x563b58c1b730 'type'
|     `-TemplateSpecializationType 0x563b58c1b6c0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x563b58c1b5a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x563b58c1b580 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x563b58c1b560 <col:24> 'unsigned long' 4
|       `-RecordType 0x563b58c1b6a0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x563b58c1b5c0 'char_array'
|-TypedefDecl 0x563b58c1d008 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x563b58c1cfd0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x563b58c1cfb0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x563b58c1cf50 'type'
|     `-ElaboratedType 0x563b58c1cf00 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x563b58c1b830 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x563b58c1b730 'type'
|         `-TemplateSpecializationType 0x563b58c1b6c0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x563b58c1b5a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x563b58c1b580 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x563b58c1b560 <col:24> 'unsigned long' 4
|           `-RecordType 0x563b58c1b6a0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x563b58c1b5c0 'char_array'
|-CXXMethodDecl 0x563b58c1d188 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x563b58c1d098 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x563b58c1d278 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x563b58c1d358 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x563b58c1d628 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x563b58c1d530 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x563b58c1d868 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563b58c1d6e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b58c1d758 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b58c1da38 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563b58c1d928 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b58c1d9a0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b58c1db98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x563b58c1dc68 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x563b58c1deb8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563b58c1dd28 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x563b58c1dda0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b58c1e118 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x563b58c1df88 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x563b58c1e000 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b58c1e2d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x563b58c1e1e8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b58c1e498 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x563b58c1e3a0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b58c1e550 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563b58c1e600 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x563b58c1e838 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563b58c1e6b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b58c1e728 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b58c1ead8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x563b58c1e9e0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x563b58c1eba0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x563b58c1ebf0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x563b58c25060 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b58c19af8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x563b58c19d08 prev 0x563b58c19af8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563b58c1b060 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x563b58c1b010 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x563b58c1aff0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x563b58c1aea0 'type'
|     `-SubstTemplateTypeParmType 0x563b58c1acc0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x563b588f1660 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b588f1608 'T'
|       `-RecordType 0x563b58c1a810 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x563b58c1a728 'sized_array_memory'
|-FieldDecl 0x563b58c250b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x563b58c25100 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563b58c25138 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x563b58c19da0 'int' sugar
|   |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563b589292f8 'T'
|   `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c251c8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x563b58c25190 'int &'
|   `-SubstTemplateTypeParmType 0x563b58c19da0 'int' sugar
|     |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b589292f8 'T'
|     `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c25288 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x563b58c25250 'const int &'
|   `-QualType 0x563b58c19da1 'const int' const
|     `-SubstTemplateTypeParmType 0x563b58c19da0 'int' sugar
|       |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b589292f8 'T'
|       `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c25318 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x563b58c252e0 'int *'
|   `-SubstTemplateTypeParmType 0x563b58c19da0 'int' sugar
|     |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b589292f8 'T'
|     `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c253a8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x563b58c25370 'const int *'
|   `-QualType 0x563b58c19da1 'const int' const
|     `-SubstTemplateTypeParmType 0x563b58c19da0 'int' sugar
|       |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b589292f8 'T'
|       `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c25f90 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x563b58c25f40 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x563b58c25f20 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x563b58c25eb0 'type'
|     `-SubstTemplateTypeParmType 0x563b58c25c70 'int' sugar
|       |-TemplateTypeParmType 0x563b588fc460 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b588fc410 'T'
|       `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c25ff8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x563b58c25250 'const int &'
|   `-QualType 0x563b58c19da1 'const int' const
|     `-SubstTemplateTypeParmType 0x563b58c19da0 'int' sugar
|       |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b589292f8 'T'
|       `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c26050 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c260b8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x563b58c252e0 'int *'
|   `-SubstTemplateTypeParmType 0x563b58c19da0 'int' sugar
|     |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b589292f8 'T'
|     `-BuiltinType 0x563b5862c580 'int'
|-TypedefDecl 0x563b58c26120 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x563b58c25370 'const int *'
|   `-QualType 0x563b58c19da1 'const int' const
|     `-SubstTemplateTypeParmType 0x563b58c19da0 'int' sugar
|       |-TemplateTypeParmType 0x563b58929350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b589292f8 'T'
|       `-BuiltinType 0x563b5862c580 'int'
|-EnumDecl 0x563b58c26178 <line:134:5> col:5
| `-EnumConstantDecl 0x563b58c26270 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563b58c26250 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563b5892a9d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563b5892a9b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563b5892a990 <col:40> 'int' 1
|-CXXConstructorDecl 0x563b58c262f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563b58c26548 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563b58c263b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b58c26450 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x563b58c26808 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x563b58c266f0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x563b58c26ac8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x563b58c269b0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x563b58c26e10 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x563b58c26cf0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x563b58c27120 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x563b58c27000 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x563b58c27410 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563b58c27258 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b58c272d0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563b58c27538 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x563b58c27618 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58c27670 <col:30> Inherited
|-CXXMethodDecl 0x563b58c276b8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x563b58c27768 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58c277c0 <col:30> Inherited
|-CXXMethodDecl 0x563b58c27888 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563b58c27938 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58c27990 <col:30> Inherited
|-CXXMethodDecl 0x563b58c279d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563b58c27a88 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58c27ae0 <col:30> Inherited
|-CXXMethodDecl 0x563b58c27b28 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563b58c27bd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58c27c30 <col:30> Inherited
|-CXXMethodDecl 0x563b58c27c78 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563b58c27d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b58c27d80 <col:30> Inherited
|-CXXMethodDecl 0x563b58c27da8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563b58c27e58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563b58c27f08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563b58c280c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563b58c27fb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b58c28030 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563b58c28218 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563b58c28188 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58c283c8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x563b58c282d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563b58c28480 <col:20>
| `-OptimizeNoneAttr 0x563b58c284d8 <col:30>
|-CXXMethodDecl 0x563b58c285f8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x563b58c28500 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563b58c286b0 <col:20>
| `-OptimizeNoneAttr 0x563b58c28708 <col:30>
|-CXXMethodDecl 0x563b58c287c0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x563b58c28730 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58c28908 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563b58c28878 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58c28a38 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x563b58c28b68 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x563b58c28c38 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x563b58c28d08 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x563b58c28e48 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x563b58c28db8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58c28f90 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563b58c28f00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b58c290d8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x563b58c29048 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563b58c29190 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563b58c29290 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563b58c29200 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563b58c29348 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563b58c29408 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x563b58c29508 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x563b58c29688 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x563b58c295c8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x563b58c29e48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563b58c29740 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x563b58c29da8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x563b58c29ca8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x563b58c29f28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563b58c2a078 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x563b58c29fe8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563b58c2a130 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563b58c2a378 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563b58c2a1f0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x563b58c2a268 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563b58c2a538 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x563b58c2a448 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x563b58c2a788 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x563b58c2a600 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x563b58c2a678 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x563b58c2a848 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x563b58c2aaa8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x563b58c2a9b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x563b58c2ab78 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58c17c68 prev 0x563b58b142c8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563b58c17d60 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x563b58c17e50 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x563b58c3c930 <col:16, line:828:9>
|-CXXDestructorDecl 0x563b58c17f40 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x563b58c3c940 <col:25, line:830:9>
|-CXXMethodDecl 0x563b58c18040 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x563b58c180f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x563b58c18198 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x563b58c18198
| `-ParmVarDecl 0x563b58c182a8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x563b58c18a68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x563b58c18a68
  `-ParmVarDecl 0x563b58c18b78 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58b140d8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x563b58b14238 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x563b58b142c8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x563b58b14380 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x563b58b14488 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x563b58b143b8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563b58c2c138 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563b58c2c118 <col:31> 'int' 0
|-CXXConstructorDecl 0x563b58bf9e58 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x563b58bf9cd0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x563b58bf9d48 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563b58c2c170 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563b58c2c150 <col:59> 'int' 0
|-CXXConstructorDecl 0x563b58bfa030 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563b58bf9f20 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x563b58bf9f98 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563b58c2c1a8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563b58c2c188 <col:55> 'int' 0
|-CXXConstructorDecl 0x563b58bfa3e8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563b58bfa1d0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x563b58bfa248 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x563b58bfa2c0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563b58c2c1e0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563b58c2c1c0 <col:31> 'int' 0
|-CXXConstructorDecl 0x563b58bfa5a8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x563b58bfa4e8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x563b58bfa6a0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x563b58bfa888 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x563b58bfa790 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x563b58bfa978 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x563b58c2c590 <col:24, line:291:5>
|   `-ReturnStmt 0x563b58c2c580 <line:290:9, col:79>
|     `-BinaryOperator 0x563b58c2c560 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x563b58c2c438 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x563b58c2c390 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x563b58c2c370 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x563b58c2c268 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x563b58c2c250 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x563b58c2c238 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x563b58c2c208 <col:18> 'Vector<String> *const' lvalue ->_conf 0x563b58c19a90
|       | |   |       `-CXXThisExpr 0x563b58c2c1f8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x563b58c2c358 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x563b58c2c340 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x563b58c2c308 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x563b58c2c2d8 <col:28, col:35> '<bound member function type>' ->size 0x563b58bdb498
|       | |           `-ImplicitCastExpr 0x563b58c2c328 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x563b58c2c2c0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x563b58c2c290 <col:28> 'Vector<String> *const' lvalue ->_conf 0x563b58c19a90
|       | |                 `-CXXThisExpr 0x563b58c2c280 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x563b58c2c420 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x563b58c2c408 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x563b58c2c3f0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x563b58c2c3c0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x563b58c2acc0
|       |         `-CXXThisExpr 0x563b58c2c3b0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x563b58c2c540 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x563b58c2c528 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x563b58c2c510 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x563b58c2c4d0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x563b58c2c4b8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x563b58c2c468 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x563b58c2ad70
|         |     |   `-CXXThisExpr 0x563b58c2c458 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x563b58c2c498 <col:73> 'int' 0
|         `-IntegerLiteral 0x563b58c2c4f0 <col:79> 'int' 0
|-CXXMethodDecl 0x563b58bfaa38 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x563b58c2c768 <col:32, line:296:5>
|   `-ReturnStmt 0x563b58c2c758 <line:295:9, col:49>
|     `-BinaryOperator 0x563b58c2c738 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x563b58c2c618 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x563b58c2c600 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x563b58c2c5e8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x563b58c2c5b8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x563b58c2acc0
|       |       `-CXXThisExpr 0x563b58c2c5a8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x563b58c2c718 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x563b58c2c700 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x563b58c2c6e8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x563b58c2c6a8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x563b58c2c690 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x563b58c2c640 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x563b58c2ad70
|         |     |   `-CXXThisExpr 0x563b58c2c630 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x563b58c2c670 <col:43> 'int' 0
|         `-IntegerLiteral 0x563b58c2c6c8 <col:49> 'int' 0
|-CXXMethodDecl 0x563b58bfab28 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x563b58c2c978 <col:19, line:306:5>
|   |-IfStmt 0x563b58c2c898 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x563b58c2c7d8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x563b58c2c7c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x563b58c2c790 <col:13> 'Vector<String> *' lvalue ->_conf 0x563b58c19a90
|   | |     `-CXXThisExpr 0x563b58c2c780 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x563b58c2c878 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x563b58c2c848 <col:13, col:20> '<bound member function type>' ->clear 0x563b58bdde98
|   |     `-ImplicitCastExpr 0x563b58c2c830 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x563b58c2c800 <col:13> 'Vector<String> *' lvalue ->_conf 0x563b58c19a90
|   |         `-CXXThisExpr 0x563b58c2c7f0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x563b58c2c920 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x563b58c2c8f0 <col:9, col:16> '<bound member function type>' .clear 0x563b58c2a848
|   |   `-MemberExpr 0x563b58c2c8c0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x563b58c2ac60
|   |     `-CXXThisExpr 0x563b58c2c8b0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x563b58c2c968 <line:305:9, col:17>
|     `-UnaryOperator 0x563b58c2c950 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b58c2c940 <col:17> 'Args *' this
|-CXXMethodDecl 0x563b58bfada8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x563b58bfacb0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x563b58bfaf28 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x563b58bfae60 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x563b58bfb2a8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x563b58bfafd0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x563b58bfb208 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x563b58bfb078 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x563b58bfb0f0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x563b58c2cc98 <col:67, line:327:5>
|     |-WhileStmt 0x563b58c2cc48 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x563b58c2ca60 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x563b58c2c9e0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x563b58b4af38 0x563b58994518 0x563b589941f0 0x563b589849c0 0x563b58984670 0x563b58983f60 0x563b589568d0 0x563b588e3da0
|     | | |-DeclRefExpr 0x563b58c2c9a0 <col:16> 'Iter' lvalue ParmVar 0x563b58bfb078 'begin' 'Iter'
|     | | `-DeclRefExpr 0x563b58c2c9c0 <col:25> 'Iter' lvalue ParmVar 0x563b58bfb0f0 'end' 'Iter'
|     | `-CompoundStmt 0x563b58c2cc28 <col:30, line:325:9>
|     |   |-CallExpr 0x563b58c2cbc8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x563b58c2caa8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x563b58c2cb98 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x563b58c2cb28 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|     |   |   `-DeclRefExpr 0x563b58c2cb08 <col:24> 'Iter' lvalue ParmVar 0x563b58bfb078 'begin' 'Iter'
|     |   `-UnaryOperator 0x563b58c2cc10 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x563b58c2cbf0 <col:15> 'Iter' lvalue ParmVar 0x563b58bfb078 'begin' 'Iter'
|     `-ReturnStmt 0x563b58c2cc88 <line:326:9, col:17>
|       `-UnaryOperator 0x563b58c2cc70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c2cc60 <col:17> 'Args *' this
|-CXXMethodDecl 0x563b58bfb3b0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x563b58bfb320 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x563b58bfb4f8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x563b58bfb468 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x563b58bfb5c0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x563b58c2cd78 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x563b58c2cd18 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x563b58c2ccc8 <col:9> '<bound member function type>' ->reset_from 0x563b58c2b0e8
|   | | `-CXXThisExpr 0x563b58c2ccb8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x563b58c2ccf8 <col:20> 'int' 0
|   `-ReturnStmt 0x563b58c2cd68 <line:352:9, col:17>
|     `-UnaryOperator 0x563b58c2cd50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b58c2cd40 <col:17> 'Args *' this
|-VarDecl 0x563b58bfb678 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x563b58bfb6e0 <col:38> 'int' 1
|-VarDecl 0x563b58bfb770 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x563b58bfb7d8 <col:39> 'int' 2
|-VarDecl 0x563b58bfb868 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x563b58bfb8d0 <col:39> 'int' 4
|-VarDecl 0x563b58bfb960 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x563b58bfb9c8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x563b58bfbd48 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x563b58bfba40 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b58bfbca8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563b58bfbaf0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfbb98 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x563b58c2ced0 <col:43, line:371:5>
|     `-ReturnStmt 0x563b58c2cec0 <line:370:9, col:34>
|       `-CallExpr 0x563b58c2ce88 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2cda8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2ce28 <col:21> 'const char *' lvalue ParmVar 0x563b58bfbaf0 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c2ce48 <col:30> 'int' 0
|         `-DeclRefExpr 0x563b58c2ce68 <col:33> 'T' lvalue ParmVar 0x563b58bfbb98 'x' 'T &'
|-FunctionTemplateDecl 0x563b58bfc078 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x563b58bfbdb0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b58bfbfd8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563b58bfbe60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfbf08 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x563b58c2d020 <col:45, line:375:5>
|     `-ReturnStmt 0x563b58c2d010 <line:374:9, col:42>
|       `-CallExpr 0x563b58c2cfd8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2cef8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2cf78 <col:21> 'const char *' lvalue ParmVar 0x563b58bfbe60 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c2cf98 <col:30> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int'
|         `-DeclRefExpr 0x563b58c2cfb8 <col:41> 'T' lvalue ParmVar 0x563b58bfbf08 'x' 'T &'
|-FunctionTemplateDecl 0x563b58bfc3a8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x563b58bfc0e0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x563b58bfc308 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x563b58bfc190 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x563b58bfc238 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x563b58c2eaa8 <col:45, line:379:5>
| |   `-ReturnStmt 0x563b58c2ea98 <line:378:9, col:43>
| |     `-CallExpr 0x563b58c2ea60 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x563b58c2e980 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x563b58c2ea00 <col:21> 'const char *' lvalue ParmVar 0x563b58bfc190 'keyword' 'const char *'
| |       |-DeclRefExpr 0x563b58c2ea20 <col:30> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int'
| |       `-DeclRefExpr 0x563b58c2ea40 <col:42> 'T' lvalue ParmVar 0x563b58bfc238 'x' 'T &'
| `-CXXMethodDecl 0x563b58c5da08 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x563b58c5d828 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x563b58c5d8f8 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x563b58bfc6d8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x563b58bfc410 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b58bfc638 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563b58bfc4c0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfc568 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x563b58c2eca8 <col:46, line:383:5>
|     `-ReturnStmt 0x563b58c2ec98 <line:382:9, col:55>
|       `-CallExpr 0x563b58c2ec60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2ead0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2eb50 <col:21> 'const char *' lvalue ParmVar 0x563b58bfc4c0 'keyword' 'const char *'
|         |-BinaryOperator 0x563b58c2ec20 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x563b58c2ebd0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563b58c2ebb0 <col:30> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563b58c2ec08 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563b58c2ebe8 <col:42> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x563b58c2ec40 <col:54> 'T' lvalue ParmVar 0x563b58bfc568 'x' 'T &'
|-FunctionTemplateDecl 0x563b58bfcad8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x563b58bfc740 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b58bfca38 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x563b58bfc7f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfc870 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563b58bfc918 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x563b58c2ede8 <col:54, line:388:5>
|     |-CallExpr 0x563b58c2ed70 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b58c2ecc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563b58c2ed00 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563b58c2ed10 <col:30> 'const char *' lvalue ParmVar 0x563b58bfc7f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b58c2ed30 <col:39> 'int' lvalue ParmVar 0x563b58bfc870 'flags' 'int'
|     | `-DeclRefExpr 0x563b58c2ed50 <col:46> 'T' lvalue ParmVar 0x563b58bfc918 'x' 'T &'
|     `-ReturnStmt 0x563b58c2edd8 <line:387:9, col:17>
|       `-UnaryOperator 0x563b58c2edc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c2edb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58bfcf88 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x563b58bfcb48 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b58bfcbc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b58bfcee8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563b58bfcc88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfcd28 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x563b58bfcdc8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b58c2ef58 <col:74, line:403:5>
|     `-ReturnStmt 0x563b58c2ef48 <line:402:9, col:56>
|       `-CallExpr 0x563b58c2ef08 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2ee18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2ee88 <col:28> 'const char *' lvalue ParmVar 0x563b58bfcc88 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c2eea8 <col:37> 'int' 0
|         |-DeclRefExpr 0x563b58c2eec8 <col:40> 'T' lvalue ParmVar 0x563b58bfcd28 'x' 'T &'
|         `-DeclRefExpr 0x563b58c2eee8 <col:43> 'const V' lvalue ParmVar 0x563b58bfcdc8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563b58bfd3f8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x563b58bfcff8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b58bfd078 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b58bfd358 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563b58bfd138 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfd1d8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x563b58bfd278 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b58c2f0c0 <col:76, line:407:5>
|     `-ReturnStmt 0x563b58c2f0b0 <line:406:9, col:65>
|       `-CallExpr 0x563b58c2f070 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2ef80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2eff0 <col:28> 'const char *' lvalue ParmVar 0x563b58bfd138 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c2f010 <col:37> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int'
|         |-DeclRefExpr 0x563b58c2f030 <col:49> 'T' lvalue ParmVar 0x563b58bfd1d8 'x' 'T &'
|         `-DeclRefExpr 0x563b58c2f050 <col:52> 'const V' lvalue ParmVar 0x563b58bfd278 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563b58bfd948 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x563b58bfd468 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b58bfd4e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b58bfd8a8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563b58bfd5a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfd628 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563b58bfd6c8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x563b58bfd768 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b58c2f228 <col:85, line:412:5>
|     |-CallExpr 0x563b58c2f1a8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b58c2f0d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x563b58c2f118 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x563b58c2f128 <col:37> 'const char *' lvalue ParmVar 0x563b58bfd5a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b58c2f148 <col:46> 'int' lvalue ParmVar 0x563b58bfd628 'flags' 'int'
|     | |-DeclRefExpr 0x563b58c2f168 <col:53> 'T' lvalue ParmVar 0x563b58bfd6c8 'x' 'T &'
|     | `-DeclRefExpr 0x563b58c2f188 <col:56> 'const V' lvalue ParmVar 0x563b58bfd768 'default_value' 'const V &'
|     `-ReturnStmt 0x563b58c2f218 <line:411:9, col:17>
|       `-UnaryOperator 0x563b58c2f200 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c2f1f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58bfddd8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x563b58bfd9c0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58bfda38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58bfdd38 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b58bfdaf8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfdb70 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x563b58bfdc18 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x563b58c2f3a8 <col:53, line:425:5>
|     `-ReturnStmt 0x563b58c2f398 <line:424:9, col:42>
|       `-CallExpr 0x563b58c2f358 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2f258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2f2d8 <col:21> 'const char *' lvalue ParmVar 0x563b58bfdaf8 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c2f2f8 <col:30> 'int' 0
|         |-DeclRefExpr 0x563b58c2f318 <col:33> 'P' lvalue ParmVar 0x563b58bfdb70 'parser' 'P'
|         `-DeclRefExpr 0x563b58c2f338 <col:41> 'T' lvalue ParmVar 0x563b58bfdc18 'x' 'T &'
|-FunctionTemplateDecl 0x563b58bfe228 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x563b58bfde48 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58bfdec8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58bfe188 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b58bfdf88 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfe000 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563b58bfe0a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x563b58c2f520 <col:55, line:429:5>
|     `-ReturnStmt 0x563b58c2f510 <line:428:9, col:50>
|       `-CallExpr 0x563b58c2f4d0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2f3d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2f450 <col:21> 'const char *' lvalue ParmVar 0x563b58bfdf88 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c2f470 <col:30> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int'
|         |-DeclRefExpr 0x563b58c2f490 <col:41> 'P' lvalue ParmVar 0x563b58bfe000 'parser' 'P'
|         `-DeclRefExpr 0x563b58c2f4b0 <col:49> 'T' lvalue ParmVar 0x563b58bfe0a8 'x' 'T &'
|-FunctionTemplateDecl 0x563b58bfe678 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x563b58bfe298 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58bfe318 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58bfe5d8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b58bfe3d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfe450 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563b58bfe4f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x563b58c2f698 <col:55, line:433:5>
|     `-ReturnStmt 0x563b58c2f688 <line:432:9, col:51>
|       `-CallExpr 0x563b58c2f648 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2f548 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2f5c8 <col:21> 'const char *' lvalue ParmVar 0x563b58bfe3d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c2f5e8 <col:30> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int'
|         |-DeclRefExpr 0x563b58c2f608 <col:42> 'P' lvalue ParmVar 0x563b58bfe450 'parser' 'P'
|         `-DeclRefExpr 0x563b58c2f628 <col:50> 'T' lvalue ParmVar 0x563b58bfe4f8 'x' 'T &'
|-FunctionTemplateDecl 0x563b58bfeac8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x563b58bfe6e8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58bfe768 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58bfea28 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b58bfe828 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfe8a0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x563b58bfe948 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x563b58c2f8c0 <col:56, line:437:5>
|     `-ReturnStmt 0x563b58c2f8b0 <line:436:9, col:63>
|       `-CallExpr 0x563b58c2f870 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2f6c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2f740 <col:21> 'const char *' lvalue ParmVar 0x563b58bfe828 'keyword' 'const char *'
|         |-BinaryOperator 0x563b58c2f810 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x563b58c2f7c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563b58c2f7a0 <col:30> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563b58c2f7f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563b58c2f7d8 <col:42> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x563b58c2f830 <col:54> 'P' lvalue ParmVar 0x563b58bfe8a0 'parser' 'P'
|         `-DeclRefExpr 0x563b58c2f850 <col:62> 'T' lvalue ParmVar 0x563b58bfe948 'x' 'T &'
|-FunctionTemplateDecl 0x563b58bfeff8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x563b58bfeb38 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58bfebb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58bfef58 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b58bfec78 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bfecf8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563b58bfed70 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x563b58bfee18 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x563b58c2fa28 <col:64, line:442:5>
|     |-CallExpr 0x563b58c2f9a8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b58c2f8d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563b58c2f918 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563b58c2f928 <col:30> 'const char *' lvalue ParmVar 0x563b58bfec78 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b58c2f948 <col:39> 'int' lvalue ParmVar 0x563b58bfecf8 'flags' 'int'
|     | |-DeclRefExpr 0x563b58c2f968 <col:46> 'P' lvalue ParmVar 0x563b58bfed70 'parser' 'P'
|     | `-DeclRefExpr 0x563b58c2f988 <col:54> 'T' lvalue ParmVar 0x563b58bfee18 'x' 'T &'
|     `-ReturnStmt 0x563b58c2fa18 <line:441:9, col:17>
|       `-UnaryOperator 0x563b58c2fa00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c2f9f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58bff5f8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x563b58bff070 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58bff0e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563b58bff168 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563b58bff558 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x563b58bff230 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bff2a8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563b58bff348 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x563b58bff418 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b58c2fbc0 <col:84, line:458:5>
|     `-ReturnStmt 0x563b58c2fbb0 <line:457:9, col:64>
|       `-CallExpr 0x563b58c2fb68 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2fa58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2fac8 <col:28> 'const char *' lvalue ParmVar 0x563b58bff230 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c2fae8 <col:37> 'int' 0
|         |-DeclRefExpr 0x563b58c2fb08 <col:40> 'P' lvalue ParmVar 0x563b58bff2a8 'parser' 'P'
|         |-DeclRefExpr 0x563b58c2fb28 <col:48> 'T' lvalue ParmVar 0x563b58bff348 'x' 'T &'
|         `-DeclRefExpr 0x563b58c2fb48 <col:51> 'const V' lvalue ParmVar 0x563b58bff418 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563b58bffb78 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x563b58bff670 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58bff6e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563b58bff768 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563b58bffad8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x563b58bff830 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bff8a8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x563b58bff948 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x563b58bff9e8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b58c2fd50 <col:86, line:462:5>
|     `-ReturnStmt 0x563b58c2fd40 <line:461:9, col:73>
|       `-CallExpr 0x563b58c2fcf8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2fbe8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2fc58 <col:28> 'const char *' lvalue ParmVar 0x563b58bff830 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c2fc78 <col:37> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int'
|         |-DeclRefExpr 0x563b58c2fc98 <col:49> 'P' lvalue ParmVar 0x563b58bff8a8 'parser' 'P'
|         |-DeclRefExpr 0x563b58c2fcb8 <col:57> 'T' lvalue ParmVar 0x563b58bff948 'x' 'T &'
|         `-DeclRefExpr 0x563b58c2fcd8 <col:60> 'const V' lvalue ParmVar 0x563b58bff9e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563b58c001d8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x563b58bffbf0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58bffc68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563b58bffce8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563b58c00138 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563b58bffdb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58bffe30 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563b58bffea8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x563b58bfff48 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x563b58bfffe8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b58c2fee0 <col:95, line:467:5>
|     |-CallExpr 0x563b58c2fe58 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b58c2fd68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x563b58c2fda8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x563b58c2fdb8 <col:37> 'const char *' lvalue ParmVar 0x563b58bffdb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b58c2fdd8 <col:46> 'int' lvalue ParmVar 0x563b58bffe30 'flags' 'int'
|     | |-DeclRefExpr 0x563b58c2fdf8 <col:53> 'P' lvalue ParmVar 0x563b58bffea8 'parser' 'P'
|     | |-DeclRefExpr 0x563b58c2fe18 <col:61> 'T' lvalue ParmVar 0x563b58bfff48 'x' 'T &'
|     | `-DeclRefExpr 0x563b58c2fe38 <col:64> 'const V' lvalue ParmVar 0x563b58bfffe8 'default_value' 'const V &'
|     `-ReturnStmt 0x563b58c2fed0 <line:466:9, col:17>
|       `-UnaryOperator 0x563b58c2feb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c2fea8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58c007b8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x563b58c00258 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c002d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b58c00358 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b58c00718 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b58c00420 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c00498 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c00538 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b58c005d8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b58c30088 <col:63, line:481:5>
|     `-ReturnStmt 0x563b58c30078 <line:480:9, col:47>
|       `-CallExpr 0x563b58c30030 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c2ff10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c2ff90 <col:21> 'const char *' lvalue ParmVar 0x563b58c00420 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c2ffb0 <col:30> 'int' 0
|         |-DeclRefExpr 0x563b58c2ffd0 <col:33> 'P' lvalue ParmVar 0x563b58c00498 'parser' 'P'
|         |-DeclRefExpr 0x563b58c2fff0 <col:41> 'T1' lvalue ParmVar 0x563b58c00538 'x1' 'T1 &'
|         `-DeclRefExpr 0x563b58c30010 <col:45> 'T2' lvalue ParmVar 0x563b58c005d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563b58c00d38 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x563b58c00830 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c008a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b58c00928 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b58c00c98 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b58c009f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c00a68 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c00b08 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b58c00ba8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b58c30228 <col:65, line:485:5>
|     `-ReturnStmt 0x563b58c30218 <line:484:9, col:55>
|       `-CallExpr 0x563b58c301d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c300b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c30130 <col:21> 'const char *' lvalue ParmVar 0x563b58c009f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c30150 <col:30> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int'
|         |-DeclRefExpr 0x563b58c30170 <col:41> 'P' lvalue ParmVar 0x563b58c00a68 'parser' 'P'
|         |-DeclRefExpr 0x563b58c30190 <col:49> 'T1' lvalue ParmVar 0x563b58c00b08 'x1' 'T1 &'
|         `-DeclRefExpr 0x563b58c301b0 <col:53> 'T2' lvalue ParmVar 0x563b58c00ba8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563b58c012b8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x563b58c00db0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c00e28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b58c00ea8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b58c01218 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b58c00f70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c00fe8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c01088 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b58c01128 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b58c303c8 <col:65, line:489:5>
|     `-ReturnStmt 0x563b58c303b8 <line:488:9, col:56>
|       `-CallExpr 0x563b58c30370 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c30250 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c302d0 <col:21> 'const char *' lvalue ParmVar 0x563b58c00f70 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c302f0 <col:30> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int'
|         |-DeclRefExpr 0x563b58c30310 <col:42> 'P' lvalue ParmVar 0x563b58c00fe8 'parser' 'P'
|         |-DeclRefExpr 0x563b58c30330 <col:50> 'T1' lvalue ParmVar 0x563b58c01088 'x1' 'T1 &'
|         `-DeclRefExpr 0x563b58c30350 <col:54> 'T2' lvalue ParmVar 0x563b58c01128 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563b58c01838 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x563b58c01330 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c013a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b58c01428 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b58c01798 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b58c014f0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c01568 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c01608 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b58c016a8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b58c30618 <col:66, line:493:5>
|     `-ReturnStmt 0x563b58c30608 <line:492:9, col:68>
|       `-CallExpr 0x563b58c305c0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c303f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c30470 <col:21> 'const char *' lvalue ParmVar 0x563b58c014f0 'keyword' 'const char *'
|         |-BinaryOperator 0x563b58c30540 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x563b58c304f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563b58c304d0 <col:30> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563b58c30528 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563b58c30508 <col:42> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x563b58c30560 <col:54> 'P' lvalue ParmVar 0x563b58c01568 'parser' 'P'
|         |-DeclRefExpr 0x563b58c30580 <col:62> 'T1' lvalue ParmVar 0x563b58c01608 'x1' 'T1 &'
|         `-DeclRefExpr 0x563b58c305a0 <col:66> 'T2' lvalue ParmVar 0x563b58c016a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563b58c065a8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x563b58c018b0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c01928 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b58c019a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b58c06508 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b58c01a70 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c01af0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c01b68 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c06318 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b58c063b8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b58c307a8 <col:74, line:498:5>
|     |-CallExpr 0x563b58c30720 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b58c30630 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563b58c30670 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563b58c30680 <col:30> 'const char *' lvalue ParmVar 0x563b58c01a70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b58c306a0 <col:39> 'int' lvalue ParmVar 0x563b58c01af0 'flags' 'int'
|     | |-DeclRefExpr 0x563b58c306c0 <col:46> 'P' lvalue ParmVar 0x563b58c01b68 'parser' 'P'
|     | |-DeclRefExpr 0x563b58c306e0 <col:54> 'T1' lvalue ParmVar 0x563b58c06318 'x1' 'T1 &'
|     | `-DeclRefExpr 0x563b58c30700 <col:58> 'T2' lvalue ParmVar 0x563b58c063b8 'x2' 'T2 &'
|     `-ReturnStmt 0x563b58c30798 <line:497:9, col:17>
|       `-UnaryOperator 0x563b58c30780 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c30770 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58c06908 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x563b58c06628 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b58c06868 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b58c066e0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c06758 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x563b58c308f0 <col:52, line:509:5>
|     `-ReturnStmt 0x563b58c308e0 <line:508:9, col:44>
|       `-CallExpr 0x563b58c308a8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c307d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c30848 <col:26> 'const char *' lvalue ParmVar 0x563b58c066e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c30868 <col:35> 'int' 0
|         `-DeclRefExpr 0x563b58c30888 <col:38> 'P' lvalue ParmVar 0x563b58c06758 'parser' 'P'
|-FunctionTemplateDecl 0x563b58c06c08 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x563b58c06970 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b58c06b68 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b58c06a20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c06a98 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x563b58c30a30 <col:54, line:513:5>
|     `-ReturnStmt 0x563b58c30a20 <line:512:9, col:52>
|       `-CallExpr 0x563b58c309e8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c30918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c30988 <col:26> 'const char *' lvalue ParmVar 0x563b58c06a20 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c309a8 <col:35> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int'
|         `-DeclRefExpr 0x563b58c309c8 <col:46> 'P' lvalue ParmVar 0x563b58c06a98 'parser' 'P'
|-FunctionTemplateDecl 0x563b58c06f08 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x563b58c06c70 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b58c06e68 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b58c06d20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c06d98 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x563b58c30b70 <col:54, line:517:5>
|     `-ReturnStmt 0x563b58c30b60 <line:516:9, col:53>
|       `-CallExpr 0x563b58c30b28 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c30a58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c30ac8 <col:26> 'const char *' lvalue ParmVar 0x563b58c06d20 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c30ae8 <col:35> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int'
|         `-DeclRefExpr 0x563b58c30b08 <col:47> 'P' lvalue ParmVar 0x563b58c06d98 'parser' 'P'
|-FunctionTemplateDecl 0x563b58c07208 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x563b58c06f70 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b58c07168 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b58c07020 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c07098 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x563b58c30d60 <col:55, line:521:5>
|     `-ReturnStmt 0x563b58c30d50 <line:520:9, col:65>
|       `-CallExpr 0x563b58c30d18 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c30b98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c30c08 <col:26> 'const char *' lvalue ParmVar 0x563b58c07020 'keyword' 'const char *'
|         |-BinaryOperator 0x563b58c30cd8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x563b58c30c88 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563b58c30c68 <col:35> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563b58c30cc0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563b58c30ca0 <col:47> 'const int' lvalue Var 0x563b58bfb770 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x563b58c30cf8 <col:59> 'P' lvalue ParmVar 0x563b58c07098 'parser' 'P'
|-FunctionTemplateDecl 0x563b58c075d8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x563b58c07270 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b58c07538 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x563b58c07320 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c073a0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c07418 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x563b58c30ea0 <col:63, line:526:5>
|     |-CallExpr 0x563b58c30e28 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b58c30d78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x563b58c30db8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x563b58c30dc8 <col:35> 'const char *' lvalue ParmVar 0x563b58c07320 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b58c30de8 <col:44> 'int' lvalue ParmVar 0x563b58c073a0 'flags' 'int'
|     | `-DeclRefExpr 0x563b58c30e08 <col:51> 'P' lvalue ParmVar 0x563b58c07418 'parser' 'P'
|     `-ReturnStmt 0x563b58c30e90 <line:525:9, col:17>
|       `-UnaryOperator 0x563b58c30e78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c30e68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58c07a28 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x563b58c07648 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c076c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c07988 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b58c07788 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c07800 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c078a8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x563b58c30ff8 <col:58, line:541:5>
|     `-ReturnStmt 0x563b58c30fe8 <line:540:9, col:39>
|       `-CallExpr 0x563b58c30fb0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c30ed0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c30f50 <col:21> 'const char *' lvalue ParmVar 0x563b58c07788 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c30f70 <col:30> 'P' lvalue ParmVar 0x563b58c07800 'parser' 'P'
|         `-DeclRefExpr 0x563b58c30f90 <col:38> 'T' lvalue ParmVar 0x563b58c078a8 'x' 'T &'
|-FunctionTemplateDecl 0x563b58c07e78 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x563b58c07a98 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c07b18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c07dd8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b58c07bd8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c07c50 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c07cf8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x563b58c31130 <col:60, line:545:5>
|     `-ReturnStmt 0x563b58c31120 <line:544:9, col:41>
|       `-CallExpr 0x563b58c310e8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c31020 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c31088 <col:23> 'const char *' lvalue ParmVar 0x563b58c07bd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c310a8 <col:32> 'P' lvalue ParmVar 0x563b58c07c50 'parser' 'P'
|         `-DeclRefExpr 0x563b58c310c8 <col:40> 'T' lvalue ParmVar 0x563b58c07cf8 'x' 'T &'
|-FunctionTemplateDecl 0x563b58c082c8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x563b58c07ee8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c07f68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c08228 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b58c08028 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c080a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c08148 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x563b58c31268 <col:60, line:549:5>
|     `-ReturnStmt 0x563b58c31258 <line:548:9, col:41>
|       `-CallExpr 0x563b58c31220 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c31158 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c311c0 <col:23> 'const char *' lvalue ParmVar 0x563b58c08028 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c311e0 <col:32> 'P' lvalue ParmVar 0x563b58c080a0 'parser' 'P'
|         `-DeclRefExpr 0x563b58c31200 <col:40> 'T' lvalue ParmVar 0x563b58c08148 'x' 'T &'
|-FunctionTemplateDecl 0x563b58c08718 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x563b58c08338 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c083b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c08678 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b58c08478 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c084f0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c08598 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x563b58c313a0 <col:61, line:553:5>
|     `-ReturnStmt 0x563b58c31390 <line:552:9, col:42>
|       `-CallExpr 0x563b58c31358 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c31290 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c312f8 <col:24> 'const char *' lvalue ParmVar 0x563b58c08478 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c31318 <col:33> 'P' lvalue ParmVar 0x563b58c084f0 'parser' 'P'
|         `-DeclRefExpr 0x563b58c31338 <col:41> 'T' lvalue ParmVar 0x563b58c08598 'x' 'T &'
|-FunctionTemplateDecl 0x563b58c08bf8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x563b58c08788 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c08808 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c08b58 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b58c088c8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c08948 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c089c0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c08a68 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x563b58c31518 <col:69, line:557:5>
|     `-ReturnStmt 0x563b58c31508 <line:556:9, col:46>
|       `-CallExpr 0x563b58c314c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c313c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c31448 <col:21> 'const char *' lvalue ParmVar 0x563b58c088c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c31468 <col:30> 'int' lvalue ParmVar 0x563b58c08948 'flags' 'int'
|         |-DeclRefExpr 0x563b58c31488 <col:37> 'P' lvalue ParmVar 0x563b58c089c0 'parser' 'P'
|         `-DeclRefExpr 0x563b58c314a8 <col:45> 'T' lvalue ParmVar 0x563b58c08a68 'x' 'T &'
|-FunctionTemplateDecl 0x563b58c08f08 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x563b58c08c70 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b58c08e68 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b58c08d20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c08d98 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x563b58c31658 <col:56, line:571:5>
|     `-ReturnStmt 0x563b58c31648 <line:570:9, col:48>
|       `-CallExpr 0x563b58c31610 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c31540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c315b0 <col:30> 'const char *' lvalue ParmVar 0x563b58c08d20 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c315d0 <col:39> 'int' 0
|         `-DeclRefExpr 0x563b58c315f0 <col:42> 'P' lvalue ParmVar 0x563b58c08d98 'parser' 'P'
|-FunctionTemplateDecl 0x563b58c09298 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x563b58c08f70 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b58c091f8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x563b58c09020 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c090a0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c09118 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x563b58c31828 <col:67, line:576:5>
|     |-CallExpr 0x563b58c317b0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b58c31670 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x563b58c316b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x563b58c316c0 <col:39> 'const char *' lvalue ParmVar 0x563b58c09020 'keyword' 'const char *'
|     | |-BinaryOperator 0x563b58c31770 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x563b58c31720 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563b58c316e0 <col:48> 'int' lvalue ParmVar 0x563b58c090a0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x563b58c31758 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563b58c31738 <col:56> 'const int' lvalue Var 0x563b58bfb960 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x563b58c31790 <col:68> 'P' lvalue ParmVar 0x563b58c09118 'parser' 'P'
|     `-ReturnStmt 0x563b58c31818 <line:575:9, col:17>
|       `-UnaryOperator 0x563b58c31800 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c317f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58c096e8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x563b58c09308 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c09388 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c09648 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b58c09448 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c094c0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c09568 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x563b58c31998 <col:62, line:592:5>
|     `-ReturnStmt 0x563b58c31988 <line:591:9, col:51>
|       `-CallExpr 0x563b58c31948 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c31858 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c318c8 <col:30> 'const char *' lvalue ParmVar 0x563b58c09448 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c318e8 <col:39> 'int' 0
|         |-DeclRefExpr 0x563b58c31908 <col:42> 'P' lvalue ParmVar 0x563b58c094c0 'parser' 'P'
|         `-DeclRefExpr 0x563b58c31928 <col:50> 'T' lvalue ParmVar 0x563b58c09568 'x' 'T &'
|-FunctionTemplateDecl 0x563b58c09bc8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x563b58c09758 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c097d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c09b28 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b58c09898 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c09918 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c09990 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c09a38 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x563b58c31b90 <col:73, line:597:5>
|     |-CallExpr 0x563b58c31b10 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b58c319b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x563b58c319f0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x563b58c31a00 <col:39> 'const char *' lvalue ParmVar 0x563b58c09898 'keyword' 'const char *'
|     | |-BinaryOperator 0x563b58c31ab0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x563b58c31a60 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563b58c31a20 <col:48> 'int' lvalue ParmVar 0x563b58c09918 'flags' 'int'
|     | | `-ImplicitCastExpr 0x563b58c31a98 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563b58c31a78 <col:56> 'const int' lvalue Var 0x563b58bfb960 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x563b58c31ad0 <col:68> 'P' lvalue ParmVar 0x563b58c09990 'parser' 'P'
|     | `-DeclRefExpr 0x563b58c31af0 <col:76> 'T' lvalue ParmVar 0x563b58c09a38 'x' 'T &'
|     `-ReturnStmt 0x563b58c31b80 <line:596:9, col:17>
|       `-UnaryOperator 0x563b58c31b68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c31b58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58c0a178 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x563b58c09c40 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c09cb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c0a0d8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x563b58c09d78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c09df0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c09fb0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563b58c31d00 <col:65, line:614:5>
|     `-ReturnStmt 0x563b58c31cf0 <line:613:9, col:46>
|       `-CallExpr 0x563b58c31cb0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c31bc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c31c30 <col:25> 'const char *' lvalue ParmVar 0x563b58c09d78 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c31c50 <col:34> 'int' 0
|         |-DeclRefExpr 0x563b58c31c70 <col:37> 'P' lvalue ParmVar 0x563b58c09df0 'parser' 'P'
|         `-DeclRefExpr 0x563b58c31c90 <col:45> 'Vector<T>' lvalue ParmVar 0x563b58c09fb0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x563b58c0a5a8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x563b58c0a1e8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b58c0a508 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x563b58c0a2a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c0a3f0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563b58c31f20 <col:55, line:618:5>
|     `-ReturnStmt 0x563b58c31f10 <line:617:9, col:55>
|       `-CallExpr 0x563b58c31ed0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c31d28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c31d98 <col:25> 'const char *' lvalue ParmVar 0x563b58c0a2a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b58c31db8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x563b58c31e90 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x563b58c31eb0 <col:54> 'Vector<T>' lvalue ParmVar 0x563b58c0a3f0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x563b58c0ab78 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x563b58c0a610 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c0a688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c0aad8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x563b58c0a748 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c0a7c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c0a840 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c0a990 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563b58c32118 <col:76, line:623:5>
|     |-CallExpr 0x563b58c32098 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b58c31f38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x563b58c31f78 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x563b58c31f88 <col:34> 'const char *' lvalue ParmVar 0x563b58c0a748 'keyword' 'const char *'
|     | |-BinaryOperator 0x563b58c32038 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x563b58c31fe8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563b58c31fa8 <col:43> 'int' lvalue ParmVar 0x563b58c0a7c8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x563b58c32020 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563b58c32000 <col:51> 'const int' lvalue Var 0x563b58bfb960 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x563b58c32058 <col:63> 'P' lvalue ParmVar 0x563b58c0a840 'parser' 'P'
|     | `-DeclRefExpr 0x563b58c32078 <col:71> 'Vector<T>' lvalue ParmVar 0x563b58c0a990 'x' 'Vector<T> &'
|     `-ReturnStmt 0x563b58c32108 <line:622:9, col:17>
|       `-UnaryOperator 0x563b58c320f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c320e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58c0b0b8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x563b58c0abf0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c0ac68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c0b018 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x563b58c0ad28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c0ada8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c0aef0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563b58c32380 <col:66, line:627:5>
|     `-ReturnStmt 0x563b58c32370 <line:626:9, col:59>
|       `-CallExpr 0x563b58c32330 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b58c32148 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b58c321b8 <col:25> 'const char *' lvalue ParmVar 0x563b58c0ad28 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b58c321d8 <col:34> 'int' lvalue ParmVar 0x563b58c0ada8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x563b58c322f0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x563b58c32310 <col:58> 'Vector<T>' lvalue ParmVar 0x563b58c0aef0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x563b58c0b148 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x563b58c32400 <col:25, line:633:5>
|   `-ReturnStmt 0x563b58c323f0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x563b58c323d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x563b58c323a8 <col:16> 'const bool' lvalue ->_status 0x563b58c198f8
|         `-CXXThisExpr 0x563b58c32398 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x563b58c0b2c8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x563b58c0b200 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x563b58c324e8 <col:27, line:639:5>
|   |-BinaryOperator 0x563b58c32490 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563b58c32418 <col:9> 'bool' lvalue ParmVar 0x563b58c0b200 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563b58c32478 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563b58c32448 <col:13> 'bool' lvalue ->_status 0x563b58c198f8
|   |     `-CXXThisExpr 0x563b58c32438 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x563b58c324d8 <line:638:9, col:17>
|     `-UnaryOperator 0x563b58c324c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b58c324b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x563b58c0b448 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x563b58c0b388 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x563b58c325d8 <col:39, line:644:5>
|   |-BinaryOperator 0x563b58c32580 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563b58c32508 <col:9> 'bool' lvalue ParmVar 0x563b58c0b388 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563b58c32568 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563b58c32538 <col:13> 'const bool' lvalue ->_status 0x563b58c198f8
|   |     `-CXXThisExpr 0x563b58c32528 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x563b58c325c8 <line:643:9, col:17>
|     `-UnaryOperator 0x563b58c325b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b58c325a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x563b58c0b510 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x563b58c32680 <col:30, line:651:5>
|   `-ReturnStmt 0x563b58c32670 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x563b58c32658 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x563b58c32628 <col:16> 'bool' lvalue ->_read_status 0x563b58b0ea90
|         `-ImplicitCastExpr 0x563b58c32608 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x563b58c325f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x563b58c0b658 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x563b58c0b5c8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x563b58c32788 <col:32, line:658:5>
|   |-BinaryOperator 0x563b58c32730 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563b58c32698 <col:9> 'bool' lvalue ParmVar 0x563b58c0b5c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563b58c32718 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563b58c326e8 <col:13> 'bool' lvalue ->_read_status 0x563b58b0ea90
|   |     `-ImplicitCastExpr 0x563b58c326c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x563b58c326b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x563b58c32778 <line:657:9, col:17>
|     `-UnaryOperator 0x563b58c32760 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b58c32750 <col:17> 'Args *' this
|-CXXMethodDecl 0x563b58c0b7a8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x563b58c0b718 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x563b58c32898 <col:44, line:663:5>
|   |-BinaryOperator 0x563b58c32840 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563b58c327a8 <col:9> 'bool' lvalue ParmVar 0x563b58c0b718 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563b58c32828 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563b58c327f8 <col:13> 'bool' lvalue ->_read_status 0x563b58b0ea90
|   |     `-ImplicitCastExpr 0x563b58c327d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x563b58c327c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x563b58c32888 <line:662:9, col:17>
|     `-UnaryOperator 0x563b58c32870 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b58c32860 <col:17> 'const Args *' this
|-CXXMethodDecl 0x563b58c0b870 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x563b58c0b938 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x563b58c0ba00 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x563b58c0bac8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x563b58c0bdd8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x563b58c0bb68 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b58c0bd38 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x563b58c0bc48 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x563b58c32c50 <col:19, line:706:5>
|     `-IfStmt 0x563b58c32c28 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x563b58c32998 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x563b58c32b58 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x563b58c32b28 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x563b58c32ae8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x563b58c329f0 <col:42> '<bound member function type>' ->simple_slot 0x563b58c2bda0
|       |     | `-CXXThisExpr 0x563b58c329e0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x563b58c32a88 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x563b58c32a40 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x563b58998fb8
|       |     | `-DeclRefExpr 0x563b58c32a20 <col:55> 'T' lvalue ParmVar 0x563b58c0bc48 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x563b58c32ac8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x563b58c32c18 <line:705:13, col:34>
|         `-CallExpr 0x563b58c32bf0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x563b58c32b78 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x563b58c32bd0 <col:33> 'T' lvalue ParmVar 0x563b58c0bc48 'x' 'T &'
|-FunctionTemplateDecl 0x563b58c0c0a8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x563b58c0be38 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b58c0c008 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x563b58c0bf18 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x563b58c33030 <col:31, line:717:5>
|     |-DeclStmt 0x563b58c32d90 <line:713:9, col:23>
|     | `-VarDecl 0x563b58c32c78 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x563b58c32d68 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x563b58c32cf0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x563b58c32d48 <col:21> 'T' lvalue ParmVar 0x563b58c0bf18 'x' 'T &'
|     |-IfStmt 0x563b58c32fe0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x563b58c32e88 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x563b58c32fc0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x563b58c32f60 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x563b58c32ef0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|     |   | `-DeclRefExpr 0x563b58c32ed0 <col:14> 'T *' lvalue Var 0x563b58c32c78 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x563b58c32fa0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x563b58c33018 <line:716:9, col:16>
|       `-DeclRefExpr 0x563b58c32ff8 <col:16> 'T *' lvalue Var 0x563b58c32c78 's' 'T *'
|-FunctionTemplateDecl 0x563b58c0c4b8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x563b58c0c108 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b58c0c188 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b58c0c418 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x563b58c0c268 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x563b58c0c308 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x563b58c33340 <col:37, line:726:5>
|     |-IfStmt 0x563b58c332d0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x563b58c332f0 <line:723:13, col:26>
|     | | `-VarDecl 0x563b58c33098 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x563b58c33188 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x563b58c33110 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x563b58c33168 <col:25> 'T' lvalue ParmVar 0x563b58c0c268 'x' 'T &'
|     | |-DeclRefExpr 0x563b58c331b0 <col:16> 'T *' lvalue Var 0x563b58c33098 's' 'T *'
|     | `-BinaryOperator 0x563b58c332b0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x563b58c33260 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x563b58c331f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|     |   | `-DeclRefExpr 0x563b58c331d0 <col:14> 'T *' lvalue Var 0x563b58c33098 's' 'T *'
|     |   `-DeclRefExpr 0x563b58c33290 <col:18> 'const V' lvalue ParmVar 0x563b58c0c308 'value' 'const V &'
|     `-ReturnStmt 0x563b58c33330 <line:725:9, col:17>
|       `-UnaryOperator 0x563b58c33318 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b58c33308 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b58c0c8b8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x563b58c0c520 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b58c0c818 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x563b58c0c5d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c0c650 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c0c6f8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x563b58c34160 <col:65, line:737:5>
|     |-DeclStmt 0x563b58c333d8 <line:732:9, col:26>
|     | `-VarDecl 0x563b58c33370 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563b58c34128 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x563b58c34148 <line:733:13, col:58>
|       | `-VarDecl 0x563b58c33400 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563b58c335e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563b58c335b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563b58c33598 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563b58c33578 <col:26, col:58> 'String' (CXXTemporary 0x563b58c33578)
|       |           `-CXXMemberCallExpr 0x563b58c33508 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563b58c33478 <col:26> '<bound member function type>' ->find 0x563b58c2b3b8
|       |             | `-CXXThisExpr 0x563b58c33468 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563b58c33540 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b58c334a8 <col:31> 'const char *' lvalue ParmVar 0x563b58c0c5d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563b58c33558 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b58c334c8 <col:40> 'int' lvalue ParmVar 0x563b58c0c650 'flags' 'int'
|       |             `-DeclRefExpr 0x563b58c334e8 <col:47> 'Args::Slot *' lvalue Var 0x563b58c33370 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563b58c33698 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563b58c33680 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563b58c33660 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563b58c33630 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563b5895af78
|       |       `-ImplicitCastExpr 0x563b58c33618 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563b58c335f8 <col:20> 'String' lvalue Var 0x563b58c33400 'str' 'String'
|       `-CompoundStmt 0x563b58c34108 <col:61, line:736:9>
|         |-DeclStmt 0x563b58c33b50 <line:734:13, col:76>
|         | `-VarDecl 0x563b58c336e8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x563b58c33b20 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563b58c33a90 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563b58c33ad8 <col:60> 'T' lvalue ParmVar 0x563b58c0c6f8 'variable' 'T &'
|         |     `-UnaryOperator 0x563b58c33b08 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563b58c33af8 <col:71> 'Args *' this
|         `-CallExpr 0x563b58c340d8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x563b58c33b78 <col:13> '<bound member function type>' ->postparse 0x563b58c2b5c8
|           | `-CXXThisExpr 0x563b58c33b68 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x563b58c34098 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x563b58c33ba8 <col:23> 'T *' lvalue Var 0x563b58c336e8 's' 'T *'
|           | `-CallExpr 0x563b58c34058 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x563b58c33e30 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x563b58c33f30 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x563b58c33f50 <col:86> 'String' lvalue Var 0x563b58c33400 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x563b58c34000 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563b58c33f90 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|           |   | `-DeclRefExpr 0x563b58c33f70 <col:92> 'T *' lvalue Var 0x563b58c336e8 's' 'T *'
|           |   `-UnaryOperator 0x563b58c34040 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x563b58c34030 <col:96> 'Args *' this
|           `-DeclRefExpr 0x563b58c340b8 <col:103> 'Args::Slot *' lvalue Var 0x563b58c33370 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b58c0ce08 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x563b58c0c928 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b58c0c9a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b58c0cd68 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563b58c0ca68 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c0cae8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c0cb88 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x563b58c0cc28 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x563b58c35000 <col:88, line:745:5>
|     |-DeclStmt 0x563b58c341f8 <line:741:9, col:26>
|     | `-VarDecl 0x563b58c34190 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b58c34418 <line:742:9, col:55>
|     | `-VarDecl 0x563b58c34220 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x563b58c34400 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x563b58c343d0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x563b58c343b8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x563b58c34398 <col:22, col:54> 'String' (CXXTemporary 0x563b58c34398)
|     |           `-CXXMemberCallExpr 0x563b58c34328 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x563b58c34298 <col:22> '<bound member function type>' ->find 0x563b58c2b3b8
|     |             | `-CXXThisExpr 0x563b58c34288 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x563b58c34360 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563b58c342c8 <col:27> 'const char *' lvalue ParmVar 0x563b58c0ca68 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x563b58c34378 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563b58c342e8 <col:36> 'int' lvalue ParmVar 0x563b58c0cae8 'flags' 'int'
|     |             `-DeclRefExpr 0x563b58c34308 <col:43> 'Args::Slot *' lvalue Var 0x563b58c34190 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x563b58c347f0 <line:743:9, col:72>
|     | `-VarDecl 0x563b58c34468 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x563b58c347c0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x563b58c34730 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x563b58c34778 <col:56> 'T' lvalue ParmVar 0x563b58c0cb88 'variable' 'T &'
|     |     `-UnaryOperator 0x563b58c347a8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x563b58c34798 <col:67> 'Args *' this
|     `-CallExpr 0x563b58c34fd0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x563b58c34818 <col:9> '<bound member function type>' ->postparse 0x563b58c2b5c8
|       | `-CXXThisExpr 0x563b58c34808 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x563b58c34f90 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x563b58c34848 <col:19> 'T *' lvalue Var 0x563b58c34468 's' 'T *'
|       | `-ParenExpr 0x563b58c34f70 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x563b58c34f40 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x563b58c34f28 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x563b58c34f10 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x563b58c34ef0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x563b58c34ec0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563b5895af78
|       |     |       `-ImplicitCastExpr 0x563b58c34ea8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x563b58c34868 <col:25> 'String' lvalue Var 0x563b58c34220 'str' 'String'
|       |     |-CallExpr 0x563b58c34d18 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x563b58c34af0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x563b58c34bf0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x563b58c34c10 <col:89> 'String' lvalue Var 0x563b58c34220 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x563b58c34cc0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x563b58c34c50 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|       |     | | `-DeclRefExpr 0x563b58c34c30 <col:95> 'T *' lvalue Var 0x563b58c34468 's' 'T *'
|       |     | `-UnaryOperator 0x563b58c34d00 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x563b58c34cf0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x563b58c34e88 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x563b58c34e68 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x563b58c34e38 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x563b58c34de8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x563b58c34d78 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|       |         | | `-DeclRefExpr 0x563b58c34d58 <col:109> 'T *' lvalue Var 0x563b58c34468 's' 'T *'
|       |         | `-DeclRefExpr 0x563b58c34e18 <col:113> 'const V' lvalue ParmVar 0x563b58c0cc28 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x563b58c34e58 <col:120> 'bool' true
|       `-DeclRefExpr 0x563b58c34fb0 <col:128> 'Args::Slot *' lvalue Var 0x563b58c34190 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b58c0d338 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x563b58c0ce80 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c0cef8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c0d298 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b58c0cfb8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c0d038 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c0d0b0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c0d158 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x563b58c35bf8 <col:75, line:754:5>
|     |-DeclStmt 0x563b58c350a8 <line:749:9, col:26>
|     | `-VarDecl 0x563b58c35040 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563b58c35bc0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x563b58c35be0 <line:750:13, col:58>
|       | `-VarDecl 0x563b58c350d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563b58c352b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563b58c35280 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563b58c35268 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563b58c35248 <col:26, col:58> 'String' (CXXTemporary 0x563b58c35248)
|       |           `-CXXMemberCallExpr 0x563b58c351d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563b58c35148 <col:26> '<bound member function type>' ->find 0x563b58c2b3b8
|       |             | `-CXXThisExpr 0x563b58c35138 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563b58c35210 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b58c35178 <col:31> 'const char *' lvalue ParmVar 0x563b58c0cfb8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563b58c35228 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b58c35198 <col:40> 'int' lvalue ParmVar 0x563b58c0d038 'flags' 'int'
|       |             `-DeclRefExpr 0x563b58c351b8 <col:47> 'Args::Slot *' lvalue Var 0x563b58c35040 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563b58c35368 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563b58c35350 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563b58c35330 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563b58c35300 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563b5895af78
|       |       `-ImplicitCastExpr 0x563b58c352e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563b58c352c8 <col:20> 'String' lvalue Var 0x563b58c350d0 'str' 'String'
|       `-CompoundStmt 0x563b58c35ba0 <col:61, line:753:9>
|         |-DeclStmt 0x563b58c35740 <line:751:13, col:63>
|         | `-VarDecl 0x563b58c353b8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x563b58c35710 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563b58c35680 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563b58c356c8 <col:47> 'T' lvalue ParmVar 0x563b58c0d158 'variable' 'T &'
|         |     `-UnaryOperator 0x563b58c356f8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563b58c356e8 <col:58> 'Args *' this
|         `-CallExpr 0x563b58c35b70 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x563b58c35768 <col:13> '<bound member function type>' ->postparse 0x563b58c2b5c8
|           | `-CXXThisExpr 0x563b58c35758 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x563b58c35b30 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x563b58c35798 <col:23> 'T *' lvalue Var 0x563b58c353b8 's' 'T *'
|           | `-CallExpr 0x563b58c35af0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x563b58c35980 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x563b58c359c8 <col:56> 'P' lvalue ParmVar 0x563b58c0d0b0 'parser' 'P'
|           |   |-DeclRefExpr 0x563b58c359e8 <col:64> 'String' lvalue Var 0x563b58c350d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x563b58c35a98 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563b58c35a28 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|           |   | `-DeclRefExpr 0x563b58c35a08 <col:70> 'T *' lvalue Var 0x563b58c353b8 's' 'T *'
|           |   `-UnaryOperator 0x563b58c35ad8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x563b58c35ac8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x563b58c35b50 <col:81> 'Args::Slot *' lvalue Var 0x563b58c35040 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b58c0d998 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x563b58c0d3b0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b58c0d428 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x563b58c0d4a8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563b58c0d8f8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563b58c0d570 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c0d5f0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c0d668 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c0d708 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x563b58c0d7a8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x563b58c38d00 <col:98, line:762:5>
|     |-DeclStmt 0x563b58c35c90 <line:758:9, col:26>
|     | `-VarDecl 0x563b58c35c28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b58c35eb0 <line:759:9, col:55>
|     | `-VarDecl 0x563b58c35cb8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x563b58c35e98 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x563b58c35e68 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x563b58c35e50 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x563b58c35e30 <col:22, col:54> 'String' (CXXTemporary 0x563b58c35e30)
|     |           `-CXXMemberCallExpr 0x563b58c35dc0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x563b58c35d30 <col:22> '<bound member function type>' ->find 0x563b58c2b3b8
|     |             | `-CXXThisExpr 0x563b58c35d20 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x563b58c35df8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563b58c35d60 <col:27> 'const char *' lvalue ParmVar 0x563b58c0d570 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x563b58c35e10 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563b58c35d80 <col:36> 'int' lvalue ParmVar 0x563b58c0d5f0 'flags' 'int'
|     |             `-DeclRefExpr 0x563b58c35da0 <col:43> 'Args::Slot *' lvalue Var 0x563b58c35c28 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x563b58c362d0 <line:760:9, col:59>
|     | `-VarDecl 0x563b58c35f08 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x563b58c362a0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x563b58c36210 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x563b58c36258 <col:43> 'T' lvalue ParmVar 0x563b58c0d708 'variable' 'T &'
|     |     `-UnaryOperator 0x563b58c36288 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x563b58c36278 <col:54> 'Args *' this
|     `-CallExpr 0x563b58c38cd0 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x563b58c362f8 <col:9> '<bound member function type>' ->postparse 0x563b58c2b5c8
|       | `-CXXThisExpr 0x563b58c362e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x563b58c36918 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x563b58c36328 <col:19> 'T *' lvalue Var 0x563b58c35f08 's' 'T *'
|       | `-ParenExpr 0x563b58c368f8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x563b58c368c8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x563b58c368b0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x563b58c36898 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x563b58c36878 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x563b58c36848 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563b5895af78
|       |     |       `-ImplicitCastExpr 0x563b58c36830 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x563b58c36348 <col:25> 'String' lvalue Var 0x563b58c35cb8 'str' 'String'
|       |     |-CallExpr 0x563b58c366a0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x563b58c36530 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x563b58c36578 <col:59> 'P' lvalue ParmVar 0x563b58c0d668 'parser' 'P'
|       |     | |-DeclRefExpr 0x563b58c36598 <col:67> 'String' lvalue Var 0x563b58c35cb8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x563b58c36648 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x563b58c365d8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|       |     | | `-DeclRefExpr 0x563b58c365b8 <col:73> 'T *' lvalue Var 0x563b58c35f08 's' 'T *'
|       |     | `-UnaryOperator 0x563b58c36688 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x563b58c36678 <col:77> 'Args *' this
|       |     `-ParenExpr 0x563b58c36810 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x563b58c367f0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x563b58c367c0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x563b58c36770 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x563b58c36700 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|       |         | | `-DeclRefExpr 0x563b58c366e0 <col:87> 'T *' lvalue Var 0x563b58c35f08 's' 'T *'
|       |         | `-DeclRefExpr 0x563b58c367a0 <col:91> 'const V' lvalue ParmVar 0x563b58c0d7a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x563b58c367e0 <col:98> 'bool' true
|       `-DeclRefExpr 0x563b58c36938 <col:106> 'Args::Slot *' lvalue Var 0x563b58c35c28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b58c0e008 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x563b58c0da18 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c0da98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b58c0db18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b58c0df68 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b58c0dbe0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c0dc60 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c0dcd8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c0dd78 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x563b58c0de18 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x563b58c39cd8 <col:60, line:773:5>
|     |-DeclStmt 0x563b58c38da8 <line:767:9, col:26>
|     | `-VarDecl 0x563b58c38d40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563b58c39ca0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x563b58c39cc0 <line:768:13, col:58>
|       | `-VarDecl 0x563b58c38dd0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563b58c38fb0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563b58c38f80 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563b58c38f68 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563b58c38f48 <col:26, col:58> 'String' (CXXTemporary 0x563b58c38f48)
|       |           `-CXXMemberCallExpr 0x563b58c38ed8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563b58c38e48 <col:26> '<bound member function type>' ->find 0x563b58c2b3b8
|       |             | `-CXXThisExpr 0x563b58c38e38 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563b58c38f10 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b58c38e78 <col:31> 'const char *' lvalue ParmVar 0x563b58c0dbe0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563b58c38f28 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b58c38e98 <col:40> 'int' lvalue ParmVar 0x563b58c0dc60 'flags' 'int'
|       |             `-DeclRefExpr 0x563b58c38eb8 <col:47> 'Args::Slot *' lvalue Var 0x563b58c38d40 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563b58c39068 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563b58c39050 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563b58c39030 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563b58c39000 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563b5895af78
|       |       `-ImplicitCastExpr 0x563b58c38fe8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563b58c38fc8 <col:20> 'String' lvalue Var 0x563b58c38dd0 'str' 'String'
|       `-CompoundStmt 0x563b58c39c78 <col:61, line:772:9>
|         |-DeclStmt 0x563b58c393a0 <line:769:13, col:66>
|         | `-VarDecl 0x563b58c390b8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x563b58c39370 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563b58c392e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563b58c39328 <col:49> 'T1' lvalue ParmVar 0x563b58c0dd78 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x563b58c39358 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563b58c39348 <col:61> 'Args *' this
|         |-DeclStmt 0x563b58c39710 <line:770:13, col:66>
|         | `-VarDecl 0x563b58c39428 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x563b58c396e0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563b58c39650 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563b58c39698 <col:49> 'T2' lvalue ParmVar 0x563b58c0de18 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x563b58c396c8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563b58c396b8 <col:61> 'Args *' this
|         `-CallExpr 0x563b58c39c48 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x563b58c39738 <col:13> '<bound member function type>' ->postparse 0x563b58c2b5c8
|           | `-CXXThisExpr 0x563b58c39728 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x563b58c39c08 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x563b58c397a8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x563b58c39768 <col:23> 'T1 *' lvalue Var 0x563b58c390b8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x563b58c39788 <col:29> 'T2 *' lvalue Var 0x563b58c39428 's2' 'T2 *'
|           | `-CallExpr 0x563b58c39bc0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x563b58c39990 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x563b58c399d8 <col:63> 'P' lvalue ParmVar 0x563b58c0dcd8 'parser' 'P'
|           |   |-DeclRefExpr 0x563b58c399f8 <col:71> 'String' lvalue Var 0x563b58c38dd0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x563b58c39aa8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563b58c39a38 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|           |   | `-DeclRefExpr 0x563b58c39a18 <col:77> 'T1 *' lvalue Var 0x563b58c390b8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x563b58c39b68 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563b58c39af8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|           |   | `-DeclRefExpr 0x563b58c39ad8 <col:82> 'T2 *' lvalue Var 0x563b58c39428 's2' 'T2 *'
|           |   `-UnaryOperator 0x563b58c39ba8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x563b58c39b98 <col:87> 'Args *' this
|           `-DeclRefExpr 0x563b58c39c28 <col:94> 'Args::Slot *' lvalue Var 0x563b58c38d40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b58c16d68 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x563b58c0e088 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b58c16cc8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x563b58c0e140 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c0e1c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c0e238 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x563b58c3a1f0 <col:67, line:780:5>
|     |-DeclStmt 0x563b58c39d70 <line:777:9, col:26>
|     | `-VarDecl 0x563b58c39d08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563b58c3a1b8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x563b58c3a1d8 <line:778:13, col:58>
|       | `-VarDecl 0x563b58c39d98 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563b58c39f78 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563b58c39f48 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563b58c39f30 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563b58c39f10 <col:26, col:58> 'String' (CXXTemporary 0x563b58c39f10)
|       |           `-CXXMemberCallExpr 0x563b58c39ea0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563b58c39e10 <col:26> '<bound member function type>' ->find 0x563b58c2b3b8
|       |             | `-CXXThisExpr 0x563b58c39e00 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563b58c39ed8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b58c39e40 <col:31> 'const char *' lvalue ParmVar 0x563b58c0e140 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563b58c39ef0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b58c39e60 <col:40> 'int' lvalue ParmVar 0x563b58c0e1c0 'flags' 'int'
|       |             `-DeclRefExpr 0x563b58c39e80 <col:47> 'Args::Slot *' lvalue Var 0x563b58c39d08 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563b58c3a030 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563b58c3a018 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563b58c39ff8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563b58c39fc8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563b5895af78
|       |       `-ImplicitCastExpr 0x563b58c39fb0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563b58c39f90 <col:20> 'String' lvalue Var 0x563b58c39d98 'str' 'String'
|       `-CallExpr 0x563b58c3a188 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x563b58c3a058 <col:13> '<bound member function type>' ->postparse 0x563b58c2b5c8
|         | `-CXXThisExpr 0x563b58c3a048 <col:13> 'Args *' implicit this
|         |-CallExpr 0x563b58c3a138 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x563b58c3a0a8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x563b58c3a088 <col:23> 'P' lvalue ParmVar 0x563b58c0e238 'parser' 'P'
|         | |-DeclRefExpr 0x563b58c3a0f0 <col:36> 'String' lvalue Var 0x563b58c39d98 'str' 'String'
|         | `-UnaryOperator 0x563b58c3a120 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x563b58c3a110 <col:42> 'Args *' this
|         `-DeclRefExpr 0x563b58c3a168 <col:49> 'Args::Slot *' lvalue Var 0x563b58c39d08 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b58c17108 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x563b58c16dd8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b58c17068 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x563b58c16e90 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c16f10 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c16f88 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x563b58c3ab60 <col:71, line:792:5>
|     |-DeclStmt 0x563b58c3a288 <line:784:9, col:26>
|     | `-VarDecl 0x563b58c3a220 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b58c3a358 <line:785:9, col:29>
|     | `-VarDecl 0x563b58c3a2b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x563b58c3a340 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x563b58c3a320 <col:28> 'int' 1
|     |-WhileStmt 0x563b58c3aa10 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x563b58c3aa30 <line:786:16, col:61>
|     | | `-VarDecl 0x563b58c3a380 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x563b58c3a560 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x563b58c3a530 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x563b58c3a518 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x563b58c3a4f8 <col:29, col:61> 'String' (CXXTemporary 0x563b58c3a4f8)
|     | |           `-CXXMemberCallExpr 0x563b58c3a488 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x563b58c3a3f8 <col:29> '<bound member function type>' ->find 0x563b58c2b3b8
|     | |             | `-CXXThisExpr 0x563b58c3a3e8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x563b58c3a4c0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b58c3a428 <col:34> 'const char *' lvalue ParmVar 0x563b58c16e90 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x563b58c3a4d8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b58c3a448 <col:43> 'int' lvalue ParmVar 0x563b58c16f10 'flags' 'int'
|     | |             `-DeclRefExpr 0x563b58c3a468 <col:50> 'Args::Slot *' lvalue Var 0x563b58c3a220 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x563b58c3a618 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563b58c3a600 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563b58c3a5e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563b58c3a5b0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563b5895af78
|     | |       `-ImplicitCastExpr 0x563b58c3a598 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x563b58c3a578 <col:23> 'String' lvalue Var 0x563b58c3a380 'str' 'String'
|     | `-CompoundStmt 0x563b58c3a9e8 <col:64, line:790:9>
|     |   |-CallExpr 0x563b58c3a770 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x563b58c3a640 <col:13> '<bound member function type>' ->postparse 0x563b58c2b5c8
|     |   | | `-CXXThisExpr 0x563b58c3a630 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x563b58c3a720 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x563b58c3a690 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x563b58c3a670 <col:23> 'P' lvalue ParmVar 0x563b58c16f88 'parser' 'P'
|     |   | | |-DeclRefExpr 0x563b58c3a6d8 <col:36> 'String' lvalue Var 0x563b58c3a380 'str' 'String'
|     |   | | `-UnaryOperator 0x563b58c3a708 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x563b58c3a6f8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x563b58c3a750 <col:49> 'Args::Slot *' lvalue Var 0x563b58c3a220 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x563b58c3a908 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x563b58c3a7a0 <col:13> 'int' lvalue Var 0x563b58c3a2b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x563b58c3a8f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x563b58c3a8d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x563b58c3a838 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x563b58c3a818 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x563b58c3a800 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x563b58c3a7c0 <col:28> 'int' lvalue Var 0x563b58c3a2b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x563b58c3a7e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x563b58c3a8b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x563b58c3a888 <col:49> 'bool' lvalue ->_read_status 0x563b58b0ea90
|     |   |         `-ImplicitCastExpr 0x563b58c3a868 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x563b58c3a858 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x563b58c3a9b8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x563b58c3a928 <col:13> 'int' lvalue ParmVar 0x563b58c16f10 'flags' 'int'
|     |     `-UnaryOperator 0x563b58c3a9a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x563b58c3a988 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563b58c3a968 <col:23> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x563b58c3ab40 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x563b58c3aa78 <col:9> 'bool' lvalue ->_read_status 0x563b58b0ea90
|       | `-ImplicitCastExpr 0x563b58c3aa58 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x563b58c3aa48 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x563b58c3ab20 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x563b58c3ab00 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x563b58c3aae8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x563b58c3aaa8 <col:25> 'int' lvalue Var 0x563b58c3a2b8 'read_status' 'int'
|           `-IntegerLiteral 0x563b58c3aac8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x563b58c175e8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x563b58c17178 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c171f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c17548 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b58c172b8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c17338 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c173b0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c17458 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x563b58c3baf0 <col:84, line:805:5>
|     |-DeclStmt 0x563b58c3ac08 <line:796:9, col:26>
|     | `-VarDecl 0x563b58c3aba0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b58c3acd8 <line:797:9, col:29>
|     | `-VarDecl 0x563b58c3ac38 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x563b58c3acc0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x563b58c3aca0 <col:28> 'int' 1
|     |-DeclStmt 0x563b58c3b010 <line:798:9, col:71>
|     | `-VarDecl 0x563b58c3ad28 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x563b58c3afe0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x563b58c3af50 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x563b58c3af98 <col:55> 'T' lvalue ParmVar 0x563b58c17458 'variable' 'T &'
|     |     `-UnaryOperator 0x563b58c3afc8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x563b58c3afb8 <col:66> 'Args *' this
|     |-WhileStmt 0x563b58c3b9a0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x563b58c3b9c0 <line:799:16, col:61>
|     | | `-VarDecl 0x563b58c3b038 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x563b58c3b218 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x563b58c3b1e8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x563b58c3b1d0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x563b58c3b1b0 <col:29, col:61> 'String' (CXXTemporary 0x563b58c3b1b0)
|     | |           `-CXXMemberCallExpr 0x563b58c3b140 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x563b58c3b0b0 <col:29> '<bound member function type>' ->find 0x563b58c2b3b8
|     | |             | `-CXXThisExpr 0x563b58c3b0a0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x563b58c3b178 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b58c3b0e0 <col:34> 'const char *' lvalue ParmVar 0x563b58c172b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x563b58c3b190 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b58c3b100 <col:43> 'int' lvalue ParmVar 0x563b58c17338 'flags' 'int'
|     | |             `-DeclRefExpr 0x563b58c3b120 <col:50> 'Args::Slot *' lvalue Var 0x563b58c3aba0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x563b58c3b2d0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563b58c3b2b8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563b58c3b298 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563b58c3b268 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563b5895af78
|     | |       `-ImplicitCastExpr 0x563b58c3b250 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x563b58c3b230 <col:23> 'String' lvalue Var 0x563b58c3b038 'str' 'String'
|     | `-CompoundStmt 0x563b58c3b978 <col:64, line:803:9>
|     |   |-CallExpr 0x563b58c3b700 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x563b58c3b2f8 <col:13> '<bound member function type>' ->postparse 0x563b58c2b5c8
|     |   | | `-CXXThisExpr 0x563b58c3b2e8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x563b58c3b6c0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x563b58c3b328 <col:23> 'T *' lvalue Var 0x563b58c3ad28 's' 'T *'
|     |   | | `-CallExpr 0x563b58c3b680 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x563b58c3b510 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x563b58c3b558 <col:56> 'P' lvalue ParmVar 0x563b58c173b0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x563b58c3b578 <col:64> 'String' lvalue Var 0x563b58c3b038 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x563b58c3b628 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x563b58c3b5b8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|     |   | |   | `-DeclRefExpr 0x563b58c3b598 <col:70> 'T *' lvalue Var 0x563b58c3ad28 's' 'T *'
|     |   | |   `-UnaryOperator 0x563b58c3b668 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x563b58c3b658 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x563b58c3b6e0 <col:81> 'Args::Slot *' lvalue Var 0x563b58c3aba0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x563b58c3b898 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x563b58c3b730 <col:13> 'int' lvalue Var 0x563b58c3ac38 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x563b58c3b880 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x563b58c3b860 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x563b58c3b7c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x563b58c3b7a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x563b58c3b790 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x563b58c3b750 <col:28> 'int' lvalue Var 0x563b58c3ac38 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x563b58c3b770 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x563b58c3b848 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x563b58c3b818 <col:49> 'bool' lvalue ->_read_status 0x563b58b0ea90
|     |   |         `-ImplicitCastExpr 0x563b58c3b7f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x563b58c3b7e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x563b58c3b948 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x563b58c3b8b8 <col:13> 'int' lvalue ParmVar 0x563b58c17338 'flags' 'int'
|     |     `-UnaryOperator 0x563b58c3b930 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x563b58c3b918 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563b58c3b8f8 <col:23> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x563b58c3bad0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x563b58c3ba08 <col:9> 'bool' lvalue ->_read_status 0x563b58b0ea90
|       | `-ImplicitCastExpr 0x563b58c3b9e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x563b58c3b9d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x563b58c3bab0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x563b58c3ba90 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x563b58c3ba78 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x563b58c3ba38 <col:25> 'int' lvalue Var 0x563b58c3ac38 'read_status' 'int'
|           `-IntegerLiteral 0x563b58c3ba58 <col:40> 'int' 1
|-FunctionTemplateDecl 0x563b58c17bc8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x563b58c17660 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b58c176d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b58c17b28 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x563b58c17798 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b58c17818 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x563b58c17890 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x563b58c179e0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x563b58c3c8f8 <col:87, line:821:5>
|     |-DeclStmt 0x563b58c3bba0 <line:809:9, col:26>
|     | `-VarDecl 0x563b58c3bb38 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b58c3bc70 <line:810:9, col:29>
|     | `-VarDecl 0x563b58c3bbd0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x563b58c3bc58 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x563b58c3bc38 <col:28> 'int' 1
|     |-DeclStmt 0x563b58c3beb8 <line:811:9, col:38>
|     | `-VarDecl 0x563b58c3bda0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x563b58c3be90 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x563b58c3be18 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x563b58c3be70 <col:29> 'Vector<T>' lvalue ParmVar 0x563b58c179e0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x563b58c3c7a8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x563b58c3c7c8 <line:812:16, col:61>
|     | | `-VarDecl 0x563b58c3bee0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x563b58c3c0c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x563b58c3c090 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x563b58c3c078 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x563b58c3c058 <col:29, col:61> 'String' (CXXTemporary 0x563b58c3c058)
|     | |           `-CXXMemberCallExpr 0x563b58c3bfe8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x563b58c3bf58 <col:29> '<bound member function type>' ->find 0x563b58c2b3b8
|     | |             | `-CXXThisExpr 0x563b58c3bf48 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x563b58c3c020 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b58c3bf88 <col:34> 'const char *' lvalue ParmVar 0x563b58c17798 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x563b58c3c038 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b58c3bfa8 <col:43> 'int' lvalue ParmVar 0x563b58c17818 'flags' 'int'
|     | |             `-DeclRefExpr 0x563b58c3bfc8 <col:50> 'Args::Slot *' lvalue Var 0x563b58c3bb38 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x563b58c3c178 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563b58c3c160 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563b58c3c140 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563b58c3c110 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563b5895af78
|     | |       `-ImplicitCastExpr 0x563b58c3c0f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x563b58c3c0d8 <col:23> 'String' lvalue Var 0x563b58c3bee0 'str' 'String'
|     | `-CompoundStmt 0x563b58c3c770 <col:64, line:819:9>
|     |   |-DeclStmt 0x563b58c3c238 <line:813:13, col:23>
|     |   | `-VarDecl 0x563b58c3c1a0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x563b58c3c218 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x563b58c3c3b8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x563b58c3c260 <col:13> '<bound member function type>' ->postparse 0x563b58c2b5c8
|     |   | | `-CXXThisExpr 0x563b58c3c250 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x563b58c3c360 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x563b58c3c2b0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x563b58c3c290 <col:23> 'P' lvalue ParmVar 0x563b58c17890 'parser' 'P'
|     |   | | |-DeclRefExpr 0x563b58c3c2f8 <col:36> 'String' lvalue Var 0x563b58c3bee0 'str' 'String'
|     |   | | |-DeclRefExpr 0x563b58c3c318 <col:41> 'T' lvalue Var 0x563b58c3c1a0 'sx' 'T'
|     |   | | `-UnaryOperator 0x563b58c3c348 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x563b58c3c338 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x563b58c3c398 <col:53> 'Args::Slot *' lvalue Var 0x563b58c3bb38 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x563b58c3c510 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x563b58c3c448 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x563b58c3c418 <col:17> 'bool' lvalue ->_read_status 0x563b58b0ea90
|     |   | |   `-ImplicitCastExpr 0x563b58c3c3f8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x563b58c3c3e8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x563b58c3c4e8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x563b58c3c480 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x563b58c3c460 <col:17> 'Vector<T> *' lvalue Var 0x563b58c3bda0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x563b58c3c4c8 <col:30> 'T' lvalue Var 0x563b58c3c1a0 'sx' 'T'
|     |   |-BinaryOperator 0x563b58c3c690 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x563b58c3c528 <col:13> 'int' lvalue Var 0x563b58c3bbd0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x563b58c3c678 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x563b58c3c658 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x563b58c3c5c0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x563b58c3c5a0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x563b58c3c588 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x563b58c3c548 <col:28> 'int' lvalue Var 0x563b58c3bbd0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x563b58c3c568 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x563b58c3c640 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x563b58c3c610 <col:49> 'bool' lvalue ->_read_status 0x563b58b0ea90
|     |   |         `-ImplicitCastExpr 0x563b58c3c5f0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x563b58c3c5e0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x563b58c3c740 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x563b58c3c6b0 <col:13> 'int' lvalue ParmVar 0x563b58c17818 'flags' 'int'
|     |     `-UnaryOperator 0x563b58c3c728 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x563b58c3c710 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563b58c3c6f0 <col:23> 'const int' lvalue Var 0x563b58bfb678 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x563b58c3c8d8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x563b58c3c810 <col:9> 'bool' lvalue ->_read_status 0x563b58b0ea90
|       | `-ImplicitCastExpr 0x563b58c3c7f0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x563b58c3c7e0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x563b58c3c8b8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x563b58c3c898 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x563b58c3c880 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x563b58c3c840 <col:25> 'int' lvalue Var 0x563b58c3bbd0 'read_status' 'int'
|           `-IntegerLiteral 0x563b58c3c860 <col:40> 'int' 1
|-AccessSpecDecl 0x563b58c17c40 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x563b58c17c68 prev 0x563b58b142c8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x563b58c17d60 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x563b58c17e50 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x563b58c3c930 <col:16, line:828:9>
| |-CXXDestructorDecl 0x563b58c17f40 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x563b58c3c940 <col:25, line:830:9>
| |-CXXMethodDecl 0x563b58c18040 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x563b58c180f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x563b58c18198 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x563b58c18198
| | `-ParmVarDecl 0x563b58c182a8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x563b58c18a68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x563b58c18a68
|   `-ParmVarDecl 0x563b58c18b78 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x563b58c18318 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x563b58c18478 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x563b58c18670 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x563b58c18520 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x563b58c18598 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x563b58c3cb20 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x563b58c18928 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x563b58c3c990 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563b58c3c950 <col:20> 'void *' lvalue ParmVar 0x563b58c18520 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x563b58c18990 '_slot' 'char *'
| | | `-CXXNewExpr 0x563b58c3ca18 <col:32, col:45> 'char *' array Function 0x563b5877ebf8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x563b58c3ca00 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x563b58c3c9d0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x563b58c18598 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x563b58c189f0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x563b58c3cae0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x563b58c3caa0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x563b58c18598 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x563b58c3cba0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x563b58c18770 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x563b58c17f40 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x563b58c3cc28 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x563b58c3cc08 <line:840:13, col:22> 'void' array Function 0x563b5877ef58 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x563b58c3cbf0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x563b58c3cbc0 <col:22> 'char *' lvalue ->_slot 0x563b58c18990
| |         `-CXXThisExpr 0x563b58c3cbb0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x563b58c18870 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x563b58c18040 Slot::store 'void ()' ]
| | `-CompoundStmt 0x563b58c3ce18 <col:22, line:844:9>
| |   `-CallExpr 0x563b58c3cd80 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x563b58c3cd68 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563b58c3cd48 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x563b5888a9d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x563b58c3cdb8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x563b58c3cc98 <col:20> 'void *' lvalue ->_ptr 0x563b58c18928
| |     |   `-CXXThisExpr 0x563b58c3cc88 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x563b58c3cde8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x563b58c3cdd0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x563b58c3ccd8 <col:26> 'char *' lvalue ->_slot 0x563b58c18990
| |     |     `-CXXThisExpr 0x563b58c3ccc8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x563b58c3ce00 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x563b58c3cd18 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x563b58c189f0
| |         `-CXXThisExpr 0x563b58c3cd08 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x563b58c18928 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x563b58c18990 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x563b58c189f0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x563b58c18be8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x563b58c18be8
| | `-ParmVarDecl 0x563b58c18cf8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x563b58c18d98 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x563b58c18d98
|   `-ParmVarDecl 0x563b58c18ea8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x563b58c19048 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x563b58c18f18 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x563b58c18fb8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x563b58c192e0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x563b58c194d8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x563b58c193a8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x563b58c19658 '_ptr' 'T *'
|   | | `-ParenListExpr 0x563b58c3ce50 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x563b58c3ce30 <col:20> 'T *' lvalue ParmVar 0x563b58c193a8 'ptr' 'T *'
|   | `-CompoundStmt 0x563b58c3cea0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x563b58c195a8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x563b58c18040 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x563b58c3d050 <col:22, line:857:9>
|   |   `-CallExpr 0x563b58c3d020 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x563b58c3ceb0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x563b58943108 0x563b588ed438
|   |     |-CXXOperatorCallExpr 0x563b58c3cfb0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x563b58c3cf40 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b58b500b8 0x563b58b4fcd8 0x563b58b4f908 0x563b58b4f528 0x563b58b4f148 0x563b58b4ed78
|   |     | `-MemberExpr 0x563b58c3cf10 <col:29> 'T *' lvalue ->_ptr 0x563b58c19658
|   |     |   `-CXXThisExpr 0x563b58c3cf00 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x563b58c3cff0 <col:35> 'T' lvalue ->_slot 0x563b58c196b8
|   |       `-CXXThisExpr 0x563b58c3cfe0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x563b58c19658 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x563b58c196b8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x563b58c19720 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x563b58c19820 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x563b58c19870 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58c19800 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x563b58c197e0 <col:31> 'int' 48
|-FieldDecl 0x563b58c19898 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x563b58c198f8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x563b58c19958 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x563b58c19a90 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x563b58c2ac60 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x563b58c2acc0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x563b58c2ad70 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x563b58c2af98 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x563b58c2aea0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x563b58c2b0e8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x563b58c2b058 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x563b58c2b3b8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x563b58c2b1a8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x563b58c2b228 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x563b58c2b2d0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x563b58c2b5c8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x563b58c2b480 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x563b58c2b4f8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x563b58c2b698 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x563b58c2b7e8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x563b58c2b750 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x563b58c2bb78 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x563b58c2b8a8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x563b58c2b928 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x563b58c2b9d0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x563b58c2ba88 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x563b58c2bda0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x563b58c2bc50 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x563b58c2bcc8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x563b58c2c0b8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x563b58c2be50 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x563b58c2c018 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x563b58c2bf28 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b5894be30 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b5894bf48 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x563b5894bfd8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x563b5894c0a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x563b5894c190 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x563b5894c3a8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563b5894c250 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b5894c558 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563b5894c460 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563b5894c6a0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563b5894c610 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563b5894c7e8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563b5894c758 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b5894c930 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563b5894c8a0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b5894c9f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x563b5894cb40 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x563b5894cab0 <col:28> col:31 'int'
|-CXXMethodDecl 0x563b5894cc08 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x563b5894cd50 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x563b5894ccc0 <col:28> col:31 'int'
|-CXXMethodDecl 0x563b5894cec8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563b5894ce08 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b5894d010 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563b5894cf80 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b5894d0d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x563b5894d298 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563b5894d188 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563b5894d200 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b5894d4e8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563b5894d358 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b5894d3d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563b5894d598 <col:86> "" ""
|-CXXMethodDecl 0x563b5894d808 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x563b5894d678 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x563b5894d6f0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b5894d9b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563b5894d8c8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563b5894db68 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563b5894da70 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563b5894de38 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563b5894dc20 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563b5894dc98 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563b5894dd10 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b5894e118 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563b5894df00 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563b5894df78 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b5894dff0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563b5894e1d0 <col:115> "" ""
|-AccessSpecDecl 0x563b5894e240 <line:84:3, col:10> col:3 private
|-FieldDecl 0x563b5894e278 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b5894e780 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563b5894e780
| `-ParmVarDecl 0x563b5894e888 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x563b5894e928 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563b5894e928
| `-ParmVarDecl 0x563b5894ea38 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x563b58984068 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563b58b76e70 <col:7>
|-CXXConstructorDecl 0x563b58984140 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563b58984140
| `-ParmVarDecl 0x563b58984258 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x563b589842c8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563b589842c8
| `-ParmVarDecl 0x563b589843d8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x563b58b79870 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58b65a18 prev 0x563b58b5ac20 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b58b65b10 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x563b58b65c00 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x563b58b65d28 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x563b58b65ea8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x563b58b66028 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x563b58b661a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x563b58b76fd8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563b58b77848 <col:11>
|-CXXDestructorDecl 0x563b58b770b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563b58b771e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x563b58b771e8
| `-ParmVarDecl 0x563b58b772f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x563b58b77398 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563b58b77398
| `-ParmVarDecl 0x563b58b774a8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x563b58b7a268 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x563b58b7a378 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x563b58b7a5f8 <col:11>
|   `-ReturnStmt 0x563b58b7a5e8 <col:11>
|     `-UnaryOperator 0x563b58b7a5d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b58b7a5c0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x563b58b7a3e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563b58b7a3e8
  `-ParmVarDecl 0x563b58b7a4f8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58b66210 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b58b66328 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x563b58b663c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x563b58b66430 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x563b58b66498 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x563b58b66500 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x563b58b66560 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x563b58b66620 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x563b58b66680 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x563b58b666e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x563b58b76ee8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x563b58b663c8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x563b58b77858 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x563b58b778b0 <col:12>
|-CXXConstructorDecl 0x563b58b77518 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x563b58b77518
| `-ParmVarDecl 0x563b58b77628 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x563b58b776c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x563b58b776c8
| `-ParmVarDecl 0x563b58b777d8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x563b58b79950 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58b54330 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563b58b54448 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x563b58b544d8 <col:16, col:22> col:16 public
|-EnumDecl 0x563b58b54500 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x563b58b54600 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x563b58b546e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b545e0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x563b58b545c0 <col:21> 'int' 28
| `-EnumConstantDecl 0x563b58b54690 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x563b58b546f8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58b54670 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x563b58b54650 <col:22> 'int' 64
|-CXXMethodDecl 0x563b58b54a38 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x563b58b54720 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b58b547a0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x563b58b54818 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b58b54890 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b58b54af8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x563b58b54cf8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x563b58b54b70 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x563b58b54be8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b58b54da8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x563b58b54f08 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x563b58b54e18 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b58b54fb0 <col:72> warn_unused_result ""
|-TypedefDecl 0x563b58b55310 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x563b58b552a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x563b58b55240 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x563b58b55200 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x563b5862c4e0 'void'
|       |-PointerType 0x563b588d46d0 'unsigned char *'
|       | `-BuiltinType 0x563b5862c5e0 'unsigned char'
|       |-TypedefType 0x563b586d0ca0 'size_t' sugar
|       | |-Typedef 0x563b5869cbe0 'size_t'
|       | `-BuiltinType 0x563b5862c640 'unsigned long'
|       `-PointerType 0x563b5862cce0 'void *'
|         `-BuiltinType 0x563b5862c4e0 'void'
|-CXXMethodDecl 0x563b58b55788 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x563b58b55380 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x563b58b553f8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b58b55490 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x563b58b55510 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x563b58b6fe80 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x563b58b6fe68 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x563b58b6fe30 <col:58> 'int' 0
| |-ParmVarDecl 0x563b58b55590 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x563b58b6fea8 <col:76> 'int' 0
| |-ParmVarDecl 0x563b58b55610 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x563b58b6fec8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x563b58b55858 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x563b58b558d8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x563b58b55998 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x563b58b55a38 <col:20>
| `-OptimizeNoneAttr 0x563b58b55a90 <col:30>
|-CXXMethodDecl 0x563b58b55b08 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x563b58b55ba8 <col:20>
| `-OptimizeNoneAttr 0x563b58b55c00 <col:30>
|-CXXMethodDecl 0x563b58b55c78 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x563b58b55d18 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x563b58b55dc8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x563b58b55e68 <col:20>
| |-OptimizeNoneAttr 0x563b58b55ec0 <col:30>
| `-WarnUnusedResultAttr 0x563b58b55ee8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x563b58b55f40 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x563b58b55fe0 <col:20>
| `-OptimizeNoneAttr 0x563b58b56038 <col:30>
|-CXXMethodDecl 0x563b58b56088 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x563b58b56128 <col:20>
| `-OptimizeNoneAttr 0x563b58b56180 <col:30>
|-CXXMethodDecl 0x563b58b561c8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x563b58b56268 <col:20>
| `-OptimizeNoneAttr 0x563b58b562c0 <col:30>
|-CXXMethodDecl 0x563b58b56308 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x563b58b563c8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x563b58b56490 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563b58b56558 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563b58b56618 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563b58b56738 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x563b58b6ff90 <col:54, line:99:5>
|   `-ReturnStmt 0x563b58b6ff80 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x563b58b6ff68 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x563b58b6ff38 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x563b58b66a18
|         `-CXXThisExpr 0x563b58b6ff28 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x563b58b568d8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x563b58b567e8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x563b58b70040 <col:67, line:103:5>
|   `-BinaryOperator 0x563b58b70020 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x563b58b6ffb8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x563b58b66a18
|     | `-CXXThisExpr 0x563b58b6ffa8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x563b58b70008 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x563b58b6ffe8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x563b58b567e8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x563b58b569d0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x563b58b700c0 <col:33, line:107:5>
|   `-ReturnStmt 0x563b58b700b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x563b58b70098 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x563b58b70068 <col:16> 'void *' lvalue ->_destructor_argument 0x563b58b66a80
|         `-CXXThisExpr 0x563b58b70058 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x563b58b56a90 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x563b58b706f0 <col:25, line:113:5>
|   |-ParenExpr 0x563b58b70438 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x563b58b70408 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b70178 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x563b58b70150 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x563b58b70118 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x563b58b700e8 <col:24> '<bound member function type>' ->shared 0x563b58b55b08
|   |   |       `-ImplicitCastExpr 0x563b58b70138 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x563b58b700d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x563b58b701d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b701b8 <col:42> 'int' 0
|   |   `-CallExpr 0x563b58b70368 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x563b58b70350 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b70330 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b703a8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b70248 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x563b58b703c0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b70270 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b703d8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b702a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x563b58b703f0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b70318 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b70300 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b702c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x563b58b70638 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x563b58b70468 <col:2> 'unsigned char *' lvalue ->_head 0x563b58b66820
|   | | `-CXXThisExpr 0x563b58b70458 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x563b58b70620 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x563b58b70600 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x563b58b704a8 <col:10> 'unsigned char *' lvalue ->_data 0x563b58b66888
|   |     | `-CXXThisExpr 0x563b58b70498 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x563b58b705e8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x563b58b705c8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x563b58b704e8 <col:18> 'unsigned char *' lvalue ->_tail 0x563b58b668f0
|   |         | `-CXXThisExpr 0x563b58b704d8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x563b58b705b0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x563b58b70590 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x563b58b70528 <col:26> 'unsigned char *' lvalue ->_end 0x563b58b66958
|   |             | `-CXXThisExpr 0x563b58b70518 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x563b58b70578 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x563b58b70558 <col:33> 'int' 0
|   `-BinaryOperator 0x563b58b706d0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x563b58b70668 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x563b58b66a18
|     | `-CXXThisExpr 0x563b58b70658 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x563b58b706b8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x563b58b70698 <col:16> 'int' 0
|-CXXMethodDecl 0x563b58b56bd0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x563b58b56b40 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b58b56c78 <col:20>
| |-OptimizeNoneAttr 0x563b58b56cd0 <col:30>
| `-WarnUnusedResultAttr 0x563b58b56cf8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x563b58b56dc8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x563b58b56d38 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b58b56e70 <col:20>
| |-OptimizeNoneAttr 0x563b58b56ec8 <col:30>
| `-WarnUnusedResultAttr 0x563b58b56ef0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x563b58b57028 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x563b58b56f30 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b58b570d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x563b58b571d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x563b58b57140 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b58b57278 <col:20>
| `-OptimizeNoneAttr 0x563b58b572d0 <col:30>
|-CXXMethodDecl 0x563b58b57398 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x563b58b57308 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b58b57440 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x563b58b57540 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x563b58b574b0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b58b575e8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x563b58b576e8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x563b58b57658 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b58b57790 <col:20>
| `-OptimizeNoneAttr 0x563b58b577e8 <col:30>
|-CXXMethodDecl 0x563b58b57978 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x563b58b57828 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x563b58b578a0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x563b58b6fee8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x563b58b57a28 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x563b58b57c28 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x563b58b57aa0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x563b58b57b18 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b58b57e38 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563b58b57ce8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563b58b57d60 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b58b58048 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x563b58b57ef8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x563b58b57f78 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x563b58b6fef8 <col:39> 'int' 0
|-CXXMethodDecl 0x563b58b58118 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x563b58b581e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563b58b582a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x563b58b58368 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563b58b58430 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x563b58b58578 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x563b58b584e8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x563b58b58748 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x563b58b58638 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x563b58b586b0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b58b58818 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x563b58b588d8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x563b58b58978 <col:20>
| `-OptimizeNoneAttr 0x563b58b589d0 <col:30>
|-CXXMethodDecl 0x563b58b58a20 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x563b58b58ac0 <col:20>
| `-OptimizeNoneAttr 0x563b58b58b18 <col:30>
|-CXXMethodDecl 0x563b58b58b68 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x563b58b58c28 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563b58b58cf0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x563b58b58d90 <col:20>
| `-OptimizeNoneAttr 0x563b58b58de8 <col:30>
|-CXXMethodDecl 0x563b58b58f38 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x563b58b58e28 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x563b58b58ea0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b58b59088 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x563b58b58ff8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b58b59160 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x563b58b59220 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x563b58b592c0 <col:20>
| `-OptimizeNoneAttr 0x563b58b59318 <col:30>
|-CXXMethodDecl 0x563b58b59368 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x563b58b59408 <col:20>
| `-OptimizeNoneAttr 0x563b58b59460 <col:30>
|-CXXMethodDecl 0x563b58b594b0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x563b58b59578 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x563b58b59618 <col:20>
| `-OptimizeNoneAttr 0x563b58b59670 <col:30>
|-CXXMethodDecl 0x563b58b596b8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x563b58b597d8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x563b58b59948 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x563b58b59888 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x563b58b59a38 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x563b58b59ad8 <col:20>
| `-OptimizeNoneAttr 0x563b58b59b30 <col:30>
|-CXXMethodDecl 0x563b58b59b80 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x563b58b59c40 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563b58b59e78 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x563b58b59cf0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x563b58b59d68 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b58b59f28 <col:20>
| `-OptimizeNoneAttr 0x563b58b59f80 <col:30>
|-CXXMethodDecl 0x563b58b5a028 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x563b58b5a0c8 <col:20>
| `-OptimizeNoneAttr 0x563b58b5a120 <col:30>
|-CXXMethodDecl 0x563b58b5a170 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x563b58b5a210 <col:20>
| `-OptimizeNoneAttr 0x563b58b5a268 <col:30>
|-CXXMethodDecl 0x563b58b5a2b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x563b58b5a350 <col:20>
| `-OptimizeNoneAttr 0x563b58b5a3a8 <col:30>
|-CXXMethodDecl 0x563b58b5a4a8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x563b58b5a3e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x563b58b5a550 <col:20>
| `-OptimizeNoneAttr 0x563b58b5a5a8 <col:30>
|-CXXMethodDecl 0x563b58b5a768 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x563b58b5a5e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x563b58b5a658 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b58b5a818 <col:20>
| `-OptimizeNoneAttr 0x563b58b5a870 <col:30>
|-CXXMethodDecl 0x563b58b5a918 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x563b58b5aa38 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x563b58b5ab58 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x563b58b5abf8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x563b58b5ac20 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x563b58b5ad48 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x563b58b5ade8 <col:20>
| `-OptimizeNoneAttr 0x563b58b5ae40 <col:30>
|-CXXMethodDecl 0x563b58b5aee8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x563b58b5af88 <col:20>
| `-OptimizeNoneAttr 0x563b58b5afe0 <col:30>
|-AccessSpecDecl 0x563b58b5b008 <line:344:3, col:9> col:3 public
|-EnumDecl 0x563b58b5b030 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x563b58b5b130 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x563b58b5b180 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58b5b110 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x563b58b5b0f0 <col:14> 'int' 48
|-CXXMethodDecl 0x563b58b5b1e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x563b58b5b288 <col:20>
| `-OptimizeNoneAttr 0x563b58b5b2e0 <col:30>
|-CXXMethodDecl 0x563b58b5b358 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x563b58b5b3f8 <col:20>
| `-OptimizeNoneAttr 0x563b58b5b450 <col:30>
|-CXXMethodDecl 0x563b58b5b518 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x563b58b5b488 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x563b58b5b6b8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x563b58b5b858 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x563b58b5b768 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x563b58b5b900 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x563b58b5ba00 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b58b5bdb0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5b9e0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x563b58b5b9c0 <col:9> 'int' 0
| |-EnumConstantDecl 0x563b58b5ba90 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b58b5bdc8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5ba70 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x563b58b5ba50 <col:14> 'int' 1
| |-EnumConstantDecl 0x563b58b5bb20 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b58b5bde0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5bb00 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x563b58b5bae0 <col:14> 'int' 2
| |-EnumConstantDecl 0x563b58b5bbb0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b58b5bdf8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5bb90 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x563b58b5bb70 <col:14> 'int' 3
| |-EnumConstantDecl 0x563b58b5bc40 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b58b5be10 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5bc20 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x563b58b5bc00 <col:13> 'int' 4
| |-EnumConstantDecl 0x563b58b5bcd0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b58b5be28 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5bcb0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x563b58b5bc90 <col:13> 'int' 5
| `-EnumConstantDecl 0x563b58b5bd60 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x563b58b5be40 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58b5bd40 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x563b58b5bd20 <col:14> 'int' 6
|-CXXMethodDecl 0x563b58b5bea8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x563b58b5bf48 <col:20>
| `-OptimizeNoneAttr 0x563b58b5bfa0 <col:30>
|-CXXMethodDecl 0x563b58b5c098 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x563b58b5bfd8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x563b58b5c140 <col:20>
| `-OptimizeNoneAttr 0x563b58b5c198 <col:30>
|-CXXMethodDecl 0x563b58b5c208 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x563b58b5c330 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x563b58b5c4a8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x563b58b5c3e0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x563b58b5c570 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x563b58b5c638 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x563b58b5c778 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x563b58b5c6e8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x563b58b5c820 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x563b58b5c920 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x563b58b5cb20 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5c900 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x563b58b5c8e0 <col:23> 'int' 0
| |-EnumConstantDecl 0x563b58b5c9b0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x563b58b5cb38 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5c990 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x563b58b5c970 <col:45> 'int' 4
| |-EnumConstantDecl 0x563b58b5ca40 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x563b58b5cb50 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5ca20 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x563b58b5ca00 <col:24> 'int' 0
| `-EnumConstantDecl 0x563b58b5cad0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x563b58b5cb68 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58b5cab0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x563b58b5ca90 <col:47> 'int' 16
|-CXXMethodDecl 0x563b58b5cbc8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x563b58b5cd38 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x563b58b5cc78 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x563b58b5cde0 <col:20>
| `-OptimizeNoneAttr 0x563b58b5ce38 <col:30>
|-CXXMethodDecl 0x563b58b5ce88 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x563b58b70810 <col:18, col:36>
|   `-ReturnStmt 0x563b58b70800 <col:20, col:33>
|     `-ImplicitCastExpr 0x563b58b707e8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x563b58b707c8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x563b58b70798 <col:27> '<bound member function type>' ->xanno 0x563b58b5aee8
|           `-CXXThisExpr 0x563b58b70788 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x563b58b5cf80 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x563b58b70920 <col:30, col:48>
|   `-ReturnStmt 0x563b58b70910 <col:32, col:45>
|     `-ImplicitCastExpr 0x563b58b708f8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x563b58b708d8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x563b58b708a8 <col:39> '<bound member function type>' ->xanno 0x563b58b5ad48
|           `-CXXThisExpr 0x563b58b70898 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x563b58b5d068 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x563b58b70ab8 <col:24, col:50>
|   `-ReturnStmt 0x563b58b70aa8 <col:26, col:47>
|     `-UnaryOperator 0x563b58b70a90 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563b58b70a70 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x563b58b70a58 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b58b70a08 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x563b58b65d28
|         |   `-CXXMemberCallExpr 0x563b58b709e8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x563b58b709b8 <col:34> '<bound member function type>' ->xanno 0x563b58b5aee8
|         |       `-CXXThisExpr 0x563b58b709a8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x563b58b70a38 <col:46> 'int' 0
|-CXXMethodDecl 0x563b58b5d170 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x563b58b70c88 <col:36, col:62>
|   `-ReturnStmt 0x563b58b70c78 <col:38, col:59>
|     `-UnaryOperator 0x563b58b70c60 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563b58b70c40 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x563b58b70c28 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b58b70ba0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x563b58b65d28
|         |   `-CXXMemberCallExpr 0x563b58b70b80 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x563b58b70b50 <col:46> '<bound member function type>' ->xanno 0x563b58b5ad48
|         |       `-CXXThisExpr 0x563b58b70b40 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x563b58b70bd0 <col:58> 'int' 0
|-CXXMethodDecl 0x563b58b5d288 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x563b58b70e20 <col:26, col:53>
|   `-ReturnStmt 0x563b58b70e10 <col:28, col:50>
|     `-UnaryOperator 0x563b58b70df8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563b58b70dd8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x563b58b70dc0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b58b70d70 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x563b58b66028
|         |   `-CXXMemberCallExpr 0x563b58b70d50 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x563b58b70d20 <col:36> '<bound member function type>' ->xanno 0x563b58b5aee8
|         |       `-CXXThisExpr 0x563b58b70d10 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x563b58b70da0 <col:49> 'int' 0
|-CXXMethodDecl 0x563b58b5d3a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x563b58b70ff8 <col:38, col:65>
|   `-ReturnStmt 0x563b58b70fe8 <col:40, col:62>
|     `-UnaryOperator 0x563b58b70fd0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563b58b70fb0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x563b58b70f98 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b58b70f08 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x563b58b66028
|         |   `-CXXMemberCallExpr 0x563b58b70ee8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x563b58b70eb8 <col:48> '<bound member function type>' ->xanno 0x563b58b5ad48
|         |       `-CXXThisExpr 0x563b58b70ea8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x563b58b70f38 <col:61> 'int' 0
|-CXXMethodDecl 0x563b58b5d558 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x563b58b5d460 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x563b58b716c8 <col:34, line:463:5>
|   |-ParenExpr 0x563b58b71510 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x563b58b714e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b71148 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b71118 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b71068 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b71050 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b71010 <col:23> 'int' lvalue ParmVar 0x563b58b5d460 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b71030 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b710f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b710c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b71088 <col:33> 'int' lvalue ParmVar 0x563b58b5d460 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x563b58b710e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x563b58b710a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x563b58b711a8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b71188 <col:56> 'int' 0
|   |   `-CallExpr 0x563b58b71440 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x563b58b71428 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b71408 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b71480 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b71298 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x563b58b71498 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b712c8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b714b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b71300 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x563b58b714c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b713f0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b713d8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b71398 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x563b58b716b8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x563b58b716a0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x563b58b71680 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x563b58b71650 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b58b71600 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x563b58b65d28
|         |   `-CXXMemberCallExpr 0x563b58b715e0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x563b58b715b0 <col:9> '<bound member function type>' ->xanno 0x563b58b5ad48
|         |       `-CXXThisExpr 0x563b58b715a0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x563b58b71668 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x563b58b71630 <col:21> 'int' lvalue ParmVar 0x563b58b5d460 'i' 'int'
|-CXXMethodDecl 0x563b58b5d7a8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x563b58b5d618 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x563b58b5d690 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x563b58b71d58 <col:40, line:472:5>
|   |-ParenExpr 0x563b58b71b70 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x563b58b71b40 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b71820 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b717f0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b71740 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b71728 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b716e8 <col:23> 'int' lvalue ParmVar 0x563b58b5d618 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b71708 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b717d0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b717a0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b71760 <col:33> 'int' lvalue ParmVar 0x563b58b5d618 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x563b58b717b8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x563b58b71780 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x563b58b71880 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b71860 <col:56> 'int' 0
|   |   `-CallExpr 0x563b58b71aa0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x563b58b71a88 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b71a68 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b71ae0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b718f0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x563b58b71af8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b71920 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b71b10 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b71958 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x563b58b71b28 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b71a50 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b71a38 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b719f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x563b58b71d38 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x563b58b71ce0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x563b58b71cb0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x563b58b71c60 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x563b58b65d28
|     | |   `-CXXMemberCallExpr 0x563b58b71c40 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x563b58b71c10 <col:2> '<bound member function type>' ->xanno 0x563b58b5aee8
|     | |       `-CXXThisExpr 0x563b58b71c00 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x563b58b71cc8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x563b58b71c90 <col:14> 'int' lvalue ParmVar 0x563b58b5d618 'i' 'int'
|     `-ImplicitCastExpr 0x563b58b71d20 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x563b58b71d00 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x563b58b5d690 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x563b58b5d968 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x563b58b5d870 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x563b58b724d8 <col:36, line:485:5>
|   |-ParenExpr 0x563b58b72240 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b58b72210 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b71ef0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b71ec0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b71dd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b71db8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b71d78 <col:23> 'int' lvalue ParmVar 0x563b58b5d870 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b71d98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b71ea0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b71e88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b71df0 <col:33> 'int' lvalue ParmVar 0x563b58b5d870 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b71e68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b71e50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b71e10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b58b71e30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563b58b71f50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b71f30 <col:60> 'int' 0
|   |   `-CallExpr 0x563b58b72170 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b58b72158 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b72138 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b721b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b71fc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563b58b721c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b71ff8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b721e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b72030 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x563b58b721f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b72120 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b72108 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b720c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x563b58b724c8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x563b58b724b0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x563b58b72498 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b58b72468 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x563b58b72408 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b58b723d8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b58b72350 <col:61, col:70> 'char const[48]' lvalue ->c 0x563b58b65c00
|             |   `-CXXMemberCallExpr 0x563b58b72330 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b58b72300 <col:61> '<bound member function type>' ->xanno 0x563b58b5ad48
|             |       `-CXXThisExpr 0x563b58b722f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b58b723f0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b58b72380 <col:74> 'int' lvalue ParmVar 0x563b58b5d870 'i' 'int'
|-CXXMethodDecl 0x563b58b5dbb8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x563b58b5da28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b58b5daa0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x563b58b72c28 <col:42, line:500:5>
|   |-ParenExpr 0x563b58b729c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b58b72990 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b72670 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b72640 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b72550 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b72538 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b724f8 <col:23> 'int' lvalue ParmVar 0x563b58b5da28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b72518 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b72620 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b72608 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b72570 <col:33> 'int' lvalue ParmVar 0x563b58b5da28 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b725e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b725d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b72590 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b58b725b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563b58b726d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b726b0 <col:60> 'int' 0
|   |   `-CallExpr 0x563b58b728f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b58b728d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b728b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b72930 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b72740 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563b58b72948 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b72778 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b72960 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b727b0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x563b58b72978 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b728a0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b72888 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b72848 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x563b58b72c08 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x563b58b72bb8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b58b72b88 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x563b58b72b30 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b58b72b00 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b58b72ab0 <col:48, col:57> 'char [48]' lvalue ->c 0x563b58b65c00
|     |     |   `-CXXMemberCallExpr 0x563b58b72a90 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b58b72a60 <col:48> '<bound member function type>' ->xanno 0x563b58b5aee8
|     |     |       `-CXXThisExpr 0x563b58b72a50 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b58b72b18 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b58b72ae0 <col:61> 'int' lvalue ParmVar 0x563b58b5da28 'i' 'int'
|     `-ImplicitCastExpr 0x563b58b72bf0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x563b58b72bd0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x563b58b5daa0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x563b58b5dd78 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x563b58b5dc80 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x563b58b73388 <col:35, line:513:5>
|   |-ParenExpr 0x563b58b73098 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b58b73068 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b72dc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b72d90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b72ca0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b72c88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b72c48 <col:23> 'int' lvalue ParmVar 0x563b58b5dc80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b72c68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b72d70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b72d58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b72cc0 <col:33> 'int' lvalue ParmVar 0x563b58b5dc80 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b72d38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b72d20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b72ce0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b58b72d00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563b58b72e20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b72e00 <col:60> 'int' 0
|   |   `-CallExpr 0x563b58b72fc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b58b72fb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b72f90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b73008 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b72e90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563b58b73020 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b72ec8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b73038 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b72f00 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x563b58b73050 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b72f78 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b72f60 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b72f20 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x563b58b73378 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x563b58b73360 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x563b58b73348 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b58b73318 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x563b58b73290 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b58b73260 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b58b73210 <col:60, col:69> 'char const[48]' lvalue ->c 0x563b58b65c00
|             |   `-CXXMemberCallExpr 0x563b58b731f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b58b731c0 <col:60> '<bound member function type>' ->xanno 0x563b58b5ad48
|             |       `-CXXThisExpr 0x563b58b731b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b58b73278 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b58b73240 <col:73> 'int' lvalue ParmVar 0x563b58b5dc80 'i' 'int'
|-CXXMethodDecl 0x563b58b5dfc8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x563b58b5de38 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b58b5deb0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x563b58b73aa8 <col:41, line:528:5>
|   |-ParenExpr 0x563b58b73830 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b58b73800 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b73520 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b734f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b73400 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b733e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b733a8 <col:23> 'int' lvalue ParmVar 0x563b58b5de38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b733c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b734d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b734b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b73420 <col:33> 'int' lvalue ParmVar 0x563b58b5de38 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b73498 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b73480 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b73440 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b58b73460 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563b58b73580 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b73560 <col:60> 'int' 0
|   |   `-CallExpr 0x563b58b73760 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b58b73748 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b73728 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b737a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b735f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563b58b737b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b73628 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b737d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b73660 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x563b58b737e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b73710 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b736f8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b736b8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x563b58b73a88 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x563b58b73a38 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b58b73a08 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x563b58b739b0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b58b73970 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b58b73920 <col:47, col:56> 'char [48]' lvalue ->c 0x563b58b65c00
|     |     |   `-CXXMemberCallExpr 0x563b58b73900 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b58b738d0 <col:47> '<bound member function type>' ->xanno 0x563b58b5aee8
|     |     |       `-CXXThisExpr 0x563b58b738c0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b58b73988 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b58b73950 <col:60> 'int' lvalue ParmVar 0x563b58b5de38 'i' 'int'
|     `-ImplicitCastExpr 0x563b58b73a70 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x563b58b73a50 <col:65> 'int16_t':'short' lvalue ParmVar 0x563b58b5deb0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x563b58b5e188 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x563b58b5e090 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x563b58b74178 <col:36, line:541:5>
|   |-ParenExpr 0x563b58b73f18 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b58b73ee8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b73c40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b73c10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b73b20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b73b08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b73ac8 <col:23> 'int' lvalue ParmVar 0x563b58b5e090 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b73ae8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b73bf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b73bd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b73b40 <col:33> 'int' lvalue ParmVar 0x563b58b5e090 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b73bb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b73ba0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b73b60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b58b73b80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x563b58b73ca0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b73c80 <col:60> 'int' 0
|   |   `-CallExpr 0x563b58b73e48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b58b73e30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b73e10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b73e88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b73d10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x563b58b73ea0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b73d48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b73eb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b73d80 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x563b58b73ed0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b73df8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b73de0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b73da0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x563b58b74168 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x563b58b74150 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x563b58b74138 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b58b74108 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x563b58b740b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b58b74080 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b58b74030 <col:61, col:70> 'char const[48]' lvalue ->c 0x563b58b65c00
|             |   `-CXXMemberCallExpr 0x563b58b74010 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b58b73fe0 <col:61> '<bound member function type>' ->xanno 0x563b58b5ad48
|             |       `-CXXThisExpr 0x563b58b73fd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b58b74098 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b58b74060 <col:74> 'int' lvalue ParmVar 0x563b58b5e090 'i' 'int'
|-CXXMethodDecl 0x563b58b5e358 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x563b58b5e248 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x563b58b5e2c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b58b5e408 <col:20>
| `-OptimizeNoneAttr 0x563b58b5e460 <col:30>
|-CXXMethodDecl 0x563b58b5e598 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x563b58b5e4a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x563b58b74848 <col:35, line:562:5>
|   |-ParenExpr 0x563b58b745e8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b58b745b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b74310 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b742e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b741f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b741d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b74198 <col:23> 'int' lvalue ParmVar 0x563b58b5e4a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b741b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b742c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b742a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b74210 <col:33> 'int' lvalue ParmVar 0x563b58b5e4a0 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b74288 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b74270 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b74230 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b58b74250 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x563b58b74370 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b74350 <col:60> 'int' 0
|   |   `-CallExpr 0x563b58b74518 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b58b74500 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b744e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b74558 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b743e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x563b58b74570 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b74418 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b74588 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b74450 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x563b58b745a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b744c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b744b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b74470 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x563b58b74838 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x563b58b74820 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x563b58b74808 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b58b747d8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x563b58b74780 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b58b74750 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b58b74700 <col:60, col:69> 'char const[48]' lvalue ->c 0x563b58b65c00
|             |   `-CXXMemberCallExpr 0x563b58b746e0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b58b746b0 <col:60> '<bound member function type>' ->xanno 0x563b58b5ad48
|             |       `-CXXThisExpr 0x563b58b746a0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b58b74768 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b58b74730 <col:73> 'int' lvalue ParmVar 0x563b58b5e4a0 'i' 'int'
|-CXXMethodDecl 0x563b58b5e7a8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x563b58b5e658 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b58b5e6d0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x563b58b74f28 <col:41, line:577:5>
|   |-ParenExpr 0x563b58b74cb8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b58b74c88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b749e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b749b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b748c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b748a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b74868 <col:23> 'int' lvalue ParmVar 0x563b58b5e658 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b74888 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b74990 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b74978 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b748e0 <col:33> 'int' lvalue ParmVar 0x563b58b5e658 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b74958 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b74940 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b74900 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b58b74920 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x563b58b74a40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b74a20 <col:60> 'int' 0
|   |   `-CallExpr 0x563b58b74be8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b58b74bd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b74bb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b74c28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b74ab0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x563b58b74c40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b74ae8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b74c58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b74b20 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x563b58b74c70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b74b98 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b74b80 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b74b40 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x563b58b74f08 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x563b58b74eb8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b58b74e88 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x563b58b74e28 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b58b74df8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b58b74da8 <col:47, col:56> 'char [48]' lvalue ->c 0x563b58b65c00
|     |     |   `-CXXMemberCallExpr 0x563b58b74d88 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b58b74d58 <col:47> '<bound member function type>' ->xanno 0x563b58b5aee8
|     |     |       `-CXXThisExpr 0x563b58b74d48 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b58b74e10 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b58b74dd8 <col:60> 'int' lvalue ParmVar 0x563b58b5e658 'i' 'int'
|     `-ImplicitCastExpr 0x563b58b74ef0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x563b58b74ed0 <col:65> 'int32_t':'int' lvalue ParmVar 0x563b58b5e6d0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x563b58b5e968 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x563b58b5e870 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x563b58b75658 <col:36, line:591:5>
|   |-ParenExpr 0x563b58b75398 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b58b75368 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b750c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b75090 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b74fa0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b74f88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b74f48 <col:23> 'int' lvalue ParmVar 0x563b58b5e870 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b74f68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b75070 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b75058 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b74fc0 <col:33> 'int' lvalue ParmVar 0x563b58b5e870 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b75038 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b75020 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b74fe0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b58b75000 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x563b58b75120 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b75100 <col:60> 'int' 0
|   |   `-CallExpr 0x563b58b752c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b58b752b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b75290 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b75308 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b75190 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x563b58b75320 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b751c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b75338 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b75200 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x563b58b75350 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b75278 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b75260 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b75220 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x563b58b75648 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x563b58b75630 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x563b58b75618 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b58b755e8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x563b58b75560 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b58b75530 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b58b754e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x563b58b65c00
|             |   `-CXXMemberCallExpr 0x563b58b754c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b58b75490 <col:61> '<bound member function type>' ->xanno 0x563b58b5ad48
|             |       `-CXXThisExpr 0x563b58b75480 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b58b75548 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b58b75510 <col:74> 'int' lvalue ParmVar 0x563b58b5e870 'i' 'int'
|-CXXMethodDecl 0x563b58b5ebb8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x563b58b5ea28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b58b5eaa0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x563b58b75d38 <col:42, line:606:5>
|   |-ParenExpr 0x563b58b75ac8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b58b75a98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b757f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b757c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b756d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b756b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b75678 <col:23> 'int' lvalue ParmVar 0x563b58b5ea28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b75698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b757a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b58b75788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b756f0 <col:33> 'int' lvalue ParmVar 0x563b58b5ea28 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b75768 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b75750 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b75710 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b58b75730 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x563b58b75850 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b75830 <col:60> 'int' 0
|   |   `-CallExpr 0x563b58b759f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b58b759e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b759c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b75a38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b758c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x563b58b75a50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b758f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b75a68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b75930 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x563b58b75a80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b759a8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b75990 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b75950 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x563b58b75d18 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x563b58b75cc8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b58b75c98 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x563b58b75c38 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b58b75c08 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b58b75bb8 <col:48, col:57> 'char [48]' lvalue ->c 0x563b58b65c00
|     |     |   `-CXXMemberCallExpr 0x563b58b75b98 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b58b75b68 <col:48> '<bound member function type>' ->xanno 0x563b58b5aee8
|     |     |       `-CXXThisExpr 0x563b58b75b58 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b58b75c20 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b58b75be8 <col:61> 'int' lvalue ParmVar 0x563b58b5ea28 'i' 'int'
|     `-ImplicitCastExpr 0x563b58b75d00 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x563b58b75ce0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x563b58b5eaa0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x563b58b5ed50 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x563b58b5ec80 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x563b58b765a8 <col:33, line:620:5>
|   |-ParenExpr 0x563b58b76320 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x563b58b762f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b75f40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b75f10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b75db0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b75d98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b75d58 <col:23> 'int' lvalue ParmVar 0x563b58b5ec80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b75d78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b75ef0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x563b58b75ed8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b75dd0 <col:33> 'int' lvalue ParmVar 0x563b58b5ec80 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b75eb8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b75ea0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b75df0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x563b58b75e78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x563b58b75e60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x563b58b75e28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x563b58b75fa0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b75f80 <col:79> 'int' 0
|   |   `-CallExpr 0x563b58b76250 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x563b58b76238 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b76218 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b76290 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b76088 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x563b58b762a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b760d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b762c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b76108 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x563b58b762d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b76200 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b761e8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b761a8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x563b58b76598 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x563b58b76580 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x563b58b76568 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b58b76538 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x563b58b764b0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b58b76480 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b58b76430 <col:67, col:76> 'char const[48]' lvalue ->c 0x563b58b65c00
|             |   `-CXXMemberCallExpr 0x563b58b76410 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b58b763e0 <col:67> '<bound member function type>' ->xanno 0x563b58b5ad48
|             |       `-CXXThisExpr 0x563b58b763d0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b58b76498 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b58b76460 <col:80> 'int' lvalue ParmVar 0x563b58b5ec80 'i' 'int'
|-CXXMethodDecl 0x563b58b5ef68 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x563b58b5ee10 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b58b5ee90 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x563b58b76dd0 <col:45, line:635:5>
|   |-ParenExpr 0x563b58b76b18 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x563b58b76ae8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x563b58b767b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b58b76780 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b58b76620 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b58b76608 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b58b765c8 <col:23> 'int' lvalue ParmVar 0x563b58b5ee10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b58b765e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b58b76760 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x563b58b76748 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b58b76640 <col:33> 'int' lvalue ParmVar 0x563b58b5ee10 'i' 'int'
|   |   |     `-BinaryOperator 0x563b58b76728 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b58b76710 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b58b76660 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b58b5b130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x563b58b766e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x563b58b766d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x563b58b76698 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x563b58b76810 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b58b767f0 <col:79> 'int' 0
|   |   `-CallExpr 0x563b58b76a48 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x563b58b76a30 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b58b76a10 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b586c7a00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b58b76a88 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b76880 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x563b58b76aa0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b58b768c8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b58b76ab8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b58b76900 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x563b58b76ad0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b58b769f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b58b769e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b58b76998 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x563b58b76db0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x563b58b76d18 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b58b76ce8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x563b58b76c88 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b58b76c58 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b58b76c08 <col:54, col:63> 'char [48]' lvalue ->c 0x563b58b65c00
|     |     |   `-CXXMemberCallExpr 0x563b58b76be8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b58b76bb8 <col:54> '<bound member function type>' ->xanno 0x563b58b5aee8
|     |     |       `-CXXThisExpr 0x563b58b76ba8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b58b76c70 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b58b76c38 <col:67> 'int' lvalue ParmVar 0x563b58b5ee10 'i' 'int'
|     `-CXXConstCastExpr 0x563b58b76d80 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x563b58b76d68 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x563b58b76d30 <col:91> 'const void *' lvalue ParmVar 0x563b58b5ee90 'x' 'const void *'
|-CXXMethodDecl 0x563b58b5f038 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x563b58b76e58 <col:34, line:640:5>
|   `-ReturnStmt 0x563b58b76e48 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x563b58b76e30 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x563b58b76e00 <col:16> 'Packet *' lvalue ->_data_packet 0x563b58b667b8
|         `-CXXThisExpr 0x563b58b76df0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x563b58b5f178 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x563b58b5f0e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563b58b6ff18 <col:46> 'bool' true
|-CXXMethodDecl 0x563b58b5f2f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x563b58b5f230 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x563b58b5f3a0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x563b58b5fb50 <line:660:22> "" ""
| |-EnumConstantDecl 0x563b58b5f4a0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fbc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5f480 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x563b58b5f460 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x563b58b54600 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x563b58b5f530 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fbd8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5f510 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x563b58b5f4f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x563b58b54690 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x563b58b5f5c0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fbf0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5f5a0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x563b58b5f580 <col:21> 'int' 0
| |-EnumConstantDecl 0x563b58b5f650 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fc08 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5f630 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x563b58b5f610 <col:19> 'int' 16
| |-EnumConstantDecl 0x563b58b5f6e0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fc20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5f6c0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x563b58b5f6a0 <col:21> 'int' 16
| |-EnumConstantDecl 0x563b58b5f770 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fc38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5f750 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x563b58b5f730 <col:19> 'int' 32
| |-EnumConstantDecl 0x563b58b5f800 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fc50 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5f7e0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x563b58b5f7c0 <col:19> 'int' EnumConstant 0x563b58b5f650 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x563b58b5f890 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fc68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5f870 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x563b58b5f850 <col:19> 'int' EnumConstant 0x563b58b5f770 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x563b58b5f960 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fc80 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5f940 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x563b58b5f920 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x563b58b5f8e0 <col:23> 'int' EnumConstant 0x563b58b5f890 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x563b58b5f900 <col:40> 'int' 2
| |-EnumConstantDecl 0x563b58b5fa30 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b58b5fc98 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58b5fa10 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x563b58b5f9f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x563b58b5f9b0 <col:23> 'int' EnumConstant 0x563b58b5f890 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x563b58b5f9d0 <col:40> 'int' 4
| `-EnumConstantDecl 0x563b58b5fb00 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x563b58b5fcb0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b58b5fae0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x563b58b5fac0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x563b58b5fa80 <col:23> 'int' EnumConstant 0x563b58b5f890 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x563b58b5faa0 <col:40> 'int' 8
|-CXXMethodDecl 0x563b58b5fcf0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x563b58b5fd90 <col:68> "" ""
|-CXXMethodDecl 0x563b58b5fe28 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x563b58b5fec8 <col:45> "" ""
|-CXXMethodDecl 0x563b58b5ff60 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x563b58b60000 <col:57> "" ""
|-CXXMethodDecl 0x563b58b60098 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x563b58b60138 <col:45> "" ""
|-CXXMethodDecl 0x563b58b601d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x563b58b60270 <col:57> "" ""
|-CXXMethodDecl 0x563b58b60300 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x563b58b603a0 <col:51> "" ""
|-CXXMethodDecl 0x563b58b60430 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x563b58b604d0 <col:63> "" ""
|-CXXMethodDecl 0x563b58b60560 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x563b58b60600 <col:53> "" ""
|-CXXMethodDecl 0x563b58b60690 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x563b58b60730 <col:65> "" ""
|-CXXMethodDecl 0x563b58b60848 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x563b58b607b8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x563b58b608f0 <col:61> "" ""
|-CXXMethodDecl 0x563b58b60a88 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x563b58b60978 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x563b58b609f0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x563b58b60b38 <col:67> "" ""
|-CXXMethodDecl 0x563b58b60c50 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x563b58b60bc0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x563b58b60cf8 <col:63> "" ""
|-CXXMethodDecl 0x563b58b60e90 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x563b58b60d80 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563b58b60df8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x563b58b60f40 <col:69> "" ""
|-CXXMethodDecl 0x563b58b61058 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x563b58b60fc8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x563b58b61100 <col:63> "" ""
|-CXXMethodDecl 0x563b58b637d8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x563b58b636c8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563b58b63740 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563b58b63888 <col:69> "" ""
|-CXXMethodDecl 0x563b58b639a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x563b58b63910 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x563b58b63a48 <col:62> "" ""
|-CXXMethodDecl 0x563b58b63be0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x563b58b63ad0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563b58b63b48 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x563b58b63c90 <col:68> "" ""
|-CXXMethodDecl 0x563b58b63da8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x563b58b63d18 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x563b58b63e50 <col:63> "" ""
|-CXXMethodDecl 0x563b58b63fe8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x563b58b63ed8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563b58b63f50 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x563b58b64098 <col:69> "" ""
|-CXXMethodDecl 0x563b58b64128 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x563b58b641c8 <col:64> "" ""
|-CXXMethodDecl 0x563b58b64258 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x563b58b642f8 <col:52> "" ""
|-CXXMethodDecl 0x563b58b64388 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x563b58b64428 <col:67> "" ""
|-CXXMethodDecl 0x563b58b644b8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x563b58b64558 <col:55> "" ""
|-CXXMethodDecl 0x563b58b64670 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x563b58b645e0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x563b58b64718 <col:58> "" ""
|-CXXMethodDecl 0x563b58b648b0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x563b58b647a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x563b58b64818 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x563b58b64960 <col:62> "" ""
|-CXXMethodDecl 0x563b58b64a78 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x563b58b649e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x563b58b64b20 <col:58> "" ""
|-CXXMethodDecl 0x563b58b64cb8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x563b58b64ba8 <col:33> col:36 'int'
| |-ParmVarDecl 0x563b58b64c20 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x563b58b64d68 <col:62> "" ""
|-CXXMethodDecl 0x563b58b64e80 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x563b58b64df0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x563b58b64f28 <col:60> "" ""
|-CXXMethodDecl 0x563b58b650c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x563b58b64fb0 <col:34> col:37 'int'
| |-ParmVarDecl 0x563b58b65028 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x563b58b65170 <col:64> "" ""
|-CXXMethodDecl 0x563b58b65288 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x563b58b651f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x563b58b65330 <col:58> "" ""
|-CXXMethodDecl 0x563b58b654c8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x563b58b653b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x563b58b65430 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x563b58b65578 <col:62> "" ""
|-CXXMethodDecl 0x563b58b65690 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x563b58b65600 <col:33> col:36 'int'
| `-DeprecatedAttr 0x563b58b65738 <col:59> "" ""
|-CXXMethodDecl 0x563b58b658d0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x563b58b657c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x563b58b65838 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563b58b65980 <col:63> "" ""
|-AccessSpecDecl 0x563b58b659f0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x563b58b65a18 prev 0x563b58b5ac20 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563b58b65b10 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x563b58b65c00 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x563b58b65d28 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x563b58b65ea8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x563b58b66028 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x563b58b661a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x563b58b76fd8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563b58b77848 <col:11>
| |-CXXDestructorDecl 0x563b58b770b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x563b58b771e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x563b58b771e8
| | `-ParmVarDecl 0x563b58b772f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x563b58b77398 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563b58b77398
| | `-ParmVarDecl 0x563b58b774a8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x563b58b7a268 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563b58b7a378 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x563b58b7a5f8 <col:11>
| |   `-ReturnStmt 0x563b58b7a5e8 <col:11>
| |     `-UnaryOperator 0x563b58b7a5d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563b58b7a5c0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x563b58b7a3e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563b58b7a3e8
|   `-ParmVarDecl 0x563b58b7a4f8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x563b58b66210 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563b58b66328 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x563b58b663c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x563b58b66430 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x563b58b66498 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x563b58b66500 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x563b58b66560 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x563b58b66620 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x563b58b66680 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x563b58b666e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x563b58b76ee8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x563b58b663c8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x563b58b77858 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x563b58b778b0 <col:12>
| |-CXXConstructorDecl 0x563b58b77518 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x563b58b77518
| | `-ParmVarDecl 0x563b58b77628 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x563b58b776c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x563b58b776c8
| | `-ParmVarDecl 0x563b58b777d8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x563b58b79950 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x563b58b66758 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x563b58b667b8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x563b58b66820 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x563b58b66888 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x563b58b668f0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x563b58b66958 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x563b58b669b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x563b58b66a18 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x563b58b66a80 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x563b58b66b08 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x563b58b66758 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x563b58b76e80 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x563b58b669b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x563b58b778c0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x563b58b77920 <col:21, line:755:5>
|-CXXConstructorDecl 0x563b58b66ca8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x563b58b66be8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x563b58b66da0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x563b58b66f88 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x563b58b66e90 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x563b58b67258 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x563b58b67040 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b58b670b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563b58b67130 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b58b67478 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x563b58b67328 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x563b58b673a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x563b58b6fa58 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x563b58b67538 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x563b58b675b0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x563b58b67628 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x563b58b6fbb0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x563b58b6fb20 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b58b6fcf8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x563b58b6fc68 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x563b58b6fdf0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b588c1f58 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b588c2078 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x563b588c2140 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x563b58992710 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563b58997a28 <col:8>
|-CXXConstructorDecl 0x563b58992818 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x563b58992818
| `-ParmVarDecl 0x563b58992928 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x563b589929c8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563b58992ad8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x563b588c2140 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x563b58997c40 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x563b58997c10 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x563b588c2140
| |     `-CXXStaticCastExpr 0x563b58997be0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x563b58997bb0 <col:8> 'in_addr' lvalue ParmVar 0x563b58992ad8 '' 'in_addr &&'
| `-CompoundStmt 0x563b58997c88 <col:8>
`-CXXDestructorDecl 0x563b58997ec0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b5898a3f8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x563b5898a518 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x563b5898a600 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x563b5898a5e0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x563b5898a5a8 <col:22> 'int' 4
|-FieldDecl 0x563b5898a6a8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x563b5898a688 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x563b5898a650 <col:21> 'int' 4
|-FieldDecl 0x563b5898a708 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x563b5898a768 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x563b5898a7c8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x563b5898a828 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x563b5898a888 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x563b5898a8e8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x563b5898a948 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x563b5898a9b8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x563b5898aa28 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58c471a0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b58c472b8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x563b58c47348 <col:16, col:22> col:16 public
|-EnumDecl 0x563b58c47370 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x563b58c47470 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563b58c476c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58c47450 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x563b58c47430 <col:21> 'int' 0
| |-EnumConstantDecl 0x563b58c47500 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563b58c476d8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58c474e0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x563b58c474c0 <col:24> 'int' 22
| |-EnumConstantDecl 0x563b58c47590 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563b58c476f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58c47570 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x563b58c47550 <col:24> 'int' 34
| |-EnumConstantDecl 0x563b58c47620 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563b58c47708 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b58c47600 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x563b58c475e0 <col:25> 'int' 95
| `-EnumConstantDecl 0x563b58c47670 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x563b58c49080 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563b58c494b8 <col:7>
|-CXXConstructorDecl 0x563b58c49188 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x563b58c49188
| `-ParmVarDecl 0x563b58c49298 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x563b58c49338 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563b58c49448 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x563b58c8e540 <col:7>
`-CXXDestructorDecl 0x563b58c4b5c8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b58c47738 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x563b58c47898 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x563b58c47928 <col:32, col:38> col:32 public
|-TypedefDecl 0x563b58c47960 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x563b58780f50 'uint32_t' sugar
|   |-Typedef 0x563b586954c8 'uint32_t'
|   `-TypedefType 0x563b5866e5a0 '__uint32_t' sugar
|     |-Typedef 0x563b5866e198 '__uint32_t'
|     `-BuiltinType 0x563b5862c620 'unsigned int'
|-CXXConstructorDecl 0x563b58c47aa8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x563b58c479d0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x563b58c48f88 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x563b58c494c8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x563b58c48840 'base' 'int'
| | `-ImplicitCastExpr 0x563b58c49028 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x563b58c48fe8 <col:16> 'int' lvalue ParmVar 0x563b58c479d0 'b' 'int'
| `-CompoundStmt 0x563b58c49538 <col:19, line:1046:5>
|-CXXMethodDecl 0x563b58c47fa0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x563b58c47b70 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x563b58c47bf0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x563b58c47c68 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x563b58c47ce8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x563b58c47da8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x563b58c47e28 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x563b58c483f8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x563b58c48070 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x563b58c48358 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x563b58c48118 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x563b58c481b8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x563b58c48230 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x563b58c48fa8 <col:82> 'const ArgContext' lvalue Var 0x563b58c3d078 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x563b58c4a468 <col:94, line:1067:5>
| |   |-DeclStmt 0x563b58c496c8 <line:1054:9, col:64>
| |   | `-VarDecl 0x563b58c49558 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x563b58c49680 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x563b58c498e8 <line:1055:9, col:91>
| |   | `-VarDecl 0x563b58c496f8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x563b58c498c0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x563b58c498a0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x563b58c49850 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x563b58c49830 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x563b58c497d8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x563b58c49788 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x563b58c497b8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x563b58c49818 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x563b58c497f8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x563b58c49880 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x563b58c49a48 <line:1056:9, col:27>
| |   | `-VarDecl 0x563b58c499e0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x563b58c49e90 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x563b58c49dc0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x563b58c49d40 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x563b58b4af38 0x563b58994518 0x563b589941f0 0x563b589849c0 0x563b58984670 0x563b58983f60 0x563b589568d0 0x563b588e3da0
| |   | | |-CallExpr 0x563b58c49c80 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x563b58c49a70 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x563b58c49b20 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x563b58c49af0 <col:19, col:23> '<bound member function type>' .begin 0x563b58973bc8
| |   | | | |   `-DeclRefExpr 0x563b58c49ad0 <col:19> 'const String' lvalue ParmVar 0x563b58c48118 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x563b58c49b90 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x563b58c49b60 <col:32, col:36> '<bound member function type>' .end 0x563b58973de0
| |   | | | |   `-DeclRefExpr 0x563b58c49b40 <col:32> 'const String' lvalue ParmVar 0x563b58c48118 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x563b58c49bb0 <col:43> 'const bool' lvalue Var 0x563b58c49558 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x563b58c49c18 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x563b58c49bf8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x563b58c49c40 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x563b58c499e0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x563b58c49c60 <col:73> 'const int' lvalue Var 0x563b58c496f8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x563b58c49d20 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x563b58c49cf0 <col:16, col:20> '<bound member function type>' .end 0x563b58973de0
| |   | |     `-DeclRefExpr 0x563b58c49cd0 <col:16> 'const String' lvalue ParmVar 0x563b58c48118 'str' 'const String &'
| |   | `-BinaryOperator 0x563b58c49e70 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x563b58c49e08 <col:13> 'int' lvalue ->status 0x563b58c488a8
| |   |   | `-CXXThisExpr 0x563b58c49df8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x563b58c49e58 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x563b58c49e38 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563b58c47500 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x563b58c4a0e0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x563b58c49fc8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x563b58c49fb0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x563b58c49f98 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x563b58c49eb8 <col:13> 'int' lvalue ->status 0x563b58c488a8
| |   | | |     `-CXXThisExpr 0x563b58c49ea8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x563b58c49f78 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x563b58c49f48 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x563b58c49ef8 <col:23> 'int' lvalue ->status 0x563b58c488a8
| |   | |   |   `-CXXThisExpr 0x563b58c49ee8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x563b58c49f60 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x563b58c49f28 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563b58c47590 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x563b58c4a0c0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x563b58c4a060 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x563b58c4a008 <col:13, col:18> '<bound member function type>' .error 0x563b58b0e0a0
| |   |   | | `-DeclRefExpr 0x563b58c49fe8 <col:13> 'const ArgContext' lvalue ParmVar 0x563b58c48230 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x563b58c4a088 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x563b58c4a038 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x563b58c4a0b0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x563b58c4a0a0 <col:20> 'bool' false
| |   |-DeclStmt 0x563b58c4a2b8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x563b58c4a260 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x563b58c4a1f0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x563b58c4a418 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x563b58c4a2d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x563b58917d68
| |   | |-DeclRefExpr 0x563b58c4a318 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x563b58c499e0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x563b58c4a3e8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x563b58c4a360 <col:64> 'V' lvalue ParmVar 0x563b58c481b8 'result' 'V &'
| |   `-ReturnStmt 0x563b58c4a458 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x563b58c4a448 <col:16> 'bool' true
| `-CXXMethodDecl 0x563b58c91cc8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x563b58c91aa0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x563b58c91b78 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x563b58c91be0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x563b58c9b4c0 <col:94, line:1067:5>
|     |-DeclStmt 0x563b58c924d8 <line:1054:9, col:64>
|     | `-VarDecl 0x563b58c922f8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x563b58c92468 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x563b58c92438 <col:36, col:55> 'const bool' lvalue Var 0x563b58907cd8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x563b58c926b8 <line:1055:9, col:91>
|     | `-VarDecl 0x563b58c924f0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x563b58c92638 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x563b58c92620 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x563b58c92600 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x563b58c925e0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x563b58c925c0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x563b58c92588 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x563b58c92568 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x563b58c497b8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x563b58c925a8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x563b58c497f8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x563b58c49880 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x563b58c92850 <line:1056:9, col:27>
|     | `-VarDecl 0x563b58c927e8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x563b58c92cd8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x563b58c92c80 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x563b58c92b38 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x563b58c92b08 <col:13> '<bound member function type>' ->parse 0x563b58c47fa0
|     | | | | `-CXXThisExpr 0x563b58c92af8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x563b58c92998 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x563b58c92968 <col:19, col:23> '<bound member function type>' .begin 0x563b58973bc8
|     | | | |   `-DeclRefExpr 0x563b58c92948 <col:19> 'const String' lvalue ParmVar 0x563b58c91aa0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x563b58c92a08 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x563b58c929d8 <col:32, col:36> '<bound member function type>' .end 0x563b58973de0
|     | | | |   `-DeclRefExpr 0x563b58c929b8 <col:32> 'const String' lvalue ParmVar 0x563b58c91aa0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x563b58c92ba8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x563b58c92b88 <col:43> 'const bool' lvalue Var 0x563b58c922f8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x563b58c92a90 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x563b58c92a78 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x563b58c92a58 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x563b58c92bc0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x563b58c92ab8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x563b58c927e8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x563b58c92bf8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x563b58c92bd8 <col:73> 'const int' lvalue Var 0x563b58c924f0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x563b58c92c60 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x563b58c92c30 <col:16, col:20> '<bound member function type>' .end 0x563b58973de0
|     | |     `-DeclRefExpr 0x563b58c92c10 <col:16> 'const String' lvalue ParmVar 0x563b58c91aa0 'str' 'const String &'
|     | `-BinaryOperator 0x563b58c92cb8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x563b58c49e08 <col:13> 'int' lvalue ->status 0x563b58c488a8
|     |   | `-CXXThisExpr 0x563b58c49df8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x563b58c92ca0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x563b58c49e38 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563b58c47500 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x563b58c92e50 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x563b58c92d70 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x563b58c92d58 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x563b58c92d40 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x563b58c49eb8 <col:13> 'int' lvalue ->status 0x563b58c488a8
|     | | |     `-CXXThisExpr 0x563b58c49ea8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x563b58c92d20 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x563b58c92cf0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x563b58c49ef8 <col:23> 'int' lvalue ->status 0x563b58c488a8
|     | |   |   `-CXXThisExpr 0x563b58c49ee8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x563b58c92d08 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x563b58c49f28 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563b58c47590 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x563b58c92e30 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x563b58c92de0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x563b58c92db0 <col:13, col:18> '<bound member function type>' .error 0x563b58b0e0a0
|     |   | | `-DeclRefExpr 0x563b58c92d90 <col:13> 'const ArgContext' lvalue ParmVar 0x563b58c91be0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x563b58c92e08 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x563b58c4a038 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x563b58c92e20 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x563b58c4a0a0 <col:20> 'bool' false
|     |-DeclStmt 0x563b58c9adf8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x563b58c9ada0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x563b58c9ad50 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x563b58c9ad30 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x563b58c9acc0 'type'
|     |       `-ElaboratedType 0x563b58c9ac70 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x563b58c9ac50 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x563b58907e30 'unsigned_type'
|     |           `-BuiltinType 0x563b5862c620 'unsigned int'
|     |-CallExpr 0x563b58c9b450 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x563b58c9b438 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x563b58c9b3b8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x563b58c9b298 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x563b58917d68 'extract_integer')
|     | |-ImplicitCastExpr 0x563b58c9b498 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x563b58c9b480 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x563b58c9ae58 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x563b58c927e8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x563b58c9af28 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x563b58c9aed8 <col:64> 'int':'int' lvalue ParmVar 0x563b58c91b78 'result' 'int &'
|     `-ReturnStmt 0x563b58c9b4b0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x563b58c4a448 <col:16> 'bool' true
|-FunctionTemplateDecl 0x563b58c487b8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x563b58c48468 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x563b58c48718 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x563b58c48518 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x563b58c485b8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x563b58c48630 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x563b58c48fc8 <col:71> 'const ArgContext' lvalue Var 0x563b58c3d078 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x563b58c4abe8 <col:83, line:1083:5>
| |   |-DeclStmt 0x563b58c4a530 <line:1071:9, col:12>
| |   | `-VarDecl 0x563b58c4a4c8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x563b58c4abc0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x563b58c4a7d0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x563b58c4a648 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x563b58c4a610 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x563b58c4a558 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x563b58c4a5b0 <col:31> 'const String' lvalue ParmVar 0x563b58c48518 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x563b58c4a5d0 <col:36> 'V' lvalue Var 0x563b58c4a4c8 'x' 'V'
| |     | |   `-DeclRefExpr 0x563b58c4a5f0 <col:39> 'const ArgContext' lvalue ParmVar 0x563b58c48630 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x563b58c4a7b0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x563b58c4a790 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x563b58c4a778 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x563b58c4a760 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x563b58c4a670 <col:17> 'int' lvalue ->status 0x563b58c488a8
| |     |     |     `-CXXThisExpr 0x563b58c4a660 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x563b58c4a740 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x563b58c4a710 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x563b58c4a6b0 <col:27> 'int' lvalue ->status 0x563b58c488a8
| |     |       |   `-CXXThisExpr 0x563b58c4a6a0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x563b58c4a728 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x563b58c4a6f0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563b58c47590 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x563b58c4a800 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x563b58c4a7f0 <col:20> 'bool' false
| |     `-IfStmt 0x563b58c4ab98 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x563b58c4a8a0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x563b58c4a870 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x563b58c4a820 <col:18> 'int' lvalue ->status 0x563b58c488a8
| |       | |   `-CXXThisExpr 0x563b58c4a810 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x563b58c4a888 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x563b58c4a850 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563b58c47590 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x563b58c4aad8 <col:42, line:1079:9>
| |       | |-CallExpr 0x563b58c4aa80 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x563b58c4a8d0 <line:1076:13> '<bound member function type>' ->range_error 0x563b58c48eb8
| |       | | | `-CXXThisExpr 0x563b58c4a8c0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x563b58c4a900 <col:25> 'const ArgContext' lvalue ParmVar 0x563b58c48630 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x563b58c4a9e0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x563b58c4aa58 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x563b58c4aa38 <col:43> 'V' lvalue Var 0x563b58c4a4c8 'x' 'V'
| |       | `-ReturnStmt 0x563b58c4aac8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x563b58c4aab8 <col:20> 'bool' false
| |       `-CompoundStmt 0x563b58c4ab78 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x563b58c4ab38 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x563b58c4aaf8 <col:13> 'V' lvalue ParmVar 0x563b58c485b8 'result' 'V &'
| |         | `-DeclRefExpr 0x563b58c4ab18 <col:22> 'V' lvalue Var 0x563b58c4a4c8 'x' 'V'
| |         `-ReturnStmt 0x563b58c4ab68 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x563b58c4ab58 <col:20> 'bool' true
| `-CXXMethodDecl 0x563b58c91688 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x563b58c91460 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x563b58c91538 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x563b58c915a0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x563b58c922d8 <col:83, line:1083:5>
|     |-DeclStmt 0x563b58c91910 <line:1071:9, col:12>
|     | `-VarDecl 0x563b58c918a8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x563b58c922b0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x563b58c91f40 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x563b58c91e68 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x563b58c91e30 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x563b58c91de8 <col:14> '<bound member function type>' ->parse_saturating 0x563b58c91cc8
|       | |   | `-CXXThisExpr 0x563b58c91dd8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x563b58c91980 <col:31> 'const String' lvalue ParmVar 0x563b58c91460 'str' 'const String &'
|       | |   |-DeclRefExpr 0x563b58c919a0 <col:36> 'int':'int' lvalue Var 0x563b58c918a8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x563b58c919c0 <col:39> 'const ArgContext' lvalue ParmVar 0x563b58c915a0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x563b58c91f20 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x563b58c91f00 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x563b58c91ee8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x563b58c91ed0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x563b58c4a670 <col:17> 'int' lvalue ->status 0x563b58c488a8
|       |     |     `-CXXThisExpr 0x563b58c4a660 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x563b58c91eb0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x563b58c91e80 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x563b58c4a6b0 <col:27> 'int' lvalue ->status 0x563b58c488a8
|       |       |   `-CXXThisExpr 0x563b58c4a6a0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x563b58c91e98 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x563b58c4a6f0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563b58c47590 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x563b58c91f60 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x563b58c4a7f0 <col:20> 'bool' false
|       `-IfStmt 0x563b58c92288 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x563b58c91fa0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x563b58c91f70 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x563b58c4a820 <col:18> 'int' lvalue ->status 0x563b58c488a8
|         | |   `-CXXThisExpr 0x563b58c4a810 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x563b58c91f88 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x563b58c4a850 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563b58c47590 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x563b58c921c0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x563b58c92130 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x563b58c4a8d0 <line:1076:13> '<bound member function type>' ->range_error 0x563b58c48eb8
|         | | | `-CXXThisExpr 0x563b58c4a8c0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x563b58c91fc0 <col:25> 'const ArgContext' lvalue ParmVar 0x563b58c915a0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x563b58c92198 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x563b58c92168 <col:31, col:50> 'const bool' lvalue Var 0x563b58907cd8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x563b58c92108 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x563b58c920f0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x563b58c920d8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x563b58c920b8 <col:43> 'int':'int' lvalue Var 0x563b58c918a8 'x' 'int':'int'
|         | `-ReturnStmt 0x563b58c921b0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x563b58c4aab8 <col:20> 'bool' false
|         `-CompoundStmt 0x563b58c92268 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x563b58c92238 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x563b58c921e0 <col:13> 'int':'int' lvalue ParmVar 0x563b58c91538 'result' 'int &'
|           | `-ImplicitCastExpr 0x563b58c92220 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x563b58c92200 <col:22> 'int':'int' lvalue Var 0x563b58c918a8 'x' 'int':'int'
|           `-ReturnStmt 0x563b58c92258 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x563b58c4ab58 <col:20> 'bool' true
|-FieldDecl 0x563b58c48840 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x563b58c488a8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x563b58c488f8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x563b58c48bb0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x563b58c48938 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x563b58c489b8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x563b58c48a30 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x563b58c48ab0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x563b58c48eb8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x563b58c48c80 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x563b58c48cf8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x563b58c48d90 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x563b58c4b448 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x563b58c4b448
| `-ParmVarDecl 0x563b58c4b558 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x563b58c4b6d8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563b58c4b7e8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x563b58c8e550 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563b58c8e520 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x563b58c8e4f0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563b58c8e4c0 <col:7> 'IntArg' lvalue ParmVar 0x563b58c4b7e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x563b58c48840 'base' 'int'
| | `-ImplicitCastExpr 0x563b58c8e648 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563b58c8e618 <col:7> 'int' xvalue .base 0x563b58c48840
| |     `-CXXStaticCastExpr 0x563b58c8e5e8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563b58c8e5b8 <col:7> 'IntArg' lvalue ParmVar 0x563b58c4b7e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x563b58c488a8 'status' 'int'
| | `-ImplicitCastExpr 0x563b58c8e718 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563b58c8e6e8 <col:7> 'int' xvalue .status 0x563b58c488a8
| |     `-CXXStaticCastExpr 0x563b58c8e6b8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563b58c8e688 <col:7> 'IntArg' lvalue ParmVar 0x563b58c4b7e8 '' 'IntArg &&'
| `-CompoundStmt 0x563b58c8e770 <col:7>
`-CXXDestructorDecl 0x563b58c8d6b0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b58c4fd10 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x563b58c4ff68 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x563b58c8d5d8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x563b58c8db50 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x563b58c8db30 <<invalid sloc>> 'int'
| `-CompoundStmt 0x563b58c8dbc0 <col:19>
|-CXXConstructorDecl 0x563b58c8d7b8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x563b58c8d7b8
| `-ParmVarDecl 0x563b58c8d8c8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x563b58c8d968 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563b58c8da78 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x563b58c8e780 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563b58c8e4a0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x563b58c8e470 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x563b58c8e440 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x563b58c8da78 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x563b58c8e7f0 <col:19>
`-CXXDestructorDecl 0x563b58c8dc00 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
