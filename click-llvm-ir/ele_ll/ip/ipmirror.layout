
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74b8a848 prev 0x55bc74b81fe8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bc74b8a940 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55bc74b8a9d0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55bc74b8aa48 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55bc74b8ab08 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55bc74b8abd0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55bc74b8ad48 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55bc74b8ac80 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55bc74b8adf0 <col:24>
| `-OptimizeNoneAttr 0x55bc74b8ae48 <col:34>
|-CXXMethodDecl 0x55bc74b8ae90 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55bc74b8b148 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55bc74b8af40 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55bc74b8afb8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55bc74b8b038 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55bc74b8b200 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55bc74b8b238 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55bc74b8b2a0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55bc74b8b328 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55bc74b8b648 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55bc74b8b3e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55bc74b8b458 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55bc74b8b4d0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55bc74b8b550 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55bc74b8b760 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55bc74b920c8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55bc74b920c8
| `-ParmVarDecl 0x55bc74b921d8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55bc74b92278 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55bc74b92278
| `-ParmVarDecl 0x55bc74b92388 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55bc74c4a880 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74b7d860 prev 0x55bc74b7d5e0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bc74b7d958 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55bc74b7d9e8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55bc74b7da48 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55bc74b7db38 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55bc74b7dc38 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55bc74b7de08 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55bc74b7dcb8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55bc74b7dd30 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55bc74b7df98 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55bc74b7ded0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55bc74b7e040 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b7e178 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55bc74b7e0b0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55bc74b7e318 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55bc74b7e258 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55bc74b7e4b8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55bc74b7e3f8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55bc74b7e560 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55bc74b7e660 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55bc74b7e740 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b7e640 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55bc74b7e620 <col:26> 'int' 1
| `-EnumConstantDecl 0x55bc74b7e6f0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55bc74b7e758 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74b7e6d0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55bc74b7e6b0 <col:44> 'int' 2
|-CXXMethodDecl 0x55bc74b7e8a0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55bc74b7e788 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55bc74b7e808 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55bc74b7e9f8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55bc74b7e968 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55bc74b7ec38 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55bc74b7eab8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55bc74b7eb30 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55bc74b7ece8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b7ed40 <col:30>
|-CXXMethodDecl 0x55bc74b7ee48 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55bc74b7ed80 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55bc74b7eef0 <col:20>
| `-OptimizeNoneAttr 0x55bc74b7ef48 <col:30>
|-CXXMethodDecl 0x55bc74b7ef98 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55bc74b7f060 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55bc74b7f178 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55bc74b7f200 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55bc74b7f288 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55bc74b7f310 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55bc74b7f398 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55bc74b7f428 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55bc74b7f4e8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55bc74b7f570 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55bc74b7f5f8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55bc74b7f680 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55bc74b7f708 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55bc74b7f790 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55bc74b7f820 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55bc74b7f8e0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55bc74b7f970 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55bc74b7fac0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55bc74b7fa28 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55bc74b7fc50 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55bc74b7fb80 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55bc74b7ff00 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55bc74b7fd08 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55bc74b7fd88 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55bc74b7fe08 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55bc74b7ffb8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55bc74b800c0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bc74b80350 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b800a0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55bc74b80080 <col:33> 'int' 0
| |-EnumConstantDecl 0x55bc74b80150 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bc74b80368 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b80130 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55bc74b80110 <col:32> 'int' 20
| |-EnumConstantDecl 0x55bc74b801e0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bc74b80380 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b801c0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55bc74b801a0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55bc74b80270 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bc74b80398 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b80250 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55bc74b80230 <col:35> 'int' 100
| `-EnumConstantDecl 0x55bc74b80300 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55bc74b803b0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74b802e0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55bc74b802c0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55bc74b803f0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55bc74b80830 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bc74b806a0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55bc74b80718 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bc74b80900 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55bc74b80a80 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55bc74b809b0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bc74b80c88 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bc74b80b38 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55bc74b80bb0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bc74b80d88 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55bc74b80e28 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55bc74b80ef0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bc74b80f80 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55bc74b811b0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b80f60 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55bc74b80f40 <col:36> 'int' EnumConstant 0x55bc74b80ef0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bc74b80fd0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bc74b81020 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bc74b81070 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bc74b810c0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bc74b81110 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55bc74b81160 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55bc74b81298 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55bc74b811d8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55bc74b81360 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55bc74b81420 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55bc74b814e0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55bc74b815a0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55bc74b816b8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55bc74b81780 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55bc74b81900 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55bc74b81830 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55bc74b81a28 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55bc74b81c28 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55bc74b81ad8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55bc74b81b58 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55bc74b8e568 <col:54, line:127:5>
|   |-ParenExpr 0x55bc74b8e418 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55bc74b8e3e8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b8e0d8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55bc74b8e0b0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55bc74b8e098 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55bc74b8e080 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55bc74b8e050 <col:31> 'Router *' lvalue ->_router 0x55bc74b8bf30
|   |   |         `-CXXThisExpr 0x55bc74b8e040 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55bc74b8e138 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b8e118 <col:48> 'int' 0
|   |   `-CallExpr 0x55bc74b8e348 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b8e330 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b8e310 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b8e388 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b8e1a8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55bc74b8e3a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b8e1c8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55bc74b8e3b8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b8e200 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55bc74b8e3d0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b8e2f8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b8e2e0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b8e298 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55bc74b8e4b0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55bc74b8e448 <col:9> 'Router *' lvalue ->_router 0x55bc74b8bf30
|   | | `-CXXThisExpr 0x55bc74b8e438 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55bc74b8e498 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bc74b8e478 <col:19> 'Router *' lvalue ParmVar 0x55bc74b81ad8 'r' 'Router *'
|   `-BinaryOperator 0x55bc74b8e548 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55bc74b8e4e0 <col:9> 'int' lvalue ->_eindex 0x55bc74b8bf98
|     | `-CXXThisExpr 0x55bc74b8e4d0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55bc74b8e530 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55bc74b8e510 <col:19> 'int' lvalue ParmVar 0x55bc74b81b58 'eindex' 'int'
|-CXXMethodDecl 0x55bc74b81db0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55bc74b81ce8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55bc74b81e80 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55bc74b81f48 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55bc74b81fe8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55bc74b82238 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55bc74b820b0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55bc74b82130 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55bc74b822e8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b82340 <col:30>
|-CXXMethodDecl 0x55bc74b82448 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55bc74b82380 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55bc74b824f0 <col:20>
| `-OptimizeNoneAttr 0x55bc74b82548 <col:30>
|-CXXMethodDecl 0x55bc74b82618 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55bc74b82588 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55bc74b826c0 <col:20>
| `-OptimizeNoneAttr 0x55bc74b82718 <col:30>
|-CXXMethodDecl 0x55bc74b828a8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55bc74b82750 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55bc74b827d0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55bc74b82a38 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55bc74b82970 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55bc74b82b88 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55bc74b82af8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55bc74b82cd8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55bc74b82c48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55bc74b82e28 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55bc74b82d98 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55bc74b830e8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55bc74b82ee0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55bc74b82f60 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55bc74b83008 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55bc74b831c0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55bc74b83280 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55bc74b83550 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bc74b83400 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55bc74b83478 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55bc74b83678 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55bc74b83850 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55bc74b83730 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55bc74b837b0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55bc74b83a38 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55bc74b83918 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55bc74b83998 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55bc74b83da8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55bc74b83af8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55bc74b83b70 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55bc74b83bf0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55bc74b8db50 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55bc74b8db30 <col:106> 'int' 0
| `-ParmVarDecl 0x55bc74b83c68 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bc74b8db88 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bc74b8db68 <col:126> 'int' 0
|-CXXMethodDecl 0x55bc74b84148 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bc74b83e78 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55bc74b83f10 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55bc74b83f90 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55bc74b84008 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bc74b8dbc0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bc74b8dba0 <col:114> 'int' 0
|-CXXMethodDecl 0x55bc74b844d8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bc74b84220 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55bc74b84298 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55bc74b84318 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55bc74b8dbd8 <col:96> 'int' 0
| `-ParmVarDecl 0x55bc74b84390 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bc74b8dc18 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bc74b8dbf8 <col:116> 'int' 0
|-CXXMethodDecl 0x55bc74b84858 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55bc74b845a8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55bc74b84620 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74b846a0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55bc74b8dc50 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55bc74b8dc30 <col:109> 'int' 0
| `-ParmVarDecl 0x55bc74b84718 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bc74b8dc88 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bc74b8dc68 <col:129> 'int' 0
|-CXXMethodDecl 0x55bc74b84bd8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bc74b84928 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55bc74b849a0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74b84a20 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55bc74b84a98 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bc74b8dcc0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bc74b8dca0 <col:117> 'int' 0
|-CXXMethodDecl 0x55bc74b84f68 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bc74b84cb0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b84d28 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74b84da8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55bc74b8dcd8 <col:99> 'int' 0
| `-ParmVarDecl 0x55bc74b84e20 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bc74b8dd18 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bc74b8dcf8 <col:119> 'int' 0
|-CXXMethodDecl 0x55bc74b85388 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55bc74b85038 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55bc74b850b8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55bc74b85130 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74b851b0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55bc74b8dd50 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55bc74b8dd30 <col:108> 'int' 0
| `-ParmVarDecl 0x55bc74b85230 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55bc74b8dd88 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55bc74b8dd68 <col:141> 'int' 0
|-CXXMethodDecl 0x55bc74b857a8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55bc74b85460 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55bc74b854e0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55bc74b85558 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74b855d8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55bc74b85658 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55bc74b8dda0 <col:121> 'int' 0
|-CXXMethodDecl 0x55bc74b85bd8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55bc74b85888 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55bc74b85908 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55bc74b85980 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74b85a00 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55bc74b8ddc0 <col:98> 'int' 0
| `-ParmVarDecl 0x55bc74b85a80 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55bc74b8dde0 <col:123> 'int' 0
|-CXXMethodDecl 0x55bc74b85ea0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55bc74b85cb0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55bc74b85d30 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55bc74b85db0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55bc74b8de00 <col:80> 'int' 0
|-EnumDecl 0x55bc74b85f58 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55bc74b86060 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bc74b862f0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b86040 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55bc74b86020 <col:42> 'int' 1
| |-EnumConstantDecl 0x55bc74b860f0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bc74b86308 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b860d0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55bc74b860b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55bc74b86180 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bc74b86320 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b86160 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55bc74b86140 <col:44> 'int' 4
| |-EnumConstantDecl 0x55bc74b86210 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bc74b86338 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b861f0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55bc74b861d0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55bc74b862a0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55bc74b86350 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74b86280 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55bc74b86260 <col:34> 'int' 6
|-CXXMethodDecl 0x55bc74b86608 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55bc74b86378 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55bc74b86418 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55bc74b86498 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55bc74b86510 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55bc74b8deb8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55bc74b8dea0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55bc74b8de88 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55bc74b8de68 <col:98, col:105> 'String' (CXXTemporary 0x55bc74b8de68)
|           `-CXXTemporaryObjectExpr 0x55bc74b8de30 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55bc74b868a8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55bc74b866d8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55bc74b86750 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55bc74b867c8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55bc74b8df68 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55bc74b8df50 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55bc74b8df38 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55bc74b8df18 <col:94, col:101> 'String' (CXXTemporary 0x55bc74b8df18)
| |         `-CXXTemporaryObjectExpr 0x55bc74b8dee0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55bc74b8e750 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55bc74b8e6c8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55bc74b8e698 <col:9> '<bound member function type>' ->add_task_handlers 0x55bc74b86608
|     | `-CXXThisExpr 0x55bc74b8e688 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55bc74b8e708 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bc74b8e608 <col:27> 'Task *' lvalue ParmVar 0x55bc74b866d8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55bc74b8e720 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bc74b8e628 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55bc74b86750 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55bc74b8e738 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55bc74b8e648 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55bc74b862a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55bc74b8e668 <col:62> 'const String' lvalue ParmVar 0x55bc74b867c8 'prefix' 'const String &'
|-CXXMethodDecl 0x55bc74b86ab8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55bc74b86970 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55bc74b869e8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55bc74b8e018 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55bc74b8e000 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55bc74b8dfe8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55bc74b8dfc8 <col:70, col:77> 'String' (CXXTemporary 0x55bc74b8dfc8)
| |         `-CXXTemporaryObjectExpr 0x55bc74b8df90 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55bc74b8e928 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55bc74b8e8a0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55bc74b8e870 <col:9> '<bound member function type>' ->add_task_handlers 0x55bc74b86608
|     | `-CXXThisExpr 0x55bc74b8e860 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55bc74b8e8e0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bc74b8e7e0 <col:27> 'Task *' lvalue ParmVar 0x55bc74b86970 'task' 'Task *'
|     |-ImplicitCastExpr 0x55bc74b8e8f8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55bc74b8e800 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55bc74b8e910 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55bc74b8e820 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55bc74b862a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55bc74b8e840 <col:57> 'const String' lvalue ParmVar 0x55bc74b869e8 'prefix' 'const String &'
|-CXXMethodDecl 0x55bc74b86d98 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55bc74b86b80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b86c00 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b86c78 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55bc74b87048 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55bc74b86e68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b86ee8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b86f68 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55bc74b87338 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55bc74b87118 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b87198 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b87210 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55bc74b875e8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55bc74b87408 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b87488 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b87508 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55bc74b87898 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55bc74b876b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b87738 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b877b8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55bc74b87b48 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55bc74b87968 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b879e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b87a60 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55bc74b87df8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55bc74b87c18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b87c98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b87d18 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55bc74b88108 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55bc74b87f20 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b87fa0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b88020 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55bc74b883e8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55bc74b881d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b88258 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b88300 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55bc74b886c8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55bc74b884b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b88538 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b885e0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55bc74b88930 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55bc74b88798 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55bc74b88818 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55bc74b88890 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55bc74b88bd8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55bc74b88a00 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55bc74b88a80 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55bc74b88af8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55bc74b88e88 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55bc74b88ca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b88d28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b88da8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55bc74b89138 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55bc74b88f58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b88fd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b89050 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55bc74b893e8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55bc74b89208 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b89288 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b89300 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55bc74b896b8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55bc74b894b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b89538 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bc74b895d8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55bc74b899e8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55bc74b89788 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bc74b89808 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55bc74b89880 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55bc74b898f8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bc74b8e030 <col:93> 'bool' false
|-CXXMethodDecl 0x55bc74b89bd0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bc74b89ab8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55bc74b89b38 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55bc74b89da8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bc74b89c90 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55bc74b89d10 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55bc74b8a088 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bc74b89e68 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55bc74b89ee0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55bc74b89f60 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55bc74b89fd8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55bc74b8a378 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bc74b8a158 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55bc74b8a1d0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55bc74b8a250 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55bc74b8a2c8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55bc74b8a5b0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55bc74b8a450 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55bc74b8a4d0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55bc74b8a798 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55bc74b8a678 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55bc74b8a6f8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55bc74b8a848 prev 0x55bc74b81fe8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bc74b8a940 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55bc74b8a9d0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55bc74b8aa48 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55bc74b8ab08 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55bc74b8abd0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55bc74b8ad48 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55bc74b8ac80 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55bc74b8adf0 <col:24>
| | `-OptimizeNoneAttr 0x55bc74b8ae48 <col:34>
| |-CXXMethodDecl 0x55bc74b8ae90 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55bc74b8b148 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55bc74b8af40 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55bc74b8afb8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55bc74b8b038 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55bc74b8b200 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55bc74b8b238 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55bc74b8b2a0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55bc74b8b328 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55bc74b8b648 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55bc74b8b3e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55bc74b8b458 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55bc74b8b4d0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55bc74b8b550 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55bc74b8b760 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55bc74b920c8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55bc74b920c8
| | `-ParmVarDecl 0x55bc74b921d8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55bc74b92278 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55bc74b92278
| | `-ParmVarDecl 0x55bc74b92388 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55bc74c4a880 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bc74b8b7d8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55bc74b8b878 <col:38> "" ""
|-CXXMethodDecl 0x55bc74b8b908 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55bc74b8b9a8 <col:44> "" ""
|-AccessSpecDecl 0x55bc74b8ba18 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55bc74b8ba40 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55bc74b8bb40 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55bc74b8bb90 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74b8bb20 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55bc74b8bb00 <col:27> 'int' 4
|-FieldDecl 0x55bc74b8bc48 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55bc74b8bdf8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55bc74b8beb0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55bc74b8bf30 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55bc74b8bf98 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55bc74b8c0e8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55bc74b8c028 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55bc74b8c298 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55bc74b8c1a8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55bc74b8c478 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55bc74b8c358 <col:20> col:23 'int'
| `-ParmVarDecl 0x55bc74b8c3d8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55bc74b8c720 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74b8c540 <col:23> col:26 'int'
| |-ParmVarDecl 0x55bc74b8c5c0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55bc74b8c638 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55bc74b8c7d8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55bc74b8c8a0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55bc74b8c8f0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55bc74b8c940 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55bc74b8cb20 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55bc74b8c9d0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55bc74b8ca48 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bc74b8cdc8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55bc74b8cbe8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55bc74b8cc68 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55bc74b8cce0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55bc74b8cfe8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55bc74b8ce98 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55bc74b8cf18 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55bc74b8d320 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55bc74b8d0a8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55bc74b8d128 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55bc74b8d1a0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55bc74b8d220 <col:57> col:60 'int'
|-CXXMethodDecl 0x55bc74b8d508 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bc74b8d3f0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55bc74b8d470 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55bc74b8d658 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55bc74b8d5c8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55bc74b8d9d8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55bc74b8d718 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55bc74b8d798 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55bc74b8d810 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55bc74b8d890 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55bc74b8daf0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPMirror
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _dst_anno
           | [sizeof=112, dsize=109, align=8,
           |  nvsize=109, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74b95238 <../elements/ip/ipmirror.hh:32:1, line:47:1> line:32:7 class IPMirror definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55bc74b95398 <col:1, col:7> col:7 implicit referenced class IPMirror
|-AccessSpecDecl 0x55bc74b95428 <col:35, col:41> col:35 public
|-CXXConstructorDecl 0x55bc74b954b0 <line:34:5, col:14> col:5 IPMirror 'void ()'
|-CXXDestructorDecl 0x55bc74b955a0 <line:35:5, col:15> col:5 ~IPMirror 'void ()' noexcept-unevaluated 0x55bc74b955a0
| `-Overrides: [ 0x55bc74b7db38 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55bc74b956d0 <line:37:5, col:57> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55bc74b7ef98 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55bc74b96090 <col:36, col:57>
|   `-ReturnStmt 0x55bc74b96080 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bc74b96068 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55bc74b96048 <col:45> 'const char [9]' lvalue "IPMirror"
|-CXXMethodDecl 0x55bc74b95798 <line:38:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55bc74b7f060 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55bc74b960f0 <col:36, col:56>
|   `-ReturnStmt 0x55bc74b960e0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bc74b960c8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55bc74b960a8 <col:45> 'const char []' lvalue Var 0x55bc74b7f310 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55bc74b95a70 <line:40:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55bc74b80830 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55bc74b95920 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x55bc74b95998 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bc74b95bc0 <line:41:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55bc74b7e178 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55bc74b95b30 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55bc74b95c68 <line:43:3, col:10> col:3 private
|-FieldDecl 0x55bc74b95ca0 <line:45:5, col:10> col:10 _dst_anno 'bool'
|-CXXConstructorDecl 0x55bc74b95d18 <line:32:7> col:7 implicit IPMirror 'void (const IPMirror &)' inline default_delete noexcept-unevaluated 0x55bc74b95d18
| `-ParmVarDecl 0x55bc74b95e28 <col:7> col:7 'const IPMirror &'
`-CXXMethodDecl 0x55bc74b95ec8 <col:7> col:7 implicit operator= 'IPMirror &(const IPMirror &)' inline default_delete noexcept-unevaluated 0x55bc74b95ec8
  `-ParmVarDecl 0x55bc74b95fd8 <col:7> col:7 'const IPMirror &'

Layout: <CGRecordLayout
  LLVMType:%class.IPMirror = type { %class.Element.base, i8, [3 x i8] }
  NonVirtualBaseLLVMType:%class.IPMirror.base = type { %class.Element.base, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc7494d510 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bc7494d628 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55bc7494d6c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55bc7494d728 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55bc7494d788 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55bc7494d838 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc7494db40 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bc7494dc58 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55bc7494dd00 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55bc7494dd68 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55bc7494ddf8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55bc74953e90 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bc749542c8 <col:12>
|-CXXConstructorDecl 0x55bc74953f98 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bc749540a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55bc7494dd00 'data' 'const char *'
| | `-ImplicitCastExpr 0x55bc74956850 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55bc74956820 <col:12> 'const char *const' lvalue .data 0x55bc7494dd00
| |     `-DeclRefExpr 0x55bc74956800 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749540a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55bc7494dd68 'length' 'int'
| | `-ImplicitCastExpr 0x55bc749568e0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55bc749568b0 <col:12> 'const int' lvalue .length 0x55bc7494dd68
| |     `-DeclRefExpr 0x55bc74956890 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749540a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55bc7494ddf8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55bc74956970 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55bc74956940 <col:12> 'String::memo_t *const' lvalue .memo 0x55bc7494ddf8
| |     `-DeclRefExpr 0x55bc74956920 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749540a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55bc749569c8 <col:12>
|-CXXConstructorDecl 0x55bc74954148 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bc74954148
| `-ParmVarDecl 0x55bc74954258 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55bc749597b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bc749651c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bc749652d8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55bc749657f0 <col:12>
|   |-BinaryOperator 0x55bc74965608 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55bc749655c0 <col:12> 'const char *' lvalue ->data 0x55bc7494dd00
|   | | `-CXXThisExpr 0x55bc749655b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55bc749655f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55bc74965580 <col:12> 'const char *const' lvalue .data 0x55bc7494dd00
|   |     `-DeclRefExpr 0x55bc74965560 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749652d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55bc749656d0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55bc74965688 <col:12> 'int' lvalue ->length 0x55bc7494dd68
|   | | `-CXXThisExpr 0x55bc74965678 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55bc749656b8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55bc74965648 <col:12> 'const int' lvalue .length 0x55bc7494dd68
|   |     `-DeclRefExpr 0x55bc74965628 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749652d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55bc74965798 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55bc74965750 <col:12> 'String::memo_t *' lvalue ->memo 0x55bc7494ddf8
|   | | `-CXXThisExpr 0x55bc74965740 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55bc74965780 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55bc74965710 <col:12> 'String::memo_t *const' lvalue .memo 0x55bc7494ddf8
|   |     `-DeclRefExpr 0x55bc749656f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749652d8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55bc749657e0 <col:12>
|     `-UnaryOperator 0x55bc749657c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bc749657b8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55bc74965348 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bc74965348
  `-ParmVarDecl 0x55bc74965458 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74944a80 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bc74944b98 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55bc74944c28 <col:16, col:22> col:16 public
|-TypedefDecl 0x55bc74944c68 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55bc74619fd0 'const char *'
|   `-QualType 0x55bc74619521 'const char' const
|     `-BuiltinType 0x55bc74619520 'char'
|-TypedefDecl 0x55bc74944cf0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55bc74944cc0 'String::const_iterator' sugar
|   |-Typedef 0x55bc74944c68 'const_iterator'
|   `-PointerType 0x55bc74619fd0 'const char *'
|     `-QualType 0x55bc74619521 'const char' const
|       `-BuiltinType 0x55bc74619520 'char'
|-TypedefDecl 0x55bc74944e60 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55bc74944dd0 'int (String::*)() const'
|   |-RecordType 0x55bc74944b10 'String'
|   | `-CXXRecord 0x55bc74944a80 'String'
|   `-ParenType 0x55bc74944d70 'int () const' sugar
|     `-FunctionProtoType 0x55bc74919910 'int () const' const cdecl
|       `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74944ec8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55bc7476e2d0 'int64_t' sugar
|   |-Typedef 0x55bc74682390 'int64_t'
|   `-TypedefType 0x55bc7465b630 '__int64_t' sugar
|     |-Typedef 0x55bc7465b208 '__int64_t'
|     `-BuiltinType 0x55bc746195a0 'long'
|-TypedefDecl 0x55bc74944f30 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55bc7476e1f0 'uint64_t' sugar
|   |-Typedef 0x55bc74682530 'uint64_t'
|   `-TypedefType 0x55bc7465b6c0 '__uint64_t' sugar
|     |-Typedef 0x55bc7465b278 '__uint64_t'
|     `-BuiltinType 0x55bc74619640 'unsigned long'
|-TypedefDecl 0x55bc74944fc0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55bc74944f90 'String::intmax_t' sugar
|   |-Typedef 0x55bc74944ec8 'intmax_t'
|   `-TypedefType 0x55bc7476e2d0 'int64_t' sugar
|     |-Typedef 0x55bc74682390 'int64_t'
|     `-TypedefType 0x55bc7465b630 '__int64_t' sugar
|       |-Typedef 0x55bc7465b208 '__int64_t'
|       `-BuiltinType 0x55bc746195a0 'long'
|-TypedefDecl 0x55bc74945050 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55bc74945020 'String::uintmax_t' sugar
|   |-Typedef 0x55bc74944f30 'uintmax_t'
|   `-TypedefType 0x55bc7476e1f0 'uint64_t' sugar
|     |-Typedef 0x55bc74682530 'uint64_t'
|     `-TypedefType 0x55bc7465b6c0 '__uint64_t' sugar
|       |-Typedef 0x55bc7465b278 '__uint64_t'
|       `-BuiltinType 0x55bc74619640 'unsigned long'
|-CXXConstructorDecl 0x55bc74945110 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55bc749452b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55bc749451f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55bc74945468 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55bc749453a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55bc749455c0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55bc74945530 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55bc749457d8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55bc74945688 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55bc74945708 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55bc749459f8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55bc749458a8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55bc74945928 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55bc74945c18 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55bc74945ac8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55bc74945b48 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55bc74945e38 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55bc74945ce8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55bc74945d68 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55bc74945fc8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55bc74945f00 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55bc74946148 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55bc74946088 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55bc749462d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55bc74946210 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55bc74946430 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55bc749463a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55bc74946588 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55bc749464f8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55bc749466e0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55bc74946650 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55bc74946868 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55bc749467a8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55bc749469f8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55bc74946930 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55bc74946b88 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55bc74946ac0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55bc74946d18 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55bc74946c50 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55bc74946e10 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55bc74946f38 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55bc749470b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55bc74946ff0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55bc74947208 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55bc74947178 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55bc749472c0 <col:63> "" ""
|-CXXMethodDecl 0x55bc74947408 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55bc74947348 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55bc74947618 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55bc749474c8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55bc74947548 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55bc74947838 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55bc749476e0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55bc74947760 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55bc74947b18 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55bc749478f8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55bc74947978 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55bc74953960 <col:55> 'int' 10
| `-ParmVarDecl 0x55bc749479f0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bc74953980 <col:76> 'bool' true
|-CXXMethodDecl 0x55bc74947df8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55bc74947be0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55bc74947c60 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55bc74953990 <col:56> 'int' 10
| `-ParmVarDecl 0x55bc74947cd8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bc749539b0 <col:77> 'bool' true
|-CXXMethodDecl 0x55bc74947f00 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55bc74947fc8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55bc74948090 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55bc74948130 <col:20>
| `-OptimizeNoneAttr 0x55bc74948188 <col:30>
|-CXXConversionDecl 0x55bc74948278 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55bc74948348 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55bc74948408 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55bc749484f8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55bc749485b8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55bc74948738 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55bc74948670 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55bc74948888 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55bc749487f8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55bc74948978 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55bc74948a38 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55bc74948c88 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55bc74948af0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55bc74948b70 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55bc74948ee8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55bc74948d50 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55bc74948dd0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55bc74948fb8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55bc749491c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55bc74949070 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55bc749490f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55bc749493e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55bc74949290 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55bc74949310 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55bc74949578 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55bc749494b0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55bc74949668 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55bc749497d8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55bc74949718 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55bc749499e8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55bc74949898 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55bc74949918 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55bc74949c00 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55bc74949aa8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55bc74949b20 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55bc74949d90 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55bc74949cc0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55bc74949fb0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55bc74949e50 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55bc74949ed0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55bc7494a100 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55bc7494a070 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55bc7494a2d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55bc7494a1c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55bc7494a240 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55bc7494a428 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55bc7494a398 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55bc7494a640 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55bc7494a4e0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55bc7494a560 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55bc749539c0 <col:39> 'int' 0
|-CXXMethodDecl 0x55bc7494a860 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55bc7494a700 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55bc7494a780 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55bc749539e0 <col:48> 'int' 0
|-CXXMethodDecl 0x55bc7494aa40 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55bc7494a920 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55bc7494a9a0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55bc74953a00 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55bc7494ab10 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55bc7494abd0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55bc7494ac90 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55bc7494ad50 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55bc7494ae10 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55bc7494afb8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55bc7494aec0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55bc7494b138 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55bc7494b070 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55bc7494b310 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55bc7494b1f8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55bc7494b488 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55bc7494b3c8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55bc7494b5d0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55bc7494b540 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55bc7494b720 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55bc7494b690 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55bc7494b8f8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55bc7494b7e0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55bc7494b860 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55bc7494bad8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55bc7494b9c0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55bc7494ba40 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55bc7494bc28 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55bc7494bb98 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55bc7494be38 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55bc7494bce8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55bc7494bd68 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55bc7494bf98 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55bc7494bf00 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55bc7494c0f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55bc7494c058 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55bc7494c198 <col:57> "" ""
|-CXXMethodDecl 0x55bc7494c2a8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55bc7494c218 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55bc7494c3f8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55bc7494c368 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55bc7494c578 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55bc7494c4b0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55bc7494c640 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55bc7494c700 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55bc7494c7c0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55bc7494c860 <col:49> "" ""
|-CXXMethodDecl 0x55bc7494c8f0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55bc7494c9b0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55bc7494caa0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55bc7494cb68 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55bc7494cc28 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55bc7494cce8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55bc7494cde0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55bc7494cea8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55bc7494cf70 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55bc7494d148 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55bc7494d028 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55bc7494d0a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55bc7494d370 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55bc7494d210 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55bc7494d290 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55bc7494d480 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55bc7494d4e8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55bc7494d510 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55bc7494d628 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55bc7494d6c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55bc7494d728 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55bc7494d788 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55bc7494d838 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55bc7494d8a0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55bc7494dad8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55bc7494db28 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc7494dab8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55bc7494d9c8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55bc7494d970 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55bc7494d9b0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55bc7494d990 <col:32> 'int' 8
|-CXXRecordDecl 0x55bc7494db40 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bc7494dc58 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55bc7494dd00 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55bc7494dd68 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55bc7494ddf8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55bc74953e90 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55bc749542c8 <col:12>
| |-CXXConstructorDecl 0x55bc74953f98 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bc749540a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55bc7494dd00 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55bc74956850 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55bc74956820 <col:12> 'const char *const' lvalue .data 0x55bc7494dd00
| | |     `-DeclRefExpr 0x55bc74956800 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749540a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55bc7494dd68 'length' 'int'
| | | `-ImplicitCastExpr 0x55bc749568e0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55bc749568b0 <col:12> 'const int' lvalue .length 0x55bc7494dd68
| | |     `-DeclRefExpr 0x55bc74956890 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749540a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55bc7494ddf8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55bc74956970 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55bc74956940 <col:12> 'String::memo_t *const' lvalue .memo 0x55bc7494ddf8
| | |     `-DeclRefExpr 0x55bc74956920 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749540a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55bc749569c8 <col:12>
| |-CXXConstructorDecl 0x55bc74954148 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bc74954148
| | `-ParmVarDecl 0x55bc74954258 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55bc749597b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55bc749651c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bc749652d8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55bc749657f0 <col:12>
| |   |-BinaryOperator 0x55bc74965608 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55bc749655c0 <col:12> 'const char *' lvalue ->data 0x55bc7494dd00
| |   | | `-CXXThisExpr 0x55bc749655b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55bc749655f0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55bc74965580 <col:12> 'const char *const' lvalue .data 0x55bc7494dd00
| |   |     `-DeclRefExpr 0x55bc74965560 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749652d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55bc749656d0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55bc74965688 <col:12> 'int' lvalue ->length 0x55bc7494dd68
| |   | | `-CXXThisExpr 0x55bc74965678 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55bc749656b8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55bc74965648 <col:12> 'const int' lvalue .length 0x55bc7494dd68
| |   |     `-DeclRefExpr 0x55bc74965628 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749652d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55bc74965798 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55bc74965750 <col:12> 'String::memo_t *' lvalue ->memo 0x55bc7494ddf8
| |   | | `-CXXThisExpr 0x55bc74965740 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55bc74965780 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55bc74965710 <col:12> 'String::memo_t *const' lvalue .memo 0x55bc7494ddf8
| |   |     `-DeclRefExpr 0x55bc749656f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bc749652d8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55bc749657e0 <col:12>
| |     `-UnaryOperator 0x55bc749657c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55bc749657b8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55bc74965348 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bc74965348
|   `-ParmVarDecl 0x55bc74965458 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55bc7494de70 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55bc7494e0b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55bc7494ded8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55bc7494df58 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55bc7494dfd0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55bc74953e50 <col:79, line:261:5>
|   |-BinaryOperator 0x55bc74953ac8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55bc74953a60 <col:2, col:5> 'const char *' lvalue .data 0x55bc7494dd00
|   | | `-MemberExpr 0x55bc74953a30 <col:2> 'String::rep_t' lvalue ->_r 0x55bc7494de70
|   | |   `-CXXThisExpr 0x55bc74953a20 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55bc74953ab0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bc74953a90 <col:12> 'const char *' lvalue ParmVar 0x55bc7494ded8 'data' 'const char *'
|   |-BinaryOperator 0x55bc74953b90 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55bc74953b28 <col:2, col:5> 'int' lvalue .length 0x55bc7494dd68
|   | | `-MemberExpr 0x55bc74953af8 <col:2> 'String::rep_t' lvalue ->_r 0x55bc7494de70
|   | |   `-CXXThisExpr 0x55bc74953ae8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55bc74953b78 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bc74953b58 <col:14> 'int' lvalue ParmVar 0x55bc7494df58 'length' 'int'
|   `-IfStmt 0x55bc74953e38 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55bc74953cb0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55bc74953c98 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55bc74953c78 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55bc74953c58 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55bc74953bf0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55bc7494ddf8
|     |       | `-MemberExpr 0x55bc74953bc0 <col:7> 'String::rep_t' lvalue ->_r 0x55bc7494de70
|     |       |   `-CXXThisExpr 0x55bc74953bb0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55bc74953c40 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bc74953c20 <col:17> 'String::memo_t *' lvalue ParmVar 0x55bc7494dfd0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55bc74953e10 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55bc74953df8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bc74953d00 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55bc7493cae8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55bc74953d68 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55bc7494d6c8
|         `-ImplicitCastExpr 0x55bc74953d50 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55bc74953d30 <col:27> 'String::memo_t *' lvalue ParmVar 0x55bc7494dfd0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55bc7494e368 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55bc7494e188 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55bc7494e208 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55bc7494e280 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55bc7494de70 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55bc749542d8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55bc74954468 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55bc749543d0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55bc74954340 <col:2> '<bound member function type>' ->assign_memo 0x55bc7494e0b8
|     | `-ImplicitCastExpr 0x55bc74954408 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55bc74954330 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55bc74954420 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bc74954370 <col:14> 'const char *' lvalue ParmVar 0x55bc7494e188 'data' 'const char *'
|     |-ImplicitCastExpr 0x55bc74954438 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55bc74954390 <col:20> 'int' lvalue ParmVar 0x55bc7494e208 'length' 'int'
|     `-ImplicitCastExpr 0x55bc74954450 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55bc749543b0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55bc7494e280 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55bc7494e4f8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55bc7494e438 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55bc749546c0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55bc74954640 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55bc74954490 <col:2> '<bound member function type>' ->assign_memo 0x55bc7494e0b8
|     | `-CXXThisExpr 0x55bc74954480 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55bc74954678 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55bc74954510 <col:14, col:19> 'const char *' lvalue .data 0x55bc7494dd00
|     |   `-MemberExpr 0x55bc749544e0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55bc7494de70
|     |     `-DeclRefExpr 0x55bc749544c0 <col:14> 'const String' lvalue ParmVar 0x55bc7494e438 'x' 'const String &'
|     |-ImplicitCastExpr 0x55bc74954690 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55bc74954590 <col:25, col:30> 'int' lvalue .length 0x55bc7494dd68
|     |   `-MemberExpr 0x55bc74954560 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55bc7494de70
|     |     `-DeclRefExpr 0x55bc74954540 <col:25> 'const String' lvalue ParmVar 0x55bc7494e438 'x' 'const String &'
|     `-ImplicitCastExpr 0x55bc749546a8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55bc74954610 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55bc7494ddf8
|         `-MemberExpr 0x55bc749545e0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55bc7494de70
|           `-DeclRefExpr 0x55bc749545c0 <col:38> 'const String' lvalue ParmVar 0x55bc7494e438 'x' 'const String &'
|-CXXMethodDecl 0x55bc7494e5c0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55bc74955080 <col:31, line:278:5>
|   `-IfStmt 0x55bc74955068 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55bc74954760 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55bc74954748 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55bc74954718 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55bc7494ddf8
|     |     `-MemberExpr 0x55bc749546e8 <col:6> 'String::rep_t' lvalue ->_r 0x55bc7494de70
|     |       `-CXXThisExpr 0x55bc749546d8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55bc74955040 <col:15, line:277:2>
|       |-ParenExpr 0x55bc74954c10 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55bc74954be0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55bc74954870 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55bc74954858 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55bc74954840 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55bc74954800 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55bc7494d6c8
|       |   |       `-ImplicitCastExpr 0x55bc749547e8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55bc749547b8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55bc7494ddf8
|       |   |           `-MemberExpr 0x55bc74954788 <col:27> 'String::rep_t' lvalue ->_r 0x55bc7494de70
|       |   |             `-CXXThisExpr 0x55bc74954778 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55bc749548d0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55bc749548b0 <col:54> 'int' 0
|       |   `-CallExpr 0x55bc74954b40 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55bc74954b28 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55bc74954aa8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55bc74954b80 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55bc749549b8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55bc74954b98 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55bc749549e8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55bc74954bb0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55bc74954a20 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55bc74954bc8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55bc74954a90 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55bc74954a78 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55bc74954a40 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55bc74954f60 <line:274:6, line:275:22>
|       | |-CallExpr 0x55bc74954e20 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55bc74954e08 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55bc74954d80 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55bc7493df30 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55bc74954d50 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55bc7494d6c8
|       | |   `-ImplicitCastExpr 0x55bc74954d38 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55bc74954d08 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55bc7494ddf8
|       | |       `-MemberExpr 0x55bc74954cd8 <col:40> 'String::rep_t' lvalue ->_r 0x55bc7494de70
|       | |         `-CXXThisExpr 0x55bc74954cc8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55bc74954f20 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55bc74954f08 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55bc74954e48 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55bc74952da0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55bc74954f48 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55bc74954ea8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55bc7494ddf8
|       |       `-MemberExpr 0x55bc74954e78 <col:15> 'String::rep_t' lvalue ->_r 0x55bc7494de70
|       |         `-CXXThisExpr 0x55bc74954e68 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55bc74955020 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55bc74954fb8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55bc7494ddf8
|         | `-MemberExpr 0x55bc74954f88 <col:6> 'String::rep_t' lvalue ->_r 0x55bc7494de70
|         |   `-CXXThisExpr 0x55bc74954f78 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55bc74955008 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55bc74954fe8 <col:16> 'int' 0
|-CXXMethodDecl 0x55bc7494e858 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55bc7494e678 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55bc7494e6f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55bc7494e770 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55bc7494e930 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55bc7494eb80 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55bc7494e9e8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55bc7494ea68 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55bc7494eae0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55bc7494ed68 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55bc7494ec50 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55bc7494ecd0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55bc7494ee68 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55bc74955158 <col:41, line:286:5>
|   `-ReturnStmt 0x55bc74955148 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55bc74955118 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55bc749550e0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55bc749550c8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55bc749550a8 <col:46> 'int' 1
|-CXXMethodDecl 0x55bc7494f108 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55bc7494ef20 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55bc7494efa0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55bc7494f020 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55bc74952da0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55bc7494f1d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55bc74952e70 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55bc74953040 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55bc74952f28 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55bc74952fa8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55bc74953100 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55bc749531c8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55bc749532c8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55bc74953340 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55bc749533b8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55bc74953420 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55bc74953520 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55bc74953570 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74953500 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55bc749534e0 <col:22> 'int' 14
|-CXXMethodDecl 0x55bc74953788 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55bc749535a0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55bc74953620 <col:38> col:41 'int'
| `-ParmVarDecl 0x55bc749536a0 <col:43> col:46 'int'
|-FriendDecl 0x55bc74953890 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55bc74953920 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bc74bc2270 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55bc74bc2448 prev 0x55bc74bc2270 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55bc74bc24d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55bc74bc2500 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74bc3e60 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55bc74bc3e10 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55bc74bc3df0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55bc74bc2718 'type'
|     `-SubstTemplateTypeParmType 0x55bc74bc26e0 'String' sugar
|       |-TemplateTypeParmType 0x55bc74909330 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc749092e0 'T'
|       `-RecordType 0x55bc74944b10 'String'
|         `-CXXRecord 0x55bc74944a80 'String'
|-TypedefDecl 0x55bc74bc3f18 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55bc74bc3ee0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55bc74bc3ec0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55bc74bc3e60 'type'
|     `-ElaboratedType 0x55bc74bc3e10 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55bc74bc3df0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55bc74bc2718 'type'
|         `-SubstTemplateTypeParmType 0x55bc74bc26e0 'String' sugar
|           |-TemplateTypeParmType 0x55bc74909330 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55bc749092e0 'T'
|           `-RecordType 0x55bc74944b10 'String'
|             `-CXXRecord 0x55bc74944a80 'String'
|-CXXMethodDecl 0x55bc74bc4098 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55bc74bc3fa8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55bc74bc4188 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55bc74bc4268 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55bc74bc4268
|-CXXMethodDecl 0x55bc74bc4538 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55bc74bc4440 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55bc74bc4778 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bc74bc45f0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bc74bc4668 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bc74bc4948 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bc74bc4838 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bc74bc48b0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bc74bc4aa8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55bc74bc4b78 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55bc74bc4dc8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bc74bc4c38 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55bc74bc4cb0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bc74bc9068 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55bc74bc4e98 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55bc74bc4f10 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bc74bc9228 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55bc74bc9138 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bc74bc93e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55bc74bc92f0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bc74bc94a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bc74bc9550 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bc74bc9788 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bc74bc9600 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bc74bc9678 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bc74bc9a28 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55bc74bc9930 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55bc74bc9af0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55bc74bc9b40 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55bc74bc9b90 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bc74b804a0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55bc74bc0cd8 prev 0x55bc74b804a0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55bc74bc21e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55bc74bc2190 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55bc74bc2170 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55bc74bc2020 'type'
|     `-SubstTemplateTypeParmType 0x55bc74bc1eb0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55bc748df0e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55bc748df088 'F'
|       `-RecordType 0x55bc74bc1b10 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55bc74bc1a30 'typed_array_memory'
|-FieldDecl 0x55bc74bc9be0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55bc74bc9c30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55bc74bc9c68 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55bc74bc0d70 'String' sugar
|   |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bc749165f8 'T'
|   `-RecordType 0x55bc74944b10 'String'
|     `-CXXRecord 0x55bc74944a80 'String'
|-TypedefDecl 0x55bc74bc9cf8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55bc74bc9cc0 'String &'
|   `-SubstTemplateTypeParmType 0x55bc74bc0d70 'String' sugar
|     |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bc749165f8 'T'
|     `-RecordType 0x55bc74944b10 'String'
|       `-CXXRecord 0x55bc74944a80 'String'
|-TypedefDecl 0x55bc74bc9d88 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55bc74bc9d50 'const String &'
|   `-QualType 0x55bc74bc0d71 'const String' const
|     `-SubstTemplateTypeParmType 0x55bc74bc0d70 'String' sugar
|       |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc749165f8 'T'
|       `-RecordType 0x55bc74944b10 'String'
|         `-CXXRecord 0x55bc74944a80 'String'
|-TypedefDecl 0x55bc74bc9e18 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55bc74bc9de0 'String *'
|   `-SubstTemplateTypeParmType 0x55bc74bc0d70 'String' sugar
|     |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bc749165f8 'T'
|     `-RecordType 0x55bc74944b10 'String'
|       `-CXXRecord 0x55bc74944a80 'String'
|-TypedefDecl 0x55bc74bc9ea8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55bc74bc9e70 'const String *'
|   `-QualType 0x55bc74bc0d71 'const String' const
|     `-SubstTemplateTypeParmType 0x55bc74bc0d70 'String' sugar
|       |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc749165f8 'T'
|       `-RecordType 0x55bc74944b10 'String'
|         `-CXXRecord 0x55bc74944a80 'String'
|-TypedefDecl 0x55bc74bcab00 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55bc74bcaab0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55bc74bcaa90 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55bc74bca9c8 'type'
|     `-LValueReferenceType 0x55bc74bca990 'const String &'
|       `-QualType 0x55bc74bca731 'const String' const
|         `-SubstTemplateTypeParmType 0x55bc74bca730 'String' sugar
|           |-TemplateTypeParmType 0x55bc748e9030 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55bc748e8fd8 'T'
|           `-RecordType 0x55bc74944b10 'String'
|             `-CXXRecord 0x55bc74944a80 'String'
|-TypedefDecl 0x55bc74bcab68 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55bc74bc9d50 'const String &'
|   `-QualType 0x55bc74bc0d71 'const String' const
|     `-SubstTemplateTypeParmType 0x55bc74bc0d70 'String' sugar
|       |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc749165f8 'T'
|       `-RecordType 0x55bc74944b10 'String'
|         `-CXXRecord 0x55bc74944a80 'String'
|-TypedefDecl 0x55bc74bcabc0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74bcac28 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55bc74bc9de0 'String *'
|   `-SubstTemplateTypeParmType 0x55bc74bc0d70 'String' sugar
|     |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bc749165f8 'T'
|     `-RecordType 0x55bc74944b10 'String'
|       `-CXXRecord 0x55bc74944a80 'String'
|-TypedefDecl 0x55bc74bcac90 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55bc74bc9e70 'const String *'
|   `-QualType 0x55bc74bc0d71 'const String' const
|     `-SubstTemplateTypeParmType 0x55bc74bc0d70 'String' sugar
|       |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc749165f8 'T'
|       `-RecordType 0x55bc74944b10 'String'
|         `-CXXRecord 0x55bc74944a80 'String'
|-EnumDecl 0x55bc74bcace8 <line:134:5> col:5
| `-EnumConstantDecl 0x55bc74bcade0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55bc74bcadc0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55bc74917cd8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55bc74917cb0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55bc74917c90 <col:40> 'int' 1
|-CXXConstructorDecl 0x55bc74bcae68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55bc74bcb0f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bc74bcaf20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bc74bcafc0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55bc74bcb388 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55bc74bcb270 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55bc74bcb648 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55bc74bcb530 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55bc74bcb960 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55bc74bcb840 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55bc74bcbc70 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55bc74bcbb50 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55bc74bcbf60 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bc74bcbda8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bc74bcbe20 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bc74bcc088 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55bc74bcc138 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74bcc190 <col:30> Inherited
|-CXXMethodDecl 0x55bc74bcc1d8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55bc74bcc288 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74bcc2e0 <col:30> Inherited
|-CXXMethodDecl 0x55bc74bcc3a8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bc74bcc458 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74bcc4b0 <col:30> Inherited
|-CXXMethodDecl 0x55bc74bcc4f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bc74bcc5a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74bcc600 <col:30> Inherited
|-CXXMethodDecl 0x55bc74bcc648 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bc74bcc6f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74bcc750 <col:30> Inherited
|-CXXMethodDecl 0x55bc74bcc798 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bc74bcc848 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74bcc8a0 <col:30> Inherited
|-CXXMethodDecl 0x55bc74bcc8c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bc74bcc978 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bc74bcca28 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bc74bccbe8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bc74bccad8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bc74bccb50 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bc74bccd38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55bc74bccca8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74bccee8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55bc74bccdf0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bc74bccfa0 <col:20>
| `-OptimizeNoneAttr 0x55bc74bccff8 <col:30>
|-CXXMethodDecl 0x55bc74bcd118 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55bc74bcd020 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bc74bcd1d0 <col:20>
| `-OptimizeNoneAttr 0x55bc74bcd228 <col:30>
|-CXXMethodDecl 0x55bc74bcd2e0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bc74bcd250 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74bcd428 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bc74bcd398 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74bcd558 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55bc74bcd658 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55bc74bcd728 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55bc74bcd7f8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55bc74bcd938 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bc74bcd8a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74bcda80 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bc74bcd9f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74bcdbc8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55bc74bcdb38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bc74bcdc80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55bc74bcdd80 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55bc74bcdcf0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bc74bcde38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55bc74bcdef8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55bc74bcdff8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55bc74bce178 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55bc74bce0b8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55bc74bce938 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55bc74bce230 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55bc74bce898 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55bc74bce798 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55bc74bcea18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bc74bceb68 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55bc74bcead8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bc74bcec20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55bc74bcee68 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bc74bcece0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55bc74bced58 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bc74bceff8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55bc74bcef38 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55bc74bcf208 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55bc74bcf0c0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55bc74bcf138 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55bc74bcf2c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55bc74bcf528 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55bc74bcf430 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55bc74bcf5f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55bc74bcf5f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74afac78 prev 0x55bc74b3ffb8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bc74afad70 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55bc74afae00 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55bc74afaf38 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55bc74afae38 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55bc74afc360 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55bc74afc340 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55bc74afbed8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55bc74afc3f0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bc74afc3b0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55bc74afae38 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55bc74afbf40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55bc74afc470 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55bc74afc430 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55bc74afbfa0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55bc74afc4b0 <col:54> 'bool' false
| `-CompoundStmt 0x55bc74afc5b8 <col:61, line:38:5>
|   `-BinaryOperator 0x55bc74afc598 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55bc74afc530 <col:9> 'const Element *' lvalue ->_context 0x55bc74afbe78
|     | `-CXXThisExpr 0x55bc74afc520 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55bc74afc580 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55bc74afc560 <col:20> 'int' 0
|-CXXConstructorDecl 0x55bc74afb148 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74afaff8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55bc74afb070 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55bc74afc398 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55bc74afc378 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55bc74afbe78 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55bc74afc610 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bc74afc5d0 <col:20> 'const Element *' lvalue ParmVar 0x55bc74afaff8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55bc74afbed8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55bc74afc690 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bc74afc650 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55bc74afb070 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55bc74afbf40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55bc74afc710 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55bc74afc6d0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55bc74afbfa0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55bc74afc750 <col:73> 'bool' false
| `-CompoundStmt 0x55bc74afc7c8 <col:80, line:46:5>
|-CXXMethodDecl 0x55bc74afb278 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55bc74afc840 <col:36, line:51:5>
|   `-ReturnStmt 0x55bc74afc830 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55bc74afc818 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55bc74afc7e8 <col:16> 'const Element *const' lvalue ->_context 0x55bc74afbe78
|         `-CXXThisExpr 0x55bc74afc7d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55bc74afb368 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55bc74afc8c0 <col:32, line:57:5>
|   `-ReturnStmt 0x55bc74afc8b0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55bc74afc898 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55bc74afc868 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55bc74afbed8
|         `-CXXThisExpr 0x55bc74afc858 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55bc74afb428 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55bc74afb5b0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55bc74afb4e0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55bc74afb700 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55bc74afb670 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55bc74afb850 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55bc74afb7c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55bc74afba58 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55bc74afb908 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55bc74afb980 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55bc74afbd88 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55bc74afbb18 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55bc74afbb98 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55bc74afbc60 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55bc74afbe40 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55bc74afbe78 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55bc74afbed8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55bc74afbf40 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55bc74afbfa0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55bc74afbff0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55bc74afbff0
| `-ParmVarDecl 0x55bc74afc108 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55bc74afc1a8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55bc74afc1a8
| `-ParmVarDecl 0x55bc74afc2b8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55bc74c4b358 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bc74c08580 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55bc74c08758 prev 0x55bc74c08580 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55bc74c087e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55bc74c08810 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c0a3e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55bc74c0a390 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55bc74c08cc0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55bc74c08bc0 'type'
|     `-TemplateSpecializationType 0x55bc74c08b50 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55bc74c08a30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55bc74c08a10 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55bc74c089f0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55bc74c08b30 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55bc74c08a50 'char_array'
|-TypedefDecl 0x55bc74c0a498 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55bc74c0a460 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55bc74c0a440 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55bc74c0a3e0 'type'
|     `-ElaboratedType 0x55bc74c0a390 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55bc74c08cc0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55bc74c08bc0 'type'
|         `-TemplateSpecializationType 0x55bc74c08b50 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55bc74c08a30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55bc74c08a10 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55bc74c089f0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55bc74c08b30 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55bc74c08a50 'char_array'
|-CXXMethodDecl 0x55bc74c0a618 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55bc74c0a528 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55bc74c0a708 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55bc74c0a7e8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55bc74c0aab8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55bc74c0a9c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55bc74c0acf8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bc74c0ab70 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bc74c0abe8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bc74c0aec8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bc74c0adb8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bc74c0ae30 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bc74c0b028 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55bc74c0b0f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55bc74c0b348 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bc74c0b1b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55bc74c0b230 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bc74c0b5a8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55bc74c0b418 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55bc74c0b490 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bc74c0b768 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55bc74c0b678 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bc74c0b928 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55bc74c0b830 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bc74c0b9e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bc74c0ba90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bc74c0bcc8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bc74c0bb40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bc74c0bbb8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bc74c0bf68 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55bc74c0be70 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55bc74c0c030 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55bc74c0c080 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55bc74c124f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bc74c06f88 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55bc74c07198 prev 0x55bc74c06f88 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55bc74c084f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55bc74c084a0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55bc74c08480 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55bc74c08330 'type'
|     `-SubstTemplateTypeParmType 0x55bc74c08150 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55bc748de960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc748de908 'T'
|       `-RecordType 0x55bc74c07ca0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55bc74c07bb8 'sized_array_memory'
|-FieldDecl 0x55bc74c12540 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55bc74c12590 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55bc74c125c8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55bc74c07230 'int' sugar
|   |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bc749165f8 'T'
|   `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c12658 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55bc74c12620 'int &'
|   `-SubstTemplateTypeParmType 0x55bc74c07230 'int' sugar
|     |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bc749165f8 'T'
|     `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c12718 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55bc74c126e0 'const int &'
|   `-QualType 0x55bc74c07231 'const int' const
|     `-SubstTemplateTypeParmType 0x55bc74c07230 'int' sugar
|       |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc749165f8 'T'
|       `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c127a8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55bc74c12770 'int *'
|   `-SubstTemplateTypeParmType 0x55bc74c07230 'int' sugar
|     |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bc749165f8 'T'
|     `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c12838 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55bc74c12800 'const int *'
|   `-QualType 0x55bc74c07231 'const int' const
|     `-SubstTemplateTypeParmType 0x55bc74c07230 'int' sugar
|       |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc749165f8 'T'
|       `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c13420 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55bc74c133d0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55bc74c133b0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55bc74c13340 'type'
|     `-SubstTemplateTypeParmType 0x55bc74c13100 'int' sugar
|       |-TemplateTypeParmType 0x55bc748e9760 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc748e9710 'T'
|       `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c13488 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55bc74c126e0 'const int &'
|   `-QualType 0x55bc74c07231 'const int' const
|     `-SubstTemplateTypeParmType 0x55bc74c07230 'int' sugar
|       |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc749165f8 'T'
|       `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c134e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c13548 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55bc74c12770 'int *'
|   `-SubstTemplateTypeParmType 0x55bc74c07230 'int' sugar
|     |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bc749165f8 'T'
|     `-BuiltinType 0x55bc74619580 'int'
|-TypedefDecl 0x55bc74c135b0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55bc74c12800 'const int *'
|   `-QualType 0x55bc74c07231 'const int' const
|     `-SubstTemplateTypeParmType 0x55bc74c07230 'int' sugar
|       |-TemplateTypeParmType 0x55bc74916650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bc749165f8 'T'
|       `-BuiltinType 0x55bc74619580 'int'
|-EnumDecl 0x55bc74c13608 <line:134:5> col:5
| `-EnumConstantDecl 0x55bc74c13700 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55bc74c136e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55bc74917cd8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55bc74917cb0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55bc74917c90 <col:40> 'int' 1
|-CXXConstructorDecl 0x55bc74c13788 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55bc74c139d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bc74c13840 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bc74c138e0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55bc74c13c98 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55bc74c13b80 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55bc74c13f58 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55bc74c13e40 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55bc74c142a0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55bc74c14180 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55bc74c145b0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55bc74c14490 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55bc74c148a0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bc74c146e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bc74c14760 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bc74c149c8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55bc74c14aa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74c14b00 <col:30> Inherited
|-CXXMethodDecl 0x55bc74c14b48 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55bc74c14bf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74c14c50 <col:30> Inherited
|-CXXMethodDecl 0x55bc74c14d18 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bc74c14dc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74c14e20 <col:30> Inherited
|-CXXMethodDecl 0x55bc74c14e68 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bc74c14f18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74c14f70 <col:30> Inherited
|-CXXMethodDecl 0x55bc74c14fb8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bc74c15068 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74c150c0 <col:30> Inherited
|-CXXMethodDecl 0x55bc74c15108 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bc74c151b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bc74c15210 <col:30> Inherited
|-CXXMethodDecl 0x55bc74c15238 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bc74c152e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bc74c15398 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bc74c15558 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bc74c15448 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bc74c154c0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bc74c156a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55bc74c15618 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74c15858 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55bc74c15760 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bc74c15910 <col:20>
| `-OptimizeNoneAttr 0x55bc74c15968 <col:30>
|-CXXMethodDecl 0x55bc74c15a88 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55bc74c15990 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bc74c15b40 <col:20>
| `-OptimizeNoneAttr 0x55bc74c15b98 <col:30>
|-CXXMethodDecl 0x55bc74c15c50 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bc74c15bc0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74c15d98 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bc74c15d08 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74c15ec8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55bc74c15ff8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55bc74c160c8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55bc74c16198 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55bc74c162d8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bc74c16248 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74c16420 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bc74c16390 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bc74c16568 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55bc74c164d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bc74c16620 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55bc74c16720 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55bc74c16690 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bc74c167d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55bc74c16898 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55bc74c16998 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55bc74c16b18 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55bc74c16a58 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55bc74c172d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55bc74c16bd0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55bc74c17238 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55bc74c17138 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55bc74c173b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bc74c17508 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55bc74c17478 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bc74c175c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55bc74c17808 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bc74c17680 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55bc74c176f8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bc74c179c8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55bc74c178d8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55bc74c17c18 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55bc74c17a90 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55bc74c17b08 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55bc74c17cd8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55bc74c17f38 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55bc74c17e40 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55bc74c18008 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74c050f8 prev 0x55bc74b017d8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bc74c051f0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55bc74c052e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55bc74c29d80 <col:16, line:828:9>
|-CXXDestructorDecl 0x55bc74c053d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55bc74c29d90 <col:25, line:830:9>
|-CXXMethodDecl 0x55bc74c054d0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55bc74c05580 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55bc74c05628 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55bc74c05628
| `-ParmVarDecl 0x55bc74c05738 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55bc74c05ef8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55bc74c05ef8
  `-ParmVarDecl 0x55bc74c06008 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74b015e8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55bc74b01748 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55bc74b017d8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55bc74b01890 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55bc74b01998 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55bc74b018c8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bc74c195c8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bc74c195a8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55bc74beb288 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74beb100 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55bc74beb178 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bc74c19600 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bc74c195e0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55bc74beb460 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74beb350 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55bc74beb3c8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bc74c19638 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bc74c19618 <col:55> 'int' 0
|-CXXConstructorDecl 0x55bc74beb818 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55bc74beb600 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55bc74beb678 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55bc74beb6f0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bc74c19670 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bc74c19650 <col:31> 'int' 0
|-CXXConstructorDecl 0x55bc74beb9d8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55bc74beb918 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55bc74bebad0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55bc74bebcb8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55bc74bebbc0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55bc74bebda8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55bc74c19a20 <col:24, line:291:5>
|   `-ReturnStmt 0x55bc74c19a10 <line:290:9, col:79>
|     `-BinaryOperator 0x55bc74c199f0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55bc74c198c8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55bc74c19820 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55bc74c19800 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55bc74c196f8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55bc74c196e0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55bc74c196c8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55bc74c19698 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55bc74c06f20
|       | |   |       `-CXXThisExpr 0x55bc74c19688 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55bc74c197e8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55bc74c197d0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55bc74c19798 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55bc74c19768 <col:28, col:35> '<bound member function type>' ->size 0x55bc74bcc8c8
|       | |           `-ImplicitCastExpr 0x55bc74c197b8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55bc74c19750 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55bc74c19720 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55bc74c06f20
|       | |                 `-CXXThisExpr 0x55bc74c19710 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55bc74c198b0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55bc74c19898 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55bc74c19880 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55bc74c19850 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55bc74c18150
|       |         `-CXXThisExpr 0x55bc74c19840 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55bc74c199d0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55bc74c199b8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55bc74c199a0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55bc74c19960 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55bc74c19948 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55bc74c198f8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55bc74c18200
|         |     |   `-CXXThisExpr 0x55bc74c198e8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55bc74c19928 <col:73> 'int' 0
|         `-IntegerLiteral 0x55bc74c19980 <col:79> 'int' 0
|-CXXMethodDecl 0x55bc74bebe68 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55bc74c19bf8 <col:32, line:296:5>
|   `-ReturnStmt 0x55bc74c19be8 <line:295:9, col:49>
|     `-BinaryOperator 0x55bc74c19bc8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55bc74c19aa8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55bc74c19a90 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55bc74c19a78 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55bc74c19a48 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55bc74c18150
|       |       `-CXXThisExpr 0x55bc74c19a38 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55bc74c19ba8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55bc74c19b90 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55bc74c19b78 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55bc74c19b38 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55bc74c19b20 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55bc74c19ad0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55bc74c18200
|         |     |   `-CXXThisExpr 0x55bc74c19ac0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55bc74c19b00 <col:43> 'int' 0
|         `-IntegerLiteral 0x55bc74c19b58 <col:49> 'int' 0
|-CXXMethodDecl 0x55bc74bebf58 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55bc74c19e08 <col:19, line:306:5>
|   |-IfStmt 0x55bc74c19d28 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55bc74c19c68 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55bc74c19c50 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55bc74c19c20 <col:13> 'Vector<String> *' lvalue ->_conf 0x55bc74c06f20
|   | |     `-CXXThisExpr 0x55bc74c19c10 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55bc74c19d08 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55bc74c19cd8 <col:13, col:20> '<bound member function type>' ->clear 0x55bc74bcf2c8
|   |     `-ImplicitCastExpr 0x55bc74c19cc0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55bc74c19c90 <col:13> 'Vector<String> *' lvalue ->_conf 0x55bc74c06f20
|   |         `-CXXThisExpr 0x55bc74c19c80 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55bc74c19db0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55bc74c19d80 <col:9, col:16> '<bound member function type>' .clear 0x55bc74c17cd8
|   |   `-MemberExpr 0x55bc74c19d50 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55bc74c180f0
|   |     `-CXXThisExpr 0x55bc74c19d40 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55bc74c19df8 <line:305:9, col:17>
|     `-UnaryOperator 0x55bc74c19de0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bc74c19dd0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bc74bec1d8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55bc74bec0e0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55bc74bec358 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55bc74bec290 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55bc74bec6d8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55bc74bec400 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55bc74bec638 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55bc74bec4a8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55bc74bec520 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55bc74c1a128 <col:67, line:327:5>
|     |-WhileStmt 0x55bc74c1a0d8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55bc74c19ef0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55bc74c19e70 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55bc74b38488 0x55bc74981818 0x55bc749814f0 0x55bc74971cc0 0x55bc74971970 0x55bc74971260 0x55bc74943bd0 0x55bc748d10a0
|     | | |-DeclRefExpr 0x55bc74c19e30 <col:16> 'Iter' lvalue ParmVar 0x55bc74bec4a8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55bc74c19e50 <col:25> 'Iter' lvalue ParmVar 0x55bc74bec520 'end' 'Iter'
|     | `-CompoundStmt 0x55bc74c1a0b8 <col:30, line:325:9>
|     |   |-CallExpr 0x55bc74c1a058 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55bc74c19f38 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55bc74c1a028 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55bc74c19fb8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|     |   |   `-DeclRefExpr 0x55bc74c19f98 <col:24> 'Iter' lvalue ParmVar 0x55bc74bec4a8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55bc74c1a0a0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55bc74c1a080 <col:15> 'Iter' lvalue ParmVar 0x55bc74bec4a8 'begin' 'Iter'
|     `-ReturnStmt 0x55bc74c1a118 <line:326:9, col:17>
|       `-UnaryOperator 0x55bc74c1a100 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1a0f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bc74bec7e0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55bc74bec750 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55bc74bec928 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55bc74bec898 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55bc74bec9f0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55bc74c1a208 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55bc74c1a1a8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55bc74c1a158 <col:9> '<bound member function type>' ->reset_from 0x55bc74c18578
|   | | `-CXXThisExpr 0x55bc74c1a148 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55bc74c1a188 <col:20> 'int' 0
|   `-ReturnStmt 0x55bc74c1a1f8 <line:352:9, col:17>
|     `-UnaryOperator 0x55bc74c1a1e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bc74c1a1d0 <col:17> 'Args *' this
|-VarDecl 0x55bc74becaa8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bc74becb10 <col:38> 'int' 1
|-VarDecl 0x55bc74becba0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bc74becc08 <col:39> 'int' 2
|-VarDecl 0x55bc74becc98 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bc74becd00 <col:39> 'int' 4
|-VarDecl 0x55bc74becd90 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bc74becdf8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55bc74bed178 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55bc74bece70 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bc74bed0d8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55bc74becf20 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74becfc8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1a360 <col:43, line:371:5>
|     `-ReturnStmt 0x55bc74c1a350 <line:370:9, col:34>
|       `-CallExpr 0x55bc74c1a318 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1a238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1a2b8 <col:21> 'const char *' lvalue ParmVar 0x55bc74becf20 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1a2d8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55bc74c1a2f8 <col:33> 'T' lvalue ParmVar 0x55bc74becfc8 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bed4a8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55bc74bed1e0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bc74bed408 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55bc74bed290 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bed338 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1a4b0 <col:45, line:375:5>
|     `-ReturnStmt 0x55bc74c1a4a0 <line:374:9, col:42>
|       `-CallExpr 0x55bc74c1a468 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1a388 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1a408 <col:21> 'const char *' lvalue ParmVar 0x55bc74bed290 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1a428 <col:30> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55bc74c1a448 <col:41> 'T' lvalue ParmVar 0x55bc74bed338 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bed7d8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55bc74bed510 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55bc74bed738 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55bc74bed5c0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55bc74bed668 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55bc74c1bea8 <col:45, line:379:5>
| |   `-ReturnStmt 0x55bc74c1be98 <line:378:9, col:43>
| |     `-CallExpr 0x55bc74c1be60 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55bc74c1bd80 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55bc74c1be00 <col:21> 'const char *' lvalue ParmVar 0x55bc74bed5c0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55bc74c1be20 <col:30> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int'
| |       `-DeclRefExpr 0x55bc74c1be40 <col:42> 'T' lvalue ParmVar 0x55bc74bed668 'x' 'T &'
| `-CXXMethodDecl 0x55bc74c4b7e8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55bc74c4b600 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55bc74c4b6d8 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x55bc74bedb08 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55bc74bed840 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bc74beda68 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55bc74bed8f0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bed998 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1c0a8 <col:46, line:383:5>
|     `-ReturnStmt 0x55bc74c1c098 <line:382:9, col:55>
|       `-CallExpr 0x55bc74c1c060 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1bed0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1bf50 <col:21> 'const char *' lvalue ParmVar 0x55bc74bed8f0 'keyword' 'const char *'
|         |-BinaryOperator 0x55bc74c1c020 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55bc74c1bfd0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bc74c1bfb0 <col:30> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55bc74c1c008 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55bc74c1bfe8 <col:42> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55bc74c1c040 <col:54> 'T' lvalue ParmVar 0x55bc74bed998 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bedf08 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55bc74bedb70 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bc74bede68 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55bc74bedc20 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bedca0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bedd48 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1c1e8 <col:54, line:388:5>
|     |-CallExpr 0x55bc74c1c170 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bc74c1c0c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55bc74c1c100 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55bc74c1c110 <col:30> 'const char *' lvalue ParmVar 0x55bc74bedc20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bc74c1c130 <col:39> 'int' lvalue ParmVar 0x55bc74bedca0 'flags' 'int'
|     | `-DeclRefExpr 0x55bc74c1c150 <col:46> 'T' lvalue ParmVar 0x55bc74bedd48 'x' 'T &'
|     `-ReturnStmt 0x55bc74c1c1d8 <line:387:9, col:17>
|       `-UnaryOperator 0x55bc74c1c1c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1c1b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bee3b8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55bc74bedf78 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bc74bedff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bc74bee318 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55bc74bee0b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bee158 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55bc74bee1f8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bc74c1c358 <col:74, line:403:5>
|     `-ReturnStmt 0x55bc74c1c348 <line:402:9, col:56>
|       `-CallExpr 0x55bc74c1c308 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1c218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1c288 <col:28> 'const char *' lvalue ParmVar 0x55bc74bee0b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1c2a8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55bc74c1c2c8 <col:40> 'T' lvalue ParmVar 0x55bc74bee158 'x' 'T &'
|         `-DeclRefExpr 0x55bc74c1c2e8 <col:43> 'const V' lvalue ParmVar 0x55bc74bee1f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bc74bee828 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55bc74bee428 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bc74bee4a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bc74bee788 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55bc74bee568 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bee608 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55bc74bee6a8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bc74c1c4c0 <col:76, line:407:5>
|     `-ReturnStmt 0x55bc74c1c4b0 <line:406:9, col:65>
|       `-CallExpr 0x55bc74c1c470 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1c380 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1c3f0 <col:28> 'const char *' lvalue ParmVar 0x55bc74bee568 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1c410 <col:37> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int'
|         |-DeclRefExpr 0x55bc74c1c430 <col:49> 'T' lvalue ParmVar 0x55bc74bee608 'x' 'T &'
|         `-DeclRefExpr 0x55bc74c1c450 <col:52> 'const V' lvalue ParmVar 0x55bc74bee6a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bc74beed78 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55bc74bee898 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bc74bee918 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bc74beecd8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55bc74bee9d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74beea58 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74beeaf8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55bc74beeb98 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bc74c1c628 <col:85, line:412:5>
|     |-CallExpr 0x55bc74c1c5a8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bc74c1c4d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55bc74c1c518 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55bc74c1c528 <col:37> 'const char *' lvalue ParmVar 0x55bc74bee9d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bc74c1c548 <col:46> 'int' lvalue ParmVar 0x55bc74beea58 'flags' 'int'
|     | |-DeclRefExpr 0x55bc74c1c568 <col:53> 'T' lvalue ParmVar 0x55bc74beeaf8 'x' 'T &'
|     | `-DeclRefExpr 0x55bc74c1c588 <col:56> 'const V' lvalue ParmVar 0x55bc74beeb98 'default_value' 'const V &'
|     `-ReturnStmt 0x55bc74c1c618 <line:411:9, col:17>
|       `-UnaryOperator 0x55bc74c1c600 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1c5f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bef208 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55bc74beedf0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74beee68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bef168 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bc74beef28 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74beefa0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bef048 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1c7a8 <col:53, line:425:5>
|     `-ReturnStmt 0x55bc74c1c798 <line:424:9, col:42>
|       `-CallExpr 0x55bc74c1c758 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1c658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1c6d8 <col:21> 'const char *' lvalue ParmVar 0x55bc74beef28 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1c6f8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55bc74c1c718 <col:33> 'P' lvalue ParmVar 0x55bc74beefa0 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1c738 <col:41> 'T' lvalue ParmVar 0x55bc74bef048 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bef658 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55bc74bef278 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bef2f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bef5b8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bc74bef3b8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bef430 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bef4d8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1c920 <col:55, line:429:5>
|     `-ReturnStmt 0x55bc74c1c910 <line:428:9, col:50>
|       `-CallExpr 0x55bc74c1c8d0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1c7d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1c850 <col:21> 'const char *' lvalue ParmVar 0x55bc74bef3b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1c870 <col:30> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55bc74c1c890 <col:41> 'P' lvalue ParmVar 0x55bc74bef430 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1c8b0 <col:49> 'T' lvalue ParmVar 0x55bc74bef4d8 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74befaa8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55bc74bef6c8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bef748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74befa08 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bc74bef808 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bef880 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bef928 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1ca98 <col:55, line:433:5>
|     `-ReturnStmt 0x55bc74c1ca88 <line:432:9, col:51>
|       `-CallExpr 0x55bc74c1ca48 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1c948 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1c9c8 <col:21> 'const char *' lvalue ParmVar 0x55bc74bef808 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1c9e8 <col:30> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int'
|         |-DeclRefExpr 0x55bc74c1ca08 <col:42> 'P' lvalue ParmVar 0x55bc74bef880 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1ca28 <col:50> 'T' lvalue ParmVar 0x55bc74bef928 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74befef8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55bc74befb18 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74befb98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74befe58 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bc74befc58 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74befcd0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74befd78 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1ccc0 <col:56, line:437:5>
|     `-ReturnStmt 0x55bc74c1ccb0 <line:436:9, col:63>
|       `-CallExpr 0x55bc74c1cc70 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1cac0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1cb40 <col:21> 'const char *' lvalue ParmVar 0x55bc74befc58 'keyword' 'const char *'
|         |-BinaryOperator 0x55bc74c1cc10 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55bc74c1cbc0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bc74c1cba0 <col:30> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55bc74c1cbf8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55bc74c1cbd8 <col:42> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55bc74c1cc30 <col:54> 'P' lvalue ParmVar 0x55bc74befcd0 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1cc50 <col:62> 'T' lvalue ParmVar 0x55bc74befd78 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bf0428 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55bc74beff68 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74beffe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf0388 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bc74bf00a8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf0128 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf01a0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf0248 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1ce28 <col:64, line:442:5>
|     |-CallExpr 0x55bc74c1cda8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bc74c1ccd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55bc74c1cd18 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55bc74c1cd28 <col:30> 'const char *' lvalue ParmVar 0x55bc74bf00a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bc74c1cd48 <col:39> 'int' lvalue ParmVar 0x55bc74bf0128 'flags' 'int'
|     | |-DeclRefExpr 0x55bc74c1cd68 <col:46> 'P' lvalue ParmVar 0x55bc74bf01a0 'parser' 'P'
|     | `-DeclRefExpr 0x55bc74c1cd88 <col:54> 'T' lvalue ParmVar 0x55bc74bf0248 'x' 'T &'
|     `-ReturnStmt 0x55bc74c1ce18 <line:441:9, col:17>
|       `-UnaryOperator 0x55bc74c1ce00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1cdf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bf0a28 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55bc74bf04a0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf0518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55bc74bf0598 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bc74bf0988 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55bc74bf0660 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf06d8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf0778 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55bc74bf0848 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bc74c1cfc0 <col:84, line:458:5>
|     `-ReturnStmt 0x55bc74c1cfb0 <line:457:9, col:64>
|       `-CallExpr 0x55bc74c1cf68 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1ce58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1cec8 <col:28> 'const char *' lvalue ParmVar 0x55bc74bf0660 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1cee8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55bc74c1cf08 <col:40> 'P' lvalue ParmVar 0x55bc74bf06d8 'parser' 'P'
|         |-DeclRefExpr 0x55bc74c1cf28 <col:48> 'T' lvalue ParmVar 0x55bc74bf0778 'x' 'T &'
|         `-DeclRefExpr 0x55bc74c1cf48 <col:51> 'const V' lvalue ParmVar 0x55bc74bf0848 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bc74bf0fa8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55bc74bf0aa0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf0b18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55bc74bf0b98 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bc74bf0f08 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55bc74bf0c60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf0cd8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf0d78 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55bc74bf0e18 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bc74c1d150 <col:86, line:462:5>
|     `-ReturnStmt 0x55bc74c1d140 <line:461:9, col:73>
|       `-CallExpr 0x55bc74c1d0f8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1cfe8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1d058 <col:28> 'const char *' lvalue ParmVar 0x55bc74bf0c60 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1d078 <col:37> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int'
|         |-DeclRefExpr 0x55bc74c1d098 <col:49> 'P' lvalue ParmVar 0x55bc74bf0cd8 'parser' 'P'
|         |-DeclRefExpr 0x55bc74c1d0b8 <col:57> 'T' lvalue ParmVar 0x55bc74bf0d78 'x' 'T &'
|         `-DeclRefExpr 0x55bc74c1d0d8 <col:60> 'const V' lvalue ParmVar 0x55bc74bf0e18 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bc74bf1608 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55bc74bf1020 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf1098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55bc74bf1118 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bc74bf1568 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55bc74bf11e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf1260 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf12d8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf1378 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55bc74bf1418 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bc74c1d2e0 <col:95, line:467:5>
|     |-CallExpr 0x55bc74c1d258 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bc74c1d168 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55bc74c1d1a8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55bc74c1d1b8 <col:37> 'const char *' lvalue ParmVar 0x55bc74bf11e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bc74c1d1d8 <col:46> 'int' lvalue ParmVar 0x55bc74bf1260 'flags' 'int'
|     | |-DeclRefExpr 0x55bc74c1d1f8 <col:53> 'P' lvalue ParmVar 0x55bc74bf12d8 'parser' 'P'
|     | |-DeclRefExpr 0x55bc74c1d218 <col:61> 'T' lvalue ParmVar 0x55bc74bf1378 'x' 'T &'
|     | `-DeclRefExpr 0x55bc74c1d238 <col:64> 'const V' lvalue ParmVar 0x55bc74bf1418 'default_value' 'const V &'
|     `-ReturnStmt 0x55bc74c1d2d0 <line:466:9, col:17>
|       `-UnaryOperator 0x55bc74c1d2b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1d2a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bf1be8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55bc74bf1688 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf1708 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bc74bf1788 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bc74bf1b48 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bc74bf1850 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf18c8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf1968 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bc74bf1a08 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bc74c1d488 <col:63, line:481:5>
|     `-ReturnStmt 0x55bc74c1d478 <line:480:9, col:47>
|       `-CallExpr 0x55bc74c1d430 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1d310 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1d390 <col:21> 'const char *' lvalue ParmVar 0x55bc74bf1850 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1d3b0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55bc74c1d3d0 <col:33> 'P' lvalue ParmVar 0x55bc74bf18c8 'parser' 'P'
|         |-DeclRefExpr 0x55bc74c1d3f0 <col:41> 'T1' lvalue ParmVar 0x55bc74bf1968 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bc74c1d410 <col:45> 'T2' lvalue ParmVar 0x55bc74bf1a08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bc74bf2168 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55bc74bf1c60 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf1cd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bc74bf1d58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bc74bf20c8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bc74bf1e20 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf1e98 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf1f38 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bc74bf1fd8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bc74c1d628 <col:65, line:485:5>
|     `-ReturnStmt 0x55bc74c1d618 <line:484:9, col:55>
|       `-CallExpr 0x55bc74c1d5d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1d4b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1d530 <col:21> 'const char *' lvalue ParmVar 0x55bc74bf1e20 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1d550 <col:30> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55bc74c1d570 <col:41> 'P' lvalue ParmVar 0x55bc74bf1e98 'parser' 'P'
|         |-DeclRefExpr 0x55bc74c1d590 <col:49> 'T1' lvalue ParmVar 0x55bc74bf1f38 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bc74c1d5b0 <col:53> 'T2' lvalue ParmVar 0x55bc74bf1fd8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bc74bf26e8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55bc74bf21e0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf2258 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bc74bf22d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bc74bf2648 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bc74bf23a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf2418 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf24b8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bc74bf2558 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bc74c1d7c8 <col:65, line:489:5>
|     `-ReturnStmt 0x55bc74c1d7b8 <line:488:9, col:56>
|       `-CallExpr 0x55bc74c1d770 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1d650 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1d6d0 <col:21> 'const char *' lvalue ParmVar 0x55bc74bf23a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1d6f0 <col:30> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int'
|         |-DeclRefExpr 0x55bc74c1d710 <col:42> 'P' lvalue ParmVar 0x55bc74bf2418 'parser' 'P'
|         |-DeclRefExpr 0x55bc74c1d730 <col:50> 'T1' lvalue ParmVar 0x55bc74bf24b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bc74c1d750 <col:54> 'T2' lvalue ParmVar 0x55bc74bf2558 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bc74bf2c68 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55bc74bf2760 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf27d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bc74bf2858 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bc74bf2bc8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bc74bf2920 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf2998 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf2a38 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bc74bf2ad8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bc74c1da18 <col:66, line:493:5>
|     `-ReturnStmt 0x55bc74c1da08 <line:492:9, col:68>
|       `-CallExpr 0x55bc74c1d9c0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1d7f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1d870 <col:21> 'const char *' lvalue ParmVar 0x55bc74bf2920 'keyword' 'const char *'
|         |-BinaryOperator 0x55bc74c1d940 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55bc74c1d8f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bc74c1d8d0 <col:30> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55bc74c1d928 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55bc74c1d908 <col:42> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55bc74c1d960 <col:54> 'P' lvalue ParmVar 0x55bc74bf2998 'parser' 'P'
|         |-DeclRefExpr 0x55bc74c1d980 <col:62> 'T1' lvalue ParmVar 0x55bc74bf2a38 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bc74c1d9a0 <col:66> 'T2' lvalue ParmVar 0x55bc74bf2ad8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bc74bf3a38 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55bc74bf2ce0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf2d58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bc74bf2dd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bc74bf3998 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bc74bf2ea0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf2f20 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf2f98 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf37a8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bc74bf3848 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bc74c1dba8 <col:74, line:498:5>
|     |-CallExpr 0x55bc74c1db20 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bc74c1da30 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55bc74c1da70 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55bc74c1da80 <col:30> 'const char *' lvalue ParmVar 0x55bc74bf2ea0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bc74c1daa0 <col:39> 'int' lvalue ParmVar 0x55bc74bf2f20 'flags' 'int'
|     | |-DeclRefExpr 0x55bc74c1dac0 <col:46> 'P' lvalue ParmVar 0x55bc74bf2f98 'parser' 'P'
|     | |-DeclRefExpr 0x55bc74c1dae0 <col:54> 'T1' lvalue ParmVar 0x55bc74bf37a8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55bc74c1db00 <col:58> 'T2' lvalue ParmVar 0x55bc74bf3848 'x2' 'T2 &'
|     `-ReturnStmt 0x55bc74c1db98 <line:497:9, col:17>
|       `-UnaryOperator 0x55bc74c1db80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1db70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bf3d98 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55bc74bf3ab8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bc74bf3cf8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bc74bf3b70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf3be8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55bc74c1dcf0 <col:52, line:509:5>
|     `-ReturnStmt 0x55bc74c1dce0 <line:508:9, col:44>
|       `-CallExpr 0x55bc74c1dca8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1dbd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1dc48 <col:26> 'const char *' lvalue ParmVar 0x55bc74bf3b70 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1dc68 <col:35> 'int' 0
|         `-DeclRefExpr 0x55bc74c1dc88 <col:38> 'P' lvalue ParmVar 0x55bc74bf3be8 'parser' 'P'
|-FunctionTemplateDecl 0x55bc74bf4098 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55bc74bf3e00 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bc74bf3ff8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bc74bf3eb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf3f28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55bc74c1de30 <col:54, line:513:5>
|     `-ReturnStmt 0x55bc74c1de20 <line:512:9, col:52>
|       `-CallExpr 0x55bc74c1dde8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1dd18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1dd88 <col:26> 'const char *' lvalue ParmVar 0x55bc74bf3eb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1dda8 <col:35> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55bc74c1ddc8 <col:46> 'P' lvalue ParmVar 0x55bc74bf3f28 'parser' 'P'
|-FunctionTemplateDecl 0x55bc74bf4398 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55bc74bf4100 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bc74bf42f8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bc74bf41b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf4228 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55bc74c1df70 <col:54, line:517:5>
|     `-ReturnStmt 0x55bc74c1df60 <line:516:9, col:53>
|       `-CallExpr 0x55bc74c1df28 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1de58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1dec8 <col:26> 'const char *' lvalue ParmVar 0x55bc74bf41b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1dee8 <col:35> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int'
|         `-DeclRefExpr 0x55bc74c1df08 <col:47> 'P' lvalue ParmVar 0x55bc74bf4228 'parser' 'P'
|-FunctionTemplateDecl 0x55bc74bf4698 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55bc74bf4400 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bc74bf45f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bc74bf44b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf4528 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55bc74c1e160 <col:55, line:521:5>
|     `-ReturnStmt 0x55bc74c1e150 <line:520:9, col:65>
|       `-CallExpr 0x55bc74c1e118 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1df98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1e008 <col:26> 'const char *' lvalue ParmVar 0x55bc74bf44b0 'keyword' 'const char *'
|         |-BinaryOperator 0x55bc74c1e0d8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55bc74c1e088 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bc74c1e068 <col:35> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55bc74c1e0c0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55bc74c1e0a0 <col:47> 'const int' lvalue Var 0x55bc74becba0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55bc74c1e0f8 <col:59> 'P' lvalue ParmVar 0x55bc74bf4528 'parser' 'P'
|-FunctionTemplateDecl 0x55bc74bf4a68 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55bc74bf4700 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bc74bf49c8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55bc74bf47b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf4830 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf48a8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55bc74c1e2a0 <col:63, line:526:5>
|     |-CallExpr 0x55bc74c1e228 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bc74c1e178 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55bc74c1e1b8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55bc74c1e1c8 <col:35> 'const char *' lvalue ParmVar 0x55bc74bf47b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bc74c1e1e8 <col:44> 'int' lvalue ParmVar 0x55bc74bf4830 'flags' 'int'
|     | `-DeclRefExpr 0x55bc74c1e208 <col:51> 'P' lvalue ParmVar 0x55bc74bf48a8 'parser' 'P'
|     `-ReturnStmt 0x55bc74c1e290 <line:525:9, col:17>
|       `-UnaryOperator 0x55bc74c1e278 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1e268 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bf4eb8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55bc74bf4ad8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf4b58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf4e18 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bc74bf4c18 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf4c90 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf4d38 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1e3f8 <col:58, line:541:5>
|     `-ReturnStmt 0x55bc74c1e3e8 <line:540:9, col:39>
|       `-CallExpr 0x55bc74c1e3b0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1e2d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1e350 <col:21> 'const char *' lvalue ParmVar 0x55bc74bf4c18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1e370 <col:30> 'P' lvalue ParmVar 0x55bc74bf4c90 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1e390 <col:38> 'T' lvalue ParmVar 0x55bc74bf4d38 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bf5308 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55bc74bf4f28 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf4fa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf5268 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bc74bf5068 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf50e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf5188 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1e530 <col:60, line:545:5>
|     `-ReturnStmt 0x55bc74c1e520 <line:544:9, col:41>
|       `-CallExpr 0x55bc74c1e4e8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1e420 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1e488 <col:23> 'const char *' lvalue ParmVar 0x55bc74bf5068 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1e4a8 <col:32> 'P' lvalue ParmVar 0x55bc74bf50e0 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1e4c8 <col:40> 'T' lvalue ParmVar 0x55bc74bf5188 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bf5758 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55bc74bf5378 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf53f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf56b8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bc74bf54b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf5530 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf55d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1e668 <col:60, line:549:5>
|     `-ReturnStmt 0x55bc74c1e658 <line:548:9, col:41>
|       `-CallExpr 0x55bc74c1e620 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1e558 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1e5c0 <col:23> 'const char *' lvalue ParmVar 0x55bc74bf54b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1e5e0 <col:32> 'P' lvalue ParmVar 0x55bc74bf5530 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1e600 <col:40> 'T' lvalue ParmVar 0x55bc74bf55d8 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bf5ba8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55bc74bf57c8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf5848 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf5b08 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bc74bf5908 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf5980 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf5a28 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1e7a0 <col:61, line:553:5>
|     `-ReturnStmt 0x55bc74c1e790 <line:552:9, col:42>
|       `-CallExpr 0x55bc74c1e758 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1e690 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1e6f8 <col:24> 'const char *' lvalue ParmVar 0x55bc74bf5908 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1e718 <col:33> 'P' lvalue ParmVar 0x55bc74bf5980 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1e738 <col:41> 'T' lvalue ParmVar 0x55bc74bf5a28 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bf6088 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55bc74bf5c18 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf5c98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf5fe8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bc74bf5d58 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf5dd8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf5e50 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf5ef8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1e918 <col:69, line:557:5>
|     `-ReturnStmt 0x55bc74c1e908 <line:556:9, col:46>
|       `-CallExpr 0x55bc74c1e8c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1e7c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1e848 <col:21> 'const char *' lvalue ParmVar 0x55bc74bf5d58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1e868 <col:30> 'int' lvalue ParmVar 0x55bc74bf5dd8 'flags' 'int'
|         |-DeclRefExpr 0x55bc74c1e888 <col:37> 'P' lvalue ParmVar 0x55bc74bf5e50 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1e8a8 <col:45> 'T' lvalue ParmVar 0x55bc74bf5ef8 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bf6398 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55bc74bf6100 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bc74bf62f8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bc74bf61b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf6228 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55bc74c1ea58 <col:56, line:571:5>
|     `-ReturnStmt 0x55bc74c1ea48 <line:570:9, col:48>
|       `-CallExpr 0x55bc74c1ea10 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1e940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1e9b0 <col:30> 'const char *' lvalue ParmVar 0x55bc74bf61b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1e9d0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55bc74c1e9f0 <col:42> 'P' lvalue ParmVar 0x55bc74bf6228 'parser' 'P'
|-FunctionTemplateDecl 0x55bc74bf6728 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55bc74bf6400 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bc74bf6688 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55bc74bf64b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf6530 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf65a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55bc74c1ec28 <col:67, line:576:5>
|     |-CallExpr 0x55bc74c1ebb0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bc74c1ea70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55bc74c1eab0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55bc74c1eac0 <col:39> 'const char *' lvalue ParmVar 0x55bc74bf64b0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55bc74c1eb70 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55bc74c1eb20 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55bc74c1eae0 <col:48> 'int' lvalue ParmVar 0x55bc74bf6530 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55bc74c1eb58 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55bc74c1eb38 <col:56> 'const int' lvalue Var 0x55bc74becd90 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55bc74c1eb90 <col:68> 'P' lvalue ParmVar 0x55bc74bf65a8 'parser' 'P'
|     `-ReturnStmt 0x55bc74c1ec18 <line:575:9, col:17>
|       `-UnaryOperator 0x55bc74c1ec00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1ebf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bf6b78 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55bc74bf6798 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf6818 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf6ad8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bc74bf68d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf6950 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf69f8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1ed98 <col:62, line:592:5>
|     `-ReturnStmt 0x55bc74c1ed88 <line:591:9, col:51>
|       `-CallExpr 0x55bc74c1ed48 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1ec58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1ecc8 <col:30> 'const char *' lvalue ParmVar 0x55bc74bf68d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1ece8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55bc74c1ed08 <col:42> 'P' lvalue ParmVar 0x55bc74bf6950 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1ed28 <col:50> 'T' lvalue ParmVar 0x55bc74bf69f8 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bf7058 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55bc74bf6be8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf6c68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf6fb8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bc74bf6d28 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf6da8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf6e20 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf6ec8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c1ef90 <col:73, line:597:5>
|     |-CallExpr 0x55bc74c1ef10 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bc74c1edb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55bc74c1edf0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55bc74c1ee00 <col:39> 'const char *' lvalue ParmVar 0x55bc74bf6d28 'keyword' 'const char *'
|     | |-BinaryOperator 0x55bc74c1eeb0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55bc74c1ee60 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55bc74c1ee20 <col:48> 'int' lvalue ParmVar 0x55bc74bf6da8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55bc74c1ee98 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55bc74c1ee78 <col:56> 'const int' lvalue Var 0x55bc74becd90 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55bc74c1eed0 <col:68> 'P' lvalue ParmVar 0x55bc74bf6e20 'parser' 'P'
|     | `-DeclRefExpr 0x55bc74c1eef0 <col:76> 'T' lvalue ParmVar 0x55bc74bf6ec8 'x' 'T &'
|     `-ReturnStmt 0x55bc74c1ef80 <line:596:9, col:17>
|       `-UnaryOperator 0x55bc74c1ef68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1ef58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bf7608 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55bc74bf70d0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf7148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf7568 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55bc74bf7208 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf7280 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf7440 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bc74c1f100 <col:65, line:614:5>
|     `-ReturnStmt 0x55bc74c1f0f0 <line:613:9, col:46>
|       `-CallExpr 0x55bc74c1f0b0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1efc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1f030 <col:25> 'const char *' lvalue ParmVar 0x55bc74bf7208 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1f050 <col:34> 'int' 0
|         |-DeclRefExpr 0x55bc74c1f070 <col:37> 'P' lvalue ParmVar 0x55bc74bf7280 'parser' 'P'
|         `-DeclRefExpr 0x55bc74c1f090 <col:45> 'Vector<T>' lvalue ParmVar 0x55bc74bf7440 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55bc74bf7a38 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55bc74bf7678 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bc74bf7998 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55bc74bf7730 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf7880 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bc74c1f320 <col:55, line:618:5>
|     `-ReturnStmt 0x55bc74c1f310 <line:617:9, col:55>
|       `-CallExpr 0x55bc74c1f2d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1f128 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1f198 <col:25> 'const char *' lvalue ParmVar 0x55bc74bf7730 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bc74c1f1b8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55bc74c1f290 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55bc74c1f2b0 <col:54> 'Vector<T>' lvalue ParmVar 0x55bc74bf7880 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55bc74bf8008 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55bc74bf7aa0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf7b18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf7f68 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55bc74bf7bd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf7c58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf7cd0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bf7e20 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bc74c1f518 <col:76, line:623:5>
|     |-CallExpr 0x55bc74c1f498 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bc74c1f338 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55bc74c1f378 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55bc74c1f388 <col:34> 'const char *' lvalue ParmVar 0x55bc74bf7bd8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55bc74c1f438 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55bc74c1f3e8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55bc74c1f3a8 <col:43> 'int' lvalue ParmVar 0x55bc74bf7c58 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55bc74c1f420 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55bc74c1f400 <col:51> 'const int' lvalue Var 0x55bc74becd90 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55bc74c1f458 <col:63> 'P' lvalue ParmVar 0x55bc74bf7cd0 'parser' 'P'
|     | `-DeclRefExpr 0x55bc74c1f478 <col:71> 'Vector<T>' lvalue ParmVar 0x55bc74bf7e20 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55bc74c1f508 <line:622:9, col:17>
|       `-UnaryOperator 0x55bc74c1f4f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c1f4e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bf8548 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55bc74bf8080 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bf80f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bf84a8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55bc74bf81b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf8238 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf8380 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bc74c1f780 <col:66, line:627:5>
|     `-ReturnStmt 0x55bc74c1f770 <line:626:9, col:59>
|       `-CallExpr 0x55bc74c1f730 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bc74c1f548 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bc74c1f5b8 <col:25> 'const char *' lvalue ParmVar 0x55bc74bf81b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bc74c1f5d8 <col:34> 'int' lvalue ParmVar 0x55bc74bf8238 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55bc74c1f6f0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55bc74c1f710 <col:58> 'Vector<T>' lvalue ParmVar 0x55bc74bf8380 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55bc74bf85d8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55bc74c1f800 <col:25, line:633:5>
|   `-ReturnStmt 0x55bc74c1f7f0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55bc74c1f7d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55bc74c1f7a8 <col:16> 'const bool' lvalue ->_status 0x55bc74c06d88
|         `-CXXThisExpr 0x55bc74c1f798 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55bc74bf8758 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55bc74bf8690 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55bc74c1f8e8 <col:27, line:639:5>
|   |-BinaryOperator 0x55bc74c1f890 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bc74c1f818 <col:9> 'bool' lvalue ParmVar 0x55bc74bf8690 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bc74c1f878 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bc74c1f848 <col:13> 'bool' lvalue ->_status 0x55bc74c06d88
|   |     `-CXXThisExpr 0x55bc74c1f838 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55bc74c1f8d8 <line:638:9, col:17>
|     `-UnaryOperator 0x55bc74c1f8c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bc74c1f8b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bc74bf88d8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55bc74bf8818 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55bc74c1f9d8 <col:39, line:644:5>
|   |-BinaryOperator 0x55bc74c1f980 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bc74c1f908 <col:9> 'bool' lvalue ParmVar 0x55bc74bf8818 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bc74c1f968 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bc74c1f938 <col:13> 'const bool' lvalue ->_status 0x55bc74c06d88
|   |     `-CXXThisExpr 0x55bc74c1f928 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55bc74c1f9c8 <line:643:9, col:17>
|     `-UnaryOperator 0x55bc74c1f9b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bc74c1f9a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55bc74bf89a0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55bc74c1fa80 <col:30, line:651:5>
|   `-ReturnStmt 0x55bc74c1fa70 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55bc74c1fa58 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55bc74c1fa28 <col:16> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|         `-ImplicitCastExpr 0x55bc74c1fa08 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55bc74c1f9f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55bc74bf8ae8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55bc74bf8a58 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55bc74c1fb88 <col:32, line:658:5>
|   |-BinaryOperator 0x55bc74c1fb30 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bc74c1fa98 <col:9> 'bool' lvalue ParmVar 0x55bc74bf8a58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bc74c1fb18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bc74c1fae8 <col:13> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|   |     `-ImplicitCastExpr 0x55bc74c1fac8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55bc74c1fab8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55bc74c1fb78 <line:657:9, col:17>
|     `-UnaryOperator 0x55bc74c1fb60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bc74c1fb50 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bc74bf8c38 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55bc74bf8ba8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55bc74c1fc98 <col:44, line:663:5>
|   |-BinaryOperator 0x55bc74c1fc40 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bc74c1fba8 <col:9> 'bool' lvalue ParmVar 0x55bc74bf8ba8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bc74c1fc28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bc74c1fbf8 <col:13> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|   |     `-ImplicitCastExpr 0x55bc74c1fbd8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55bc74c1fbc8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55bc74c1fc88 <line:662:9, col:17>
|     `-UnaryOperator 0x55bc74c1fc70 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bc74c1fc60 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55bc74bf8d00 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55bc74bf8dc8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55bc74bf8e90 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55bc74bf8f58 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55bc74bf9268 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55bc74bf8ff8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bc74bf91c8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55bc74bf90d8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c20050 <col:19, line:706:5>
|     `-IfStmt 0x55bc74c20028 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55bc74c1fd98 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55bc74c1ff58 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55bc74c1ff28 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55bc74c1fee8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55bc74c1fdf0 <col:42> '<bound member function type>' ->simple_slot 0x55bc74c19230
|       |     | `-CXXThisExpr 0x55bc74c1fde0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55bc74c1fe88 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55bc74c1fe40 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55bc749862b8
|       |     | `-DeclRefExpr 0x55bc74c1fe20 <col:55> 'T' lvalue ParmVar 0x55bc74bf90d8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55bc74c1fec8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55bc74c20018 <line:705:13, col:34>
|         `-CallExpr 0x55bc74c1fff0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55bc74c1ff78 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55bc74c1ffd0 <col:33> 'T' lvalue ParmVar 0x55bc74bf90d8 'x' 'T &'
|-FunctionTemplateDecl 0x55bc74bf9538 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55bc74bf92c8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bc74bf9498 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55bc74bf93a8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55bc74c20430 <col:31, line:717:5>
|     |-DeclStmt 0x55bc74c20190 <line:713:9, col:23>
|     | `-VarDecl 0x55bc74c20078 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55bc74c20168 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55bc74c200f0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55bc74c20148 <col:21> 'T' lvalue ParmVar 0x55bc74bf93a8 'x' 'T &'
|     |-IfStmt 0x55bc74c203e0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55bc74c20288 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55bc74c203c0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55bc74c20360 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55bc74c202f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|     |   | `-DeclRefExpr 0x55bc74c202d0 <col:14> 'T *' lvalue Var 0x55bc74c20078 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55bc74c203a0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55bc74c20418 <line:716:9, col:16>
|       `-DeclRefExpr 0x55bc74c203f8 <col:16> 'T *' lvalue Var 0x55bc74c20078 's' 'T *'
|-FunctionTemplateDecl 0x55bc74bf9948 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55bc74bf9598 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bc74bf9618 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bc74bf98a8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55bc74bf96f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55bc74bf9798 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55bc74c20740 <col:37, line:726:5>
|     |-IfStmt 0x55bc74c206d0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55bc74c206f0 <line:723:13, col:26>
|     | | `-VarDecl 0x55bc74c20498 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55bc74c20588 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55bc74c20510 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55bc74c20568 <col:25> 'T' lvalue ParmVar 0x55bc74bf96f8 'x' 'T &'
|     | |-DeclRefExpr 0x55bc74c205b0 <col:16> 'T *' lvalue Var 0x55bc74c20498 's' 'T *'
|     | `-BinaryOperator 0x55bc74c206b0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55bc74c20660 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55bc74c205f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|     |   | `-DeclRefExpr 0x55bc74c205d0 <col:14> 'T *' lvalue Var 0x55bc74c20498 's' 'T *'
|     |   `-DeclRefExpr 0x55bc74c20690 <col:18> 'const V' lvalue ParmVar 0x55bc74bf9798 'value' 'const V &'
|     `-ReturnStmt 0x55bc74c20730 <line:725:9, col:17>
|       `-UnaryOperator 0x55bc74c20718 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bc74c20708 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bc74bf9d48 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55bc74bf99b0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bc74bf9ca8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55bc74bf9a60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf9ae0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bf9b88 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55bc74c21560 <col:65, line:737:5>
|     |-DeclStmt 0x55bc74c207d8 <line:732:9, col:26>
|     | `-VarDecl 0x55bc74c20770 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bc74c21528 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55bc74c21548 <line:733:13, col:58>
|       | `-VarDecl 0x55bc74c20800 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bc74c209e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bc74c209b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bc74c20998 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bc74c20978 <col:26, col:58> 'String' (CXXTemporary 0x55bc74c20978)
|       |           `-CXXMemberCallExpr 0x55bc74c20908 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bc74c20878 <col:26> '<bound member function type>' ->find 0x55bc74c18848
|       |             | `-CXXThisExpr 0x55bc74c20868 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bc74c20940 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bc74c208a8 <col:31> 'const char *' lvalue ParmVar 0x55bc74bf9a60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bc74c20958 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bc74c208c8 <col:40> 'int' lvalue ParmVar 0x55bc74bf9ae0 'flags' 'int'
|       |             `-DeclRefExpr 0x55bc74c208e8 <col:47> 'Args::Slot *' lvalue Var 0x55bc74c20770 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bc74c20a98 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bc74c20a80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bc74c20a60 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bc74c20a30 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bc74948278
|       |       `-ImplicitCastExpr 0x55bc74c20a18 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bc74c209f8 <col:20> 'String' lvalue Var 0x55bc74c20800 'str' 'String'
|       `-CompoundStmt 0x55bc74c21508 <col:61, line:736:9>
|         |-DeclStmt 0x55bc74c20f50 <line:734:13, col:76>
|         | `-VarDecl 0x55bc74c20ae8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55bc74c20f20 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bc74c20e90 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bc74c20ed8 <col:60> 'T' lvalue ParmVar 0x55bc74bf9b88 'variable' 'T &'
|         |     `-UnaryOperator 0x55bc74c20f08 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bc74c20ef8 <col:71> 'Args *' this
|         `-CallExpr 0x55bc74c214d8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55bc74c20f78 <col:13> '<bound member function type>' ->postparse 0x55bc74c18a58
|           | `-CXXThisExpr 0x55bc74c20f68 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55bc74c21498 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55bc74c20fa8 <col:23> 'T *' lvalue Var 0x55bc74c20ae8 's' 'T *'
|           | `-CallExpr 0x55bc74c21458 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55bc74c21230 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55bc74c21330 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55bc74c21350 <col:86> 'String' lvalue Var 0x55bc74c20800 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55bc74c21400 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bc74c21390 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|           |   | `-DeclRefExpr 0x55bc74c21370 <col:92> 'T *' lvalue Var 0x55bc74c20ae8 's' 'T *'
|           |   `-UnaryOperator 0x55bc74c21440 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55bc74c21430 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55bc74c214b8 <col:103> 'Args::Slot *' lvalue Var 0x55bc74c20770 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bc74bfa298 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55bc74bf9db8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bc74bf9e38 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bc74bfa1f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55bc74bf9ef8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bf9f78 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bfa018 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55bc74bfa0b8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55bc74c22400 <col:88, line:745:5>
|     |-DeclStmt 0x55bc74c215f8 <line:741:9, col:26>
|     | `-VarDecl 0x55bc74c21590 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bc74c21818 <line:742:9, col:55>
|     | `-VarDecl 0x55bc74c21620 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55bc74c21800 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55bc74c217d0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55bc74c217b8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55bc74c21798 <col:22, col:54> 'String' (CXXTemporary 0x55bc74c21798)
|     |           `-CXXMemberCallExpr 0x55bc74c21728 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55bc74c21698 <col:22> '<bound member function type>' ->find 0x55bc74c18848
|     |             | `-CXXThisExpr 0x55bc74c21688 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55bc74c21760 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bc74c216c8 <col:27> 'const char *' lvalue ParmVar 0x55bc74bf9ef8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55bc74c21778 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bc74c216e8 <col:36> 'int' lvalue ParmVar 0x55bc74bf9f78 'flags' 'int'
|     |             `-DeclRefExpr 0x55bc74c21708 <col:43> 'Args::Slot *' lvalue Var 0x55bc74c21590 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55bc74c21bf0 <line:743:9, col:72>
|     | `-VarDecl 0x55bc74c21868 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55bc74c21bc0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55bc74c21b30 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55bc74c21b78 <col:56> 'T' lvalue ParmVar 0x55bc74bfa018 'variable' 'T &'
|     |     `-UnaryOperator 0x55bc74c21ba8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55bc74c21b98 <col:67> 'Args *' this
|     `-CallExpr 0x55bc74c223d0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55bc74c21c18 <col:9> '<bound member function type>' ->postparse 0x55bc74c18a58
|       | `-CXXThisExpr 0x55bc74c21c08 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55bc74c22390 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55bc74c21c48 <col:19> 'T *' lvalue Var 0x55bc74c21868 's' 'T *'
|       | `-ParenExpr 0x55bc74c22370 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55bc74c22340 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55bc74c22328 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55bc74c22310 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55bc74c222f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55bc74c222c0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55bc74948278
|       |     |       `-ImplicitCastExpr 0x55bc74c222a8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55bc74c21c68 <col:25> 'String' lvalue Var 0x55bc74c21620 'str' 'String'
|       |     |-CallExpr 0x55bc74c22118 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55bc74c21ef0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55bc74c21ff0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55bc74c22010 <col:89> 'String' lvalue Var 0x55bc74c21620 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55bc74c220c0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55bc74c22050 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|       |     | | `-DeclRefExpr 0x55bc74c22030 <col:95> 'T *' lvalue Var 0x55bc74c21868 's' 'T *'
|       |     | `-UnaryOperator 0x55bc74c22100 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55bc74c220f0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55bc74c22288 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55bc74c22268 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55bc74c22238 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55bc74c221e8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55bc74c22178 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|       |         | | `-DeclRefExpr 0x55bc74c22158 <col:109> 'T *' lvalue Var 0x55bc74c21868 's' 'T *'
|       |         | `-DeclRefExpr 0x55bc74c22218 <col:113> 'const V' lvalue ParmVar 0x55bc74bfa0b8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55bc74c22258 <col:120> 'bool' true
|       `-DeclRefExpr 0x55bc74c223b0 <col:128> 'Args::Slot *' lvalue Var 0x55bc74c21590 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bc74bfa7c8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55bc74bfa310 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bfa388 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74bfa728 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bc74bfa448 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bfa4c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bfa540 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bfa5e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55bc74c22ff8 <col:75, line:754:5>
|     |-DeclStmt 0x55bc74c224a8 <line:749:9, col:26>
|     | `-VarDecl 0x55bc74c22440 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bc74c22fc0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55bc74c22fe0 <line:750:13, col:58>
|       | `-VarDecl 0x55bc74c224d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bc74c226b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bc74c22680 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bc74c22668 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bc74c22648 <col:26, col:58> 'String' (CXXTemporary 0x55bc74c22648)
|       |           `-CXXMemberCallExpr 0x55bc74c225d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bc74c22548 <col:26> '<bound member function type>' ->find 0x55bc74c18848
|       |             | `-CXXThisExpr 0x55bc74c22538 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bc74c22610 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bc74c22578 <col:31> 'const char *' lvalue ParmVar 0x55bc74bfa448 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bc74c22628 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bc74c22598 <col:40> 'int' lvalue ParmVar 0x55bc74bfa4c8 'flags' 'int'
|       |             `-DeclRefExpr 0x55bc74c225b8 <col:47> 'Args::Slot *' lvalue Var 0x55bc74c22440 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bc74c22768 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bc74c22750 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bc74c22730 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bc74c22700 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bc74948278
|       |       `-ImplicitCastExpr 0x55bc74c226e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bc74c226c8 <col:20> 'String' lvalue Var 0x55bc74c224d0 'str' 'String'
|       `-CompoundStmt 0x55bc74c22fa0 <col:61, line:753:9>
|         |-DeclStmt 0x55bc74c22b40 <line:751:13, col:63>
|         | `-VarDecl 0x55bc74c227b8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55bc74c22b10 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bc74c22a80 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bc74c22ac8 <col:47> 'T' lvalue ParmVar 0x55bc74bfa5e8 'variable' 'T &'
|         |     `-UnaryOperator 0x55bc74c22af8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bc74c22ae8 <col:58> 'Args *' this
|         `-CallExpr 0x55bc74c22f70 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55bc74c22b68 <col:13> '<bound member function type>' ->postparse 0x55bc74c18a58
|           | `-CXXThisExpr 0x55bc74c22b58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55bc74c22f30 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55bc74c22b98 <col:23> 'T *' lvalue Var 0x55bc74c227b8 's' 'T *'
|           | `-CallExpr 0x55bc74c22ef0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55bc74c22d80 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55bc74c22dc8 <col:56> 'P' lvalue ParmVar 0x55bc74bfa540 'parser' 'P'
|           |   |-DeclRefExpr 0x55bc74c22de8 <col:64> 'String' lvalue Var 0x55bc74c224d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55bc74c22e98 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bc74c22e28 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|           |   | `-DeclRefExpr 0x55bc74c22e08 <col:70> 'T *' lvalue Var 0x55bc74c227b8 's' 'T *'
|           |   `-UnaryOperator 0x55bc74c22ed8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55bc74c22ec8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55bc74c22f50 <col:81> 'Args::Slot *' lvalue Var 0x55bc74c22440 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bc74bfae28 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55bc74bfa840 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bc74bfa8b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55bc74bfa938 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bc74bfad88 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55bc74bfaa00 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bfaa80 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bfaaf8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bfab98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55bc74bfac38 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55bc74c26150 <col:98, line:762:5>
|     |-DeclStmt 0x55bc74c23090 <line:758:9, col:26>
|     | `-VarDecl 0x55bc74c23028 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bc74c232b0 <line:759:9, col:55>
|     | `-VarDecl 0x55bc74c230b8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55bc74c23298 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55bc74c23268 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55bc74c23250 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55bc74c23230 <col:22, col:54> 'String' (CXXTemporary 0x55bc74c23230)
|     |           `-CXXMemberCallExpr 0x55bc74c231c0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55bc74c23130 <col:22> '<bound member function type>' ->find 0x55bc74c18848
|     |             | `-CXXThisExpr 0x55bc74c23120 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55bc74c231f8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bc74c23160 <col:27> 'const char *' lvalue ParmVar 0x55bc74bfaa00 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55bc74c23210 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bc74c23180 <col:36> 'int' lvalue ParmVar 0x55bc74bfaa80 'flags' 'int'
|     |             `-DeclRefExpr 0x55bc74c231a0 <col:43> 'Args::Slot *' lvalue Var 0x55bc74c23028 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55bc74c236d0 <line:760:9, col:59>
|     | `-VarDecl 0x55bc74c23308 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55bc74c236a0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55bc74c23610 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55bc74c23658 <col:43> 'T' lvalue ParmVar 0x55bc74bfab98 'variable' 'T &'
|     |     `-UnaryOperator 0x55bc74c23688 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55bc74c23678 <col:54> 'Args *' this
|     `-CallExpr 0x55bc74c26120 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55bc74c236f8 <col:9> '<bound member function type>' ->postparse 0x55bc74c18a58
|       | `-CXXThisExpr 0x55bc74c236e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55bc74c23d18 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55bc74c23728 <col:19> 'T *' lvalue Var 0x55bc74c23308 's' 'T *'
|       | `-ParenExpr 0x55bc74c23cf8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55bc74c23cc8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55bc74c23cb0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55bc74c23c98 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55bc74c23c78 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55bc74c23c48 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55bc74948278
|       |     |       `-ImplicitCastExpr 0x55bc74c23c30 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55bc74c23748 <col:25> 'String' lvalue Var 0x55bc74c230b8 'str' 'String'
|       |     |-CallExpr 0x55bc74c23aa0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55bc74c23930 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55bc74c23978 <col:59> 'P' lvalue ParmVar 0x55bc74bfaaf8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55bc74c23998 <col:67> 'String' lvalue Var 0x55bc74c230b8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55bc74c23a48 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55bc74c239d8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|       |     | | `-DeclRefExpr 0x55bc74c239b8 <col:73> 'T *' lvalue Var 0x55bc74c23308 's' 'T *'
|       |     | `-UnaryOperator 0x55bc74c23a88 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55bc74c23a78 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55bc74c23c10 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55bc74c23bf0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55bc74c23bc0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55bc74c23b70 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55bc74c23b00 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|       |         | | `-DeclRefExpr 0x55bc74c23ae0 <col:87> 'T *' lvalue Var 0x55bc74c23308 's' 'T *'
|       |         | `-DeclRefExpr 0x55bc74c23ba0 <col:91> 'const V' lvalue ParmVar 0x55bc74bfac38 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55bc74c23be0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55bc74c23d38 <col:106> 'Args::Slot *' lvalue Var 0x55bc74c23028 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bc74bfb498 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55bc74bfaea8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74bfaf28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bc74bfafa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bc74bfb3f8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bc74bfb070 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bfb0f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bfb168 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74bfb208 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55bc74bfb2a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55bc74c27128 <col:60, line:773:5>
|     |-DeclStmt 0x55bc74c261f8 <line:767:9, col:26>
|     | `-VarDecl 0x55bc74c26190 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bc74c270f0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55bc74c27110 <line:768:13, col:58>
|       | `-VarDecl 0x55bc74c26220 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bc74c26400 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bc74c263d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bc74c263b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bc74c26398 <col:26, col:58> 'String' (CXXTemporary 0x55bc74c26398)
|       |           `-CXXMemberCallExpr 0x55bc74c26328 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bc74c26298 <col:26> '<bound member function type>' ->find 0x55bc74c18848
|       |             | `-CXXThisExpr 0x55bc74c26288 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bc74c26360 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bc74c262c8 <col:31> 'const char *' lvalue ParmVar 0x55bc74bfb070 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bc74c26378 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bc74c262e8 <col:40> 'int' lvalue ParmVar 0x55bc74bfb0f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55bc74c26308 <col:47> 'Args::Slot *' lvalue Var 0x55bc74c26190 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bc74c264b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bc74c264a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bc74c26480 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bc74c26450 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bc74948278
|       |       `-ImplicitCastExpr 0x55bc74c26438 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bc74c26418 <col:20> 'String' lvalue Var 0x55bc74c26220 'str' 'String'
|       `-CompoundStmt 0x55bc74c270c8 <col:61, line:772:9>
|         |-DeclStmt 0x55bc74c267f0 <line:769:13, col:66>
|         | `-VarDecl 0x55bc74c26508 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55bc74c267c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bc74c26730 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bc74c26778 <col:49> 'T1' lvalue ParmVar 0x55bc74bfb208 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55bc74c267a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bc74c26798 <col:61> 'Args *' this
|         |-DeclStmt 0x55bc74c26b60 <line:770:13, col:66>
|         | `-VarDecl 0x55bc74c26878 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55bc74c26b30 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bc74c26aa0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bc74c26ae8 <col:49> 'T2' lvalue ParmVar 0x55bc74bfb2a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55bc74c26b18 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bc74c26b08 <col:61> 'Args *' this
|         `-CallExpr 0x55bc74c27098 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55bc74c26b88 <col:13> '<bound member function type>' ->postparse 0x55bc74c18a58
|           | `-CXXThisExpr 0x55bc74c26b78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55bc74c27058 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55bc74c26bf8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55bc74c26bb8 <col:23> 'T1 *' lvalue Var 0x55bc74c26508 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55bc74c26bd8 <col:29> 'T2 *' lvalue Var 0x55bc74c26878 's2' 'T2 *'
|           | `-CallExpr 0x55bc74c27010 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55bc74c26de0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55bc74c26e28 <col:63> 'P' lvalue ParmVar 0x55bc74bfb168 'parser' 'P'
|           |   |-DeclRefExpr 0x55bc74c26e48 <col:71> 'String' lvalue Var 0x55bc74c26220 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55bc74c26ef8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bc74c26e88 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|           |   | `-DeclRefExpr 0x55bc74c26e68 <col:77> 'T1 *' lvalue Var 0x55bc74c26508 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55bc74c26fb8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bc74c26f48 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|           |   | `-DeclRefExpr 0x55bc74c26f28 <col:82> 'T2 *' lvalue Var 0x55bc74c26878 's2' 'T2 *'
|           |   `-UnaryOperator 0x55bc74c26ff8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55bc74c26fe8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55bc74c27078 <col:94> 'Args::Slot *' lvalue Var 0x55bc74c26190 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bc74c041f8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55bc74bfb518 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bc74c04158 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55bc74bfb5d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74bfb650 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74bfb6c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55bc74c27640 <col:67, line:780:5>
|     |-DeclStmt 0x55bc74c271c0 <line:777:9, col:26>
|     | `-VarDecl 0x55bc74c27158 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bc74c27608 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55bc74c27628 <line:778:13, col:58>
|       | `-VarDecl 0x55bc74c271e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bc74c273c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bc74c27398 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bc74c27380 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bc74c27360 <col:26, col:58> 'String' (CXXTemporary 0x55bc74c27360)
|       |           `-CXXMemberCallExpr 0x55bc74c272f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bc74c27260 <col:26> '<bound member function type>' ->find 0x55bc74c18848
|       |             | `-CXXThisExpr 0x55bc74c27250 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bc74c27328 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bc74c27290 <col:31> 'const char *' lvalue ParmVar 0x55bc74bfb5d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bc74c27340 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bc74c272b0 <col:40> 'int' lvalue ParmVar 0x55bc74bfb650 'flags' 'int'
|       |             `-DeclRefExpr 0x55bc74c272d0 <col:47> 'Args::Slot *' lvalue Var 0x55bc74c27158 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bc74c27480 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bc74c27468 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bc74c27448 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bc74c27418 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bc74948278
|       |       `-ImplicitCastExpr 0x55bc74c27400 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bc74c273e0 <col:20> 'String' lvalue Var 0x55bc74c271e8 'str' 'String'
|       `-CallExpr 0x55bc74c275d8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55bc74c274a8 <col:13> '<bound member function type>' ->postparse 0x55bc74c18a58
|         | `-CXXThisExpr 0x55bc74c27498 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55bc74c27588 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55bc74c274f8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55bc74c274d8 <col:23> 'P' lvalue ParmVar 0x55bc74bfb6c8 'parser' 'P'
|         | |-DeclRefExpr 0x55bc74c27540 <col:36> 'String' lvalue Var 0x55bc74c271e8 'str' 'String'
|         | `-UnaryOperator 0x55bc74c27570 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55bc74c27560 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55bc74c275b8 <col:49> 'Args::Slot *' lvalue Var 0x55bc74c27158 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bc74c04598 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55bc74c04268 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bc74c044f8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55bc74c04320 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74c043a0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74c04418 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55bc74c27fb0 <col:71, line:792:5>
|     |-DeclStmt 0x55bc74c276d8 <line:784:9, col:26>
|     | `-VarDecl 0x55bc74c27670 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bc74c277a8 <line:785:9, col:29>
|     | `-VarDecl 0x55bc74c27708 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55bc74c27790 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55bc74c27770 <col:28> 'int' 1
|     |-WhileStmt 0x55bc74c27e60 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55bc74c27e80 <line:786:16, col:61>
|     | | `-VarDecl 0x55bc74c277d0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55bc74c279b0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55bc74c27980 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55bc74c27968 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55bc74c27948 <col:29, col:61> 'String' (CXXTemporary 0x55bc74c27948)
|     | |           `-CXXMemberCallExpr 0x55bc74c278d8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55bc74c27848 <col:29> '<bound member function type>' ->find 0x55bc74c18848
|     | |             | `-CXXThisExpr 0x55bc74c27838 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55bc74c27910 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bc74c27878 <col:34> 'const char *' lvalue ParmVar 0x55bc74c04320 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55bc74c27928 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bc74c27898 <col:43> 'int' lvalue ParmVar 0x55bc74c043a0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55bc74c278b8 <col:50> 'Args::Slot *' lvalue Var 0x55bc74c27670 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55bc74c27a68 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bc74c27a50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bc74c27a30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bc74c27a00 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55bc74948278
|     | |       `-ImplicitCastExpr 0x55bc74c279e8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55bc74c279c8 <col:23> 'String' lvalue Var 0x55bc74c277d0 'str' 'String'
|     | `-CompoundStmt 0x55bc74c27e38 <col:64, line:790:9>
|     |   |-CallExpr 0x55bc74c27bc0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55bc74c27a90 <col:13> '<bound member function type>' ->postparse 0x55bc74c18a58
|     |   | | `-CXXThisExpr 0x55bc74c27a80 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55bc74c27b70 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55bc74c27ae0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55bc74c27ac0 <col:23> 'P' lvalue ParmVar 0x55bc74c04418 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55bc74c27b28 <col:36> 'String' lvalue Var 0x55bc74c277d0 'str' 'String'
|     |   | | `-UnaryOperator 0x55bc74c27b58 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55bc74c27b48 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55bc74c27ba0 <col:49> 'Args::Slot *' lvalue Var 0x55bc74c27670 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55bc74c27d58 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55bc74c27bf0 <col:13> 'int' lvalue Var 0x55bc74c27708 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55bc74c27d40 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55bc74c27d20 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55bc74c27c88 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55bc74c27c68 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55bc74c27c50 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55bc74c27c10 <col:28> 'int' lvalue Var 0x55bc74c27708 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55bc74c27c30 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55bc74c27d08 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55bc74c27cd8 <col:49> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|     |   |         `-ImplicitCastExpr 0x55bc74c27cb8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55bc74c27ca8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55bc74c27e08 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55bc74c27d78 <col:13> 'int' lvalue ParmVar 0x55bc74c043a0 'flags' 'int'
|     |     `-UnaryOperator 0x55bc74c27df0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55bc74c27dd8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bc74c27db8 <col:23> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55bc74c27f90 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55bc74c27ec8 <col:9> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|       | `-ImplicitCastExpr 0x55bc74c27ea8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55bc74c27e98 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55bc74c27f70 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55bc74c27f50 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55bc74c27f38 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55bc74c27ef8 <col:25> 'int' lvalue Var 0x55bc74c27708 'read_status' 'int'
|           `-IntegerLiteral 0x55bc74c27f18 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55bc74c04a78 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55bc74c04608 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74c04688 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74c049d8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bc74c04748 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74c047c8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74c04840 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74c048e8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55bc74c28f40 <col:84, line:805:5>
|     |-DeclStmt 0x55bc74c28058 <line:796:9, col:26>
|     | `-VarDecl 0x55bc74c27ff0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bc74c28128 <line:797:9, col:29>
|     | `-VarDecl 0x55bc74c28088 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55bc74c28110 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55bc74c280f0 <col:28> 'int' 1
|     |-DeclStmt 0x55bc74c28460 <line:798:9, col:71>
|     | `-VarDecl 0x55bc74c28178 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55bc74c28430 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55bc74c283a0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55bc74c283e8 <col:55> 'T' lvalue ParmVar 0x55bc74c048e8 'variable' 'T &'
|     |     `-UnaryOperator 0x55bc74c28418 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55bc74c28408 <col:66> 'Args *' this
|     |-WhileStmt 0x55bc74c28df0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55bc74c28e10 <line:799:16, col:61>
|     | | `-VarDecl 0x55bc74c28488 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55bc74c28668 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55bc74c28638 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55bc74c28620 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55bc74c28600 <col:29, col:61> 'String' (CXXTemporary 0x55bc74c28600)
|     | |           `-CXXMemberCallExpr 0x55bc74c28590 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55bc74c28500 <col:29> '<bound member function type>' ->find 0x55bc74c18848
|     | |             | `-CXXThisExpr 0x55bc74c284f0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55bc74c285c8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bc74c28530 <col:34> 'const char *' lvalue ParmVar 0x55bc74c04748 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55bc74c285e0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bc74c28550 <col:43> 'int' lvalue ParmVar 0x55bc74c047c8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55bc74c28570 <col:50> 'Args::Slot *' lvalue Var 0x55bc74c27ff0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55bc74c28720 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bc74c28708 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bc74c286e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bc74c286b8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55bc74948278
|     | |       `-ImplicitCastExpr 0x55bc74c286a0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55bc74c28680 <col:23> 'String' lvalue Var 0x55bc74c28488 'str' 'String'
|     | `-CompoundStmt 0x55bc74c28dc8 <col:64, line:803:9>
|     |   |-CallExpr 0x55bc74c28b50 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55bc74c28748 <col:13> '<bound member function type>' ->postparse 0x55bc74c18a58
|     |   | | `-CXXThisExpr 0x55bc74c28738 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55bc74c28b10 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55bc74c28778 <col:23> 'T *' lvalue Var 0x55bc74c28178 's' 'T *'
|     |   | | `-CallExpr 0x55bc74c28ad0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55bc74c28960 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55bc74c289a8 <col:56> 'P' lvalue ParmVar 0x55bc74c04840 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55bc74c289c8 <col:64> 'String' lvalue Var 0x55bc74c28488 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55bc74c28a78 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55bc74c28a08 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|     |   | |   | `-DeclRefExpr 0x55bc74c289e8 <col:70> 'T *' lvalue Var 0x55bc74c28178 's' 'T *'
|     |   | |   `-UnaryOperator 0x55bc74c28ab8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55bc74c28aa8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55bc74c28b30 <col:81> 'Args::Slot *' lvalue Var 0x55bc74c27ff0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55bc74c28ce8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55bc74c28b80 <col:13> 'int' lvalue Var 0x55bc74c28088 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55bc74c28cd0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55bc74c28cb0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55bc74c28c18 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55bc74c28bf8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55bc74c28be0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55bc74c28ba0 <col:28> 'int' lvalue Var 0x55bc74c28088 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55bc74c28bc0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55bc74c28c98 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55bc74c28c68 <col:49> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|     |   |         `-ImplicitCastExpr 0x55bc74c28c48 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55bc74c28c38 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55bc74c28d98 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55bc74c28d08 <col:13> 'int' lvalue ParmVar 0x55bc74c047c8 'flags' 'int'
|     |     `-UnaryOperator 0x55bc74c28d80 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55bc74c28d68 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bc74c28d48 <col:23> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55bc74c28f20 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55bc74c28e58 <col:9> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|       | `-ImplicitCastExpr 0x55bc74c28e38 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55bc74c28e28 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55bc74c28f00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55bc74c28ee0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55bc74c28ec8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55bc74c28e88 <col:25> 'int' lvalue Var 0x55bc74c28088 'read_status' 'int'
|           `-IntegerLiteral 0x55bc74c28ea8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55bc74c05058 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55bc74c04af0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bc74c04b68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bc74c04fb8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55bc74c04c28 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bc74c04ca8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55bc74c04d20 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55bc74c04e70 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55bc74c29d48 <col:87, line:821:5>
|     |-DeclStmt 0x55bc74c28ff0 <line:809:9, col:26>
|     | `-VarDecl 0x55bc74c28f88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bc74c290c0 <line:810:9, col:29>
|     | `-VarDecl 0x55bc74c29020 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55bc74c290a8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55bc74c29088 <col:28> 'int' 1
|     |-DeclStmt 0x55bc74c29308 <line:811:9, col:38>
|     | `-VarDecl 0x55bc74c291f0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55bc74c292e0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55bc74c29268 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55bc74c292c0 <col:29> 'Vector<T>' lvalue ParmVar 0x55bc74c04e70 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55bc74c29bf8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55bc74c29c18 <line:812:16, col:61>
|     | | `-VarDecl 0x55bc74c29330 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55bc74c29510 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55bc74c294e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55bc74c294c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55bc74c294a8 <col:29, col:61> 'String' (CXXTemporary 0x55bc74c294a8)
|     | |           `-CXXMemberCallExpr 0x55bc74c29438 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55bc74c293a8 <col:29> '<bound member function type>' ->find 0x55bc74c18848
|     | |             | `-CXXThisExpr 0x55bc74c29398 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55bc74c29470 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bc74c293d8 <col:34> 'const char *' lvalue ParmVar 0x55bc74c04c28 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55bc74c29488 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bc74c293f8 <col:43> 'int' lvalue ParmVar 0x55bc74c04ca8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55bc74c29418 <col:50> 'Args::Slot *' lvalue Var 0x55bc74c28f88 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55bc74c295c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bc74c295b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bc74c29590 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bc74c29560 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55bc74948278
|     | |       `-ImplicitCastExpr 0x55bc74c29548 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55bc74c29528 <col:23> 'String' lvalue Var 0x55bc74c29330 'str' 'String'
|     | `-CompoundStmt 0x55bc74c29bc0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55bc74c29688 <line:813:13, col:23>
|     |   | `-VarDecl 0x55bc74c295f0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55bc74c29668 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55bc74c29808 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55bc74c296b0 <col:13> '<bound member function type>' ->postparse 0x55bc74c18a58
|     |   | | `-CXXThisExpr 0x55bc74c296a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55bc74c297b0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55bc74c29700 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55bc74c296e0 <col:23> 'P' lvalue ParmVar 0x55bc74c04d20 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55bc74c29748 <col:36> 'String' lvalue Var 0x55bc74c29330 'str' 'String'
|     |   | | |-DeclRefExpr 0x55bc74c29768 <col:41> 'T' lvalue Var 0x55bc74c295f0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55bc74c29798 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55bc74c29788 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55bc74c297e8 <col:53> 'Args::Slot *' lvalue Var 0x55bc74c28f88 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55bc74c29960 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55bc74c29898 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55bc74c29868 <col:17> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|     |   | |   `-ImplicitCastExpr 0x55bc74c29848 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55bc74c29838 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55bc74c29938 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55bc74c298d0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55bc74c298b0 <col:17> 'Vector<T> *' lvalue Var 0x55bc74c291f0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55bc74c29918 <col:30> 'T' lvalue Var 0x55bc74c295f0 'sx' 'T'
|     |   |-BinaryOperator 0x55bc74c29ae0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55bc74c29978 <col:13> 'int' lvalue Var 0x55bc74c29020 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55bc74c29ac8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55bc74c29aa8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55bc74c29a10 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55bc74c299f0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55bc74c299d8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55bc74c29998 <col:28> 'int' lvalue Var 0x55bc74c29020 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55bc74c299b8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55bc74c29a90 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55bc74c29a60 <col:49> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|     |   |         `-ImplicitCastExpr 0x55bc74c29a40 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55bc74c29a30 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55bc74c29b90 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55bc74c29b00 <col:13> 'int' lvalue ParmVar 0x55bc74c04ca8 'flags' 'int'
|     |     `-UnaryOperator 0x55bc74c29b78 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55bc74c29b60 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bc74c29b40 <col:23> 'const int' lvalue Var 0x55bc74becaa8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55bc74c29d28 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55bc74c29c60 <col:9> 'bool' lvalue ->_read_status 0x55bc74afbfa0
|       | `-ImplicitCastExpr 0x55bc74c29c40 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55bc74c29c30 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55bc74c29d08 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55bc74c29ce8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55bc74c29cd0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55bc74c29c90 <col:25> 'int' lvalue Var 0x55bc74c29020 'read_status' 'int'
|           `-IntegerLiteral 0x55bc74c29cb0 <col:40> 'int' 1
|-AccessSpecDecl 0x55bc74c050d0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55bc74c050f8 prev 0x55bc74b017d8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55bc74c051f0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55bc74c052e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55bc74c29d80 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55bc74c053d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55bc74c29d90 <col:25, line:830:9>
| |-CXXMethodDecl 0x55bc74c054d0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55bc74c05580 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55bc74c05628 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55bc74c05628
| | `-ParmVarDecl 0x55bc74c05738 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55bc74c05ef8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55bc74c05ef8
|   `-ParmVarDecl 0x55bc74c06008 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55bc74c057a8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55bc74c05908 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55bc74c05b00 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55bc74c059b0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55bc74c05a28 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55bc74c29f70 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55bc74c05db8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55bc74c29de0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55bc74c29da0 <col:20> 'void *' lvalue ParmVar 0x55bc74c059b0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55bc74c05e20 '_slot' 'char *'
| | | `-CXXNewExpr 0x55bc74c29e68 <col:32, col:45> 'char *' array Function 0x55bc7476bcd8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55bc74c29e50 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55bc74c29e20 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55bc74c05a28 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55bc74c05e80 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55bc74c29f30 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55bc74c29ef0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55bc74c05a28 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55bc74c29ff0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55bc74c05c00 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55bc74c053d0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55bc74c2a078 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55bc74c2a058 <line:840:13, col:22> 'void' array Function 0x55bc7476c038 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55bc74c2a040 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55bc74c2a010 <col:22> 'char *' lvalue ->_slot 0x55bc74c05e20
| |         `-CXXThisExpr 0x55bc74c2a000 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55bc74c05d00 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55bc74c054d0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55bc74c2a268 <col:22, line:844:9>
| |   `-CallExpr 0x55bc74c2a1d0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55bc74c2a1b8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55bc74c2a198 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55bc74877cd8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55bc74c2a208 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55bc74c2a0e8 <col:20> 'void *' lvalue ->_ptr 0x55bc74c05db8
| |     |   `-CXXThisExpr 0x55bc74c2a0d8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55bc74c2a238 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55bc74c2a220 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55bc74c2a128 <col:26> 'char *' lvalue ->_slot 0x55bc74c05e20
| |     |     `-CXXThisExpr 0x55bc74c2a118 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55bc74c2a250 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55bc74c2a168 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55bc74c05e80
| |         `-CXXThisExpr 0x55bc74c2a158 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55bc74c05db8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55bc74c05e20 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55bc74c05e80 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55bc74c06078 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55bc74c06078
| | `-ParmVarDecl 0x55bc74c06188 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55bc74c06228 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55bc74c06228
|   `-ParmVarDecl 0x55bc74c06338 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55bc74c064d8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55bc74c063a8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55bc74c06448 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55bc74c06770 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55bc74c06968 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55bc74c06838 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55bc74c06ae8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55bc74c2a2a0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55bc74c2a280 <col:20> 'T *' lvalue ParmVar 0x55bc74c06838 'ptr' 'T *'
|   | `-CompoundStmt 0x55bc74c2a2f0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55bc74c06a38 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55bc74c054d0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55bc74c2a4a0 <col:22, line:857:9>
|   |   `-CallExpr 0x55bc74c2a470 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55bc74c2a300 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55bc74930408 0x55bc748da738
|   |     |-CXXOperatorCallExpr 0x55bc74c2a400 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55bc74c2a390 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bc74b3d608 0x55bc74b3d228 0x55bc74b3ce58 0x55bc74b3ca78 0x55bc74b3c698 0x55bc74b3c2c8
|   |     | `-MemberExpr 0x55bc74c2a360 <col:29> 'T *' lvalue ->_ptr 0x55bc74c06ae8
|   |     |   `-CXXThisExpr 0x55bc74c2a350 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55bc74c2a440 <col:35> 'T' lvalue ->_slot 0x55bc74c06b48
|   |       `-CXXThisExpr 0x55bc74c2a430 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55bc74c06ae8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55bc74c06b48 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55bc74c06bb0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55bc74c06cb0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55bc74c06d00 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74c06c90 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55bc74c06c70 <col:31> 'int' 48
|-FieldDecl 0x55bc74c06d28 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55bc74c06d88 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55bc74c06de8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55bc74c06f20 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55bc74c180f0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55bc74c18150 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55bc74c18200 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55bc74c18428 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55bc74c18330 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55bc74c18578 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55bc74c184e8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55bc74c18848 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55bc74c18638 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55bc74c186b8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55bc74c18760 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55bc74c18a58 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55bc74c18910 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55bc74c18988 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55bc74c18b28 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55bc74c18c78 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55bc74c18be0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55bc74c19008 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55bc74c18d38 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55bc74c18db8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55bc74c18e60 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55bc74c18f18 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55bc74c19230 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55bc74c190e0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55bc74c19158 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55bc74c19548 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55bc74c192e0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55bc74c194a8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55bc74c193b8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74939130 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bc74939248 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55bc749392d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55bc749393a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55bc74939490 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55bc749396a8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55bc74939550 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74939858 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55bc74939760 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55bc749399a0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55bc74939910 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55bc74939ae8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55bc74939a58 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74939c30 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55bc74939ba0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74939cf8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55bc74939e40 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55bc74939db0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55bc74939f08 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55bc7493a050 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55bc74939fc0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55bc7493a1c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55bc7493a108 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc7493a310 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55bc7493a280 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc7493a3d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55bc7493a598 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55bc7493a488 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bc7493a500 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc7493a7e8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55bc7493a658 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bc7493a6d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bc7493a898 <col:86> "" ""
|-CXXMethodDecl 0x55bc7493ab08 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55bc7493a978 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55bc7493a9f0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc7493acb8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55bc7493abc8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55bc7493ae68 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55bc7493ad70 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55bc7493b138 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55bc7493af20 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55bc7493af98 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bc7493b010 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc7493b418 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55bc7493b200 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55bc7493b278 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bc7493b2f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bc7493b4d0 <col:115> "" ""
|-AccessSpecDecl 0x55bc7493b540 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55bc7493b578 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc7493ba80 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55bc7493ba80
| `-ParmVarDecl 0x55bc7493bb88 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55bc7493bc28 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55bc7493bc28
| `-ParmVarDecl 0x55bc7493bd38 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55bc74971368 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bc74b64940 <col:7>
|-CXXConstructorDecl 0x55bc74971440 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55bc74971440
| `-ParmVarDecl 0x55bc74971558 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55bc749715c8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55bc749715c8
| `-ParmVarDecl 0x55bc749716d8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55bc74b69d50 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74b534a8 prev 0x55bc74b48170 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bc74b535a0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55bc74b53690 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55bc74b537b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55bc74b53938 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55bc74b53ab8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55bc74b53c38 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55bc74b64aa8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bc74b65318 <col:11>
|-CXXDestructorDecl 0x55bc74b64b80 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bc74b64cb8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55bc74b64cb8
| `-ParmVarDecl 0x55bc74b64dc8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55bc74b64e68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bc74b64e68
| `-ParmVarDecl 0x55bc74b64f78 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55bc74b6a748 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bc74b6a858 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55bc74b6aad8 <col:11>
|   `-ReturnStmt 0x55bc74b6aac8 <col:11>
|     `-UnaryOperator 0x55bc74b6aab0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bc74b6aaa0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55bc74b6a8c8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bc74b6a8c8
  `-ParmVarDecl 0x55bc74b6a9d8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74b53ca0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bc74b53db8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55bc74b53e58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55bc74b53ec0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55bc74b53f28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55bc74b53f90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55bc74b53ff0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55bc74b540b0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55bc74b54110 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55bc74b54170 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55bc74b649b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55bc74b53e58 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55bc74b65328 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55bc74b65380 <col:12>
|-CXXConstructorDecl 0x55bc74b64fe8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55bc74b64fe8
| `-ParmVarDecl 0x55bc74b650f8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55bc74b65198 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55bc74b65198
| `-ParmVarDecl 0x55bc74b652a8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55bc74b69e30 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74b41880 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bc74b41998 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55bc74b41a28 <col:16, col:22> col:16 public
|-EnumDecl 0x55bc74b41a50 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55bc74b41b50 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55bc74b41c30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b41b30 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55bc74b41b10 <col:21> 'int' 28
| `-EnumConstantDecl 0x55bc74b41be0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55bc74b41c48 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74b41bc0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55bc74b41ba0 <col:22> 'int' 64
|-CXXMethodDecl 0x55bc74b41f88 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55bc74b41c70 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bc74b41cf0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55bc74b41d68 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bc74b41de0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bc74b42048 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b42248 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55bc74b420c0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55bc74b42138 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bc74b422f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b42458 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55bc74b42368 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bc74b42500 <col:72> warn_unused_result ""
|-TypedefDecl 0x55bc74b42860 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55bc74b427f0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55bc74b42790 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55bc74b42750 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55bc746194e0 'void'
|       |-PointerType 0x55bc748c19d0 'unsigned char *'
|       | `-BuiltinType 0x55bc746195e0 'unsigned char'
|       |-TypedefType 0x55bc746bdd80 'size_t' sugar
|       | |-Typedef 0x55bc74689be0 'size_t'
|       | `-BuiltinType 0x55bc74619640 'unsigned long'
|       `-PointerType 0x55bc74619ce0 'void *'
|         `-BuiltinType 0x55bc746194e0 'void'
|-CXXMethodDecl 0x55bc74b42cd8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55bc74b428d0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55bc74b42948 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bc74b429e0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55bc74b42a60 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55bc74b5d950 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55bc74b5d938 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55bc74b5d900 <col:58> 'int' 0
| |-ParmVarDecl 0x55bc74b42ae0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55bc74b5d978 <col:76> 'int' 0
| |-ParmVarDecl 0x55bc74b42b60 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55bc74b5d998 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55bc74b42da8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b42e28 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55bc74b42ee8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55bc74b42f88 <col:20>
| `-OptimizeNoneAttr 0x55bc74b42fe0 <col:30>
|-CXXMethodDecl 0x55bc74b43058 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55bc74b430f8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b43150 <col:30>
|-CXXMethodDecl 0x55bc74b431c8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55bc74b43268 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b43318 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55bc74b433b8 <col:20>
| |-OptimizeNoneAttr 0x55bc74b43410 <col:30>
| `-WarnUnusedResultAttr 0x55bc74b43438 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b43490 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55bc74b43530 <col:20>
| `-OptimizeNoneAttr 0x55bc74b43588 <col:30>
|-CXXMethodDecl 0x55bc74b435d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55bc74b43678 <col:20>
| `-OptimizeNoneAttr 0x55bc74b436d0 <col:30>
|-CXXMethodDecl 0x55bc74b43718 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55bc74b437b8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b43810 <col:30>
|-CXXMethodDecl 0x55bc74b43858 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55bc74b43918 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55bc74b439e0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bc74b43aa8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bc74b43b68 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bc74b43c88 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55bc74b5da60 <col:54, line:99:5>
|   `-ReturnStmt 0x55bc74b5da50 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55bc74b5da38 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55bc74b5da08 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55bc74b544a8
|         `-CXXThisExpr 0x55bc74b5d9f8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55bc74b43e28 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55bc74b43d38 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55bc74b5db10 <col:67, line:103:5>
|   `-BinaryOperator 0x55bc74b5daf0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55bc74b5da88 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55bc74b544a8
|     | `-CXXThisExpr 0x55bc74b5da78 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55bc74b5dad8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55bc74b5dab8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55bc74b43d38 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55bc74b43f20 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55bc74b5db90 <col:33, line:107:5>
|   `-ReturnStmt 0x55bc74b5db80 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55bc74b5db68 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55bc74b5db38 <col:16> 'void *' lvalue ->_destructor_argument 0x55bc74b54510
|         `-CXXThisExpr 0x55bc74b5db28 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55bc74b43fe0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55bc74b5e1c0 <col:25, line:113:5>
|   |-ParenExpr 0x55bc74b5df08 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55bc74b5ded8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b5dc48 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55bc74b5dc20 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55bc74b5dbe8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55bc74b5dbb8 <col:24> '<bound member function type>' ->shared 0x55bc74b43058
|   |   |       `-ImplicitCastExpr 0x55bc74b5dc08 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55bc74b5dba8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55bc74b5dca8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b5dc88 <col:42> 'int' 0
|   |   `-CallExpr 0x55bc74b5de38 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b5de20 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b5de00 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b5de78 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b5dd18 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55bc74b5de90 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b5dd40 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b5dea8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b5dd78 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55bc74b5dec0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b5dde8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b5ddd0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b5dd98 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55bc74b5e108 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55bc74b5df38 <col:2> 'unsigned char *' lvalue ->_head 0x55bc74b542b0
|   | | `-CXXThisExpr 0x55bc74b5df28 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55bc74b5e0f0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55bc74b5e0d0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55bc74b5df78 <col:10> 'unsigned char *' lvalue ->_data 0x55bc74b54318
|   |     | `-CXXThisExpr 0x55bc74b5df68 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55bc74b5e0b8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55bc74b5e098 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55bc74b5dfb8 <col:18> 'unsigned char *' lvalue ->_tail 0x55bc74b54380
|   |         | `-CXXThisExpr 0x55bc74b5dfa8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55bc74b5e080 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55bc74b5e060 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55bc74b5dff8 <col:26> 'unsigned char *' lvalue ->_end 0x55bc74b543e8
|   |             | `-CXXThisExpr 0x55bc74b5dfe8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55bc74b5e048 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55bc74b5e028 <col:33> 'int' 0
|   `-BinaryOperator 0x55bc74b5e1a0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55bc74b5e138 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55bc74b544a8
|     | `-CXXThisExpr 0x55bc74b5e128 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55bc74b5e188 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55bc74b5e168 <col:16> 'int' 0
|-CXXMethodDecl 0x55bc74b44120 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55bc74b44090 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bc74b441c8 <col:20>
| |-OptimizeNoneAttr 0x55bc74b44220 <col:30>
| `-WarnUnusedResultAttr 0x55bc74b44248 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b44318 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55bc74b44288 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bc74b443c0 <col:20>
| |-OptimizeNoneAttr 0x55bc74b44418 <col:30>
| `-WarnUnusedResultAttr 0x55bc74b44440 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b44578 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55bc74b44480 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bc74b44620 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b44720 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55bc74b44690 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bc74b447c8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b44820 <col:30>
|-CXXMethodDecl 0x55bc74b448e8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55bc74b44858 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bc74b44990 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b44a90 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55bc74b44a00 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bc74b44b38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b44c38 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55bc74b44ba8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bc74b44ce0 <col:20>
| `-OptimizeNoneAttr 0x55bc74b44d38 <col:30>
|-CXXMethodDecl 0x55bc74b44ec8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55bc74b44d78 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55bc74b44df0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55bc74b5d9b8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55bc74b44f78 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55bc74b45178 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55bc74b44ff0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55bc74b45068 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74b45388 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55bc74b45238 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bc74b452b0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74b45598 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55bc74b45448 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55bc74b454c8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55bc74b5d9c8 <col:39> 'int' 0
|-CXXMethodDecl 0x55bc74b45668 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55bc74b45730 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bc74b457f8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bc74b458b8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bc74b45980 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55bc74b45ac8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55bc74b45a38 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55bc74b45c98 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55bc74b45b88 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55bc74b45c00 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74b45d68 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55bc74b45e28 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55bc74b45ec8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b45f20 <col:30>
|-CXXMethodDecl 0x55bc74b45f70 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55bc74b46010 <col:20>
| `-OptimizeNoneAttr 0x55bc74b46068 <col:30>
|-CXXMethodDecl 0x55bc74b460b8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bc74b46178 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bc74b46240 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55bc74b462e0 <col:20>
| `-OptimizeNoneAttr 0x55bc74b46338 <col:30>
|-CXXMethodDecl 0x55bc74b46488 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55bc74b46378 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55bc74b463f0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74b465d8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55bc74b46548 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74b466b0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55bc74b46770 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55bc74b46810 <col:20>
| `-OptimizeNoneAttr 0x55bc74b46868 <col:30>
|-CXXMethodDecl 0x55bc74b468b8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55bc74b46958 <col:20>
| `-OptimizeNoneAttr 0x55bc74b469b0 <col:30>
|-CXXMethodDecl 0x55bc74b46a00 <line:299:5, col:42> col:16 used transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bc74b46ac8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55bc74b46b68 <col:20>
| `-OptimizeNoneAttr 0x55bc74b46bc0 <col:30>
|-CXXMethodDecl 0x55bc74b46c08 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55bc74b46d28 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55bc74b46e98 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55bc74b46dd8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55bc74b46f88 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55bc74b47028 <col:20>
| `-OptimizeNoneAttr 0x55bc74b47080 <col:30>
|-CXXMethodDecl 0x55bc74b470d0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bc74b47190 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bc74b473c8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55bc74b47240 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55bc74b472b8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bc74b47478 <col:20>
| `-OptimizeNoneAttr 0x55bc74b474d0 <col:30>
|-CXXMethodDecl 0x55bc74b47578 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55bc74b47618 <col:20>
| `-OptimizeNoneAttr 0x55bc74b47670 <col:30>
|-CXXMethodDecl 0x55bc74b476c0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55bc74b47760 <col:20>
| `-OptimizeNoneAttr 0x55bc74b477b8 <col:30>
|-CXXMethodDecl 0x55bc74b47800 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55bc74b478a0 <col:20>
| `-OptimizeNoneAttr 0x55bc74b478f8 <col:30>
|-CXXMethodDecl 0x55bc74b479f8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55bc74b47930 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55bc74b47aa0 <col:20>
| `-OptimizeNoneAttr 0x55bc74b47af8 <col:30>
|-CXXMethodDecl 0x55bc74b47cb8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55bc74b47b30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55bc74b47ba8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bc74b47d68 <col:20>
| `-OptimizeNoneAttr 0x55bc74b47dc0 <col:30>
|-CXXMethodDecl 0x55bc74b47e68 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55bc74b47f88 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55bc74b480a8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55bc74b48148 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55bc74b48170 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55bc74b48298 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55bc74b48338 <col:20>
| `-OptimizeNoneAttr 0x55bc74b48390 <col:30>
|-CXXMethodDecl 0x55bc74b48438 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55bc74b484d8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b48530 <col:30>
|-AccessSpecDecl 0x55bc74b48558 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55bc74b48580 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55bc74b48680 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55bc74b486d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74b48660 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55bc74b48640 <col:14> 'int' 48
|-CXXMethodDecl 0x55bc74b48738 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55bc74b487d8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b48830 <col:30>
|-CXXMethodDecl 0x55bc74b488a8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55bc74b48948 <col:20>
| `-OptimizeNoneAttr 0x55bc74b489a0 <col:30>
|-CXXMethodDecl 0x55bc74b48a68 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55bc74b489d8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55bc74b48c08 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55bc74b48da8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55bc74b48cb8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55bc74b48e50 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55bc74b48f50 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bc74b49300 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b48f30 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55bc74b48f10 <col:9> 'int' 0
| |-EnumConstantDecl 0x55bc74b48fe0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bc74b49318 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b48fc0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55bc74b48fa0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55bc74b49070 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bc74b49330 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b49050 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55bc74b49030 <col:14> 'int' 2
| |-EnumConstantDecl 0x55bc74b49100 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bc74b49348 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b490e0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55bc74b490c0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55bc74b49190 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bc74b49360 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b49170 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55bc74b49150 <col:13> 'int' 4
| |-EnumConstantDecl 0x55bc74b49220 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bc74b49378 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b49200 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55bc74b491e0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55bc74b492b0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55bc74b49390 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74b49290 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55bc74b49270 <col:14> 'int' 6
|-CXXMethodDecl 0x55bc74b493f8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55bc74b49498 <col:20>
| `-OptimizeNoneAttr 0x55bc74b494f0 <col:30>
|-CXXMethodDecl 0x55bc74b495e8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55bc74b49528 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55bc74b49690 <col:20>
| `-OptimizeNoneAttr 0x55bc74b496e8 <col:30>
|-CXXMethodDecl 0x55bc74b49758 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55bc74b49880 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55bc74b499f8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55bc74b49930 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55bc74b49ac0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55bc74b49b88 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55bc74b49cc8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55bc74b49c38 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55bc74b49d70 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55bc74b49e70 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55bc74b4a070 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b49e50 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55bc74b49e30 <col:23> 'int' 0
| |-EnumConstantDecl 0x55bc74b49f00 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55bc74b4a088 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b49ee0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55bc74b49ec0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55bc74b49f90 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55bc74b4a0a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b49f70 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55bc74b49f50 <col:24> 'int' 0
| `-EnumConstantDecl 0x55bc74b4a020 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55bc74b4a0b8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74b4a000 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55bc74b49fe0 <col:47> 'int' 16
|-CXXMethodDecl 0x55bc74b4a118 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55bc74b4a288 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55bc74b4a1c8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55bc74b4a330 <col:20>
| `-OptimizeNoneAttr 0x55bc74b4a388 <col:30>
|-CXXMethodDecl 0x55bc74b4a3d8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55bc74b5e2e0 <col:18, col:36>
|   `-ReturnStmt 0x55bc74b5e2d0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55bc74b5e2b8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55bc74b5e298 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55bc74b5e268 <col:27> '<bound member function type>' ->xanno 0x55bc74b48438
|           `-CXXThisExpr 0x55bc74b5e258 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55bc74b4a4d0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55bc74b5e3f0 <col:30, col:48>
|   `-ReturnStmt 0x55bc74b5e3e0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55bc74b5e3c8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55bc74b5e3a8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55bc74b5e378 <col:39> '<bound member function type>' ->xanno 0x55bc74b48298
|           `-CXXThisExpr 0x55bc74b5e368 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55bc74b4a5b8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55bc74b5e588 <col:24, col:50>
|   `-ReturnStmt 0x55bc74b5e578 <col:26, col:47>
|     `-UnaryOperator 0x55bc74b5e560 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bc74b5e540 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55bc74b5e528 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bc74b5e4d8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55bc74b537b8
|         |   `-CXXMemberCallExpr 0x55bc74b5e4b8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55bc74b5e488 <col:34> '<bound member function type>' ->xanno 0x55bc74b48438
|         |       `-CXXThisExpr 0x55bc74b5e478 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55bc74b5e508 <col:46> 'int' 0
|-CXXMethodDecl 0x55bc74b4a6c0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55bc74b5e758 <col:36, col:62>
|   `-ReturnStmt 0x55bc74b5e748 <col:38, col:59>
|     `-UnaryOperator 0x55bc74b5e730 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bc74b5e710 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55bc74b5e6f8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bc74b5e670 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55bc74b537b8
|         |   `-CXXMemberCallExpr 0x55bc74b5e650 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55bc74b5e620 <col:46> '<bound member function type>' ->xanno 0x55bc74b48298
|         |       `-CXXThisExpr 0x55bc74b5e610 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55bc74b5e6a0 <col:58> 'int' 0
|-CXXMethodDecl 0x55bc74b4a7d8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55bc74b5e8f0 <col:26, col:53>
|   `-ReturnStmt 0x55bc74b5e8e0 <col:28, col:50>
|     `-UnaryOperator 0x55bc74b5e8c8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bc74b5e8a8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55bc74b5e890 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bc74b5e840 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55bc74b53ab8
|         |   `-CXXMemberCallExpr 0x55bc74b5e820 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55bc74b5e7f0 <col:36> '<bound member function type>' ->xanno 0x55bc74b48438
|         |       `-CXXThisExpr 0x55bc74b5e7e0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55bc74b5e870 <col:49> 'int' 0
|-CXXMethodDecl 0x55bc74b4a8f8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55bc74b5eac8 <col:38, col:65>
|   `-ReturnStmt 0x55bc74b5eab8 <col:40, col:62>
|     `-UnaryOperator 0x55bc74b5eaa0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bc74b5ea80 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55bc74b5ea68 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bc74b5e9d8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55bc74b53ab8
|         |   `-CXXMemberCallExpr 0x55bc74b5e9b8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55bc74b5e988 <col:48> '<bound member function type>' ->xanno 0x55bc74b48298
|         |       `-CXXThisExpr 0x55bc74b5e978 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55bc74b5ea08 <col:61> 'int' 0
|-CXXMethodDecl 0x55bc74b4aaa8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55bc74b4a9b0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55bc74b5f198 <col:34, line:463:5>
|   |-ParenExpr 0x55bc74b5efe0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55bc74b5efb0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b5ec18 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b5ebe8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b5eb38 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b5eb20 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b5eae0 <col:23> 'int' lvalue ParmVar 0x55bc74b4a9b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b5eb00 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b5ebc8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b5eb98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b5eb58 <col:33> 'int' lvalue ParmVar 0x55bc74b4a9b0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55bc74b5ebb0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55bc74b5eb78 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55bc74b5ec78 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b5ec58 <col:56> 'int' 0
|   |   `-CallExpr 0x55bc74b5ef10 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b5eef8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b5eed8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b5ef50 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b5ed68 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55bc74b5ef68 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b5ed98 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b5ef80 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b5edd0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55bc74b5ef98 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b5eec0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b5eea8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b5ee68 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55bc74b5f188 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55bc74b5f170 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55bc74b5f150 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55bc74b5f120 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bc74b5f0d0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55bc74b537b8
|         |   `-CXXMemberCallExpr 0x55bc74b5f0b0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55bc74b5f080 <col:9> '<bound member function type>' ->xanno 0x55bc74b48298
|         |       `-CXXThisExpr 0x55bc74b5f070 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55bc74b5f138 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55bc74b5f100 <col:21> 'int' lvalue ParmVar 0x55bc74b4a9b0 'i' 'int'
|-CXXMethodDecl 0x55bc74b4acf8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55bc74b4ab68 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55bc74b4abe0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55bc74b5f828 <col:40, line:472:5>
|   |-ParenExpr 0x55bc74b5f640 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55bc74b5f610 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b5f2f0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b5f2c0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b5f210 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b5f1f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b5f1b8 <col:23> 'int' lvalue ParmVar 0x55bc74b4ab68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b5f1d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b5f2a0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b5f270 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b5f230 <col:33> 'int' lvalue ParmVar 0x55bc74b4ab68 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55bc74b5f288 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55bc74b5f250 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55bc74b5f350 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b5f330 <col:56> 'int' 0
|   |   `-CallExpr 0x55bc74b5f570 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b5f558 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b5f538 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b5f5b0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b5f3c0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55bc74b5f5c8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b5f3f0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b5f5e0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b5f428 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55bc74b5f5f8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b5f520 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b5f508 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b5f4c8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55bc74b5f808 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55bc74b5f7b0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55bc74b5f780 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55bc74b5f730 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55bc74b537b8
|     | |   `-CXXMemberCallExpr 0x55bc74b5f710 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55bc74b5f6e0 <col:2> '<bound member function type>' ->xanno 0x55bc74b48438
|     | |       `-CXXThisExpr 0x55bc74b5f6d0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55bc74b5f798 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55bc74b5f760 <col:14> 'int' lvalue ParmVar 0x55bc74b4ab68 'i' 'int'
|     `-ImplicitCastExpr 0x55bc74b5f7f0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55bc74b5f7d0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55bc74b4abe0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55bc74b4aeb8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55bc74b4adc0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55bc74b5ffa8 <col:36, line:485:5>
|   |-ParenExpr 0x55bc74b5fd10 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bc74b5fce0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b5f9c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b5f990 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b5f8a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b5f888 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b5f848 <col:23> 'int' lvalue ParmVar 0x55bc74b4adc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b5f868 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b5f970 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b5f958 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b5f8c0 <col:33> 'int' lvalue ParmVar 0x55bc74b4adc0 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b5f938 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b5f920 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b5f8e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bc74b5f900 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bc74b5fa20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b5fa00 <col:60> 'int' 0
|   |   `-CallExpr 0x55bc74b5fc40 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b5fc28 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b5fc08 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b5fc80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b5fa90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bc74b5fc98 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b5fac8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b5fcb0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b5fb00 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55bc74b5fcc8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b5fbf0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b5fbd8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b5fb98 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55bc74b5ff98 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55bc74b5ff80 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55bc74b5ff68 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bc74b5ff38 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55bc74b5fed8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bc74b5fea8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bc74b5fe20 <col:61, col:70> 'char const[48]' lvalue ->c 0x55bc74b53690
|             |   `-CXXMemberCallExpr 0x55bc74b5fe00 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bc74b5fdd0 <col:61> '<bound member function type>' ->xanno 0x55bc74b48298
|             |       `-CXXThisExpr 0x55bc74b5fdc0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bc74b5fec0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bc74b5fe50 <col:74> 'int' lvalue ParmVar 0x55bc74b4adc0 'i' 'int'
|-CXXMethodDecl 0x55bc74b4b108 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55bc74b4af78 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bc74b4aff0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55bc74b606f8 <col:42, line:500:5>
|   |-ParenExpr 0x55bc74b60490 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bc74b60460 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b60140 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b60110 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b60020 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b60008 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b5ffc8 <col:23> 'int' lvalue ParmVar 0x55bc74b4af78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b5ffe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b600f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b600d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b60040 <col:33> 'int' lvalue ParmVar 0x55bc74b4af78 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b600b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b600a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b60060 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bc74b60080 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bc74b601a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b60180 <col:60> 'int' 0
|   |   `-CallExpr 0x55bc74b603c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b603a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b60388 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b60400 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b60210 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bc74b60418 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b60248 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b60430 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b60280 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55bc74b60448 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b60370 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b60358 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b60318 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55bc74b606d8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55bc74b60688 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bc74b60658 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55bc74b60600 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bc74b605d0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bc74b60580 <col:48, col:57> 'char [48]' lvalue ->c 0x55bc74b53690
|     |     |   `-CXXMemberCallExpr 0x55bc74b60560 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bc74b60530 <col:48> '<bound member function type>' ->xanno 0x55bc74b48438
|     |     |       `-CXXThisExpr 0x55bc74b60520 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bc74b605e8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bc74b605b0 <col:61> 'int' lvalue ParmVar 0x55bc74b4af78 'i' 'int'
|     `-ImplicitCastExpr 0x55bc74b606c0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55bc74b606a0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55bc74b4aff0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55bc74b4b2c8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55bc74b4b1d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55bc74b60e58 <col:35, line:513:5>
|   |-ParenExpr 0x55bc74b60b68 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bc74b60b38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b60890 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b60860 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b60770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b60758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b60718 <col:23> 'int' lvalue ParmVar 0x55bc74b4b1d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b60738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b60840 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b60828 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b60790 <col:33> 'int' lvalue ParmVar 0x55bc74b4b1d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b60808 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b607f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b607b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bc74b607d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bc74b608f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b608d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bc74b60a98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b60a80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b60a60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b60ad8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b60960 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bc74b60af0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b60998 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b60b08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b609d0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55bc74b60b20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b60a48 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b60a30 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b609f0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55bc74b60e48 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55bc74b60e30 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55bc74b60e18 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bc74b60de8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55bc74b60d60 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bc74b60d30 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bc74b60ce0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55bc74b53690
|             |   `-CXXMemberCallExpr 0x55bc74b60cc0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bc74b60c90 <col:60> '<bound member function type>' ->xanno 0x55bc74b48298
|             |       `-CXXThisExpr 0x55bc74b60c80 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bc74b60d48 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bc74b60d10 <col:73> 'int' lvalue ParmVar 0x55bc74b4b1d0 'i' 'int'
|-CXXMethodDecl 0x55bc74b4b518 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55bc74b4b388 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bc74b4b400 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55bc74b61578 <col:41, line:528:5>
|   |-ParenExpr 0x55bc74b61300 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bc74b612d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b60ff0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b60fc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b60ed0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b60eb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b60e78 <col:23> 'int' lvalue ParmVar 0x55bc74b4b388 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b60e98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b60fa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b60f88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b60ef0 <col:33> 'int' lvalue ParmVar 0x55bc74b4b388 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b60f68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b60f50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b60f10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bc74b60f30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bc74b61050 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b61030 <col:60> 'int' 0
|   |   `-CallExpr 0x55bc74b61230 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b61218 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b611f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b61270 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b610c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bc74b61288 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b610f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b612a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b61130 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55bc74b612b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b611e0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b611c8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b61188 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55bc74b61558 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55bc74b61508 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bc74b614d8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55bc74b61480 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bc74b61440 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bc74b613f0 <col:47, col:56> 'char [48]' lvalue ->c 0x55bc74b53690
|     |     |   `-CXXMemberCallExpr 0x55bc74b613d0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bc74b613a0 <col:47> '<bound member function type>' ->xanno 0x55bc74b48438
|     |     |       `-CXXThisExpr 0x55bc74b61390 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bc74b61458 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bc74b61420 <col:60> 'int' lvalue ParmVar 0x55bc74b4b388 'i' 'int'
|     `-ImplicitCastExpr 0x55bc74b61540 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55bc74b61520 <col:65> 'int16_t':'short' lvalue ParmVar 0x55bc74b4b400 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55bc74b4b6d8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55bc74b4b5e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55bc74b61c48 <col:36, line:541:5>
|   |-ParenExpr 0x55bc74b619e8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bc74b619b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b61710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b616e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b615f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b615d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b61598 <col:23> 'int' lvalue ParmVar 0x55bc74b4b5e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b615b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b616c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b616a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b61610 <col:33> 'int' lvalue ParmVar 0x55bc74b4b5e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b61688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b61670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b61630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bc74b61650 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55bc74b61770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b61750 <col:60> 'int' 0
|   |   `-CallExpr 0x55bc74b61918 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b61900 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b618e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b61958 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b617e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55bc74b61970 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b61818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b61988 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b61850 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55bc74b619a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b618c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b618b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b61870 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55bc74b61c38 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55bc74b61c20 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55bc74b61c08 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bc74b61bd8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55bc74b61b80 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bc74b61b50 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bc74b61b00 <col:61, col:70> 'char const[48]' lvalue ->c 0x55bc74b53690
|             |   `-CXXMemberCallExpr 0x55bc74b61ae0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bc74b61ab0 <col:61> '<bound member function type>' ->xanno 0x55bc74b48298
|             |       `-CXXThisExpr 0x55bc74b61aa0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bc74b61b68 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bc74b61b30 <col:74> 'int' lvalue ParmVar 0x55bc74b4b5e0 'i' 'int'
|-CXXMethodDecl 0x55bc74b4b8a8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55bc74b4b798 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55bc74b4b810 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bc74b4b958 <col:20>
| `-OptimizeNoneAttr 0x55bc74b4b9b0 <col:30>
|-CXXMethodDecl 0x55bc74b4bae8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55bc74b4b9f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55bc74b62318 <col:35, line:562:5>
|   |-ParenExpr 0x55bc74b620b8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bc74b62088 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b61de0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b61db0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b61cc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b61ca8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b61c68 <col:23> 'int' lvalue ParmVar 0x55bc74b4b9f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b61c88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b61d90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b61d78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b61ce0 <col:33> 'int' lvalue ParmVar 0x55bc74b4b9f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b61d58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b61d40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b61d00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bc74b61d20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55bc74b61e40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b61e20 <col:60> 'int' 0
|   |   `-CallExpr 0x55bc74b61fe8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b61fd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b61fb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b62028 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b61eb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55bc74b62040 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b61ee8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b62058 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b61f20 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55bc74b62070 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b61f98 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b61f80 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b61f40 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55bc74b62308 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55bc74b622f0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55bc74b622d8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bc74b622a8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55bc74b62250 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bc74b62220 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bc74b621d0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55bc74b53690
|             |   `-CXXMemberCallExpr 0x55bc74b621b0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bc74b62180 <col:60> '<bound member function type>' ->xanno 0x55bc74b48298
|             |       `-CXXThisExpr 0x55bc74b62170 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bc74b62238 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bc74b62200 <col:73> 'int' lvalue ParmVar 0x55bc74b4b9f0 'i' 'int'
|-CXXMethodDecl 0x55bc74b4bcf8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55bc74b4bba8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bc74b4bc20 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55bc74b629f8 <col:41, line:577:5>
|   |-ParenExpr 0x55bc74b62788 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bc74b62758 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b624b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b62480 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b62390 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b62378 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b62338 <col:23> 'int' lvalue ParmVar 0x55bc74b4bba8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b62358 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b62460 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b62448 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b623b0 <col:33> 'int' lvalue ParmVar 0x55bc74b4bba8 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b62428 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b62410 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b623d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bc74b623f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55bc74b62510 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b624f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bc74b626b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b626a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b62680 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b626f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b62580 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55bc74b62710 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b625b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b62728 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b625f0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55bc74b62740 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b62668 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b62650 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b62610 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55bc74b629d8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55bc74b62988 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bc74b62958 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55bc74b628f8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bc74b628c8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bc74b62878 <col:47, col:56> 'char [48]' lvalue ->c 0x55bc74b53690
|     |     |   `-CXXMemberCallExpr 0x55bc74b62858 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bc74b62828 <col:47> '<bound member function type>' ->xanno 0x55bc74b48438
|     |     |       `-CXXThisExpr 0x55bc74b62818 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bc74b628e0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bc74b628a8 <col:60> 'int' lvalue ParmVar 0x55bc74b4bba8 'i' 'int'
|     `-ImplicitCastExpr 0x55bc74b629c0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55bc74b629a0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55bc74b4bc20 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55bc74b4beb8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55bc74b4bdc0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55bc74b63128 <col:36, line:591:5>
|   |-ParenExpr 0x55bc74b62e68 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bc74b62e38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b62b90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b62b60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b62a70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b62a58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b62a18 <col:23> 'int' lvalue ParmVar 0x55bc74b4bdc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b62a38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b62b40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b62b28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b62a90 <col:33> 'int' lvalue ParmVar 0x55bc74b4bdc0 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b62b08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b62af0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b62ab0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bc74b62ad0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55bc74b62bf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b62bd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bc74b62d98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b62d80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b62d60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b62dd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b62c60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55bc74b62df0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b62c98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b62e08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b62cd0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55bc74b62e20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b62d48 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b62d30 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b62cf0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55bc74b63118 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55bc74b63100 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55bc74b630e8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bc74b630b8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55bc74b63030 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bc74b63000 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bc74b62fb0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55bc74b53690
|             |   `-CXXMemberCallExpr 0x55bc74b62f90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bc74b62f60 <col:61> '<bound member function type>' ->xanno 0x55bc74b48298
|             |       `-CXXThisExpr 0x55bc74b62f50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bc74b63018 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bc74b62fe0 <col:74> 'int' lvalue ParmVar 0x55bc74b4bdc0 'i' 'int'
|-CXXMethodDecl 0x55bc74b4c108 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55bc74b4bf78 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bc74b4bff0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55bc74b63808 <col:42, line:606:5>
|   |-ParenExpr 0x55bc74b63598 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bc74b63568 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b632c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b63290 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b631a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b63188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b63148 <col:23> 'int' lvalue ParmVar 0x55bc74b4bf78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b63168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b63270 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bc74b63258 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b631c0 <col:33> 'int' lvalue ParmVar 0x55bc74b4bf78 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b63238 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b63220 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b631e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bc74b63200 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55bc74b63320 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b63300 <col:60> 'int' 0
|   |   `-CallExpr 0x55bc74b634c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b634b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b63490 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b63508 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b63390 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55bc74b63520 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b633c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b63538 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b63400 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55bc74b63550 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b63478 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b63460 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b63420 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55bc74b637e8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55bc74b63798 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bc74b63768 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55bc74b63708 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bc74b636d8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bc74b63688 <col:48, col:57> 'char [48]' lvalue ->c 0x55bc74b53690
|     |     |   `-CXXMemberCallExpr 0x55bc74b63668 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bc74b63638 <col:48> '<bound member function type>' ->xanno 0x55bc74b48438
|     |     |       `-CXXThisExpr 0x55bc74b63628 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bc74b636f0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bc74b636b8 <col:61> 'int' lvalue ParmVar 0x55bc74b4bf78 'i' 'int'
|     `-ImplicitCastExpr 0x55bc74b637d0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55bc74b637b0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55bc74b4bff0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55bc74b4c2a0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55bc74b4c1d0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55bc74b64078 <col:33, line:620:5>
|   |-ParenExpr 0x55bc74b63df0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55bc74b63dc0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b63a10 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b639e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b63880 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b63868 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b63828 <col:23> 'int' lvalue ParmVar 0x55bc74b4c1d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b63848 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b639c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55bc74b639a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b638a0 <col:33> 'int' lvalue ParmVar 0x55bc74b4c1d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b63988 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b63970 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b638c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55bc74b63948 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55bc74b63930 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55bc74b638f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55bc74b63a70 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b63a50 <col:79> 'int' 0
|   |   `-CallExpr 0x55bc74b63d20 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b63d08 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b63ce8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b63d60 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b63b58 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55bc74b63d78 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b63ba0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b63d90 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b63bd8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55bc74b63da8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b63cd0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b63cb8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b63c78 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55bc74b64068 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55bc74b64050 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55bc74b64038 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bc74b64008 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55bc74b63f80 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bc74b63f50 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bc74b63f00 <col:67, col:76> 'char const[48]' lvalue ->c 0x55bc74b53690
|             |   `-CXXMemberCallExpr 0x55bc74b63ee0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bc74b63eb0 <col:67> '<bound member function type>' ->xanno 0x55bc74b48298
|             |       `-CXXThisExpr 0x55bc74b63ea0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bc74b63f68 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bc74b63f30 <col:80> 'int' lvalue ParmVar 0x55bc74b4c1d0 'i' 'int'
|-CXXMethodDecl 0x55bc74b4c4b8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55bc74b4c360 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bc74b4c3e0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55bc74b648a0 <col:45, line:635:5>
|   |-ParenExpr 0x55bc74b645e8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55bc74b645b8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55bc74b64280 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bc74b64250 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bc74b640f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bc74b640d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bc74b64098 <col:23> 'int' lvalue ParmVar 0x55bc74b4c360 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bc74b640b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bc74b64230 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55bc74b64218 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bc74b64110 <col:33> 'int' lvalue ParmVar 0x55bc74b4c360 'i' 'int'
|   |   |     `-BinaryOperator 0x55bc74b641f8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bc74b641e0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bc74b64130 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bc74b48680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55bc74b641b8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55bc74b641a0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55bc74b64168 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55bc74b642e0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bc74b642c0 <col:79> 'int' 0
|   |   `-CallExpr 0x55bc74b64518 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55bc74b64500 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bc74b644e0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bc746b4ae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bc74b64558 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b64350 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55bc74b64570 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bc74b64398 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bc74b64588 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bc74b643d0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55bc74b645a0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bc74b644c8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bc74b644b0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bc74b64468 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55bc74b64880 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55bc74b647e8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bc74b647b8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55bc74b64758 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bc74b64728 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bc74b646d8 <col:54, col:63> 'char [48]' lvalue ->c 0x55bc74b53690
|     |     |   `-CXXMemberCallExpr 0x55bc74b646b8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bc74b64688 <col:54> '<bound member function type>' ->xanno 0x55bc74b48438
|     |     |       `-CXXThisExpr 0x55bc74b64678 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bc74b64740 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bc74b64708 <col:67> 'int' lvalue ParmVar 0x55bc74b4c360 'i' 'int'
|     `-CXXConstCastExpr 0x55bc74b64850 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55bc74b64838 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55bc74b64800 <col:91> 'const void *' lvalue ParmVar 0x55bc74b4c3e0 'x' 'const void *'
|-CXXMethodDecl 0x55bc74b4c588 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55bc74b64928 <col:34, line:640:5>
|   `-ReturnStmt 0x55bc74b64918 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55bc74b64900 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55bc74b648d0 <col:16> 'Packet *' lvalue ->_data_packet 0x55bc74b54248
|         `-CXXThisExpr 0x55bc74b648c0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55bc74b4c6c8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55bc74b4c638 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bc74b5d9e8 <col:46> 'bool' true
|-CXXMethodDecl 0x55bc74b4c848 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55bc74b4c780 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55bc74b4c8f0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55bc74b4d0a0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55bc74b4c9f0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d110 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4c9d0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55bc74b4c9b0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55bc74b41b50 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55bc74b4ca80 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d128 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4ca60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55bc74b4ca40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55bc74b41be0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55bc74b4cb10 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d140 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4caf0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55bc74b4cad0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55bc74b4cba0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d158 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4cb80 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55bc74b4cb60 <col:19> 'int' 16
| |-EnumConstantDecl 0x55bc74b4cc30 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d170 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4cc10 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55bc74b4cbf0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55bc74b4ccc0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d188 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4cca0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55bc74b4cc80 <col:19> 'int' 32
| |-EnumConstantDecl 0x55bc74b4cd50 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d1a0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4cd30 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55bc74b4cd10 <col:19> 'int' EnumConstant 0x55bc74b4cba0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55bc74b4cde0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d1b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4cdc0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55bc74b4cda0 <col:19> 'int' EnumConstant 0x55bc74b4ccc0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55bc74b4ceb0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d1d0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4ce90 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55bc74b4ce70 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55bc74b4ce30 <col:23> 'int' EnumConstant 0x55bc74b4cde0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55bc74b4ce50 <col:40> 'int' 2
| |-EnumConstantDecl 0x55bc74b4cf80 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bc74b4d1e8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bc74b4cf60 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55bc74b4cf40 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55bc74b4cf00 <col:23> 'int' EnumConstant 0x55bc74b4cde0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55bc74b4cf20 <col:40> 'int' 4
| `-EnumConstantDecl 0x55bc74b4d050 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55bc74b4d200 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bc74b4d030 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55bc74b4d010 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55bc74b4cfd0 <col:23> 'int' EnumConstant 0x55bc74b4cde0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55bc74b4cff0 <col:40> 'int' 8
|-CXXMethodDecl 0x55bc74b4d240 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55bc74b4d2e0 <col:68> "" ""
|-CXXMethodDecl 0x55bc74b4d378 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55bc74b4d418 <col:45> "" ""
|-CXXMethodDecl 0x55bc74b4d4b0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55bc74b4d550 <col:57> "" ""
|-CXXMethodDecl 0x55bc74b4d5e8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55bc74b4d688 <col:45> "" ""
|-CXXMethodDecl 0x55bc74b4d720 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55bc74b4d7c0 <col:57> "" ""
|-CXXMethodDecl 0x55bc74b4d850 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55bc74b4d8f0 <col:51> "" ""
|-CXXMethodDecl 0x55bc74b4d980 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55bc74b4da20 <col:63> "" ""
|-CXXMethodDecl 0x55bc74b4dab0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55bc74b4db50 <col:53> "" ""
|-CXXMethodDecl 0x55bc74b4dbe0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55bc74b4dc80 <col:65> "" ""
|-CXXMethodDecl 0x55bc74b4dd98 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55bc74b4dd08 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55bc74b4de40 <col:61> "" ""
|-CXXMethodDecl 0x55bc74b4dfd8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55bc74b4dec8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55bc74b4df40 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55bc74b4e088 <col:67> "" ""
|-CXXMethodDecl 0x55bc74b4e1a0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55bc74b4e110 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55bc74b4e248 <col:63> "" ""
|-CXXMethodDecl 0x55bc74b4e3e0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55bc74b4e2d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bc74b4e348 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55bc74b4e490 <col:69> "" ""
|-CXXMethodDecl 0x55bc74b4e5a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55bc74b4e518 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55bc74b4e650 <col:63> "" ""
|-CXXMethodDecl 0x55bc74b51268 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55bc74b51158 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bc74b511d0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bc74b51318 <col:69> "" ""
|-CXXMethodDecl 0x55bc74b51430 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55bc74b513a0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55bc74b514d8 <col:62> "" ""
|-CXXMethodDecl 0x55bc74b51670 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55bc74b51560 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bc74b515d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55bc74b51720 <col:68> "" ""
|-CXXMethodDecl 0x55bc74b51838 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55bc74b517a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55bc74b518e0 <col:63> "" ""
|-CXXMethodDecl 0x55bc74b51a78 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55bc74b51968 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bc74b519e0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55bc74b51b28 <col:69> "" ""
|-CXXMethodDecl 0x55bc74b51bb8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55bc74b51c58 <col:64> "" ""
|-CXXMethodDecl 0x55bc74b51ce8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55bc74b51d88 <col:52> "" ""
|-CXXMethodDecl 0x55bc74b51e18 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55bc74b51eb8 <col:67> "" ""
|-CXXMethodDecl 0x55bc74b51f48 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55bc74b51fe8 <col:55> "" ""
|-CXXMethodDecl 0x55bc74b52100 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55bc74b52070 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55bc74b521a8 <col:58> "" ""
|-CXXMethodDecl 0x55bc74b52340 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55bc74b52230 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bc74b522a8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55bc74b523f0 <col:62> "" ""
|-CXXMethodDecl 0x55bc74b52508 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55bc74b52478 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55bc74b525b0 <col:58> "" ""
|-CXXMethodDecl 0x55bc74b52748 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55bc74b52638 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bc74b526b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55bc74b527f8 <col:62> "" ""
|-CXXMethodDecl 0x55bc74b52910 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55bc74b52880 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55bc74b529b8 <col:60> "" ""
|-CXXMethodDecl 0x55bc74b52b50 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55bc74b52a40 <col:34> col:37 'int'
| |-ParmVarDecl 0x55bc74b52ab8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55bc74b52c00 <col:64> "" ""
|-CXXMethodDecl 0x55bc74b52d18 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55bc74b52c88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55bc74b52dc0 <col:58> "" ""
|-CXXMethodDecl 0x55bc74b52f58 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55bc74b52e48 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bc74b52ec0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55bc74b53008 <col:62> "" ""
|-CXXMethodDecl 0x55bc74b53120 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55bc74b53090 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55bc74b531c8 <col:59> "" ""
|-CXXMethodDecl 0x55bc74b53360 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55bc74b53250 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bc74b532c8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bc74b53410 <col:63> "" ""
|-AccessSpecDecl 0x55bc74b53480 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55bc74b534a8 prev 0x55bc74b48170 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bc74b535a0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55bc74b53690 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55bc74b537b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55bc74b53938 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55bc74b53ab8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55bc74b53c38 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55bc74b64aa8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55bc74b65318 <col:11>
| |-CXXDestructorDecl 0x55bc74b64b80 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55bc74b64cb8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55bc74b64cb8
| | `-ParmVarDecl 0x55bc74b64dc8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55bc74b64e68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bc74b64e68
| | `-ParmVarDecl 0x55bc74b64f78 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55bc74b6a748 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bc74b6a858 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55bc74b6aad8 <col:11>
| |   `-ReturnStmt 0x55bc74b6aac8 <col:11>
| |     `-UnaryOperator 0x55bc74b6aab0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55bc74b6aaa0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55bc74b6a8c8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bc74b6a8c8
|   `-ParmVarDecl 0x55bc74b6a9d8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55bc74b53ca0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bc74b53db8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55bc74b53e58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55bc74b53ec0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55bc74b53f28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55bc74b53f90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55bc74b53ff0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55bc74b540b0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55bc74b54110 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55bc74b54170 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55bc74b649b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55bc74b53e58 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55bc74b65328 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55bc74b65380 <col:12>
| |-CXXConstructorDecl 0x55bc74b64fe8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55bc74b64fe8
| | `-ParmVarDecl 0x55bc74b650f8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55bc74b65198 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55bc74b65198
| | `-ParmVarDecl 0x55bc74b652a8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55bc74b69e30 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55bc74b541e8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55bc74b54248 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55bc74b542b0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55bc74b54318 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55bc74b54380 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55bc74b543e8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55bc74b54448 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55bc74b544a8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55bc74b54510 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55bc74b54598 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55bc74b541e8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55bc74b64950 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55bc74b54448 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55bc74b65390 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55bc74b653f0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55bc74b54738 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55bc74b54678 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55bc74b54830 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55bc74b54a18 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55bc74b54920 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55bc74b54ce8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55bc74b54ad0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bc74b54b48 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bc74b54bc0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74b54f08 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55bc74b54db8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55bc74b54e30 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55bc74b5d528 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55bc74b54fc8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55bc74b55040 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55bc74b550b8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55bc74b5d680 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55bc74b5d5f0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74b5d7c8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55bc74b5d738 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55bc74b5d8c0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74b67ea0 prev 0x55bc74b417d0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55bc74b67fd8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55bc74b68068 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55bc74b68110 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55bc74b681b0 <col:20>
| `-OptimizeNoneAttr 0x55bc74b68208 <col:30>
|-CXXMethodDecl 0x55bc74b68258 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55bc74b682f8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b68350 <col:30>
|-CXXMethodDecl 0x55bc74b683a0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bc74b68468 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bc74b68530 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bc74b68648 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55bc74b68710 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55bc74b687b0 <col:20>
| `-OptimizeNoneAttr 0x55bc74b68808 <col:30>
|-CXXMethodDecl 0x55bc74b68878 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55bc74b68918 <col:20>
| `-OptimizeNoneAttr 0x55bc74b68970 <col:30>
|-CXXMethodDecl 0x55bc74b68a18 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55bc74b68ab8 <col:20>
| `-OptimizeNoneAttr 0x55bc74b68b10 <col:30>
|-CXXMethodDecl 0x55bc74b68b60 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bc74b68c78 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55bc74b68d98 <line:791:5, col:36> col:23 used tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55bc74b68eb8 <line:792:5, col:36> col:23 used udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55bc74b68f80 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55bc74b69020 <col:62> "" ""
|-AccessSpecDecl 0x55bc74b69090 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55bc74b690f0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55bc74b69ce8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55bc74b69f10 <col:29, col:31>
|-CXXMethodDecl 0x55bc74b691b8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55bc74b692f8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55bc74b69268 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55bc74b693f0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55bc74b69f20 <col:23, col:25>
|-CXXMethodDecl 0x55bc74b695a8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55bc74b694e0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55bc74b69878 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55bc74b69660 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bc74b696d8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bc74b69750 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bc74b69a08 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55bc74b69940 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55bc74b69b00 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55bc74b69b68 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55bc74b69b68
  `-ParmVarDecl 0x55bc74b69c78 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc748af258 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bc748af378 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55bc748af440 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55bc7497fa10 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bc74984d28 <col:8>
|-CXXConstructorDecl 0x55bc7497fb18 <col:8> col:8 implicit used constexpr in_addr 'void (const in_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bc7497fc28 <col:8> col:8 used 'const in_addr &'
| |-CXXCtorInitializer Field 0x55bc748af440 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bc74c4dfa0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bc74c4df70 <col:8> 'const in_addr_t':'const unsigned int' lvalue .s_addr 0x55bc748af440
| |     `-DeclRefExpr 0x55bc74c4df50 <col:8> 'const in_addr' lvalue ParmVar 0x55bc7497fc28 '' 'const in_addr &'
| `-CompoundStmt 0x55bc74c4dfe8 <col:8>
|-CXXConstructorDecl 0x55bc7497fcc8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bc7497fdd8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55bc748af440 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bc74984f40 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bc74984f10 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55bc748af440
| |     `-CXXStaticCastExpr 0x55bc74984ee0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55bc74984eb0 <col:8> 'in_addr' lvalue ParmVar 0x55bc7497fdd8 '' 'in_addr &&'
| `-CompoundStmt 0x55bc74984f88 <col:8>
|-CXXDestructorDecl 0x55bc749851c0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bc74c4e110 <col:8> col:8 implicit used constexpr operator= 'in_addr &(const in_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bc74c4e218 <col:8> col:8 used 'const in_addr &'
| `-CompoundStmt 0x55bc74c4e570 <col:8>
|   |-BinaryOperator 0x55bc74c4e518 <col:8> 'in_addr_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x55bc74c4e4d0 <col:8> 'in_addr_t':'unsigned int' lvalue ->s_addr 0x55bc748af440
|   | | `-CXXThisExpr 0x55bc74c4e4c0 <col:8> 'in_addr *' this
|   | `-ImplicitCastExpr 0x55bc74c4e500 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
|   |   `-MemberExpr 0x55bc74c4e490 <col:8> 'const in_addr_t':'const unsigned int' lvalue .s_addr 0x55bc748af440
|   |     `-DeclRefExpr 0x55bc74c4e470 <col:8> 'const in_addr' lvalue ParmVar 0x55bc74c4e218 '' 'const in_addr &'
|   `-ReturnStmt 0x55bc74c4e560 <col:8>
|     `-UnaryOperator 0x55bc74c4e548 <col:8> 'in_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bc74c4e538 <col:8> 'in_addr *' this
`-CXXMethodDecl 0x55bc74c4e288 <col:8> col:8 implicit constexpr operator= 'in_addr &(in_addr &&)' inline default trivial noexcept-unevaluated 0x55bc74c4e288
  `-ParmVarDecl 0x55bc74c4e398 <col:8> col:8 'in_addr &&'

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc749776f8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bc74977818 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55bc74977900 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55bc749778e0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55bc749778a8 <col:22> 'int' 4
|-FieldDecl 0x55bc749779a8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55bc74977988 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55bc74977950 <col:21> 'int' 4
|-FieldDecl 0x55bc74977a08 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55bc74977a68 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55bc74977ac8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55bc74977b28 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55bc74977b88 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55bc74977be8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55bc74977c48 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55bc74977cb8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55bc74977d28 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc7497a640 prev 0x55bc748e0688 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bc7497a738 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55bc7497a7c8 <col:19, col:25> col:19 public
|-TypedefDecl 0x55bc7497a800 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55bc7476dd40 'uninitialized_type'
|   `-CXXRecord 0x55bc7476dca8 'uninitialized_type'
|-CXXConstructorDecl 0x55bc7497a8c0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55bc7497f020 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bc7497f0c8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bc7497f088 <col:10> 'int' 0
| `-CompoundStmt 0x55bc7497f110 <col:13, line:22:5>
|-CXXConstructorDecl 0x55bc7497aa10 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55bc7497a980 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55bc7497f020 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bc7497f160 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55bc7497f120 <col:10> 'unsigned int' lvalue ParmVar 0x55bc7497a980 'x' 'unsigned int'
| `-CompoundStmt 0x55bc7497f1a8 <col:13, line:27:5>
|-CXXConstructorDecl 0x55bc7497ab68 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55bc7497aad8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55bc7497f020 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bc7497f210 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55bc7497f1f8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55bc7497f1b8 <col:10> 'int' lvalue ParmVar 0x55bc7497aad8 'x' 'int'
| `-CompoundStmt 0x55bc7497f258 <col:13, line:31:5>
|-CXXConstructorDecl 0x55bc7497acc0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55bc7497ac30 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55bc7497f020 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bc7497f2c0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55bc7497f2a8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55bc7497f268 <col:10> 'unsigned long' lvalue ParmVar 0x55bc7497ac30 'x' 'unsigned long'
| `-CompoundStmt 0x55bc7497f308 <col:13, line:35:5>
|-CXXConstructorDecl 0x55bc7497ae18 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55bc7497ad88 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55bc7497f020 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bc7497f370 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55bc7497f358 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55bc7497f318 <col:10> 'long' lvalue ParmVar 0x55bc7497ad88 'x' 'long'
| `-CompoundStmt 0x55bc7497f3b8 <col:13, line:39:5>
|-CXXConstructorDecl 0x55bc7497afd8 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55bc7497aee8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55bc7497f020 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bc7497f438 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bc7497f3e8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55bc748af440
| |     `-DeclRefExpr 0x55bc7497f3c8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55bc7497aee8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55bc7497f480 <col:20, line:44:5>
|-CXXConstructorDecl 0x55bc7497b168 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55bc7497b0a0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55bc7497f5e8 <col:51, line:56:5>
|   `-BinaryOperator 0x55bc7497f5c8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55bc7497f4a0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55bc7497f020
|     | `-CXXThisExpr 0x55bc7497f490 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55bc7497f5b0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55bc7497f598 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55bc7497f578 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55bc7497f548 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55bc7497f530 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55bc7497f4d0 <col:47> 'const unsigned char *' lvalue ParmVar 0x55bc7497b0a0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55bc7497b2b8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55bc7497b228 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55bc7497b468 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55bc7497b3a8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55bc7497f658 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55bc7497f630 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55bc7497f600 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55bc7497b3a8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55bc7497b5f8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55bc7497b530 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55bc7497b6e8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55bc74980618 <col:46, line:83:5>
|   `-ReturnStmt 0x55bc74980608 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55bc749805f0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55bc749805c0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bc74980478 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55bc74980360 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55bc74980248 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55bc7497f680 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55bc7497b7d8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55bc749806c8 <col:31, line:88:5>
|   `-ReturnStmt 0x55bc749806b8 <line:87:2, col:10>
|     `-UnaryOperator 0x55bc749806a0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55bc74980688 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55bc74980670 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55bc74980640 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bc7497f020
|             `-CXXThisExpr 0x55bc74980630 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55bc7497b898 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55bc74980748 <col:34, line:93:5>
|   `-ReturnStmt 0x55bc74980738 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55bc74980720 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55bc749806f0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bc7497f020
|         `-CXXThisExpr 0x55bc749806e0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55bc7497b968 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55bc749807c8 <col:38, line:101:5>
|   `-ReturnStmt 0x55bc749807b8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55bc749807a0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55bc74980770 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bc7497f020
|         `-CXXThisExpr 0x55bc74980760 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55bc7497ba38 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55bc74980a98 <col:38, line:108:5>
|   `-ReturnStmt 0x55bc74980a88 <line:107:2, col:58>
|     `-BinaryOperator 0x55bc74980a68 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55bc74980980 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55bc74980960 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55bc74980948 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55bc749807f0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bc7497f020
|       |   |   `-CXXThisExpr 0x55bc749807e0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55bc74980920 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55bc74980908 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55bc74980888 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bc748bd978 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55bc74980868 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55bc74980a40 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55bc74980a28 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55bc74980a08 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bc748bd978 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55bc749809e8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55bc7497baf8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55bc74980d08 <col:39, line:112:5>
|   `-ReturnStmt 0x55bc74980cf8 <line:111:2, col:56>
|     `-BinaryOperator 0x55bc74980cd8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55bc74980bf0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55bc74980bd0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55bc74980bb8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55bc74980ac0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bc7497f020
|       |   |   `-CXXThisExpr 0x55bc74980ab0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55bc74980b90 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55bc74980b78 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55bc74980b58 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bc748bd978 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55bc74980b38 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55bc74980cb0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55bc74980c98 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55bc74980c78 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bc748bd978 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55bc74980c58 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55bc7497bc28 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55bc7497bd30 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55bc7497be40 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55bc7497df18 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bc7497dfd8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55bc7497e0a0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55bc7497e298 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55bc7497e150 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55bc7497e1c8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55bc7497e418 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55bc7497e358 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55bc7497e560 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55bc7497e4d0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55bc7497e708 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55bc7497e618 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55bc7497e850 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55bc7497e7c0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55bc7497e998 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55bc7497e908 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55bc7497ea60 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55bc7497eb20 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55bc7497ec98 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55bc7497ebd0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55bc7497ed60 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55bc7497ee48 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55bc7497eef0 <col:51> "" ""
|-TypedefDecl 0x55bc7497ef90 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55bc748e0720 'IPAddress'
|   `-CXXRecord 0x55bc7497a640 'IPAddress'
|-AccessSpecDecl 0x55bc7497efe8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55bc7497f020 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55bc7497f6c8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55bc7497f6c8
| `-ParmVarDecl 0x55bc7497f7d8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55bc7497f878 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bc7497f988 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55bc7497f020 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bc74980568 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bc74980520 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55bc7497f020
| |     `-CXXStaticCastExpr 0x55bc749804f0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55bc749804c0 <col:7> 'IPAddress' lvalue ParmVar 0x55bc7497f988 '' 'IPAddress &&'
| `-CompoundStmt 0x55bc749805b0 <col:7>
`-CXXDestructorDecl 0x55bc74980278 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74c49d38 prev 0x55bc74b41670 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bc74c49e30 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x55bc74c49ed0 <line:12:5, col:14> col:14 referenced uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bc74c49f30 <line:13:5, col:14> col:14 referenced uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bc74c49f90 <line:14:5, col:14> col:14 uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x55bc74c49ff0 <line:15:5, col:14> col:14 uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74c4a0c0 prev 0x55bc74b415c0 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bc74c4a1b8 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x55bc74c4a258 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bc74c4a2b8 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bc74c4a340 <line:27:5, col:15> col:15 referenced th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55bc74c4a3a0 <line:28:5, col:15> col:15 referenced th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55bc74c4a448 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x55bc74c4a428 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x55bc74c4a3f0 <col:26> 'int' 4
|-FieldDecl 0x55bc74c4a4f0 <line:31:5, col:23> col:14 th_off 'unsigned int'
| `-ConstantExpr 0x55bc74c4a4d0 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x55bc74c4a498 <col:23> 'int' 4
|-FieldDecl 0x55bc74c4a550 <line:39:5, col:13> col:13 th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x55bc74c4a5b0 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x55bc74c4a610 <line:49:5, col:14> col:14 th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x55bc74c4a670 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bc74c42210 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bc74c42328 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55bc74c423b8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55bc74c425f8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55bc74c423f0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55bc74c42470 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55bc74c424e8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55bc74c42810 <col:81> 'const ArgContext' lvalue Var 0x55bc74c2a4c8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55bc74c42750 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55bc74c426c0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55bc74c42968 <col:35, line:1261:5>
|   `-ReturnStmt 0x55bc74c42958 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55bc74c42940 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55bc74c42910 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55bc74c428f8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55bc74c428d0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55bc74c428b0 <col:16, col:24> 'String' (CXXTemporary 0x55bc74c428b0)
|               `-CXXConstructExpr 0x55bc74c42878 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55bc74c42860 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55bc74c42840 <col:23> 'bool' lvalue ParmVar 0x55bc74c426c0 'x' 'bool'
|-CXXConstructorDecl 0x55bc74c8a038 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55bc74c8a110 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bc74c8a248 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55bc74c8a248
| `-ParmVarDecl 0x55bc74c8a358 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55bc74c8a3f8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55bc74c8a508 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55bc74c8b160 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bc74c429a8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55bc74c42c08 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55bc74c89f48 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bc74c8a578 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55bc74c8a578
| `-ParmVarDecl 0x55bc74c8a688 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55bc74c8a728 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bc74c8a838 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55bc74c8b170 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55bc74c8b140 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55bc74c8b110 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55bc74c8b0e0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55bc74c8a838 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55bc74c8b1e0 <col:19>
`-CXXDestructorDecl 0x55bc74c8a8d8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
