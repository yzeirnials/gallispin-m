
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55861439d4a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55861439d5b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55861439d658 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55861439d6b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55861439d718 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55861439d7c8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55861439dad0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55861439dbe8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55861439dc90 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55861439dcf8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55861439dd88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5586143a3e20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5586143a4258 <col:12>
|-CXXConstructorDecl 0x5586143a3f28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5586143a4038 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55861439dc90 'data' 'const char *'
| | `-ImplicitCastExpr 0x5586143a67e0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5586143a67b0 <col:12> 'const char *const' lvalue .data 0x55861439dc90
| |     `-DeclRefExpr 0x5586143a6790 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143a4038 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55861439dcf8 'length' 'int'
| | `-ImplicitCastExpr 0x5586143a6870 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5586143a6840 <col:12> 'const int' lvalue .length 0x55861439dcf8
| |     `-DeclRefExpr 0x5586143a6820 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143a4038 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55861439dd88 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5586143a6900 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5586143a68d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55861439dd88
| |     `-DeclRefExpr 0x5586143a68b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143a4038 '' 'const String::rep_t &'
| `-CompoundStmt 0x5586143a6958 <col:12>
|-CXXConstructorDecl 0x5586143a40d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586143a40d8
| `-ParmVarDecl 0x5586143a41e8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5586143a9740 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5586143b5158 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5586143b5268 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5586143b5780 <col:12>
|   |-BinaryOperator 0x5586143b5598 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5586143b5550 <col:12> 'const char *' lvalue ->data 0x55861439dc90
|   | | `-CXXThisExpr 0x5586143b5540 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5586143b5580 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5586143b5510 <col:12> 'const char *const' lvalue .data 0x55861439dc90
|   |     `-DeclRefExpr 0x5586143b54f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143b5268 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5586143b5660 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5586143b5618 <col:12> 'int' lvalue ->length 0x55861439dcf8
|   | | `-CXXThisExpr 0x5586143b5608 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5586143b5648 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5586143b55d8 <col:12> 'const int' lvalue .length 0x55861439dcf8
|   |     `-DeclRefExpr 0x5586143b55b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143b5268 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5586143b5728 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5586143b56e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55861439dd88
|   | | `-CXXThisExpr 0x5586143b56d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5586143b5710 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5586143b56a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55861439dd88
|   |     `-DeclRefExpr 0x5586143b5680 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143b5268 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5586143b5770 <col:12>
|     `-UnaryOperator 0x5586143b5758 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586143b5748 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5586143b52d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586143b52d8
  `-ParmVarDecl 0x5586143b53e8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558614394a10 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558614394b28 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x558614394bb8 <col:16, col:22> col:16 public
|-TypedefDecl 0x558614394bf8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x558614068fd0 'const char *'
|   `-QualType 0x558614068521 'const char' const
|     `-BuiltinType 0x558614068520 'char'
|-TypedefDecl 0x558614394c80 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x558614394c50 'String::const_iterator' sugar
|   |-Typedef 0x558614394bf8 'const_iterator'
|   `-PointerType 0x558614068fd0 'const char *'
|     `-QualType 0x558614068521 'const char' const
|       `-BuiltinType 0x558614068520 'char'
|-TypedefDecl 0x558614394df0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x558614394d60 'int (String::*)() const'
|   |-RecordType 0x558614394aa0 'String'
|   | `-CXXRecord 0x558614394a10 'String'
|   `-ParenType 0x558614394d00 'int () const' sugar
|     `-FunctionProtoType 0x5586143698a0 'int () const' const cdecl
|       `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x558614394e58 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5586141be4a0 'int64_t' sugar
|   |-Typedef 0x5586140d1390 'int64_t'
|   `-TypedefType 0x5586140aa630 '__int64_t' sugar
|     |-Typedef 0x5586140aa208 '__int64_t'
|     `-BuiltinType 0x5586140685a0 'long'
|-TypedefDecl 0x558614394ec0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5586141be3c0 'uint64_t' sugar
|   |-Typedef 0x5586140d1530 'uint64_t'
|   `-TypedefType 0x5586140aa6c0 '__uint64_t' sugar
|     |-Typedef 0x5586140aa278 '__uint64_t'
|     `-BuiltinType 0x558614068640 'unsigned long'
|-TypedefDecl 0x558614394f50 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x558614394f20 'String::intmax_t' sugar
|   |-Typedef 0x558614394e58 'intmax_t'
|   `-TypedefType 0x5586141be4a0 'int64_t' sugar
|     |-Typedef 0x5586140d1390 'int64_t'
|     `-TypedefType 0x5586140aa630 '__int64_t' sugar
|       |-Typedef 0x5586140aa208 '__int64_t'
|       `-BuiltinType 0x5586140685a0 'long'
|-TypedefDecl 0x558614394fe0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x558614394fb0 'String::uintmax_t' sugar
|   |-Typedef 0x558614394ec0 'uintmax_t'
|   `-TypedefType 0x5586141be3c0 'uint64_t' sugar
|     |-Typedef 0x5586140d1530 'uint64_t'
|     `-TypedefType 0x5586140aa6c0 '__uint64_t' sugar
|       |-Typedef 0x5586140aa278 '__uint64_t'
|       `-BuiltinType 0x558614068640 'unsigned long'
|-CXXConstructorDecl 0x5586143950a0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x558614395248 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x558614395188 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5586143953f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x558614395338 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x558614395550 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5586143954c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x558614395768 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x558614395618 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x558614395698 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x558614395988 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x558614395838 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5586143958b8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x558614395ba8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558614395a58 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x558614395ad8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x558614395dc8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x558614395c78 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x558614395cf8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x558614395f58 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x558614395e90 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5586143960d8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x558614396018 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x558614396268 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5586143961a0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5586143963c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x558614396330 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x558614396518 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x558614396488 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x558614396670 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5586143965e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5586143967f8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x558614396738 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x558614396988 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5586143968c0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x558614396b18 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x558614396a50 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x558614396ca8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x558614396be0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x558614396da0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x558614396ec8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x558614397048 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x558614396f80 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x558614397198 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x558614397108 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x558614397250 <col:63> "" ""
|-CXXMethodDecl 0x558614397398 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5586143972d8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5586143975a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x558614397458 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5586143974d8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5586143977c8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x558614397670 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5586143976f0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x558614397aa8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x558614397888 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x558614397908 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5586143a38f0 <col:55> 'int' 10
| `-ParmVarDecl 0x558614397980 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586143a3910 <col:76> 'bool' true
|-CXXMethodDecl 0x558614397d88 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x558614397b70 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x558614397bf0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5586143a3920 <col:56> 'int' 10
| `-ParmVarDecl 0x558614397c68 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586143a3940 <col:77> 'bool' true
|-CXXMethodDecl 0x558614397e90 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x558614397f58 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x558614398020 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5586143980c0 <col:20>
| `-OptimizeNoneAttr 0x558614398118 <col:30>
|-CXXConversionDecl 0x558614398208 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5586143982d8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x558614398398 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x558614398488 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558614398548 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5586143986c8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x558614398600 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x558614398818 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x558614398788 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x558614398908 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5586143989c8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x558614398c18 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x558614398a80 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x558614398b00 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x558614398e78 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x558614398ce0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x558614398d60 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x558614398f48 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x558614399158 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x558614399000 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x558614399080 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x558614399378 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x558614399220 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5586143992a0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x558614399508 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x558614399440 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5586143995f8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x558614399768 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5586143996a8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558614399978 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x558614399828 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5586143998a8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558614399b90 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x558614399a38 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x558614399ab0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x558614399d20 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x558614399c50 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558614399f40 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x558614399de0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x558614399e60 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55861439a090 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55861439a000 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55861439a268 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55861439a150 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55861439a1d0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55861439a3b8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55861439a328 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55861439a5d0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55861439a470 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55861439a4f0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5586143a3950 <col:39> 'int' 0
|-CXXMethodDecl 0x55861439a7f0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55861439a690 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55861439a710 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5586143a3970 <col:48> 'int' 0
|-CXXMethodDecl 0x55861439a9d0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55861439a8b0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55861439a930 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5586143a3990 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55861439aaa0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55861439ab60 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55861439ac20 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55861439ace0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55861439ada0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55861439af48 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55861439ae50 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55861439b0c8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55861439b000 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55861439b2a0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55861439b188 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55861439b418 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55861439b358 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55861439b560 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55861439b4d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55861439b6b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55861439b620 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55861439b888 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55861439b770 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55861439b7f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55861439ba68 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55861439b950 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55861439b9d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55861439bbb8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55861439bb28 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55861439bdc8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55861439bc78 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55861439bcf8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55861439bf28 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55861439be90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55861439c080 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55861439bfe8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55861439c128 <col:57> "" ""
|-CXXMethodDecl 0x55861439c238 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55861439c1a8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55861439c388 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55861439c2f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55861439c508 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55861439c440 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55861439c5d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55861439c690 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55861439c750 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55861439c7f0 <col:49> "" ""
|-CXXMethodDecl 0x55861439c880 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55861439c940 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55861439ca30 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55861439caf8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55861439cbb8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55861439cc78 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55861439cd70 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55861439ce38 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55861439cf00 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55861439d0d8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55861439cfb8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55861439d038 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55861439d300 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55861439d1a0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55861439d220 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55861439d410 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55861439d478 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55861439d4a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55861439d5b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55861439d658 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55861439d6b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55861439d718 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55861439d7c8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55861439d830 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55861439da68 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55861439dab8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55861439da48 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55861439d958 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55861439d900 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55861439d940 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55861439d920 <col:32> 'int' 8
|-CXXRecordDecl 0x55861439dad0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55861439dbe8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55861439dc90 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55861439dcf8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55861439dd88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5586143a3e20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5586143a4258 <col:12>
| |-CXXConstructorDecl 0x5586143a3f28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5586143a4038 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55861439dc90 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5586143a67e0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5586143a67b0 <col:12> 'const char *const' lvalue .data 0x55861439dc90
| | |     `-DeclRefExpr 0x5586143a6790 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143a4038 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55861439dcf8 'length' 'int'
| | | `-ImplicitCastExpr 0x5586143a6870 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5586143a6840 <col:12> 'const int' lvalue .length 0x55861439dcf8
| | |     `-DeclRefExpr 0x5586143a6820 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143a4038 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55861439dd88 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5586143a6900 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5586143a68d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55861439dd88
| | |     `-DeclRefExpr 0x5586143a68b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143a4038 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5586143a6958 <col:12>
| |-CXXConstructorDecl 0x5586143a40d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586143a40d8
| | `-ParmVarDecl 0x5586143a41e8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5586143a9740 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5586143b5158 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5586143b5268 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5586143b5780 <col:12>
| |   |-BinaryOperator 0x5586143b5598 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5586143b5550 <col:12> 'const char *' lvalue ->data 0x55861439dc90
| |   | | `-CXXThisExpr 0x5586143b5540 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5586143b5580 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5586143b5510 <col:12> 'const char *const' lvalue .data 0x55861439dc90
| |   |     `-DeclRefExpr 0x5586143b54f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143b5268 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5586143b5660 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5586143b5618 <col:12> 'int' lvalue ->length 0x55861439dcf8
| |   | | `-CXXThisExpr 0x5586143b5608 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5586143b5648 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5586143b55d8 <col:12> 'const int' lvalue .length 0x55861439dcf8
| |   |     `-DeclRefExpr 0x5586143b55b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143b5268 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5586143b5728 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5586143b56e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55861439dd88
| |   | | `-CXXThisExpr 0x5586143b56d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5586143b5710 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5586143b56a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55861439dd88
| |   |     `-DeclRefExpr 0x5586143b5680 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586143b5268 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5586143b5770 <col:12>
| |     `-UnaryOperator 0x5586143b5758 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5586143b5748 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5586143b52d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586143b52d8
|   `-ParmVarDecl 0x5586143b53e8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55861439de00 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55861439e048 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55861439de68 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55861439dee8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55861439df60 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5586143a3de0 <col:79, line:261:5>
|   |-BinaryOperator 0x5586143a3a58 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5586143a39f0 <col:2, col:5> 'const char *' lvalue .data 0x55861439dc90
|   | | `-MemberExpr 0x5586143a39c0 <col:2> 'String::rep_t' lvalue ->_r 0x55861439de00
|   | |   `-CXXThisExpr 0x5586143a39b0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5586143a3a40 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5586143a3a20 <col:12> 'const char *' lvalue ParmVar 0x55861439de68 'data' 'const char *'
|   |-BinaryOperator 0x5586143a3b20 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5586143a3ab8 <col:2, col:5> 'int' lvalue .length 0x55861439dcf8
|   | | `-MemberExpr 0x5586143a3a88 <col:2> 'String::rep_t' lvalue ->_r 0x55861439de00
|   | |   `-CXXThisExpr 0x5586143a3a78 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5586143a3b08 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5586143a3ae8 <col:14> 'int' lvalue ParmVar 0x55861439dee8 'length' 'int'
|   `-IfStmt 0x5586143a3dc8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5586143a3c40 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5586143a3c28 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5586143a3c08 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5586143a3be8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5586143a3b80 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55861439dd88
|     |       | `-MemberExpr 0x5586143a3b50 <col:7> 'String::rep_t' lvalue ->_r 0x55861439de00
|     |       |   `-CXXThisExpr 0x5586143a3b40 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5586143a3bd0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5586143a3bb0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55861439df60 'memo' 'String::memo_t *'
|     `-CallExpr 0x5586143a3da0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5586143a3d88 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5586143a3c90 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55861438ca78 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5586143a3cf8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55861439d658
|         `-ImplicitCastExpr 0x5586143a3ce0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5586143a3cc0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55861439df60 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55861439e2f8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55861439e118 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55861439e198 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55861439e210 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55861439de00 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5586143a4268 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5586143a43f8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5586143a4360 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5586143a42d0 <col:2> '<bound member function type>' ->assign_memo 0x55861439e048
|     | `-ImplicitCastExpr 0x5586143a4398 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5586143a42c0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5586143a43b0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5586143a4300 <col:14> 'const char *' lvalue ParmVar 0x55861439e118 'data' 'const char *'
|     |-ImplicitCastExpr 0x5586143a43c8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5586143a4320 <col:20> 'int' lvalue ParmVar 0x55861439e198 'length' 'int'
|     `-ImplicitCastExpr 0x5586143a43e0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5586143a4340 <col:28> 'String::memo_t *' lvalue ParmVar 0x55861439e210 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55861439e488 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55861439e3c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5586143a4650 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5586143a45d0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5586143a4420 <col:2> '<bound member function type>' ->assign_memo 0x55861439e048
|     | `-CXXThisExpr 0x5586143a4410 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5586143a4608 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5586143a44a0 <col:14, col:19> 'const char *' lvalue .data 0x55861439dc90
|     |   `-MemberExpr 0x5586143a4470 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55861439de00
|     |     `-DeclRefExpr 0x5586143a4450 <col:14> 'const String' lvalue ParmVar 0x55861439e3c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5586143a4620 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5586143a4520 <col:25, col:30> 'int' lvalue .length 0x55861439dcf8
|     |   `-MemberExpr 0x5586143a44f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55861439de00
|     |     `-DeclRefExpr 0x5586143a44d0 <col:25> 'const String' lvalue ParmVar 0x55861439e3c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5586143a4638 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5586143a45a0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55861439dd88
|         `-MemberExpr 0x5586143a4570 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55861439de00
|           `-DeclRefExpr 0x5586143a4550 <col:38> 'const String' lvalue ParmVar 0x55861439e3c8 'x' 'const String &'
|-CXXMethodDecl 0x55861439e550 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5586143a5010 <col:31, line:278:5>
|   `-IfStmt 0x5586143a4ff8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5586143a46f0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5586143a46d8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5586143a46a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55861439dd88
|     |     `-MemberExpr 0x5586143a4678 <col:6> 'String::rep_t' lvalue ->_r 0x55861439de00
|     |       `-CXXThisExpr 0x5586143a4668 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5586143a4fd0 <col:15, line:277:2>
|       |-ParenExpr 0x5586143a4ba0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5586143a4b70 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5586143a4800 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5586143a47e8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5586143a47d0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5586143a4790 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55861439d658
|       |   |       `-ImplicitCastExpr 0x5586143a4778 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5586143a4748 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55861439dd88
|       |   |           `-MemberExpr 0x5586143a4718 <col:27> 'String::rep_t' lvalue ->_r 0x55861439de00
|       |   |             `-CXXThisExpr 0x5586143a4708 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5586143a4860 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5586143a4840 <col:54> 'int' 0
|       |   `-CallExpr 0x5586143a4ad0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5586143a4ab8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5586143a4a38 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5586143a4b10 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5586143a4948 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5586143a4b28 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5586143a4978 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5586143a4b40 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5586143a49b0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5586143a4b58 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5586143a4a20 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5586143a4a08 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5586143a49d0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5586143a4ef0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5586143a4db0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5586143a4d98 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5586143a4d10 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55861438dec0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5586143a4ce0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55861439d658
|       | |   `-ImplicitCastExpr 0x5586143a4cc8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5586143a4c98 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55861439dd88
|       | |       `-MemberExpr 0x5586143a4c68 <col:40> 'String::rep_t' lvalue ->_r 0x55861439de00
|       | |         `-CXXThisExpr 0x5586143a4c58 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5586143a4eb0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5586143a4e98 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5586143a4dd8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5586143a2d30 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5586143a4ed8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5586143a4e38 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55861439dd88
|       |       `-MemberExpr 0x5586143a4e08 <col:15> 'String::rep_t' lvalue ->_r 0x55861439de00
|       |         `-CXXThisExpr 0x5586143a4df8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5586143a4fb0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5586143a4f48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55861439dd88
|         | `-MemberExpr 0x5586143a4f18 <col:6> 'String::rep_t' lvalue ->_r 0x55861439de00
|         |   `-CXXThisExpr 0x5586143a4f08 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5586143a4f98 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5586143a4f78 <col:16> 'int' 0
|-CXXMethodDecl 0x55861439e7e8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55861439e608 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55861439e688 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55861439e700 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55861439e8c0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55861439eb10 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55861439e978 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55861439e9f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55861439ea70 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55861439ecf8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55861439ebe0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55861439ec60 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55861439edf8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5586143a50e8 <col:41, line:286:5>
|   `-ReturnStmt 0x5586143a50d8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5586143a50a8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5586143a5070 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5586143a5058 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5586143a5038 <col:46> 'int' 1
|-CXXMethodDecl 0x55861439f098 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55861439eeb0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55861439ef30 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55861439efb0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5586143a2d30 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55861439f160 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5586143a2e00 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5586143a2fd0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5586143a2eb8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5586143a2f38 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5586143a3090 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5586143a3158 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5586143a3258 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5586143a32d0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5586143a3348 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5586143a33b0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5586143a34b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5586143a3500 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586143a3490 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5586143a3470 <col:22> 'int' 14
|-CXXMethodDecl 0x5586143a3718 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5586143a3530 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5586143a35b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5586143a3630 <col:43> col:46 'int'
|-FriendDecl 0x5586143a3820 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5586143a38b0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPAddress>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586145e5e40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5586145e6018 prev 0x5586145e5e40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5586145e60a8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5586145e60d0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x5586145e7ca0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5586145e7c50 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5586145e6580 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5586145e6480 'type'
|     `-TemplateSpecializationType 0x5586145e6410 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5586145e62f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5586145e62d0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5586145e62b0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5586145e63f0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5586145e6310 'char_array'
|-TypedefDecl 0x5586145e7d58 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5586145e7d20 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5586145e7d00 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5586145e7ca0 'type'
|     `-ElaboratedType 0x5586145e7c50 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5586145e6580 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5586145e6480 'type'
|         `-TemplateSpecializationType 0x5586145e6410 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5586145e62f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5586145e62d0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5586145e62b0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5586145e63f0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5586145e6310 'char_array'
|-CXXMethodDecl 0x5586145e7ed8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5586145e7de8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5586145e7fc8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5586145e80a8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5586145e80a8
|-CXXMethodDecl 0x5586145e8378 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5586145e8280 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5586145e85b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5586145e8430 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5586145e84a8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586145e8788 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5586145e8678 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5586145e86f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586145e88e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5586145e89b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5586145e8c08 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5586145e8a78 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5586145e8af0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586145e8e68 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5586145e8cd8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5586145e8d50 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586145e9028 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5586145e8f38 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586145e91e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5586145e90f0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586145e92a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5586145e9350 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5586145e9588 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5586145e9400 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5586145e9478 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586145e9828 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5586145e9730 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5586145e98f0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5586145e9940 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5586145e9990 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586143dcd60 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x5586145e4dd8 prev 0x5586143dcd60 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5586145e5db0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPAddress>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5586145e5d60 'typename array_memory<IPAddress>::type' sugar
|   `-TypedefType 0x5586145e5d40 'conditional<true, sized_array_memory<4>, typed_array_memory<IPAddress> >::type' sugar
|     |-Typedef 0x5586145e5bf0 'type'
|     `-SubstTemplateTypeParmType 0x5586145e5a10 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55861432e8f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55861432e898 'T'
|       `-RecordType 0x5586145e5560 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5586145e5478 'sized_array_memory'
|-FieldDecl 0x5586145e99e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPAddress>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5586145e9a30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5586145e9a68 <line:118:5, col:15> col:15 value_type 'IPAddress':'IPAddress'
| `-SubstTemplateTypeParmType 0x5586145e4e70 'IPAddress' sugar
|   |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558614366588 'T'
|   `-RecordType 0x5586143306b0 'IPAddress'
|     `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-TypedefDecl 0x5586145e9af8 <line:119:5, col:16> col:16 reference 'IPAddress &'
| `-LValueReferenceType 0x5586145e9ac0 'IPAddress &'
|   `-SubstTemplateTypeParmType 0x5586145e4e70 'IPAddress' sugar
|     |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558614366588 'T'
|     `-RecordType 0x5586143306b0 'IPAddress'
|       `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-TypedefDecl 0x5586145e9b88 <line:120:5, col:22> col:22 const_reference 'const IPAddress &'
| `-LValueReferenceType 0x5586145e9b50 'const IPAddress &'
|   `-QualType 0x5586145e4e71 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x5586145e4e70 'IPAddress' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-RecordType 0x5586143306b0 'IPAddress'
|         `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-TypedefDecl 0x5586145e9c18 <line:121:5, col:16> col:16 pointer 'IPAddress *'
| `-PointerType 0x5586145e9be0 'IPAddress *'
|   `-SubstTemplateTypeParmType 0x5586145e4e70 'IPAddress' sugar
|     |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558614366588 'T'
|     `-RecordType 0x5586143306b0 'IPAddress'
|       `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-TypedefDecl 0x5586145e9ca8 <line:122:5, col:22> col:22 const_pointer 'const IPAddress *'
| `-PointerType 0x5586145e9c70 'const IPAddress *'
|   `-QualType 0x5586145e4e71 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x5586145e4e70 'IPAddress' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-RecordType 0x5586143306b0 'IPAddress'
|         `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-TypedefDecl 0x5586145eaac0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPAddress>::type':'IPAddress'
| `-ElaboratedType 0x5586145eaa70 'typename fast_argument<IPAddress>::type' sugar
|   `-TypedefType 0x5586145eaa50 'fast_argument<IPAddress, false>::type' sugar
|     |-Typedef 0x5586145ea9e0 'type'
|     `-SubstTemplateTypeParmType 0x5586145ea7a0 'IPAddress' sugar
|       |-TemplateTypeParmType 0x5586143396f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586143396a0 'T'
|       `-RecordType 0x5586143306b0 'IPAddress'
|         `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-TypedefDecl 0x5586145eab28 <line:126:5, col:22> col:22 const_access_type 'const IPAddress &'
| `-LValueReferenceType 0x5586145e9b50 'const IPAddress &'
|   `-QualType 0x5586145e4e71 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x5586145e4e70 'IPAddress' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-RecordType 0x5586143306b0 'IPAddress'
|         `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-TypedefDecl 0x5586145eab80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x5586145eabe8 <line:130:5, col:16> col:16 iterator 'IPAddress *'
| `-PointerType 0x5586145e9be0 'IPAddress *'
|   `-SubstTemplateTypeParmType 0x5586145e4e70 'IPAddress' sugar
|     |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558614366588 'T'
|     `-RecordType 0x5586143306b0 'IPAddress'
|       `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-TypedefDecl 0x5586145eac50 <line:131:5, col:22> col:22 const_iterator 'const IPAddress *'
| `-PointerType 0x5586145e9c70 'const IPAddress *'
|   `-QualType 0x5586145e4e71 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x5586145e4e70 'IPAddress' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-RecordType 0x5586143306b0 'IPAddress'
|         `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-EnumDecl 0x5586145eaca8 <line:134:5> col:5
| `-EnumConstantDecl 0x5586145eada0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPAddress>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5586145ead80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558614367c68 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558614367c40 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558614367c20 <col:40> 'int' 1
|-CXXConstructorDecl 0x5586145eae28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5586145eb0b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x5586145eaee0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586145eaf80 <col:41, col:61> col:61 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXConstructorDecl 0x5586145eb378 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x5586145eb260 <col:19, col:36> col:36 x 'const Vector<IPAddress> &'
|-CXXConstructorDecl 0x5586145eb638 <line:141:5, col:32> col:12 Vector 'void (Vector<IPAddress> &&)' inline
| `-ParmVarDecl 0x5586145eb520 <col:19, col:31> col:31 x 'Vector<IPAddress> &&'
|-CXXMethodDecl 0x5586145eb950 <line:144:5, col:51> col:23 operator= 'Vector<IPAddress> &(const Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x5586145eb830 <col:33, col:50> col:50 x 'const Vector<IPAddress> &'
|-CXXMethodDecl 0x5586145ebc60 <line:146:5, col:46> col:23 operator= 'Vector<IPAddress> &(Vector<IPAddress> &&)' inline
| `-ParmVarDecl 0x5586145ebb40 <col:33, col:45> col:45 x 'Vector<IPAddress> &&'
|-CXXMethodDecl 0x5586145ebf50 <line:148:5, col:70> col:23 assign 'Vector<IPAddress> &(Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x5586145ebd98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586145ebe10 <col:43, col:69> col:63 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x5586145ec0a8 <line:150:5, col:55> col:49 begin 'Vector<IPAddress>::iterator ()'
| |-NoInlineAttr 0x5586145ec188 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586145ec1e0 <col:30> Inherited
|-CXXMethodDecl 0x5586145ec228 <line:151:5, col:53> col:49 end 'Vector<IPAddress>::iterator ()'
| |-NoInlineAttr 0x5586145ec2d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586145ec330 <col:30> Inherited
|-CXXMethodDecl 0x5586145ec3f8 <line:152:5, col:63> col:55 begin 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x5586145ec4a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586145ec500 <col:30> Inherited
|-CXXMethodDecl 0x5586145ec548 <line:153:5, col:61> col:55 end 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x5586145ec5f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586145ec650 <col:30> Inherited
|-CXXMethodDecl 0x5586145ec698 <line:154:5, col:64> col:55 cbegin 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x5586145ec748 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586145ec7a0 <col:30> Inherited
|-CXXMethodDecl 0x5586145ec7e8 <line:155:5, col:62> col:55 cend 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x5586145ec898 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586145ec8f0 <col:30> Inherited
|-CXXMethodDecl 0x5586145ec918 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5586145ec9c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5586145eca78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5586145ecc38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x5586145ecb28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586145ecba0 <col:37, col:63> col:57 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x5586145ecd88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5586145eccf8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586145ecf38 <line:163:5, col:65> col:43 operator[] 'IPAddress &(Vector::size_type)'
| |-ParmVarDecl 0x5586145ece40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5586145ecff0 <col:20>
| `-OptimizeNoneAttr 0x5586145ed048 <col:30>
|-CXXMethodDecl 0x5586145ed168 <line:164:5, col:73> col:49 operator[] 'const IPAddress &(Vector::size_type) const'
| |-ParmVarDecl 0x5586145ed070 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5586145ed220 <col:20>
| `-OptimizeNoneAttr 0x5586145ed278 <col:30>
|-CXXMethodDecl 0x5586145ed330 <line:165:5, col:29> col:15 at 'IPAddress &(Vector::size_type)' inline
| `-ParmVarDecl 0x5586145ed2a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586145ed478 <line:166:5, col:37> col:21 at 'const IPAddress &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5586145ed3e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586145ed5a8 <line:167:5, col:21> col:15 front 'IPAddress &()' inline
|-CXXMethodDecl 0x5586145ed6d8 <line:168:5, col:29> col:21 front 'const IPAddress &() const' inline
|-CXXMethodDecl 0x5586145ed7a8 <line:169:5, col:20> col:15 back 'IPAddress &()' inline
|-CXXMethodDecl 0x5586145ed878 <line:170:5, col:28> col:21 back 'const IPAddress &() const' inline
|-CXXMethodDecl 0x5586145ed9b8 <line:172:5, col:39> col:15 unchecked_at 'IPAddress &(Vector::size_type)' inline
| `-ParmVarDecl 0x5586145ed928 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586145edb00 <line:173:5, col:47> col:21 unchecked_at 'const IPAddress &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5586145eda70 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586145edc48 <line:174:5, col:59> col:15 at_u 'IPAddress &(Vector::size_type)' inline
| |-ParmVarDecl 0x5586145edbb8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5586145edd00 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5586145ede00 <line:175:5, col:71> col:21 at_u 'const IPAddress &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5586145edd70 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5586145edeb8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5586145edf78 <line:177:5, col:20> col:15 data 'IPAddress *()' inline
|-CXXMethodDecl 0x5586145ee078 <line:178:5, col:28> col:21 data 'const IPAddress *() const' inline
|-CXXMethodDecl 0x5586145ee1f8 <line:180:5, col:48> col:17 used push_back 'void (Vector<IPAddress>::value_argument_type)' inline
| `-ParmVarDecl 0x5586145ee138 <col:27, col:47> col:47 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-FunctionTemplateDecl 0x5586145ee9b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5586145ee2b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPAddress>':'fast_argument<IPAddress, false>'
| `-CXXMethodDecl 0x5586145ee918 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPAddress &&)' inline
|   `-ParmVarDecl 0x5586145ee818 <col:58, col:62> col:62 v 'IPAddress &&'
|-CXXMethodDecl 0x5586145eea98 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5586145eebe8 <line:186:5, col:49> col:17 push_front 'void (Vector<IPAddress>::value_argument_type)' inline
| `-ParmVarDecl 0x5586145eeb58 <col:28, col:48> col:48 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x5586145eeca0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5586145eeee8 <line:189:5, col:62> col:21 insert 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x5586145eed60 <col:28, col:37> col:37 it 'Vector<IPAddress>::iterator':'IPAddress *'
| `-ParmVarDecl 0x5586145eedd8 <col:41, col:61> col:61 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x5586145ef0a8 <line:190:5, col:38> col:21 erase 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator)' inline
| `-ParmVarDecl 0x5586145eefb8 <col:27, col:36> col:36 it 'Vector<IPAddress>::iterator':'IPAddress *'
|-CXXMethodDecl 0x5586145ef2f8 <line:191:5, col:49> col:21 erase 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator, Vector<IPAddress>::iterator)' inline
| |-ParmVarDecl 0x5586145ef170 <col:27, col:36> col:36 a 'Vector<IPAddress>::iterator':'IPAddress *'
| `-ParmVarDecl 0x5586145ef1e8 <col:39, col:48> col:48 b 'Vector<IPAddress>::iterator':'IPAddress *'
|-CXXMethodDecl 0x5586145ef3b8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5586145ef618 <line:195:5, col:34> col:17 swap 'void (Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x5586145ef520 <col:22, col:33> col:33 x 'Vector<IPAddress> &'
`-CXXDestructorDecl 0x5586145ef6e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5586145ef6e8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586145d7818 prev 0x5586145cefb8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5586145d7910 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5586145d79a0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5586145d7a18 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5586145d7ad8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5586145d7ba0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5586145d7d18 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5586145d7c50 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5586145d7dc0 <col:24>
| `-OptimizeNoneAttr 0x5586145d7e18 <col:34>
|-CXXMethodDecl 0x5586145d7e60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5586145d8118 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5586145d7f10 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5586145d7f88 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5586145d8008 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5586145d81d0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5586145d8208 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5586145d8270 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5586145d82f8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5586145d8618 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5586145d83b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5586145d8428 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5586145d84a0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5586145d8520 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5586145d8730 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5586145e00a8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5586145e00a8
| `-ParmVarDecl 0x5586145e01b8 <col:11> col:11 'const Element::Port &'
`-CXXConstructorDecl 0x5586145e0258 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5586145e0258
  `-ParmVarDecl 0x5586145e0368 <col:11> col:11 'Element::Port &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586145ca830 prev 0x5586145ca5b0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5586145ca928 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5586145ca9b8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5586145caa18 <line:31:5, col:13> col:5 Element 'void ()'
|-CXXDestructorDecl 0x5586145cab08 <line:32:5, col:22> col:13 ~Element 'void ()' virtual noexcept-unevaluated 0x5586145cab08
|-VarDecl 0x5586145cac08 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5586145cadd8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5586145cac88 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5586145cad00 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5586145caf68 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5586145caea0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5586145cb010 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5586145cb148 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5586145cb080 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5586145cb2e8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5586145cb228 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5586145cb488 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5586145cb3c8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5586145cb530 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5586145cb630 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5586145cb710 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145cb610 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5586145cb5f0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5586145cb6c0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5586145cb728 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586145cb6a0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5586145cb680 <col:44> 'int' 2
|-CXXMethodDecl 0x5586145cb870 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5586145cb758 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5586145cb7d8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5586145cb9c8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5586145cb938 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5586145cbc08 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5586145cba88 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5586145cbb00 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5586145cbcb8 <col:20>
| `-OptimizeNoneAttr 0x5586145cbd10 <col:30>
|-CXXMethodDecl 0x5586145cbe18 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5586145cbd50 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5586145cbec0 <col:20>
| `-OptimizeNoneAttr 0x5586145cbf18 <col:30>
|-CXXMethodDecl 0x5586145cbf68 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5586145cc030 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5586145cc148 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5586145cc1d0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5586145cc258 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5586145cc2e0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5586145cc368 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5586145cc3f8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5586145cc4b8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5586145cc540 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5586145cc5c8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5586145cc650 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5586145cc6d8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5586145cc760 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5586145cc7f0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5586145cc8b0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5586145cc940 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5586145cca90 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5586145cc9f8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5586145ccc20 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5586145ccb50 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5586145cced0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5586145cccd8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5586145ccd58 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5586145ccdd8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5586145ccf88 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5586145cd090 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5586145cd320 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145cd070 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5586145cd050 <col:33> 'int' 0
| |-EnumConstantDecl 0x5586145cd120 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5586145cd338 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145cd100 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5586145cd0e0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5586145cd1b0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5586145cd350 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145cd190 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5586145cd170 <col:38> 'int' 90
| |-EnumConstantDecl 0x5586145cd240 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5586145cd368 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145cd220 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5586145cd200 <col:35> 'int' 100
| `-EnumConstantDecl 0x5586145cd2d0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5586145cd380 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586145cd2b0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5586145cd290 <col:32> 'int' 2000
|-CXXMethodDecl 0x5586145cd3c0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5586145cd800 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5586145cd670 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5586145cd6e8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586145cd8d0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5586145cda50 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5586145cd980 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586145cdc58 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5586145cdb08 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5586145cdb80 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586145cdd58 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5586145cddf8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5586145cdec0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586145cdf50 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5586145ce180 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145cdf30 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5586145cdf10 <col:36> 'int' EnumConstant 0x5586145cdec0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586145cdfa0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586145cdff0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586145ce040 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586145ce090 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586145ce0e0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5586145ce130 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5586145ce268 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5586145ce1a8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5586145ce330 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5586145ce3f0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5586145ce4b0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5586145ce570 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5586145ce688 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5586145ce750 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5586145ce8d0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5586145ce800 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5586145ce9f8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5586145cebf8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5586145ceaa8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5586145ceb28 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5586145dc548 <col:54, line:127:5>
|   |-ParenExpr 0x5586145dc3f8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5586145dc3c8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5586145dc0b8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5586145dc090 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5586145dc078 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5586145dc060 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5586145dc030 <col:31> 'Router *' lvalue ->_router 0x5586145d9f10
|   |   |         `-CXXThisExpr 0x5586145dc020 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5586145dc118 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145dc0f8 <col:48> 'int' 0
|   |   `-CallExpr 0x5586145dc328 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5586145dc310 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145dc2f0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145dc368 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145dc188 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5586145dc380 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145dc1a8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5586145dc398 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145dc1e0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5586145dc3b0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145dc2d8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145dc2c0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145dc278 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5586145dc490 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5586145dc428 <col:9> 'Router *' lvalue ->_router 0x5586145d9f10
|   | | `-CXXThisExpr 0x5586145dc418 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5586145dc478 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5586145dc458 <col:19> 'Router *' lvalue ParmVar 0x5586145ceaa8 'r' 'Router *'
|   `-BinaryOperator 0x5586145dc528 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5586145dc4c0 <col:9> 'int' lvalue ->_eindex 0x5586145d9f78
|     | `-CXXThisExpr 0x5586145dc4b0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5586145dc510 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5586145dc4f0 <col:19> 'int' lvalue ParmVar 0x5586145ceb28 'eindex' 'int'
|-CXXMethodDecl 0x5586145ced80 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5586145cecb8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5586145cee50 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5586145cef18 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5586145cefb8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5586145cf208 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5586145cf080 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5586145cf100 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5586145cf2b8 <col:20>
| `-OptimizeNoneAttr 0x5586145cf310 <col:30>
|-CXXMethodDecl 0x5586145cf418 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5586145cf350 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5586145cf4c0 <col:20>
| `-OptimizeNoneAttr 0x5586145cf518 <col:30>
|-CXXMethodDecl 0x5586145cf5e8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5586145cf558 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5586145cf690 <col:20>
| `-OptimizeNoneAttr 0x5586145cf6e8 <col:30>
|-CXXMethodDecl 0x5586145cf878 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5586145cf720 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5586145cf7a0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5586145cfa08 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5586145cf940 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5586145cfb58 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5586145cfac8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5586145cfca8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5586145cfc18 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5586145cfdf8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5586145cfd68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5586145d00b8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5586145cfeb0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5586145cff30 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5586145cffd8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5586145d0190 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5586145d0250 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5586145d0520 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5586145d03d0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5586145d0448 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5586145d0648 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5586145d0820 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5586145d0700 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5586145d0780 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5586145d0a08 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5586145d08e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5586145d0968 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5586145d0d78 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5586145d0ac8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5586145d0b40 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5586145d0bc0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5586145dbb30 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5586145dbb10 <col:106> 'int' 0
| `-ParmVarDecl 0x5586145d0c38 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586145dbb68 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586145dbb48 <col:126> 'int' 0
|-CXXMethodDecl 0x5586145d1118 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5586145d0e48 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5586145d0ee0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5586145d0f60 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5586145d0fd8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586145dbba0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586145dbb80 <col:114> 'int' 0
|-CXXMethodDecl 0x5586145d14a8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5586145d11f0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5586145d1268 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5586145d12e8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5586145dbbb8 <col:96> 'int' 0
| `-ParmVarDecl 0x5586145d1360 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586145dbbf8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586145dbbd8 <col:116> 'int' 0
|-CXXMethodDecl 0x5586145d1828 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5586145d1578 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5586145d15f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5586145d1670 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5586145dbc30 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5586145dbc10 <col:109> 'int' 0
| `-ParmVarDecl 0x5586145d16e8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586145dbc68 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586145dbc48 <col:129> 'int' 0
|-CXXMethodDecl 0x5586145d1ba8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5586145d18f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5586145d1970 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5586145d19f0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5586145d1a68 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586145dbca0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586145dbc80 <col:117> 'int' 0
|-CXXMethodDecl 0x5586145d1f38 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5586145d1c80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d1cf8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5586145d1d78 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5586145dbcb8 <col:99> 'int' 0
| `-ParmVarDecl 0x5586145d1df0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586145dbcf8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586145dbcd8 <col:119> 'int' 0
|-CXXMethodDecl 0x5586145d2358 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5586145d2008 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5586145d2088 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5586145d2100 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5586145d2180 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5586145dbd30 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5586145dbd10 <col:108> 'int' 0
| `-ParmVarDecl 0x5586145d2200 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5586145dbd68 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5586145dbd48 <col:141> 'int' 0
|-CXXMethodDecl 0x5586145d2778 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5586145d2430 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5586145d24b0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5586145d2528 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5586145d25a8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5586145d2628 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5586145dbd80 <col:121> 'int' 0
|-CXXMethodDecl 0x5586145d2ba8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5586145d2858 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5586145d28d8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5586145d2950 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5586145d29d0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5586145dbda0 <col:98> 'int' 0
| `-ParmVarDecl 0x5586145d2a50 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5586145dbdc0 <col:123> 'int' 0
|-CXXMethodDecl 0x5586145d2e70 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5586145d2c80 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5586145d2d00 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5586145d2d80 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5586145dbde0 <col:80> 'int' 0
|-EnumDecl 0x5586145d2f28 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5586145d3030 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5586145d32c0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145d3010 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5586145d2ff0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5586145d30c0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5586145d32d8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145d30a0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5586145d3080 <col:40> 'int' 2
| |-EnumConstantDecl 0x5586145d3150 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5586145d32f0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145d3130 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5586145d3110 <col:44> 'int' 4
| |-EnumConstantDecl 0x5586145d31e0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5586145d3308 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145d31c0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5586145d31a0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5586145d3270 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5586145d3320 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586145d3250 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5586145d3230 <col:34> 'int' 6
|-CXXMethodDecl 0x5586145d35d8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5586145d3348 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5586145d33e8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5586145d3468 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5586145d34e0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5586145dbe98 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5586145dbe80 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5586145dbe68 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5586145dbe48 <col:98, col:105> 'String' (CXXTemporary 0x5586145dbe48)
|           `-CXXTemporaryObjectExpr 0x5586145dbe10 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5586145d3878 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5586145d36a8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5586145d3720 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5586145d3798 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5586145dbf48 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5586145dbf30 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5586145dbf18 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5586145dbef8 <col:94, col:101> 'String' (CXXTemporary 0x5586145dbef8)
| |         `-CXXTemporaryObjectExpr 0x5586145dbec0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5586145dc730 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5586145dc6a8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5586145dc678 <col:9> '<bound member function type>' ->add_task_handlers 0x5586145d35d8
|     | `-CXXThisExpr 0x5586145dc668 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5586145dc6e8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5586145dc5e8 <col:27> 'Task *' lvalue ParmVar 0x5586145d36a8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5586145dc700 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5586145dc608 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5586145d3720 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5586145dc718 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5586145dc628 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5586145d3270 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5586145dc648 <col:62> 'const String' lvalue ParmVar 0x5586145d3798 'prefix' 'const String &'
|-CXXMethodDecl 0x5586145d3a88 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5586145d3940 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5586145d39b8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5586145dbff8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5586145dbfe0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5586145dbfc8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5586145dbfa8 <col:70, col:77> 'String' (CXXTemporary 0x5586145dbfa8)
| |         `-CXXTemporaryObjectExpr 0x5586145dbf70 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5586145dc908 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5586145dc880 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5586145dc850 <col:9> '<bound member function type>' ->add_task_handlers 0x5586145d35d8
|     | `-CXXThisExpr 0x5586145dc840 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5586145dc8c0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5586145dc7c0 <col:27> 'Task *' lvalue ParmVar 0x5586145d3940 'task' 'Task *'
|     |-ImplicitCastExpr 0x5586145dc8d8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5586145dc7e0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5586145dc8f0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5586145dc800 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5586145d3270 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5586145dc820 <col:57> 'const String' lvalue ParmVar 0x5586145d39b8 'prefix' 'const String &'
|-CXXMethodDecl 0x5586145d3d68 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5586145d3b50 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d3bd0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d3c48 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5586145d4018 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5586145d3e38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d3eb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d3f38 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5586145d4308 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5586145d40e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d4168 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d41e0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5586145d45b8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5586145d43d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d4458 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d44d8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5586145d4868 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5586145d4688 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d4708 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d4788 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5586145d4b18 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5586145d4938 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d49b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d4a30 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5586145d4dc8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5586145d4be8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d4c68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d4ce8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5586145d50d8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5586145d4ef0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d4f70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d4ff0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5586145d53b8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5586145d51a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d5228 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d52d0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5586145d5698 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5586145d5488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d5508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d55b0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5586145d5900 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5586145d5768 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5586145d57e8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5586145d5860 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5586145d5ba8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5586145d59d0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5586145d5a50 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5586145d5ac8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5586145d5e58 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5586145d5c78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d5cf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d5d78 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5586145d6108 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5586145d5f28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d5fa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d6020 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5586145d63b8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5586145d61d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d6258 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d62d0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5586145d6688 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5586145d6488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d6508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586145d65a8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5586145d69b8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5586145d6758 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586145d67d8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5586145d6850 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5586145d68c8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586145dc010 <col:93> 'bool' false
|-CXXMethodDecl 0x5586145d6ba0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5586145d6a88 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5586145d6b08 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5586145d6d78 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5586145d6c60 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5586145d6ce0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5586145d7058 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5586145d6e38 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5586145d6eb0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5586145d6f30 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5586145d6fa8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5586145d7348 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5586145d7128 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5586145d71a0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5586145d7220 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5586145d7298 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5586145d7580 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5586145d7420 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5586145d74a0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5586145d7768 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5586145d7648 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5586145d76c8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5586145d7818 prev 0x5586145cefb8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5586145d7910 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5586145d79a0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5586145d7a18 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5586145d7ad8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5586145d7ba0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5586145d7d18 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5586145d7c50 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5586145d7dc0 <col:24>
| | `-OptimizeNoneAttr 0x5586145d7e18 <col:34>
| |-CXXMethodDecl 0x5586145d7e60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5586145d8118 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5586145d7f10 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5586145d7f88 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5586145d8008 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5586145d81d0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5586145d8208 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5586145d8270 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5586145d82f8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5586145d8618 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5586145d83b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5586145d8428 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5586145d84a0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5586145d8520 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5586145d8730 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5586145e00a8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5586145e00a8
| | `-ParmVarDecl 0x5586145e01b8 <col:11> col:11 'const Element::Port &'
| `-CXXConstructorDecl 0x5586145e0258 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5586145e0258
|   `-ParmVarDecl 0x5586145e0368 <col:11> col:11 'Element::Port &&'
|-CXXMethodDecl 0x5586145d87a8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5586145d8848 <col:38> "" ""
|-CXXMethodDecl 0x5586145d88d8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5586145d8978 <col:44> "" ""
|-AccessSpecDecl 0x5586145d89e8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5586145d8a10 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5586145d8b10 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5586145d8b60 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586145d8af0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5586145d8ad0 <col:27> 'int' 4
|-FieldDecl 0x5586145d8c18 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5586145d8dc8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5586145d8e80 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5586145d9f10 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5586145d9f78 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5586145da0c8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5586145da008 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5586145da278 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5586145da188 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5586145da458 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5586145da338 <col:20> col:23 'int'
| `-ParmVarDecl 0x5586145da3b8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5586145da700 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5586145da520 <col:23> col:26 'int'
| |-ParmVarDecl 0x5586145da5a0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5586145da618 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5586145da7b8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5586145da880 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5586145da8d0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5586145da920 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5586145dab00 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5586145da9b0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5586145daa28 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586145dada8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5586145dabc8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5586145dac48 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5586145dacc0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5586145dafc8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5586145dae78 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5586145daef8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5586145db300 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5586145db088 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5586145db108 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5586145db180 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5586145db200 <col:57> col:60 'int'
|-CXXMethodDecl 0x5586145db4e8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5586145db3d0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5586145db450 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5586145db638 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5586145db5a8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5586145db9b8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5586145db6f8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5586145db778 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5586145db7f0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5586145db870 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5586145dbad0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586146beaf8 prev 0x55861454f708 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5586146bebf0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5586146bec80 <col:22, col:28> col:22 public
|-EnumDecl 0x5586146beca8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5586146bedc8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586146beda8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5586146bed90 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5586146bed70 <col:14> 'int' 999
| |-EnumConstantDecl 0x5586146bee70 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586146bee50 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5586146bee38 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5586146bee18 <col:14> 'int' 1
| |-EnumConstantDecl 0x5586146bef00 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586146beee0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5586146beec0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5586146bef90 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586146bef70 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5586146bef50 <col:13> 'int' 1
| |-EnumConstantDecl 0x5586146bf020 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586146bf000 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5586146befe0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5586146bf0b0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586146bf090 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5586146bf070 <col:13> 'int' 3
| |-EnumConstantDecl 0x5586146bf140 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586146bf120 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5586146bf100 <col:15> 'int' 4
| |-EnumConstantDecl 0x5586146bf1d0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586146bf1b0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5586146bf190 <col:14> 'int' 5
| |-EnumConstantDecl 0x5586146bf260 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586146bf240 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5586146bf220 <col:12> 'int' 6
| `-EnumConstantDecl 0x5586146bf2f0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5586146bf2d0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5586146bf2b0 <col:13> 'int' 7
|-VarDecl 0x5586146bf360 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5586146bf3e8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5586146bf470 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5586146bf4f8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5586146bf580 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5586146bf608 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5586146bf690 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5586146bf718 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5586146bf7a0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5586146bf828 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5586146bf8b0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5586146bf9b0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5586146c4cf8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5586146c5488 <line:128:13> 'int' 0
| `-CompoundStmt 0x5586146c54f8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5586146bfaa0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5586146c5508 <col:29, line:132:5>
|-CXXMethodDecl 0x5586146bfc58 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5586146bfb90 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586146bfd20 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5586146bfe08 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5586146c5560 <col:44, line:161:5>
|   `-ReturnStmt 0x5586146c5550 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5586146c5538 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5586146c5518 <col:9> 'ErrorHandler *' lvalue Var 0x5586146c4d58 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5586146bff48 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5586146bfeb8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586146c0010 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5586146c55c0 <col:43, line:173:5>
|   `-ReturnStmt 0x5586146c55b0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5586146c5598 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5586146c5578 <col:9> 'ErrorHandler *' lvalue Var 0x5586146c4dd0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5586146c00c8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5586146c0148 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5586146c0258 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5586146c01c8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5586146c03a8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5586146c0318 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5586146c0500 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5586146c0468 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5586146c0658 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5586146c05c0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5586146c07b0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5586146c0718 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5586146c09c0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586146c0868 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5586146c08e8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5586146c0b98 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586146c0a80 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5586146c0b00 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5586146c0db8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586146c0c58 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5586146c0cd8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5586146c0f98 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586146c0e78 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5586146c0ef8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5586146c1178 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586146c1058 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5586146c10d8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5586146c1300 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5586146c1238 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5586146c14d0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5586146c13b8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5586146c1430 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5586146c5818 <col:57, line:234:5>
|   `-ReturnStmt 0x5586146c5808 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5586146c57f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5586146c5798 <col:9, col:41> 'int'
|         |-MemberExpr 0x5586146c5768 <col:9> '<bound member function type>' ->xmessage 0x5586146c1300
|         | `-CXXThisExpr 0x5586146c5758 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5586146c57d8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5586146c57c0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5586146c5738 <col:18, col:40> 'String' (CXXTemporary 0x5586146c5738)
|               `-CallExpr 0x5586146c5700 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5586146c56e8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5586146c5660 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5586146c3528 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5586146c5680 <col:31> 'const String' lvalue ParmVar 0x5586146c1430 'str' 'const String &'
|                 `-DeclRefExpr 0x5586146c56a0 <col:36> 'const String' lvalue ParmVar 0x5586146c13b8 'anno' 'const String &'
|-CXXMethodDecl 0x5586146c17b0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5586146c1590 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5586146c1610 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5586146c1688 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5586146c5aa8 <col:68, line:243:5>
|   `-ReturnStmt 0x5586146c5a98 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5586146c5a80 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5586146c5a20 <col:9, col:41> 'int'
|         |-MemberExpr 0x5586146c59f0 <col:9> '<bound member function type>' ->xmessage 0x5586146c14d0
|         | `-CXXThisExpr 0x5586146c59e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5586146c58b8 <col:18> 'const String' lvalue ParmVar 0x5586146c1590 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5586146c5a68 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5586146c5a50 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5586146c59c0 <col:24, col:40> 'String' (CXXTemporary 0x5586146c59c0)
|               `-CXXMemberCallExpr 0x5586146c5958 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5586146c58e8 <col:24> '<bound member function type>' ->vformat 0x5586146c2990
|                 | `-CXXThisExpr 0x5586146c58d8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5586146c5988 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5586146c5918 <col:32> 'const char *' lvalue ParmVar 0x5586146c1610 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5586146c59a0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5586146c5938 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5586146c1688 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586146c1a50 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5586146c1878 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5586146c18f0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5586146c1968 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5586146c5de8 <col:23, line:254:5>
|   `-ReturnStmt 0x5586146c5dd8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5586146c5dc0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5586146c5d60 <col:9, col:71> 'int'
|         |-MemberExpr 0x5586146c5d30 <col:9> '<bound member function type>' ->xmessage 0x5586146c14d0
|         | `-CXXThisExpr 0x5586146c5d20 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5586146c5da8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5586146c5d90 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5586146c5ce0 <col:18, col:65> 'String' (CXXTemporary 0x5586146c5ce0)
|         |     `-CallExpr 0x5586146c5c78 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5586146c5c60 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5586146c5b48 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5586146c3528 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5586146c5b68 <col:31> 'const String' lvalue ParmVar 0x5586146c18f0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5586146c5cc0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5586146c5ca8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5586146c5c40 <col:37, col:64> 'String' (CXXTemporary 0x5586146c5c40)
|         |             `-CallExpr 0x5586146c5c10 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5586146c5bf8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5586146c5b88 <col:37> 'String (const String &)' lvalue CXXMethod 0x5586146c3b78 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5586146c5ba8 <col:56> 'const String' lvalue ParmVar 0x5586146c1878 'landmark' 'const String &'
|         `-DeclRefExpr 0x5586146c5d00 <col:68> 'const String' lvalue ParmVar 0x5586146c1968 'str' 'const String &'
|-CXXMethodDecl 0x5586146c1dd0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5586146c1b18 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5586146c1b90 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5586146c1c10 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5586146c1c88 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5586146c60a0 <col:34, line:267:5>
|   `-ReturnStmt 0x5586146c6090 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5586146c6078 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5586146c6010 <col:9, col:51> 'int'
|         |-MemberExpr 0x5586146c5fe0 <col:9> '<bound member function type>' ->xmessage 0x5586146c1a50
|         | `-CXXThisExpr 0x5586146c5fd0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5586146c5e88 <col:18> 'const String' lvalue ParmVar 0x5586146c1b18 'landmark' 'const String &'
|         |-DeclRefExpr 0x5586146c5ea8 <col:28> 'const String' lvalue ParmVar 0x5586146c1b90 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5586146c6060 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5586146c6048 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5586146c5fb0 <col:34, col:50> 'String' (CXXTemporary 0x5586146c5fb0)
|               `-CXXMemberCallExpr 0x5586146c5f48 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5586146c5ed8 <col:34> '<bound member function type>' ->vformat 0x5586146c2990
|                 | `-CXXThisExpr 0x5586146c5ec8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5586146c5f78 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5586146c5f08 <col:42> 'const char *' lvalue ParmVar 0x5586146c1c10 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5586146c5f90 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5586146c5f28 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5586146c1c88 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586146c1ee0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5586146c6120 <col:25, line:288:5>
|   `-ReturnStmt 0x5586146c6110 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5586146c60f8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5586146c60c8 <col:9> 'const int' lvalue ->_nerrors 0x5586146c4cf8
|         `-CXXThisExpr 0x5586146c60b8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5586146c20f0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5586146c1f98 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5586146c2018 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5586146c23d8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5586146c21b8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5586146c2238 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5586146c22b0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586146c2570 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5586146c24a8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5586146c27b8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5586146c2630 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5586146c26a8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5586146c6380 <col:58, line:357:5>
|   `-ReturnStmt 0x5586146c6370 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5586146c6358 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5586146c6328 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5586146c6310 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5586146c62f0 <col:9, col:29> 'String' (CXXTemporary 0x5586146c62f0)
|             `-CallExpr 0x5586146c6280 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5586146c6268 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5586146c61e8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5586146c23d8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5586146c6188 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5586146c62b8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5586146c61a8 <col:21> 'const char *' lvalue ParmVar 0x5586146c2630 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5586146c62d0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5586146c61c8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5586146c26a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586146c2990 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5586146c2880 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5586146c28f8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586146c2ae8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5586146c2a58 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5586146c2c30 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5586146c2ba0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5586146c2ed0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5586146c2ce8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5586146c2d68 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5586146c2de0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5586146c3030 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5586146c2fa0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5586146c6498 <col:37, line:441:5>
|   `-IfStmt 0x5586146c6480 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5586146c6408 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5586146c63d8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5586146c6398 <col:6> 'int' lvalue ParmVar 0x5586146c2fa0 'level' 'int'
|     | `-ImplicitCastExpr 0x5586146c63f0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5586146c63b8 <col:15> 'ErrorHandler::Level' EnumConstant 0x5586146bf0b0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5586146c6468 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5586146c6438 <col:8> 'int' lvalue ->_nerrors 0x5586146c4cf8
|         `-CXXThisExpr 0x5586146c6428 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5586146c30f8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5586146c6530 <col:26, line:448:5>
|   `-BinaryOperator 0x5586146c6510 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5586146c64c0 <col:2> 'int' lvalue ->_nerrors 0x5586146c4cf8
|     | `-CXXThisExpr 0x5586146c64b0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5586146c64f0 <col:13> 'int' 0
|-CXXMethodDecl 0x5586146c3318 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5586146c31b0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5586146c3280 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5586146c3528 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5586146c33d8 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5586146c3450 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5586146c37d8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5586146c35e8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5586146c3668 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5586146c36e8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5586146c3890 <col:59> 0 0
|-CXXMethodDecl 0x5586146c3a28 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5586146c3908 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5586146c3988 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5586146c6ba0 <col:70, line:534:5>
|   |-DeclStmt 0x5586146c66a0 <line:528:2, col:20>
|   | |-VarDecl 0x5586146c6558 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5586146c65c0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5586146c65f8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5586146c6660 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5586146c6770 <line:529:2, col:23>
|   | `-VarDecl 0x5586146c66d0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5586146c6758 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5586146c6738 <col:18> 'const char *' lvalue ParmVar 0x5586146c3908 'begin' 'const char *'
|   |-DoStmt 0x5586146c6b38 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5586146c6a68 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5586146c6a50 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5586146c6a30 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5586146c6788 <col:6> 'const char *' lvalue Var 0x5586146c66d0 'x' 'const char *'
|   | |     `-CallExpr 0x5586146c6980 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5586146c6968 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5586146c6920 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5586146c51d0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5586146c69e8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5586146c69d0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5586146c6840 <col:20, col:27> 'String' (CXXTemporary 0x5586146c6840)
|   | |       |     `-CXXTemporaryObjectExpr 0x5586146c6808 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5586146c6a00 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5586146c6860 <col:30> 'const char *' lvalue Var 0x5586146c66d0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5586146c6a18 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5586146c6880 <col:33> 'const char *' lvalue ParmVar 0x5586146c3988 'end' 'const char *'
|   | |       |-UnaryOperator 0x5586146c68c0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5586146c68a0 <col:39> 'String' lvalue Var 0x5586146c6558 'name' 'String'
|   | |       |-UnaryOperator 0x5586146c68f8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5586146c68d8 <col:46> 'String' lvalue Var 0x5586146c65f8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5586146c6910 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5586146c6b20 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5586146c6b08 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5586146c6ae8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5586146c6ab8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|   |         `-ImplicitCastExpr 0x5586146c6aa0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5586146c6a80 <col:11> 'String' lvalue Var 0x5586146c6558 'name' 'String'
|   `-ReturnStmt 0x5586146c6b90 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5586146c6b78 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5586146c6b58 <col:9> 'const char *' lvalue Var 0x5586146c66d0 'x' 'const char *'
|-CXXMethodDecl 0x5586146c3b78 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5586146c3ae8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5586146c71a8 <col:55, line:550:5>
|   `-IfStmt 0x5586146c7180 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5586146c6de0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5586146c6dc8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5586146c6db0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5586146c6d90 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5586146c6d60 <col:6> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|     | |       `-DeclRefExpr 0x5586146c6c00 <col:6> 'const String' lvalue ParmVar 0x5586146c3ae8 'x' 'const String &'
|     | `-BinaryOperator 0x5586146c6d40 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5586146c6d10 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5586146c6cc0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5586146c6ca8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5586146c6c60 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5586143b1a40 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5586146c6c20 <col:11> 'const String' lvalue ParmVar 0x5586146c3ae8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5586146c6c40 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5586146c6d28 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5586146c6cf8 <col:19> 'char' 123
|     |-ReturnStmt 0x5586146c6e50 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5586146c6e20 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5586146c6e00 <col:13> 'const String' lvalue ParmVar 0x5586146c3ae8 'x' 'const String &'
|     `-IfStmt 0x5586146c7158 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5586146c6ee8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5586146c6ed0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5586146c6eb0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5586146c6e80 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|       |       `-DeclRefExpr 0x5586146c6e60 <col:11> 'const String' lvalue ParmVar 0x5586146c3ae8 'x' 'const String &'
|       |-ReturnStmt 0x5586146c7070 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5586146c7058 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5586146c7028 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5586146c7010 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5586146c6ff0 <col:13, col:29> 'String' (CXXTemporary 0x5586146c6ff0)
|       |         `-CallExpr 0x5586146c6fa0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5586146c6f88 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5586146c6f00 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5586146c3318 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5586146c6fd0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5586146c6f20 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5586146c6f40 <col:28> 'const String' lvalue ParmVar 0x5586146c3ae8 'x' 'const String &'
|       `-ReturnStmt 0x5586146c7148 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5586146c7130 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5586146c7100 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5586146c70e8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5586146c70c8 <col:13, col:20> 'String' (CXXTemporary 0x5586146c70c8)
|                 `-CXXTemporaryObjectExpr 0x5586146c7090 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5586146c3d40 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5586146c3c30 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5586146c3ca8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586146c5478 <col:71> 'bool' false
|-CXXRecordDecl 0x5586146c3df0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5586146c40e8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5586146c4080 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5586146c4020 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5586146c3fe0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x558614394aa0 'String'
|       | `-CXXRecord 0x558614394a10 'String'
|       |-BuiltinType 0x558614068580 'int'
|       `-DecayedType 0x558614550750 '__va_list_tag *' sugar
|         |-TypedefType 0x558614550720 'va_list' sugar
|         | |-Typedef 0x558614286b60 'va_list'
|         | `-TypedefType 0x558614286b10 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5586141be758 '__gnuc_va_list'
|         |   `-TypedefType 0x5586141be6c0 '__builtin_va_list' sugar
|         |     |-Typedef 0x5586140a9d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5586140a9ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5586140692d0 '__va_list_tag'
|         |         `-CXXRecord 0x558614069238 '__va_list_tag'
|         `-PointerType 0x55861428c400 '__va_list_tag *'
|           `-RecordType 0x5586140692d0 '__va_list_tag'
|             `-CXXRecord 0x558614069238 '__va_list_tag'
|-EnumDecl 0x5586146c4140 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5586146c4240 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586146c47a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146c4220 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5586146c4200 <col:16> 'int' 1
| |-EnumConstantDecl 0x5586146c42d0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586146c47b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146c42b0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5586146c4290 <col:21> 'int' 2
| |-EnumConstantDecl 0x5586146c4360 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586146c47d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146c4340 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5586146c4320 <col:22> 'int' 4
| |-EnumConstantDecl 0x5586146c43f0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586146c47e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146c43d0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5586146c43b0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5586146c4480 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586146c4800 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146c4460 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5586146c4440 <col:22> 'int' 16
| |-EnumConstantDecl 0x5586146c4510 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586146c4818 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146c44f0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5586146c44d0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5586146c45a0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586146c4830 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146c4580 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5586146c4560 <col:17> 'int' 64
| |-EnumConstantDecl 0x5586146c4630 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586146c4848 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146c4610 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5586146c45f0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5586146c46c0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586146c4860 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146c46a0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5586146c4680 <col:16> 'int' 256
| `-EnumConstantDecl 0x5586146c4750 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5586146c4878 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586146c4730 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5586146c4710 <col:12> 'int' 1024
|-CXXMethodDecl 0x5586146c4a88 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5586146c48a0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5586146c4940 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5586146c4c10 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5586146c4b48 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5586146c4cb8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5586146c4cf8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5586146c4d58 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5586146c4dd0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5586146c51d0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5586146c4e48 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5586146c4ec8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5586146c4f48 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5586146c4fc0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5586146c5038 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5586146c50b0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5586146c52f8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5586146c52f8
| `-ParmVarDecl 0x5586146c5408 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5586146c7508 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5586146c7508
  `-ParmVarDecl 0x5586146c7618 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55861454f798 prev 0x55861458ff18 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55861454f890 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55861454f920 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55861454fa58 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55861454f958 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558614550e80 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558614550e60 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5586145509f8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558614550f10 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558614550ed0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55861454f958 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558614550a60 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558614550f90 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558614550f50 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558614550ac0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558614550fd0 <col:54> 'bool' false
| `-CompoundStmt 0x5586145510d8 <col:61, line:38:5>
|   `-BinaryOperator 0x5586145510b8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x558614551050 <col:9> 'const Element *' lvalue ->_context 0x558614550998
|     | `-CXXThisExpr 0x558614551040 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5586145510a0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x558614551080 <col:20> 'int' 0
|-CXXConstructorDecl 0x55861454fc68 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55861454fb18 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55861454fb90 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558614550eb8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558614550e98 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x558614550998 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x558614551130 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5586145510f0 <col:20> 'const Element *' lvalue ParmVar 0x55861454fb18 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5586145509f8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5586145511b0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558614551170 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55861454fb90 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558614550a60 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558614551230 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5586145511f0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x558614550ac0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558614551270 <col:73> 'bool' false
| `-CompoundStmt 0x5586145512e8 <col:80, line:46:5>
|-CXXMethodDecl 0x55861454fd98 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x558614551360 <col:36, line:51:5>
|   `-ReturnStmt 0x558614551350 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x558614551338 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x558614551308 <col:16> 'const Element *const' lvalue ->_context 0x558614550998
|         `-CXXThisExpr 0x5586145512f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55861454fe88 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5586145513e0 <col:32, line:57:5>
|   `-ReturnStmt 0x5586145513d0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5586145513b8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x558614551388 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5586145509f8
|         `-CXXThisExpr 0x558614551378 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55861454ff48 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5586145500d0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x558614550000 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558614550220 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x558614550190 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558614550370 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5586145502e0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558614550578 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x558614550428 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5586145504a0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5586145508a8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x558614550638 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5586145506b8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x558614550780 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x558614550960 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x558614550998 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5586145509f8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x558614550a60 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x558614550ac0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x558614550b10 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x558614550b10
| `-ParmVarDecl 0x558614550c28 <col:7> col:7 'const ArgContext &'
`-CXXMethodDecl 0x558614550cc8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x558614550cc8
  `-ParmVarDecl 0x558614550dd8 <col:7> col:7 'const ArgContext &'

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55861461d4c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55861461d698 prev 0x55861461d4c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55861461d728 <col:46, col:52> col:46 public
|-TypedefDecl 0x55861461d750 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861461f0b0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55861461f060 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55861461f040 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55861461d968 'type'
|     `-SubstTemplateTypeParmType 0x55861461d930 'String' sugar
|       |-TemplateTypeParmType 0x5586143592c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614359270 'T'
|       `-RecordType 0x558614394aa0 'String'
|         `-CXXRecord 0x558614394a10 'String'
|-TypedefDecl 0x55861461f168 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55861461f130 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55861461f110 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55861461f0b0 'type'
|     `-ElaboratedType 0x55861461f060 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55861461f040 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55861461d968 'type'
|         `-SubstTemplateTypeParmType 0x55861461d930 'String' sugar
|           |-TemplateTypeParmType 0x5586143592c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558614359270 'T'
|           `-RecordType 0x558614394aa0 'String'
|             `-CXXRecord 0x558614394a10 'String'
|-CXXMethodDecl 0x55861461f2e8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55861461f1f8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55861461f3d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55861461f4b8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55861461f4b8
|-CXXMethodDecl 0x55861461f788 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55861461f690 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55861461f9c8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55861461f840 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55861461f8b8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55861461fb98 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55861461fa88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55861461fb00 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55861461fcf8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55861461fdc8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558614620018 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55861461fe88 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55861461ff00 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558614620278 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5586146200e8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558614620160 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558614620438 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558614620348 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5586146205f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558614620500 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5586146206b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558614620760 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558614620998 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558614620810 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558614620888 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558614620c38 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558614620b40 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x558614620d00 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x558614620d50 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558614620da0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586145cd470 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55861461c168 prev 0x5586145cd470 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55861461d430 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55861461d3e0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55861461d3c0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55861461d270 'type'
|     `-SubstTemplateTypeParmType 0x55861461d100 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55861432f070 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55861432f018 'F'
|       `-RecordType 0x55861461cd60 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55861461cc80 'typed_array_memory'
|-FieldDecl 0x558614620df0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x558614620e40 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558614620e78 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55861461c200 'String' sugar
|   |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558614366588 'T'
|   `-RecordType 0x558614394aa0 'String'
|     `-CXXRecord 0x558614394a10 'String'
|-TypedefDecl 0x558614620f08 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x558614620ed0 'String &'
|   `-SubstTemplateTypeParmType 0x55861461c200 'String' sugar
|     |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558614366588 'T'
|     `-RecordType 0x558614394aa0 'String'
|       `-CXXRecord 0x558614394a10 'String'
|-TypedefDecl 0x558614620f98 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x558614620f60 'const String &'
|   `-QualType 0x55861461c201 'const String' const
|     `-SubstTemplateTypeParmType 0x55861461c200 'String' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-RecordType 0x558614394aa0 'String'
|         `-CXXRecord 0x558614394a10 'String'
|-TypedefDecl 0x558614621028 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x558614620ff0 'String *'
|   `-SubstTemplateTypeParmType 0x55861461c200 'String' sugar
|     |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558614366588 'T'
|     `-RecordType 0x558614394aa0 'String'
|       `-CXXRecord 0x558614394a10 'String'
|-TypedefDecl 0x5586146210b8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x558614621080 'const String *'
|   `-QualType 0x55861461c201 'const String' const
|     `-SubstTemplateTypeParmType 0x55861461c200 'String' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-RecordType 0x558614394aa0 'String'
|         `-CXXRecord 0x558614394a10 'String'
|-TypedefDecl 0x558614621d10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x558614621cc0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x558614621ca0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x558614621bd8 'type'
|     `-LValueReferenceType 0x558614621ba0 'const String &'
|       `-QualType 0x558614621941 'const String' const
|         `-SubstTemplateTypeParmType 0x558614621940 'String' sugar
|           |-TemplateTypeParmType 0x558614338fc0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558614338f68 'T'
|           `-RecordType 0x558614394aa0 'String'
|             `-CXXRecord 0x558614394a10 'String'
|-TypedefDecl 0x558614621d78 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x558614620f60 'const String &'
|   `-QualType 0x55861461c201 'const String' const
|     `-SubstTemplateTypeParmType 0x55861461c200 'String' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-RecordType 0x558614394aa0 'String'
|         `-CXXRecord 0x558614394a10 'String'
|-TypedefDecl 0x558614621dd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x558614621e38 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x558614620ff0 'String *'
|   `-SubstTemplateTypeParmType 0x55861461c200 'String' sugar
|     |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558614366588 'T'
|     `-RecordType 0x558614394aa0 'String'
|       `-CXXRecord 0x558614394a10 'String'
|-TypedefDecl 0x558614621ea0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x558614621080 'const String *'
|   `-QualType 0x55861461c201 'const String' const
|     `-SubstTemplateTypeParmType 0x55861461c200 'String' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-RecordType 0x558614394aa0 'String'
|         `-CXXRecord 0x558614394a10 'String'
|-EnumDecl 0x558614621ef8 <line:134:5> col:5
| `-EnumConstantDecl 0x558614621ff0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558614621fd0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558614367c68 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558614367c40 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558614367c20 <col:40> 'int' 1
|-CXXConstructorDecl 0x558614622078 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558614622308 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558614622130 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586146221d0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x558614622598 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x558614622480 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x558614622858 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x558614622740 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x558614622b70 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x558614622a50 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x558614622e80 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x558614622d60 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x558614623170 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558614622fb8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558614623030 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558614623298 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558614623348 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586146233a0 <col:30> Inherited
|-CXXMethodDecl 0x5586146233e8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558614623498 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586146234f0 <col:30> Inherited
|-CXXMethodDecl 0x5586146235b8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558614623668 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586146236c0 <col:30> Inherited
|-CXXMethodDecl 0x558614623708 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5586146237b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558614623810 <col:30> Inherited
|-CXXMethodDecl 0x558614623858 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558614623908 <col:20> Inherited
| `-OptimizeNoneAttr 0x558614623960 <col:30> Inherited
|-CXXMethodDecl 0x5586146239a8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558614623a58 <col:20> Inherited
| `-OptimizeNoneAttr 0x558614623ab0 <col:30> Inherited
|-CXXMethodDecl 0x558614623ad8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558614624010 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5586146240c0 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558614624280 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558614624170 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586146241e8 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5586146243d0 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558614624340 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558614624578 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x558614624488 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558614624630 <col:20>
| `-OptimizeNoneAttr 0x558614624688 <col:30>
|-CXXMethodDecl 0x5586146247a8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5586146246b0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558614624860 <col:20>
| `-OptimizeNoneAttr 0x5586146248b8 <col:30>
|-CXXMethodDecl 0x558614624970 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5586146248e0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558614624ab8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558614624a28 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558614624be8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x558614624ce8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x558614624db8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x558614624e88 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x558614624fc8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558614624f38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558614625110 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558614625080 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558614625258 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5586146251c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558614625310 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558614625410 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558614625380 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5586146254c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558614625588 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x558614625688 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x558614625808 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558614625748 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x558614625f98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5586146258c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x558614625ef8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x558614625df8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x558614626078 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5586146261c8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558614626138 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558614626280 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5586146264c8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558614626340 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5586146263b8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558614626658 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x558614626598 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558614626868 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x558614626720 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558614626798 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558614626928 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558614626b88 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x558614626a90 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x558614626c58 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x558614626c58

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558614660a78 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x558614660c88 prev 0x558614660a78 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55861466d5b0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55861466d560 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55861466d540 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55861466d3f0 'type'
|     `-SubstTemplateTypeParmType 0x5586145e5a10 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55861432e8f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55861432e898 'T'
|       `-RecordType 0x5586145e5560 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5586145e5478 'sized_array_memory'
|-FieldDecl 0x55861466d6b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55861466d700 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55861466d738 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x558614660d20 'int' sugar
|   |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558614366588 'T'
|   `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861466d7c8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55861466d790 'int &'
|   `-SubstTemplateTypeParmType 0x558614660d20 'int' sugar
|     |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558614366588 'T'
|     `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861466d888 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55861466d850 'const int &'
|   `-QualType 0x558614660d21 'const int' const
|     `-SubstTemplateTypeParmType 0x558614660d20 'int' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861466d918 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55861466d8e0 'int *'
|   `-SubstTemplateTypeParmType 0x558614660d20 'int' sugar
|     |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558614366588 'T'
|     `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861466d9a8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55861466d970 'const int *'
|   `-QualType 0x558614660d21 'const int' const
|     `-SubstTemplateTypeParmType 0x558614660d20 'int' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861466e590 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55861466e540 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55861466e520 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55861466e4b0 'type'
|     `-SubstTemplateTypeParmType 0x55861466e270 'int' sugar
|       |-TemplateTypeParmType 0x5586143396f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586143396a0 'T'
|       `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861466e5f8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55861466d850 'const int &'
|   `-QualType 0x558614660d21 'const int' const
|     `-SubstTemplateTypeParmType 0x558614660d20 'int' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861466e650 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861466e6b8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55861466d8e0 'int *'
|   `-SubstTemplateTypeParmType 0x558614660d20 'int' sugar
|     |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558614366588 'T'
|     `-BuiltinType 0x558614068580 'int'
|-TypedefDecl 0x55861466e720 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55861466d970 'const int *'
|   `-QualType 0x558614660d21 'const int' const
|     `-SubstTemplateTypeParmType 0x558614660d20 'int' sugar
|       |-TemplateTypeParmType 0x5586143665e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558614366588 'T'
|       `-BuiltinType 0x558614068580 'int'
|-EnumDecl 0x55861466e778 <line:134:5> col:5
| `-EnumConstantDecl 0x55861466e870 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55861466e850 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558614367c68 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558614367c40 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558614367c20 <col:40> 'int' 1
|-CXXConstructorDecl 0x55861466e8f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55861466eb48 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55861466e9b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55861466ea50 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55861466ee08 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55861466ecf0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55861466f0c8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55861466efb0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55861466f410 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55861466f2f0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55861466f720 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55861466f600 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55861466fa10 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55861466f858 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55861466f8d0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55861466fb38 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55861466fc18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55861466fc70 <col:30> Inherited
|-CXXMethodDecl 0x55861466fcb8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55861466fd68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55861466fdc0 <col:30> Inherited
|-CXXMethodDecl 0x55861466fe88 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55861466ff38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55861466ff90 <col:30> Inherited
|-CXXMethodDecl 0x55861466ffd8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558614670088 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586146700e0 <col:30> Inherited
|-CXXMethodDecl 0x558614670128 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5586146701d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558614670230 <col:30> Inherited
|-CXXMethodDecl 0x558614670278 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558614670328 <col:20> Inherited
| `-OptimizeNoneAttr 0x558614670380 <col:30> Inherited
|-CXXMethodDecl 0x5586146703a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558614670458 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558614670508 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5586146706c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5586146705b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558614670630 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558614670818 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558614670788 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586146709c8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5586146708d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558614670a80 <col:20>
| `-OptimizeNoneAttr 0x558614670ad8 <col:30>
|-CXXMethodDecl 0x558614670bf8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x558614670b00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558614670cb0 <col:20>
| `-OptimizeNoneAttr 0x558614670d08 <col:30>
|-CXXMethodDecl 0x558614670dc0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558614670d30 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558614670f08 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558614670e78 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558614671038 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x558614671168 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x558614671238 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x558614671308 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x558614671448 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5586146713b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558614671590 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558614671500 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586146716d8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x558614671648 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558614671790 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558614671890 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558614671800 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558614671948 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558614671a08 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x558614671b08 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x558614671c88 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558614671bc8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x558614672448 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558614671d40 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5586146723a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5586146722a8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x558614672528 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558614672678 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5586146725e8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558614672730 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558614672978 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5586146727f0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558614672868 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558614672b38 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x558614672a48 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558614672d88 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x558614672c00 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558614672c78 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558614672e48 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5586146730a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x558614672fb0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x558614673178 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x558614673178

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55861465ebe8 prev 0x558614644700 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55861465ece0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55861465edd0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x558614684be0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55861465eec0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x558614684bf0 <col:25, line:830:9>
|-CXXMethodDecl 0x55861465efc0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55861465f070 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55861465f118 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55861465f118
| `-ParmVarDecl 0x55861465f228 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55861465f9e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55861465f9e8
  `-ParmVarDecl 0x55861465faf8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558614644538 prev 0x5586145e3218 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x558614644670 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x558614644700 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5586146447b0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5586146448b8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5586146447e8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558614674738 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558614674718 <col:31> 'int' 0
|-CXXConstructorDecl 0x558614644bd8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x558614644a50 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x558614644ac8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558614674770 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558614674750 <col:59> 'int' 0
|-CXXConstructorDecl 0x558614644db0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558614644ca0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x558614644d18 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5586146747a8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558614674788 <col:55> 'int' 0
|-CXXConstructorDecl 0x558614645168 <line:271:5, line:272:32> line:271:5 Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558614644f50 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x558614644fc8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x558614645040 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5586146747e0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5586146747c0 <col:31> 'int' 0
|-CXXConstructorDecl 0x558614645328 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x558614645268 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x558614645420 <line:281:5, col:11> col:5 ~Args 'void ()' noexcept-unevaluated 0x558614645420
|-CXXMethodDecl 0x5586146455d8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x558614645510 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5586146456c8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x558614674b90 <col:24, line:291:5>
|   `-ReturnStmt 0x558614674b80 <line:290:9, col:79>
|     `-BinaryOperator 0x558614674b60 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x558614674a38 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x558614674990 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x558614674970 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x558614674868 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x558614674850 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x558614674838 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x558614674808 <col:18> 'Vector<String> *const' lvalue ->_conf 0x558614660a10
|       | |   |       `-CXXThisExpr 0x5586146747f8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x558614674958 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x558614674940 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x558614674908 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5586146748d8 <col:28, col:35> '<bound member function type>' ->size 0x558614623ad8
|       | |           `-ImplicitCastExpr 0x558614674928 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5586146748c0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x558614674890 <col:28> 'Vector<String> *const' lvalue ->_conf 0x558614660a10
|       | |                 `-CXXThisExpr 0x558614674880 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x558614674a20 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x558614674a08 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5586146749f0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5586146749c0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5586146732c0
|       |         `-CXXThisExpr 0x5586146749b0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x558614674b40 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x558614674b28 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558614674b10 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558614674ad0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558614674ab8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558614674a68 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558614673370
|         |     |   `-CXXThisExpr 0x558614674a58 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558614674a98 <col:73> 'int' 0
|         `-IntegerLiteral 0x558614674af0 <col:79> 'int' 0
|-CXXMethodDecl 0x558614645788 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x558614674d68 <col:32, line:296:5>
|   `-ReturnStmt 0x558614674d58 <line:295:9, col:49>
|     `-BinaryOperator 0x558614674d38 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x558614674c18 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x558614674c00 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x558614674be8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x558614674bb8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5586146732c0
|       |       `-CXXThisExpr 0x558614674ba8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x558614674d18 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x558614674d00 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558614674ce8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558614674ca8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558614674c90 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558614674c40 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558614673370
|         |     |   `-CXXThisExpr 0x558614674c30 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558614674c70 <col:43> 'int' 0
|         `-IntegerLiteral 0x558614674cc8 <col:49> 'int' 0
|-CXXMethodDecl 0x558614645878 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x558614676548 <col:19, line:306:5>
|   |-IfStmt 0x558614676468 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x558614674dd8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x558614674dc0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x558614674d90 <col:13> 'Vector<String> *' lvalue ->_conf 0x558614660a10
|   | |     `-CXXThisExpr 0x558614674d80 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x558614676448 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x558614676418 <col:13, col:20> '<bound member function type>' ->clear 0x558614626928
|   |     `-ImplicitCastExpr 0x558614676400 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x558614674e00 <col:13> 'Vector<String> *' lvalue ->_conf 0x558614660a10
|   |         `-CXXThisExpr 0x558614674df0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5586146764f0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5586146764c0 <col:9, col:16> '<bound member function type>' .clear 0x558614672e48
|   |   `-MemberExpr 0x558614676490 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x558614673260
|   |     `-CXXThisExpr 0x558614676480 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x558614676538 <line:305:9, col:17>
|     `-UnaryOperator 0x558614676520 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558614676510 <col:17> 'Args *' this
|-CXXMethodDecl 0x558614645af8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x558614645a00 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x558614645c78 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x558614645bb0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x558614645ff8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x558614645d20 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x558614645f58 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x558614645dc8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x558614645e40 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x558614676868 <col:67, line:327:5>
|     |-WhileStmt 0x558614676818 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x558614676630 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5586146765b0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5586145883e8 0x5586143d17a8 0x5586143d1480 0x5586143c1c50 0x5586143c1900 0x5586143c11f0 0x558614393b60 0x558614321030
|     | | |-DeclRefExpr 0x558614676570 <col:16> 'Iter' lvalue ParmVar 0x558614645dc8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x558614676590 <col:25> 'Iter' lvalue ParmVar 0x558614645e40 'end' 'Iter'
|     | `-CompoundStmt 0x5586146767f8 <col:30, line:325:9>
|     |   |-CallExpr 0x558614676798 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x558614676678 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x558614676768 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5586146766f8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|     |   |   `-DeclRefExpr 0x5586146766d8 <col:24> 'Iter' lvalue ParmVar 0x558614645dc8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5586146767e0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5586146767c0 <col:15> 'Iter' lvalue ParmVar 0x558614645dc8 'begin' 'Iter'
|     `-ReturnStmt 0x558614676858 <line:326:9, col:17>
|       `-UnaryOperator 0x558614676840 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558614676830 <col:17> 'Args *' this
|-CXXMethodDecl 0x558614646100 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x558614646070 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x558614646248 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5586146461b8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x558614646310 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x558614676948 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5586146768e8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x558614676898 <col:9> '<bound member function type>' ->reset_from 0x5586146736e8
|   | | `-CXXThisExpr 0x558614676888 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5586146768c8 <col:20> 'int' 0
|   `-ReturnStmt 0x558614676938 <line:352:9, col:17>
|     `-UnaryOperator 0x558614676920 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558614676910 <col:17> 'Args *' this
|-VarDecl 0x5586146463c8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x558614646430 <col:38> 'int' 1
|-VarDecl 0x5586146464c0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x558614646528 <col:39> 'int' 2
|-VarDecl 0x5586146465b8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x558614646620 <col:39> 'int' 4
|-VarDecl 0x5586146466b0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x558614646718 <col:39> 'int' 8
|-FunctionTemplateDecl 0x558614646a98 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x558614646790 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5586146469f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558614646840 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586146468e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x558614676aa0 <col:43, line:371:5>
|     `-ReturnStmt 0x558614676a90 <line:370:9, col:34>
|       `-CallExpr 0x558614676a58 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614676978 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586146769f8 <col:21> 'const char *' lvalue ParmVar 0x558614646840 'keyword' 'const char *'
|         |-IntegerLiteral 0x558614676a18 <col:30> 'int' 0
|         `-DeclRefExpr 0x558614676a38 <col:33> 'T' lvalue ParmVar 0x5586146468e8 'x' 'T &'
|-FunctionTemplateDecl 0x558614646dc8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x558614646b00 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558614646d28 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558614646bb0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614646c58 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558614676bf0 <col:45, line:375:5>
|     `-ReturnStmt 0x558614676be0 <line:374:9, col:42>
|       `-CallExpr 0x558614676ba8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614676ac8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614676b48 <col:21> 'const char *' lvalue ParmVar 0x558614646bb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614676b68 <col:30> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x558614676b88 <col:41> 'T' lvalue ParmVar 0x558614646c58 'x' 'T &'
|-FunctionTemplateDecl 0x5586146470f8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x558614646e30 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558614647058 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558614646ee0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614646f88 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558614676d40 <col:45, line:379:5>
|     `-ReturnStmt 0x558614676d30 <line:378:9, col:43>
|       `-CallExpr 0x558614676cf8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614676c18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614676c98 <col:21> 'const char *' lvalue ParmVar 0x558614646ee0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614676cb8 <col:30> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int'
|         `-DeclRefExpr 0x558614676cd8 <col:42> 'T' lvalue ParmVar 0x558614646f88 'x' 'T &'
|-FunctionTemplateDecl 0x558614647428 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x558614647160 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558614647388 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558614647210 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586146472b8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x558614676f40 <col:46, line:383:5>
|     `-ReturnStmt 0x558614676f30 <line:382:9, col:55>
|       `-CallExpr 0x558614676ef8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614676d68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614676de8 <col:21> 'const char *' lvalue ParmVar 0x558614647210 'keyword' 'const char *'
|         |-BinaryOperator 0x558614676eb8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558614676e68 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558614676e48 <col:30> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558614676ea0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558614676e80 <col:42> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x558614676ed8 <col:54> 'T' lvalue ParmVar 0x5586146472b8 'x' 'T &'
|-FunctionTemplateDecl 0x558614647828 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x558614647490 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558614647788 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x558614647540 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586146475c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558614647668 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x558614677080 <col:54, line:388:5>
|     |-CallExpr 0x558614677008 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558614676f58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558614676f98 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558614676fa8 <col:30> 'const char *' lvalue ParmVar 0x558614647540 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558614676fc8 <col:39> 'int' lvalue ParmVar 0x5586146475c0 'flags' 'int'
|     | `-DeclRefExpr 0x558614676fe8 <col:46> 'T' lvalue ParmVar 0x558614647668 'x' 'T &'
|     `-ReturnStmt 0x558614677070 <line:387:9, col:17>
|       `-UnaryOperator 0x558614677058 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558614677048 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558614647cd8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x558614647898 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558614647918 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558614647c38 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5586146479d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614647a78 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x558614647b18 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5586146771f0 <col:74, line:403:5>
|     `-ReturnStmt 0x5586146771e0 <line:402:9, col:56>
|       `-CallExpr 0x5586146771a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586146770b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614677120 <col:28> 'const char *' lvalue ParmVar 0x5586146479d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558614677140 <col:37> 'int' 0
|         |-DeclRefExpr 0x558614677160 <col:40> 'T' lvalue ParmVar 0x558614647a78 'x' 'T &'
|         `-DeclRefExpr 0x558614677180 <col:43> 'const V' lvalue ParmVar 0x558614647b18 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558614648148 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558614647d48 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558614647dc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5586146480a8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558614647e88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614647f28 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x558614647fc8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x558614677358 <col:76, line:407:5>
|     `-ReturnStmt 0x558614677348 <line:406:9, col:65>
|       `-CallExpr 0x558614677308 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614677218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614677288 <col:28> 'const char *' lvalue ParmVar 0x558614647e88 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586146772a8 <col:37> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int'
|         |-DeclRefExpr 0x5586146772c8 <col:49> 'T' lvalue ParmVar 0x558614647f28 'x' 'T &'
|         `-DeclRefExpr 0x5586146772e8 <col:52> 'const V' lvalue ParmVar 0x558614647fc8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55861464cad8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5586146481b8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558614648238 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55861464ca38 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55861464c730 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464c7b0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55861464c858 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55861464c8f8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5586146774c0 <col:85, line:412:5>
|     |-CallExpr 0x558614677440 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558614677370 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5586146773b0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5586146773c0 <col:37> 'const char *' lvalue ParmVar 0x55861464c730 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5586146773e0 <col:46> 'int' lvalue ParmVar 0x55861464c7b0 'flags' 'int'
|     | |-DeclRefExpr 0x558614677400 <col:53> 'T' lvalue ParmVar 0x55861464c858 'x' 'T &'
|     | `-DeclRefExpr 0x558614677420 <col:56> 'const V' lvalue ParmVar 0x55861464c8f8 'default_value' 'const V &'
|     `-ReturnStmt 0x5586146774b0 <line:411:9, col:17>
|       `-UnaryOperator 0x558614677498 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558614677488 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55861464cf68 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55861464cb50 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464cbc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861464cec8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55861464cc88 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464cd00 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55861464cda8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x558614677640 <col:53, line:425:5>
|     `-ReturnStmt 0x558614677630 <line:424:9, col:42>
|       `-CallExpr 0x5586146775f0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586146774f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614677570 <col:21> 'const char *' lvalue ParmVar 0x55861464cc88 'keyword' 'const char *'
|         |-IntegerLiteral 0x558614677590 <col:30> 'int' 0
|         |-DeclRefExpr 0x5586146775b0 <col:33> 'P' lvalue ParmVar 0x55861464cd00 'parser' 'P'
|         `-DeclRefExpr 0x5586146775d0 <col:41> 'T' lvalue ParmVar 0x55861464cda8 'x' 'T &'
|-FunctionTemplateDecl 0x55861464d3b8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55861464cfd8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464d058 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861464d318 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55861464d118 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464d190 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55861464d238 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5586146777b8 <col:55, line:429:5>
|     `-ReturnStmt 0x5586146777a8 <line:428:9, col:50>
|       `-CallExpr 0x558614677768 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614677668 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586146776e8 <col:21> 'const char *' lvalue ParmVar 0x55861464d118 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614677708 <col:30> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x558614677728 <col:41> 'P' lvalue ParmVar 0x55861464d190 'parser' 'P'
|         `-DeclRefExpr 0x558614677748 <col:49> 'T' lvalue ParmVar 0x55861464d238 'x' 'T &'
|-FunctionTemplateDecl 0x55861464d808 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55861464d428 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464d4a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861464d768 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55861464d568 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464d5e0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55861464d688 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558614677930 <col:55, line:433:5>
|     `-ReturnStmt 0x558614677920 <line:432:9, col:51>
|       `-CallExpr 0x5586146778e0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586146777e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614677860 <col:21> 'const char *' lvalue ParmVar 0x55861464d568 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614677880 <col:30> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int'
|         |-DeclRefExpr 0x5586146778a0 <col:42> 'P' lvalue ParmVar 0x55861464d5e0 'parser' 'P'
|         `-DeclRefExpr 0x5586146778c0 <col:50> 'T' lvalue ParmVar 0x55861464d688 'x' 'T &'
|-FunctionTemplateDecl 0x55861464dc58 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55861464d878 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464d8f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861464dbb8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55861464d9b8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464da30 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55861464dad8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x558614677b58 <col:56, line:437:5>
|     `-ReturnStmt 0x558614677b48 <line:436:9, col:63>
|       `-CallExpr 0x558614677b08 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614677958 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586146779d8 <col:21> 'const char *' lvalue ParmVar 0x55861464d9b8 'keyword' 'const char *'
|         |-BinaryOperator 0x558614677aa8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558614677a58 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558614677a38 <col:30> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558614677a90 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558614677a70 <col:42> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558614677ac8 <col:54> 'P' lvalue ParmVar 0x55861464da30 'parser' 'P'
|         `-DeclRefExpr 0x558614677ae8 <col:62> 'T' lvalue ParmVar 0x55861464dad8 'x' 'T &'
|-FunctionTemplateDecl 0x55861464e188 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55861464dcc8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464dd48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861464e0e8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55861464de08 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464de88 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55861464df00 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55861464dfa8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x558614677cc0 <col:64, line:442:5>
|     |-CallExpr 0x558614677c40 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558614677b70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558614677bb0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558614677bc0 <col:30> 'const char *' lvalue ParmVar 0x55861464de08 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558614677be0 <col:39> 'int' lvalue ParmVar 0x55861464de88 'flags' 'int'
|     | |-DeclRefExpr 0x558614677c00 <col:46> 'P' lvalue ParmVar 0x55861464df00 'parser' 'P'
|     | `-DeclRefExpr 0x558614677c20 <col:54> 'T' lvalue ParmVar 0x55861464dfa8 'x' 'T &'
|     `-ReturnStmt 0x558614677cb0 <line:441:9, col:17>
|       `-UnaryOperator 0x558614677c98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558614677c88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55861464e788 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55861464e200 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464e278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55861464e2f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55861464e6e8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55861464e3c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464e438 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55861464e4d8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55861464e5a8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x558614677e58 <col:84, line:458:5>
|     `-ReturnStmt 0x558614677e48 <line:457:9, col:64>
|       `-CallExpr 0x558614677e00 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614677cf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614677d60 <col:28> 'const char *' lvalue ParmVar 0x55861464e3c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558614677d80 <col:37> 'int' 0
|         |-DeclRefExpr 0x558614677da0 <col:40> 'P' lvalue ParmVar 0x55861464e438 'parser' 'P'
|         |-DeclRefExpr 0x558614677dc0 <col:48> 'T' lvalue ParmVar 0x55861464e4d8 'x' 'T &'
|         `-DeclRefExpr 0x558614677de0 <col:51> 'const V' lvalue ParmVar 0x55861464e5a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55861464ed08 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55861464e800 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464e878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55861464e8f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55861464ec68 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55861464e9c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464ea38 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55861464ead8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55861464eb78 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x558614677fe8 <col:86, line:462:5>
|     `-ReturnStmt 0x558614677fd8 <line:461:9, col:73>
|       `-CallExpr 0x558614677f90 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614677e80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614677ef0 <col:28> 'const char *' lvalue ParmVar 0x55861464e9c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614677f10 <col:37> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int'
|         |-DeclRefExpr 0x558614677f30 <col:49> 'P' lvalue ParmVar 0x55861464ea38 'parser' 'P'
|         |-DeclRefExpr 0x558614677f50 <col:57> 'T' lvalue ParmVar 0x55861464ead8 'x' 'T &'
|         `-DeclRefExpr 0x558614677f70 <col:60> 'const V' lvalue ParmVar 0x55861464eb78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55861464f368 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55861464ed80 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464edf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55861464ee78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55861464f2c8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55861464ef40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464efc0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55861464f038 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55861464f0d8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55861464f178 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x558614678178 <col:95, line:467:5>
|     |-CallExpr 0x5586146780f0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558614678000 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558614678040 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558614678050 <col:37> 'const char *' lvalue ParmVar 0x55861464ef40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558614678070 <col:46> 'int' lvalue ParmVar 0x55861464efc0 'flags' 'int'
|     | |-DeclRefExpr 0x558614678090 <col:53> 'P' lvalue ParmVar 0x55861464f038 'parser' 'P'
|     | |-DeclRefExpr 0x5586146780b0 <col:61> 'T' lvalue ParmVar 0x55861464f0d8 'x' 'T &'
|     | `-DeclRefExpr 0x5586146780d0 <col:64> 'const V' lvalue ParmVar 0x55861464f178 'default_value' 'const V &'
|     `-ReturnStmt 0x558614678168 <line:466:9, col:17>
|       `-UnaryOperator 0x558614678150 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558614678140 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55861464f948 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55861464f3e8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464f468 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55861464f4e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55861464f8a8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55861464f5b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464f628 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55861464f6c8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55861464f768 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x558614678320 <col:63, line:481:5>
|     `-ReturnStmt 0x558614678310 <line:480:9, col:47>
|       `-CallExpr 0x5586146782c8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586146781a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614678228 <col:21> 'const char *' lvalue ParmVar 0x55861464f5b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558614678248 <col:30> 'int' 0
|         |-DeclRefExpr 0x558614678268 <col:33> 'P' lvalue ParmVar 0x55861464f628 'parser' 'P'
|         |-DeclRefExpr 0x558614678288 <col:41> 'T1' lvalue ParmVar 0x55861464f6c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5586146782a8 <col:45> 'T2' lvalue ParmVar 0x55861464f768 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55861464fec8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55861464f9c0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464fa38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55861464fab8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55861464fe28 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55861464fb80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861464fbf8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55861464fc98 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55861464fd38 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5586146784c0 <col:65, line:485:5>
|     `-ReturnStmt 0x5586146784b0 <line:484:9, col:55>
|       `-CallExpr 0x558614678468 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614678348 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586146783c8 <col:21> 'const char *' lvalue ParmVar 0x55861464fb80 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586146783e8 <col:30> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x558614678408 <col:41> 'P' lvalue ParmVar 0x55861464fbf8 'parser' 'P'
|         |-DeclRefExpr 0x558614678428 <col:49> 'T1' lvalue ParmVar 0x55861464fc98 'x1' 'T1 &'
|         `-DeclRefExpr 0x558614678448 <col:53> 'T2' lvalue ParmVar 0x55861464fd38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558614650448 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55861464ff40 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861464ffb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558614650038 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5586146503a8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558614650100 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614650178 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558614650218 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5586146502b8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558614678660 <col:65, line:489:5>
|     `-ReturnStmt 0x558614678650 <line:488:9, col:56>
|       `-CallExpr 0x558614678608 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586146784e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614678568 <col:21> 'const char *' lvalue ParmVar 0x558614650100 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614678588 <col:30> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int'
|         |-DeclRefExpr 0x5586146785a8 <col:42> 'P' lvalue ParmVar 0x558614650178 'parser' 'P'
|         |-DeclRefExpr 0x5586146785c8 <col:50> 'T1' lvalue ParmVar 0x558614650218 'x1' 'T1 &'
|         `-DeclRefExpr 0x5586146785e8 <col:54> 'T2' lvalue ParmVar 0x5586146502b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5586146509c8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5586146504c0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558614650538 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5586146505b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558614650928 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558614650680 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586146506f8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558614650798 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558614650838 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5586146788b0 <col:66, line:493:5>
|     `-ReturnStmt 0x5586146788a0 <line:492:9, col:68>
|       `-CallExpr 0x558614678858 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614678688 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614678708 <col:21> 'const char *' lvalue ParmVar 0x558614650680 'keyword' 'const char *'
|         |-BinaryOperator 0x5586146787d8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558614678788 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558614678768 <col:30> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5586146787c0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5586146787a0 <col:42> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5586146787f8 <col:54> 'P' lvalue ParmVar 0x5586146506f8 'parser' 'P'
|         |-DeclRefExpr 0x558614678818 <col:62> 'T1' lvalue ParmVar 0x558614650798 'x1' 'T1 &'
|         `-DeclRefExpr 0x558614678838 <col:66> 'T2' lvalue ParmVar 0x558614650838 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558614651028 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x558614650a40 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558614650ab8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558614650b38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558614650f88 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558614650c00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614650c80 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558614650cf8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558614650d98 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558614650e38 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x558614678a40 <col:74, line:498:5>
|     |-CallExpr 0x5586146789b8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586146788c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558614678908 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558614678918 <col:30> 'const char *' lvalue ParmVar 0x558614650c00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558614678938 <col:39> 'int' lvalue ParmVar 0x558614650c80 'flags' 'int'
|     | |-DeclRefExpr 0x558614678958 <col:46> 'P' lvalue ParmVar 0x558614650cf8 'parser' 'P'
|     | |-DeclRefExpr 0x558614678978 <col:54> 'T1' lvalue ParmVar 0x558614650d98 'x1' 'T1 &'
|     | `-DeclRefExpr 0x558614678998 <col:58> 'T2' lvalue ParmVar 0x558614650e38 'x2' 'T2 &'
|     `-ReturnStmt 0x558614678a30 <line:497:9, col:17>
|       `-UnaryOperator 0x558614678a18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558614678a08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558614651388 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5586146510a8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586146512e8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558614651160 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586146511d8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x558614678b88 <col:52, line:509:5>
|     `-ReturnStmt 0x558614678b78 <line:508:9, col:44>
|       `-CallExpr 0x558614678b40 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614678a70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614678ae0 <col:26> 'const char *' lvalue ParmVar 0x558614651160 'keyword' 'const char *'
|         |-IntegerLiteral 0x558614678b00 <col:35> 'int' 0
|         `-DeclRefExpr 0x558614678b20 <col:38> 'P' lvalue ParmVar 0x5586146511d8 'parser' 'P'
|-FunctionTemplateDecl 0x558614651688 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5586146513f0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586146515e8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5586146514a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614651518 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558614678cc8 <col:54, line:513:5>
|     `-ReturnStmt 0x558614678cb8 <line:512:9, col:52>
|       `-CallExpr 0x558614678c80 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614678bb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614678c20 <col:26> 'const char *' lvalue ParmVar 0x5586146514a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614678c40 <col:35> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x558614678c60 <col:46> 'P' lvalue ParmVar 0x558614651518 'parser' 'P'
|-FunctionTemplateDecl 0x558614651988 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5586146516f0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586146518e8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5586146517a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614651818 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558614678e08 <col:54, line:517:5>
|     `-ReturnStmt 0x558614678df8 <line:516:9, col:53>
|       `-CallExpr 0x558614678dc0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614678cf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614678d60 <col:26> 'const char *' lvalue ParmVar 0x5586146517a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614678d80 <col:35> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int'
|         `-DeclRefExpr 0x558614678da0 <col:47> 'P' lvalue ParmVar 0x558614651818 'parser' 'P'
|-FunctionTemplateDecl 0x558614651c88 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5586146519f0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558614651be8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558614651aa0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614651b18 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x558614678ff8 <col:55, line:521:5>
|     `-ReturnStmt 0x558614678fe8 <line:520:9, col:65>
|       `-CallExpr 0x558614678fb0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614678e30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614678ea0 <col:26> 'const char *' lvalue ParmVar 0x558614651aa0 'keyword' 'const char *'
|         |-BinaryOperator 0x558614678f70 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x558614678f20 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558614678f00 <col:35> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558614678f58 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558614678f38 <col:47> 'const int' lvalue Var 0x5586146464c0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x558614678f90 <col:59> 'P' lvalue ParmVar 0x558614651b18 'parser' 'P'
|-FunctionTemplateDecl 0x558614652058 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x558614651cf0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558614651fb8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558614651da0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614651e20 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558614651e98 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x558614679138 <col:63, line:526:5>
|     |-CallExpr 0x5586146790c0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558614679010 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x558614679050 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x558614679060 <col:35> 'const char *' lvalue ParmVar 0x558614651da0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558614679080 <col:44> 'int' lvalue ParmVar 0x558614651e20 'flags' 'int'
|     | `-DeclRefExpr 0x5586146790a0 <col:51> 'P' lvalue ParmVar 0x558614651e98 'parser' 'P'
|     `-ReturnStmt 0x558614679128 <line:525:9, col:17>
|       `-UnaryOperator 0x558614679110 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558614679100 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586146524a8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5586146520c8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558614652148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558614652408 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558614652208 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614652280 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x558614652328 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x558614679290 <col:58, line:541:5>
|     `-ReturnStmt 0x558614679280 <line:540:9, col:39>
|       `-CallExpr 0x558614679248 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614679168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586146791e8 <col:21> 'const char *' lvalue ParmVar 0x558614652208 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614679208 <col:30> 'P' lvalue ParmVar 0x558614652280 'parser' 'P'
|         `-DeclRefExpr 0x558614679228 <col:38> 'T' lvalue ParmVar 0x558614652328 'x' 'T &'
|-FunctionTemplateDecl 0x5586146528f8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x558614652518 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558614652598 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558614652858 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558614652658 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586146526d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558614652778 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5586146793c8 <col:60, line:545:5>
|     `-ReturnStmt 0x5586146793b8 <line:544:9, col:41>
|       `-CallExpr 0x558614679380 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586146792b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614679320 <col:23> 'const char *' lvalue ParmVar 0x558614652658 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614679340 <col:32> 'P' lvalue ParmVar 0x5586146526d0 'parser' 'P'
|         `-DeclRefExpr 0x558614679360 <col:40> 'T' lvalue ParmVar 0x558614652778 'x' 'T &'
|-FunctionTemplateDecl 0x558614652d48 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x558614652968 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586146529e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558614652ca8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558614652aa8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614652b20 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558614652bc8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558614679500 <col:60, line:549:5>
|     `-ReturnStmt 0x5586146794f0 <line:548:9, col:41>
|       `-CallExpr 0x5586146794b8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586146793f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614679458 <col:23> 'const char *' lvalue ParmVar 0x558614652aa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614679478 <col:32> 'P' lvalue ParmVar 0x558614652b20 'parser' 'P'
|         `-DeclRefExpr 0x558614679498 <col:40> 'T' lvalue ParmVar 0x558614652bc8 'x' 'T &'
|-FunctionTemplateDecl 0x558614653198 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x558614652db8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558614652e38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586146530f8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558614652ef8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614652f70 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x558614653018 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x558614679638 <col:61, line:553:5>
|     `-ReturnStmt 0x558614679628 <line:552:9, col:42>
|       `-CallExpr 0x5586146795f0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614679528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614679590 <col:24> 'const char *' lvalue ParmVar 0x558614652ef8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586146795b0 <col:33> 'P' lvalue ParmVar 0x558614652f70 'parser' 'P'
|         `-DeclRefExpr 0x5586146795d0 <col:41> 'T' lvalue ParmVar 0x558614653018 'x' 'T &'
|-FunctionTemplateDecl 0x558614653678 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x558614653208 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558614653288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586146535d8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558614653348 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586146533c8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558614653440 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5586146534e8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5586146797b0 <col:69, line:557:5>
|     `-ReturnStmt 0x5586146797a0 <line:556:9, col:46>
|       `-CallExpr 0x558614679760 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614679660 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586146796e0 <col:21> 'const char *' lvalue ParmVar 0x558614653348 'keyword' 'const char *'
|         |-DeclRefExpr 0x558614679700 <col:30> 'int' lvalue ParmVar 0x5586146533c8 'flags' 'int'
|         |-DeclRefExpr 0x558614679720 <col:37> 'P' lvalue ParmVar 0x558614653440 'parser' 'P'
|         `-DeclRefExpr 0x558614679740 <col:45> 'T' lvalue ParmVar 0x5586146534e8 'x' 'T &'
|-FunctionTemplateDecl 0x558614653988 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5586146536f0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586146538e8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5586146537a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614653818 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5586146798f0 <col:56, line:571:5>
|     `-ReturnStmt 0x5586146798e0 <line:570:9, col:48>
|       `-CallExpr 0x5586146798a8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586146797d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614679848 <col:30> 'const char *' lvalue ParmVar 0x5586146537a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558614679868 <col:39> 'int' 0
|         `-DeclRefExpr 0x558614679888 <col:42> 'P' lvalue ParmVar 0x558614653818 'parser' 'P'
|-FunctionTemplateDecl 0x558614653d18 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5586146539f0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558614653c78 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558614653aa0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614653b20 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558614653b98 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558614679ac0 <col:67, line:576:5>
|     |-CallExpr 0x558614679a48 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558614679908 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558614679948 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558614679958 <col:39> 'const char *' lvalue ParmVar 0x558614653aa0 'keyword' 'const char *'
|     | |-BinaryOperator 0x558614679a08 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5586146799b8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558614679978 <col:48> 'int' lvalue ParmVar 0x558614653b20 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5586146799f0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5586146799d0 <col:56> 'const int' lvalue Var 0x5586146466b0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x558614679a28 <col:68> 'P' lvalue ParmVar 0x558614653b98 'parser' 'P'
|     `-ReturnStmt 0x558614679ab0 <line:575:9, col:17>
|       `-UnaryOperator 0x558614679a98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558614679a88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558614654168 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x558614653d88 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558614653e08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586146540c8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558614653ec8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614653f40 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558614653fe8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x558614679c30 <col:62, line:592:5>
|     `-ReturnStmt 0x558614679c20 <line:591:9, col:51>
|       `-CallExpr 0x558614679be0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614679af0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614679b60 <col:30> 'const char *' lvalue ParmVar 0x558614653ec8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558614679b80 <col:39> 'int' 0
|         |-DeclRefExpr 0x558614679ba0 <col:42> 'P' lvalue ParmVar 0x558614653f40 'parser' 'P'
|         `-DeclRefExpr 0x558614679bc0 <col:50> 'T' lvalue ParmVar 0x558614653fe8 'x' 'T &'
|-FunctionTemplateDecl 0x558614654648 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5586146541d8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558614654258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586146545a8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558614654318 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614654398 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558614654410 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5586146544b8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x558614679e28 <col:73, line:597:5>
|     |-CallExpr 0x558614679da8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558614679c48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558614679c88 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558614679c98 <col:39> 'const char *' lvalue ParmVar 0x558614654318 'keyword' 'const char *'
|     | |-BinaryOperator 0x558614679d48 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558614679cf8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558614679cb8 <col:48> 'int' lvalue ParmVar 0x558614654398 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558614679d30 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558614679d10 <col:56> 'const int' lvalue Var 0x5586146466b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558614679d68 <col:68> 'P' lvalue ParmVar 0x558614654410 'parser' 'P'
|     | `-DeclRefExpr 0x558614679d88 <col:76> 'T' lvalue ParmVar 0x5586146544b8 'x' 'T &'
|     `-ReturnStmt 0x558614679e18 <line:596:9, col:17>
|       `-UnaryOperator 0x558614679e00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558614679df0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558614659a68 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5586146546c0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586146595a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586146599c8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x558614659668 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586146596e0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5586146598a0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558614679f98 <col:65, line:614:5>
|     `-ReturnStmt 0x558614679f88 <line:613:9, col:46>
|       `-CallExpr 0x558614679f48 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614679e58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558614679ec8 <col:25> 'const char *' lvalue ParmVar 0x558614659668 'keyword' 'const char *'
|         |-IntegerLiteral 0x558614679ee8 <col:34> 'int' 0
|         |-DeclRefExpr 0x558614679f08 <col:37> 'P' lvalue ParmVar 0x5586146596e0 'parser' 'P'
|         `-DeclRefExpr 0x558614679f28 <col:45> 'Vector<T>' lvalue ParmVar 0x5586146598a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558614659e98 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x558614659ad8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558614659df8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x558614659b90 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558614659ce0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55861467a1b0 <col:55, line:618:5>
|     `-ReturnStmt 0x55861467a1a0 <line:617:9, col:55>
|       `-CallExpr 0x55861467a160 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558614679fc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55861467a030 <col:25> 'const char *' lvalue ParmVar 0x558614659b90 'keyword' 'const char *'
|         |-IntegerLiteral 0x55861467a050 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55861467a120 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55861467a140 <col:54> 'Vector<T>' lvalue ParmVar 0x558614659ce0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55861465a468 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x558614659f00 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558614659f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861465a3c8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55861465a038 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465a0b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55861465a130 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55861465a280 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55861467a3a8 <col:76, line:623:5>
|     |-CallExpr 0x55861467a328 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55861467a1c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55861467a208 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55861467a218 <col:34> 'const char *' lvalue ParmVar 0x55861465a038 'keyword' 'const char *'
|     | |-BinaryOperator 0x55861467a2c8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55861467a278 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55861467a238 <col:43> 'int' lvalue ParmVar 0x55861465a0b8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55861467a2b0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55861467a290 <col:51> 'const int' lvalue Var 0x5586146466b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55861467a2e8 <col:63> 'P' lvalue ParmVar 0x55861465a130 'parser' 'P'
|     | `-DeclRefExpr 0x55861467a308 <col:71> 'Vector<T>' lvalue ParmVar 0x55861465a280 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55861467a398 <line:622:9, col:17>
|       `-UnaryOperator 0x55861467a380 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55861467a370 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55861465a9a8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55861465a4e0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861465a558 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861465a908 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55861465a618 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465a698 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55861465a7e0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55861467a610 <col:66, line:627:5>
|     `-ReturnStmt 0x55861467a600 <line:626:9, col:59>
|       `-CallExpr 0x55861467a5c0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55861467a3d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55861467a448 <col:25> 'const char *' lvalue ParmVar 0x55861465a618 'keyword' 'const char *'
|         |-DeclRefExpr 0x55861467a468 <col:34> 'int' lvalue ParmVar 0x55861465a698 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55861467a580 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55861467a5a0 <col:58> 'Vector<T>' lvalue ParmVar 0x55861465a7e0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55861465aa38 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55861467a690 <col:25, line:633:5>
|   `-ReturnStmt 0x55861467a680 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55861467a668 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55861467a638 <col:16> 'const bool' lvalue ->_status 0x558614660878
|         `-CXXThisExpr 0x55861467a628 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55861465abb8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55861465aaf0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55861467a778 <col:27, line:639:5>
|   |-BinaryOperator 0x55861467a720 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55861467a6a8 <col:9> 'bool' lvalue ParmVar 0x55861465aaf0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55861467a708 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55861467a6d8 <col:13> 'bool' lvalue ->_status 0x558614660878
|   |     `-CXXThisExpr 0x55861467a6c8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55861467a768 <line:638:9, col:17>
|     `-UnaryOperator 0x55861467a750 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55861467a740 <col:17> 'Args *' this
|-CXXMethodDecl 0x55861465ad38 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55861465ac78 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55861467a868 <col:39, line:644:5>
|   |-BinaryOperator 0x55861467a810 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55861467a798 <col:9> 'bool' lvalue ParmVar 0x55861465ac78 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55861467a7f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55861467a7c8 <col:13> 'const bool' lvalue ->_status 0x558614660878
|   |     `-CXXThisExpr 0x55861467a7b8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55861467a858 <line:643:9, col:17>
|     `-UnaryOperator 0x55861467a840 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55861467a830 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55861465ae00 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55861467a910 <col:30, line:651:5>
|   `-ReturnStmt 0x55861467a900 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55861467a8e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55861467a8b8 <col:16> 'bool' lvalue ->_read_status 0x558614550ac0
|         `-ImplicitCastExpr 0x55861467a898 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55861467a888 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55861465af48 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55861465aeb8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55861467aa18 <col:32, line:658:5>
|   |-BinaryOperator 0x55861467a9c0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55861467a928 <col:9> 'bool' lvalue ParmVar 0x55861465aeb8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55861467a9a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55861467a978 <col:13> 'bool' lvalue ->_read_status 0x558614550ac0
|   |     `-ImplicitCastExpr 0x55861467a958 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55861467a948 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55861467aa08 <line:657:9, col:17>
|     `-UnaryOperator 0x55861467a9f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55861467a9e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55861465b098 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55861465b008 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55861467ab28 <col:44, line:663:5>
|   |-BinaryOperator 0x55861467aad0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55861467aa38 <col:9> 'bool' lvalue ParmVar 0x55861465b008 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55861467aab8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55861467aa88 <col:13> 'bool' lvalue ->_read_status 0x558614550ac0
|   |     `-ImplicitCastExpr 0x55861467aa68 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55861467aa58 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55861467ab18 <line:662:9, col:17>
|     `-UnaryOperator 0x55861467ab00 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55861467aaf0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55861465b160 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55861465b228 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55861465b2f0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55861465b3b8 <line:693:5, col:18> col:9 complete 'int ()'
|-FunctionTemplateDecl 0x55861465b6c8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55861465b458 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55861465b628 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55861465b538 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55861467aee0 <col:19, line:706:5>
|     `-IfStmt 0x55861467aeb8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55861467ac28 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55861467ade8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55861467adb8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55861467ad78 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55861467ac80 <col:42> '<bound member function type>' ->simple_slot 0x5586146743a0
|       |     | `-CXXThisExpr 0x55861467ac70 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55861467ad18 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55861467acd0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5586143d6248
|       |     | `-DeclRefExpr 0x55861467acb0 <col:55> 'T' lvalue ParmVar 0x55861465b538 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55861467ad58 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55861467aea8 <line:705:13, col:34>
|         `-CallExpr 0x55861467ae80 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55861467ae08 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55861467ae60 <col:33> 'T' lvalue ParmVar 0x55861465b538 'x' 'T &'
|-FunctionTemplateDecl 0x55861465b998 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55861465b728 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55861465b8f8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55861465b808 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55861467b2c0 <col:31, line:717:5>
|     |-DeclStmt 0x55861467b020 <line:713:9, col:23>
|     | `-VarDecl 0x55861467af08 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55861467aff8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55861467af80 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55861467afd8 <col:21> 'T' lvalue ParmVar 0x55861465b808 'x' 'T &'
|     |-IfStmt 0x55861467b270 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55861467b118 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55861467b250 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55861467b1f0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55861467b180 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|     |   | `-DeclRefExpr 0x55861467b160 <col:14> 'T *' lvalue Var 0x55861467af08 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55861467b230 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55861467b2a8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55861467b288 <col:16> 'T *' lvalue Var 0x55861467af08 's' 'T *'
|-FunctionTemplateDecl 0x55861465bda8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55861465b9f8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55861465ba78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55861465bd08 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55861465bb58 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55861465bbf8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55861467b5d0 <col:37, line:726:5>
|     |-IfStmt 0x55861467b560 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55861467b580 <line:723:13, col:26>
|     | | `-VarDecl 0x55861467b328 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55861467b418 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55861467b3a0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55861467b3f8 <col:25> 'T' lvalue ParmVar 0x55861465bb58 'x' 'T &'
|     | |-DeclRefExpr 0x55861467b440 <col:16> 'T *' lvalue Var 0x55861467b328 's' 'T *'
|     | `-BinaryOperator 0x55861467b540 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55861467b4f0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55861467b480 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|     |   | `-DeclRefExpr 0x55861467b460 <col:14> 'T *' lvalue Var 0x55861467b328 's' 'T *'
|     |   `-DeclRefExpr 0x55861467b520 <col:18> 'const V' lvalue ParmVar 0x55861465bbf8 'value' 'const V &'
|     `-ReturnStmt 0x55861467b5c0 <line:725:9, col:17>
|       `-UnaryOperator 0x55861467b5a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55861467b598 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55861465c1a8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55861465be10 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55861465c108 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55861465bec0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465bf40 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55861465bfe8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55861467c3f0 <col:65, line:737:5>
|     |-DeclStmt 0x55861467b668 <line:732:9, col:26>
|     | `-VarDecl 0x55861467b600 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55861467c3b8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55861467c3d8 <line:733:13, col:58>
|       | `-VarDecl 0x55861467b690 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55861467b870 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55861467b840 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55861467b828 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55861467b808 <col:26, col:58> 'String' (CXXTemporary 0x55861467b808)
|       |           `-CXXMemberCallExpr 0x55861467b798 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55861467b708 <col:26> '<bound member function type>' ->find 0x5586146739b8
|       |             | `-CXXThisExpr 0x55861467b6f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55861467b7d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55861467b738 <col:31> 'const char *' lvalue ParmVar 0x55861465bec0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55861467b7e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55861467b758 <col:40> 'int' lvalue ParmVar 0x55861465bf40 'flags' 'int'
|       |             `-DeclRefExpr 0x55861467b778 <col:47> 'Args::Slot *' lvalue Var 0x55861467b600 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55861467b928 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55861467b910 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55861467b8f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55861467b8c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|       |       `-ImplicitCastExpr 0x55861467b8a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55861467b888 <col:20> 'String' lvalue Var 0x55861467b690 'str' 'String'
|       `-CompoundStmt 0x55861467c398 <col:61, line:736:9>
|         |-DeclStmt 0x55861467bde0 <line:734:13, col:76>
|         | `-VarDecl 0x55861467b978 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55861467bdb0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55861467bd20 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55861467bd68 <col:60> 'T' lvalue ParmVar 0x55861465bfe8 'variable' 'T &'
|         |     `-UnaryOperator 0x55861467bd98 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55861467bd88 <col:71> 'Args *' this
|         `-CallExpr 0x55861467c368 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55861467be08 <col:13> '<bound member function type>' ->postparse 0x558614673bc8
|           | `-CXXThisExpr 0x55861467bdf8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55861467c328 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55861467be38 <col:23> 'T *' lvalue Var 0x55861467b978 's' 'T *'
|           | `-CallExpr 0x55861467c2e8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55861467c0c0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55861467c1c0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55861467c1e0 <col:86> 'String' lvalue Var 0x55861467b690 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55861467c290 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55861467c220 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|           |   | `-DeclRefExpr 0x55861467c200 <col:92> 'T *' lvalue Var 0x55861467b978 's' 'T *'
|           |   `-UnaryOperator 0x55861467c2d0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55861467c2c0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55861467c348 <col:103> 'Args::Slot *' lvalue Var 0x55861467b600 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55861465c6f8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55861465c218 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55861465c298 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55861465c658 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55861465c358 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465c3d8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55861465c478 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55861465c518 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55861467d290 <col:88, line:745:5>
|     |-DeclStmt 0x55861467c488 <line:741:9, col:26>
|     | `-VarDecl 0x55861467c420 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55861467c6a8 <line:742:9, col:55>
|     | `-VarDecl 0x55861467c4b0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55861467c690 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55861467c660 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55861467c648 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55861467c628 <col:22, col:54> 'String' (CXXTemporary 0x55861467c628)
|     |           `-CXXMemberCallExpr 0x55861467c5b8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55861467c528 <col:22> '<bound member function type>' ->find 0x5586146739b8
|     |             | `-CXXThisExpr 0x55861467c518 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55861467c5f0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55861467c558 <col:27> 'const char *' lvalue ParmVar 0x55861465c358 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55861467c608 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55861467c578 <col:36> 'int' lvalue ParmVar 0x55861465c3d8 'flags' 'int'
|     |             `-DeclRefExpr 0x55861467c598 <col:43> 'Args::Slot *' lvalue Var 0x55861467c420 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55861467ca80 <line:743:9, col:72>
|     | `-VarDecl 0x55861467c6f8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55861467ca50 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55861467c9c0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55861467ca08 <col:56> 'T' lvalue ParmVar 0x55861465c478 'variable' 'T &'
|     |     `-UnaryOperator 0x55861467ca38 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55861467ca28 <col:67> 'Args *' this
|     `-CallExpr 0x55861467d260 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55861467caa8 <col:9> '<bound member function type>' ->postparse 0x558614673bc8
|       | `-CXXThisExpr 0x55861467ca98 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55861467d220 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55861467cad8 <col:19> 'T *' lvalue Var 0x55861467c6f8 's' 'T *'
|       | `-ParenExpr 0x55861467d200 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55861467d1d0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55861467d1b8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55861467d1a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55861467d180 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55861467d150 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|       |     |       `-ImplicitCastExpr 0x55861467d138 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55861467caf8 <col:25> 'String' lvalue Var 0x55861467c4b0 'str' 'String'
|       |     |-CallExpr 0x55861467cfa8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55861467cd80 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55861467ce80 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55861467cea0 <col:89> 'String' lvalue Var 0x55861467c4b0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55861467cf50 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55861467cee0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|       |     | | `-DeclRefExpr 0x55861467cec0 <col:95> 'T *' lvalue Var 0x55861467c6f8 's' 'T *'
|       |     | `-UnaryOperator 0x55861467cf90 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55861467cf80 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55861467d118 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55861467d0f8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55861467d0c8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55861467d078 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55861467d008 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|       |         | | `-DeclRefExpr 0x55861467cfe8 <col:109> 'T *' lvalue Var 0x55861467c6f8 's' 'T *'
|       |         | `-DeclRefExpr 0x55861467d0a8 <col:113> 'const V' lvalue ParmVar 0x55861465c518 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55861467d0e8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55861467d240 <col:128> 'Args::Slot *' lvalue Var 0x55861467c420 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55861465cc28 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55861465c770 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861465c7e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861465cb88 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55861465c8a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465c928 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55861465c9a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55861465ca48 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55861467de88 <col:75, line:754:5>
|     |-DeclStmt 0x55861467d338 <line:749:9, col:26>
|     | `-VarDecl 0x55861467d2d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55861467de50 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55861467de70 <line:750:13, col:58>
|       | `-VarDecl 0x55861467d360 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55861467d540 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55861467d510 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55861467d4f8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55861467d4d8 <col:26, col:58> 'String' (CXXTemporary 0x55861467d4d8)
|       |           `-CXXMemberCallExpr 0x55861467d468 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55861467d3d8 <col:26> '<bound member function type>' ->find 0x5586146739b8
|       |             | `-CXXThisExpr 0x55861467d3c8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55861467d4a0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55861467d408 <col:31> 'const char *' lvalue ParmVar 0x55861465c8a8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55861467d4b8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55861467d428 <col:40> 'int' lvalue ParmVar 0x55861465c928 'flags' 'int'
|       |             `-DeclRefExpr 0x55861467d448 <col:47> 'Args::Slot *' lvalue Var 0x55861467d2d0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55861467d5f8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55861467d5e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55861467d5c0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55861467d590 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|       |       `-ImplicitCastExpr 0x55861467d578 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55861467d558 <col:20> 'String' lvalue Var 0x55861467d360 'str' 'String'
|       `-CompoundStmt 0x55861467de30 <col:61, line:753:9>
|         |-DeclStmt 0x55861467d9d0 <line:751:13, col:63>
|         | `-VarDecl 0x55861467d648 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55861467d9a0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55861467d910 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55861467d958 <col:47> 'T' lvalue ParmVar 0x55861465ca48 'variable' 'T &'
|         |     `-UnaryOperator 0x55861467d988 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55861467d978 <col:58> 'Args *' this
|         `-CallExpr 0x55861467de00 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55861467d9f8 <col:13> '<bound member function type>' ->postparse 0x558614673bc8
|           | `-CXXThisExpr 0x55861467d9e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55861467ddc0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55861467da28 <col:23> 'T *' lvalue Var 0x55861467d648 's' 'T *'
|           | `-CallExpr 0x55861467dd80 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55861467dc10 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55861467dc58 <col:56> 'P' lvalue ParmVar 0x55861465c9a0 'parser' 'P'
|           |   |-DeclRefExpr 0x55861467dc78 <col:64> 'String' lvalue Var 0x55861467d360 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55861467dd28 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55861467dcb8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|           |   | `-DeclRefExpr 0x55861467dc98 <col:70> 'T *' lvalue Var 0x55861467d648 's' 'T *'
|           |   `-UnaryOperator 0x55861467dd68 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55861467dd58 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55861467dde0 <col:81> 'Args::Slot *' lvalue Var 0x55861467d2d0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55861465d288 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55861465cca0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55861465cd18 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55861465cd98 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55861465d1e8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55861465ce60 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465cee0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55861465cf58 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55861465cff8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55861465d098 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x558614680fa8 <col:98, line:762:5>
|     |-DeclStmt 0x55861467df20 <line:758:9, col:26>
|     | `-VarDecl 0x55861467deb8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55861467e140 <line:759:9, col:55>
|     | `-VarDecl 0x55861467df48 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55861467e128 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55861467e0f8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55861467e0e0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55861467e0c0 <col:22, col:54> 'String' (CXXTemporary 0x55861467e0c0)
|     |           `-CXXMemberCallExpr 0x55861467e050 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55861467dfc0 <col:22> '<bound member function type>' ->find 0x5586146739b8
|     |             | `-CXXThisExpr 0x55861467dfb0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55861467e088 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55861467dff0 <col:27> 'const char *' lvalue ParmVar 0x55861465ce60 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55861467e0a0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55861467e010 <col:36> 'int' lvalue ParmVar 0x55861465cee0 'flags' 'int'
|     |             `-DeclRefExpr 0x55861467e030 <col:43> 'Args::Slot *' lvalue Var 0x55861467deb8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5586146808f0 <line:760:9, col:59>
|     | `-VarDecl 0x55861467e198 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5586146808c0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558614680830 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558614680878 <col:43> 'T' lvalue ParmVar 0x55861465cff8 'variable' 'T &'
|     |     `-UnaryOperator 0x5586146808a8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558614680898 <col:54> 'Args *' this
|     `-CallExpr 0x558614680f78 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x558614680918 <col:9> '<bound member function type>' ->postparse 0x558614673bc8
|       | `-CXXThisExpr 0x558614680908 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558614680f38 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558614680948 <col:19> 'T *' lvalue Var 0x55861467e198 's' 'T *'
|       | `-ParenExpr 0x558614680f18 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x558614680ee8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558614680ed0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558614680eb8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558614680e98 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558614680e68 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|       |     |       `-ImplicitCastExpr 0x558614680e50 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558614680968 <col:25> 'String' lvalue Var 0x55861467df48 'str' 'String'
|       |     |-CallExpr 0x558614680cc0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558614680b50 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x558614680b98 <col:59> 'P' lvalue ParmVar 0x55861465cf58 'parser' 'P'
|       |     | |-DeclRefExpr 0x558614680bb8 <col:67> 'String' lvalue Var 0x55861467df48 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558614680c68 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558614680bf8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|       |     | | `-DeclRefExpr 0x558614680bd8 <col:73> 'T *' lvalue Var 0x55861467e198 's' 'T *'
|       |     | `-UnaryOperator 0x558614680ca8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558614680c98 <col:77> 'Args *' this
|       |     `-ParenExpr 0x558614680e30 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x558614680e10 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x558614680de0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558614680d90 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558614680d20 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|       |         | | `-DeclRefExpr 0x558614680d00 <col:87> 'T *' lvalue Var 0x55861467e198 's' 'T *'
|       |         | `-DeclRefExpr 0x558614680dc0 <col:91> 'const V' lvalue ParmVar 0x55861465d098 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558614680e00 <col:98> 'bool' true
|       `-DeclRefExpr 0x558614680f58 <col:106> 'Args::Slot *' lvalue Var 0x55861467deb8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55861465d8f8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55861465d308 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861465d388 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55861465d408 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55861465d858 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55861465d4d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465d550 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55861465d5c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55861465d668 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55861465d708 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x558614681f88 <col:60, line:773:5>
|     |-DeclStmt 0x558614681050 <line:767:9, col:26>
|     | `-VarDecl 0x558614680fe8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558614681f50 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x558614681f70 <line:768:13, col:58>
|       | `-VarDecl 0x558614681078 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558614681258 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558614681228 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558614681210 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5586146811f0 <col:26, col:58> 'String' (CXXTemporary 0x5586146811f0)
|       |           `-CXXMemberCallExpr 0x558614681180 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5586146810f0 <col:26> '<bound member function type>' ->find 0x5586146739b8
|       |             | `-CXXThisExpr 0x5586146810e0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5586146811b8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558614681120 <col:31> 'const char *' lvalue ParmVar 0x55861465d4d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5586146811d0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558614681140 <col:40> 'int' lvalue ParmVar 0x55861465d550 'flags' 'int'
|       |             `-DeclRefExpr 0x558614681160 <col:47> 'Args::Slot *' lvalue Var 0x558614680fe8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558614681310 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5586146812f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5586146812d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5586146812a8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|       |       `-ImplicitCastExpr 0x558614681290 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558614681270 <col:20> 'String' lvalue Var 0x558614681078 'str' 'String'
|       `-CompoundStmt 0x558614681f28 <col:61, line:772:9>
|         |-DeclStmt 0x558614681650 <line:769:13, col:66>
|         | `-VarDecl 0x558614681368 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x558614681620 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558614681590 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5586146815d8 <col:49> 'T1' lvalue ParmVar 0x55861465d668 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x558614681608 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5586146815f8 <col:61> 'Args *' this
|         |-DeclStmt 0x5586146819c0 <line:770:13, col:66>
|         | `-VarDecl 0x5586146816d8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x558614681990 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558614681900 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558614681948 <col:49> 'T2' lvalue ParmVar 0x55861465d708 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x558614681978 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558614681968 <col:61> 'Args *' this
|         `-CallExpr 0x558614681ef8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5586146819e8 <col:13> '<bound member function type>' ->postparse 0x558614673bc8
|           | `-CXXThisExpr 0x5586146819d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558614681eb8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x558614681a58 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x558614681a18 <col:23> 'T1 *' lvalue Var 0x558614681368 's1' 'T1 *'
|           | | `-DeclRefExpr 0x558614681a38 <col:29> 'T2 *' lvalue Var 0x5586146816d8 's2' 'T2 *'
|           | `-CallExpr 0x558614681e70 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558614681c40 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558614681c88 <col:63> 'P' lvalue ParmVar 0x55861465d5c8 'parser' 'P'
|           |   |-DeclRefExpr 0x558614681ca8 <col:71> 'String' lvalue Var 0x558614681078 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558614681d58 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558614681ce8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|           |   | `-DeclRefExpr 0x558614681cc8 <col:77> 'T1 *' lvalue Var 0x558614681368 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x558614681e18 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558614681da8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|           |   | `-DeclRefExpr 0x558614681d88 <col:82> 'T2 *' lvalue Var 0x5586146816d8 's2' 'T2 *'
|           |   `-UnaryOperator 0x558614681e58 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558614681e48 <col:87> 'Args *' this
|           `-DeclRefExpr 0x558614681ed8 <col:94> 'Args::Slot *' lvalue Var 0x558614680fe8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55861465dce8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55861465d978 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55861465dc48 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55861465da30 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465dab0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55861465db28 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5586146824a0 <col:67, line:780:5>
|     |-DeclStmt 0x558614682020 <line:777:9, col:26>
|     | `-VarDecl 0x558614681fb8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558614682468 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x558614682488 <line:778:13, col:58>
|       | `-VarDecl 0x558614682048 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558614682228 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5586146821f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5586146821e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5586146821c0 <col:26, col:58> 'String' (CXXTemporary 0x5586146821c0)
|       |           `-CXXMemberCallExpr 0x558614682150 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5586146820c0 <col:26> '<bound member function type>' ->find 0x5586146739b8
|       |             | `-CXXThisExpr 0x5586146820b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558614682188 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5586146820f0 <col:31> 'const char *' lvalue ParmVar 0x55861465da30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5586146821a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558614682110 <col:40> 'int' lvalue ParmVar 0x55861465dab0 'flags' 'int'
|       |             `-DeclRefExpr 0x558614682130 <col:47> 'Args::Slot *' lvalue Var 0x558614681fb8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5586146822e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5586146822c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5586146822a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558614682278 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|       |       `-ImplicitCastExpr 0x558614682260 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558614682240 <col:20> 'String' lvalue Var 0x558614682048 'str' 'String'
|       `-CallExpr 0x558614682438 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x558614682308 <col:13> '<bound member function type>' ->postparse 0x558614673bc8
|         | `-CXXThisExpr 0x5586146822f8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5586146823e8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x558614682358 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x558614682338 <col:23> 'P' lvalue ParmVar 0x55861465db28 'parser' 'P'
|         | |-DeclRefExpr 0x5586146823a0 <col:36> 'String' lvalue Var 0x558614682048 'str' 'String'
|         | `-UnaryOperator 0x5586146823d0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5586146823c0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x558614682418 <col:49> 'Args::Slot *' lvalue Var 0x558614681fb8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55861465e088 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55861465dd58 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55861465dfe8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55861465de10 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465de90 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55861465df08 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x558614682e10 <col:71, line:792:5>
|     |-DeclStmt 0x558614682538 <line:784:9, col:26>
|     | `-VarDecl 0x5586146824d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558614682608 <line:785:9, col:29>
|     | `-VarDecl 0x558614682568 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5586146825f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5586146825d0 <col:28> 'int' 1
|     |-WhileStmt 0x558614682cc0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x558614682ce0 <line:786:16, col:61>
|     | | `-VarDecl 0x558614682630 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558614682810 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5586146827e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5586146827c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5586146827a8 <col:29, col:61> 'String' (CXXTemporary 0x5586146827a8)
|     | |           `-CXXMemberCallExpr 0x558614682738 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5586146826a8 <col:29> '<bound member function type>' ->find 0x5586146739b8
|     | |             | `-CXXThisExpr 0x558614682698 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558614682770 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5586146826d8 <col:34> 'const char *' lvalue ParmVar 0x55861465de10 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558614682788 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5586146826f8 <col:43> 'int' lvalue ParmVar 0x55861465de90 'flags' 'int'
|     | |             `-DeclRefExpr 0x558614682718 <col:50> 'Args::Slot *' lvalue Var 0x5586146824d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5586146828c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5586146828b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558614682890 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558614682860 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|     | |       `-ImplicitCastExpr 0x558614682848 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558614682828 <col:23> 'String' lvalue Var 0x558614682630 'str' 'String'
|     | `-CompoundStmt 0x558614682c98 <col:64, line:790:9>
|     |   |-CallExpr 0x558614682a20 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5586146828f0 <col:13> '<bound member function type>' ->postparse 0x558614673bc8
|     |   | | `-CXXThisExpr 0x5586146828e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5586146829d0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558614682940 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558614682920 <col:23> 'P' lvalue ParmVar 0x55861465df08 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558614682988 <col:36> 'String' lvalue Var 0x558614682630 'str' 'String'
|     |   | | `-UnaryOperator 0x5586146829b8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5586146829a8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x558614682a00 <col:49> 'Args::Slot *' lvalue Var 0x5586146824d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558614682bb8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558614682a50 <col:13> 'int' lvalue Var 0x558614682568 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558614682ba0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558614682b80 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558614682ae8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558614682ac8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558614682ab0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558614682a70 <col:28> 'int' lvalue Var 0x558614682568 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558614682a90 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558614682b68 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558614682b38 <col:49> 'bool' lvalue ->_read_status 0x558614550ac0
|     |   |         `-ImplicitCastExpr 0x558614682b18 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558614682b08 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558614682c68 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558614682bd8 <col:13> 'int' lvalue ParmVar 0x55861465de90 'flags' 'int'
|     |     `-UnaryOperator 0x558614682c50 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558614682c38 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558614682c18 <col:23> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558614682df0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558614682d28 <col:9> 'bool' lvalue ->_read_status 0x558614550ac0
|       | `-ImplicitCastExpr 0x558614682d08 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558614682cf8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558614682dd0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558614682db0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558614682d98 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558614682d58 <col:25> 'int' lvalue Var 0x558614682568 'read_status' 'int'
|           `-IntegerLiteral 0x558614682d78 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55861465e568 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55861465e0f8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861465e178 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861465e4c8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55861465e238 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465e2b8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55861465e330 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55861465e3d8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x558614683da0 <col:84, line:805:5>
|     |-DeclStmt 0x558614682eb8 <line:796:9, col:26>
|     | `-VarDecl 0x558614682e50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558614682f88 <line:797:9, col:29>
|     | `-VarDecl 0x558614682ee8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558614682f70 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558614682f50 <col:28> 'int' 1
|     |-DeclStmt 0x5586146832c0 <line:798:9, col:71>
|     | `-VarDecl 0x558614682fd8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558614683290 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558614683200 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x558614683248 <col:55> 'T' lvalue ParmVar 0x55861465e3d8 'variable' 'T &'
|     |     `-UnaryOperator 0x558614683278 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558614683268 <col:66> 'Args *' this
|     |-WhileStmt 0x558614683c50 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x558614683c70 <line:799:16, col:61>
|     | | `-VarDecl 0x5586146832e8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5586146834c8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558614683498 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558614683480 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558614683460 <col:29, col:61> 'String' (CXXTemporary 0x558614683460)
|     | |           `-CXXMemberCallExpr 0x5586146833f0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558614683360 <col:29> '<bound member function type>' ->find 0x5586146739b8
|     | |             | `-CXXThisExpr 0x558614683350 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558614683428 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558614683390 <col:34> 'const char *' lvalue ParmVar 0x55861465e238 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558614683440 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5586146833b0 <col:43> 'int' lvalue ParmVar 0x55861465e2b8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5586146833d0 <col:50> 'Args::Slot *' lvalue Var 0x558614682e50 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558614683580 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558614683568 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558614683548 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558614683518 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|     | |       `-ImplicitCastExpr 0x558614683500 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5586146834e0 <col:23> 'String' lvalue Var 0x5586146832e8 'str' 'String'
|     | `-CompoundStmt 0x558614683c28 <col:64, line:803:9>
|     |   |-CallExpr 0x5586146839b0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5586146835a8 <col:13> '<bound member function type>' ->postparse 0x558614673bc8
|     |   | | `-CXXThisExpr 0x558614683598 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x558614683970 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5586146835d8 <col:23> 'T *' lvalue Var 0x558614682fd8 's' 'T *'
|     |   | | `-CallExpr 0x558614683930 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5586146837c0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x558614683808 <col:56> 'P' lvalue ParmVar 0x55861465e330 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x558614683828 <col:64> 'String' lvalue Var 0x5586146832e8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5586146838d8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x558614683868 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|     |   | |   | `-DeclRefExpr 0x558614683848 <col:70> 'T *' lvalue Var 0x558614682fd8 's' 'T *'
|     |   | |   `-UnaryOperator 0x558614683918 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x558614683908 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x558614683990 <col:81> 'Args::Slot *' lvalue Var 0x558614682e50 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558614683b48 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5586146839e0 <col:13> 'int' lvalue Var 0x558614682ee8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558614683b30 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558614683b10 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558614683a78 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558614683a58 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558614683a40 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558614683a00 <col:28> 'int' lvalue Var 0x558614682ee8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558614683a20 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558614683af8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558614683ac8 <col:49> 'bool' lvalue ->_read_status 0x558614550ac0
|     |   |         `-ImplicitCastExpr 0x558614683aa8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558614683a98 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558614683bf8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558614683b68 <col:13> 'int' lvalue ParmVar 0x55861465e2b8 'flags' 'int'
|     |     `-UnaryOperator 0x558614683be0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558614683bc8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558614683ba8 <col:23> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558614683d80 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558614683cb8 <col:9> 'bool' lvalue ->_read_status 0x558614550ac0
|       | `-ImplicitCastExpr 0x558614683c98 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558614683c88 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558614683d60 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558614683d40 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558614683d28 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558614683ce8 <col:25> 'int' lvalue Var 0x558614682ee8 'read_status' 'int'
|           `-IntegerLiteral 0x558614683d08 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55861465eb48 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55861465e5e0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55861465e658 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55861465eaa8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55861465e718 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55861465e798 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55861465e810 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55861465e960 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x558614684ba8 <col:87, line:821:5>
|     |-DeclStmt 0x558614683e50 <line:809:9, col:26>
|     | `-VarDecl 0x558614683de8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558614683f20 <line:810:9, col:29>
|     | `-VarDecl 0x558614683e80 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558614683f08 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558614683ee8 <col:28> 'int' 1
|     |-DeclStmt 0x558614684168 <line:811:9, col:38>
|     | `-VarDecl 0x558614684050 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x558614684140 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5586146840c8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558614684120 <col:29> 'Vector<T>' lvalue ParmVar 0x55861465e960 'variable' 'Vector<T> &'
|     |-WhileStmt 0x558614684a58 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x558614684a78 <line:812:16, col:61>
|     | | `-VarDecl 0x558614684190 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558614684370 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558614684340 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558614684328 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558614684308 <col:29, col:61> 'String' (CXXTemporary 0x558614684308)
|     | |           `-CXXMemberCallExpr 0x558614684298 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558614684208 <col:29> '<bound member function type>' ->find 0x5586146739b8
|     | |             | `-CXXThisExpr 0x5586146841f8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5586146842d0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558614684238 <col:34> 'const char *' lvalue ParmVar 0x55861465e718 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5586146842e8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558614684258 <col:43> 'int' lvalue ParmVar 0x55861465e798 'flags' 'int'
|     | |             `-DeclRefExpr 0x558614684278 <col:50> 'Args::Slot *' lvalue Var 0x558614683de8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558614684428 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558614684410 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5586146843f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5586146843c0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558614398208
|     | |       `-ImplicitCastExpr 0x5586146843a8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558614684388 <col:23> 'String' lvalue Var 0x558614684190 'str' 'String'
|     | `-CompoundStmt 0x558614684a20 <col:64, line:819:9>
|     |   |-DeclStmt 0x5586146844e8 <line:813:13, col:23>
|     |   | `-VarDecl 0x558614684450 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5586146844c8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x558614684668 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x558614684510 <col:13> '<bound member function type>' ->postparse 0x558614673bc8
|     |   | | `-CXXThisExpr 0x558614684500 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558614684610 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558614684560 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558614684540 <col:23> 'P' lvalue ParmVar 0x55861465e810 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5586146845a8 <col:36> 'String' lvalue Var 0x558614684190 'str' 'String'
|     |   | | |-DeclRefExpr 0x5586146845c8 <col:41> 'T' lvalue Var 0x558614684450 'sx' 'T'
|     |   | | `-UnaryOperator 0x5586146845f8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5586146845e8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x558614684648 <col:53> 'Args::Slot *' lvalue Var 0x558614683de8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5586146847c0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5586146846f8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5586146846c8 <col:17> 'bool' lvalue ->_read_status 0x558614550ac0
|     |   | |   `-ImplicitCastExpr 0x5586146846a8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x558614684698 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x558614684798 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x558614684730 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x558614684710 <col:17> 'Vector<T> *' lvalue Var 0x558614684050 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x558614684778 <col:30> 'T' lvalue Var 0x558614684450 'sx' 'T'
|     |   |-BinaryOperator 0x558614684940 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5586146847d8 <col:13> 'int' lvalue Var 0x558614683e80 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558614684928 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558614684908 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558614684870 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558614684850 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558614684838 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5586146847f8 <col:28> 'int' lvalue Var 0x558614683e80 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558614684818 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5586146848f0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5586146848c0 <col:49> 'bool' lvalue ->_read_status 0x558614550ac0
|     |   |         `-ImplicitCastExpr 0x5586146848a0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558614684890 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5586146849f0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558614684960 <col:13> 'int' lvalue ParmVar 0x55861465e798 'flags' 'int'
|     |     `-UnaryOperator 0x5586146849d8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5586146849c0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5586146849a0 <col:23> 'const int' lvalue Var 0x5586146463c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558614684b88 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558614684ac0 <col:9> 'bool' lvalue ->_read_status 0x558614550ac0
|       | `-ImplicitCastExpr 0x558614684aa0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558614684a90 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558614684b68 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558614684b48 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558614684b30 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558614684af0 <col:25> 'int' lvalue Var 0x558614683e80 'read_status' 'int'
|           `-IntegerLiteral 0x558614684b10 <col:40> 'int' 1
|-AccessSpecDecl 0x55861465ebc0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55861465ebe8 prev 0x558614644700 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55861465ece0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55861465edd0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x558614684be0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55861465eec0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x558614684bf0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55861465efc0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55861465f070 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55861465f118 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55861465f118
| | `-ParmVarDecl 0x55861465f228 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55861465f9e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55861465f9e8
|   `-ParmVarDecl 0x55861465faf8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55861465f298 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55861465f3f8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55861465f5f0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55861465f4a0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55861465f518 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x558614684dd0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55861465f8a8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x558614684c40 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x558614684c00 <col:20> 'void *' lvalue ParmVar 0x55861465f4a0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55861465f910 '_slot' 'char *'
| | | `-CXXNewExpr 0x558614684cc8 <col:32, col:45> 'char *' array Function 0x5586141bbea8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x558614684cb0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x558614684c80 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55861465f518 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55861465f970 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x558614684d90 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x558614684d50 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55861465f518 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x558614684e50 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55861465f6f0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55861465eec0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x558614684ed8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x558614684eb8 <line:840:13, col:22> 'void' array Function 0x5586141bc208 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x558614684ea0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x558614684e70 <col:22> 'char *' lvalue ->_slot 0x55861465f910
| |         `-CXXThisExpr 0x558614684e60 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55861465f7f0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55861465efc0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5586146850c8 <col:22, line:844:9>
| |   `-CallExpr 0x558614685030 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x558614685018 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x558614684ff8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5586142c7c68 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x558614685068 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x558614684f48 <col:20> 'void *' lvalue ->_ptr 0x55861465f8a8
| |     |   `-CXXThisExpr 0x558614684f38 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x558614685098 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x558614685080 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x558614684f88 <col:26> 'char *' lvalue ->_slot 0x55861465f910
| |     |     `-CXXThisExpr 0x558614684f78 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5586146850b0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x558614684fc8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55861465f970
| |         `-CXXThisExpr 0x558614684fb8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55861465f8a8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55861465f910 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55861465f970 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55861465fb68 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55861465fb68
| | `-ParmVarDecl 0x55861465fc78 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55861465fd18 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55861465fd18
|   `-ParmVarDecl 0x55861465fe28 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55861465ffc8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55861465fe98 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55861465ff38 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x558614660260 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x558614660458 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x558614660328 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5586146605d8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x558614685100 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5586146850e0 <col:20> 'T *' lvalue ParmVar 0x558614660328 'ptr' 'T *'
|   | `-CompoundStmt 0x558614685150 <col:25, line:854:9>
|   |-CXXMethodDecl 0x558614660528 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55861465efc0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x558614685300 <col:22, line:857:9>
|   |   `-CallExpr 0x5586146852d0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x558614685160 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x558614380398 0x55861432a6c8
|   |     |-CXXOperatorCallExpr 0x558614685260 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5586146851f0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55861458d568 0x55861458d188 0x55861458cdb8 0x55861458c9d8 0x55861458c5f8 0x55861458c228
|   |     | `-MemberExpr 0x5586146851c0 <col:29> 'T *' lvalue ->_ptr 0x5586146605d8
|   |     |   `-CXXThisExpr 0x5586146851b0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5586146852a0 <col:35> 'T' lvalue ->_slot 0x558614660638
|   |       `-CXXThisExpr 0x558614685290 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5586146605d8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x558614660638 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5586146606a0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5586146607a0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5586146607f0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558614660780 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x558614660760 <col:31> 'int' 48
|-FieldDecl 0x558614660818 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x558614660878 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5586146608d8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x558614660a10 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x558614673260 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5586146732c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x558614673370 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x558614673598 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5586146734a0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5586146736e8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x558614673658 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5586146739b8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5586146737a8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x558614673828 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5586146738d0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x558614673bc8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x558614673a80 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x558614673af8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x558614673c98 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x558614673de8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x558614673d50 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x558614674178 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x558614673ea8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x558614673f28 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x558614673fd0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x558614674088 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5586146743a0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x558614674250 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5586146742c8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5586146746b8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x558614674450 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x558614674618 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x558614674528 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586143d7fb0 prev 0x5586143ca398 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586143d80a8 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x5586143d8138 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x5586143d8560 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x5586143d8178 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x5586143d81f8 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x5586143d8330 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x5586143d83e0 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x5586143d8828 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x5586143d8630 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5586143d86a8 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x5586143d8748 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5586143dd1c8 <col:34> 'const ArgContext' lvalue Var 0x5586143ca330 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5586143dcc20 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x5586143d88f0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5586143d89e0 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x5586143d8a58 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5586143dd1e8 <col:34> 'const ArgContext' lvalue Var 0x5586143ca330 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5586143dd3c8 <col:46, line:375:5>
|   `-ReturnStmt 0x5586143dd3b8 <line:374:2, col:63>
|     `-CallExpr 0x5586143dd380 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x5586143dd368 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5586143dd320 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x5586143d8828 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x5586143dd280 <col:15> 'const String' lvalue ParmVar 0x5586143d88f0 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5586143dd2d0 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5586143dd2a0 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5586143d89e0 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x5586143dd300 <col:59> 'const ArgContext' lvalue ParmVar 0x5586143d8a58 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5586143dd0f8 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x5586143dcce8 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5586143dcf60 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x5586143dcfd8 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5586143dd208 <col:34> 'const ArgContext' lvalue Var 0x5586143ca330 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x5586146d2d40 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5586146d2e48 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x5586146d2e48
| `-ParmVarDecl 0x5586146d2f58 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x5586146d2ff8 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x5586146d2ff8
| `-ParmVarDecl 0x5586146d3108 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x5586146d31a8 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586143ca5d0 prev 0x558614330618 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586143ca6c8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5586143ca758 <col:19, col:25> col:19 public
|-TypedefDecl 0x5586143ca790 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5586141bdf10 'uninitialized_type'
|   `-CXXRecord 0x5586141bde78 'uninitialized_type'
|-CXXConstructorDecl 0x5586143ca850 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5586143cefb0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5586143cf058 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5586143cf018 <col:10> 'int' 0
| `-CompoundStmt 0x5586143cf0a0 <col:13, line:22:5>
|-CXXConstructorDecl 0x5586143ca9a0 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5586143ca910 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5586143cefb0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5586143cf0f0 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5586143cf0b0 <col:10> 'unsigned int' lvalue ParmVar 0x5586143ca910 'x' 'unsigned int'
| `-CompoundStmt 0x5586143cf138 <col:13, line:27:5>
|-CXXConstructorDecl 0x5586143caaf8 <line:29:5, line:31:5> line:29:21 used IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5586143caa68 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5586143cefb0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5586143cf1a0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5586143cf188 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5586143cf148 <col:10> 'int' lvalue ParmVar 0x5586143caa68 'x' 'int'
| `-CompoundStmt 0x5586143cf1e8 <col:13, line:31:5>
|-CXXConstructorDecl 0x5586143cac50 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5586143cabc0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5586143cefb0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5586143cf250 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5586143cf238 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5586143cf1f8 <col:10> 'unsigned long' lvalue ParmVar 0x5586143cabc0 'x' 'unsigned long'
| `-CompoundStmt 0x5586143cf298 <col:13, line:35:5>
|-CXXConstructorDecl 0x5586143cada8 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5586143cad18 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5586143cefb0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5586143cf300 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5586143cf2e8 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5586143cf2a8 <col:10> 'long' lvalue ParmVar 0x5586143cad18 'x' 'long'
| `-CompoundStmt 0x5586143cf348 <col:13, line:39:5>
|-CXXConstructorDecl 0x5586143caf68 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5586143cae78 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5586143cefb0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5586143cf3c8 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5586143cf378 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5586142ff3d0
| |     `-DeclRefExpr 0x5586143cf358 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5586143cae78 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5586143cf410 <col:20, line:44:5>
|-CXXConstructorDecl 0x5586143cb0f8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5586143cb030 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5586143cf578 <col:51, line:56:5>
|   `-BinaryOperator 0x5586143cf558 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5586143cf430 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5586143cefb0
|     | `-CXXThisExpr 0x5586143cf420 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5586143cf540 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5586143cf528 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5586143cf508 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5586143cf4d8 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5586143cf4c0 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5586143cf460 <col:47> 'const unsigned char *' lvalue ParmVar 0x5586143cb030 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5586143cb248 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5586143cb1b8 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5586143cb3f8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5586143cb338 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5586143cf5e8 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5586143cf5c0 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5586143cf590 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5586143cb338 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5586143cb588 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5586143cb4c0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5586143cb678 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5586143d05a8 <col:46, line:83:5>
|   `-ReturnStmt 0x5586143d0598 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5586143d0580 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5586143d0550 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5586143d0408 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5586143d02f0 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5586143d01d8 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5586143cf610 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5586143cb768 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5586143d0658 <col:31, line:88:5>
|   `-ReturnStmt 0x5586143d0648 <line:87:2, col:10>
|     `-UnaryOperator 0x5586143d0630 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5586143d0618 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5586143d0600 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5586143d05d0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5586143cefb0
|             `-CXXThisExpr 0x5586143d05c0 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5586143cb828 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5586143d06d8 <col:34, line:93:5>
|   `-ReturnStmt 0x5586143d06c8 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5586143d06b0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5586143d0680 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5586143cefb0
|         `-CXXThisExpr 0x5586143d0670 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5586143cb8f8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5586143d0758 <col:38, line:101:5>
|   `-ReturnStmt 0x5586143d0748 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5586143d0730 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5586143d0700 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5586143cefb0
|         `-CXXThisExpr 0x5586143d06f0 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5586143cb9c8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5586143d0a28 <col:38, line:108:5>
|   `-ReturnStmt 0x5586143d0a18 <line:107:2, col:58>
|     `-BinaryOperator 0x5586143d09f8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5586143d0910 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5586143d08f0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5586143d08d8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5586143d0780 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5586143cefb0
|       |   |   `-CXXThisExpr 0x5586143d0770 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5586143d08b0 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5586143d0898 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5586143d0818 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55861430d908 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5586143d07f8 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5586143d09d0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5586143d09b8 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5586143d0998 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55861430d908 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5586143d0978 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5586143cba88 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5586143d0c98 <col:39, line:112:5>
|   `-ReturnStmt 0x5586143d0c88 <line:111:2, col:56>
|     `-BinaryOperator 0x5586143d0c68 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5586143d0b80 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5586143d0b60 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5586143d0b48 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5586143d0a50 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5586143cefb0
|       |   |   `-CXXThisExpr 0x5586143d0a40 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5586143d0b20 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5586143d0b08 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5586143d0ae8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55861430d908 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5586143d0ac8 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5586143d0c40 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5586143d0c28 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5586143d0c08 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55861430d908 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5586143d0be8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5586143cbbb8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5586143cbcc0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5586143cbdd0 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5586143cdea8 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5586143cdf68 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5586143ce030 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5586143ce228 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5586143ce0e0 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5586143ce158 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5586143ce3a8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5586143ce2e8 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5586143ce4f0 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5586143ce460 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5586143ce698 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5586143ce5a8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5586143ce7e0 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5586143ce750 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5586143ce928 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5586143ce898 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5586143ce9f0 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5586143ceab0 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5586143cec28 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5586143ceb60 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5586143cecf0 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5586143cedd8 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5586143cee80 <col:51> "" ""
|-TypedefDecl 0x5586143cef20 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5586143306b0 'IPAddress'
|   `-CXXRecord 0x5586143ca5d0 'IPAddress'
|-AccessSpecDecl 0x5586143cef78 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5586143cefb0 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5586143cf658 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x5586143cf658
| `-ParmVarDecl 0x5586143cf768 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x5586143cf808 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5586143cf918 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5586143cefb0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5586143d04f8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5586143d04b0 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5586143cefb0
| |     `-CXXStaticCastExpr 0x5586143d0480 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5586143d0450 <col:7> 'IPAddress' lvalue ParmVar 0x5586143cf918 '' 'IPAddress &&'
| `-CompoundStmt 0x5586143d0540 <col:7>
`-CXXDestructorDecl 0x5586143d0208 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPrefixArg
         0 |   _Bool allow_bare_address
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586143dd3e0 <../dummy_inc/click/ipaddress.hh:382:1, line:396:1> line:382:7 referenced class IPPrefixArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586143dd4f8 <col:1, col:7> col:7 implicit referenced class IPPrefixArg
|-AccessSpecDecl 0x5586143dd588 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x5586143dd698 <line:383:5, line:385:5> line:383:5 used IPPrefixArg 'void (bool)'
| |-ParmVarDecl 0x5586143dd5c0 <col:17, col:44> col:22 used allow_bare_address_ 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5586143dded0 <col:44> 'bool' false
| |-CXXCtorInitializer Field 0x5586143dde68 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x5586143ddf60 <line:384:23> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x5586143ddf20 <col:23> 'bool' lvalue ParmVar 0x5586143dd5c0 'allow_bare_address_' 'bool'
| `-CompoundStmt 0x5586143ddfa8 <col:44, line:385:5>
|-CXXMethodDecl 0x5586143dd9e8 <line:386:5, line:388:46> line:386:10 used parse 'bool (const String &, IPAddress &, IPAddress &, const ArgContext &) const'
| |-ParmVarDecl 0x5586143dd758 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5586143dd7d0 <line:387:9, col:20> col:20 result_addr 'IPAddress &'
| |-ParmVarDecl 0x5586143dd848 <col:33, col:44> col:44 result_mask 'IPAddress &'
| `-ParmVarDecl 0x5586143dd8c0 <line:388:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5586143ddee0 <col:34> 'const ArgContext' lvalue Var 0x5586143ca330 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5586143ddd98 <line:389:5, line:394:5> line:389:10 parse 'bool (const String &, struct in_addr &, struct in_addr &, const ArgContext &) const'
| |-ParmVarDecl 0x5586143ddab8 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x5586143ddb48 <line:390:9, col:25> col:25 used result_addr 'struct in_addr &'
| |-ParmVarDecl 0x5586143ddbd8 <col:38, col:54> col:54 used result_mask 'struct in_addr &'
| |-ParmVarDecl 0x5586143ddc50 <line:391:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5586143ddf00 <col:34> 'const ArgContext' lvalue Var 0x5586143ca330 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5586143de1b8 <col:52, line:394:5>
|   `-ReturnStmt 0x5586143de1a8 <line:392:2, line:393:56>
|     `-CXXMemberCallExpr 0x5586143de168 <line:392:9, line:393:56> 'bool'
|       |-MemberExpr 0x5586143de138 <line:392:9> '<bound member function type>' ->parse 0x5586143dd9e8
|       | `-CXXThisExpr 0x5586143de128 <col:9> 'const IPPrefixArg *' implicit this
|       |-DeclRefExpr 0x5586143de028 <col:15> 'const String' lvalue ParmVar 0x5586143ddab8 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5586143de078 <col:20, col:61> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5586143de048 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5586143ddb48 'result_addr' 'struct in_addr &'
|       |-CXXReinterpretCastExpr 0x5586143de0d8 <line:393:8, col:49> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5586143de0a8 <col:38> 'struct in_addr':'in_addr' lvalue ParmVar 0x5586143ddbd8 'result_mask' 'struct in_addr &'
|       `-DeclRefExpr 0x5586143de108 <col:52> 'const ArgContext' lvalue ParmVar 0x5586143ddc50 'args' 'const ArgContext &'
|-FieldDecl 0x5586143dde68 <line:395:5, col:10> col:10 allow_bare_address 'bool'
|-CXXConstructorDecl 0x5586146e0fd8 <line:382:7> col:7 implicit constexpr IPPrefixArg 'void (const IPPrefixArg &)' inline default trivial noexcept-unevaluated 0x5586146e0fd8
| `-ParmVarDecl 0x5586146e10e8 <col:7> col:7 'const IPPrefixArg &'
|-CXXConstructorDecl 0x5586146e1188 <col:7> col:7 implicit constexpr IPPrefixArg 'void (IPPrefixArg &&)' inline default trivial noexcept-unevaluated 0x5586146e1188
| `-ParmVarDecl 0x5586146e1298 <col:7> col:7 'IPPrefixArg &&'
`-CXXDestructorDecl 0x5586146e1338 <col:7> col:7 implicit referenced ~IPPrefixArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPrefixArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPPrefixArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class CheckIPHeader
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _offset
       112 |   class Vector<class IPAddress> _bad_src
       112 |     class vector_memory<class sized_array_memory<4> > vm_
       112 |       vector_memory<class sized_array_memory<4> >::type * l_
       120 |       vector_memory::size_type n_
       124 |       vector_memory::size_type capacity_
       128 |   _Bool _checksum
       129 |   _Bool _verbose
       136 |   class Vector<class IPAddress> _good_dst
       136 |     class vector_memory<class sized_array_memory<4> > vm_
       136 |       vector_memory<class sized_array_memory<4> >::type * l_
       144 |       vector_memory::size_type n_
       148 |       vector_memory::size_type capacity_
       152 |   class atomic_uint32_t _drops
       152 |     uint32_t _val
       160 |   class atomic_uint32_t * _reason_drops
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586143890c0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586143891d8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x558614389268 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x558614389338 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x558614389420 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x558614389638 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5586143894e0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586143897e8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5586143896f0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558614389930 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5586143898a0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558614389a78 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5586143899e8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558614389bc0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558614389b30 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558614389c88 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x558614389dd0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x558614389d40 <col:28> col:31 'int'
|-CXXMethodDecl 0x558614389e98 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x558614389fe0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x558614389f50 <col:28> col:31 'int'
|-CXXMethodDecl 0x55861438a158 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55861438a098 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55861438a2a0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55861438a210 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55861438a368 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55861438a528 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55861438a418 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55861438a490 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55861438a778 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55861438a5e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55861438a660 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55861438a828 <col:86> "" ""
|-CXXMethodDecl 0x55861438aa98 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55861438a908 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55861438a980 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55861438ac48 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55861438ab58 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55861438adf8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55861438ad00 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55861438b0c8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55861438aeb0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55861438af28 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55861438afa0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55861438b3a8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55861438b190 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55861438b208 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55861438b280 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55861438b460 <col:115> "" ""
|-AccessSpecDecl 0x55861438b4d0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55861438b508 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55861438ba10 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55861438ba10
| `-ParmVarDecl 0x55861438bb18 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55861438bbb8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55861438bbb8
| `-ParmVarDecl 0x55861438bcc8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5586143c12f8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5586145b4320 <col:7>
|-CXXConstructorDecl 0x5586143c13d0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5586143c13d0
| `-ParmVarDecl 0x5586143c14e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5586143c1558 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5586143c1558
| `-ParmVarDecl 0x5586143c1668 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5586145b6d20 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586145e32d0 <../elements/ip/checkipheader.hh:107:1, line:166:1> line:107:7 class CheckIPHeader definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5586145e3428 <col:1, col:7> col:7 implicit referenced class CheckIPHeader
|-AccessSpecDecl 0x5586145e34b8 <col:40, col:46> col:40 public
|-CXXConstructorDecl 0x5586145e3540 <line:109:3, col:17> col:3 CheckIPHeader 'void ()'
|-CXXDestructorDecl 0x5586145e3630 <line:110:3, col:18> col:3 ~CheckIPHeader 'void ()' noexcept-unevaluated 0x5586145e3630
| `-Overrides: [ 0x5586145cab08 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5586145e3760 <line:112:3, col:60> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5586145cbf68 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5586145f07c8 <col:34, col:60>
|   `-ReturnStmt 0x5586145f07b8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5586145f07a0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5586145f0778 <col:43> 'const char [14]' lvalue "CheckIPHeader"
|-CXXMethodDecl 0x5586145e3828 <line:113:3, col:56> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5586145cc030 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5586145f0828 <col:34, col:56>
|   `-ReturnStmt 0x5586145f0818 <col:36, col:43>
|     `-ImplicitCastExpr 0x5586145f0800 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5586145f07e0 <col:43> 'const char []' lvalue Var 0x5586145cc368 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x5586145e38f0 <line:114:3, col:60> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5586145cc3f8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5586145f0888 <col:34, col:60>
|   `-ReturnStmt 0x5586145f0878 <col:36, col:43>
|     `-ImplicitCastExpr 0x5586145f0860 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5586145f0840 <col:43> 'const char []' lvalue Var 0x5586145cc760 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x5586145e39b8 <line:115:3, col:43> col:15 flags 'const char *() const'
| |-Overrides: [ 0x5586145cc940 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x5586145f08e8 <col:29, col:43>
|   `-ReturnStmt 0x5586145f08d8 <col:31, col:38>
|     `-ImplicitCastExpr 0x5586145f08c0 <col:38> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5586145f08a0 <col:38> 'const char [2]' lvalue "A"
|-CXXMethodDecl 0x5586145e3c90 <line:117:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5586145cd800 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5586145e3b40 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5586145e3bb8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5586145e3d60 <line:118:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5586145cd8d0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5586145e3ea0 <line:120:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5586145cb148 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5586145e3e10 <col:25, col:32> col:33 'Packet *'
|-CXXRecordDecl 0x5586145e3f48 <line:122:3, line:125:3> line:122:10 struct OldBadSrcArg definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5586145e4068 <col:3, col:10> col:10 implicit struct OldBadSrcArg
| `-CXXMethodDecl 0x5586145e4448 <line:123:7, line:124:14> line:123:19 parse 'bool (const String &, Vector<IPAddress> &, Args &)' static
|   |-ParmVarDecl 0x5586145e4108 <col:25, col:39> col:39 str 'const String &'
|   |-ParmVarDecl 0x5586145e4250 <col:44, col:63> col:63 result 'Vector<IPAddress> &'
|   `-ParmVarDecl 0x5586145e42f8 <line:124:4, col:10> col:10 args 'Args &'
|-CXXRecordDecl 0x5586145e4518 <line:127:3, line:130:3> line:127:10 struct InterfacesArg definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5586145e4638 <col:3, col:10> col:10 implicit struct InterfacesArg
| `-CXXMethodDecl 0x5586145e4b58 <line:128:7, line:129:50> line:128:19 parse 'bool (const String &, Vector<IPAddress> &, Vector<IPAddress> &, Args &)' static
|   |-ParmVarDecl 0x5586145e46d8 <col:25, col:39> col:39 str 'const String &'
|   |-ParmVarDecl 0x5586145e4820 <col:44, col:63> col:63 result_bad_src 'Vector<IPAddress> &'
|   |-ParmVarDecl 0x5586145e4970 <line:129:4, col:23> col:23 result_good_dst 'Vector<IPAddress> &'
|   `-ParmVarDecl 0x5586145e49e8 <col:40, col:46> col:46 args 'Args &'
|-AccessSpecDecl 0x5586145e4c30 <line:132:2, col:9> col:2 private
|-FieldDecl 0x5586145e4c70 <line:134:3, col:12> col:12 _offset 'unsigned int'
|-FieldDecl 0x5586145ef7d0 <line:136:3, col:21> col:21 _bad_src 'Vector<IPAddress>':'Vector<IPAddress>'
|-FieldDecl 0x5586145ef830 <line:138:3, col:8> col:8 _checksum 'bool'
|-FieldDecl 0x5586145ef890 <line:142:3, col:8> col:8 _verbose 'bool'
|-FieldDecl 0x5586145ef990 <line:144:3, col:21> col:21 _good_dst 'Vector<IPAddress>':'Vector<IPAddress>'
|-FieldDecl 0x5586145ef9f0 <line:147:3, col:19> col:19 referenced _drops 'atomic_uint32_t'
|-FieldDecl 0x5586145efa50 <line:148:3, col:20> col:20 _reason_drops 'atomic_uint32_t *'
|-EnumDecl 0x5586145efaa0 <line:150:3, line:158:3> line:150:8 referenced Reason
| |-EnumConstantDecl 0x5586145efb60 <line:151:5> col:5 MINISCULE_PACKET 'CheckIPHeader::Reason'
| |-EnumConstantDecl 0x5586145efbb0 <line:152:5> col:5 BAD_VERSION 'CheckIPHeader::Reason'
| |-EnumConstantDecl 0x5586145efc00 <line:153:5> col:5 BAD_HLEN 'CheckIPHeader::Reason'
| |-EnumConstantDecl 0x5586145efc50 <line:154:5> col:5 BAD_IP_LEN 'CheckIPHeader::Reason'
| |-EnumConstantDecl 0x5586145efca0 <line:155:5> col:5 BAD_CHECKSUM 'CheckIPHeader::Reason'
| |-EnumConstantDecl 0x5586145efcf0 <line:156:5> col:5 BAD_SADDR 'CheckIPHeader::Reason'
| `-EnumConstantDecl 0x5586145efd40 <line:157:5> col:5 referenced NREASONS 'CheckIPHeader::Reason'
|-VarDecl 0x5586145efe70 <line:159:3, col:50> col:29 reason_texts 'const char *const [6]' static
|-CXXMethodDecl 0x5586145f0038 <line:161:3, col:32> col:11 drop 'Packet *(CheckIPHeader::Reason, Packet *)'
| |-ParmVarDecl 0x5586145efee8 <col:16> col:22 'CheckIPHeader::Reason'
| `-ParmVarDecl 0x5586145eff60 <col:24, col:31> col:32 'Packet *'
|-CXXMethodDecl 0x5586145f0210 <line:162:3, col:47> col:17 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5586145f00f8 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x5586145f0178 <col:41, col:46> col:47 'void *'
|-FriendDecl 0x5586145f03d8 <line:164:3, col:16> col:10 'class CheckIPHeader2':'CheckIPHeader2'
|-CXXConstructorDecl 0x5586145f0448 <line:107:7> col:7 implicit CheckIPHeader 'void (const CheckIPHeader &)' inline default_delete noexcept-unevaluated 0x5586145f0448
| `-ParmVarDecl 0x5586145f0558 <col:7> col:7 'const CheckIPHeader &'
`-CXXMethodDecl 0x5586145f05f8 <col:7> col:7 implicit operator= 'CheckIPHeader &(const CheckIPHeader &)' inline default_delete noexcept-unevaluated 0x5586145f05f8
  `-ParmVarDecl 0x5586145f0708 <col:7> col:7 'const CheckIPHeader &'

Layout: <CGRecordLayout
  LLVMType:%class.CheckIPHeader = type { %class.Element.base, i32, %class.Vector, i8, i8, %class.Vector, %class.atomic_uint32_t, %class.atomic_uint32_t* }
  NonVirtualBaseLLVMType:%class.CheckIPHeader = type { %class.Element.base, i32, %class.Vector, i8, i8, %class.Vector, %class.atomic_uint32_t, %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct CheckIPHeader::InterfacesArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586145e4518 <../elements/ip/checkipheader.hh:127:3, line:130:3> line:127:10 referenced struct InterfacesArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586145e4638 <col:3, col:10> col:10 implicit struct InterfacesArg
|-CXXMethodDecl 0x5586145e4b58 <line:128:7, line:129:50> line:128:19 parse 'bool (const String &, Vector<IPAddress> &, Vector<IPAddress> &, Args &)' static
| |-ParmVarDecl 0x5586145e46d8 <col:25, col:39> col:39 str 'const String &'
| |-ParmVarDecl 0x5586145e4820 <col:44, col:63> col:63 result_bad_src 'Vector<IPAddress> &'
| |-ParmVarDecl 0x5586145e4970 <line:129:4, col:23> col:23 result_good_dst 'Vector<IPAddress> &'
| `-ParmVarDecl 0x5586145e49e8 <col:40, col:46> col:46 args 'Args &'
|-CXXConstructorDecl 0x5586146e39a8 <line:127:10> col:10 implicit referenced constexpr InterfacesArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5586146e3aa8 <col:10> col:10 implicit constexpr InterfacesArg 'void (const CheckIPHeader::InterfacesArg &)' inline default trivial noexcept-unevaluated 0x5586146e3aa8
| `-ParmVarDecl 0x5586146e3bb8 <col:10> col:10 'const CheckIPHeader::InterfacesArg &'
|-CXXConstructorDecl 0x5586146e3c58 <col:10> col:10 implicit used constexpr InterfacesArg 'void (CheckIPHeader::InterfacesArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5586146e3d68 <col:10> col:10 'CheckIPHeader::InterfacesArg &&'
| `-CompoundStmt 0x5586146e45d0 <col:10>
`-CXXDestructorDecl 0x5586146e3e08 <col:10> col:10 implicit referenced ~InterfacesArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.CheckIPHeader::InterfacesArg" = type { i8 }
  NonVirtualBaseLLVMType:%"struct.CheckIPHeader::InterfacesArg" = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558614690510 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558614690628 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5586146906b8 <col:16, col:22> col:16 public
|-EnumDecl 0x5586146906e0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5586146907e0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558614690a30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146907c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5586146907a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x558614690870 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558614690a48 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614690850 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x558614690830 <col:24> 'int' 22
| |-EnumConstantDecl 0x558614690900 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558614690a60 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586146908e0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5586146908c0 <col:24> 'int' 34
| |-EnumConstantDecl 0x558614690990 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558614690a78 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614690970 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x558614690950 <col:25> 'int' 95
| `-EnumConstantDecl 0x5586146909e0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5586146923f0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558614692828 <col:7>
|-CXXConstructorDecl 0x5586146924f8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5586146924f8
| `-ParmVarDecl 0x558614692608 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5586146926a8 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x5586146926a8
| `-ParmVarDecl 0x5586146927b8 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x558614694948 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558614690aa8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x558614690c08 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x558614690c98 <col:32, col:38> col:32 public
|-TypedefDecl 0x558614690cd0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5586141be200 'uint32_t' sugar
|   |-Typedef 0x5586140d14c8 'uint32_t'
|   `-TypedefType 0x5586140aa5a0 '__uint32_t' sugar
|     |-Typedef 0x5586140aa198 '__uint32_t'
|     `-BuiltinType 0x558614068620 'unsigned int'
|-CXXConstructorDecl 0x558614690e18 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x558614690d40 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5586146922f8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x558614692838 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x558614691bb0 'base' 'int'
| | `-ImplicitCastExpr 0x558614692398 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x558614692358 <col:16> 'int' lvalue ParmVar 0x558614690d40 'b' 'int'
| `-CompoundStmt 0x5586146928a8 <col:19, line:1046:5>
|-CXXMethodDecl 0x558614691310 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x558614690ee0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x558614690f60 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x558614690fd8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x558614691058 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x558614691118 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x558614691198 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x558614691768 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5586146913e0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x5586146916c8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x558614691488 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x558614691528 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x5586146915a0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x558614692318 <col:82> 'const ArgContext' lvalue Var 0x558614685328 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x5586146937f8 <col:94, line:1067:5>
|     |-DeclStmt 0x558614692a38 <line:1054:9, col:64>
|     | `-VarDecl 0x5586146928c8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x5586146929f0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x558614692c58 <line:1055:9, col:91>
|     | `-VarDecl 0x558614692a68 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x558614692c30 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x558614692c10 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x558614692bc0 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x558614692ba0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x558614692b48 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x558614692af8 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x558614692b28 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x558614692b88 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x558614692b68 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x558614692bf0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x558614692db8 <line:1056:9, col:27>
|     | `-VarDecl 0x558614692d50 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x558614693220 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x558614693130 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5586146930b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5586145883e8 0x5586143d17a8 0x5586143d1480 0x5586143c1c50 0x5586143c1900 0x5586143c11f0 0x558614393b60 0x558614321030
|     | | |-CallExpr 0x558614692ff0 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x558614692de0 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x558614692e90 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x558614692e60 <col:19, col:23> '<bound member function type>' .begin 0x5586143b0e58
|     | | | |   `-DeclRefExpr 0x558614692e40 <col:19> 'const String' lvalue ParmVar 0x558614691488 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x558614692f00 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x558614692ed0 <col:32, col:36> '<bound member function type>' .end 0x5586143b1070
|     | | | |   `-DeclRefExpr 0x558614692eb0 <col:32> 'const String' lvalue ParmVar 0x558614691488 'str' 'const String &'
|     | | | |-DeclRefExpr 0x558614692f20 <col:43> 'const bool' lvalue Var 0x5586146928c8 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x558614692f88 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x558614692f68 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x558614692fb0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x558614692d50 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x558614692fd0 <col:73> 'const int' lvalue Var 0x558614692a68 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x558614693090 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x558614693060 <col:16, col:20> '<bound member function type>' .end 0x5586143b1070
|     | |     `-DeclRefExpr 0x558614693040 <col:16> 'const String' lvalue ParmVar 0x558614691488 'str' 'const String &'
|     | `-BinaryOperator 0x5586146931e0 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x558614693178 <col:13> 'int' lvalue ->status 0x558614691c18
|     |   | `-CXXThisExpr 0x558614693168 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5586146931c8 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5586146931a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558614690870 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x558614693470 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x558614693358 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x558614693340 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x558614693328 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x558614693248 <col:13> 'int' lvalue ->status 0x558614691c18
|     | | |     `-CXXThisExpr 0x558614693238 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x558614693308 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5586146932d8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x558614693288 <col:23> 'int' lvalue ->status 0x558614691c18
|     | |   |   `-CXXThisExpr 0x558614693278 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5586146932f0 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5586146932b8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558614690900 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x558614693450 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5586146933f0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x558614693398 <col:13, col:18> '<bound member function type>' .error 0x5586145500d0
|     |   | | `-DeclRefExpr 0x558614693378 <col:13> 'const ArgContext' lvalue ParmVar 0x5586146915a0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x558614693418 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5586146933c8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x558614693440 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x558614693430 <col:20> 'bool' false
|     |-DeclStmt 0x558614693648 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5586146935f0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x558614693580 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x5586146937a8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558614693660 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x558614354ff8
|     | |-DeclRefExpr 0x5586146936a8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x558614692d50 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x558614693778 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x5586146936f0 <col:64> 'V' lvalue ParmVar 0x558614691528 'result' 'V &'
|     `-ReturnStmt 0x5586146937e8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5586146937d8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x558614691b28 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5586146917d8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x558614691a88 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x558614691888 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x558614691928 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5586146919a0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x558614692338 <col:71> 'const ArgContext' lvalue Var 0x558614685328 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x558614693f68 <col:83, line:1083:5>
| |   |-DeclStmt 0x5586146938c0 <line:1071:9, col:12>
| |   | `-VarDecl 0x558614693858 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x558614693f40 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x558614693b50 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5586146939d8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5586146939a0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5586146938e8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x558614693940 <col:31> 'const String' lvalue ParmVar 0x558614691888 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x558614693960 <col:36> 'V' lvalue Var 0x558614693858 'x' 'V'
| |     | |   `-DeclRefExpr 0x558614693980 <col:39> 'const ArgContext' lvalue ParmVar 0x5586146919a0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x558614693b30 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x558614693b10 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x558614693af8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x558614693ae0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x558614693a00 <col:17> 'int' lvalue ->status 0x558614691c18
| |     |     |     `-CXXThisExpr 0x5586146939f0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x558614693ac0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x558614693a90 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x558614693a40 <col:27> 'int' lvalue ->status 0x558614691c18
| |     |       |   `-CXXThisExpr 0x558614693a30 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x558614693aa8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x558614693a70 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558614690900 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x558614693b80 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x558614693b70 <col:20> 'bool' false
| |     `-IfStmt 0x558614693f18 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x558614693c20 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x558614693bf0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x558614693ba0 <col:18> 'int' lvalue ->status 0x558614691c18
| |       | |   `-CXXThisExpr 0x558614693b90 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x558614693c08 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x558614693bd0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558614690900 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x558614693e58 <col:42, line:1079:9>
| |       | |-CallExpr 0x558614693e00 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x558614693c50 <line:1076:13> '<bound member function type>' ->range_error 0x558614692228
| |       | | | `-CXXThisExpr 0x558614693c40 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x558614693c80 <col:25> 'const ArgContext' lvalue ParmVar 0x5586146919a0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x558614693d60 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x558614693dd8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x558614693db8 <col:43> 'V' lvalue Var 0x558614693858 'x' 'V'
| |       | `-ReturnStmt 0x558614693e48 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x558614693e38 <col:20> 'bool' false
| |       `-CompoundStmt 0x558614693ef8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x558614693eb8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x558614693e78 <col:13> 'V' lvalue ParmVar 0x558614691928 'result' 'V &'
| |         | `-DeclRefExpr 0x558614693e98 <col:22> 'V' lvalue Var 0x558614693858 'x' 'V'
| |         `-ReturnStmt 0x558614693ee8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x558614693ed8 <col:20> 'bool' true
| `-CXXMethodDecl 0x5586146e6108 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5586146e5ee8 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x5586146e5fb8 <col:35, col:38> col:38 result 'unsigned int &'
|   `-ParmVarDecl 0x5586146e6020 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x558614692338 <col:71> 'const ArgContext' lvalue Var 0x558614685328 'blank_args' 'const ArgContext'
|-FieldDecl 0x558614691bb0 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x558614691c18 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x558614691c68 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x558614691f20 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x558614691ca8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x558614691d28 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x558614691da0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x558614691e20 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x558614692228 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x558614691ff0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x558614692068 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x558614692100 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5586146947c8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5586146947c8
| `-ParmVarDecl 0x5586146948d8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x558614694a58 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x558614694a58
| `-ParmVarDecl 0x558614694b68 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x5586146e5b80 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct CheckIPHeader::OldBadSrcArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586145e3f48 <../elements/ip/checkipheader.hh:122:3, line:125:3> line:122:10 referenced struct OldBadSrcArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586145e4068 <col:3, col:10> col:10 implicit struct OldBadSrcArg
|-CXXMethodDecl 0x5586145e4448 <line:123:7, line:124:14> line:123:19 parse 'bool (const String &, Vector<IPAddress> &, Args &)' static
| |-ParmVarDecl 0x5586145e4108 <col:25, col:39> col:39 str 'const String &'
| |-ParmVarDecl 0x5586145e4250 <col:44, col:63> col:63 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x5586145e42f8 <line:124:4, col:10> col:10 args 'Args &'
|-CXXConstructorDecl 0x5586146e6550 <line:122:10> col:10 implicit referenced constexpr OldBadSrcArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5586146e6658 <col:10> col:10 implicit constexpr OldBadSrcArg 'void (const CheckIPHeader::OldBadSrcArg &)' inline default trivial noexcept-unevaluated 0x5586146e6658
| `-ParmVarDecl 0x5586146e6768 <col:10> col:10 'const CheckIPHeader::OldBadSrcArg &'
|-CXXConstructorDecl 0x5586146e6808 <col:10> col:10 implicit used constexpr OldBadSrcArg 'void (CheckIPHeader::OldBadSrcArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5586146e6918 <col:10> col:10 'CheckIPHeader::OldBadSrcArg &&'
| `-CompoundStmt 0x55861470c800 <col:10>
`-CXXDestructorDecl 0x5586146e69b8 <col:10> col:10 implicit referenced ~OldBadSrcArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.CheckIPHeader::OldBadSrcArg" = type { i8 }
  NonVirtualBaseLLVMType:%"struct.CheckIPHeader::OldBadSrcArg" = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586145a2ec8 prev 0x5586145980d0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586145a2fc0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5586145a30b0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5586145a31d8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5586145a3358 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5586145a34d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5586145a3658 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5586145b4488 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5586145b4cf8 <col:11>
|-CXXDestructorDecl 0x5586145b4560 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5586145b4698 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5586145b4698
| `-ParmVarDecl 0x5586145b47a8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5586145b4848 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5586145b4848
| `-ParmVarDecl 0x5586145b4958 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5586145b7718 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5586145b7828 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5586145b7aa8 <col:11>
|   `-ReturnStmt 0x5586145b7a98 <col:11>
|     `-UnaryOperator 0x5586145b7a80 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586145b7a70 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5586145b7898 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5586145b7898
  `-ParmVarDecl 0x5586145b79a8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586145a36c0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586145a37d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5586145a3878 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5586145a38e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5586145a3948 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5586145a39b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5586145a3a10 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5586145a3ad0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5586145a3b30 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5586145a3b90 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5586145b4398 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5586145a3878 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5586145b4d08 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5586145b4d60 <col:12>
|-CXXConstructorDecl 0x5586145b49c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5586145b49c8
| `-ParmVarDecl 0x5586145b4ad8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5586145b4b78 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5586145b4b78
| `-ParmVarDecl 0x5586145b4c88 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5586145b6e00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586145917e0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5586145918f8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x558614591988 <col:16, col:22> col:16 public
|-EnumDecl 0x5586145919b0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x558614591ab0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x558614591b90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614591a90 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x558614591a70 <col:21> 'int' 28
| `-EnumConstantDecl 0x558614591b40 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x558614591ba8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558614591b20 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x558614591b00 <col:22> 'int' 64
|-CXXMethodDecl 0x558614591ee8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x558614591bd0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558614591c50 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x558614591cc8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558614591d40 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558614591fa8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5586145921a8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x558614592020 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x558614592098 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558614592258 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5586145923b8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5586145922c8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558614592460 <col:72> warn_unused_result ""
|-TypedefDecl 0x5586145927c0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x558614592750 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5586145926f0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5586145926b0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5586140684e0 'void'
|       |-PointerType 0x558614311960 'unsigned char *'
|       | `-BuiltinType 0x5586140685e0 'unsigned char'
|       |-TypedefType 0x55861410df50 'size_t' sugar
|       | |-Typedef 0x5586140d8be0 'size_t'
|       | `-BuiltinType 0x558614068640 'unsigned long'
|       `-PointerType 0x558614068ce0 'void *'
|         `-BuiltinType 0x5586140684e0 'void'
|-CXXMethodDecl 0x558614592c38 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x558614592830 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5586145928a8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558614592940 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5586145929c0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5586145ad330 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5586145ad318 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5586145ad2e0 <col:58> 'int' 0
| |-ParmVarDecl 0x558614592a40 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5586145ad358 <col:76> 'int' 0
| |-ParmVarDecl 0x558614592ac0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5586145ad378 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x558614592d08 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x558614592d88 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558614592e48 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x558614592ee8 <col:20>
| `-OptimizeNoneAttr 0x558614592f40 <col:30>
|-CXXMethodDecl 0x558614592fb8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x558614593058 <col:20>
| `-OptimizeNoneAttr 0x5586145930b0 <col:30>
|-CXXMethodDecl 0x558614593128 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5586145931c8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x558614593278 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x558614593318 <col:20>
| |-OptimizeNoneAttr 0x558614593370 <col:30>
| `-WarnUnusedResultAttr 0x558614593398 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5586145933f0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x558614593490 <col:20>
| `-OptimizeNoneAttr 0x5586145934e8 <col:30>
|-CXXMethodDecl 0x558614593538 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5586145935d8 <col:20>
| `-OptimizeNoneAttr 0x558614593630 <col:30>
|-CXXMethodDecl 0x558614593678 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x558614593718 <col:20>
| `-OptimizeNoneAttr 0x558614593770 <col:30>
|-CXXMethodDecl 0x5586145937b8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558614593878 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558614593940 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558614593a08 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558614593ac8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558614593be8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5586145ad440 <col:54, line:99:5>
|   `-ReturnStmt 0x5586145ad430 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5586145ad418 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5586145ad3e8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5586145a3ec8
|         `-CXXThisExpr 0x5586145ad3d8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x558614593d88 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x558614593c98 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5586145ad4f0 <col:67, line:103:5>
|   `-BinaryOperator 0x5586145ad4d0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5586145ad468 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5586145a3ec8
|     | `-CXXThisExpr 0x5586145ad458 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5586145ad4b8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5586145ad498 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x558614593c98 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x558614593e80 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5586145ad570 <col:33, line:107:5>
|   `-ReturnStmt 0x5586145ad560 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5586145ad548 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5586145ad518 <col:16> 'void *' lvalue ->_destructor_argument 0x5586145a3f30
|         `-CXXThisExpr 0x5586145ad508 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558614593f40 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5586145adba0 <col:25, line:113:5>
|   |-ParenExpr 0x5586145ad8e8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5586145ad8b8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5586145ad628 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5586145ad600 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5586145ad5c8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5586145ad598 <col:24> '<bound member function type>' ->shared 0x558614592fb8
|   |   |       `-ImplicitCastExpr 0x5586145ad5e8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5586145ad588 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5586145ad688 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145ad668 <col:42> 'int' 0
|   |   `-CallExpr 0x5586145ad818 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5586145ad800 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145ad7e0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145ad858 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145ad6f8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5586145ad870 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145ad720 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145ad888 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145ad758 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5586145ad8a0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145ad7c8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145ad7b0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145ad778 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5586145adae8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5586145ad918 <col:2> 'unsigned char *' lvalue ->_head 0x5586145a3cd0
|   | | `-CXXThisExpr 0x5586145ad908 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5586145adad0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5586145adab0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5586145ad958 <col:10> 'unsigned char *' lvalue ->_data 0x5586145a3d38
|   |     | `-CXXThisExpr 0x5586145ad948 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5586145ada98 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5586145ada78 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5586145ad998 <col:18> 'unsigned char *' lvalue ->_tail 0x5586145a3da0
|   |         | `-CXXThisExpr 0x5586145ad988 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5586145ada60 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5586145ada40 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5586145ad9d8 <col:26> 'unsigned char *' lvalue ->_end 0x5586145a3e08
|   |             | `-CXXThisExpr 0x5586145ad9c8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5586145ada28 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5586145ada08 <col:33> 'int' 0
|   `-BinaryOperator 0x5586145adb80 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5586145adb18 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5586145a3ec8
|     | `-CXXThisExpr 0x5586145adb08 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5586145adb68 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5586145adb48 <col:16> 'int' 0
|-CXXMethodDecl 0x558614594080 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558614593ff0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558614594128 <col:20>
| |-OptimizeNoneAttr 0x558614594180 <col:30>
| `-WarnUnusedResultAttr 0x5586145941a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558614594278 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5586145941e8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558614594320 <col:20>
| |-OptimizeNoneAttr 0x558614594378 <col:30>
| `-WarnUnusedResultAttr 0x5586145943a0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5586145944d8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5586145943e0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558614594580 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x558614594680 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5586145945f0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558614594728 <col:20>
| `-OptimizeNoneAttr 0x558614594780 <col:30>
|-CXXMethodDecl 0x558614594848 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5586145947b8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5586145948f0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5586145949f0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558614594960 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558614594a98 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558614594b98 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x558614594b08 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558614594c40 <col:20>
| `-OptimizeNoneAttr 0x558614594c98 <col:30>
|-CXXMethodDecl 0x558614594e28 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x558614594cd8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x558614594d50 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5586145ad398 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x558614594ed8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5586145950d8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558614594f50 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x558614594fc8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586145952e8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558614595198 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558614595210 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586145954f8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5586145953a8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x558614595428 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5586145ad3a8 <col:39> 'int' 0
|-CXXMethodDecl 0x5586145955c8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x558614595690 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558614595758 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x558614595818 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5586145958e0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x558614595a28 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x558614595998 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x558614595bf8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558614595ae8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x558614595b60 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558614595cc8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x558614595d88 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x558614595e28 <col:20>
| `-OptimizeNoneAttr 0x558614595e80 <col:30>
|-CXXMethodDecl 0x558614595ed0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558614595f70 <col:20>
| `-OptimizeNoneAttr 0x558614595fc8 <col:30>
|-CXXMethodDecl 0x558614596018 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5586145960d8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5586145961a0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x558614596240 <col:20>
| `-OptimizeNoneAttr 0x558614596298 <col:30>
|-CXXMethodDecl 0x5586145963e8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5586145962d8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x558614596350 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558614596538 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5586145964a8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558614596610 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5586145966d0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x558614596770 <col:20>
| `-OptimizeNoneAttr 0x5586145967c8 <col:30>
|-CXXMethodDecl 0x558614596818 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5586145968b8 <col:20>
| `-OptimizeNoneAttr 0x558614596910 <col:30>
|-CXXMethodDecl 0x558614596960 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x558614596a28 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x558614596ac8 <col:20>
| `-OptimizeNoneAttr 0x558614596b20 <col:30>
|-CXXMethodDecl 0x558614596b68 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x558614596c88 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x558614596df8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x558614596d38 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x558614596ee8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x558614596f88 <col:20>
| `-OptimizeNoneAttr 0x558614596fe0 <col:30>
|-CXXMethodDecl 0x558614597030 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5586145970f0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558614597328 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5586145971a0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x558614597218 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5586145973d8 <col:20>
| `-OptimizeNoneAttr 0x558614597430 <col:30>
|-CXXMethodDecl 0x5586145974d8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x558614597578 <col:20>
| `-OptimizeNoneAttr 0x5586145975d0 <col:30>
|-CXXMethodDecl 0x558614597620 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5586145976c0 <col:20>
| `-OptimizeNoneAttr 0x558614597718 <col:30>
|-CXXMethodDecl 0x558614597760 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x558614597800 <col:20>
| `-OptimizeNoneAttr 0x558614597858 <col:30>
|-CXXMethodDecl 0x558614597958 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x558614597890 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x558614597a00 <col:20>
| `-OptimizeNoneAttr 0x558614597a58 <col:30>
|-CXXMethodDecl 0x558614597c18 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x558614597a90 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x558614597b08 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558614597cc8 <col:20>
| `-OptimizeNoneAttr 0x558614597d20 <col:30>
|-CXXMethodDecl 0x558614597dc8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x558614597ee8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x558614598008 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5586145980a8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5586145980d0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5586145981f8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x558614598298 <col:20>
| `-OptimizeNoneAttr 0x5586145982f0 <col:30>
|-CXXMethodDecl 0x558614598398 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x558614598438 <col:20>
| `-OptimizeNoneAttr 0x558614598490 <col:30>
|-AccessSpecDecl 0x5586145984b8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5586145984e0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5586145985e0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x558614598630 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586145985c0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5586145985a0 <col:14> 'int' 48
|-CXXMethodDecl 0x558614598698 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x558614598738 <col:20>
| `-OptimizeNoneAttr 0x558614598790 <col:30>
|-CXXMethodDecl 0x558614598808 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5586145988a8 <col:20>
| `-OptimizeNoneAttr 0x558614598900 <col:30>
|-CXXMethodDecl 0x5586145989c8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x558614598938 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x558614598b68 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x558614598d08 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x558614598c18 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x558614598db0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x558614598eb0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558614599260 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614598e90 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x558614598e70 <col:9> 'int' 0
| |-EnumConstantDecl 0x558614598f40 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558614599278 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614598f20 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x558614598f00 <col:14> 'int' 1
| |-EnumConstantDecl 0x558614598fd0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558614599290 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614598fb0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x558614598f90 <col:14> 'int' 2
| |-EnumConstantDecl 0x558614599060 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5586145992a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614599040 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x558614599020 <col:14> 'int' 3
| |-EnumConstantDecl 0x5586145990f0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5586145992c0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586145990d0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5586145990b0 <col:13> 'int' 4
| |-EnumConstantDecl 0x558614599180 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5586145992d8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614599160 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x558614599140 <col:13> 'int' 5
| `-EnumConstantDecl 0x558614599210 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5586145992f0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586145991f0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5586145991d0 <col:14> 'int' 6
|-CXXMethodDecl 0x558614599358 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5586145993f8 <col:20>
| `-OptimizeNoneAttr 0x558614599450 <col:30>
|-CXXMethodDecl 0x558614599548 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x558614599488 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5586145995f0 <col:20>
| `-OptimizeNoneAttr 0x558614599648 <col:30>
|-CXXMethodDecl 0x5586145996b8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5586145997e0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x558614599958 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x558614599890 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x558614599a20 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x558614599ae8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x558614599c28 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x558614599b98 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x558614599cd0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x558614599dd0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558614599fd0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614599db0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x558614599d90 <col:23> 'int' 0
| |-EnumConstantDecl 0x558614599e60 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558614599fe8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614599e40 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x558614599e20 <col:45> 'int' 4
| |-EnumConstantDecl 0x558614599ef0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55861459a000 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558614599ed0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x558614599eb0 <col:24> 'int' 0
| `-EnumConstantDecl 0x558614599f80 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55861459a018 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558614599f60 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x558614599f40 <col:47> 'int' 16
|-CXXMethodDecl 0x55861459a078 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55861459a1e8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55861459a128 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55861459a290 <col:20>
| `-OptimizeNoneAttr 0x55861459a2e8 <col:30>
|-CXXMethodDecl 0x55861459a338 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5586145adcc0 <col:18, col:36>
|   `-ReturnStmt 0x5586145adcb0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5586145adc98 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5586145adc78 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5586145adc48 <col:27> '<bound member function type>' ->xanno 0x558614598398
|           `-CXXThisExpr 0x5586145adc38 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55861459a430 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5586145addd0 <col:30, col:48>
|   `-ReturnStmt 0x5586145addc0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5586145adda8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5586145add88 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5586145add58 <col:39> '<bound member function type>' ->xanno 0x5586145981f8
|           `-CXXThisExpr 0x5586145add48 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55861459a518 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5586145adf68 <col:24, col:50>
|   `-ReturnStmt 0x5586145adf58 <col:26, col:47>
|     `-UnaryOperator 0x5586145adf40 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5586145adf20 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5586145adf08 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586145adeb8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5586145a31d8
|         |   `-CXXMemberCallExpr 0x5586145ade98 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5586145ade68 <col:34> '<bound member function type>' ->xanno 0x558614598398
|         |       `-CXXThisExpr 0x5586145ade58 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5586145adee8 <col:46> 'int' 0
|-CXXMethodDecl 0x55861459a620 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5586145ae138 <col:36, col:62>
|   `-ReturnStmt 0x5586145ae128 <col:38, col:59>
|     `-UnaryOperator 0x5586145ae110 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5586145ae0f0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5586145ae0d8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586145ae050 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5586145a31d8
|         |   `-CXXMemberCallExpr 0x5586145ae030 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5586145ae000 <col:46> '<bound member function type>' ->xanno 0x5586145981f8
|         |       `-CXXThisExpr 0x5586145adff0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5586145ae080 <col:58> 'int' 0
|-CXXMethodDecl 0x55861459a738 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5586145ae2d0 <col:26, col:53>
|   `-ReturnStmt 0x5586145ae2c0 <col:28, col:50>
|     `-UnaryOperator 0x5586145ae2a8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5586145ae288 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5586145ae270 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586145ae220 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5586145a34d8
|         |   `-CXXMemberCallExpr 0x5586145ae200 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5586145ae1d0 <col:36> '<bound member function type>' ->xanno 0x558614598398
|         |       `-CXXThisExpr 0x5586145ae1c0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5586145ae250 <col:49> 'int' 0
|-CXXMethodDecl 0x55861459a858 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5586145ae4a8 <col:38, col:65>
|   `-ReturnStmt 0x5586145ae498 <col:40, col:62>
|     `-UnaryOperator 0x5586145ae480 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5586145ae460 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5586145ae448 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586145ae3b8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5586145a34d8
|         |   `-CXXMemberCallExpr 0x5586145ae398 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5586145ae368 <col:48> '<bound member function type>' ->xanno 0x5586145981f8
|         |       `-CXXThisExpr 0x5586145ae358 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5586145ae3e8 <col:61> 'int' 0
|-CXXMethodDecl 0x55861459aa08 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55861459a910 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5586145aeb78 <col:34, line:463:5>
|   |-ParenExpr 0x5586145ae9c0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5586145ae990 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5586145ae5f8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145ae5c8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145ae518 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145ae500 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145ae4c0 <col:23> 'int' lvalue ParmVar 0x55861459a910 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145ae4e0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145ae5a8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145ae578 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145ae538 <col:33> 'int' lvalue ParmVar 0x55861459a910 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5586145ae590 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5586145ae558 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5586145ae658 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145ae638 <col:56> 'int' 0
|   |   `-CallExpr 0x5586145ae8f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5586145ae8d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145ae8b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145ae930 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145ae748 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5586145ae948 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145ae778 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145ae960 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145ae7b0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5586145ae978 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145ae8a0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145ae888 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145ae848 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5586145aeb68 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5586145aeb50 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5586145aeb30 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5586145aeb00 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586145aeab0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5586145a31d8
|         |   `-CXXMemberCallExpr 0x5586145aea90 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5586145aea60 <col:9> '<bound member function type>' ->xanno 0x5586145981f8
|         |       `-CXXThisExpr 0x5586145aea50 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5586145aeb18 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5586145aeae0 <col:21> 'int' lvalue ParmVar 0x55861459a910 'i' 'int'
|-CXXMethodDecl 0x55861459ac58 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55861459aac8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55861459ab40 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5586145af208 <col:40, line:472:5>
|   |-ParenExpr 0x5586145af020 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5586145aeff0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5586145aecd0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145aeca0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145aebf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145aebd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145aeb98 <col:23> 'int' lvalue ParmVar 0x55861459aac8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145aebb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145aec80 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145aec50 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145aec10 <col:33> 'int' lvalue ParmVar 0x55861459aac8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5586145aec68 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5586145aec30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5586145aed30 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145aed10 <col:56> 'int' 0
|   |   `-CallExpr 0x5586145aef50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5586145aef38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145aef18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145aef90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145aeda0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5586145aefa8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145aedd0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145aefc0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145aee08 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5586145aefd8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145aef00 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145aeee8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145aeea8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5586145af1e8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5586145af190 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5586145af160 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5586145af110 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5586145a31d8
|     | |   `-CXXMemberCallExpr 0x5586145af0f0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5586145af0c0 <col:2> '<bound member function type>' ->xanno 0x558614598398
|     | |       `-CXXThisExpr 0x5586145af0b0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5586145af178 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5586145af140 <col:14> 'int' lvalue ParmVar 0x55861459aac8 'i' 'int'
|     `-ImplicitCastExpr 0x5586145af1d0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5586145af1b0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55861459ab40 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55861459ae18 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55861459ad20 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5586145af988 <col:36, line:485:5>
|   |-ParenExpr 0x5586145af6f0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586145af6c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586145af3a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145af370 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145af280 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145af268 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145af228 <col:23> 'int' lvalue ParmVar 0x55861459ad20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145af248 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145af350 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145af338 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145af2a0 <col:33> 'int' lvalue ParmVar 0x55861459ad20 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145af318 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145af300 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145af2c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586145af2e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5586145af400 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145af3e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5586145af620 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586145af608 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145af5e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145af660 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145af470 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5586145af678 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145af4a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145af690 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145af4e0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5586145af6a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145af5d0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145af5b8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145af578 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5586145af978 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5586145af960 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5586145af948 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586145af918 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5586145af8b8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586145af888 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586145af800 <col:61, col:70> 'char const[48]' lvalue ->c 0x5586145a30b0
|             |   `-CXXMemberCallExpr 0x5586145af7e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586145af7b0 <col:61> '<bound member function type>' ->xanno 0x5586145981f8
|             |       `-CXXThisExpr 0x5586145af7a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586145af8a0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586145af830 <col:74> 'int' lvalue ParmVar 0x55861459ad20 'i' 'int'
|-CXXMethodDecl 0x55861459b068 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55861459aed8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55861459af50 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5586145b00d8 <col:42, line:500:5>
|   |-ParenExpr 0x5586145afe70 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586145afe40 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586145afb20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145afaf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145afa00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145af9e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145af9a8 <col:23> 'int' lvalue ParmVar 0x55861459aed8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145af9c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145afad0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145afab8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145afa20 <col:33> 'int' lvalue ParmVar 0x55861459aed8 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145afa98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145afa80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145afa40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586145afa60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5586145afb80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145afb60 <col:60> 'int' 0
|   |   `-CallExpr 0x5586145afda0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586145afd88 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145afd68 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145afde0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145afbf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5586145afdf8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145afc28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145afe10 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145afc60 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5586145afe28 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145afd50 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145afd38 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145afcf8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5586145b00b8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5586145b0068 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586145b0038 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5586145affe0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586145affb0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586145aff60 <col:48, col:57> 'char [48]' lvalue ->c 0x5586145a30b0
|     |     |   `-CXXMemberCallExpr 0x5586145aff40 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586145aff10 <col:48> '<bound member function type>' ->xanno 0x558614598398
|     |     |       `-CXXThisExpr 0x5586145aff00 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586145affc8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586145aff90 <col:61> 'int' lvalue ParmVar 0x55861459aed8 'i' 'int'
|     `-ImplicitCastExpr 0x5586145b00a0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5586145b0080 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55861459af50 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55861459b228 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55861459b130 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5586145b0838 <col:35, line:513:5>
|   |-ParenExpr 0x5586145b0548 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586145b0518 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586145b0270 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145b0240 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145b0150 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145b0138 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145b00f8 <col:23> 'int' lvalue ParmVar 0x55861459b130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145b0118 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145b0220 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145b0208 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145b0170 <col:33> 'int' lvalue ParmVar 0x55861459b130 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145b01e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145b01d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145b0190 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586145b01b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5586145b02d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145b02b0 <col:60> 'int' 0
|   |   `-CallExpr 0x5586145b0478 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586145b0460 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145b0440 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145b04b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b0340 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5586145b04d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b0378 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145b04e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145b03b0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5586145b0500 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145b0428 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145b0410 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145b03d0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5586145b0828 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5586145b0810 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5586145b07f8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586145b07c8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5586145b0740 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586145b0710 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586145b06c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5586145a30b0
|             |   `-CXXMemberCallExpr 0x5586145b06a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586145b0670 <col:60> '<bound member function type>' ->xanno 0x5586145981f8
|             |       `-CXXThisExpr 0x5586145b0660 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586145b0728 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586145b06f0 <col:73> 'int' lvalue ParmVar 0x55861459b130 'i' 'int'
|-CXXMethodDecl 0x55861459b478 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55861459b2e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55861459b360 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5586145b0f58 <col:41, line:528:5>
|   |-ParenExpr 0x5586145b0ce0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586145b0cb0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586145b09d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145b09a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145b08b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145b0898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145b0858 <col:23> 'int' lvalue ParmVar 0x55861459b2e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145b0878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145b0980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145b0968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145b08d0 <col:33> 'int' lvalue ParmVar 0x55861459b2e8 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145b0948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145b0930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145b08f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586145b0910 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5586145b0a30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145b0a10 <col:60> 'int' 0
|   |   `-CallExpr 0x5586145b0c10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586145b0bf8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145b0bd8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145b0c50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b0aa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5586145b0c68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b0ad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145b0c80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145b0b10 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5586145b0c98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145b0bc0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145b0ba8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145b0b68 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5586145b0f38 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5586145b0ee8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586145b0eb8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5586145b0e60 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586145b0e20 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586145b0dd0 <col:47, col:56> 'char [48]' lvalue ->c 0x5586145a30b0
|     |     |   `-CXXMemberCallExpr 0x5586145b0db0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586145b0d80 <col:47> '<bound member function type>' ->xanno 0x558614598398
|     |     |       `-CXXThisExpr 0x5586145b0d70 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586145b0e38 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586145b0e00 <col:60> 'int' lvalue ParmVar 0x55861459b2e8 'i' 'int'
|     `-ImplicitCastExpr 0x5586145b0f20 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5586145b0f00 <col:65> 'int16_t':'short' lvalue ParmVar 0x55861459b360 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55861459b638 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55861459b540 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5586145b1628 <col:36, line:541:5>
|   |-ParenExpr 0x5586145b13c8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586145b1398 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586145b10f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145b10c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145b0fd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145b0fb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145b0f78 <col:23> 'int' lvalue ParmVar 0x55861459b540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145b0f98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145b10a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145b1088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145b0ff0 <col:33> 'int' lvalue ParmVar 0x55861459b540 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145b1068 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145b1050 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145b1010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586145b1030 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5586145b1150 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145b1130 <col:60> 'int' 0
|   |   `-CallExpr 0x5586145b12f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586145b12e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145b12c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145b1338 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b11c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5586145b1350 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b11f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145b1368 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145b1230 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5586145b1380 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145b12a8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145b1290 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145b1250 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5586145b1618 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5586145b1600 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5586145b15e8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586145b15b8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5586145b1560 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586145b1530 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586145b14e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5586145a30b0
|             |   `-CXXMemberCallExpr 0x5586145b14c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586145b1490 <col:61> '<bound member function type>' ->xanno 0x5586145981f8
|             |       `-CXXThisExpr 0x5586145b1480 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586145b1548 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586145b1510 <col:74> 'int' lvalue ParmVar 0x55861459b540 'i' 'int'
|-CXXMethodDecl 0x55861459b808 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55861459b6f8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55861459b770 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55861459b8b8 <col:20>
| `-OptimizeNoneAttr 0x55861459b910 <col:30>
|-CXXMethodDecl 0x55861459ba48 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55861459b950 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5586145b1cf8 <col:35, line:562:5>
|   |-ParenExpr 0x5586145b1a98 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586145b1a68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586145b17c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145b1790 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145b16a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145b1688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145b1648 <col:23> 'int' lvalue ParmVar 0x55861459b950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145b1668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145b1770 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145b1758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145b16c0 <col:33> 'int' lvalue ParmVar 0x55861459b950 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145b1738 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145b1720 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145b16e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586145b1700 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5586145b1820 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145b1800 <col:60> 'int' 0
|   |   `-CallExpr 0x5586145b19c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586145b19b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145b1990 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145b1a08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b1890 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5586145b1a20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b18c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145b1a38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145b1900 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5586145b1a50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145b1978 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145b1960 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145b1920 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5586145b1ce8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5586145b1cd0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5586145b1cb8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586145b1c88 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5586145b1c30 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586145b1c00 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586145b1bb0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5586145a30b0
|             |   `-CXXMemberCallExpr 0x5586145b1b90 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586145b1b60 <col:60> '<bound member function type>' ->xanno 0x5586145981f8
|             |       `-CXXThisExpr 0x5586145b1b50 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586145b1c18 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586145b1be0 <col:73> 'int' lvalue ParmVar 0x55861459b950 'i' 'int'
|-CXXMethodDecl 0x55861459bc58 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55861459bb08 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55861459bb80 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5586145b23d8 <col:41, line:577:5>
|   |-ParenExpr 0x5586145b2168 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586145b2138 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586145b1e90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145b1e60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145b1d70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145b1d58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145b1d18 <col:23> 'int' lvalue ParmVar 0x55861459bb08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145b1d38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145b1e40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145b1e28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145b1d90 <col:33> 'int' lvalue ParmVar 0x55861459bb08 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145b1e08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145b1df0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145b1db0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586145b1dd0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5586145b1ef0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145b1ed0 <col:60> 'int' 0
|   |   `-CallExpr 0x5586145b2098 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586145b2080 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145b2060 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145b20d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b1f60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5586145b20f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b1f98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145b2108 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145b1fd0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5586145b2120 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145b2048 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145b2030 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145b1ff0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5586145b23b8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5586145b2368 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586145b2338 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5586145b22d8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586145b22a8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586145b2258 <col:47, col:56> 'char [48]' lvalue ->c 0x5586145a30b0
|     |     |   `-CXXMemberCallExpr 0x5586145b2238 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586145b2208 <col:47> '<bound member function type>' ->xanno 0x558614598398
|     |     |       `-CXXThisExpr 0x5586145b21f8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586145b22c0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586145b2288 <col:60> 'int' lvalue ParmVar 0x55861459bb08 'i' 'int'
|     `-ImplicitCastExpr 0x5586145b23a0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5586145b2380 <col:65> 'int32_t':'int' lvalue ParmVar 0x55861459bb80 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55861459be18 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55861459bd20 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5586145b2b08 <col:36, line:591:5>
|   |-ParenExpr 0x5586145b2848 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586145b2818 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586145b2570 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145b2540 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145b2450 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145b2438 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145b23f8 <col:23> 'int' lvalue ParmVar 0x55861459bd20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145b2418 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145b2520 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145b2508 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145b2470 <col:33> 'int' lvalue ParmVar 0x55861459bd20 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145b24e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145b24d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145b2490 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586145b24b0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5586145b25d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145b25b0 <col:60> 'int' 0
|   |   `-CallExpr 0x5586145b2778 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586145b2760 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145b2740 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145b27b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b2640 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5586145b27d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b2678 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145b27e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145b26b0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5586145b2800 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145b2728 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145b2710 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145b26d0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5586145b2af8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5586145b2ae0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5586145b2ac8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586145b2a98 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5586145b2a10 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586145b29e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586145b2990 <col:61, col:70> 'char const[48]' lvalue ->c 0x5586145a30b0
|             |   `-CXXMemberCallExpr 0x5586145b2970 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586145b2940 <col:61> '<bound member function type>' ->xanno 0x5586145981f8
|             |       `-CXXThisExpr 0x5586145b2930 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586145b29f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586145b29c0 <col:74> 'int' lvalue ParmVar 0x55861459bd20 'i' 'int'
|-CXXMethodDecl 0x55861459c068 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55861459bed8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55861459bf50 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5586145b31e8 <col:42, line:606:5>
|   |-ParenExpr 0x5586145b2f78 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586145b2f48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586145b2ca0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145b2c70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145b2b80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145b2b68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145b2b28 <col:23> 'int' lvalue ParmVar 0x55861459bed8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145b2b48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145b2c50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586145b2c38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145b2ba0 <col:33> 'int' lvalue ParmVar 0x55861459bed8 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145b2c18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145b2c00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145b2bc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586145b2be0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5586145b2d00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145b2ce0 <col:60> 'int' 0
|   |   `-CallExpr 0x5586145b2ea8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586145b2e90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145b2e70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145b2ee8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b2d70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5586145b2f00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b2da8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145b2f18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145b2de0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5586145b2f30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145b2e58 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145b2e40 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145b2e00 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5586145b31c8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5586145b3178 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586145b3148 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5586145b30e8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586145b30b8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586145b3068 <col:48, col:57> 'char [48]' lvalue ->c 0x5586145a30b0
|     |     |   `-CXXMemberCallExpr 0x5586145b3048 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586145b3018 <col:48> '<bound member function type>' ->xanno 0x558614598398
|     |     |       `-CXXThisExpr 0x5586145b3008 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586145b30d0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586145b3098 <col:61> 'int' lvalue ParmVar 0x55861459bed8 'i' 'int'
|     `-ImplicitCastExpr 0x5586145b31b0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5586145b3190 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55861459bf50 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55861459c200 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55861459c130 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5586145b3a58 <col:33, line:620:5>
|   |-ParenExpr 0x5586145b37d0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5586145b37a0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5586145b33f0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145b33c0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145b3260 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145b3248 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145b3208 <col:23> 'int' lvalue ParmVar 0x55861459c130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145b3228 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145b33a0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5586145b3388 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145b3280 <col:33> 'int' lvalue ParmVar 0x55861459c130 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145b3368 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145b3350 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145b32a0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5586145b3328 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5586145b3310 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5586145b32d8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5586145b3450 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145b3430 <col:79> 'int' 0
|   |   `-CallExpr 0x5586145b3700 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5586145b36e8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145b36c8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145b3740 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b3538 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5586145b3758 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b3580 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145b3770 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145b35b8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5586145b3788 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145b36b0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145b3698 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145b3658 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5586145b3a48 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5586145b3a30 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5586145b3a18 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586145b39e8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5586145b3960 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586145b3930 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586145b38e0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5586145a30b0
|             |   `-CXXMemberCallExpr 0x5586145b38c0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586145b3890 <col:67> '<bound member function type>' ->xanno 0x5586145981f8
|             |       `-CXXThisExpr 0x5586145b3880 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586145b3948 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586145b3910 <col:80> 'int' lvalue ParmVar 0x55861459c130 'i' 'int'
|-CXXMethodDecl 0x55861459c418 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55861459c2c0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55861459c340 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5586145b4280 <col:45, line:635:5>
|   |-ParenExpr 0x5586145b3fc8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5586145b3f98 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5586145b3c60 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586145b3c30 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586145b3ad0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586145b3ab8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586145b3a78 <col:23> 'int' lvalue ParmVar 0x55861459c2c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586145b3a98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586145b3c10 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5586145b3bf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586145b3af0 <col:33> 'int' lvalue ParmVar 0x55861459c2c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5586145b3bd8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586145b3bc0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586145b3b10 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586145985e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5586145b3b98 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5586145b3b80 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5586145b3b48 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5586145b3cc0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586145b3ca0 <col:79> 'int' 0
|   |   `-CallExpr 0x5586145b3ef8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5586145b3ee0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586145b3ec0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558614104cb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586145b3f38 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b3d30 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5586145b3f50 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586145b3d78 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586145b3f68 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586145b3db0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5586145b3f80 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586145b3ea8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586145b3e90 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586145b3e48 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5586145b4260 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5586145b41c8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586145b4198 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5586145b4138 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586145b4108 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586145b40b8 <col:54, col:63> 'char [48]' lvalue ->c 0x5586145a30b0
|     |     |   `-CXXMemberCallExpr 0x5586145b4098 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586145b4068 <col:54> '<bound member function type>' ->xanno 0x558614598398
|     |     |       `-CXXThisExpr 0x5586145b4058 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586145b4120 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586145b40e8 <col:67> 'int' lvalue ParmVar 0x55861459c2c0 'i' 'int'
|     `-CXXConstCastExpr 0x5586145b4230 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5586145b4218 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5586145b41e0 <col:91> 'const void *' lvalue ParmVar 0x55861459c340 'x' 'const void *'
|-CXXMethodDecl 0x55861459c4e8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5586145b4308 <col:34, line:640:5>
|   `-ReturnStmt 0x5586145b42f8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5586145b42e0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5586145b42b0 <col:16> 'Packet *' lvalue ->_data_packet 0x5586145a3c68
|         `-CXXThisExpr 0x5586145b42a0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55861459c628 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55861459c598 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586145ad3c8 <col:46> 'bool' true
|-CXXMethodDecl 0x55861459c7a8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55861459c6e0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55861459c850 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55861459d000 <line:660:22> "" ""
| |-EnumConstantDecl 0x55861459c950 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d070 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459c930 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55861459c910 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558614591ab0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55861459c9e0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d088 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459c9c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55861459c9a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558614591b40 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55861459ca70 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d0a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459ca50 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55861459ca30 <col:21> 'int' 0
| |-EnumConstantDecl 0x55861459cb00 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d0b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459cae0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55861459cac0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55861459cb90 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d0d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459cb70 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55861459cb50 <col:21> 'int' 16
| |-EnumConstantDecl 0x55861459cc20 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d0e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459cc00 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55861459cbe0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55861459ccb0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d100 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459cc90 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55861459cc70 <col:19> 'int' EnumConstant 0x55861459cb00 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55861459cd40 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d118 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459cd20 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55861459cd00 <col:19> 'int' EnumConstant 0x55861459cc20 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55861459ce10 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d130 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459cdf0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55861459cdd0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55861459cd90 <col:23> 'int' EnumConstant 0x55861459cd40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55861459cdb0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55861459cee0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55861459d148 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55861459cec0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55861459cea0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55861459ce60 <col:23> 'int' EnumConstant 0x55861459cd40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55861459ce80 <col:40> 'int' 4
| `-EnumConstantDecl 0x55861459cfb0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55861459d160 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55861459cf90 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55861459cf70 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55861459cf30 <col:23> 'int' EnumConstant 0x55861459cd40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55861459cf50 <col:40> 'int' 8
|-CXXMethodDecl 0x55861459d1a0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55861459d240 <col:68> "" ""
|-CXXMethodDecl 0x55861459d2d8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55861459d378 <col:45> "" ""
|-CXXMethodDecl 0x55861459d410 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55861459d4b0 <col:57> "" ""
|-CXXMethodDecl 0x55861459d548 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55861459d5e8 <col:45> "" ""
|-CXXMethodDecl 0x55861459d680 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55861459d720 <col:57> "" ""
|-CXXMethodDecl 0x55861459d7b0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55861459d850 <col:51> "" ""
|-CXXMethodDecl 0x55861459d8e0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55861459d980 <col:63> "" ""
|-CXXMethodDecl 0x55861459da10 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55861459dab0 <col:53> "" ""
|-CXXMethodDecl 0x55861459db40 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55861459dbe0 <col:65> "" ""
|-CXXMethodDecl 0x55861459dcf8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55861459dc68 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55861459dda0 <col:61> "" ""
|-CXXMethodDecl 0x55861459df38 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55861459de28 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55861459dea0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55861459dfe8 <col:67> "" ""
|-CXXMethodDecl 0x55861459e100 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55861459e070 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55861459e1a8 <col:63> "" ""
|-CXXMethodDecl 0x55861459e340 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55861459e230 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55861459e2a8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55861459e3f0 <col:69> "" ""
|-CXXMethodDecl 0x55861459e508 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55861459e478 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55861459e5b0 <col:63> "" ""
|-CXXMethodDecl 0x5586145a0c88 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5586145a0b78 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5586145a0bf0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5586145a0d38 <col:69> "" ""
|-CXXMethodDecl 0x5586145a0e50 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5586145a0dc0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5586145a0ef8 <col:62> "" ""
|-CXXMethodDecl 0x5586145a1090 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5586145a0f80 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5586145a0ff8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5586145a1140 <col:68> "" ""
|-CXXMethodDecl 0x5586145a1258 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5586145a11c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5586145a1300 <col:63> "" ""
|-CXXMethodDecl 0x5586145a1498 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5586145a1388 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5586145a1400 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5586145a1548 <col:69> "" ""
|-CXXMethodDecl 0x5586145a15d8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5586145a1678 <col:64> "" ""
|-CXXMethodDecl 0x5586145a1708 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5586145a17a8 <col:52> "" ""
|-CXXMethodDecl 0x5586145a1838 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5586145a18d8 <col:67> "" ""
|-CXXMethodDecl 0x5586145a1968 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5586145a1a08 <col:55> "" ""
|-CXXMethodDecl 0x5586145a1b20 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5586145a1a90 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5586145a1bc8 <col:58> "" ""
|-CXXMethodDecl 0x5586145a1d60 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5586145a1c50 <col:33> col:36 'int'
| |-ParmVarDecl 0x5586145a1cc8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5586145a1e10 <col:62> "" ""
|-CXXMethodDecl 0x5586145a1f28 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5586145a1e98 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5586145a1fd0 <col:58> "" ""
|-CXXMethodDecl 0x5586145a2168 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5586145a2058 <col:33> col:36 'int'
| |-ParmVarDecl 0x5586145a20d0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5586145a2218 <col:62> "" ""
|-CXXMethodDecl 0x5586145a2330 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5586145a22a0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5586145a23d8 <col:60> "" ""
|-CXXMethodDecl 0x5586145a2570 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5586145a2460 <col:34> col:37 'int'
| |-ParmVarDecl 0x5586145a24d8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5586145a2620 <col:64> "" ""
|-CXXMethodDecl 0x5586145a2738 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5586145a26a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5586145a27e0 <col:58> "" ""
|-CXXMethodDecl 0x5586145a2978 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5586145a2868 <col:33> col:36 'int'
| |-ParmVarDecl 0x5586145a28e0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5586145a2a28 <col:62> "" ""
|-CXXMethodDecl 0x5586145a2b40 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5586145a2ab0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5586145a2be8 <col:59> "" ""
|-CXXMethodDecl 0x5586145a2d80 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5586145a2c70 <col:33> col:36 'int'
| |-ParmVarDecl 0x5586145a2ce8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5586145a2e30 <col:63> "" ""
|-AccessSpecDecl 0x5586145a2ea0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5586145a2ec8 prev 0x5586145980d0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5586145a2fc0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5586145a30b0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5586145a31d8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5586145a3358 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5586145a34d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5586145a3658 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5586145b4488 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5586145b4cf8 <col:11>
| |-CXXDestructorDecl 0x5586145b4560 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5586145b4698 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5586145b4698
| | `-ParmVarDecl 0x5586145b47a8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5586145b4848 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5586145b4848
| | `-ParmVarDecl 0x5586145b4958 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5586145b7718 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5586145b7828 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5586145b7aa8 <col:11>
| |   `-ReturnStmt 0x5586145b7a98 <col:11>
| |     `-UnaryOperator 0x5586145b7a80 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5586145b7a70 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5586145b7898 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5586145b7898
|   `-ParmVarDecl 0x5586145b79a8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5586145a36c0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5586145a37d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5586145a3878 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5586145a38e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5586145a3948 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5586145a39b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5586145a3a10 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5586145a3ad0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5586145a3b30 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5586145a3b90 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5586145b4398 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5586145a3878 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5586145b4d08 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5586145b4d60 <col:12>
| |-CXXConstructorDecl 0x5586145b49c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5586145b49c8
| | `-ParmVarDecl 0x5586145b4ad8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5586145b4b78 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5586145b4b78
| | `-ParmVarDecl 0x5586145b4c88 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5586145b6e00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5586145a3c08 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5586145a3c68 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5586145a3cd0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5586145a3d38 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5586145a3da0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5586145a3e08 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5586145a3e68 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5586145a3ec8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5586145a3f30 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5586145a3fb8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5586145a3c08 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5586145b4330 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5586145a3e68 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5586145b4d70 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5586145b4dd0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5586145a4158 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5586145a4098 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5586145a4250 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5586145a4438 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5586145a4340 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5586145a4708 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5586145a44f0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5586145a4568 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5586145a45e0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586145a4928 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5586145a47d8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5586145a4850 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5586145acf08 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5586145a49e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5586145a4a60 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5586145a4ad8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5586145ad060 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5586145acfd0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586145ad1a8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5586145ad118 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5586145ad2a0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586142ff1e8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586142ff308 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5586142ff3d0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5586143cf9a0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5586143d4cb8 <col:8>
|-CXXConstructorDecl 0x5586143cfaa8 <col:8> col:8 implicit used constexpr in_addr 'void (const in_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x5586143cfbb8 <col:8> col:8 used 'const in_addr &'
| |-CXXCtorInitializer Field 0x5586142ff3d0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x558614710060 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x558614710030 <col:8> 'const in_addr_t':'const unsigned int' lvalue .s_addr 0x5586142ff3d0
| |     `-DeclRefExpr 0x558614710010 <col:8> 'const in_addr' lvalue ParmVar 0x5586143cfbb8 '' 'const in_addr &'
| `-CompoundStmt 0x5586147100a8 <col:8>
|-CXXConstructorDecl 0x5586143cfc58 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5586143cfd68 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5586142ff3d0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5586143d4ed0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5586143d4ea0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5586142ff3d0
| |     `-CXXStaticCastExpr 0x5586143d4e70 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5586143d4e40 <col:8> 'in_addr' lvalue ParmVar 0x5586143cfd68 '' 'in_addr &&'
| `-CompoundStmt 0x5586143d4f18 <col:8>
`-CXXDestructorDecl 0x5586143d5150 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586143c7688 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5586143c77a8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5586143c7890 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5586143c7870 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5586143c7838 <col:22> 'int' 4
|-FieldDecl 0x5586143c7938 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x5586143c7918 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5586143c78e0 <col:21> 'int' 4
|-FieldDecl 0x5586143c7998 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5586143c79f8 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5586143c7a58 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5586143c7ab8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5586143c7b18 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5586143c7b78 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5586143c7bd8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5586143c7c48 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5586143c7cb8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586146aa4d0 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586146aa5e8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x5586146aa690 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x5586146aa6f8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x5586146aa760 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x5586146aa810 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x5586146aa690 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x5586146ab720 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x5586146ab6d8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x5586146ab6a0 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x5586146ab688 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5586146ab630 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x5586143bacf0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x5586146aa6f8 'len' 'int'
| | `-IntegerLiteral 0x5586146ab798 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x5586146aa760 'cap' 'int'
| | `-IntegerLiteral 0x5586146ab800 <col:20> 'int' 0
| `-CompoundStmt 0x5586146ab880 <col:23, line:119:2>
|-CXXConstructorDecl 0x5586146aa988 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x5586146aa8c8 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x5586146ab890 <col:37, line:121:2>
|-CXXConstructorDecl 0x5586146adaa8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5586146adbb8 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5586146aa690 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x5586146af570 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x5586146af540 <col:12> 'unsigned char *const' lvalue .s 0x5586146aa690
| |     `-DeclRefExpr 0x5586146af520 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5586146adbb8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5586146aa6f8 'len' 'int'
| | `-ImplicitCastExpr 0x5586146af600 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5586146af5d0 <col:12> 'const int' lvalue .len 0x5586146aa6f8
| |     `-DeclRefExpr 0x5586146af5b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5586146adbb8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5586146aa760 'cap' 'int'
| | `-ImplicitCastExpr 0x5586146af690 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5586146af660 <col:12> 'const int' lvalue .cap 0x5586146aa760
| |     `-DeclRefExpr 0x5586146af640 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5586146adbb8 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x5586146af6e8 <col:12>
|-CXXConstructorDecl 0x5586146adc58 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586146adc58
| `-ParmVarDecl 0x5586146add68 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x5586146af9a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586146a5c78 prev 0x5586145f0ab0 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5586146a5d70 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x5586146a5e00 <col:21, col:27> col:21 public
|-TypedefDecl 0x5586146a5e40 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x558614068fd0 'const char *'
|   `-QualType 0x558614068521 'const char' const
|     `-BuiltinType 0x558614068520 'char'
|-TypedefDecl 0x5586146a5eb0 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x5586140691a0 'char *'
|   `-BuiltinType 0x558614068520 'char'
|-TypedefDecl 0x5586146a5ff0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x5586146a5f60 'int (StringAccum::*)() const'
|   |-RecordType 0x5586143265c0 'StringAccum'
|   | `-CXXRecord 0x5586146a5c78 'StringAccum'
|   `-ParenType 0x558614394d00 'int () const' sugar
|     `-FunctionProtoType 0x5586143698a0 'int () const' const cdecl
|       `-BuiltinType 0x558614068580 'int'
|-CXXConstructorDecl 0x5586146a60b0 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x5586146a6200 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x5586146a6170 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x5586146a6350 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x5586146a62c0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x5586146a64f8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x5586146a6438 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x5586146a66a8 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x5586146a65e8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x5586146a67a0 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x5586146a6958 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x5586146a6890 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x5586146a6ad8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x5586146a6a10 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x5586146a6bd0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5586146a6c98 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x5586146a6d60 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5586146a6e28 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x5586146a6ef0 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x5586146a7058 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5586146a7128 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5586146a71e8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5586146a72f8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5586146a7408 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5586146a74c8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5586146a7588 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5586146a76d0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5586146a7640 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5586146a7860 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x5586146a7790 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5586146a7928 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5586146a7a20 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x5586146a7ae0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5586146a7ba8 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x5586146a7c68 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5586146a7d28 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5586146a7de8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5586146a7f38 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x5586146a7ea0 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x5586146a8088 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x5586146a7ff8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x5586146a81e0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x5586146a8148 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x5586146a8330 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x5586146a82a0 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x5586146a8550 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x5586146a83f0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x5586146a8470 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x5586146ab558 <col:53> 'int' 0
|-CXXMethodDecl 0x5586146a86a8 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x5586146a8618 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x5586146ab578 <col:34> 'int' 1
|-CXXMethodDecl 0x5586146a87f0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x5586146a8760 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5586146a8940 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x5586146a88b0 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x5586146a8a90 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x5586146a8a00 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x5586146a8be0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5586146a8b50 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5586146a8db8 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5586146a8ca0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5586146a8d20 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5586146a8f98 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5586146a8e80 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x5586146a8f00 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x5586146a9178 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5586146a9060 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5586146a90e0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5586146a9358 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5586146a9240 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x5586146a92c0 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x5586146a9538 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5586146a9420 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5586146a94a0 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5586146a9898 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x5586146a9680 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5586146a9700 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5586146ab598 <col:56> 'int' 10
| `-ParmVarDecl 0x5586146a9778 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586146ab5b8 <col:77> 'bool' true
|-CXXMethodDecl 0x5586146a9bf8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x5586146a99e0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5586146a9a60 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x5586146ab5c8 <col:57> 'int' 10
| `-ParmVarDecl 0x5586146a9ad8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586146ab5e8 <col:78> 'bool' true
|-CXXMethodDecl 0x5586146a9e20 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x5586146a9cc8 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x5586146a9d48 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x5586146a9f18 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x5586146aa088 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x5586146a9fc8 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x5586146aa1d8 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x5586146aa148 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x5586146aa280 <col:51> "" ""
|-AccessSpecDecl 0x5586146aa2f0 <line:106:3, col:10> col:3 private
|-EnumDecl 0x5586146aa318 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x5586146aa468 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x5586146aa4b8 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586146aa448 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x5586146aa418 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55861439da68 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x5586146aa4d0 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5586146aa5e8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x5586146aa690 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x5586146aa6f8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x5586146aa760 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x5586146aa810 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x5586146aa690 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x5586146ab720 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x5586146ab6d8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x5586146ab6a0 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x5586146ab688 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x5586146ab630 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x5586143bacf0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x5586146aa6f8 'len' 'int'
| | | `-IntegerLiteral 0x5586146ab798 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x5586146aa760 'cap' 'int'
| | | `-IntegerLiteral 0x5586146ab800 <col:20> 'int' 0
| | `-CompoundStmt 0x5586146ab880 <col:23, line:119:2>
| |-CXXConstructorDecl 0x5586146aa988 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x5586146aa8c8 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x5586146ab890 <col:37, line:121:2>
| |-CXXConstructorDecl 0x5586146adaa8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5586146adbb8 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5586146aa690 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x5586146af570 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x5586146af540 <col:12> 'unsigned char *const' lvalue .s 0x5586146aa690
| | |     `-DeclRefExpr 0x5586146af520 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5586146adbb8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5586146aa6f8 'len' 'int'
| | | `-ImplicitCastExpr 0x5586146af600 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5586146af5d0 <col:12> 'const int' lvalue .len 0x5586146aa6f8
| | |     `-DeclRefExpr 0x5586146af5b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5586146adbb8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5586146aa760 'cap' 'int'
| | | `-ImplicitCastExpr 0x5586146af690 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5586146af660 <col:12> 'const int' lvalue .cap 0x5586146aa760
| | |     `-DeclRefExpr 0x5586146af640 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5586146adbb8 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x5586146af6e8 <col:12>
| |-CXXConstructorDecl 0x5586146adc58 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586146adc58
| | `-ParmVarDecl 0x5586146add68 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x5586146af9a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x5586146aaa60 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x5586146aab60 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x5586146aaac8 <col:16> col:19 'int'
|-CXXMethodDecl 0x5586146aad40 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x5586146aac20 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x5586146aaca0 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x5586146aaf20 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x5586146aae08 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5586146aae88 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5586146ab078 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x5586146aafe8 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x5586146ab250 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x5586146ab138 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x5586146ab518 <line:132:5, col:70> col:25
  `-FunctionDecl 0x5586146ab458 parent 0x558614068488 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x5586146ab308 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x5586146ab380 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<4>
         0 |   char [4] x
           | [sizeof=4, dsize=4, align=1,
           |  nvsize=4, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586145e6310 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 4
|-PackedAttr 0x558614757d98 <line:167:18>
|-CXXRecordDecl 0x558614757e58 prev 0x5586145e6310 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x558614757f68 <line:166:5, col:13> col:10 x 'char [4]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [4 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Vector<class IPAddress> >
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Vector<class IPAddress> * _ptr
        24 |   class Vector<class IPAddress> _slot
        24 |     class vector_memory<class sized_array_memory<4> > vm_
        24 |       vector_memory<class sized_array_memory<4> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558614763388 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'Vector<IPAddress>'
|-CXXRecordDecl 0x558614763788 prev 0x558614763388 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x5586147639b0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (Vector<IPAddress> *)'
| |-ParmVarDecl 0x558614763888 <col:15, col:18> col:18 used ptr 'Vector<IPAddress> *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x5586147648f8 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x558614763b30 '_ptr' 'Vector<IPAddress> *'
| | `-ImplicitCastExpr 0x5586147648b8 <line:853:20> 'Vector<IPAddress> *' <LValueToRValue>
| |   `-DeclRefExpr 0x558614764878 <col:20> 'Vector<IPAddress> *' lvalue ParmVar 0x558614763888 'ptr' 'Vector<IPAddress> *'
| |-CXXCtorInitializer Field 0x558614763b90 '_slot' 'Vector<IPAddress>':'Vector<IPAddress>'
| | `-CXXConstructExpr 0x558614764958 <line:852:9> 'Vector<IPAddress>':'Vector<IPAddress>' 'void ()'
| `-CompoundStmt 0x558614685150 <line:853:25, line:854:9>
|-CXXMethodDecl 0x558614763a70 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55861465efc0 Slot::store 'void ()' ]
| `-CompoundStmt 0x558614765530 <col:22, line:857:9>
|   `-CallExpr 0x558614765500 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x5586147654e8 <col:13> 'void (*)(Vector<IPAddress> &, Vector<IPAddress> &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x558614765468 <col:13> 'void (Vector<IPAddress> &, Vector<IPAddress> &)' lvalue Function 0x558614764f18 'assign_consume' 'void (Vector<IPAddress> &, Vector<IPAddress> &)' (FunctionTemplate 0x558614380398 'assign_consume')
|     |-UnaryOperator 0x558614764ae8 <col:28, col:29> 'Vector<IPAddress>':'Vector<IPAddress>' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x558614764ad0 <col:29> 'Vector<IPAddress> *' <LValueToRValue>
|     |   `-MemberExpr 0x558614764aa0 <col:29> 'Vector<IPAddress> *' lvalue ->_ptr 0x558614763b30
|     |     `-CXXThisExpr 0x558614764a90 <col:29> 'Args::SlotT<Vector<IPAddress> > *' implicit this
|     `-MemberExpr 0x558614764b10 <col:35> 'Vector<IPAddress>':'Vector<IPAddress>' lvalue ->_slot 0x558614763b90
|       `-CXXThisExpr 0x558614764b00 <col:35> 'Args::SlotT<Vector<IPAddress> > *' implicit this
|-FieldDecl 0x558614763b30 <line:858:9, col:12> col:12 referenced _ptr 'Vector<IPAddress> *'
|-FieldDecl 0x558614763b90 <line:859:9, col:11> col:11 referenced _slot 'Vector<IPAddress>':'Vector<IPAddress>'
|-CXXConstructorDecl 0x558614763c08 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<Vector<IPAddress> > &)' inline default noexcept-unevaluated 0x558614763c08
| `-ParmVarDecl 0x558614763d18 <col:12> col:12 'const Args::SlotT<Vector<IPAddress> > &'
|-CXXConstructorDecl 0x558614763db8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<Vector<IPAddress> > &&)' inline default noexcept-unevaluated 0x558614763db8
| `-ParmVarDecl 0x558614763ec8 <col:12> col:12 'Args::SlotT<Vector<IPAddress> > &&'
|-CXXMethodDecl 0x558614763f68 <col:12> col:12 implicit operator= 'Args::SlotT<Vector<IPAddress> > &(const Args::SlotT<Vector<IPAddress> > &)' inline default noexcept-unevaluated 0x558614763f68
| `-ParmVarDecl 0x558614764078 <col:12> col:12 'const Args::SlotT<Vector<IPAddress> > &'
|-CXXMethodDecl 0x5586147640e8 <col:12> col:12 implicit operator= 'Args::SlotT<Vector<IPAddress> > &(Args::SlotT<Vector<IPAddress> > &&)' inline default noexcept-unevaluated 0x5586147640e8
| `-ParmVarDecl 0x5586147641f8 <col:12> col:12 'Args::SlotT<Vector<IPAddress> > &&'
`-CXXDestructorDecl 0x558614764280 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55861465eec0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x5586147649c0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.Vector*, %class.Vector }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.Vector*, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<Vector<class IPAddress> > (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586143de910 <../dummy_inc/click/ipaddress.hh:400:1, col:73> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'Vector<IPAddress>'
|-CXXRecordDecl 0x5586143deb68 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55861476d698 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55861476d798 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<Vector<IPAddress> > &)' inline default trivial noexcept-unevaluated 0x55861476d798
| `-ParmVarDecl 0x55861476d8a8 <col:19> col:19 'const DefaultArg<Vector<IPAddress> > &'
|-CXXConstructorDecl 0x55861476d948 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<Vector<IPAddress> > &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55861476da58 <col:19> col:19 used 'DefaultArg<Vector<IPAddress> > &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55861476e390 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55861476e360 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55861476e330 <col:19> 'DefaultArg<Vector<IPAddress> >' xvalue static_cast<struct DefaultArg<Vector<class IPAddress> > &&> <NoOp>
| |       `-DeclRefExpr 0x55861476e300 <col:19> 'DefaultArg<Vector<IPAddress> >' lvalue ParmVar 0x55861476da58 '' 'DefaultArg<Vector<IPAddress> > &&'
| `-CompoundStmt 0x55861476e400 <col:19>
`-CXXDestructorDecl 0x55861476daf8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558614698d60 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x558614698fb8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x558614773308 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5586147737a0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x558614773780 <<invalid sloc>> 'int'
| `-CompoundStmt 0x558614773810 <col:19>
|-CXXConstructorDecl 0x558614773408 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x558614773408
| `-ParmVarDecl 0x558614773518 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x5586147735b8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5586147736c8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5586147772d0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558614776ff0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x558614776fc0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x558614776f90 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x5586147736c8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x558614777340 <col:19>
`-CXXDestructorDecl 0x558614773850 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55861469e160 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55861469e278 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55861469e308 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55861469e548 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55861469e340 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55861469e3c0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55861469e438 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55861469e760 <col:81> 'const ArgContext' lvalue Var 0x558614685328 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55861469e6a0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55861469e610 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55861469e8b8 <col:35, line:1261:5>
|   `-ReturnStmt 0x55861469e8a8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55861469e890 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55861469e860 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55861469e848 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55861469e820 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55861469e800 <col:16, col:24> 'String' (CXXTemporary 0x55861469e800)
|               `-CXXConstructExpr 0x55861469e7c8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55861469e7b0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55861469e790 <col:23> 'bool' lvalue ParmVar 0x55861469e610 'x' 'bool'
|-CXXConstructorDecl 0x55861477ed38 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x558614781950 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558614781a88 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x558614781a88
| `-ParmVarDecl 0x558614781b98 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x558614781c38 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x558614781d48 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x5586147829a0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55861469e8f8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55861469eb58 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55861477ec48 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558614781db8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x558614781db8
| `-ParmVarDecl 0x558614781ec8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x558614781f68 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558614782078 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x5586147829b0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558614782980 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x558614782950 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x558614782920 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x558614782078 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x558614782a20 <col:19>
`-CXXDestructorDecl 0x558614782118 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
