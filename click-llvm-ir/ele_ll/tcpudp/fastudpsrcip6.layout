
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac02091e8 prev 0x55eac01ff9b8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac02092e0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55eac0209370 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55eac02093e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55eac02094a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55eac0209570 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55eac02096e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55eac0209620 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55eac0209790 <col:24>
| `-OptimizeNoneAttr 0x55eac02097e8 <col:34>
|-CXXMethodDecl 0x55eac0209830 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55eac0209ae8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55eac02098e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55eac0209958 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55eac02099d8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55eac0209ba0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55eac0209bd8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55eac0209c40 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55eac0209cc8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55eac0209fe8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55eac0209d80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55eac0209df8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55eac0209e70 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55eac0209ef0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55eac020a100 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55eac0211f70 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55eac0211f70
| `-ParmVarDecl 0x55eac0212088 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55eac0212128 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55eac0212128
| `-ParmVarDecl 0x55eac0212238 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55eac0310dc8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac01fb1c0 prev 0x55eac01faf40 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55eac01fb2b8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55eac01fb348 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55eac01fb3a8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55eac01fb498 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55eac01fb598 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55eac01fb768 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55eac01fb618 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55eac01fb690 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55eac01fb908 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55eac01fb840 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55eac01fb9b0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55eac01fbae8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55eac01fba20 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55eac01fbc88 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55eac01fbbc8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55eac01fbe28 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55eac01fbd68 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55eac01fbed0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55eac01fbfd0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55eac01fc0b0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01fbfb0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55eac01fbf90 <col:26> 'int' 1
| `-EnumConstantDecl 0x55eac01fc060 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55eac01fc0c8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac01fc040 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55eac01fc020 <col:44> 'int' 2
|-CXXMethodDecl 0x55eac01fc210 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55eac01fc0f8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55eac01fc178 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55eac01fc368 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55eac01fc2d8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55eac01fc5a8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55eac01fc428 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55eac01fc4a0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55eac01fc658 <col:20>
| `-OptimizeNoneAttr 0x55eac01fc6b0 <col:30>
|-CXXMethodDecl 0x55eac01fc7b8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55eac01fc6f0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55eac01fc860 <col:20>
| `-OptimizeNoneAttr 0x55eac01fc8b8 <col:30>
|-CXXMethodDecl 0x55eac01fc908 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55eac01fc9d0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55eac01fcae8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55eac01fcb70 <line:56:5, col:33> col:23 used PORTS_0_1 'const char []' static
|-VarDecl 0x55eac01fcbf8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55eac01fcc80 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55eac01fcd08 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55eac01fcd98 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55eac01fce58 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55eac01fcee0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55eac01fcf68 <line:64:5, col:28> col:23 used PULL 'const char []' static
|-VarDecl 0x55eac01fcff0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55eac01fd078 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55eac01fd100 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55eac01fd190 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55eac01fd250 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55eac01fd2e0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55eac01fd430 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55eac01fd398 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55eac01fd5c0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55eac01fd4f0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55eac01fd860 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55eac01fd678 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55eac01fd6f8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55eac01fd778 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55eac01fd918 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55eac01fda20 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55eac01fdcb0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01fda00 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55eac01fd9e0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55eac01fdab0 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55eac01fdcc8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01fda90 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55eac01fda70 <col:32> 'int' 20
| |-EnumConstantDecl 0x55eac01fdb40 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55eac01fdce0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01fdb20 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55eac01fdb00 <col:38> 'int' 90
| |-EnumConstantDecl 0x55eac01fdbd0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55eac01fdcf8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01fdbb0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55eac01fdb90 <col:35> 'int' 100
| `-EnumConstantDecl 0x55eac01fdc60 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55eac01fdd10 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac01fdc40 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55eac01fdc20 <col:32> 'int' 2000
|-CXXMethodDecl 0x55eac01fdd50 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55eac01fe190 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55eac01fe000 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55eac01fe078 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55eac01fe260 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55eac01fe3e0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55eac01fe310 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55eac01fe5e8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55eac01fe498 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55eac01fe510 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55eac01fe6e8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55eac01fe788 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55eac01fe850 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55eac01fe8e0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55eac01feb10 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01fe8c0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55eac01fe8a0 <col:36> 'int' EnumConstant 0x55eac01fe850 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55eac01fe930 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55eac01fe980 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55eac01fe9d0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55eac01fea20 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55eac01fea70 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55eac01feac0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55eac01febf8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55eac01feb38 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55eac01fecc0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55eac01fed80 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55eac01fee40 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55eac01fef00 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55eac01ff018 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55eac01ff0e0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55eac01ff260 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55eac01ff190 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55eac01ff388 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55eac01ff588 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55eac01ff438 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55eac01ff4b8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55eac020e428 <col:54, line:127:5>
|   |-ParenExpr 0x55eac020e2d8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55eac020e2a8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55eac020df98 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55eac020df70 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55eac020df58 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55eac020df40 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55eac020df10 <col:31> 'Router *' lvalue ->_router 0x55eac020a8b0
|   |   |         `-CXXThisExpr 0x55eac020df00 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55eac020dff8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac020dfd8 <col:48> 'int' 0
|   |   `-CallExpr 0x55eac020e208 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55eac020e1f0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac020e1d0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac020e248 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac020e068 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55eac020e260 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac020e088 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55eac020e278 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac020e0c0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55eac020e290 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac020e1b8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac020e1a0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac020e158 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55eac020e370 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55eac020e308 <col:9> 'Router *' lvalue ->_router 0x55eac020a8b0
|   | | `-CXXThisExpr 0x55eac020e2f8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55eac020e358 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55eac020e338 <col:19> 'Router *' lvalue ParmVar 0x55eac01ff438 'r' 'Router *'
|   `-BinaryOperator 0x55eac020e408 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55eac020e3a0 <col:9> 'int' lvalue ->_eindex 0x55eac020a918
|     | `-CXXThisExpr 0x55eac020e390 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55eac020e3f0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55eac020e3d0 <col:19> 'int' lvalue ParmVar 0x55eac01ff4b8 'eindex' 'int'
|-CXXMethodDecl 0x55eac01ff710 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55eac01ff648 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55eac01ff850 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55eac01ff918 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55eac01ff9b8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55eac01ffc08 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55eac01ffa80 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55eac01ffb00 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55eac01ffcb8 <col:20>
| `-OptimizeNoneAttr 0x55eac01ffd10 <col:30>
|-CXXMethodDecl 0x55eac01ffe18 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55eac01ffd50 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55eac01ffec0 <col:20>
| `-OptimizeNoneAttr 0x55eac01fff18 <col:30>
|-CXXMethodDecl 0x55eac01fffe8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55eac01fff58 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55eac0200090 <col:20>
| `-OptimizeNoneAttr 0x55eac02000e8 <col:30>
|-CXXMethodDecl 0x55eac0200278 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55eac0200120 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55eac02001a0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55eac0200408 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55eac0200340 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55eac0200558 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55eac02004c8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55eac02006a8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55eac0200618 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55eac02007f8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55eac0200768 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55eac0200ab8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55eac02008b0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55eac0200930 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55eac02009d8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55eac0200b90 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55eac0200c50 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55eac0200f20 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55eac0200dd0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55eac0200e48 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55eac0201048 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55eac0201220 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55eac0201100 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55eac0201180 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55eac0201408 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55eac02012e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55eac0201368 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55eac0201778 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55eac02014c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55eac0201540 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55eac02015c0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55eac020c4d0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55eac020c4b0 <col:106> 'int' 0
| `-ParmVarDecl 0x55eac0201638 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55eac020c508 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55eac020c4e8 <col:126> 'int' 0
|-CXXMethodDecl 0x55eac0201af8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55eac0201848 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55eac02018c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55eac0201940 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55eac02019b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55eac020c540 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55eac020c520 <col:114> 'int' 0
|-CXXMethodDecl 0x55eac0201e88 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55eac0201bd0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55eac0201c48 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55eac0201cc8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55eac020c558 <col:96> 'int' 0
| `-ParmVarDecl 0x55eac0201d40 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55eac020c598 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55eac020c578 <col:116> 'int' 0
|-CXXMethodDecl 0x55eac0202208 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55eac0201f58 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55eac0201fd0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55eac0202050 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55eac020c5d0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55eac020c5b0 <col:109> 'int' 0
| `-ParmVarDecl 0x55eac02020c8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55eac020c608 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55eac020c5e8 <col:129> 'int' 0
|-CXXMethodDecl 0x55eac0202588 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55eac02022d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55eac0202350 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55eac02023d0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55eac0202448 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55eac020c640 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55eac020c620 <col:117> 'int' 0
|-CXXMethodDecl 0x55eac0202918 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55eac0202660 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac02026d8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55eac0202758 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55eac020c658 <col:99> 'int' 0
| `-ParmVarDecl 0x55eac02027d0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55eac020c698 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55eac020c678 <col:119> 'int' 0
|-CXXMethodDecl 0x55eac0202d38 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55eac02029e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55eac0202a68 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55eac0202ae0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55eac0202b60 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55eac020c6d0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55eac020c6b0 <col:108> 'int' 0
| `-ParmVarDecl 0x55eac0202be0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55eac020c708 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55eac020c6e8 <col:141> 'int' 0
|-CXXMethodDecl 0x55eac0203158 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55eac0202e10 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55eac0202e90 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55eac0202f08 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55eac0202f88 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55eac0203008 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55eac020c720 <col:121> 'int' 0
|-CXXMethodDecl 0x55eac0203588 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55eac0203238 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55eac02032b8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55eac0203330 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55eac02033b0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55eac020c740 <col:98> 'int' 0
| `-ParmVarDecl 0x55eac0203430 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55eac020c760 <col:123> 'int' 0
|-CXXMethodDecl 0x55eac0203860 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55eac0203660 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55eac02036e0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55eac0203760 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55eac020c780 <col:80> 'int' 0
|-EnumDecl 0x55eac0203918 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55eac0203a20 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55eac0203cb0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0203a00 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55eac02039e0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55eac0203ab0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55eac0203cc8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0203a90 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55eac0203a70 <col:40> 'int' 2
| |-EnumConstantDecl 0x55eac0203b40 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55eac0203ce0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0203b20 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55eac0203b00 <col:44> 'int' 4
| |-EnumConstantDecl 0x55eac0203bd0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55eac0203cf8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0203bb0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55eac0203b90 <col:36> 'int' 7
| `-EnumConstantDecl 0x55eac0203c60 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55eac0203d10 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac0203c40 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55eac0203c20 <col:34> 'int' 6
|-CXXMethodDecl 0x55eac0203fc8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55eac0203d38 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55eac0203dd8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55eac0203e58 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55eac0203ed0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55eac020c838 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55eac020c820 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55eac020c808 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55eac020c7e8 <col:98, col:105> 'String' (CXXTemporary 0x55eac020c7e8)
|           `-CXXTemporaryObjectExpr 0x55eac020c7b0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55eac0204268 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55eac0204098 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55eac0204110 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55eac0204188 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55eac020de28 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55eac020de10 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55eac020ddf8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55eac020ddd8 <col:94, col:101> 'String' (CXXTemporary 0x55eac020ddd8)
| |         `-CXXTemporaryObjectExpr 0x55eac020dda0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55eac020e610 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55eac020e588 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55eac020e558 <col:9> '<bound member function type>' ->add_task_handlers 0x55eac0203fc8
|     | `-CXXThisExpr 0x55eac020e548 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55eac020e5c8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55eac020e4c8 <col:27> 'Task *' lvalue ParmVar 0x55eac0204098 'task' 'Task *'
|     |-ImplicitCastExpr 0x55eac020e5e0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55eac020e4e8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55eac0204110 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55eac020e5f8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55eac020e508 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55eac0203c60 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55eac020e528 <col:62> 'const String' lvalue ParmVar 0x55eac0204188 'prefix' 'const String &'
|-CXXMethodDecl 0x55eac0204478 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55eac0204330 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55eac02043a8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55eac020ded8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55eac020dec0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55eac020dea8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55eac020de88 <col:70, col:77> 'String' (CXXTemporary 0x55eac020de88)
| |         `-CXXTemporaryObjectExpr 0x55eac020de50 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55eac020e7e8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55eac020e760 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55eac020e730 <col:9> '<bound member function type>' ->add_task_handlers 0x55eac0203fc8
|     | `-CXXThisExpr 0x55eac020e720 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55eac020e7a0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55eac020e6a0 <col:27> 'Task *' lvalue ParmVar 0x55eac0204330 'task' 'Task *'
|     |-ImplicitCastExpr 0x55eac020e7b8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55eac020e6c0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55eac020e7d0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55eac020e6e0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55eac0203c60 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55eac020e700 <col:57> 'const String' lvalue ParmVar 0x55eac02043a8 'prefix' 'const String &'
|-CXXMethodDecl 0x55eac0204758 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55eac0204540 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac02045c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0204638 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55eac0204a08 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55eac0204828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac02048a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0204928 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55eac0204cf8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55eac0204ad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0204b58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0204bd0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55eac0204fa8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55eac0204dc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0204e48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0204ec8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55eac0205258 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55eac0205078 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac02050f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0205178 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55eac0205508 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55eac0205328 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac02053a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0205420 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55eac02057b8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55eac02055d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0205658 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac02056d8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55eac0205a68 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55eac0205888 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0205908 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0205988 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55eac0205d48 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55eac0205b38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0205bb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0205c60 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55eac0206028 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55eac0205e18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0205e98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0205f40 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55eac0206290 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55eac02060f8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55eac0206178 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55eac02061f0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55eac0206538 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55eac0206360 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55eac02063e0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55eac0206458 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55eac02067e8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55eac0206608 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0206688 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0206708 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55eac0206a98 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55eac02068b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0206938 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac02069b0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55eac0206d48 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55eac0206b68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0206be8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0206c60 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55eac0207018 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55eac0206e18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0206e98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55eac0206f38 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55eac0207348 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55eac02070e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55eac0207168 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55eac02071e0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55eac0207258 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55eac020def0 <col:93> 'bool' false
|-CXXMethodDecl 0x55eac0207530 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55eac0207418 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55eac0207498 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55eac0207708 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55eac02075f0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55eac0207670 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55eac0208a28 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55eac02077c8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55eac0208880 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55eac0208900 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55eac0208978 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55eac0208d18 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55eac0208af8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55eac0208b70 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55eac0208bf0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55eac0208c68 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55eac0208f50 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55eac0208df0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55eac0208e70 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55eac0209138 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55eac0209018 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55eac0209098 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55eac02091e8 prev 0x55eac01ff9b8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55eac02092e0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55eac0209370 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55eac02093e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55eac02094a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55eac0209570 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55eac02096e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55eac0209620 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55eac0209790 <col:24>
| | `-OptimizeNoneAttr 0x55eac02097e8 <col:34>
| |-CXXMethodDecl 0x55eac0209830 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55eac0209ae8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55eac02098e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55eac0209958 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55eac02099d8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55eac0209ba0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55eac0209bd8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55eac0209c40 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55eac0209cc8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55eac0209fe8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55eac0209d80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55eac0209df8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55eac0209e70 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55eac0209ef0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55eac020a100 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55eac0211f70 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55eac0211f70
| | `-ParmVarDecl 0x55eac0212088 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55eac0212128 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55eac0212128
| | `-ParmVarDecl 0x55eac0212238 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55eac0310dc8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55eac020a178 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55eac020a218 <col:38> "" ""
|-CXXMethodDecl 0x55eac020a2a8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55eac020a348 <col:44> "" ""
|-AccessSpecDecl 0x55eac020a3b8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55eac020a3e0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55eac020a4e0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55eac020a530 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac020a4c0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55eac020a4a0 <col:27> 'int' 4
|-FieldDecl 0x55eac020a5e8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55eac020a798 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55eac020a850 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55eac020a8b0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55eac020a918 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55eac020aa68 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55eac020a9a8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55eac020ac18 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55eac020ab28 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55eac020adf8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55eac020acd8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55eac020ad58 <col:25> col:28 'int'
|-CXXMethodDecl 0x55eac020b0a0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55eac020aec0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55eac020af40 <col:28> col:31 'int'
| `-ParmVarDecl 0x55eac020afb8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55eac020b158 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55eac020b220 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55eac020b270 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55eac020b2c0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55eac020b4a0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55eac020b350 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55eac020b3c8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55eac020b748 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55eac020b568 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55eac020b5e8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55eac020b660 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55eac020b968 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55eac020b818 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55eac020b898 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55eac020bca0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55eac020ba28 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55eac020baa8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55eac020bb20 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55eac020bba0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55eac020be88 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55eac020bd70 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55eac020bdf0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55eac020bfd8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55eac020bf48 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55eac020c358 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55eac020c098 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55eac020c118 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55eac020c190 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55eac020c210 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55eac020c470 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class IP6Address
         0 |   struct in6_addr _addr
         0 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |       uint8_t [16] __u6_addr8
         0 |       uint16_t [8] __u6_addr16
         0 |       uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class GapRate
         0 |   unsigned int _ugap
         4 |   int _sec_count
         8 |   class Timestamp::seconds_type _tv_sec
        12 |   unsigned int _rate
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class FastUDPSourceIP6
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _rate_limited
       112 |   unsigned int _len
       116 |   struct click_ether _ethh
       116 |     uint8_t [6] ether_dhost
       122 |     uint8_t [6] ether_shost
       128 |     uint16_t ether_type
       132 |   class IP6Address _sip6addr
       132 |     struct in6_addr _addr
       132 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
       132 |         uint8_t [16] __u6_addr8
       132 |         uint16_t [8] __u6_addr16
       132 |         uint32_t [4] __u6_addr32
       148 |   class IP6Address _dip6addr
       148 |     struct in6_addr _addr
       148 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
       148 |         uint8_t [16] __u6_addr8
       148 |         uint16_t [8] __u6_addr16
       148 |         uint32_t [4] __u6_addr32
       164 |   uint16_t _sport
       166 |   uint16_t _dport
       168 |   unsigned short _incr
       172 |   unsigned int _interval
       176 |   _Bool _cksum
       184 |   class Packet * _packet
       192 |   click_jiffies_t _first
       196 |   click_jiffies_t _last
       200 |   class GapRate _rate
       200 |     unsigned int _ugap
       204 |     int _sec_count
       208 |     class Timestamp::seconds_type _tv_sec
       212 |     unsigned int _rate
       216 |   unsigned int _count
       220 |   unsigned int _limit
       224 |   _Bool _active
           | [sizeof=232, dsize=225, align=8,
           |  nvsize=225, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac017b310 prev 0x55eac01bd830 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x55eac017b6d8 <line:21:18>
|-CXXRecordDecl 0x55eac017b408 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x55eac017b578 <line:18:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x55eac017b628 <line:19:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x55eac017b688 <line:20:5, col:14> col:14 ether_type 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55eac0310818 <line:17:8> col:8 implicit used click_ether 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55eac0310c48 <col:8>
|-CXXConstructorDecl 0x55eac0310918 <col:8> col:8 implicit constexpr click_ether 'void (const click_ether &)' inline default trivial noexcept-unevaluated 0x55eac0310918
| `-ParmVarDecl 0x55eac0310a28 <col:8> col:8 'const click_ether &'
`-CXXConstructorDecl 0x55eac0310ac8 <col:8> col:8 implicit constexpr click_ether 'void (click_ether &&)' inline default trivial noexcept-unevaluated 0x55eac0310ac8
  `-ParmVarDecl 0x55eac0310bd8 <col:8> col:8 'click_ether &&'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabfebfec8 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55eabfec00e8 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x55eabfec0218 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
|-FieldDecl 0x55eabfec0348 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
|-CXXConstructorDecl 0x55eac0233708 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55eac0233f18 <col:5>
|-CXXDestructorDecl 0x55eac02337e0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55eac02338e8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac02339f8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55eac023aaf0 <col:5>
|-CXXConstructorDecl 0x55eac0233a98 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0233ba8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| `-CompoundStmt 0x55eac0244408 <col:5>
|-CXXMethodDecl 0x55eac0234648 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0234758 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55eac0248210 <col:5>
|   `-ReturnStmt 0x55eac0248200 <col:5>
|     `-UnaryOperator 0x55eac02481e8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eac02481d8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
`-CXXMethodDecl 0x55eac02347c8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55eac02347c8
  `-ParmVarDecl 0x55eac02348d8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabfebfd20 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eabfebfe38 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x55eabfebfec8 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55eabfec00e8 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x55eabfec0218 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| |-FieldDecl 0x55eabfec0348 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
| |-CXXConstructorDecl 0x55eac0233708 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55eac0233f18 <col:5>
| |-CXXDestructorDecl 0x55eac02337e0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55eac02338e8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55eac02339f8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55eac023aaf0 <col:5>
| |-CXXConstructorDecl 0x55eac0233a98 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55eac0233ba8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| | `-CompoundStmt 0x55eac0244408 <col:5>
| |-CXXMethodDecl 0x55eac0234648 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55eac0234758 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55eac0248210 <col:5>
| |   `-ReturnStmt 0x55eac0248200 <col:5>
| |     `-UnaryOperator 0x55eac02481e8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55eac02481d8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
| `-CXXMethodDecl 0x55eac02347c8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55eac02347c8
|   `-ParmVarDecl 0x55eac02348d8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
|-FieldDecl 0x55eabfec0408 <col:5, line:219:9> col:9 referenced __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
|-CXXConstructorDecl 0x55eac0233618 <line:212:8> col:8 implicit used in6_addr 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55eabfec0408 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55eac0233f28 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void () noexcept'
| `-CompoundStmt 0x55eac0233f80 <col:8>
|-CXXConstructorDecl 0x55eac0233c18 <col:8> col:8 implicit used constexpr in6_addr 'void (const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0233cf8 <col:8> col:8 used 'const in6_addr &'
| |-CXXCtorInitializer Field 0x55eabfec0408 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55eac023ab00 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept'
| |   `-MemberExpr 0x55eac023aac0 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
| |     `-DeclRefExpr 0x55eac023aaa0 <col:8> 'const in6_addr' lvalue ParmVar 0x55eac0233cf8 '' 'const in6_addr &'
| `-CompoundStmt 0x55eac023ab60 <col:8>
|-CXXConstructorDecl 0x55eac0233d98 <col:8> col:8 implicit used constexpr in6_addr 'void (in6_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0233ea8 <col:8> col:8 used 'in6_addr &&'
| |-CXXCtorInitializer Field 0x55eabfec0408 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55eac0244418 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept'
| |   `-MemberExpr 0x55eac02443d8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' xvalue .__in6_u 0x55eabfec0408
| |     `-CXXStaticCastExpr 0x55eac02443a8 <col:8> 'in6_addr' xvalue static_cast<struct in6_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55eac0244378 <col:8> 'in6_addr' lvalue ParmVar 0x55eac0233ea8 '' 'in6_addr &&'
| `-CompoundStmt 0x55eac0244478 <col:8>
|-CXXMethodDecl 0x55eac0234948 <col:8> col:8 implicit used constexpr operator= 'in6_addr &(const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0234a58 <col:8> col:8 used 'const in6_addr &'
| `-CompoundStmt 0x55eac0248288 <col:8>
|   |-CXXMemberCallExpr 0x55eac0248228 <col:8> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue
|   | |-MemberExpr 0x55eac0248168 <col:8> '<bound member function type>' .operator= 0x55eac0234648
|   | | `-MemberExpr 0x55eac0248078 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue ->__in6_u 0x55eabfec0408
|   | |   `-CXXThisExpr 0x55eac0248068 <col:8> 'in6_addr *' this
|   | `-MemberExpr 0x55eac0248138 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|   |   `-DeclRefExpr 0x55eac0248118 <col:8> 'const in6_addr' lvalue ParmVar 0x55eac0234a58 '' 'const in6_addr &'
|   `-ReturnStmt 0x55eac0248278 <col:8>
|     `-UnaryOperator 0x55eac0248260 <col:8> 'in6_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eac0248250 <col:8> 'in6_addr *' this
|-CXXMethodDecl 0x55eac0234ac8 <col:8> col:8 implicit constexpr operator= 'in6_addr &(in6_addr &&)' inline default trivial noexcept-unevaluated 0x55eac0234ac8
| `-ParmVarDecl 0x55eac0234bd8 <col:8> col:8 'in6_addr &&'
`-CXXDestructorDecl 0x55eac0234f78 <col:8> col:8 implicit ~in6_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac022ff00 prev 0x55eac01bdc10 <../dummy_inc/click/ip6address.hh:14:1, line:175:1> line:14:7 referenced class IP6Address definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac022fff8 <col:1, col:7> col:7 implicit referenced class IP6Address
|-AccessSpecDecl 0x55eac0230088 <col:20, col:26> col:20 public
|-TypedefDecl 0x55eac02300c0 <line:16:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55eabfde9500 'uninitialized_type'
|   `-CXXRecord 0x55eabfde9468 'uninitialized_type'
|-CXXConstructorDecl 0x55eac0230180 <line:19:5, line:21:5> line:19:12 used IP6Address 'void ()' inline
| |-CXXCtorInitializer Field 0x55eac0233598 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55eac0233f90 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55eac02341b0 <col:25, line:21:5>
|   `-CallExpr 0x55eac0234160 <line:20:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55eac0234148 <col:2> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55eac0234128 <col:2> 'void *(void *, int, size_t) throw()' lvalue Function 0x55eabff1f028 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x55eac0234198 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55eac0234070 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55eac0234040 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55eac0233598
|     |     `-CXXThisExpr 0x55eac0234030 <col:10> 'IP6Address *' implicit this
|     |-IntegerLiteral 0x55eac0234088 <col:17> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x55eac0234108 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55eac02340e8 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55eac02340b8 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55eac0233598 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55eac02340a8 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55eac02302d0 <line:24:5, line:26:5> line:24:21 IP6Address 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55eac0230240 <col:32, col:53> col:53 used x 'const unsigned char *'
| |-CXXCtorInitializer Field 0x55eac0233598 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55eac02341c8 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55eac0234418 <col:56, line:26:5>
|   `-CallExpr 0x55eac0234398 <line:25:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55eac0234380 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55eac0234360 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55eabff1e4f8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55eac02343d0 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55eac02342a8 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55eac0234278 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55eac0233598
|     |     `-CXXThisExpr 0x55eac0234268 <col:10> 'IP6Address *' implicit this
|     |-ImplicitCastExpr 0x55eac0234400 <col:17> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55eac02343e8 <col:17> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55eac02342c0 <col:17> 'const unsigned char *' lvalue ParmVar 0x55eac0230240 'x' 'const unsigned char *'
|     `-UnaryExprOrTypeTraitExpr 0x55eac0234340 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55eac0234320 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55eac02342f0 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55eac0233598 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55eac02342e0 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55eac0230420 <line:31:5, line:33:5> line:31:21 IP6Address 'void (IPAddress)' inline
| |-ParmVarDecl 0x55eac0230390 <col:32, col:42> col:42 used x 'IPAddress'
| |-CXXCtorInitializer Field 0x55eac0233598 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55eac0234430 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55eac02357d0 <col:45, line:33:5>
|   `-ExprWithCleanups 0x55eac02357b8 <line:32:2, col:10> 'IP6Address' lvalue
|     `-CXXOperatorCallExpr 0x55eac0235780 <col:2, col:10> 'IP6Address' lvalue
|       |-ImplicitCastExpr 0x55eac0235768 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eac02356e8 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55eac0232f38 'operator=' 'IP6Address &(const struct in_addr &)'
|       |-UnaryOperator 0x55eac0234498 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|       | `-CXXThisExpr 0x55eac0234488 <col:3> 'IP6Address *' this
|       `-MaterializeTemporaryExpr 0x55eac02356d0 <col:10> 'const struct in_addr':'const in_addr' lvalue
|         `-ImplicitCastExpr 0x55eac02356b8 <col:10> 'const struct in_addr':'const in_addr' <NoOp>
|           `-ImplicitCastExpr 0x55eac02356a0 <col:10> 'struct in_addr':'in_addr' <UserDefinedConversion>
|             `-CXXMemberCallExpr 0x55eac0235680 <col:10> 'struct in_addr':'in_addr'
|               `-MemberExpr 0x55eac0235650 <col:10> '<bound member function type>' .operator in_addr 0x55eabfffc370
|                 `-ImplicitCastExpr 0x55eac0235638 <col:10> 'const IPAddress' lvalue <NoOp>
|                   `-DeclRefExpr 0x55eac02344b0 <col:10> 'IPAddress' lvalue ParmVar 0x55eac0230390 'x' 'IPAddress'
|-CXXConstructorDecl 0x55eac0230570 <line:36:5, col:40> col:14 IP6Address 'void (const String &)'
| `-ParmVarDecl 0x55eac02304e0 <col:25, col:39> col:39 x 'const String &'
|-CXXConstructorDecl 0x55eac0230798 <line:39:5, line:41:5> line:39:21 IP6Address 'void (const struct in6_addr &)' inline
| |-ParmVarDecl 0x55eac02306a0 <col:32, col:55> col:55 used x 'const struct in6_addr &'
| |-CXXCtorInitializer Field 0x55eac0233598 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55eac023ab70 <line:40:4, col:11> 'struct in6_addr':'in6_addr' 'void (const in6_addr &) noexcept'
| |   `-DeclRefExpr 0x55eac02357e8 <col:10> 'const struct in6_addr':'const in6_addr' lvalue ParmVar 0x55eac02306a0 'x' 'const struct in6_addr &'
| `-CompoundStmt 0x55eac023abd0 <col:13, line:41:5>
|-CXXConstructorDecl 0x55eac0230968 <line:44:5, line:46:5> line:44:21 IP6Address 'void (const struct in_addr &)' inline
| |-ParmVarDecl 0x55eac02308a0 <col:32, col:54> col:54 used x 'const struct in_addr &'
| |-CXXCtorInitializer Field 0x55eac0233598 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55eac023abe0 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55eac023acf0 <col:57, line:46:5>
|   `-CXXOperatorCallExpr 0x55eac023acb8 <line:45:2, col:10> 'IP6Address' lvalue
|     |-ImplicitCastExpr 0x55eac023aca0 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55eac023ac80 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55eac0232f38 'operator=' 'IP6Address &(const struct in_addr &)'
|     |-UnaryOperator 0x55eac023ac48 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|     | `-CXXThisExpr 0x55eac023ac38 <col:3> 'IP6Address *' this
|     `-DeclRefExpr 0x55eac023ac60 <col:10> 'const struct in_addr':'const in_addr' lvalue ParmVar 0x55eac02308a0 'x' 'const struct in_addr &'
|-CXXConstructorDecl 0x55eac0230ab8 <line:49:5, line:51:5> line:49:12 used IP6Address 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55eac0230a28 <col:23, col:49> col:49 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x55eac0233598 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55eac023ad08 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55eac023adb8 <col:57, line:51:5>
|   `-CStyleCastExpr 0x55eac023ad90 <line:50:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55eac023ad60 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55eac0230a28 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55eac0230c48 <line:62:5, col:49> col:23 make_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55eac0230b80 <col:35, col:39> col:39 prefix_len 'int'
|-CXXMethodDecl 0x55eac0230d98 <line:69:5, col:58> col:23 make_inverted_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55eac0230d08 <col:44, col:48> col:48 prefix_len 'int'
|-TypedefDecl 0x55eac0230f48 <line:71:5, col:61> col:36 referenced unspecified_bool_type 'uint32_t (IP6Address::*)() const'
| `-MemberPointerType 0x55eac0230ec0 'uint32_t (IP6Address::*)() const'
|   |-RecordType 0x55eac01bdca0 'IP6Address'
|   | `-CXXRecord 0x55eac022ff00 'IP6Address'
|   `-ParenType 0x55eac0230e60 'uint32_t () const' sugar
|     `-FunctionProtoType 0x55eabffba970 'uint32_t () const' const cdecl
|       `-TypedefType 0x55eabfde97f0 'uint32_t' sugar
|         |-Typedef 0x55eabfcfc408 'uint32_t'
|         `-TypedefType 0x55eabfcd5440 '__uint32_t' sugar
|           |-Typedef 0x55eabfcd5038 '__uint32_t'
|           `-BuiltinType 0x55eabfc93410 'unsigned int'
|-CXXConversionDecl 0x55eac0231088 <line:72:5, col:45> col:12 operator unsigned int (IP6Address::*)() const 'IP6Address::unspecified_bool_type () const' inline
|-CXXConversionDecl 0x55eac0231210 <line:74:5, col:62> col:5 operator const in6_addr & 'const struct in6_addr &() const'
| `-CompoundStmt 0x55eac023ae20 <col:46, col:62>
|   `-ReturnStmt 0x55eac023ae10 <col:48, col:55>
|     `-MemberExpr 0x55eac023ade0 <col:55> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55eac0233598
|       `-CXXThisExpr 0x55eac023add0 <col:55> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55eac0231400 <line:75:5, col:50> col:5 operator in6_addr & 'struct in6_addr &()'
| `-CompoundStmt 0x55eac023ae88 <col:34, col:50>
|   `-ReturnStmt 0x55eac023ae78 <col:36, col:43>
|     `-MemberExpr 0x55eac023ae48 <col:43> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55eac0233598
|       `-CXXThisExpr 0x55eac023ae38 <col:43> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55eac0231500 <line:76:5, col:61> col:28 in6_addr 'const struct in6_addr &() const'
| `-CompoundStmt 0x55eac023aef0 <col:45, col:61>
|   `-ReturnStmt 0x55eac023aee0 <col:47, col:54>
|     `-MemberExpr 0x55eac023aeb0 <col:54> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55eac0233598
|       `-CXXThisExpr 0x55eac023aea0 <col:54> 'const IP6Address *' implicit this
|-CXXMethodDecl 0x55eac02315d8 <line:77:5, col:49> col:22 in6_addr 'struct in6_addr &()'
| `-CompoundStmt 0x55eac023af58 <col:33, col:49>
|   `-ReturnStmt 0x55eac023af48 <col:35, col:42>
|     `-MemberExpr 0x55eac023af18 <col:42> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55eac0233598
|       `-CXXThisExpr 0x55eac023af08 <col:42> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55eac02316a0 <line:79:5, col:66> col:20 data 'unsigned char *()'
| `-CompoundStmt 0x55eac023b090 <col:27, col:66>
|   `-ReturnStmt 0x55eac023b080 <col:29, col:63>
|     `-UnaryOperator 0x55eac023b068 <col:36, col:63> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55eac023b048 <col:37, col:63> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55eac023b030 <col:37, col:51> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55eac023afe0 <col:37, col:51> 'uint8_t [16]' lvalue .__u6_addr8 0x55eabfec00e8
|         |   `-MemberExpr 0x55eac023afb0 <col:37, col:43> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|         |     `-MemberExpr 0x55eac023af80 <col:37> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55eac0233598
|         |       `-CXXThisExpr 0x55eac023af70 <col:37> 'IP6Address *' implicit this
|         `-IntegerLiteral 0x55eac023b010 <col:62> 'int' 0
|-CXXMethodDecl 0x55eac0231768 <line:80:5, col:78> col:26 used data 'const unsigned char *() const'
| `-CompoundStmt 0x55eac023b208 <col:39, col:78>
|   `-ReturnStmt 0x55eac023b1f8 <col:41, col:75>
|     `-UnaryOperator 0x55eac023b1e0 <col:48, col:75> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55eac023b1c0 <col:49, col:75> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55eac023b1a8 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55eac023b118 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55eabfec00e8
|         |   `-MemberExpr 0x55eac023b0e8 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|         |     `-MemberExpr 0x55eac023b0b8 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55eac0233598
|         |       `-CXXThisExpr 0x55eac023b0a8 <col:49> 'const IP6Address *' implicit this
|         `-IntegerLiteral 0x55eac023b148 <col:74> 'int' 0
|-CXXMethodDecl 0x55eac0231888 <line:81:5, col:75> col:15 used data16 'uint16_t *()'
| `-CompoundStmt 0x55eac023b378 <col:24, col:75>
|   `-ReturnStmt 0x55eac023b368 <col:26, col:72>
|     `-CStyleCastExpr 0x55eac023b340 <col:33, col:72> 'uint16_t *' <BitCast>
|       `-UnaryOperator 0x55eac023b318 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55eac023b2f8 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55eac023b2e0 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55eac023b290 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55eabfec00e8
|           |   `-MemberExpr 0x55eac023b260 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|           |     `-MemberExpr 0x55eac023b230 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55eac0233598
|           |       `-CXXThisExpr 0x55eac023b220 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55eac023b2c0 <col:71> 'int' 0
|-CXXMethodDecl 0x55eac0231948 <line:82:5, col:87> col:21 data16 'const uint16_t *() const'
| `-CompoundStmt 0x55eac023b500 <col:36, col:87>
|   `-ReturnStmt 0x55eac023b4f0 <col:38, col:84>
|     `-ImplicitCastExpr 0x55eac023b4d8 <col:45, col:84> 'const uint16_t *' <NoOp>
|       `-CStyleCastExpr 0x55eac023b4b0 <col:45, col:84> 'uint16_t *' <BitCast>
|         `-UnaryOperator 0x55eac023b488 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55eac023b468 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55eac023b450 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55eac023b400 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55eabfec00e8
|             |   `-MemberExpr 0x55eac023b3d0 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|             |     `-MemberExpr 0x55eac023b3a0 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55eac0233598
|             |       `-CXXThisExpr 0x55eac023b390 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55eac023b430 <col:83> 'int' 0
|-CXXMethodDecl 0x55eac0231a08 <line:83:5, col:75> col:15 used data32 'uint32_t *()'
| `-CompoundStmt 0x55eac023b670 <col:24, col:75>
|   `-ReturnStmt 0x55eac023b660 <col:26, col:72>
|     `-CStyleCastExpr 0x55eac023b638 <col:33, col:72> 'uint32_t *' <BitCast>
|       `-UnaryOperator 0x55eac023b610 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55eac023b5f0 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55eac023b5d8 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55eac023b588 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55eabfec00e8
|           |   `-MemberExpr 0x55eac023b558 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|           |     `-MemberExpr 0x55eac023b528 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55eac0233598
|           |       `-CXXThisExpr 0x55eac023b518 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55eac023b5b8 <col:71> 'int' 0
|-CXXMethodDecl 0x55eac0231ac8 <line:84:5, col:87> col:21 used data32 'const uint32_t *() const'
| `-CompoundStmt 0x55eac023b7f8 <col:36, col:87>
|   `-ReturnStmt 0x55eac023b7e8 <col:38, col:84>
|     `-ImplicitCastExpr 0x55eac023b7d0 <col:45, col:84> 'const uint32_t *' <NoOp>
|       `-CStyleCastExpr 0x55eac023b7a8 <col:45, col:84> 'uint32_t *' <BitCast>
|         `-UnaryOperator 0x55eac023b780 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55eac023b760 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55eac023b748 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55eac023b6f8 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55eabfec00e8
|             |   `-MemberExpr 0x55eac023b6c8 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|             |     `-MemberExpr 0x55eac023b698 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55eac0233598
|             |       `-CXXThisExpr 0x55eac023b688 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55eac023b728 <col:83> 'int' 0
|-CXXMethodDecl 0x55eac0231b88 <line:86:5, col:32> col:21 used hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac0231c50 <line:88:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55eac0231e78 <line:89:5, col:80> col:17 matches_prefix 'bool (const IP6Address &, const IP6Address &) const' inline
| |-ParmVarDecl 0x55eac0231d28 <col:32, col:50> col:50 addr 'const IP6Address &'
| `-ParmVarDecl 0x55eac0231da0 <col:56, col:74> col:74 mask 'const IP6Address &'
|-CXXMethodDecl 0x55eac0231ff8 <line:90:5, col:54> col:17 mask_as_specific 'bool (const IP6Address &) const' inline
| `-ParmVarDecl 0x55eac0231f38 <col:34, col:51> col:52 'const IP6Address &'
|-CXXMethodDecl 0x55eac02320c0 <line:97:5, line:99:5> line:97:10 has_ether_address 'bool () const'
| `-CompoundStmt 0x55eac023bb10 <col:36, line:99:5>
|   `-ReturnStmt 0x55eac023bb00 <line:98:2, col:81>
|     `-BinaryOperator 0x55eac023bae0 <col:9, col:81> 'bool' '&&'
|       |-BinaryOperator 0x55eac023b958 <col:9, col:41> 'bool' '=='
|       | |-ImplicitCastExpr 0x55eac023b940 <col:9, col:36> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55eac023b928 <col:9, col:36> 'uint8_t':'unsigned char' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x55eac023b8e8 <col:9, col:36> 'const uint8_t':'const unsigned char' lvalue
|       | |     |-ImplicitCastExpr 0x55eac023b8d0 <col:9, col:23> 'const uint8_t *' <ArrayToPointerDecay>
|       | |     | `-MemberExpr 0x55eac023b880 <col:9, col:23> 'uint8_t const[16]' lvalue .__u6_addr8 0x55eabfec00e8
|       | |     |   `-MemberExpr 0x55eac023b850 <col:9, col:15> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|       | |     |     `-MemberExpr 0x55eac023b820 <col:9> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55eac0233598
|       | |     |       `-CXXThisExpr 0x55eac023b810 <col:9> 'const IP6Address *' implicit this
|       | |     `-IntegerLiteral 0x55eac023b8b0 <col:34> 'int' 11
|       | `-IntegerLiteral 0x55eac023b908 <col:41> 'int' 255
|       `-BinaryOperator 0x55eac023bac0 <col:49, col:81> 'bool' '=='
|         |-ImplicitCastExpr 0x55eac023baa8 <col:49, col:76> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55eac023ba90 <col:49, col:76> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55eac023ba50 <col:49, col:76> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55eac023ba38 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55eac023b9e8 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55eabfec00e8
|         |     |   `-MemberExpr 0x55eac023b9b8 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|         |     |     `-MemberExpr 0x55eac023b988 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55eac0233598
|         |     |       `-CXXThisExpr 0x55eac023b978 <col:49> 'const IP6Address *' implicit this
|         |     `-IntegerLiteral 0x55eac023ba18 <col:74> 'int' 12
|         `-IntegerLiteral 0x55eac023ba70 <col:81> 'int' 254
|-CXXMethodDecl 0x55eac0232238 <line:104:5, col:41> col:10 ether_address 'bool (EtherAddress &) const'
| `-ParmVarDecl 0x55eac0232170 <col:24, col:38> col:38 x 'EtherAddress &'
|-CXXMethodDecl 0x55eac0232300 <line:111:5, line:114:5> line:111:17 is_ip4_compatible 'bool () const' inline
| `-CompoundStmt 0x55eac023bff8 <col:43, line:114:5>
|   `-ReturnStmt 0x55eac023bfe8 <line:112:2, line:113:24>
|     `-BinaryOperator 0x55eac023bfc8 <line:112:9, line:113:24> 'bool' '&&'
|       |-BinaryOperator 0x55eac023be28 <line:112:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55eac023bc88 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55eac023bc58 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55eac023bc18 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55eac023bbd8 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55eac023bba8 <col:9> '<bound member function type>' ->data32 0x55eac0231ac8
|       | | |   |   `-CXXThisExpr 0x55eac023bb98 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55eac023bbf8 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55eac023bc70 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55eac023bc38 <col:24> 'int' 0
|       | `-BinaryOperator 0x55eac023be08 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55eac023bdd8 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55eac023bd98 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55eac023bd58 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55eac023bd28 <col:29> '<bound member function type>' ->data32 0x55eac0231ac8
|       |   |   |   `-CXXThisExpr 0x55eac023bd18 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55eac023bd78 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55eac023bdf0 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55eac023bdb8 <col:44> 'int' 0
|       `-BinaryOperator 0x55eac023bfa8 <line:113:9, col:24> 'bool' '=='
|         |-ImplicitCastExpr 0x55eac023bf78 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55eac023bf38 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55eac023bef8 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55eac023bec8 <col:9> '<bound member function type>' ->data32 0x55eac0231ac8
|         |   |   `-CXXThisExpr 0x55eac023beb8 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55eac023bf18 <col:18> 'int' 2
|         `-ImplicitCastExpr 0x55eac023bf90 <col:24> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55eac023bf58 <col:24> 'int' 0
|-CXXMethodDecl 0x55eac02323c0 <line:120:5, line:123:5> line:120:17 is_ip4_mapped 'bool () const' inline
| `-CompoundStmt 0x55eac023c570 <col:39, line:123:5>
|   `-ReturnStmt 0x55eac023c560 <line:121:2, line:122:41>
|     `-BinaryOperator 0x55eac023c540 <line:121:9, line:122:41> 'bool' '&&'
|       |-BinaryOperator 0x55eac023c310 <line:121:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55eac023c170 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55eac023c140 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55eac023c100 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55eac023c0c0 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55eac023c090 <col:9> '<bound member function type>' ->data32 0x55eac0231ac8
|       | | |   |   `-CXXThisExpr 0x55eac023c080 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55eac023c0e0 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55eac023c158 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55eac023c120 <col:24> 'int' 0
|       | `-BinaryOperator 0x55eac023c2f0 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55eac023c2c0 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55eac023c280 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55eac023c240 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55eac023c210 <col:29> '<bound member function type>' ->data32 0x55eac0231ac8
|       |   |   |   `-CXXThisExpr 0x55eac023c200 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55eac023c260 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55eac023c2d8 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55eac023c2a0 <col:44> 'int' 0
|       `-BinaryOperator 0x55eac023c520 <line:122:9, col:41> 'bool' '=='
|         |-ImplicitCastExpr 0x55eac023c508 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55eac023c420 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55eac023c3e0 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55eac023c3b0 <col:9> '<bound member function type>' ->data32 0x55eac0231ac8
|         |   |   `-CXXThisExpr 0x55eac023c3a0 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55eac023c400 <col:18> 'int' 2
|         `-CallExpr 0x55eac023c4e0 <col:24, col:41> 'uint32_t':'unsigned int'
|           |-ImplicitCastExpr 0x55eac023c4c8 <col:24> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55eac023c4a8 <col:24> 'uint32_t (uint32_t) throw()' lvalue Function 0x55eabfec6658 'htonl' 'uint32_t (uint32_t) throw()'
|           `-IntegerLiteral 0x55eac023c488 <col:30> 'unsigned int' 65535
|-CXXMethodDecl 0x55eac0232480 <line:129:5, line:131:5> line:129:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55eac023c700 <col:38, line:131:5>
|   `-ReturnStmt 0x55eac023c6f0 <line:130:9, col:47>
|     `-BinaryOperator 0x55eac023c6d0 <col:16, col:47> 'bool' '=='
|       |-ImplicitCastExpr 0x55eac023c6b8 <col:16, col:42> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x55eac023c6a0 <col:16, col:42> 'uint8_t':'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55eac023c660 <col:16, col:42> 'const uint8_t':'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x55eac023c648 <col:16, col:30> 'const uint8_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x55eac023c5f8 <col:16, col:30> 'uint8_t const[16]' lvalue .__u6_addr8 0x55eabfec00e8
|       |     |   `-MemberExpr 0x55eac023c5c8 <col:16, col:22> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55eabfec0408
|       |     |     `-MemberExpr 0x55eac023c598 <col:16> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55eac0233598
|       |     |       `-CXXThisExpr 0x55eac023c588 <col:16> 'const IP6Address *' implicit this
|       |     `-IntegerLiteral 0x55eac023c628 <col:41> 'int' 0
|       `-IntegerLiteral 0x55eac023c680 <col:47> 'int' 255
|-CXXMethodDecl 0x55eac0232540 <line:137:5, line:139:5> line:137:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55eac023cad8 <col:39, line:139:5>
|   `-ReturnStmt 0x55eac023cac8 <line:138:9, col:67>
|     `-BinaryOperator 0x55eac023caa8 <col:16, col:67> 'bool' '&&'
|       |-BinaryOperator 0x55eac023c908 <col:16, col:47> 'bool' '=='
|       | |-ImplicitCastExpr 0x55eac023c8f0 <col:16, col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | `-ArraySubscriptExpr 0x55eac023c808 <col:16, col:26> 'const uint32_t':'const unsigned int' lvalue
|       | |   |-CXXMemberCallExpr 0x55eac023c7c8 <col:16, col:23> 'const uint32_t *'
|       | |   | `-MemberExpr 0x55eac023c798 <col:16> '<bound member function type>' ->data32 0x55eac0231ac8
|       | |   |   `-CXXThisExpr 0x55eac023c788 <col:16> 'const IP6Address *' implicit this
|       | |   `-IntegerLiteral 0x55eac023c7e8 <col:25> 'int' 0
|       | `-CallExpr 0x55eac023c8c8 <col:31, col:47> 'uint32_t':'unsigned int'
|       |   |-ImplicitCastExpr 0x55eac023c8b0 <col:31> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55eac023c890 <col:31> 'uint32_t (uint32_t) throw()' lvalue Function 0x55eabfec6658 'htonl' 'uint32_t (uint32_t) throw()'
|       |   `-IntegerLiteral 0x55eac023c870 <col:37> 'unsigned int' 4269801472
|       `-BinaryOperator 0x55eac023ca88 <col:52, col:67> 'bool' '=='
|         |-ImplicitCastExpr 0x55eac023ca58 <col:52, col:62> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55eac023ca18 <col:52, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55eac023c9d8 <col:52, col:59> 'const uint32_t *'
|         |   | `-MemberExpr 0x55eac023c9a8 <col:52> '<bound member function type>' ->data32 0x55eac0231ac8
|         |   |   `-CXXThisExpr 0x55eac023c998 <col:52> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55eac023c9f8 <col:61> 'int' 1
|         `-ImplicitCastExpr 0x55eac023ca70 <col:67> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55eac023ca38 <col:67> 'int' 0
|-CXXMethodDecl 0x55eac0232600 <line:145:5, col:29> col:15 ip4_address 'IPAddress () const'
|-CXXMethodDecl 0x55eac02327a8 <line:154:5, col:53> col:24 operator&= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55eac02326b0 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55eac0232968 <line:155:5, col:58> col:24 operator&= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55eac0232878 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55eac0232ab0 <line:156:5, col:53> col:24 operator|= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55eac0232a20 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55eac0232c10 <line:157:5, col:58> col:24 operator|= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55eac0232b80 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55eac0232d70 <line:159:5, col:57> col:24 operator= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55eac0232ce0 <col:34, col:56> col:57 'const struct in6_addr &'
|-CXXMethodDecl 0x55eac0232f38 <line:160:5, col:56> col:24 used operator= 'IP6Address &(const struct in_addr &)' inline
| `-ParmVarDecl 0x55eac0232e40 <col:34, col:55> col:56 'const struct in_addr &'
|-CXXMethodDecl 0x55eac02330b8 <line:162:5, col:35> col:10 used unparse 'void (StringAccum &) const'
| `-ParmVarDecl 0x55eac0232ff0 <col:18, col:31> col:31 sa 'StringAccum &'
|-CXXMethodDecl 0x55eac0233180 <line:163:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55eac0233240 <line:164:5, col:31> col:12 unparse_expanded 'String () const'
|-CXXMethodDecl 0x55eac0233300 <line:166:5, col:42> col:12 s 'String () const'
| `-CompoundStmt 0x55eac023cc58 <col:22, col:42>
|   `-ReturnStmt 0x55eac023cc48 <col:24, col:39>
|     `-ExprWithCleanups 0x55eac023cc30 <col:31, col:39> 'String'
|       `-CXXConstructExpr 0x55eac023cc00 <col:31, col:39> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55eac023cbe8 <col:31, col:39> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55eac023cbc8 <col:31, col:39> 'String' (CXXTemporary 0x55eac023cbc8)
|             `-CXXMemberCallExpr 0x55eac023cba0 <col:31, col:39> 'String'
|               `-MemberExpr 0x55eac023cb70 <col:31> '<bound member function type>' ->unparse 0x55eac0233180
|                 `-CXXThisExpr 0x55eac023cb60 <col:31> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55eac02333d0 <line:167:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55eac0233478 <col:51> "" ""
|-TypedefDecl 0x55eac02334f8 <line:169:5, col:31> col:31 parameter_type 'const IP6Address &'
| `-LValueReferenceType 0x55eac0231cf0 'const IP6Address &'
|   `-QualType 0x55eac01bdca1 'const IP6Address' const
|     `-RecordType 0x55eac01bdca0 'IP6Address'
|       `-CXXRecord 0x55eac022ff00 'IP6Address'
|-AccessSpecDecl 0x55eac0233550 <line:171:3, col:10> col:3 private
|-FieldDecl 0x55eac0233598 <line:173:5, col:21> col:21 referenced _addr 'struct in6_addr':'in6_addr'
|-CXXMethodDecl 0x55eac02344d0 <line:14:7> col:7 implicit operator= 'IP6Address &(const IP6Address &)' inline default trivial noexcept-unevaluated 0x55eac02344d0
| `-ParmVarDecl 0x55eac02345a8 <col:7> col:7 'const IP6Address &'
|-CXXMethodDecl 0x55eac0234c78 <col:7> col:7 implicit operator= 'IP6Address &(IP6Address &&)' inline default trivial noexcept-unevaluated 0x55eac0234c78
| `-ParmVarDecl 0x55eac0234d88 <col:7> col:7 'IP6Address &&'
|-CXXConstructorDecl 0x55eac0234df8 <col:7> col:7 implicit constexpr IP6Address 'void (const IP6Address &)' inline default trivial noexcept-unevaluated 0x55eac0234df8
| `-ParmVarDecl 0x55eac0234f08 <col:7> col:7 'const IP6Address &'
|-CXXConstructorDecl 0x55eac0235060 <col:7> col:7 implicit used constexpr IP6Address 'void (IP6Address &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0235178 <col:7> col:7 used 'IP6Address &&'
| |-CXXCtorInitializer Field 0x55eac0233598 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55eac0244488 <col:7> 'struct in6_addr':'in6_addr' 'void (in6_addr &&) noexcept'
| |   `-MemberExpr 0x55eac0244330 <col:7> 'struct in6_addr':'in6_addr' xvalue ._addr 0x55eac0233598
| |     `-CXXStaticCastExpr 0x55eac0244300 <col:7> 'IP6Address' xvalue static_cast<class IP6Address &&> <NoOp>
| |       `-DeclRefExpr 0x55eac02442d0 <col:7> 'IP6Address' lvalue ParmVar 0x55eac0235178 '' 'IP6Address &&'
| `-CompoundStmt 0x55eac02444e8 <col:7>
`-CXXDestructorDecl 0x55eac0244138 <col:7> col:7 implicit referenced ~IP6Address 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IP6Address = type { %struct.in6_addr }
  NonVirtualBaseLLVMType:%class.IP6Address = type { %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabffba740 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eabffba858 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55eabffba8e8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55eabffba9b8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55eabffbaaa0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55eabffbacb8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55eabffbab60 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eabffbae68 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55eabffbad70 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55eabffbafb0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55eabffbaf20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55eabffbb0f8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55eabffbb068 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eabffbb268 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55eabffbb1b0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eabffbb330 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55eabffbb478 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55eabffbb3e8 <col:28> col:31 'int'
|-CXXMethodDecl 0x55eabffbb540 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55eabffbb688 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55eabffbb5f8 <col:28> col:31 'int'
|-CXXMethodDecl 0x55eabffbb808 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55eabffbb740 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eabffbb950 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55eabffbb8c0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eabffbba18 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55eabffbbbd8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55eabffbbac8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55eabffbbb40 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eabffbbe28 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55eabffbbc98 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55eabffbbd10 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55eabffbbed8 <col:86> "" ""
|-CXXMethodDecl 0x55eabffbc148 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55eabffbbfb8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55eabffbc030 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eabffbc2f8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55eabffbc208 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55eabffbc4a8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55eabffbc3b0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55eabffbc778 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55eabffbc560 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55eabffbc5d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55eabffbc650 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eabffbca58 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55eabffbc840 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55eabffbc8b8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55eabffbc930 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55eabffbcb10 <col:115> "" ""
|-AccessSpecDecl 0x55eabffbcb80 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55eabffbcbb8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eabffbd068 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55eabffbd068
| `-ParmVarDecl 0x55eabffbd178 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55eabffbd218 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55eabffbd218
| `-ParmVarDecl 0x55eabffbd328 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55eabfff31c8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55eac01e4d50 <col:7>
|-CXXConstructorDecl 0x55eabfff32a0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55eabfff32a0
| `-ParmVarDecl 0x55eabfff33b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55eabfff3428 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55eabfff3428
| `-ParmVarDecl 0x55eabfff3538 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55eac01e76c0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac01d38d8 prev 0x55eac01c4640 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac01d39d0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55eac01d3ac0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55eac01d3be8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55eac01d3d68 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55eac01d3ee8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55eac01d4068 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55eac01e4eb8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55eac01e5728 <col:11>
|-CXXDestructorDecl 0x55eac01e4f90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55eac01e50c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55eac01e50c8
| `-ParmVarDecl 0x55eac01e51d8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55eac01e5278 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55eac01e5278
| `-ParmVarDecl 0x55eac01e5388 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55eac01e8108 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac01e8218 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55eac01e8498 <col:11>
|   `-ReturnStmt 0x55eac01e8488 <col:11>
|     `-UnaryOperator 0x55eac01e8470 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eac01e8460 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55eac01e8288 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55eac01e8288
  `-ParmVarDecl 0x55eac01e8398 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac01d40d0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac01d41e8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55eac01d4288 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55eac01d42f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55eac01d4358 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55eac01d43c0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55eac01d4420 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55eac01d44e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55eac01d4540 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55eac01d45a0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55eac01e4dc8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55eac01d4288 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55eac01e5738 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55eac01e5790 <col:12>
|-CXXConstructorDecl 0x55eac01e53f8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55eac01e53f8
| `-ParmVarDecl 0x55eac01e5508 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55eac01e55a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55eac01e55a8
| `-ParmVarDecl 0x55eac01e56b8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55eac01e77f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac01bdd70 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55eac01bde88 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55eac01bdf18 <col:16, col:22> col:16 public
|-EnumDecl 0x55eac01bdf40 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55eac01be040 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55eac01be120 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01be020 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55eac01be000 <col:21> 'int' 28
| `-EnumConstantDecl 0x55eac01be0d0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55eac01be138 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac01be0b0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55eac01be090 <col:22> 'int' 64
|-CXXMethodDecl 0x55eac01be478 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55eac01be160 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55eac01be1e0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55eac01be258 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55eac01be2d0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55eac01be538 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55eac01be738 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55eac01be5b0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55eac01be628 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55eac01be7e8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55eac01be948 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55eac01be858 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55eac01be9f0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55eac01bed20 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55eac01becb0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55eac01bec50 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55eac01bec10 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55eabfc932d0 'void'
|       |-PointerType 0x55eabfecc6a0 'unsigned char *'
|       | `-BuiltinType 0x55eabfc933d0 'unsigned char'
|       |-TypedefType 0x55eabfd394e0 'size_t' sugar
|       | |-Typedef 0x55eabfd03b20 'size_t'
|       | `-BuiltinType 0x55eabfc93430 'unsigned long'
|       `-PointerType 0x55eabfc93ad0 'void *'
|         `-BuiltinType 0x55eabfc932d0 'void'
|-CXXMethodDecl 0x55eac01bf198 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55eac01bed90 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55eac01bee08 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55eac01beea0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55eac01bef20 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55eac01d5a30 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55eac01d5a18 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55eac01d59e0 <col:58> 'int' 0
| |-ParmVarDecl 0x55eac01befa0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55eac01d5a58 <col:76> 'int' 0
| |-ParmVarDecl 0x55eac01bf020 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55eac01d5a78 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55eac01bf268 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55eac01bf2e8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55eac01bf3a8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55eac01bf448 <col:20>
| `-OptimizeNoneAttr 0x55eac01bf4a0 <col:30>
|-CXXMethodDecl 0x55eac01bf518 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55eac01bf5b8 <col:20>
| `-OptimizeNoneAttr 0x55eac01bf610 <col:30>
|-CXXMethodDecl 0x55eac01bf688 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55eac01bf728 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55eac01bf7d8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55eac01bf878 <col:20>
| |-OptimizeNoneAttr 0x55eac01bf8d0 <col:30>
| `-WarnUnusedResultAttr 0x55eac01bf8f8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55eac01bf950 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55eac01bf9f0 <col:20>
| `-OptimizeNoneAttr 0x55eac01bfa48 <col:30>
|-CXXMethodDecl 0x55eac01bfa98 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55eac01bfb38 <col:20>
| `-OptimizeNoneAttr 0x55eac01bfb90 <col:30>
|-CXXMethodDecl 0x55eac01bfbd8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55eac01bfc78 <col:20>
| `-OptimizeNoneAttr 0x55eac01bfcd0 <col:30>
|-CXXMethodDecl 0x55eac01bfd18 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac01bfdd8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac01bfea0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55eac01bff68 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55eac01c0028 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac01c0148 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55eac01d5b40 <col:54, line:99:5>
|   `-ReturnStmt 0x55eac01d5b30 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55eac01d5b18 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55eac01d5ae8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55eac01d48d8
|         `-CXXThisExpr 0x55eac01d5ad8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55eac01c02e8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55eac01c01f8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55eac01d5bf0 <col:67, line:103:5>
|   `-BinaryOperator 0x55eac01d5bd0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55eac01d5b68 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55eac01d48d8
|     | `-CXXThisExpr 0x55eac01d5b58 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55eac01d5bb8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55eac01d5b98 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55eac01c01f8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55eac01c03e0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55eac01d5c70 <col:33, line:107:5>
|   `-ReturnStmt 0x55eac01d5c60 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55eac01d5c48 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55eac01d5c18 <col:16> 'void *' lvalue ->_destructor_argument 0x55eac01d4940
|         `-CXXThisExpr 0x55eac01d5c08 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55eac01c04a0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55eac01d62a0 <col:25, line:113:5>
|   |-ParenExpr 0x55eac01d5fe8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55eac01d5fb8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01d5d28 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55eac01d5d00 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55eac01d5cc8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55eac01d5c98 <col:24> '<bound member function type>' ->shared 0x55eac01bf518
|   |   |       `-ImplicitCastExpr 0x55eac01d5ce8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55eac01d5c88 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55eac01d5d88 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01d5d68 <col:42> 'int' 0
|   |   `-CallExpr 0x55eac01d5f18 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55eac01d5f00 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01d5ee0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01d5f58 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01d5df8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55eac01d5f70 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01d5e20 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01d5f88 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01d5e58 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55eac01d5fa0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01d5ec8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01d5eb0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01d5e78 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55eac01d61e8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55eac01d6018 <col:2> 'unsigned char *' lvalue ->_head 0x55eac01d46e0
|   | | `-CXXThisExpr 0x55eac01d6008 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55eac01d61d0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55eac01d61b0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55eac01d6058 <col:10> 'unsigned char *' lvalue ->_data 0x55eac01d4748
|   |     | `-CXXThisExpr 0x55eac01d6048 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55eac01d6198 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55eac01d6178 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55eac01d6098 <col:18> 'unsigned char *' lvalue ->_tail 0x55eac01d47b0
|   |         | `-CXXThisExpr 0x55eac01d6088 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55eac01d6160 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55eac01d6140 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55eac01d60d8 <col:26> 'unsigned char *' lvalue ->_end 0x55eac01d4818
|   |             | `-CXXThisExpr 0x55eac01d60c8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55eac01d6128 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55eac01d6108 <col:33> 'int' 0
|   `-BinaryOperator 0x55eac01d6280 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55eac01d6218 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55eac01d48d8
|     | `-CXXThisExpr 0x55eac01d6208 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55eac01d6268 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55eac01d6248 <col:16> 'int' 0
|-CXXMethodDecl 0x55eac01c05e0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55eac01c0550 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55eac01c0688 <col:20>
| |-OptimizeNoneAttr 0x55eac01c06e0 <col:30>
| `-WarnUnusedResultAttr 0x55eac01c0708 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55eac01c07d8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55eac01c0748 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55eac01c0880 <col:20>
| |-OptimizeNoneAttr 0x55eac01c08d8 <col:30>
| `-WarnUnusedResultAttr 0x55eac01c0900 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55eac01c0a38 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55eac01c0940 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55eac01c0ae0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55eac01c0c00 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55eac01c0b70 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55eac01c0ca8 <col:20>
| `-OptimizeNoneAttr 0x55eac01c0d00 <col:30>
|-CXXMethodDecl 0x55eac01c0dc8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55eac01c0d38 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55eac01c0e70 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55eac01c0f70 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55eac01c0ee0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55eac01c1018 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55eac01c1118 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55eac01c1088 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55eac01c11c0 <col:20>
| `-OptimizeNoneAttr 0x55eac01c1218 <col:30>
|-CXXMethodDecl 0x55eac01c13a8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55eac01c1258 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55eac01c12d0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55eac01d5a98 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55eac01c1458 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55eac01c1658 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55eac01c14d0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55eac01c1548 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac01c1868 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55eac01c1718 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55eac01c1790 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac01c1a78 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55eac01c1928 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55eac01c19a8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55eac01d5aa8 <col:39> 'int' 0
|-CXXMethodDecl 0x55eac01c1b48 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55eac01c1c10 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55eac01c1cd8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55eac01c1d98 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac01c1e60 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55eac01c1fa8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55eac01c1f18 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55eac01c2178 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55eac01c2068 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55eac01c20e0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac01c2248 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55eac01c2308 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55eac01c23a8 <col:20>
| `-OptimizeNoneAttr 0x55eac01c2400 <col:30>
|-CXXMethodDecl 0x55eac01c2450 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55eac01c24f0 <col:20>
| `-OptimizeNoneAttr 0x55eac01c2548 <col:30>
|-CXXMethodDecl 0x55eac01c2598 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55eac01c2658 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac01c2720 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55eac01c27c0 <col:20>
| `-OptimizeNoneAttr 0x55eac01c2818 <col:30>
|-CXXMethodDecl 0x55eac01c2968 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55eac01c2858 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55eac01c28d0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac01c2ab8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55eac01c2a28 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac01c2b80 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55eac01c2c40 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55eac01c2ce0 <col:20>
| `-OptimizeNoneAttr 0x55eac01c2d38 <col:30>
|-CXXMethodDecl 0x55eac01c2d88 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55eac01c2e28 <col:20>
| `-OptimizeNoneAttr 0x55eac01c2e80 <col:30>
|-CXXMethodDecl 0x55eac01c2ed0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55eac01c2f98 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55eac01c3038 <col:20>
| `-OptimizeNoneAttr 0x55eac01c3090 <col:30>
|-CXXMethodDecl 0x55eac01c30d8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55eac01c31f8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55eac01c3368 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55eac01c32a8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55eac01c3458 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55eac01c34f8 <col:20>
| `-OptimizeNoneAttr 0x55eac01c3550 <col:30>
|-CXXMethodDecl 0x55eac01c35a0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55eac01c3660 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac01c3898 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55eac01c3710 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55eac01c3788 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55eac01c3948 <col:20>
| `-OptimizeNoneAttr 0x55eac01c39a0 <col:30>
|-CXXMethodDecl 0x55eac01c3a48 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55eac01c3ae8 <col:20>
| `-OptimizeNoneAttr 0x55eac01c3b40 <col:30>
|-CXXMethodDecl 0x55eac01c3b90 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55eac01c3c30 <col:20>
| `-OptimizeNoneAttr 0x55eac01c3c88 <col:30>
|-CXXMethodDecl 0x55eac01c3cd0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55eac01c3d70 <col:20>
| `-OptimizeNoneAttr 0x55eac01c3dc8 <col:30>
|-CXXMethodDecl 0x55eac01c3ec8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55eac01c3e00 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55eac01c3f70 <col:20>
| `-OptimizeNoneAttr 0x55eac01c3fc8 <col:30>
|-CXXMethodDecl 0x55eac01c4188 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55eac01c4000 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55eac01c4078 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55eac01c4238 <col:20>
| `-OptimizeNoneAttr 0x55eac01c4290 <col:30>
|-CXXMethodDecl 0x55eac01c4338 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55eac01c4458 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55eac01c4578 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55eac01c4618 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55eac01c4640 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55eac01c4768 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55eac01c4808 <col:20>
| `-OptimizeNoneAttr 0x55eac01c4860 <col:30>
|-CXXMethodDecl 0x55eac01c4908 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55eac01c49a8 <col:20>
| `-OptimizeNoneAttr 0x55eac01c4a00 <col:30>
|-AccessSpecDecl 0x55eac01c4a28 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55eac01c4a50 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55eac01c4b60 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55eac01c4bb0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac01c4b40 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55eac01c4b10 <col:14> 'int' 48
|-CXXMethodDecl 0x55eac01c4c18 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55eac01c4cb8 <col:20>
| `-OptimizeNoneAttr 0x55eac01c4d10 <col:30>
|-CXXMethodDecl 0x55eac01c4d88 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55eac01c4e28 <col:20>
| `-OptimizeNoneAttr 0x55eac01c4e80 <col:30>
|-CXXMethodDecl 0x55eac01c4f48 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55eac01c4eb8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55eac01c50e8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55eac01c5288 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55eac01c5198 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55eac01c5330 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55eac01c5430 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55eac01c57e0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01c5410 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55eac01c53f0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55eac01c54c0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55eac01c57f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01c54a0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55eac01c5480 <col:14> 'int' 1
| |-EnumConstantDecl 0x55eac01c5550 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55eac01c5810 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01c5530 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55eac01c5510 <col:14> 'int' 2
| |-EnumConstantDecl 0x55eac01c55e0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55eac01c5828 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01c55c0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55eac01c55a0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55eac01c5670 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55eac01c5840 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01c5650 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55eac01c5630 <col:13> 'int' 4
| |-EnumConstantDecl 0x55eac01c5700 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55eac01c5858 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01c56e0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55eac01c56c0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55eac01c5790 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55eac01c5870 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac01c5770 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55eac01c5750 <col:14> 'int' 6
|-CXXMethodDecl 0x55eac01c58d8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55eac01c5978 <col:20>
| `-OptimizeNoneAttr 0x55eac01c59d0 <col:30>
|-CXXMethodDecl 0x55eac01c5ac8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55eac01c5a08 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55eac01c5b70 <col:20>
| `-OptimizeNoneAttr 0x55eac01c5bc8 <col:30>
|-CXXMethodDecl 0x55eac01c5c38 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55eac01c5d60 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55eac01c5ed8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55eac01c5e10 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55eac01c5fa0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55eac01c6068 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55eac01c61a8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55eac01c6118 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55eac01c6250 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55eac01c6350 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55eac01c6550 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01c6330 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55eac01c6310 <col:23> 'int' 0
| |-EnumConstantDecl 0x55eac01c63e0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55eac01c6568 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01c63c0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55eac01c63a0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55eac01c6470 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55eac01c6580 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01c6450 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55eac01c6430 <col:24> 'int' 0
| `-EnumConstantDecl 0x55eac01c6500 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55eac01c6598 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac01c64e0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55eac01c64c0 <col:47> 'int' 16
|-CXXMethodDecl 0x55eac01c65f8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55eac01c6768 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55eac01c66a8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55eac01c6810 <col:20>
| `-OptimizeNoneAttr 0x55eac01c6868 <col:30>
|-CXXMethodDecl 0x55eac01c68b8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55eac01d63c0 <col:18, col:36>
|   `-ReturnStmt 0x55eac01d63b0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55eac01d6398 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55eac01d6378 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55eac01d6348 <col:27> '<bound member function type>' ->xanno 0x55eac01c4908
|           `-CXXThisExpr 0x55eac01d6338 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55eac01c69b0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55eac01d64d0 <col:30, col:48>
|   `-ReturnStmt 0x55eac01d64c0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55eac01d64a8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55eac01d6488 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55eac01d6458 <col:39> '<bound member function type>' ->xanno 0x55eac01c4768
|           `-CXXThisExpr 0x55eac01d6448 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55eac01c6a98 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55eac01d6668 <col:24, col:50>
|   `-ReturnStmt 0x55eac01d6658 <col:26, col:47>
|     `-UnaryOperator 0x55eac01d6640 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55eac01d6620 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55eac01d6608 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55eac01d65b8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55eac01d3be8
|         |   `-CXXMemberCallExpr 0x55eac01d6598 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55eac01d6568 <col:34> '<bound member function type>' ->xanno 0x55eac01c4908
|         |       `-CXXThisExpr 0x55eac01d6558 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55eac01d65e8 <col:46> 'int' 0
|-CXXMethodDecl 0x55eac01c6b88 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55eac01d6838 <col:36, col:62>
|   `-ReturnStmt 0x55eac01d6828 <col:38, col:59>
|     `-UnaryOperator 0x55eac01d6810 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55eac01d67f0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55eac01d67d8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55eac01d6750 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55eac01d3be8
|         |   `-CXXMemberCallExpr 0x55eac01d6730 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55eac01d6700 <col:46> '<bound member function type>' ->xanno 0x55eac01c4768
|         |       `-CXXThisExpr 0x55eac01d66f0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55eac01d6780 <col:58> 'int' 0
|-CXXMethodDecl 0x55eac01c6ca8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55eac01d69d0 <col:26, col:53>
|   `-ReturnStmt 0x55eac01d69c0 <col:28, col:50>
|     `-UnaryOperator 0x55eac01d69a8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55eac01d6988 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55eac01d6970 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55eac01d6920 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55eac01d3ee8
|         |   `-CXXMemberCallExpr 0x55eac01d6900 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55eac01d68d0 <col:36> '<bound member function type>' ->xanno 0x55eac01c4908
|         |       `-CXXThisExpr 0x55eac01d68c0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55eac01d6950 <col:49> 'int' 0
|-CXXMethodDecl 0x55eac01c6dc8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55eac01d6ba8 <col:38, col:65>
|   `-ReturnStmt 0x55eac01d6b98 <col:40, col:62>
|     `-UnaryOperator 0x55eac01d6b80 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55eac01d6b60 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55eac01d6b48 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55eac01d6ab8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55eac01d3ee8
|         |   `-CXXMemberCallExpr 0x55eac01d6a98 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55eac01d6a68 <col:48> '<bound member function type>' ->xanno 0x55eac01c4768
|         |       `-CXXThisExpr 0x55eac01d6a58 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55eac01d6ae8 <col:61> 'int' 0
|-CXXMethodDecl 0x55eac01c6f78 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55eac01c6e80 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55eac01d7278 <col:34, line:463:5>
|   |-ParenExpr 0x55eac01d70c0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55eac01d7090 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01d6cf8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01d6cc8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01d6c18 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01d6c00 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01d6bc0 <col:23> 'int' lvalue ParmVar 0x55eac01c6e80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01d6be0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01d6ca8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01d6c78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01d6c38 <col:33> 'int' lvalue ParmVar 0x55eac01c6e80 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55eac01d6c90 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55eac01d6c58 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55eac01d6d58 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01d6d38 <col:56> 'int' 0
|   |   `-CallExpr 0x55eac01d6ff0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55eac01d6fd8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01d6fb8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01d7030 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01d6e48 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55eac01d7048 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01d6e78 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01d7060 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01d6eb0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55eac01d7078 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01d6fa0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01d6f88 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01d6f48 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55eac01d7268 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55eac01d7250 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55eac01d7230 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55eac01d7200 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55eac01d71b0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55eac01d3be8
|         |   `-CXXMemberCallExpr 0x55eac01d7190 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55eac01d7160 <col:9> '<bound member function type>' ->xanno 0x55eac01c4768
|         |       `-CXXThisExpr 0x55eac01d7150 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55eac01d7218 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55eac01d71e0 <col:21> 'int' lvalue ParmVar 0x55eac01c6e80 'i' 'int'
|-CXXMethodDecl 0x55eac01c71c8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55eac01c7038 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55eac01c70b0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55eac01dfc38 <col:40, line:472:5>
|   |-ParenExpr 0x55eac01dfa50 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55eac01dfa20 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01d73d0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01d73a0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01d72f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01d72d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01d7298 <col:23> 'int' lvalue ParmVar 0x55eac01c7038 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01d72b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01d7380 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01d7350 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01d7310 <col:33> 'int' lvalue ParmVar 0x55eac01c7038 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55eac01d7368 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55eac01d7330 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55eac01d7430 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01d7410 <col:56> 'int' 0
|   |   `-CallExpr 0x55eac01df980 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55eac01df968 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01df948 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01df9c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01df7d0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55eac01df9d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01df800 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01df9f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01df838 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55eac01dfa08 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01df930 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01df918 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01df8d8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55eac01dfc18 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55eac01dfbc0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55eac01dfb90 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55eac01dfb40 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55eac01d3be8
|     | |   `-CXXMemberCallExpr 0x55eac01dfb20 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55eac01dfaf0 <col:2> '<bound member function type>' ->xanno 0x55eac01c4908
|     | |       `-CXXThisExpr 0x55eac01dfae0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55eac01dfba8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55eac01dfb70 <col:14> 'int' lvalue ParmVar 0x55eac01c7038 'i' 'int'
|     `-ImplicitCastExpr 0x55eac01dfc00 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55eac01dfbe0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55eac01c70b0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55eac01c7388 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55eac01c7290 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55eac01e03b8 <col:36, line:485:5>
|   |-ParenExpr 0x55eac01e0120 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55eac01e00f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01dfdd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01dfda0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01dfcb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01dfc98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01dfc58 <col:23> 'int' lvalue ParmVar 0x55eac01c7290 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01dfc78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01dfd80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01dfd68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01dfcd0 <col:33> 'int' lvalue ParmVar 0x55eac01c7290 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01dfd48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01dfd30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01dfcf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55eac01dfd10 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55eac01dfe30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01dfe10 <col:60> 'int' 0
|   |   `-CallExpr 0x55eac01e0050 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e0038 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e0018 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e0090 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01dfea0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55eac01e00a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01dfed8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e00c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01dff10 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55eac01e00d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e0000 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01dffe8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01dffa8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55eac01e03a8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55eac01e0390 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55eac01e0378 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55eac01e0348 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55eac01e02e8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55eac01e02b8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55eac01e0230 <col:61, col:70> 'char const[48]' lvalue ->c 0x55eac01d3ac0
|             |   `-CXXMemberCallExpr 0x55eac01e0210 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55eac01e01e0 <col:61> '<bound member function type>' ->xanno 0x55eac01c4768
|             |       `-CXXThisExpr 0x55eac01e01d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55eac01e02d0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55eac01e0260 <col:74> 'int' lvalue ParmVar 0x55eac01c7290 'i' 'int'
|-CXXMethodDecl 0x55eac01c75d8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55eac01c7448 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55eac01c74c0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55eac01e0b08 <col:42, line:500:5>
|   |-ParenExpr 0x55eac01e08a0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55eac01e0870 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e0550 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e0520 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e0430 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e0418 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e03d8 <col:23> 'int' lvalue ParmVar 0x55eac01c7448 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e03f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e0500 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01e04e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e0450 <col:33> 'int' lvalue ParmVar 0x55eac01c7448 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e04c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e04b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e0470 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55eac01e0490 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55eac01e05b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e0590 <col:60> 'int' 0
|   |   `-CallExpr 0x55eac01e07d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e07b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e0798 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e0810 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e0620 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55eac01e0828 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e0658 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e0840 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e0690 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55eac01e0858 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e0780 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e0768 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e0728 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55eac01e0ae8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55eac01e0a98 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55eac01e0a68 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55eac01e0a10 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55eac01e09e0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55eac01e0990 <col:48, col:57> 'char [48]' lvalue ->c 0x55eac01d3ac0
|     |     |   `-CXXMemberCallExpr 0x55eac01e0970 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55eac01e0940 <col:48> '<bound member function type>' ->xanno 0x55eac01c4908
|     |     |       `-CXXThisExpr 0x55eac01e0930 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55eac01e09f8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55eac01e09c0 <col:61> 'int' lvalue ParmVar 0x55eac01c7448 'i' 'int'
|     `-ImplicitCastExpr 0x55eac01e0ad0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55eac01e0ab0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55eac01c74c0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55eac01c7798 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55eac01c76a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55eac01e1268 <col:35, line:513:5>
|   |-ParenExpr 0x55eac01e0f78 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55eac01e0f48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e0ca0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e0c70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e0b80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e0b68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e0b28 <col:23> 'int' lvalue ParmVar 0x55eac01c76a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e0b48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e0c50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01e0c38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e0ba0 <col:33> 'int' lvalue ParmVar 0x55eac01c76a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e0c18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e0c00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e0bc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55eac01e0be0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55eac01e0d00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e0ce0 <col:60> 'int' 0
|   |   `-CallExpr 0x55eac01e0ea8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e0e90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e0e70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e0ee8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e0d70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55eac01e0f00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e0da8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e0f18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e0de0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55eac01e0f30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e0e58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e0e40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e0e00 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55eac01e1258 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55eac01e1240 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55eac01e1228 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55eac01e11f8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55eac01e1170 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55eac01e1140 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55eac01e10f0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55eac01d3ac0
|             |   `-CXXMemberCallExpr 0x55eac01e10d0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55eac01e10a0 <col:60> '<bound member function type>' ->xanno 0x55eac01c4768
|             |       `-CXXThisExpr 0x55eac01e1090 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55eac01e1158 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55eac01e1120 <col:73> 'int' lvalue ParmVar 0x55eac01c76a0 'i' 'int'
|-CXXMethodDecl 0x55eac01c79e8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55eac01c7858 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55eac01c78d0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55eac01e1978 <col:41, line:528:5>
|   |-ParenExpr 0x55eac01e1710 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55eac01e16e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e1400 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e13d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e12e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e12c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e1288 <col:23> 'int' lvalue ParmVar 0x55eac01c7858 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e12a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e13b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01e1398 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e1300 <col:33> 'int' lvalue ParmVar 0x55eac01c7858 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e1378 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e1360 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e1320 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55eac01e1340 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55eac01e1460 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e1440 <col:60> 'int' 0
|   |   `-CallExpr 0x55eac01e1640 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e1628 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e1608 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e1680 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e14d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55eac01e1698 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e1508 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e16b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e1540 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55eac01e16c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e15f0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e15d8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e1598 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55eac01e1958 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55eac01e1908 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55eac01e18d8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55eac01e1880 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55eac01e1850 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55eac01e1800 <col:47, col:56> 'char [48]' lvalue ->c 0x55eac01d3ac0
|     |     |   `-CXXMemberCallExpr 0x55eac01e17e0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55eac01e17b0 <col:47> '<bound member function type>' ->xanno 0x55eac01c4908
|     |     |       `-CXXThisExpr 0x55eac01e17a0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55eac01e1868 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55eac01e1830 <col:60> 'int' lvalue ParmVar 0x55eac01c7858 'i' 'int'
|     `-ImplicitCastExpr 0x55eac01e1940 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55eac01e1920 <col:65> 'int16_t':'short' lvalue ParmVar 0x55eac01c78d0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55eac01c7ba8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55eac01c7ab0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55eac01e2048 <col:36, line:541:5>
|   |-ParenExpr 0x55eac01e1de8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55eac01e1db8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e1b10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e1ae0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e19f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e19d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e1998 <col:23> 'int' lvalue ParmVar 0x55eac01c7ab0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e19b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e1ac0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01e1aa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e1a10 <col:33> 'int' lvalue ParmVar 0x55eac01c7ab0 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e1a88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e1a70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e1a30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55eac01e1a50 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55eac01e1b70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e1b50 <col:60> 'int' 0
|   |   `-CallExpr 0x55eac01e1d18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e1d00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e1ce0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e1d58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e1be0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55eac01e1d70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e1c18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e1d88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e1c50 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55eac01e1da0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e1cc8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e1cb0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e1c70 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55eac01e2038 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55eac01e2020 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55eac01e2008 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55eac01e1fd8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55eac01e1f80 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55eac01e1f50 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55eac01e1f00 <col:61, col:70> 'char const[48]' lvalue ->c 0x55eac01d3ac0
|             |   `-CXXMemberCallExpr 0x55eac01e1ee0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55eac01e1eb0 <col:61> '<bound member function type>' ->xanno 0x55eac01c4768
|             |       `-CXXThisExpr 0x55eac01e1ea0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55eac01e1f68 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55eac01e1f30 <col:74> 'int' lvalue ParmVar 0x55eac01c7ab0 'i' 'int'
|-CXXMethodDecl 0x55eac01c7d78 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55eac01c7c68 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55eac01c7ce0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55eac01c7e28 <col:20>
| `-OptimizeNoneAttr 0x55eac01c7e80 <col:30>
|-CXXMethodDecl 0x55eac01c7fb8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55eac01c7ec0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55eac01e2718 <col:35, line:562:5>
|   |-ParenExpr 0x55eac01e24b8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55eac01e2488 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e21e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e21b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e20c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e20a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e2068 <col:23> 'int' lvalue ParmVar 0x55eac01c7ec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e2088 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e2190 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01e2178 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e20e0 <col:33> 'int' lvalue ParmVar 0x55eac01c7ec0 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e2158 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e2140 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e2100 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55eac01e2120 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55eac01e2240 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e2220 <col:60> 'int' 0
|   |   `-CallExpr 0x55eac01e23e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e23d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e23b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e2428 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e22b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55eac01e2440 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e22e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e2458 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e2320 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55eac01e2470 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e2398 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e2380 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e2340 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55eac01e2708 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55eac01e26f0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55eac01e26d8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55eac01e26a8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55eac01e2650 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55eac01e2620 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55eac01e25d0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55eac01d3ac0
|             |   `-CXXMemberCallExpr 0x55eac01e25b0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55eac01e2580 <col:60> '<bound member function type>' ->xanno 0x55eac01c4768
|             |       `-CXXThisExpr 0x55eac01e2570 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55eac01e2638 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55eac01e2600 <col:73> 'int' lvalue ParmVar 0x55eac01c7ec0 'i' 'int'
|-CXXMethodDecl 0x55eac01c81c8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55eac01c8078 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55eac01c80f0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55eac01e2df8 <col:41, line:577:5>
|   |-ParenExpr 0x55eac01e2b88 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55eac01e2b58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e28b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e2880 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e2790 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e2778 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e2738 <col:23> 'int' lvalue ParmVar 0x55eac01c8078 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e2758 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e2860 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01e2848 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e27b0 <col:33> 'int' lvalue ParmVar 0x55eac01c8078 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e2828 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e2810 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e27d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55eac01e27f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55eac01e2910 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e28f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55eac01e2ab8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e2aa0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e2a80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e2af8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e2980 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55eac01e2b10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e29b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e2b28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e29f0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55eac01e2b40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e2a68 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e2a50 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e2a10 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55eac01e2dd8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55eac01e2d88 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55eac01e2d58 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55eac01e2cf8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55eac01e2cc8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55eac01e2c78 <col:47, col:56> 'char [48]' lvalue ->c 0x55eac01d3ac0
|     |     |   `-CXXMemberCallExpr 0x55eac01e2c58 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55eac01e2c28 <col:47> '<bound member function type>' ->xanno 0x55eac01c4908
|     |     |       `-CXXThisExpr 0x55eac01e2c18 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55eac01e2ce0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55eac01e2ca8 <col:60> 'int' lvalue ParmVar 0x55eac01c8078 'i' 'int'
|     `-ImplicitCastExpr 0x55eac01e2dc0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55eac01e2da0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55eac01c80f0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55eac01c8388 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55eac01c8290 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55eac01e3528 <col:36, line:591:5>
|   |-ParenExpr 0x55eac01e3268 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55eac01e3238 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e2f90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e2f60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e2e70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e2e58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e2e18 <col:23> 'int' lvalue ParmVar 0x55eac01c8290 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e2e38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e2f40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01e2f28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e2e90 <col:33> 'int' lvalue ParmVar 0x55eac01c8290 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e2f08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e2ef0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e2eb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55eac01e2ed0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55eac01e2ff0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e2fd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55eac01e3198 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e3180 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e3160 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e31d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e3060 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55eac01e31f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e3098 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e3208 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e30d0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55eac01e3220 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e3148 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e3130 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e30f0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55eac01e3518 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55eac01e3500 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55eac01e34e8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55eac01e34b8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55eac01e3430 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55eac01e3400 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55eac01e33b0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55eac01d3ac0
|             |   `-CXXMemberCallExpr 0x55eac01e3390 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55eac01e3360 <col:61> '<bound member function type>' ->xanno 0x55eac01c4768
|             |       `-CXXThisExpr 0x55eac01e3350 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55eac01e3418 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55eac01e33e0 <col:74> 'int' lvalue ParmVar 0x55eac01c8290 'i' 'int'
|-CXXMethodDecl 0x55eac01c85d8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55eac01c8448 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55eac01c84c0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55eac01e3c18 <col:42, line:606:5>
|   |-ParenExpr 0x55eac01e39b0 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55eac01e3980 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e36c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e3690 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e35a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e3588 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e3548 <col:23> 'int' lvalue ParmVar 0x55eac01c8448 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e3568 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e3670 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55eac01e3658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e35c0 <col:33> 'int' lvalue ParmVar 0x55eac01c8448 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e3638 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e3620 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e35e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55eac01e3600 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55eac01e3720 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e3700 <col:60> 'int' 0
|   |   `-CallExpr 0x55eac01e38e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e38c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e38a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e3920 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e3790 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55eac01e3938 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e37e0 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e3950 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e3818 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55eac01e3968 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e3890 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e3878 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e3838 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55eac01e3bf8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55eac01e3ba8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55eac01e3b78 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55eac01e3b20 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55eac01e3af0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55eac01e3aa0 <col:48, col:57> 'char [48]' lvalue ->c 0x55eac01d3ac0
|     |     |   `-CXXMemberCallExpr 0x55eac01e3a80 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55eac01e3a50 <col:48> '<bound member function type>' ->xanno 0x55eac01c4908
|     |     |       `-CXXThisExpr 0x55eac01e3a40 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55eac01e3b08 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55eac01e3ad0 <col:61> 'int' lvalue ParmVar 0x55eac01c8448 'i' 'int'
|     `-ImplicitCastExpr 0x55eac01e3be0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55eac01e3bc0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55eac01c84c0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55eac01c8770 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55eac01c86a0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55eac01e4488 <col:33, line:620:5>
|   |-ParenExpr 0x55eac01e4200 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55eac01e41d0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e3e20 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e3df0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e3c90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e3c78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e3c38 <col:23> 'int' lvalue ParmVar 0x55eac01c86a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e3c58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e3dd0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55eac01e3db8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e3cb0 <col:33> 'int' lvalue ParmVar 0x55eac01c86a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e3d98 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e3d80 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e3cd0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55eac01e3d58 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55eac01e3d40 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55eac01e3d08 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55eac01e3e80 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e3e60 <col:79> 'int' 0
|   |   `-CallExpr 0x55eac01e4130 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e4118 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e40f8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e4170 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e3f68 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55eac01e4188 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e3fb0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e41a0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e3fe8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55eac01e41b8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e40e0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e40c8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e4088 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55eac01e4478 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55eac01e4460 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55eac01e4448 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55eac01e4418 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55eac01e4390 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55eac01e4360 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55eac01e4310 <col:67, col:76> 'char const[48]' lvalue ->c 0x55eac01d3ac0
|             |   `-CXXMemberCallExpr 0x55eac01e42f0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55eac01e42c0 <col:67> '<bound member function type>' ->xanno 0x55eac01c4768
|             |       `-CXXThisExpr 0x55eac01e42b0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55eac01e4378 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55eac01e4340 <col:80> 'int' lvalue ParmVar 0x55eac01c86a0 'i' 'int'
|-CXXMethodDecl 0x55eac01c8988 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55eac01c8830 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55eac01c88b0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55eac01e4cb0 <col:45, line:635:5>
|   |-ParenExpr 0x55eac01e49f8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55eac01e49c8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55eac01e4690 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55eac01e4660 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55eac01e4500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55eac01e44e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55eac01e44a8 <col:23> 'int' lvalue ParmVar 0x55eac01c8830 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55eac01e44c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55eac01e4640 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55eac01e4628 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55eac01e4520 <col:33> 'int' lvalue ParmVar 0x55eac01c8830 'i' 'int'
|   |   |     `-BinaryOperator 0x55eac01e4608 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55eac01e45f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55eac01e4540 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55eac01c4b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55eac01e45c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55eac01e45b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55eac01e4578 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55eac01e46f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55eac01e46d0 <col:79> 'int' 0
|   |   `-CallExpr 0x55eac01e4928 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55eac01e4910 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01e48f0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55eac01e4968 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e4760 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55eac01e4980 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55eac01e47a8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55eac01e4998 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55eac01e47e0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55eac01e49b0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55eac01e48d8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55eac01e48c0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55eac01e4878 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55eac01e4c90 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55eac01e4bf8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55eac01e4bc8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55eac01e4b68 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55eac01e4b38 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55eac01e4ae8 <col:54, col:63> 'char [48]' lvalue ->c 0x55eac01d3ac0
|     |     |   `-CXXMemberCallExpr 0x55eac01e4ac8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55eac01e4a98 <col:54> '<bound member function type>' ->xanno 0x55eac01c4908
|     |     |       `-CXXThisExpr 0x55eac01e4a88 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55eac01e4b50 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55eac01e4b18 <col:67> 'int' lvalue ParmVar 0x55eac01c8830 'i' 'int'
|     `-CXXConstCastExpr 0x55eac01e4c60 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55eac01e4c48 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55eac01e4c10 <col:91> 'const void *' lvalue ParmVar 0x55eac01c88b0 'x' 'const void *'
|-CXXMethodDecl 0x55eac01c8a58 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55eac01e4d38 <col:34, line:640:5>
|   `-ReturnStmt 0x55eac01e4d28 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55eac01e4d10 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55eac01e4ce0 <col:16> 'Packet *' lvalue ->_data_packet 0x55eac01d4678
|         `-CXXThisExpr 0x55eac01e4cd0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55eac01ce430 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55eac01ce3a0 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55eac01d5ac8 <col:46> 'bool' true
|-CXXMethodDecl 0x55eac01ce5a8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55eac01ce4e8 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55eac01ce650 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55eac01cee00 <line:660:22> "" ""
| |-EnumConstantDecl 0x55eac01ce750 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01cee70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01ce730 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55eac01ce710 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55eac01be040 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55eac01ce7e0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01cee88 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01ce7c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55eac01ce7a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55eac01be0d0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55eac01ce870 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01ceea0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01ce850 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55eac01ce830 <col:21> 'int' 0
| |-EnumConstantDecl 0x55eac01ce900 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01ceeb8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01ce8e0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55eac01ce8c0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55eac01ce990 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01ceed0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01ce970 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55eac01ce950 <col:21> 'int' 16
| |-EnumConstantDecl 0x55eac01cea20 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01ceee8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01cea00 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55eac01ce9e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55eac01ceab0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01cef00 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01cea90 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55eac01cea70 <col:19> 'int' EnumConstant 0x55eac01ce900 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55eac01ceb40 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01cef18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01ceb20 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55eac01ceb00 <col:19> 'int' EnumConstant 0x55eac01cea20 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55eac01cec10 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01cef30 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01cebf0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55eac01cebd0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55eac01ceb90 <col:23> 'int' EnumConstant 0x55eac01ceb40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55eac01cebb0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55eac01cece0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55eac01cef48 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01cecc0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55eac01ceca0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55eac01cec60 <col:23> 'int' EnumConstant 0x55eac01ceb40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55eac01cec80 <col:40> 'int' 4
| `-EnumConstantDecl 0x55eac01cedb0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55eac01cef60 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac01ced90 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55eac01ced70 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55eac01ced30 <col:23> 'int' EnumConstant 0x55eac01ceb40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55eac01ced50 <col:40> 'int' 8
|-CXXMethodDecl 0x55eac01cefa0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55eac01cf040 <col:68> "" ""
|-CXXMethodDecl 0x55eac01cf0d8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55eac01cf178 <col:45> "" ""
|-CXXMethodDecl 0x55eac01cf210 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55eac01cf2b0 <col:57> "" ""
|-CXXMethodDecl 0x55eac01cf348 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55eac01cf3e8 <col:45> "" ""
|-CXXMethodDecl 0x55eac01cf480 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55eac01cf520 <col:57> "" ""
|-CXXMethodDecl 0x55eac01cf5b0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55eac01cf650 <col:51> "" ""
|-CXXMethodDecl 0x55eac01cf6e0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55eac01cf780 <col:63> "" ""
|-CXXMethodDecl 0x55eac01cf810 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55eac01cf8b0 <col:53> "" ""
|-CXXMethodDecl 0x55eac01cf940 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55eac01cf9e0 <col:65> "" ""
|-CXXMethodDecl 0x55eac01cfaf8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55eac01cfa68 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55eac01cfba0 <col:61> "" ""
|-CXXMethodDecl 0x55eac01cfd38 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55eac01cfc28 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55eac01cfca0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55eac01cfde8 <col:67> "" ""
|-CXXMethodDecl 0x55eac01cff00 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55eac01cfe70 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55eac01cffa8 <col:63> "" ""
|-CXXMethodDecl 0x55eac01d0140 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55eac01d0030 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55eac01d00a8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55eac01d01f0 <col:69> "" ""
|-CXXMethodDecl 0x55eac01d0308 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55eac01d0278 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55eac01d03b0 <col:63> "" ""
|-CXXMethodDecl 0x55eac01d0548 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55eac01d0438 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55eac01d04b0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55eac01d05f8 <col:69> "" ""
|-CXXMethodDecl 0x55eac01d0710 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55eac01d0680 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55eac01d07b8 <col:62> "" ""
|-CXXMethodDecl 0x55eac01d0950 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55eac01d0840 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55eac01d08b8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55eac01d0a00 <col:68> "" ""
|-CXXMethodDecl 0x55eac01d0b18 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55eac01d0a88 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55eac01d0bc0 <col:63> "" ""
|-CXXMethodDecl 0x55eac01d0d58 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55eac01d0c48 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55eac01d0cc0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55eac01d0e08 <col:69> "" ""
|-CXXMethodDecl 0x55eac01d0e98 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55eac01d0f38 <col:64> "" ""
|-CXXMethodDecl 0x55eac01d0fc8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55eac01d1068 <col:52> "" ""
|-CXXMethodDecl 0x55eac01d10f8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55eac01d1198 <col:67> "" ""
|-CXXMethodDecl 0x55eac01d1228 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55eac01d12c8 <col:55> "" ""
|-CXXMethodDecl 0x55eac01d13e0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55eac01d1350 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55eac01d1488 <col:58> "" ""
|-CXXMethodDecl 0x55eac01d1620 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55eac01d1510 <col:33> col:36 'int'
| |-ParmVarDecl 0x55eac01d1588 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55eac01d16d0 <col:62> "" ""
|-CXXMethodDecl 0x55eac01d17e8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55eac01d1758 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55eac01d1890 <col:58> "" ""
|-CXXMethodDecl 0x55eac01d1a28 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55eac01d1918 <col:33> col:36 'int'
| |-ParmVarDecl 0x55eac01d1990 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55eac01d1ad8 <col:62> "" ""
|-CXXMethodDecl 0x55eac01d1bf0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55eac01d1b60 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55eac01d1c98 <col:60> "" ""
|-CXXMethodDecl 0x55eac01d1e30 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55eac01d1d20 <col:34> col:37 'int'
| |-ParmVarDecl 0x55eac01d1d98 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55eac01d1ee0 <col:64> "" ""
|-CXXMethodDecl 0x55eac01d1ff8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55eac01d1f68 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55eac01d20a0 <col:58> "" ""
|-CXXMethodDecl 0x55eac01d2238 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55eac01d2128 <col:33> col:36 'int'
| |-ParmVarDecl 0x55eac01d21a0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55eac01d22e8 <col:62> "" ""
|-CXXMethodDecl 0x55eac01d3550 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55eac01d34c0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55eac01d35f8 <col:59> "" ""
|-CXXMethodDecl 0x55eac01d3790 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55eac01d3680 <col:33> col:36 'int'
| |-ParmVarDecl 0x55eac01d36f8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55eac01d3840 <col:63> "" ""
|-AccessSpecDecl 0x55eac01d38b0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55eac01d38d8 prev 0x55eac01c4640 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55eac01d39d0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55eac01d3ac0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55eac01d3be8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55eac01d3d68 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55eac01d3ee8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55eac01d4068 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55eac01e4eb8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55eac01e5728 <col:11>
| |-CXXDestructorDecl 0x55eac01e4f90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55eac01e50c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55eac01e50c8
| | `-ParmVarDecl 0x55eac01e51d8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55eac01e5278 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55eac01e5278
| | `-ParmVarDecl 0x55eac01e5388 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55eac01e8108 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55eac01e8218 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55eac01e8498 <col:11>
| |   `-ReturnStmt 0x55eac01e8488 <col:11>
| |     `-UnaryOperator 0x55eac01e8470 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55eac01e8460 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55eac01e8288 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55eac01e8288
|   `-ParmVarDecl 0x55eac01e8398 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55eac01d40d0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55eac01d41e8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55eac01d4288 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55eac01d42f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55eac01d4358 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55eac01d43c0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55eac01d4420 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55eac01d44e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55eac01d4540 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55eac01d45a0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55eac01e4dc8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55eac01d4288 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55eac01e5738 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55eac01e5790 <col:12>
| |-CXXConstructorDecl 0x55eac01e53f8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55eac01e53f8
| | `-ParmVarDecl 0x55eac01e5508 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55eac01e55a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55eac01e55a8
| | `-ParmVarDecl 0x55eac01e56b8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55eac01e77f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55eac01d4618 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55eac01d4678 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55eac01d46e0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55eac01d4748 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55eac01d47b0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55eac01d4818 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55eac01d4878 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55eac01d48d8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55eac01d4940 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55eac01d49c8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55eac01d4618 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55eac01e4d60 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55eac01d4878 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55eac01e57a0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55eac01e5800 <col:21, line:755:5>
|-CXXConstructorDecl 0x55eac01d4b68 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55eac01d4aa8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55eac01d4c60 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55eac01d4e48 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55eac01d4d50 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55eac01d5118 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55eac01d4f00 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55eac01d4f78 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55eac01d4ff0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac01d5338 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55eac01d51e8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55eac01d5260 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55eac01d5608 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55eac01d53f8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55eac01d5470 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55eac01d54e8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55eac01d5760 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55eac01d56d0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac01d58a8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55eac01d5818 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55eac01d59a0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac0215168 <../dummy_inc/click/gaprate.hh:45:1, line:124:1> line:45:7 referenced class GapRate definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55eac0215288 <col:1, col:7> col:7 implicit referenced class GapRate
|-AccessSpecDecl 0x55eac0215318 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55eac02153a0 <line:48:5, col:20> col:12 used GapRate 'void ()' inline
|-CXXConstructorDecl 0x55eac02154f0 <line:52:5, col:30> col:12 GapRate 'void (unsigned int)' inline
| `-ParmVarDecl 0x55eac0215460 <col:20, col:29> col:29 r 'unsigned int'
|-CXXMethodDecl 0x55eac02155f0 <line:55:5, col:28> col:21 rate 'unsigned int () const' inline
|-CXXMethodDecl 0x55eac0215738 <line:62:5, col:36> col:17 set_rate 'void (unsigned int)' inline
| `-ParmVarDecl 0x55eac02156a8 <col:26, col:35> col:35 r 'unsigned int'
|-CXXMethodDecl 0x55eac0215948 <line:70:5, col:49> col:10 set_rate 'void (unsigned int, ErrorHandler *)'
| |-ParmVarDecl 0x55eac02157f8 <col:19, col:28> col:28 r 'unsigned int'
| `-ParmVarDecl 0x55eac0215870 <col:31, col:45> col:45 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55eac0215ac8 <line:78:5, col:48> col:17 need_update 'bool (const Timestamp &)' inline
| `-ParmVarDecl 0x55eac0215a08 <col:29, col:46> col:46 ts 'const Timestamp &'
|-CXXMethodDecl 0x55eac0215b90 <line:88:5, col:31> col:22 expiry 'Timestamp () const' inline
|-CXXMethodDecl 0x55eac0215c50 <line:93:5, col:24> col:17 update 'void ()' inline
|-CXXMethodDecl 0x55eac0215d98 <line:100:5, col:38> col:17 update_with 'void (int)' inline
| `-ParmVarDecl 0x55eac0215d08 <col:29, col:33> col:33 delta 'int'
|-CXXMethodDecl 0x55eac0215e60 <line:106:5, col:23> col:17 used reset 'void ()' inline
|-EnumDecl 0x55eac0215f00 <line:109:5, col:28> col:5
| `-EnumConstantDecl 0x55eac0216000 <col:12, col:25> col:12 referenced UGAP_SHIFT 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)'
|   `-ImplicitCastExpr 0x55eac0216050 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac0215fe0 <col:25> 'int' Int: 12
|       `-IntegerLiteral 0x55eac0215fc0 <col:25> 'int' 12
|-EnumDecl 0x55eac0216068 <line:110:5, col:46> col:5
| `-EnumConstantDecl 0x55eac02161c8 <col:12, col:35> col:12 referenced MAX_RATE 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:110:5)'
|   `-ConstantExpr 0x55eac02161a8 <col:23, col:35> 'unsigned int' Int: 4096000000
|     `-BinaryOperator 0x55eac0216188 <col:23, col:35> 'unsigned int' '<<'
|       |-IntegerLiteral 0x55eac0216130 <col:23> 'unsigned int' 1000000
|       `-ImplicitCastExpr 0x55eac0216170 <col:35> 'int' <IntegralCast>
|         `-DeclRefExpr 0x55eac0216150 <col:35> 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)' EnumConstant 0x55eac0216000 'UGAP_SHIFT' 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)'
|-AccessSpecDecl 0x55eac0216218 <line:112:3, col:10> col:3 private
|-FieldDecl 0x55eac0216258 <line:114:5, col:14> col:14 referenced _ugap 'unsigned int'
|-FieldDecl 0x55eac02162c0 <line:115:5, col:9> col:9 referenced _sec_count 'int'
|-FieldDecl 0x55eac0216370 <line:116:5, col:29> col:29 referenced _tv_sec 'Timestamp::seconds_type':'int'
|-FieldDecl 0x55eac02163d8 <line:117:5, col:14> col:14 referenced _rate 'unsigned int'
|-CXXMethodDecl 0x55eac02164d0 <line:122:5, col:46> col:17 used initialize_rate 'void (unsigned int)' inline
| `-ParmVarDecl 0x55eac0216440 <col:33, col:42> col:42 rate 'unsigned int'
|-CXXConstructorDecl 0x55eac0217638 <line:45:7> col:7 implicit constexpr GapRate 'void (const GapRate &)' inline default trivial noexcept-unevaluated 0x55eac0217638
| `-ParmVarDecl 0x55eac0217748 <col:7> col:7 'const GapRate &'
`-CXXConstructorDecl 0x55eac02177e8 <col:7> col:7 implicit constexpr GapRate 'void (GapRate &&)' inline default trivial noexcept-unevaluated 0x55eac02177e8
  `-ParmVarDecl 0x55eac02178f8 <col:7> col:7 'GapRate &&'

Layout: <CGRecordLayout
  LLVMType:%class.GapRate = type { i32, i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.GapRate = type { i32, i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac024c320 <../elements/tcpudp/fastudpsrcip6.hh:61:1, line:114:1> line:61:7 class FastUDPSourceIP6 definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55eac024c478 <col:1, col:7> col:7 implicit referenced class FastUDPSourceIP6
|-FieldDecl 0x55eac024c518 <line:63:3, col:8> col:8 referenced _rate_limited 'bool'
|-FieldDecl 0x55eac024c580 <line:64:3, col:12> col:12 _len 'unsigned int'
|-FieldDecl 0x55eac024c5e0 <line:65:3, col:15> col:15 _ethh 'click_ether'
|-FieldDecl 0x55eac024c640 <line:66:3, col:14> col:14 _sip6addr 'IP6Address'
|-FieldDecl 0x55eac024c6a0 <line:67:3, col:14> col:14 _dip6addr 'IP6Address'
|-FieldDecl 0x55eac024c700 <line:68:3, col:12> col:12 _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55eac024c760 <line:69:3, col:12> col:12 _dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55eac024c7c8 <line:70:3, col:18> col:18 _incr 'unsigned short'
|-FieldDecl 0x55eac024c830 <line:71:3, col:16> col:16 _interval 'unsigned int'
|-FieldDecl 0x55eac024c890 <line:72:3, col:8> col:8 _cksum 'bool'
|-FieldDecl 0x55eac024c8f0 <line:73:3, col:11> col:11 _packet 'Packet *'
|-FieldDecl 0x55eac024c950 <line:74:3, col:19> col:19 referenced _first 'click_jiffies_t':'unsigned int'
|-FieldDecl 0x55eac024c9b0 <line:75:3, col:19> col:19 referenced _last 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55eac024ca48 <line:77:3, col:19> col:8 incr_ports 'void ()'
|-AccessSpecDecl 0x55eac024cae8 <line:79:2, col:8> col:2 public
|-VarDecl 0x55eac024cb28 <line:81:3, col:36> col:25 NO_LIMIT 'const unsigned int' static cinit
| `-IntegerLiteral 0x55eac024cb90 <col:36> 'unsigned int' 4294967295
|-FieldDecl 0x55eac024cc18 <line:83:3, col:11> col:11 _rate 'GapRate'
|-FieldDecl 0x55eac024cc80 <line:84:3, col:12> col:12 referenced _count 'unsigned int'
|-FieldDecl 0x55eac024cce8 <line:85:3, col:12> col:12 _limit 'unsigned int'
|-FieldDecl 0x55eac024cd48 <line:86:3, col:8> col:8 _active 'bool'
|-CXXConstructorDecl 0x55eac024cdd0 <line:88:3, col:20> col:3 FastUDPSourceIP6 'void ()'
|-CXXDestructorDecl 0x55eac024cec0 <line:89:3, col:21> col:3 ~FastUDPSourceIP6 'void ()' noexcept-unevaluated 0x55eac024cec0
| `-Overrides: [ 0x55eac01fb498 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55eac024cff0 <line:91:3, col:63> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55eac01fc908 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55eac024e058 <col:34, col:63>
|   `-ReturnStmt 0x55eac024e048 <col:36, col:43>
|     `-ImplicitCastExpr 0x55eac024e030 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55eac024e008 <col:43> 'const char [17]' lvalue "FastUDPSourceIP6"
|-CXXMethodDecl 0x55eac024d0b8 <line:92:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55eac01fc9d0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55eac024e0b8 <col:34, col:54>
|   `-ReturnStmt 0x55eac024e0a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55eac024e090 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55eac024e070 <col:43> 'const char []' lvalue Var 0x55eac01fcb70 'PORTS_0_1' 'const char []'
|-CXXMethodDecl 0x55eac024d180 <line:93:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55eac01fcd98 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55eac024e118 <col:34, col:49>
|   `-ReturnStmt 0x55eac024e108 <col:36, col:43>
|     `-ImplicitCastExpr 0x55eac024e0f0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55eac024e0d0 <col:43> 'const char []' lvalue Var 0x55eac01fcf68 'PULL' 'const char []'
|-CXXMethodDecl 0x55eac024d450 <line:95:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55eac01fe190 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55eac024d300 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55eac024d378 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55eac024d5a8 <line:96:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55eac01fe3e0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55eac024d510 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x55eac024d6f0 <line:97:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x55eac01febf8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x55eac024d660 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x55eac024d840 <line:98:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x55eac01fb908 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55eac024d7b0 <col:16> col:19 'int'
|-CXXMethodDecl 0x55eac024d908 <line:100:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55eac01fe260 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55eac024d9c8 <line:101:3, col:14> col:8 reset 'void ()'
|-CXXMethodDecl 0x55eac024da90 <line:102:3, col:37> col:12 count 'unsigned int ()'
| `-CompoundStmt 0x55eac024e198 <col:20, col:37>
|   `-ReturnStmt 0x55eac024e188 <col:22, col:29>
|     `-ImplicitCastExpr 0x55eac024e170 <col:29> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55eac024e140 <col:29> 'unsigned int' lvalue ->_count 0x55eac024cc80
|         `-CXXThisExpr 0x55eac024e130 <col:29> 'FastUDPSourceIP6 *' implicit this
|-CXXMethodDecl 0x55eac024db50 <line:103:3, col:44> col:19 first 'click_jiffies_t ()'
| `-CompoundStmt 0x55eac024e218 <col:27, col:44>
|   `-ReturnStmt 0x55eac024e208 <col:29, col:36>
|     `-ImplicitCastExpr 0x55eac024e1f0 <col:36> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55eac024e1c0 <col:36> 'click_jiffies_t':'unsigned int' lvalue ->_first 0x55eac024c950
|         `-CXXThisExpr 0x55eac024e1b0 <col:36> 'FastUDPSourceIP6 *' implicit this
|-CXXMethodDecl 0x55eac024dc10 <line:104:3, col:42> col:19 last 'click_jiffies_t ()'
| `-CompoundStmt 0x55eac024e298 <col:26, col:42>
|   `-ReturnStmt 0x55eac024e288 <col:28, col:35>
|     `-ImplicitCastExpr 0x55eac024e270 <col:35> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55eac024e240 <col:35> 'click_jiffies_t':'unsigned int' lvalue ->_last 0x55eac024c9b0
|         `-CXXThisExpr 0x55eac024e230 <col:35> 'FastUDPSourceIP6 *' implicit this
|-CXXConstructorDecl 0x55eac024dcd8 <line:61:7> col:7 implicit FastUDPSourceIP6 'void (const FastUDPSourceIP6 &)' inline default_delete noexcept-unevaluated 0x55eac024dcd8
| `-ParmVarDecl 0x55eac024dde8 <col:7> col:7 'const FastUDPSourceIP6 &'
`-CXXMethodDecl 0x55eac024de88 <col:7> col:7 implicit operator= 'FastUDPSourceIP6 &(const FastUDPSourceIP6 &)' inline default_delete noexcept-unevaluated 0x55eac024de88
  `-ParmVarDecl 0x55eac024df98 <col:7> col:7 'const FastUDPSourceIP6 &'

Layout: <CGRecordLayout
  LLVMType:%class.FastUDPSourceIP6 = type <{ %class.Element.base, i8, [3 x i8], i32, %struct.click_ether, [2 x i8], %class.IP6Address, %class.IP6Address, i16, i16, i16, [2 x i8], i32, i8, [7 x i8], %class.Packet*, i32, i32, %class.GapRate, i32, i32, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.FastUDPSourceIP6.base = type <{ %class.Element.base, i8, [3 x i8], i32, %struct.click_ether, [2 x i8], %class.IP6Address, %class.IP6Address, i16, i16, i16, [2 x i8], i32, i8, [7 x i8], %class.Packet*, i32, i32, %class.GapRate, i32, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabffcf810 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55eabffcf928 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55eabffcf9c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55eabffcfa28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55eabffcfa88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55eabffcfb38 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabffcfe40 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eabffcff58 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55eabffd0000 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55eabffd0068 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55eabffd00f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55eabffd2690 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55eabffd2ac8 <col:12>
|-CXXConstructorDecl 0x55eabffd2798 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eabffd28a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55eabffd0000 'data' 'const char *'
| | `-ImplicitCastExpr 0x55eabffd6f30 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55eabffd6f00 <col:12> 'const char *const' lvalue .data 0x55eabffd0000
| |     `-DeclRefExpr 0x55eabffd6ee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffd28a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55eabffd0068 'length' 'int'
| | `-ImplicitCastExpr 0x55eabffd6fc0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55eabffd6f90 <col:12> 'const int' lvalue .length 0x55eabffd0068
| |     `-DeclRefExpr 0x55eabffd6f70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffd28a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55eabffd00f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55eabffd7050 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55eabffd7020 <col:12> 'String::memo_t *const' lvalue .memo 0x55eabffd00f8
| |     `-DeclRefExpr 0x55eabffd7000 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffd28a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55eabffd70a8 <col:12>
|-CXXConstructorDecl 0x55eabffd2948 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55eabffd2948
| `-ParmVarDecl 0x55eabffd2a58 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55eabffdbe30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55eabffe5828 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eabffe5938 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55eabffe5e70 <col:12>
|   |-BinaryOperator 0x55eabffe5c88 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55eabffe5c40 <col:12> 'const char *' lvalue ->data 0x55eabffd0000
|   | | `-CXXThisExpr 0x55eabffe5c30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55eabffe5c70 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55eabffe5c00 <col:12> 'const char *const' lvalue .data 0x55eabffd0000
|   |     `-DeclRefExpr 0x55eabffe5be0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffe5938 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55eabffe5d50 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55eabffe5d08 <col:12> 'int' lvalue ->length 0x55eabffd0068
|   | | `-CXXThisExpr 0x55eabffe5cf8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55eabffe5d38 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55eabffe5cc8 <col:12> 'const int' lvalue .length 0x55eabffd0068
|   |     `-DeclRefExpr 0x55eabffe5ca8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffe5938 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55eabffe5e18 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55eabffe5dd0 <col:12> 'String::memo_t *' lvalue ->memo 0x55eabffd00f8
|   | | `-CXXThisExpr 0x55eabffe5dc0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55eabffe5e00 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55eabffe5d90 <col:12> 'String::memo_t *const' lvalue .memo 0x55eabffd00f8
|   |     `-DeclRefExpr 0x55eabffe5d70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffe5938 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55eabffe5e60 <col:12>
|     `-UnaryOperator 0x55eabffe5e48 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eabffe5e38 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55eabffe59a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55eabffe59a8
  `-ParmVarDecl 0x55eabffe5ab8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabffc5460 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55eabffc5578 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55eabffc5608 <col:16, col:22> col:16 public
|-TypedefDecl 0x55eabffc5648 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55eabfc93dc0 'const char *'
|   `-QualType 0x55eabfc93311 'const char' const
|     `-BuiltinType 0x55eabfc93310 'char'
|-TypedefDecl 0x55eabffc56d0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55eabffc56a0 'String::const_iterator' sugar
|   |-Typedef 0x55eabffc5648 'const_iterator'
|   `-PointerType 0x55eabfc93dc0 'const char *'
|     `-QualType 0x55eabfc93311 'const char' const
|       `-BuiltinType 0x55eabfc93310 'char'
|-TypedefDecl 0x55eabffc5840 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55eabffc57b0 'int (String::*)() const'
|   |-RecordType 0x55eabffc54f0 'String'
|   | `-CXXRecord 0x55eabffc5460 'String'
|   `-ParenType 0x55eabffc5750 'int () const' sugar
|     `-FunctionProtoType 0x55eabff9b330 'int () const' const cdecl
|       `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eabffc58a8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55eabfde9a90 'int64_t' sugar
|   |-Typedef 0x55eabfcfc2d0 'int64_t'
|   `-TypedefType 0x55eabfcd54d0 '__int64_t' sugar
|     |-Typedef 0x55eabfcd50a8 '__int64_t'
|     `-BuiltinType 0x55eabfc93390 'long'
|-TypedefDecl 0x55eabffc5910 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55eabfde99b0 'uint64_t' sugar
|   |-Typedef 0x55eabfcfc470 'uint64_t'
|   `-TypedefType 0x55eabfcd5560 '__uint64_t' sugar
|     |-Typedef 0x55eabfcd5118 '__uint64_t'
|     `-BuiltinType 0x55eabfc93430 'unsigned long'
|-TypedefDecl 0x55eabffc59a0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55eabffc5970 'String::intmax_t' sugar
|   |-Typedef 0x55eabffc58a8 'intmax_t'
|   `-TypedefType 0x55eabfde9a90 'int64_t' sugar
|     |-Typedef 0x55eabfcfc2d0 'int64_t'
|     `-TypedefType 0x55eabfcd54d0 '__int64_t' sugar
|       |-Typedef 0x55eabfcd50a8 '__int64_t'
|       `-BuiltinType 0x55eabfc93390 'long'
|-TypedefDecl 0x55eabffc5a30 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55eabffc5a00 'String::uintmax_t' sugar
|   |-Typedef 0x55eabffc5910 'uintmax_t'
|   `-TypedefType 0x55eabfde99b0 'uint64_t' sugar
|     |-Typedef 0x55eabfcfc470 'uint64_t'
|     `-TypedefType 0x55eabfcd5560 '__uint64_t' sugar
|       |-Typedef 0x55eabfcd5118 '__uint64_t'
|       `-BuiltinType 0x55eabfc93430 'unsigned long'
|-CXXConstructorDecl 0x55eabffc5af0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55eabffc5c98 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55eabffc5bd8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55eabffc5e90 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55eabffc5d88 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55eabffc5fe8 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55eabffc5f58 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55eabffc6208 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55eabffc60b0 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55eabffc6130 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55eabffc6428 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55eabffc62d8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55eabffc6358 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55eabffc6648 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55eabffc64f8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55eabffc6578 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55eabffc6868 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55eabffc6718 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55eabffc6798 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55eabffc69f8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55eabffc6930 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55eabffc6b78 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55eabffc6ab8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55eabffc6d08 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55eabffc6c40 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55eabffc6e60 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55eabffc6dd0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55eabffc6fb8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55eabffc6f28 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55eabffc7110 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55eabffc7080 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55eabffc7298 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55eabffc71d8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55eabffc7428 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55eabffc7360 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55eabffc75b8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55eabffc74f0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55eabffc7748 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55eabffc7680 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55eabffc7840 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55eabffc7968 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55eabffc7ae8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55eabffc7a20 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55eabffc7c38 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55eabffc7ba8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55eabffc7ce0 <col:63> "" ""
|-CXXMethodDecl 0x55eabffc7e28 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55eabffc7d68 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55eabffc8038 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55eabffc7ee8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55eabffc7f68 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55eabffc8258 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55eabffc8100 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55eabffc8180 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55eabffc8538 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55eabffc8318 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55eabffc8398 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55eabffd2160 <col:55> 'int' 10
| `-ParmVarDecl 0x55eabffc8410 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55eabffd2180 <col:76> 'bool' true
|-CXXMethodDecl 0x55eabffc8818 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55eabffc8600 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55eabffc8680 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55eabffd2190 <col:56> 'int' 10
| `-ParmVarDecl 0x55eabffc86f8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55eabffd21b0 <col:77> 'bool' true
|-CXXMethodDecl 0x55eabffc8920 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55eabffc89e8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55eabffc8ab0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55eabffc8b50 <col:20>
| `-OptimizeNoneAttr 0x55eabffc8ba8 <col:30>
|-CXXConversionDecl 0x55eabffc8c98 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55eabffc8d68 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55eabffc8e28 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55eabffc8f18 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55eabffc8fd8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55eabffc9158 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55eabffc9090 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55eabffc92a8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55eabffc9218 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55eabffc9398 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55eabffc9458 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55eabffc96a8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55eabffc9510 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55eabffc9590 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55eabffc9908 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55eabffc9770 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55eabffc97f0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55eabffc99d8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55eabffc9be8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55eabffc9a90 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55eabffc9b10 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55eabffcaeb0 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55eabffc9cb0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55eabffc9d30 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55eabffcb038 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55eabffcaf78 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55eabffcb128 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55eabffcb298 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55eabffcb1d8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55eabffcb4a8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55eabffcb358 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55eabffcb3d8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55eabffcb6c0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55eabffcb568 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55eabffcb5e0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55eabffcb850 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55eabffcb780 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55eabffcba70 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55eabffcb910 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55eabffcb990 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55eabffcbbc0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55eabffcbb30 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55eabffcbd98 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55eabffcbc80 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55eabffcbd00 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55eabffcbee8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55eabffcbe58 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55eabffcc100 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55eabffcbfa0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55eabffcc020 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55eabffd21c0 <col:39> 'int' 0
|-CXXMethodDecl 0x55eabffcc320 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55eabffcc1c0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55eabffcc240 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55eabffd21e0 <col:48> 'int' 0
|-CXXMethodDecl 0x55eabffcc500 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55eabffcc3e0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55eabffcc460 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55eabffd2200 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55eabffcc5d0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55eabffcc690 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55eabffcc750 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55eabffcc810 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55eabffcc8d0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55eabffcca78 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55eabffcc980 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55eabffccbf8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55eabffccb30 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55eabffccd78 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55eabffcccb8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55eabffccef8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55eabffcce30 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55eabffcd040 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55eabffccfb0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55eabffcd190 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55eabffcd100 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55eabffcd368 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55eabffcd250 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55eabffcd2d0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55eabffcd548 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55eabffcd430 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55eabffcd4b0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55eabffcd698 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55eabffcd608 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55eabffcd8a8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55eabffcd758 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55eabffcd7d8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55eabffcda08 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55eabffcd970 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55eabffcdb60 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55eabffcdac8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55eabffcdc08 <col:57> "" ""
|-CXXMethodDecl 0x55eabffcdd18 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55eabffcdc88 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55eabffcde68 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55eabffcddd8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55eabffcdfe8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55eabffcdf20 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55eabffce0b0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55eabffce170 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55eabffce230 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55eabffce2d0 <col:49> "" ""
|-CXXMethodDecl 0x55eabffce360 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55eabffce420 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55eabffce510 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55eabffce5d8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55eabffce698 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55eabffce758 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55eabffce850 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55eabffce918 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55eabffce9e0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55eabffcebb8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55eabffcea98 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55eabffceb18 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55eabffcede0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55eabffcec80 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55eabffced00 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55eabffcf780 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55eabffcf7e8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55eabffcf810 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55eabffcf928 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55eabffcf9c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55eabffcfa28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55eabffcfa88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55eabffcfb38 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55eabffcfba0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55eabffcfdd8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55eabffcfe28 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eabffcfdb8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55eabffcfcc8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55eabffcfc70 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55eabffcfcb0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55eabffcfc90 <col:32> 'int' 8
|-CXXRecordDecl 0x55eabffcfe40 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55eabffcff58 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55eabffd0000 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55eabffd0068 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55eabffd00f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55eabffd2690 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55eabffd2ac8 <col:12>
| |-CXXConstructorDecl 0x55eabffd2798 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55eabffd28a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55eabffd0000 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55eabffd6f30 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55eabffd6f00 <col:12> 'const char *const' lvalue .data 0x55eabffd0000
| | |     `-DeclRefExpr 0x55eabffd6ee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffd28a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55eabffd0068 'length' 'int'
| | | `-ImplicitCastExpr 0x55eabffd6fc0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55eabffd6f90 <col:12> 'const int' lvalue .length 0x55eabffd0068
| | |     `-DeclRefExpr 0x55eabffd6f70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffd28a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55eabffd00f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55eabffd7050 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55eabffd7020 <col:12> 'String::memo_t *const' lvalue .memo 0x55eabffd00f8
| | |     `-DeclRefExpr 0x55eabffd7000 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffd28a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55eabffd70a8 <col:12>
| |-CXXConstructorDecl 0x55eabffd2948 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55eabffd2948
| | `-ParmVarDecl 0x55eabffd2a58 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55eabffdbe30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55eabffe5828 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55eabffe5938 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55eabffe5e70 <col:12>
| |   |-BinaryOperator 0x55eabffe5c88 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55eabffe5c40 <col:12> 'const char *' lvalue ->data 0x55eabffd0000
| |   | | `-CXXThisExpr 0x55eabffe5c30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55eabffe5c70 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55eabffe5c00 <col:12> 'const char *const' lvalue .data 0x55eabffd0000
| |   |     `-DeclRefExpr 0x55eabffe5be0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffe5938 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55eabffe5d50 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55eabffe5d08 <col:12> 'int' lvalue ->length 0x55eabffd0068
| |   | | `-CXXThisExpr 0x55eabffe5cf8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55eabffe5d38 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55eabffe5cc8 <col:12> 'const int' lvalue .length 0x55eabffd0068
| |   |     `-DeclRefExpr 0x55eabffe5ca8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffe5938 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55eabffe5e18 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55eabffe5dd0 <col:12> 'String::memo_t *' lvalue ->memo 0x55eabffd00f8
| |   | | `-CXXThisExpr 0x55eabffe5dc0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55eabffe5e00 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55eabffe5d90 <col:12> 'String::memo_t *const' lvalue .memo 0x55eabffd00f8
| |   |     `-DeclRefExpr 0x55eabffe5d70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55eabffe5938 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55eabffe5e60 <col:12>
| |     `-UnaryOperator 0x55eabffe5e48 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55eabffe5e38 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55eabffe59a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55eabffe59a8
|   `-ParmVarDecl 0x55eabffe5ab8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55eabffd0170 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55eabffd03b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55eabffd01d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55eabffd0258 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55eabffd02d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55eabffd2650 <col:79, line:261:5>
|   |-BinaryOperator 0x55eabffd22c8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55eabffd2260 <col:2, col:5> 'const char *' lvalue .data 0x55eabffd0000
|   | | `-MemberExpr 0x55eabffd2230 <col:2> 'String::rep_t' lvalue ->_r 0x55eabffd0170
|   | |   `-CXXThisExpr 0x55eabffd2220 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55eabffd22b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55eabffd2290 <col:12> 'const char *' lvalue ParmVar 0x55eabffd01d8 'data' 'const char *'
|   |-BinaryOperator 0x55eabffd2390 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55eabffd2328 <col:2, col:5> 'int' lvalue .length 0x55eabffd0068
|   | | `-MemberExpr 0x55eabffd22f8 <col:2> 'String::rep_t' lvalue ->_r 0x55eabffd0170
|   | |   `-CXXThisExpr 0x55eabffd22e8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55eabffd2378 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55eabffd2358 <col:14> 'int' lvalue ParmVar 0x55eabffd0258 'length' 'int'
|   `-IfStmt 0x55eabffd2638 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55eabffd24b0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55eabffd2498 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55eabffd2478 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55eabffd2458 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55eabffd23f0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55eabffd00f8
|     |       | `-MemberExpr 0x55eabffd23c0 <col:7> 'String::rep_t' lvalue ->_r 0x55eabffd0170
|     |       |   `-CXXThisExpr 0x55eabffd23b0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55eabffd2440 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55eabffd2420 <col:17> 'String::memo_t *' lvalue ParmVar 0x55eabffd02d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55eabffd2610 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55eabffd25f8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eabffd2500 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55eabffbe0d8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55eabffd2568 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55eabffcf9c8
|         `-ImplicitCastExpr 0x55eabffd2550 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55eabffd2530 <col:27> 'String::memo_t *' lvalue ParmVar 0x55eabffd02d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55eabffd0668 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55eabffd0488 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55eabffd0508 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55eabffd0580 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55eabffd0170 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55eabffd2ad8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55eabffd2c68 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55eabffd2bd0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55eabffd2b40 <col:2> '<bound member function type>' ->assign_memo 0x55eabffd03b8
|     | `-ImplicitCastExpr 0x55eabffd2c08 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55eabffd2b30 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55eabffd2c20 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55eabffd2b70 <col:14> 'const char *' lvalue ParmVar 0x55eabffd0488 'data' 'const char *'
|     |-ImplicitCastExpr 0x55eabffd2c38 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55eabffd2b90 <col:20> 'int' lvalue ParmVar 0x55eabffd0508 'length' 'int'
|     `-ImplicitCastExpr 0x55eabffd2c50 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55eabffd2bb0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55eabffd0580 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55eabffd07f8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55eabffd0738 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55eabffd2ec0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55eabffd2e40 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55eabffd2c90 <col:2> '<bound member function type>' ->assign_memo 0x55eabffd03b8
|     | `-CXXThisExpr 0x55eabffd2c80 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55eabffd2e78 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55eabffd2d10 <col:14, col:19> 'const char *' lvalue .data 0x55eabffd0000
|     |   `-MemberExpr 0x55eabffd2ce0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55eabffd0170
|     |     `-DeclRefExpr 0x55eabffd2cc0 <col:14> 'const String' lvalue ParmVar 0x55eabffd0738 'x' 'const String &'
|     |-ImplicitCastExpr 0x55eabffd2e90 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55eabffd2d90 <col:25, col:30> 'int' lvalue .length 0x55eabffd0068
|     |   `-MemberExpr 0x55eabffd2d60 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55eabffd0170
|     |     `-DeclRefExpr 0x55eabffd2d40 <col:25> 'const String' lvalue ParmVar 0x55eabffd0738 'x' 'const String &'
|     `-ImplicitCastExpr 0x55eabffd2ea8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55eabffd2e10 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55eabffd00f8
|         `-MemberExpr 0x55eabffd2de0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55eabffd0170
|           `-DeclRefExpr 0x55eabffd2dc0 <col:38> 'const String' lvalue ParmVar 0x55eabffd0738 'x' 'const String &'
|-CXXMethodDecl 0x55eabffd08c0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55eabffd5760 <col:31, line:278:5>
|   `-IfStmt 0x55eabffd5748 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55eabffd2f60 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55eabffd2f48 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55eabffd2f18 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55eabffd00f8
|     |     `-MemberExpr 0x55eabffd2ee8 <col:6> 'String::rep_t' lvalue ->_r 0x55eabffd0170
|     |       `-CXXThisExpr 0x55eabffd2ed8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55eabffd5720 <col:15, line:277:2>
|       |-ParenExpr 0x55eabffd3410 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55eabffd33e0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55eabffd3070 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55eabffd3058 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55eabffd3040 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55eabffd3000 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55eabffcf9c8
|       |   |       `-ImplicitCastExpr 0x55eabffd2fe8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55eabffd2fb8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55eabffd00f8
|       |   |           `-MemberExpr 0x55eabffd2f88 <col:27> 'String::rep_t' lvalue ->_r 0x55eabffd0170
|       |   |             `-CXXThisExpr 0x55eabffd2f78 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55eabffd30d0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55eabffd30b0 <col:54> 'int' 0
|       |   `-CallExpr 0x55eabffd3340 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55eabffd3328 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55eabffd32a8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55eabffd3380 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55eabffd31b8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55eabffd3398 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55eabffd31e8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55eabffd33b0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55eabffd3220 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55eabffd33c8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55eabffd3290 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55eabffd3278 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55eabffd3240 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55eabffd5640 <line:274:6, line:275:22>
|       | |-CallExpr 0x55eabffd3620 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55eabffd3608 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55eabffd3580 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55eabffc2180 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55eabffd3550 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55eabffcf9c8
|       | |   `-ImplicitCastExpr 0x55eabffd3538 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55eabffd3508 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55eabffd00f8
|       | |       `-MemberExpr 0x55eabffd34d8 <col:40> 'String::rep_t' lvalue ->_r 0x55eabffd0170
|       | |         `-CXXThisExpr 0x55eabffd34c8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55eabffd5600 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55eabffd3708 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55eabffd3648 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55eabffd1598 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55eabffd5628 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55eabffd36a8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55eabffd00f8
|       |       `-MemberExpr 0x55eabffd3678 <col:15> 'String::rep_t' lvalue ->_r 0x55eabffd0170
|       |         `-CXXThisExpr 0x55eabffd3668 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55eabffd5700 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55eabffd5698 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55eabffd00f8
|         | `-MemberExpr 0x55eabffd5668 <col:6> 'String::rep_t' lvalue ->_r 0x55eabffd0170
|         |   `-CXXThisExpr 0x55eabffd5658 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55eabffd56e8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55eabffd56c8 <col:16> 'int' 0
|-CXXMethodDecl 0x55eabffd0b58 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55eabffd0978 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55eabffd09f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55eabffd0a70 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55eabffd0c30 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55eabffd0e80 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55eabffd0ce8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55eabffd0d68 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55eabffd0de0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55eabffd1068 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55eabffd0f50 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55eabffd0fd0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55eabffd1168 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55eabffd5838 <col:41, line:286:5>
|   `-ReturnStmt 0x55eabffd5828 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55eabffd57f8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55eabffd57c0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55eabffd57a8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55eabffd5788 <col:46> 'int' 1
|-CXXMethodDecl 0x55eabffd1408 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55eabffd1220 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55eabffd12a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55eabffd1320 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55eabffd1598 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55eabffd14d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55eabffd1668 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55eabffd1838 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55eabffd1720 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55eabffd17a0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55eabffd18f8 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55eabffd19c0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55eabffd1ac8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55eabffd1b40 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55eabffd1bb8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55eabffd1c20 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55eabffd1d20 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55eabffd1d70 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eabffd1d00 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55eabffd1ce0 <col:22> 'int' 14
|-CXXMethodDecl 0x55eabffd1f88 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55eabffd1da0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55eabffd1e20 <col:38> col:41 'int'
| `-ParmVarDecl 0x55eabffd1ea0 <col:43> col:46 'int'
|-FriendDecl 0x55eabffd2090 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55eabffd2120 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55eac0094b50 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55eac0094d28 prev 0x55eac0094b50 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55eac0094db8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55eac0094de0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac027d0a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55eac027d050 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55eac027d030 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55eac0094ff8 'type'
|     `-SubstTemplateTypeParmType 0x55eac0094fc0 'String' sugar
|       |-TemplateTypeParmType 0x55eabff8a7b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff8a758 'T'
|       `-RecordType 0x55eabffc54f0 'String'
|         `-CXXRecord 0x55eabffc5460 'String'
|-TypedefDecl 0x55eac027d158 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55eac027d120 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55eac027d100 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55eac027d0a0 'type'
|     `-ElaboratedType 0x55eac027d050 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55eac027d030 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55eac0094ff8 'type'
|         `-SubstTemplateTypeParmType 0x55eac0094fc0 'String' sugar
|           |-TemplateTypeParmType 0x55eabff8a7b0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55eabff8a758 'T'
|           `-RecordType 0x55eabffc54f0 'String'
|             `-CXXRecord 0x55eabffc5460 'String'
|-CXXMethodDecl 0x55eac027d2d8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55eac027d1e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55eac027d3c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55eac027d4a8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55eac027d4a8
|-CXXMethodDecl 0x55eac027d778 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55eac027d680 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55eac027d9b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55eac027d830 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55eac027d8a8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55eac027db88 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55eac027da78 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55eac027daf0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55eac027dce8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55eac027ddb8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55eac027e008 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55eac027de78 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55eac027def0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55eac027e268 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55eac027e0d8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55eac027e150 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55eac027e428 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55eac027e338 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55eac027e5e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55eac027e4f0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55eac027e6a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55eac027e750 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55eac027e988 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55eac027e800 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55eac027e878 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55eac027ec28 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55eac027eb30 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55eac027ecf0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55eac027ed40 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55eac027ed90 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55eac01fde00 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55eac00935b8 prev 0x55eac01fde00 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55eac0094ac0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55eac0094a70 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55eac0094a50 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55eac0094900 'type'
|     `-SubstTemplateTypeParmType 0x55eac0094790 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55eabff612a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55eabff61248 'F'
|       `-RecordType 0x55eac00943f0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55eac0094310 'typed_array_memory'
|-FieldDecl 0x55eac027ede0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55eac027ee30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55eac027ee68 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55eac0093650 'String' sugar
|   |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55eabff984c8 'T'
|   `-RecordType 0x55eabffc54f0 'String'
|     `-CXXRecord 0x55eabffc5460 'String'
|-TypedefDecl 0x55eac027eef8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55eac027eec0 'String &'
|   `-SubstTemplateTypeParmType 0x55eac0093650 'String' sugar
|     |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55eabff984c8 'T'
|     `-RecordType 0x55eabffc54f0 'String'
|       `-CXXRecord 0x55eabffc5460 'String'
|-TypedefDecl 0x55eac027ef88 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55eac027ef50 'const String &'
|   `-QualType 0x55eac0093651 'const String' const
|     `-SubstTemplateTypeParmType 0x55eac0093650 'String' sugar
|       |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff984c8 'T'
|       `-RecordType 0x55eabffc54f0 'String'
|         `-CXXRecord 0x55eabffc5460 'String'
|-TypedefDecl 0x55eac027f018 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55eac027efe0 'String *'
|   `-SubstTemplateTypeParmType 0x55eac0093650 'String' sugar
|     |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55eabff984c8 'T'
|     `-RecordType 0x55eabffc54f0 'String'
|       `-CXXRecord 0x55eabffc5460 'String'
|-TypedefDecl 0x55eac027f0a8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55eac027f070 'const String *'
|   `-QualType 0x55eac0093651 'const String' const
|     `-SubstTemplateTypeParmType 0x55eac0093650 'String' sugar
|       |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff984c8 'T'
|       `-RecordType 0x55eabffc54f0 'String'
|         `-CXXRecord 0x55eabffc5460 'String'
|-TypedefDecl 0x55eac027fd00 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55eac027fcb0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55eac027fc90 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55eac027fbc8 'type'
|     `-LValueReferenceType 0x55eac027fb90 'const String &'
|       `-QualType 0x55eac027f931 'const String' const
|         `-SubstTemplateTypeParmType 0x55eac027f930 'String' sugar
|           |-TemplateTypeParmType 0x55eabff6b810 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55eabff6b7b8 'T'
|           `-RecordType 0x55eabffc54f0 'String'
|             `-CXXRecord 0x55eabffc5460 'String'
|-TypedefDecl 0x55eac027fd68 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55eac027ef50 'const String &'
|   `-QualType 0x55eac0093651 'const String' const
|     `-SubstTemplateTypeParmType 0x55eac0093650 'String' sugar
|       |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff984c8 'T'
|       `-RecordType 0x55eabffc54f0 'String'
|         `-CXXRecord 0x55eabffc5460 'String'
|-TypedefDecl 0x55eac027fdc0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac027fe28 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55eac027efe0 'String *'
|   `-SubstTemplateTypeParmType 0x55eac0093650 'String' sugar
|     |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55eabff984c8 'T'
|     `-RecordType 0x55eabffc54f0 'String'
|       `-CXXRecord 0x55eabffc5460 'String'
|-TypedefDecl 0x55eac027fe90 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55eac027f070 'const String *'
|   `-QualType 0x55eac0093651 'const String' const
|     `-SubstTemplateTypeParmType 0x55eac0093650 'String' sugar
|       |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff984c8 'T'
|       `-RecordType 0x55eabffc54f0 'String'
|         `-CXXRecord 0x55eabffc5460 'String'
|-EnumDecl 0x55eac027fee8 <line:134:5> col:5
| `-EnumConstantDecl 0x55eac027ffe0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55eac027ffc0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55eabff996e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55eabff996c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55eabff996a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55eac0280068 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55eac02802f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55eac0280120 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55eac02801c0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55eac0280588 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55eac0280470 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55eac0280848 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55eac0280730 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55eac0280b60 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55eac0280a40 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55eac0280e70 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55eac0280d50 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55eac0281160 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55eac0280fa8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55eac0281020 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55eac0281288 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55eac0281338 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac0281390 <col:30> Inherited
|-CXXMethodDecl 0x55eac02813d8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55eac0281488 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac02814e0 <col:30> Inherited
|-CXXMethodDecl 0x55eac02815a8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55eac0281658 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac02816b0 <col:30> Inherited
|-CXXMethodDecl 0x55eac02816f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55eac02817a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac0281800 <col:30> Inherited
|-CXXMethodDecl 0x55eac0281848 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55eac02818f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac0281950 <col:30> Inherited
|-CXXMethodDecl 0x55eac0281998 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55eac0281a48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac0281aa0 <col:30> Inherited
|-CXXMethodDecl 0x55eac0281ac8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55eac0281b78 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55eac0281c28 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55eac0281de8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55eac0281cd8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55eac0281d50 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55eac0281f38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55eac0281ea8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac02820e8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55eac0281ff0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55eac02821a0 <col:20>
| `-OptimizeNoneAttr 0x55eac02821f8 <col:30>
|-CXXMethodDecl 0x55eac0282318 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55eac0282220 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55eac02823d0 <col:20>
| `-OptimizeNoneAttr 0x55eac0282428 <col:30>
|-CXXMethodDecl 0x55eac02824e0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55eac0282450 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac0282628 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55eac0282598 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac0282758 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55eac0282858 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55eac0282928 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55eac02829f8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55eac0282b38 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55eac0282aa8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac0282c80 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55eac0282bf0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac0282dc8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55eac0282d38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55eac0282e80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55eac0282f80 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55eac0282ef0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55eac0283038 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55eac02830f8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55eac02831f8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55eac0283378 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55eac02832b8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55eac0283b38 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55eac0283430 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55eac0283a98 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55eac0283998 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55eac0283c18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55eac0283d68 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55eac0283cd8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55eac0283e20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55eac0284068 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55eac0283ee0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55eac0283f58 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55eac02841f8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55eac0284138 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55eac0284408 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55eac02842c0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55eac0284338 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55eac02844c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55eac0284728 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55eac0284630 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55eac02847f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55eac02847f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac02fe138 prev 0x55eac02913b8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55eac02fe230 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55eac02fe2c0 <col:22, col:28> col:22 public
|-EnumDecl 0x55eac02fe2e8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55eac02fe408 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55eac02fe3e8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55eac02fe3d0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55eac02fe3b0 <col:14> 'int' 999
| |-EnumConstantDecl 0x55eac02fe4b0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55eac02fe490 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55eac02fe478 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55eac02fe458 <col:14> 'int' 1
| |-EnumConstantDecl 0x55eac02fe540 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55eac02fe520 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55eac02fe500 <col:17> 'int' 0
| |-EnumConstantDecl 0x55eac02fe5d0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55eac02fe5b0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55eac02fe590 <col:13> 'int' 1
| |-EnumConstantDecl 0x55eac02fe660 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55eac02fe640 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55eac02fe620 <col:16> 'int' 2
| |-EnumConstantDecl 0x55eac02fe6f0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55eac02fe6d0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55eac02fe6b0 <col:13> 'int' 3
| |-EnumConstantDecl 0x55eac02fe780 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55eac02fe760 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55eac02fe740 <col:15> 'int' 4
| |-EnumConstantDecl 0x55eac02fe810 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55eac02fe7f0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55eac02fe7d0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55eac02fe8a0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55eac02fe880 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55eac02fe860 <col:12> 'int' 6
| `-EnumConstantDecl 0x55eac02fe930 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55eac02fe910 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55eac02fe8f0 <col:13> 'int' 7
|-VarDecl 0x55eac02fe9a0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55eac02fea28 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55eac02feab0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55eac02feb38 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55eac02febc0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55eac02fec48 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55eac02fecd0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55eac02fed58 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55eac02fede0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55eac02fee68 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55eac02feef0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55eac02feff0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55eac03042f8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55eac0304a88 <line:128:13> 'int' 0
| `-CompoundStmt 0x55eac0304af8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55eac02ff0e0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55eac0304b08 <col:29, line:132:5>
|-CXXMethodDecl 0x55eac02ff298 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55eac02ff1d0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55eac02ff360 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55eac02ff448 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55eac0304b60 <col:44, line:161:5>
|   `-ReturnStmt 0x55eac0304b50 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55eac0304b38 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55eac0304b18 <col:9> 'ErrorHandler *' lvalue Var 0x55eac0304358 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55eac02ff588 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55eac02ff4f8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55eac02ff650 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55eac0304bc0 <col:43, line:173:5>
|   `-ReturnStmt 0x55eac0304bb0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55eac0304b98 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55eac0304b78 <col:9> 'ErrorHandler *' lvalue Var 0x55eac03043d0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55eac02ff708 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55eac02ff788 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55eac02ff898 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55eac02ff808 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55eac02ff9e8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55eac02ff958 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55eac02ffb40 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55eac02ffaa8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55eac02ffc98 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55eac02ffc00 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55eac02ffdf0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55eac02ffd58 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55eac0300000 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55eac02ffea8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55eac02fff28 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55eac03001d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55eac03000c0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55eac0300140 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55eac03003f8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55eac0300298 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55eac0300318 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55eac03005d8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55eac03004b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55eac0300538 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55eac03007b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55eac0300698 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55eac0300718 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55eac0300940 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55eac0300878 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55eac0300b10 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55eac03009f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55eac0300a70 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55eac0304e18 <col:57, line:234:5>
|   `-ReturnStmt 0x55eac0304e08 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55eac0304df0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55eac0304d98 <col:9, col:41> 'int'
|         |-MemberExpr 0x55eac0304d68 <col:9> '<bound member function type>' ->xmessage 0x55eac0300940
|         | `-CXXThisExpr 0x55eac0304d58 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55eac0304dd8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55eac0304dc0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55eac0304d38 <col:18, col:40> 'String' (CXXTemporary 0x55eac0304d38)
|               `-CallExpr 0x55eac0304d00 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55eac0304ce8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55eac0304c60 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55eac0302b08 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55eac0304c80 <col:31> 'const String' lvalue ParmVar 0x55eac0300a70 'str' 'const String &'
|                 `-DeclRefExpr 0x55eac0304ca0 <col:36> 'const String' lvalue ParmVar 0x55eac03009f8 'anno' 'const String &'
|-CXXMethodDecl 0x55eac0300df0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55eac0300bd0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55eac0300c50 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55eac0300cc8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55eac03050a8 <col:68, line:243:5>
|   `-ReturnStmt 0x55eac0305098 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55eac0305080 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55eac0305020 <col:9, col:41> 'int'
|         |-MemberExpr 0x55eac0304ff0 <col:9> '<bound member function type>' ->xmessage 0x55eac0300b10
|         | `-CXXThisExpr 0x55eac0304fe0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55eac0304eb8 <col:18> 'const String' lvalue ParmVar 0x55eac0300bd0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55eac0305068 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55eac0305050 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55eac0304fc0 <col:24, col:40> 'String' (CXXTemporary 0x55eac0304fc0)
|               `-CXXMemberCallExpr 0x55eac0304f58 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55eac0304ee8 <col:24> '<bound member function type>' ->vformat 0x55eac0301fd0
|                 | `-CXXThisExpr 0x55eac0304ed8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55eac0304f88 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55eac0304f18 <col:32> 'const char *' lvalue ParmVar 0x55eac0300c50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55eac0304fa0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55eac0304f38 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55eac0300cc8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55eac0301090 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55eac0300eb8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55eac0300f30 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55eac0300fa8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55eac03053e8 <col:23, line:254:5>
|   `-ReturnStmt 0x55eac03053d8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55eac03053c0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55eac0305360 <col:9, col:71> 'int'
|         |-MemberExpr 0x55eac0305330 <col:9> '<bound member function type>' ->xmessage 0x55eac0300b10
|         | `-CXXThisExpr 0x55eac0305320 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55eac03053a8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55eac0305390 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55eac03052e0 <col:18, col:65> 'String' (CXXTemporary 0x55eac03052e0)
|         |     `-CallExpr 0x55eac0305278 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55eac0305260 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55eac0305148 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55eac0302b08 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55eac0305168 <col:31> 'const String' lvalue ParmVar 0x55eac0300f30 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55eac03052c0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55eac03052a8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55eac0305240 <col:37, col:64> 'String' (CXXTemporary 0x55eac0305240)
|         |             `-CallExpr 0x55eac0305210 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55eac03051f8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55eac0305188 <col:37> 'String (const String &)' lvalue CXXMethod 0x55eac0303178 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55eac03051a8 <col:56> 'const String' lvalue ParmVar 0x55eac0300eb8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55eac0305300 <col:68> 'const String' lvalue ParmVar 0x55eac0300fa8 'str' 'const String &'
|-CXXMethodDecl 0x55eac0301410 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55eac0301158 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55eac03011d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55eac0301250 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55eac03012c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55eac03056a0 <col:34, line:267:5>
|   `-ReturnStmt 0x55eac0305690 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55eac0305678 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55eac0305610 <col:9, col:51> 'int'
|         |-MemberExpr 0x55eac03055e0 <col:9> '<bound member function type>' ->xmessage 0x55eac0301090
|         | `-CXXThisExpr 0x55eac03055d0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55eac0305488 <col:18> 'const String' lvalue ParmVar 0x55eac0301158 'landmark' 'const String &'
|         |-DeclRefExpr 0x55eac03054a8 <col:28> 'const String' lvalue ParmVar 0x55eac03011d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55eac0305660 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55eac0305648 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55eac03055b0 <col:34, col:50> 'String' (CXXTemporary 0x55eac03055b0)
|               `-CXXMemberCallExpr 0x55eac0305548 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55eac03054d8 <col:34> '<bound member function type>' ->vformat 0x55eac0301fd0
|                 | `-CXXThisExpr 0x55eac03054c8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55eac0305578 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55eac0305508 <col:42> 'const char *' lvalue ParmVar 0x55eac0301250 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55eac0305590 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55eac0305528 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55eac03012c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55eac0301520 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55eac0305720 <col:25, line:288:5>
|   `-ReturnStmt 0x55eac0305710 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55eac03056f8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55eac03056c8 <col:9> 'const int' lvalue ->_nerrors 0x55eac03042f8
|         `-CXXThisExpr 0x55eac03056b8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55eac0301730 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55eac03015d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55eac0301658 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55eac0301a18 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55eac03017f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55eac0301878 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55eac03018f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55eac0301bb0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55eac0301ae8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55eac0301df8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55eac0301c70 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55eac0301ce8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55eac0305980 <col:58, line:357:5>
|   `-ReturnStmt 0x55eac0305970 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55eac0305958 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55eac0305928 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55eac0305910 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55eac03058f0 <col:9, col:29> 'String' (CXXTemporary 0x55eac03058f0)
|             `-CallExpr 0x55eac0305880 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55eac0305868 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55eac03057e8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55eac0301a18 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55eac0305788 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55eac03058b8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55eac03057a8 <col:21> 'const char *' lvalue ParmVar 0x55eac0301c70 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55eac03058d0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55eac03057c8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55eac0301ce8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55eac0301fd0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55eac0301ec0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55eac0301f38 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55eac0302128 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55eac0302098 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55eac0302270 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55eac03021e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55eac0302510 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55eac0302328 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55eac03023a8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55eac0302420 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55eac0302670 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55eac03025e0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55eac0305a98 <col:37, line:441:5>
|   `-IfStmt 0x55eac0305a80 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55eac0305a08 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55eac03059d8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55eac0305998 <col:6> 'int' lvalue ParmVar 0x55eac03025e0 'level' 'int'
|     | `-ImplicitCastExpr 0x55eac03059f0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55eac03059b8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55eac02fe6f0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55eac0305a68 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55eac0305a38 <col:8> 'int' lvalue ->_nerrors 0x55eac03042f8
|         `-CXXThisExpr 0x55eac0305a28 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55eac0302738 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55eac0305b30 <col:26, line:448:5>
|   `-BinaryOperator 0x55eac0305b10 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55eac0305ac0 <col:2> 'int' lvalue ->_nerrors 0x55eac03042f8
|     | `-CXXThisExpr 0x55eac0305ab0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55eac0305af0 <col:13> 'int' 0
|-CXXMethodDecl 0x55eac0302900 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55eac03027f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55eac0302868 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55eac0302b08 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55eac03029c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55eac0302a38 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55eac0302dd8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55eac0302be0 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55eac0302c60 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55eac0302ce0 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55eac0302e90 <col:59> 0 0
|-CXXMethodDecl 0x55eac0303028 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55eac0302f08 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55eac0302f88 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55eac03061a0 <col:70, line:534:5>
|   |-DeclStmt 0x55eac0305ca0 <line:528:2, col:20>
|   | |-VarDecl 0x55eac0305b58 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55eac0305bc0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55eac0305bf8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55eac0305c60 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55eac0305d70 <line:529:2, col:23>
|   | `-VarDecl 0x55eac0305cd0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55eac0305d58 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55eac0305d38 <col:18> 'const char *' lvalue ParmVar 0x55eac0302f08 'begin' 'const char *'
|   |-DoStmt 0x55eac0306138 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55eac0306068 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55eac0306050 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55eac0306030 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55eac0305d88 <col:6> 'const char *' lvalue Var 0x55eac0305cd0 'x' 'const char *'
|   | |     `-CallExpr 0x55eac0305f80 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55eac0305f68 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55eac0305f20 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55eac03047d0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55eac0305fe8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55eac0305fd0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55eac0305e40 <col:20, col:27> 'String' (CXXTemporary 0x55eac0305e40)
|   | |       |     `-CXXTemporaryObjectExpr 0x55eac0305e08 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55eac0306000 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55eac0305e60 <col:30> 'const char *' lvalue Var 0x55eac0305cd0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55eac0306018 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55eac0305e80 <col:33> 'const char *' lvalue ParmVar 0x55eac0302f88 'end' 'const char *'
|   | |       |-UnaryOperator 0x55eac0305ec0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55eac0305ea0 <col:39> 'String' lvalue Var 0x55eac0305b58 'name' 'String'
|   | |       |-UnaryOperator 0x55eac0305ef8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55eac0305ed8 <col:46> 'String' lvalue Var 0x55eac0305bf8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55eac0305f10 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55eac0306120 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55eac0306108 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55eac03060e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55eac03060b8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|   |         `-ImplicitCastExpr 0x55eac03060a0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55eac0306080 <col:11> 'String' lvalue Var 0x55eac0305b58 'name' 'String'
|   `-ReturnStmt 0x55eac0306190 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55eac0306178 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55eac0306158 <col:9> 'const char *' lvalue Var 0x55eac0305cd0 'x' 'const char *'
|-CXXMethodDecl 0x55eac0303178 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55eac03030e8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55eac03067a8 <col:55, line:550:5>
|   `-IfStmt 0x55eac0306780 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55eac03063e0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55eac03063c8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55eac03063b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55eac0306390 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55eac0306360 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|     | |       `-DeclRefExpr 0x55eac0306200 <col:6> 'const String' lvalue ParmVar 0x55eac03030e8 'x' 'const String &'
|     | `-BinaryOperator 0x55eac0306340 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55eac0306310 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55eac03062c0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55eac03062a8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55eac0306260 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55eabffe2130 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55eac0306220 <col:11> 'const String' lvalue ParmVar 0x55eac03030e8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55eac0306240 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55eac0306328 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55eac03062f8 <col:19> 'char' 123
|     |-ReturnStmt 0x55eac0306450 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55eac0306420 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55eac0306400 <col:13> 'const String' lvalue ParmVar 0x55eac03030e8 'x' 'const String &'
|     `-IfStmt 0x55eac0306758 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55eac03064e8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55eac03064d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55eac03064b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55eac0306480 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|       |       `-DeclRefExpr 0x55eac0306460 <col:11> 'const String' lvalue ParmVar 0x55eac03030e8 'x' 'const String &'
|       |-ReturnStmt 0x55eac0306670 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55eac0306658 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55eac0306628 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55eac0306610 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55eac03065f0 <col:13, col:29> 'String' (CXXTemporary 0x55eac03065f0)
|       |         `-CallExpr 0x55eac03065a0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55eac0306588 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55eac0306500 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55eac0302900 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55eac03065d0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55eac0306520 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55eac0306540 <col:28> 'const String' lvalue ParmVar 0x55eac03030e8 'x' 'const String &'
|       `-ReturnStmt 0x55eac0306748 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55eac0306730 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55eac0306700 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55eac03066e8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55eac03066c8 <col:13, col:20> 'String' (CXXTemporary 0x55eac03066c8)
|                 `-CXXTemporaryObjectExpr 0x55eac0306690 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55eac0303340 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55eac0303230 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55eac03032a8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55eac0304a78 <col:71> 'bool' false
|-CXXRecordDecl 0x55eac03033f0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55eac03036e8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55eac0303680 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55eac0303620 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55eac03035e0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55eabffc54f0 'String'
|       | `-CXXRecord 0x55eabffc5460 'String'
|       |-BuiltinType 0x55eabfc93370 'int'
|       `-DecayedType 0x55eac0292400 '__va_list_tag *' sugar
|         |-TypedefType 0x55eac02923d0 'va_list' sugar
|         | |-Typedef 0x55eabfedb140 'va_list'
|         | `-TypedefType 0x55eabfedb0f0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55eabfed43f8 '__gnuc_va_list'
|         |   `-TypedefType 0x55eabfed4360 '__builtin_va_list' sugar
|         |     |-Typedef 0x55eabfcd4bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55eabfcd4b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55eabfc940c0 '__va_list_tag'
|         |         `-CXXRecord 0x55eabfc94028 '__va_list_tag'
|         `-PointerType 0x55eabfee1a10 '__va_list_tag *'
|           `-RecordType 0x55eabfc940c0 '__va_list_tag'
|             `-CXXRecord 0x55eabfc94028 '__va_list_tag'
|-EnumDecl 0x55eac0303740 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55eac0303840 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55eac0303da0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0303820 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55eac0303800 <col:16> 'int' 1
| |-EnumConstantDecl 0x55eac03038d0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55eac0303db8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac03038b0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55eac0303890 <col:21> 'int' 2
| |-EnumConstantDecl 0x55eac0303960 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55eac0303dd0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0303940 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55eac0303920 <col:22> 'int' 4
| |-EnumConstantDecl 0x55eac03039f0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55eac0303de8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac03039d0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55eac03039b0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55eac0303a80 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55eac0303e00 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0303a60 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55eac0303a40 <col:22> 'int' 16
| |-EnumConstantDecl 0x55eac0303b10 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55eac0303e18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0303af0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55eac0303ad0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55eac0303ba0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55eac0303e30 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0303b80 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55eac0303b60 <col:17> 'int' 64
| |-EnumConstantDecl 0x55eac0303c30 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55eac0303e48 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0303c10 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55eac0303bf0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55eac0303cc0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55eac0303e60 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0303ca0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55eac0303c80 <col:16> 'int' 256
| `-EnumConstantDecl 0x55eac0303d50 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55eac0303e78 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac0303d30 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55eac0303d10 <col:12> 'int' 1024
|-CXXMethodDecl 0x55eac0304088 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55eac0303ea0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55eac0303f40 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55eac0304210 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55eac0304148 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55eac03042b8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55eac03042f8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55eac0304358 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55eac03043d0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55eac03047d0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55eac0304448 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55eac03044c8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55eac0304548 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55eac03045c0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55eac0304638 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55eac03046b0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55eac03048f8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55eac03048f8
| `-ParmVarDecl 0x55eac0304a08 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55eac0306b08 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55eac0306b08
  `-ParmVarDecl 0x55eac0306c18 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac0291448 prev 0x55eac022d8c0 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac0291540 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55eac02915d0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55eac0291708 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55eac0291608 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55eac0292b30 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55eac0292b10 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55eac02926a8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55eac0292bc0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55eac0292b80 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55eac0291608 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55eac0292710 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55eac0292c40 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55eac0292c00 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55eac0292770 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55eac0292c80 <col:54> 'bool' false
| `-CompoundStmt 0x55eac0292d88 <col:61, line:38:5>
|   `-BinaryOperator 0x55eac0292d68 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55eac0292d00 <col:9> 'const Element *' lvalue ->_context 0x55eac0292648
|     | `-CXXThisExpr 0x55eac0292cf0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55eac0292d50 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55eac0292d30 <col:20> 'int' 0
|-CXXConstructorDecl 0x55eac0291918 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55eac02917c8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55eac0291840 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55eac0292b68 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55eac0292b48 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55eac0292648 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55eac0292de0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55eac0292da0 <col:20> 'const Element *' lvalue ParmVar 0x55eac02917c8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55eac02926a8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55eac0292e60 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55eac0292e20 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55eac0291840 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55eac0292710 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55eac0292ee0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55eac0292ea0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55eac0292770 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55eac0292f20 <col:73> 'bool' false
| `-CompoundStmt 0x55eac0292f98 <col:80, line:46:5>
|-CXXMethodDecl 0x55eac0291a48 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55eac0293010 <col:36, line:51:5>
|   `-ReturnStmt 0x55eac0293000 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55eac0292fe8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55eac0292fb8 <col:16> 'const Element *const' lvalue ->_context 0x55eac0292648
|         `-CXXThisExpr 0x55eac0292fa8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55eac0291b38 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55eac0293090 <col:32, line:57:5>
|   `-ReturnStmt 0x55eac0293080 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55eac0293068 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55eac0293038 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55eac02926a8
|         `-CXXThisExpr 0x55eac0293028 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55eac0291bf8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55eac0291d80 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55eac0291cb0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55eac0291ed0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55eac0291e40 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55eac0292020 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55eac0291f90 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55eac0292228 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55eac02920d8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55eac0292150 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55eac0292558 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55eac02922e8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55eac0292368 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55eac0292430 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55eac0292610 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55eac0292648 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55eac02926a8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55eac0292710 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55eac0292770 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55eac02927c0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55eac02927c0
| `-ParmVarDecl 0x55eac02928d8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55eac0292978 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55eac0292978
| `-ParmVarDecl 0x55eac0292a88 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55eac0312520 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55eac02b9720 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55eac02b98f8 prev 0x55eac02b9720 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55eac02b9988 <col:46, col:52> col:46 public
|-TypedefDecl 0x55eac02b99b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02bb580 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55eac02bb530 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55eac02b9e60 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55eac02b9d60 'type'
|     `-TemplateSpecializationType 0x55eac02b9cf0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55eac02b9bd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55eac02b9bb0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55eac02b9b90 <col:24> 'unsigned long' 4
|       `-RecordType 0x55eac02b9cd0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55eac02b9bf0 'char_array'
|-TypedefDecl 0x55eac02bb638 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55eac02bb600 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55eac02bb5e0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55eac02bb580 'type'
|     `-ElaboratedType 0x55eac02bb530 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55eac02b9e60 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55eac02b9d60 'type'
|         `-TemplateSpecializationType 0x55eac02b9cf0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55eac02b9bd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55eac02b9bb0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55eac02b9b90 <col:24> 'unsigned long' 4
|           `-RecordType 0x55eac02b9cd0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55eac02b9bf0 'char_array'
|-CXXMethodDecl 0x55eac02bb7b8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55eac02bb6c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55eac02bb8a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55eac02bb988 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55eac02bbc58 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55eac02bbb60 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55eac02bbe98 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55eac02bbd10 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55eac02bbd88 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55eac02c5528 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55eac02bbf58 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55eac02c5490 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55eac02c5688 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55eac02c5758 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55eac02c59a8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55eac02c5818 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55eac02c5890 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55eac02c5c08 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55eac02c5a78 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55eac02c5af0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55eac02c5dc8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55eac02c5cd8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55eac02c5f88 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55eac02c5e90 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55eac02c6040 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55eac02c60f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55eac02c6328 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55eac02c61a0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55eac02c6218 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55eac02c65c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55eac02c64d0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55eac02c6690 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55eac02c66e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55eac02c6730 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55eac02b8128 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55eac02b8338 prev 0x55eac02b8128 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55eac02b9690 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55eac02b9640 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55eac02b9620 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55eac02b94d0 'type'
|     `-SubstTemplateTypeParmType 0x55eac02b92f0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55eabff60b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff60ac8 'T'
|       `-RecordType 0x55eac02b8e40 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55eac02b8d58 'sized_array_memory'
|-FieldDecl 0x55eac02c6780 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55eac02c67d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55eac02c6808 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55eac02b83d0 'int' sugar
|   |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55eabff984c8 'T'
|   `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02c6898 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55eac02c6860 'int &'
|   `-SubstTemplateTypeParmType 0x55eac02b83d0 'int' sugar
|     |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55eabff984c8 'T'
|     `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02c6958 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55eac02c6920 'const int &'
|   `-QualType 0x55eac02b83d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55eac02b83d0 'int' sugar
|       |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff984c8 'T'
|       `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02c69e8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55eac02c69b0 'int *'
|   `-SubstTemplateTypeParmType 0x55eac02b83d0 'int' sugar
|     |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55eabff984c8 'T'
|     `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02c6a78 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55eac02c6a40 'const int *'
|   `-QualType 0x55eac02b83d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55eac02b83d0 'int' sugar
|       |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff984c8 'T'
|       `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02c7660 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55eac02c7610 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55eac02c75f0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55eac02c7580 'type'
|     `-SubstTemplateTypeParmType 0x55eac02c7340 'int' sugar
|       |-TemplateTypeParmType 0x55eabff6bf40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff6bef0 'T'
|       `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02c76c8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55eac02c6920 'const int &'
|   `-QualType 0x55eac02b83d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55eac02b83d0 'int' sugar
|       |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff984c8 'T'
|       `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02c7720 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02c7788 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55eac02c69b0 'int *'
|   `-SubstTemplateTypeParmType 0x55eac02b83d0 'int' sugar
|     |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55eabff984c8 'T'
|     `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac02c77f0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55eac02c6a40 'const int *'
|   `-QualType 0x55eac02b83d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55eac02b83d0 'int' sugar
|       |-TemplateTypeParmType 0x55eabff98520 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55eabff984c8 'T'
|       `-BuiltinType 0x55eabfc93370 'int'
|-EnumDecl 0x55eac02c7848 <line:134:5> col:5
| `-EnumConstantDecl 0x55eac02c7940 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55eac02c7920 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55eabff996e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55eabff996c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55eabff996a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55eac02c79c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55eac02c7c18 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55eac02c7a80 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55eac02c7b20 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55eac02c7ed8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55eac02c7dc0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55eac02c8198 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55eac02c8080 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55eac02c84e0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55eac02c83c0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55eac02c87f0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55eac02c86d0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55eac02c8ae0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55eac02c8928 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55eac02c89a0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55eac02c8c08 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55eac02c8ce8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac02c8d40 <col:30> Inherited
|-CXXMethodDecl 0x55eac02c8d88 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55eac02c8e38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac02c8e90 <col:30> Inherited
|-CXXMethodDecl 0x55eac02c8f58 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55eac02c9008 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac02c9060 <col:30> Inherited
|-CXXMethodDecl 0x55eac02c90a8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55eac02c9158 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac02c91b0 <col:30> Inherited
|-CXXMethodDecl 0x55eac02c91f8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55eac02c92a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac02c9300 <col:30> Inherited
|-CXXMethodDecl 0x55eac02c9348 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55eac02c93f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55eac02c9450 <col:30> Inherited
|-CXXMethodDecl 0x55eac02c9478 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55eac02c9528 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55eac02c95d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55eac02c9798 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55eac02c9688 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55eac02c9700 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55eac02c98e8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55eac02c9858 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac02c9a98 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55eac02c99a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55eac02c9b50 <col:20>
| `-OptimizeNoneAttr 0x55eac02c9ba8 <col:30>
|-CXXMethodDecl 0x55eac02c9cc8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55eac02c9bd0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55eac02c9d80 <col:20>
| `-OptimizeNoneAttr 0x55eac02c9dd8 <col:30>
|-CXXMethodDecl 0x55eac02c9e90 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55eac02c9e00 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac02c9fd8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55eac02c9f48 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac02ca108 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55eac02ca238 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55eac02ca308 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55eac02ca3d8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55eac02ca518 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55eac02ca488 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac02ca660 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55eac02ca5d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55eac02ca7a8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55eac02ca718 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55eac02ca860 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55eac02ca960 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55eac02ca8d0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55eac02caa18 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55eac02caad8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55eac02cabd8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55eac02cad58 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55eac02cac98 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55eac02cb518 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55eac02cae10 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55eac02cb478 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55eac02cb378 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55eac02cb5f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55eac02cb748 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55eac02cb6b8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55eac02cb800 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55eac02cba48 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55eac02cb8c0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55eac02cb938 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55eac02cbc08 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55eac02cbb18 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55eac02cbe58 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55eac02cbcd0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55eac02cbd48 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55eac02cbf18 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55eac02cc178 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55eac02cc080 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55eac02cc248 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac02b6298 prev 0x55eac0299ca0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55eac02b6390 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55eac02b6480 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55eac02ddf30 <col:16, line:828:9>
|-CXXDestructorDecl 0x55eac02b6570 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55eac02ddf40 <col:25, line:830:9>
|-CXXMethodDecl 0x55eac02b6670 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55eac02b6720 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55eac02b67c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55eac02b67c8
| `-ParmVarDecl 0x55eac02b68d8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55eac02b7098 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55eac02b7098
  `-ParmVarDecl 0x55eac02b71a8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac0299ad8 prev 0x55eac022d950 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55eac0299c10 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55eac0299ca0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55eac0299d50 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55eac0299e58 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55eac0299d88 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55eac02cf118 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55eac02cf0f8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55eac029a178 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55eac0299ff0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55eac029a068 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55eac02cf150 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55eac02cf130 <col:59> 'int' 0
|-CXXConstructorDecl 0x55eac029a350 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55eac029a240 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55eac029a2b8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55eac02cf188 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55eac02cf168 <col:55> 'int' 0
|-CXXConstructorDecl 0x55eac029a708 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55eac029a4f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55eac029a568 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55eac029a5e0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55eac02cf1c0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55eac02cf1a0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55eac029a8c8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55eac029a808 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55eac029a9c0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55eac029ab78 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55eac029aab0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55eac029ac68 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55eac02cf570 <col:24, line:291:5>
|   `-ReturnStmt 0x55eac02cf560 <line:290:9, col:79>
|     `-BinaryOperator 0x55eac02cf540 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55eac02cf418 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55eac02cf370 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55eac02cf350 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55eac02cf248 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55eac02cf230 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55eac02cf218 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55eac02cf1e8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55eac02b80c0
|       | |   |       `-CXXThisExpr 0x55eac02cf1d8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55eac02cf338 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55eac02cf320 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55eac02cf2e8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55eac02cf2b8 <col:28, col:35> '<bound member function type>' ->size 0x55eac0281ac8
|       | |           `-ImplicitCastExpr 0x55eac02cf308 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55eac02cf2a0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55eac02cf270 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55eac02b80c0
|       | |                 `-CXXThisExpr 0x55eac02cf260 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55eac02cf400 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55eac02cf3e8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55eac02cf3d0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55eac02cf3a0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55eac02cc390
|       |         `-CXXThisExpr 0x55eac02cf390 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55eac02cf520 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55eac02cf508 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55eac02cf4f0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55eac02cf4b0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55eac02cf498 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55eac02cf448 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55eac02cc440
|         |     |   `-CXXThisExpr 0x55eac02cf438 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55eac02cf478 <col:73> 'int' 0
|         `-IntegerLiteral 0x55eac02cf4d0 <col:79> 'int' 0
|-CXXMethodDecl 0x55eac029ad28 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55eac02cf748 <col:32, line:296:5>
|   `-ReturnStmt 0x55eac02cf738 <line:295:9, col:49>
|     `-BinaryOperator 0x55eac02cf718 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55eac02cf5f8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55eac02cf5e0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55eac02cf5c8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55eac02cf598 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55eac02cc390
|       |       `-CXXThisExpr 0x55eac02cf588 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55eac02cf6f8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55eac02cf6e0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55eac02cf6c8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55eac02cf688 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55eac02cf670 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55eac02cf620 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55eac02cc440
|         |     |   `-CXXThisExpr 0x55eac02cf610 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55eac02cf650 <col:43> 'int' 0
|         `-IntegerLiteral 0x55eac02cf6a8 <col:49> 'int' 0
|-CXXMethodDecl 0x55eac029ae18 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55eac02cf958 <col:19, line:306:5>
|   |-IfStmt 0x55eac02cf878 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55eac02cf7b8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55eac02cf7a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55eac02cf770 <col:13> 'Vector<String> *' lvalue ->_conf 0x55eac02b80c0
|   | |     `-CXXThisExpr 0x55eac02cf760 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55eac02cf858 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55eac02cf828 <col:13, col:20> '<bound member function type>' ->clear 0x55eac02844c8
|   |     `-ImplicitCastExpr 0x55eac02cf810 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55eac02cf7e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55eac02b80c0
|   |         `-CXXThisExpr 0x55eac02cf7d0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55eac02cf900 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55eac02cf8d0 <col:9, col:16> '<bound member function type>' .clear 0x55eac02cbf18
|   |   `-MemberExpr 0x55eac02cf8a0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55eac02cc330
|   |     `-CXXThisExpr 0x55eac02cf890 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55eac02cf948 <line:305:9, col:17>
|     `-UnaryOperator 0x55eac02cf930 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eac02cf920 <col:17> 'Args *' this
|-CXXMethodDecl 0x55eac029b098 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55eac029afa0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55eac029b218 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55eac029b150 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55eac029b598 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55eac029b2c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55eac029b4f8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55eac029b368 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55eac029b3e0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55eac02cfc88 <col:67, line:327:5>
|     |-WhileStmt 0x55eac02cfc38 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55eac02cfa50 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55eac02cf9c0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55eac023e228 0x55eac0182a10 0x55eac01b48d8 0x55eac0002b48 0x55eac0002820 0x55eabfff3b20 0x55eabfff37d0 0x55eabfff30c0 0x55eabffc45b0 0x55eabff51520
|     | | |-DeclRefExpr 0x55eac02cf980 <col:16> 'Iter' lvalue ParmVar 0x55eac029b368 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55eac02cf9a0 <col:25> 'Iter' lvalue ParmVar 0x55eac029b3e0 'end' 'Iter'
|     | `-CompoundStmt 0x55eac02cfc18 <col:30, line:325:9>
|     |   |-CallExpr 0x55eac02cfbb8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55eac02cfa98 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55eac02cfb88 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55eac02cfb18 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|     |   |   `-DeclRefExpr 0x55eac02cfaf8 <col:24> 'Iter' lvalue ParmVar 0x55eac029b368 'begin' 'Iter'
|     |   `-UnaryOperator 0x55eac02cfc00 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55eac02cfbe0 <col:15> 'Iter' lvalue ParmVar 0x55eac029b368 'begin' 'Iter'
|     `-ReturnStmt 0x55eac02cfc78 <line:326:9, col:17>
|       `-UnaryOperator 0x55eac02cfc60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02cfc50 <col:17> 'Args *' this
|-CXXMethodDecl 0x55eac029b6a0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55eac029b610 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55eac029b7e8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55eac029b758 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55eac029b8b0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55eac02cfd68 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55eac02cfd08 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55eac02cfcb8 <col:9> '<bound member function type>' ->reset_from 0x55eac02cc7b8
|   | | `-CXXThisExpr 0x55eac02cfca8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55eac02cfce8 <col:20> 'int' 0
|   `-ReturnStmt 0x55eac02cfd58 <line:352:9, col:17>
|     `-UnaryOperator 0x55eac02cfd40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eac02cfd30 <col:17> 'Args *' this
|-VarDecl 0x55eac029b968 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55eac029b9d0 <col:38> 'int' 1
|-VarDecl 0x55eac029ba60 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55eac029bac8 <col:39> 'int' 2
|-VarDecl 0x55eac029bb58 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55eac029bbc0 <col:39> 'int' 4
|-VarDecl 0x55eac029bc50 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55eac029bcb8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55eac029c038 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55eac029bd30 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55eac029bf98 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55eac029bde0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029be88 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55eac02cfec0 <col:43, line:371:5>
|     `-ReturnStmt 0x55eac02cfeb0 <line:370:9, col:34>
|       `-CallExpr 0x55eac02cfe78 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02cfd98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02cfe18 <col:21> 'const char *' lvalue ParmVar 0x55eac029bde0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02cfe38 <col:30> 'int' 0
|         `-DeclRefExpr 0x55eac02cfe58 <col:33> 'T' lvalue ParmVar 0x55eac029be88 'x' 'T &'
|-FunctionTemplateDecl 0x55eac029c368 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55eac029c0a0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55eac029c2c8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55eac029c150 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029c1f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d0010 <col:45, line:375:5>
|     `-ReturnStmt 0x55eac02d0000 <line:374:9, col:42>
|       `-CallExpr 0x55eac02cffc8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02cfee8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02cff68 <col:21> 'const char *' lvalue ParmVar 0x55eac029c150 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02cff88 <col:30> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int'
|         `-DeclRefExpr 0x55eac02cffa8 <col:41> 'T' lvalue ParmVar 0x55eac029c1f8 'x' 'T &'
|-FunctionTemplateDecl 0x55eac029c698 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55eac029c3d0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55eac029c5f8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55eac029c480 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55eac029c528 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55eac02d0160 <col:45, line:379:5>
| |   `-ReturnStmt 0x55eac02d0150 <line:378:9, col:43>
| |     `-CallExpr 0x55eac02d0118 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55eac02d0038 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55eac02d00b8 <col:21> 'const char *' lvalue ParmVar 0x55eac029c480 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55eac02d00d8 <col:30> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int'
| |       `-DeclRefExpr 0x55eac02d00f8 <col:42> 'T' lvalue ParmVar 0x55eac029c528 'x' 'T &'
| |-CXXMethodDecl 0x55eac0326d08 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x55eac0326b28 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x55eac0326bf8 <col:39, col:42> col:42 x 'bool &'
| `-CXXMethodDecl 0x55eac0327148 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55eac0326fa8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55eac0327078 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x55eac029c9c8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55eac029c700 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55eac029c928 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55eac029c7b0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55eac029c858 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55eac02d0360 <col:46, line:383:5>
| |   `-ReturnStmt 0x55eac02d0350 <line:382:9, col:55>
| |     `-CallExpr 0x55eac02d0318 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55eac02d0188 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55eac02d0208 <col:21> 'const char *' lvalue ParmVar 0x55eac029c7b0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55eac02d02d8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55eac02d0288 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55eac02d0268 <col:30> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55eac02d02c0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55eac02d02a0 <col:42> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55eac02d02f8 <col:54> 'T' lvalue ParmVar 0x55eac029c858 'x' 'T &'
| |-CXXMethodDecl 0x55eac0312a08 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x55eac0312828 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x55eac03128f8 <col:40, col:43> col:43 x 'unsigned int &'
| |-CXXMethodDecl 0x55eac03242d8 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55eac03240f8 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x55eac03241c8 <col:40, col:43> col:43 x 'int &'
| `-CXXMethodDecl 0x55eac0325578 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IP6Address &)'
|   |-TemplateArgument type 'IP6Address'
|   |-ParmVarDecl 0x55eac0325390 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55eac0325468 <col:40, col:43> col:43 x 'IP6Address &'
|-FunctionTemplateDecl 0x55eac029cdc8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55eac029ca30 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55eac029cd28 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55eac029cae0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029cb60 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55eac029cc08 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d04a0 <col:54, line:388:5>
|     |-CallExpr 0x55eac02d0428 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55eac02d0378 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55eac02d03b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55eac02d03c8 <col:30> 'const char *' lvalue ParmVar 0x55eac029cae0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55eac02d03e8 <col:39> 'int' lvalue ParmVar 0x55eac029cb60 'flags' 'int'
|     | `-DeclRefExpr 0x55eac02d0408 <col:46> 'T' lvalue ParmVar 0x55eac029cc08 'x' 'T &'
|     `-ReturnStmt 0x55eac02d0490 <line:387:9, col:17>
|       `-UnaryOperator 0x55eac02d0478 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d0468 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac029d278 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55eac029ce38 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55eac029ceb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55eac029d1d8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55eac029cf78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029d018 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55eac029d0b8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55eac02d0610 <col:74, line:403:5>
|     `-ReturnStmt 0x55eac02d0600 <line:402:9, col:56>
|       `-CallExpr 0x55eac02d05c0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d04d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d0540 <col:28> 'const char *' lvalue ParmVar 0x55eac029cf78 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02d0560 <col:37> 'int' 0
|         |-DeclRefExpr 0x55eac02d0580 <col:40> 'T' lvalue ParmVar 0x55eac029d018 'x' 'T &'
|         `-DeclRefExpr 0x55eac02d05a0 <col:43> 'const V' lvalue ParmVar 0x55eac029d0b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55eac029d6e8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55eac029d2e8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55eac029d368 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55eac029d648 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55eac029d428 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029d4c8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55eac029d568 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55eac02d0778 <col:76, line:407:5>
|     `-ReturnStmt 0x55eac02d0768 <line:406:9, col:65>
|       `-CallExpr 0x55eac02d0728 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d0638 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d06a8 <col:28> 'const char *' lvalue ParmVar 0x55eac029d428 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d06c8 <col:37> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int'
|         |-DeclRefExpr 0x55eac02d06e8 <col:49> 'T' lvalue ParmVar 0x55eac029d4c8 'x' 'T &'
|         `-DeclRefExpr 0x55eac02d0708 <col:52> 'const V' lvalue ParmVar 0x55eac029d568 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55eac029dc38 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55eac029d758 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55eac029d7d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55eac029db98 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55eac029d898 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029d918 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55eac029d9b8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55eac029da58 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55eac02d08e0 <col:85, line:412:5>
|     |-CallExpr 0x55eac02d0860 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55eac02d0790 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55eac02d07d0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55eac02d07e0 <col:37> 'const char *' lvalue ParmVar 0x55eac029d898 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55eac02d0800 <col:46> 'int' lvalue ParmVar 0x55eac029d918 'flags' 'int'
|     | |-DeclRefExpr 0x55eac02d0820 <col:53> 'T' lvalue ParmVar 0x55eac029d9b8 'x' 'T &'
|     | `-DeclRefExpr 0x55eac02d0840 <col:56> 'const V' lvalue ParmVar 0x55eac029da58 'default_value' 'const V &'
|     `-ReturnStmt 0x55eac02d08d0 <line:411:9, col:17>
|       `-UnaryOperator 0x55eac02d08b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d08a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac029e0c8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55eac029dcb0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac029dd28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac029e028 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55eac029dde8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029de60 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55eac029df08 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d0a60 <col:53, line:425:5>
|     `-ReturnStmt 0x55eac02d0a50 <line:424:9, col:42>
|       `-CallExpr 0x55eac02d0a10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d0910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d0990 <col:21> 'const char *' lvalue ParmVar 0x55eac029dde8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02d09b0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55eac02d09d0 <col:33> 'P' lvalue ParmVar 0x55eac029de60 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d09f0 <col:41> 'T' lvalue ParmVar 0x55eac029df08 'x' 'T &'
|-FunctionTemplateDecl 0x55eac029e518 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55eac029e138 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac029e1b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac029e478 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55eac029e278 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029e2f0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55eac029e398 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d0bd8 <col:55, line:429:5>
|     `-ReturnStmt 0x55eac02d0bc8 <line:428:9, col:50>
|       `-CallExpr 0x55eac02d0b88 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d0a88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d0b08 <col:21> 'const char *' lvalue ParmVar 0x55eac029e278 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d0b28 <col:30> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int'
|         |-DeclRefExpr 0x55eac02d0b48 <col:41> 'P' lvalue ParmVar 0x55eac029e2f0 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d0b68 <col:49> 'T' lvalue ParmVar 0x55eac029e398 'x' 'T &'
|-FunctionTemplateDecl 0x55eac029e968 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55eac029e588 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac029e608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac029e8c8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55eac029e6c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029e740 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55eac029e7e8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d0d50 <col:55, line:433:5>
|     `-ReturnStmt 0x55eac02d0d40 <line:432:9, col:51>
|       `-CallExpr 0x55eac02d0d00 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d0c00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d0c80 <col:21> 'const char *' lvalue ParmVar 0x55eac029e6c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d0ca0 <col:30> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int'
|         |-DeclRefExpr 0x55eac02d0cc0 <col:42> 'P' lvalue ParmVar 0x55eac029e740 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d0ce0 <col:50> 'T' lvalue ParmVar 0x55eac029e7e8 'x' 'T &'
|-FunctionTemplateDecl 0x55eac029edb8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55eac029e9d8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac029ea58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55eac029ed18 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55eac029eb18 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55eac029eb90 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55eac029ec38 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55eac02d0f78 <col:56, line:437:5>
| |   `-ReturnStmt 0x55eac02d0f68 <line:436:9, col:63>
| |     `-CallExpr 0x55eac02d0f28 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55eac02d0d78 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55eac02d0df8 <col:21> 'const char *' lvalue ParmVar 0x55eac029eb18 'keyword' 'const char *'
| |       |-BinaryOperator 0x55eac02d0ec8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55eac02d0e78 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55eac02d0e58 <col:30> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55eac02d0eb0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55eac02d0e90 <col:42> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55eac02d0ee8 <col:54> 'P' lvalue ParmVar 0x55eac029eb90 'parser' 'P'
| |       `-DeclRefExpr 0x55eac02d0f08 <col:62> 'T' lvalue ParmVar 0x55eac029ec38 'x' 'T &'
| |-CXXMethodDecl 0x55eac0324f58 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, EtherAddressArg, unsigned char &[6])'
| | |-TemplateArgument type 'EtherAddressArg'
| | |-TemplateArgument type 'unsigned char [6]'
| | |-ParmVarDecl 0x55eac0324c98 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x55eac0324d38 <col:40, col:42> col:42 parser 'EtherAddressArg':'EtherAddressArg'
| | `-ParmVarDecl 0x55eac0324e38 <col:50, col:53> col:53 x 'unsigned char &[6]'
| `-CXXMethodDecl 0x55eac0325fa8 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, IPPortArg, unsigned short &)'
|   |-TemplateArgument type 'IPPortArg'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x55eac0325d10 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55eac0325db8 <col:40, col:42> col:42 parser 'IPPortArg':'IPPortArg'
|   `-ParmVarDecl 0x55eac0325e88 <col:50, col:53> col:53 x 'unsigned short &'
|-FunctionTemplateDecl 0x55eac029f2e8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55eac029ee28 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac029eea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac029f248 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55eac029ef68 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029efe8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55eac029f060 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55eac029f108 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d10e0 <col:64, line:442:5>
|     |-CallExpr 0x55eac02d1060 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55eac02d0f90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55eac02d0fd0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55eac02d0fe0 <col:30> 'const char *' lvalue ParmVar 0x55eac029ef68 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55eac02d1000 <col:39> 'int' lvalue ParmVar 0x55eac029efe8 'flags' 'int'
|     | |-DeclRefExpr 0x55eac02d1020 <col:46> 'P' lvalue ParmVar 0x55eac029f060 'parser' 'P'
|     | `-DeclRefExpr 0x55eac02d1040 <col:54> 'T' lvalue ParmVar 0x55eac029f108 'x' 'T &'
|     `-ReturnStmt 0x55eac02d10d0 <line:441:9, col:17>
|       `-UnaryOperator 0x55eac02d10b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d10a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac029f8e8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55eac029f360 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac029f3d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55eac029f458 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55eac029f848 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55eac029f520 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029f598 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55eac029f638 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55eac029f708 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55eac02d1278 <col:84, line:458:5>
|     `-ReturnStmt 0x55eac02d1268 <line:457:9, col:64>
|       `-CallExpr 0x55eac02d1220 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d1110 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d1180 <col:28> 'const char *' lvalue ParmVar 0x55eac029f520 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02d11a0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55eac02d11c0 <col:40> 'P' lvalue ParmVar 0x55eac029f598 'parser' 'P'
|         |-DeclRefExpr 0x55eac02d11e0 <col:48> 'T' lvalue ParmVar 0x55eac029f638 'x' 'T &'
|         `-DeclRefExpr 0x55eac02d1200 <col:51> 'const V' lvalue ParmVar 0x55eac029f708 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55eac029fe68 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55eac029f960 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac029f9d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55eac029fa58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55eac029fdc8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55eac029fb20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac029fb98 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55eac029fc38 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55eac029fcd8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55eac02d1408 <col:86, line:462:5>
|     `-ReturnStmt 0x55eac02d13f8 <line:461:9, col:73>
|       `-CallExpr 0x55eac02d13b0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d12a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d1310 <col:28> 'const char *' lvalue ParmVar 0x55eac029fb20 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d1330 <col:37> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int'
|         |-DeclRefExpr 0x55eac02d1350 <col:49> 'P' lvalue ParmVar 0x55eac029fb98 'parser' 'P'
|         |-DeclRefExpr 0x55eac02d1370 <col:57> 'T' lvalue ParmVar 0x55eac029fc38 'x' 'T &'
|         `-DeclRefExpr 0x55eac02d1390 <col:60> 'const V' lvalue ParmVar 0x55eac029fcd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55eac02a04c8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55eac029fee0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac029ff58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55eac029ffd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55eac02a0428 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55eac02a00a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a0120 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02a0198 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a0238 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55eac02a02d8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55eac02d1598 <col:95, line:467:5>
|     |-CallExpr 0x55eac02d1510 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55eac02d1420 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55eac02d1460 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55eac02d1470 <col:37> 'const char *' lvalue ParmVar 0x55eac02a00a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55eac02d1490 <col:46> 'int' lvalue ParmVar 0x55eac02a0120 'flags' 'int'
|     | |-DeclRefExpr 0x55eac02d14b0 <col:53> 'P' lvalue ParmVar 0x55eac02a0198 'parser' 'P'
|     | |-DeclRefExpr 0x55eac02d14d0 <col:61> 'T' lvalue ParmVar 0x55eac02a0238 'x' 'T &'
|     | `-DeclRefExpr 0x55eac02d14f0 <col:64> 'const V' lvalue ParmVar 0x55eac02a02d8 'default_value' 'const V &'
|     `-ReturnStmt 0x55eac02d1588 <line:466:9, col:17>
|       `-UnaryOperator 0x55eac02d1570 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d1560 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac02a0aa8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55eac02a0548 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a05c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55eac02a0648 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55eac02a0a08 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55eac02a0710 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a0788 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a0828 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55eac02a08c8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55eac02d1740 <col:63, line:481:5>
|     `-ReturnStmt 0x55eac02d1730 <line:480:9, col:47>
|       `-CallExpr 0x55eac02d16e8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d15c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d1648 <col:21> 'const char *' lvalue ParmVar 0x55eac02a0710 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02d1668 <col:30> 'int' 0
|         |-DeclRefExpr 0x55eac02d1688 <col:33> 'P' lvalue ParmVar 0x55eac02a0788 'parser' 'P'
|         |-DeclRefExpr 0x55eac02d16a8 <col:41> 'T1' lvalue ParmVar 0x55eac02a0828 'x1' 'T1 &'
|         `-DeclRefExpr 0x55eac02d16c8 <col:45> 'T2' lvalue ParmVar 0x55eac02a08c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55eac02a5308 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55eac02a0b20 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a0b98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55eac02a0c18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55eac02a5268 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55eac02a4fc0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a5038 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a50d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55eac02a5178 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55eac02d18e0 <col:65, line:485:5>
|     `-ReturnStmt 0x55eac02d18d0 <line:484:9, col:55>
|       `-CallExpr 0x55eac02d1888 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d1768 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d17e8 <col:21> 'const char *' lvalue ParmVar 0x55eac02a4fc0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d1808 <col:30> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int'
|         |-DeclRefExpr 0x55eac02d1828 <col:41> 'P' lvalue ParmVar 0x55eac02a5038 'parser' 'P'
|         |-DeclRefExpr 0x55eac02d1848 <col:49> 'T1' lvalue ParmVar 0x55eac02a50d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55eac02d1868 <col:53> 'T2' lvalue ParmVar 0x55eac02a5178 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55eac02a5888 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55eac02a5380 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a53f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55eac02a5478 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55eac02a57e8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55eac02a5540 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a55b8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a5658 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55eac02a56f8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55eac02d1a80 <col:65, line:489:5>
|     `-ReturnStmt 0x55eac02d1a70 <line:488:9, col:56>
|       `-CallExpr 0x55eac02d1a28 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d1908 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d1988 <col:21> 'const char *' lvalue ParmVar 0x55eac02a5540 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d19a8 <col:30> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int'
|         |-DeclRefExpr 0x55eac02d19c8 <col:42> 'P' lvalue ParmVar 0x55eac02a55b8 'parser' 'P'
|         |-DeclRefExpr 0x55eac02d19e8 <col:50> 'T1' lvalue ParmVar 0x55eac02a5658 'x1' 'T1 &'
|         `-DeclRefExpr 0x55eac02d1a08 <col:54> 'T2' lvalue ParmVar 0x55eac02a56f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55eac02a5e08 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55eac02a5900 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a5978 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55eac02a59f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55eac02a5d68 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55eac02a5ac0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a5b38 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a5bd8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55eac02a5c78 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55eac02d1cd0 <col:66, line:493:5>
|     `-ReturnStmt 0x55eac02d1cc0 <line:492:9, col:68>
|       `-CallExpr 0x55eac02d1c78 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d1aa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d1b28 <col:21> 'const char *' lvalue ParmVar 0x55eac02a5ac0 'keyword' 'const char *'
|         |-BinaryOperator 0x55eac02d1bf8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55eac02d1ba8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55eac02d1b88 <col:30> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55eac02d1be0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55eac02d1bc0 <col:42> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55eac02d1c18 <col:54> 'P' lvalue ParmVar 0x55eac02a5b38 'parser' 'P'
|         |-DeclRefExpr 0x55eac02d1c38 <col:62> 'T1' lvalue ParmVar 0x55eac02a5bd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55eac02d1c58 <col:66> 'T2' lvalue ParmVar 0x55eac02a5c78 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55eac02a6468 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55eac02a5e80 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a5ef8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55eac02a5f78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55eac02a63c8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55eac02a6040 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a60c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02a6138 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a61d8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55eac02a6278 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55eac02d1e60 <col:74, line:498:5>
|     |-CallExpr 0x55eac02d1dd8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55eac02d1ce8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55eac02d1d28 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55eac02d1d38 <col:30> 'const char *' lvalue ParmVar 0x55eac02a6040 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55eac02d1d58 <col:39> 'int' lvalue ParmVar 0x55eac02a60c0 'flags' 'int'
|     | |-DeclRefExpr 0x55eac02d1d78 <col:46> 'P' lvalue ParmVar 0x55eac02a6138 'parser' 'P'
|     | |-DeclRefExpr 0x55eac02d1d98 <col:54> 'T1' lvalue ParmVar 0x55eac02a61d8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55eac02d1db8 <col:58> 'T2' lvalue ParmVar 0x55eac02a6278 'x2' 'T2 &'
|     `-ReturnStmt 0x55eac02d1e50 <line:497:9, col:17>
|       `-UnaryOperator 0x55eac02d1e38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d1e28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac02a67c8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55eac02a64e8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55eac02a6728 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55eac02a65a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a6618 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55eac02d1fa8 <col:52, line:509:5>
|     `-ReturnStmt 0x55eac02d1f98 <line:508:9, col:44>
|       `-CallExpr 0x55eac02d1f60 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d1e90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d1f00 <col:26> 'const char *' lvalue ParmVar 0x55eac02a65a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02d1f20 <col:35> 'int' 0
|         `-DeclRefExpr 0x55eac02d1f40 <col:38> 'P' lvalue ParmVar 0x55eac02a6618 'parser' 'P'
|-FunctionTemplateDecl 0x55eac02a6ac8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55eac02a6830 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55eac02a6a28 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55eac02a68e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a6958 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55eac02d20e8 <col:54, line:513:5>
|     `-ReturnStmt 0x55eac02d20d8 <line:512:9, col:52>
|       `-CallExpr 0x55eac02d20a0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d1fd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d2040 <col:26> 'const char *' lvalue ParmVar 0x55eac02a68e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d2060 <col:35> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int'
|         `-DeclRefExpr 0x55eac02d2080 <col:46> 'P' lvalue ParmVar 0x55eac02a6958 'parser' 'P'
|-FunctionTemplateDecl 0x55eac02a6dc8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55eac02a6b30 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55eac02a6d28 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55eac02a6be0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a6c58 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55eac02d2228 <col:54, line:517:5>
|     `-ReturnStmt 0x55eac02d2218 <line:516:9, col:53>
|       `-CallExpr 0x55eac02d21e0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d2110 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d2180 <col:26> 'const char *' lvalue ParmVar 0x55eac02a6be0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d21a0 <col:35> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int'
|         `-DeclRefExpr 0x55eac02d21c0 <col:47> 'P' lvalue ParmVar 0x55eac02a6c58 'parser' 'P'
|-FunctionTemplateDecl 0x55eac02a70c8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55eac02a6e30 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55eac02a7028 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55eac02a6ee0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a6f58 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55eac02d2418 <col:55, line:521:5>
|     `-ReturnStmt 0x55eac02d2408 <line:520:9, col:65>
|       `-CallExpr 0x55eac02d23d0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d2250 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d22c0 <col:26> 'const char *' lvalue ParmVar 0x55eac02a6ee0 'keyword' 'const char *'
|         |-BinaryOperator 0x55eac02d2390 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55eac02d2340 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55eac02d2320 <col:35> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55eac02d2378 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55eac02d2358 <col:47> 'const int' lvalue Var 0x55eac029ba60 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55eac02d23b0 <col:59> 'P' lvalue ParmVar 0x55eac02a6f58 'parser' 'P'
|-FunctionTemplateDecl 0x55eac02a7498 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55eac02a7130 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55eac02a73f8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55eac02a71e0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a7260 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02a72d8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55eac02d2558 <col:63, line:526:5>
|     |-CallExpr 0x55eac02d24e0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55eac02d2430 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55eac02d2470 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55eac02d2480 <col:35> 'const char *' lvalue ParmVar 0x55eac02a71e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55eac02d24a0 <col:44> 'int' lvalue ParmVar 0x55eac02a7260 'flags' 'int'
|     | `-DeclRefExpr 0x55eac02d24c0 <col:51> 'P' lvalue ParmVar 0x55eac02a72d8 'parser' 'P'
|     `-ReturnStmt 0x55eac02d2548 <line:525:9, col:17>
|       `-UnaryOperator 0x55eac02d2530 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d2520 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac02a78e8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55eac02a7508 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a7588 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02a7848 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55eac02a7648 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a76c0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a7768 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d26b0 <col:58, line:541:5>
|     `-ReturnStmt 0x55eac02d26a0 <line:540:9, col:39>
|       `-CallExpr 0x55eac02d2668 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d2588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d2608 <col:21> 'const char *' lvalue ParmVar 0x55eac02a7648 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d2628 <col:30> 'P' lvalue ParmVar 0x55eac02a76c0 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d2648 <col:38> 'T' lvalue ParmVar 0x55eac02a7768 'x' 'T &'
|-FunctionTemplateDecl 0x55eac02a7d38 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55eac02a7958 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a79d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02a7c98 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55eac02a7a98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a7b10 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a7bb8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d27e8 <col:60, line:545:5>
|     `-ReturnStmt 0x55eac02d27d8 <line:544:9, col:41>
|       `-CallExpr 0x55eac02d27a0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d26d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d2740 <col:23> 'const char *' lvalue ParmVar 0x55eac02a7a98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d2760 <col:32> 'P' lvalue ParmVar 0x55eac02a7b10 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d2780 <col:40> 'T' lvalue ParmVar 0x55eac02a7bb8 'x' 'T &'
|-FunctionTemplateDecl 0x55eac02a8188 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55eac02a7da8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a7e28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02a80e8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55eac02a7ee8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a7f60 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a8008 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d2920 <col:60, line:549:5>
|     `-ReturnStmt 0x55eac02d2910 <line:548:9, col:41>
|       `-CallExpr 0x55eac02d28d8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d2810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d2878 <col:23> 'const char *' lvalue ParmVar 0x55eac02a7ee8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d2898 <col:32> 'P' lvalue ParmVar 0x55eac02a7f60 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d28b8 <col:40> 'T' lvalue ParmVar 0x55eac02a8008 'x' 'T &'
|-FunctionTemplateDecl 0x55eac02a85d8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55eac02a81f8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a8278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02a8538 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55eac02a8338 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a83b0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a8458 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d2a58 <col:61, line:553:5>
|     `-ReturnStmt 0x55eac02d2a48 <line:552:9, col:42>
|       `-CallExpr 0x55eac02d2a10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d2948 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d29b0 <col:24> 'const char *' lvalue ParmVar 0x55eac02a8338 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d29d0 <col:33> 'P' lvalue ParmVar 0x55eac02a83b0 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d29f0 <col:41> 'T' lvalue ParmVar 0x55eac02a8458 'x' 'T &'
|-FunctionTemplateDecl 0x55eac02a8ab8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55eac02a8648 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a86c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02a8a18 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55eac02a8788 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a8808 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02a8880 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a8928 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d2bd0 <col:69, line:557:5>
|     `-ReturnStmt 0x55eac02d2bc0 <line:556:9, col:46>
|       `-CallExpr 0x55eac02d2b80 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d2a80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d2b00 <col:21> 'const char *' lvalue ParmVar 0x55eac02a8788 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d2b20 <col:30> 'int' lvalue ParmVar 0x55eac02a8808 'flags' 'int'
|         |-DeclRefExpr 0x55eac02d2b40 <col:37> 'P' lvalue ParmVar 0x55eac02a8880 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d2b60 <col:45> 'T' lvalue ParmVar 0x55eac02a8928 'x' 'T &'
|-FunctionTemplateDecl 0x55eac02a8dc8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55eac02a8b30 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55eac02a8d28 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55eac02a8be0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a8c58 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55eac02d2d10 <col:56, line:571:5>
|     `-ReturnStmt 0x55eac02d2d00 <line:570:9, col:48>
|       `-CallExpr 0x55eac02d2cc8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d2bf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d2c68 <col:30> 'const char *' lvalue ParmVar 0x55eac02a8be0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02d2c88 <col:39> 'int' 0
|         `-DeclRefExpr 0x55eac02d2ca8 <col:42> 'P' lvalue ParmVar 0x55eac02a8c58 'parser' 'P'
|-FunctionTemplateDecl 0x55eac02a9158 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55eac02a8e30 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55eac02a90b8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55eac02a8ee0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a8f60 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02a8fd8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55eac02d2ee0 <col:67, line:576:5>
|     |-CallExpr 0x55eac02d2e68 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55eac02d2d28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55eac02d2d68 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55eac02d2d78 <col:39> 'const char *' lvalue ParmVar 0x55eac02a8ee0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55eac02d2e28 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55eac02d2dd8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55eac02d2d98 <col:48> 'int' lvalue ParmVar 0x55eac02a8f60 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55eac02d2e10 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55eac02d2df0 <col:56> 'const int' lvalue Var 0x55eac029bc50 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55eac02d2e48 <col:68> 'P' lvalue ParmVar 0x55eac02a8fd8 'parser' 'P'
|     `-ReturnStmt 0x55eac02d2ed0 <line:575:9, col:17>
|       `-UnaryOperator 0x55eac02d2eb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d2ea8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac02a95a8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55eac02a91c8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a9248 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02a9508 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55eac02a9308 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a9380 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a9428 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d3050 <col:62, line:592:5>
|     `-ReturnStmt 0x55eac02d3040 <line:591:9, col:51>
|       `-CallExpr 0x55eac02d3000 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d2f10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d2f80 <col:30> 'const char *' lvalue ParmVar 0x55eac02a9308 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02d2fa0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55eac02d2fc0 <col:42> 'P' lvalue ParmVar 0x55eac02a9380 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d2fe0 <col:50> 'T' lvalue ParmVar 0x55eac02a9428 'x' 'T &'
|-FunctionTemplateDecl 0x55eac02a9a88 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55eac02a9618 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a9698 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02a99e8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55eac02a9758 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a97d8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02a9850 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a98f8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d3248 <col:73, line:597:5>
|     |-CallExpr 0x55eac02d31c8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55eac02d3068 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55eac02d30a8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55eac02d30b8 <col:39> 'const char *' lvalue ParmVar 0x55eac02a9758 'keyword' 'const char *'
|     | |-BinaryOperator 0x55eac02d3168 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55eac02d3118 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55eac02d30d8 <col:48> 'int' lvalue ParmVar 0x55eac02a97d8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55eac02d3150 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55eac02d3130 <col:56> 'const int' lvalue Var 0x55eac029bc50 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55eac02d3188 <col:68> 'P' lvalue ParmVar 0x55eac02a9850 'parser' 'P'
|     | `-DeclRefExpr 0x55eac02d31a8 <col:76> 'T' lvalue ParmVar 0x55eac02a98f8 'x' 'T &'
|     `-ReturnStmt 0x55eac02d3238 <line:596:9, col:17>
|       `-UnaryOperator 0x55eac02d3220 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d3210 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac02aa038 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55eac02a9b00 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02a9b78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02a9f98 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55eac02a9c38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02a9cb0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02a9e70 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55eac02d33b8 <col:65, line:614:5>
|     `-ReturnStmt 0x55eac02d33a8 <line:613:9, col:46>
|       `-CallExpr 0x55eac02d3368 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d3278 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d32e8 <col:25> 'const char *' lvalue ParmVar 0x55eac02a9c38 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02d3308 <col:34> 'int' 0
|         |-DeclRefExpr 0x55eac02d3328 <col:37> 'P' lvalue ParmVar 0x55eac02a9cb0 'parser' 'P'
|         `-DeclRefExpr 0x55eac02d3348 <col:45> 'Vector<T>' lvalue ParmVar 0x55eac02a9e70 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55eac02aa468 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55eac02aa0a8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55eac02aa3c8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55eac02aa160 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02aa2b0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55eac02d35d0 <col:55, line:618:5>
|     `-ReturnStmt 0x55eac02d35c0 <line:617:9, col:55>
|       `-CallExpr 0x55eac02d3580 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d33e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d3450 <col:25> 'const char *' lvalue ParmVar 0x55eac02aa160 'keyword' 'const char *'
|         |-IntegerLiteral 0x55eac02d3470 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55eac02d3540 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55eac02d3560 <col:54> 'Vector<T>' lvalue ParmVar 0x55eac02aa2b0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55eac02aaa38 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55eac02aa4d0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02aa548 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02aa998 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55eac02aa608 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02aa688 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02aa700 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02aa850 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55eac02d37c8 <col:76, line:623:5>
|     |-CallExpr 0x55eac02d3748 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55eac02d35e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55eac02d3628 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55eac02d3638 <col:34> 'const char *' lvalue ParmVar 0x55eac02aa608 'keyword' 'const char *'
|     | |-BinaryOperator 0x55eac02d36e8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55eac02d3698 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55eac02d3658 <col:43> 'int' lvalue ParmVar 0x55eac02aa688 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55eac02d36d0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55eac02d36b0 <col:51> 'const int' lvalue Var 0x55eac029bc50 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55eac02d3708 <col:63> 'P' lvalue ParmVar 0x55eac02aa700 'parser' 'P'
|     | `-DeclRefExpr 0x55eac02d3728 <col:71> 'Vector<T>' lvalue ParmVar 0x55eac02aa850 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55eac02d37b8 <line:622:9, col:17>
|       `-UnaryOperator 0x55eac02d37a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d3790 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac02aaf78 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55eac02aaab0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02aab28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02aaed8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55eac02aabe8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02aac68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02aadb0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55eac02d3a30 <col:66, line:627:5>
|     `-ReturnStmt 0x55eac02d3a20 <line:626:9, col:59>
|       `-CallExpr 0x55eac02d39e0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55eac02d37f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55eac02d3868 <col:25> 'const char *' lvalue ParmVar 0x55eac02aabe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55eac02d3888 <col:34> 'int' lvalue ParmVar 0x55eac02aac68 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55eac02d39a0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55eac02d39c0 <col:58> 'Vector<T>' lvalue ParmVar 0x55eac02aadb0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55eac02ab008 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55eac02d3ab0 <col:25, line:633:5>
|   `-ReturnStmt 0x55eac02d3aa0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55eac02d3a88 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55eac02d3a58 <col:16> 'const bool' lvalue ->_status 0x55eac02b7f28
|         `-CXXThisExpr 0x55eac02d3a48 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55eac02ab188 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55eac02ab0c0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55eac02d3b98 <col:27, line:639:5>
|   |-BinaryOperator 0x55eac02d3b40 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55eac02d3ac8 <col:9> 'bool' lvalue ParmVar 0x55eac02ab0c0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55eac02d3b28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55eac02d3af8 <col:13> 'bool' lvalue ->_status 0x55eac02b7f28
|   |     `-CXXThisExpr 0x55eac02d3ae8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55eac02d3b88 <line:638:9, col:17>
|     `-UnaryOperator 0x55eac02d3b70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eac02d3b60 <col:17> 'Args *' this
|-CXXMethodDecl 0x55eac02ab308 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55eac02ab248 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55eac02d3c88 <col:39, line:644:5>
|   |-BinaryOperator 0x55eac02d3c30 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55eac02d3bb8 <col:9> 'bool' lvalue ParmVar 0x55eac02ab248 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55eac02d3c18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55eac02d3be8 <col:13> 'const bool' lvalue ->_status 0x55eac02b7f28
|   |     `-CXXThisExpr 0x55eac02d3bd8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55eac02d3c78 <line:643:9, col:17>
|     `-UnaryOperator 0x55eac02d3c60 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eac02d3c50 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55eac02ab3d0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55eac02d3d30 <col:30, line:651:5>
|   `-ReturnStmt 0x55eac02d3d20 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55eac02d3d08 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55eac02d3cd8 <col:16> 'bool' lvalue ->_read_status 0x55eac0292770
|         `-ImplicitCastExpr 0x55eac02d3cb8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55eac02d3ca8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55eac02ab518 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55eac02ab488 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55eac02d3e38 <col:32, line:658:5>
|   |-BinaryOperator 0x55eac02d3de0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55eac02d3d48 <col:9> 'bool' lvalue ParmVar 0x55eac02ab488 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55eac02d3dc8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55eac02d3d98 <col:13> 'bool' lvalue ->_read_status 0x55eac0292770
|   |     `-ImplicitCastExpr 0x55eac02d3d78 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55eac02d3d68 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55eac02d3e28 <line:657:9, col:17>
|     `-UnaryOperator 0x55eac02d3e10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eac02d3e00 <col:17> 'Args *' this
|-CXXMethodDecl 0x55eac02ab668 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55eac02ab5d8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55eac02d3f48 <col:44, line:663:5>
|   |-BinaryOperator 0x55eac02d3ef0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55eac02d3e58 <col:9> 'bool' lvalue ParmVar 0x55eac02ab5d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55eac02d3ed8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55eac02d3ea8 <col:13> 'bool' lvalue ->_read_status 0x55eac0292770
|   |     `-ImplicitCastExpr 0x55eac02d3e88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55eac02d3e78 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55eac02d3f38 <line:662:9, col:17>
|     `-UnaryOperator 0x55eac02d3f20 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eac02d3f10 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55eac02ab730 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55eac02ab7f8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55eac02ab8c0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55eac02ab988 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55eac02abc98 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55eac02aba28 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55eac02abbf8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55eac02abb08 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d4310 <col:19, line:706:5>
|     `-IfStmt 0x55eac02d42e8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55eac02d4048 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55eac02d4218 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55eac02d41e8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55eac02d41a8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55eac02d40a0 <col:42> '<bound member function type>' ->simple_slot 0x55eac02ced80
|       |     | `-CXXThisExpr 0x55eac02d4090 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55eac02d4148 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55eac02d40f0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55eac02451e8 0x55eac0243bf8 0x55eac0004858
|       |     | `-DeclRefExpr 0x55eac02d40d0 <col:55> 'T' lvalue ParmVar 0x55eac02abb08 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55eac02d4188 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55eac02d42d8 <line:705:13, col:34>
|         `-CallExpr 0x55eac02d42b0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55eac02d4238 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55eac02d4290 <col:33> 'T' lvalue ParmVar 0x55eac02abb08 'x' 'T &'
|-FunctionTemplateDecl 0x55eac02abf68 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55eac02abcf8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55eac02abec8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55eac02abdd8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55eac02d46f0 <col:31, line:717:5>
|     |-DeclStmt 0x55eac02d4450 <line:713:9, col:23>
|     | `-VarDecl 0x55eac02d4338 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55eac02d4428 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55eac02d43b0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55eac02d4408 <col:21> 'T' lvalue ParmVar 0x55eac02abdd8 'x' 'T &'
|     |-IfStmt 0x55eac02d46a0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55eac02d4548 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55eac02d4680 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55eac02d4620 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55eac02d45b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|     |   | `-DeclRefExpr 0x55eac02d4590 <col:14> 'T *' lvalue Var 0x55eac02d4338 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55eac02d4660 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55eac02d46d8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55eac02d46b8 <col:16> 'T *' lvalue Var 0x55eac02d4338 's' 'T *'
|-FunctionTemplateDecl 0x55eac02ac378 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55eac02abfc8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55eac02ac048 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55eac02ac2d8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55eac02ac128 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55eac02ac1c8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55eac02d4a00 <col:37, line:726:5>
|     |-IfStmt 0x55eac02d4990 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55eac02d49b0 <line:723:13, col:26>
|     | | `-VarDecl 0x55eac02d4758 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55eac02d4848 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55eac02d47d0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55eac02d4828 <col:25> 'T' lvalue ParmVar 0x55eac02ac128 'x' 'T &'
|     | |-DeclRefExpr 0x55eac02d4870 <col:16> 'T *' lvalue Var 0x55eac02d4758 's' 'T *'
|     | `-BinaryOperator 0x55eac02d4970 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55eac02d4920 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55eac02d48b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|     |   | `-DeclRefExpr 0x55eac02d4890 <col:14> 'T *' lvalue Var 0x55eac02d4758 's' 'T *'
|     |   `-DeclRefExpr 0x55eac02d4950 <col:18> 'const V' lvalue ParmVar 0x55eac02ac1c8 'value' 'const V &'
|     `-ReturnStmt 0x55eac02d49f0 <line:725:9, col:17>
|       `-UnaryOperator 0x55eac02d49d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac02d49c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55eac02ac778 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55eac02ac3e0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55eac02ac6d8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55eac02ac490 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02ac510 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02ac5b8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55eac02d5820 <col:65, line:737:5>
|     |-DeclStmt 0x55eac02d4a98 <line:732:9, col:26>
|     | `-VarDecl 0x55eac02d4a30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55eac02d57e8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55eac02d5808 <line:733:13, col:58>
|       | `-VarDecl 0x55eac02d4ac0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55eac02d4ca0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55eac02d4c70 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55eac02d4c58 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55eac02d4c38 <col:26, col:58> 'String' (CXXTemporary 0x55eac02d4c38)
|       |           `-CXXMemberCallExpr 0x55eac02d4bc8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55eac02d4b38 <col:26> '<bound member function type>' ->find 0x55eac02cca88
|       |             | `-CXXThisExpr 0x55eac02d4b28 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55eac02d4c00 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55eac02d4b68 <col:31> 'const char *' lvalue ParmVar 0x55eac02ac490 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55eac02d4c18 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55eac02d4b88 <col:40> 'int' lvalue ParmVar 0x55eac02ac510 'flags' 'int'
|       |             `-DeclRefExpr 0x55eac02d4ba8 <col:47> 'Args::Slot *' lvalue Var 0x55eac02d4a30 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55eac02d4d58 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55eac02d4d40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55eac02d4d20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55eac02d4cf0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|       |       `-ImplicitCastExpr 0x55eac02d4cd8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55eac02d4cb8 <col:20> 'String' lvalue Var 0x55eac02d4ac0 'str' 'String'
|       `-CompoundStmt 0x55eac02d57c8 <col:61, line:736:9>
|         |-DeclStmt 0x55eac02d5210 <line:734:13, col:76>
|         | `-VarDecl 0x55eac02d4da8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55eac02d51e0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55eac02d5150 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55eac02d5198 <col:60> 'T' lvalue ParmVar 0x55eac02ac5b8 'variable' 'T &'
|         |     `-UnaryOperator 0x55eac02d51c8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55eac02d51b8 <col:71> 'Args *' this
|         `-CallExpr 0x55eac02d5798 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55eac02d5238 <col:13> '<bound member function type>' ->postparse 0x55eac02ccc98
|           | `-CXXThisExpr 0x55eac02d5228 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55eac02d5758 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55eac02d5268 <col:23> 'T *' lvalue Var 0x55eac02d4da8 's' 'T *'
|           | `-CallExpr 0x55eac02d5718 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55eac02d54f0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55eac02d55f0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55eac02d5610 <col:86> 'String' lvalue Var 0x55eac02d4ac0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55eac02d56c0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55eac02d5650 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|           |   | `-DeclRefExpr 0x55eac02d5630 <col:92> 'T *' lvalue Var 0x55eac02d4da8 's' 'T *'
|           |   `-UnaryOperator 0x55eac02d5700 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55eac02d56f0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55eac02d5778 <col:103> 'Args::Slot *' lvalue Var 0x55eac02d4a30 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55eac02accc8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55eac02ac7e8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55eac02ac868 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55eac02acc28 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55eac02ac928 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02ac9a8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02aca48 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55eac02acae8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55eac02d66c0 <col:88, line:745:5>
|     |-DeclStmt 0x55eac02d58b8 <line:741:9, col:26>
|     | `-VarDecl 0x55eac02d5850 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55eac02d5ad8 <line:742:9, col:55>
|     | `-VarDecl 0x55eac02d58e0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55eac02d5ac0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55eac02d5a90 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55eac02d5a78 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55eac02d5a58 <col:22, col:54> 'String' (CXXTemporary 0x55eac02d5a58)
|     |           `-CXXMemberCallExpr 0x55eac02d59e8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55eac02d5958 <col:22> '<bound member function type>' ->find 0x55eac02cca88
|     |             | `-CXXThisExpr 0x55eac02d5948 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55eac02d5a20 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55eac02d5988 <col:27> 'const char *' lvalue ParmVar 0x55eac02ac928 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55eac02d5a38 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55eac02d59a8 <col:36> 'int' lvalue ParmVar 0x55eac02ac9a8 'flags' 'int'
|     |             `-DeclRefExpr 0x55eac02d59c8 <col:43> 'Args::Slot *' lvalue Var 0x55eac02d5850 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55eac02d5eb0 <line:743:9, col:72>
|     | `-VarDecl 0x55eac02d5b28 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55eac02d5e80 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55eac02d5df0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55eac02d5e38 <col:56> 'T' lvalue ParmVar 0x55eac02aca48 'variable' 'T &'
|     |     `-UnaryOperator 0x55eac02d5e68 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55eac02d5e58 <col:67> 'Args *' this
|     `-CallExpr 0x55eac02d6690 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55eac02d5ed8 <col:9> '<bound member function type>' ->postparse 0x55eac02ccc98
|       | `-CXXThisExpr 0x55eac02d5ec8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55eac02d6650 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55eac02d5f08 <col:19> 'T *' lvalue Var 0x55eac02d5b28 's' 'T *'
|       | `-ParenExpr 0x55eac02d6630 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55eac02d6600 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55eac02d65e8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55eac02d65d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55eac02d65b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55eac02d6580 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|       |     |       `-ImplicitCastExpr 0x55eac02d6568 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55eac02d5f28 <col:25> 'String' lvalue Var 0x55eac02d58e0 'str' 'String'
|       |     |-CallExpr 0x55eac02d63d8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55eac02d61b0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55eac02d62b0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55eac02d62d0 <col:89> 'String' lvalue Var 0x55eac02d58e0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55eac02d6380 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55eac02d6310 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|       |     | | `-DeclRefExpr 0x55eac02d62f0 <col:95> 'T *' lvalue Var 0x55eac02d5b28 's' 'T *'
|       |     | `-UnaryOperator 0x55eac02d63c0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55eac02d63b0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55eac02d6548 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55eac02d6528 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55eac02d64f8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55eac02d64a8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55eac02d6438 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|       |         | | `-DeclRefExpr 0x55eac02d6418 <col:109> 'T *' lvalue Var 0x55eac02d5b28 's' 'T *'
|       |         | `-DeclRefExpr 0x55eac02d64d8 <col:113> 'const V' lvalue ParmVar 0x55eac02acae8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55eac02d6518 <col:120> 'bool' true
|       `-DeclRefExpr 0x55eac02d6670 <col:128> 'Args::Slot *' lvalue Var 0x55eac02d5850 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55eac02b42d8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55eac02acd40 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02acdb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02b4238 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55eac02ace78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02b3fe0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02b4058 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02b40f8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55eac02d9568 <col:75, line:754:5>
|     |-DeclStmt 0x55eac02d6768 <line:749:9, col:26>
|     | `-VarDecl 0x55eac02d6700 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55eac02d9530 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55eac02d9550 <line:750:13, col:58>
|       | `-VarDecl 0x55eac02d6790 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55eac02d6970 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55eac02d6940 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55eac02d6928 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55eac02d6908 <col:26, col:58> 'String' (CXXTemporary 0x55eac02d6908)
|       |           `-CXXMemberCallExpr 0x55eac02d6898 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55eac02d6808 <col:26> '<bound member function type>' ->find 0x55eac02cca88
|       |             | `-CXXThisExpr 0x55eac02d67f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55eac02d68d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55eac02d6838 <col:31> 'const char *' lvalue ParmVar 0x55eac02ace78 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55eac02d68e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55eac02d6858 <col:40> 'int' lvalue ParmVar 0x55eac02b3fe0 'flags' 'int'
|       |             `-DeclRefExpr 0x55eac02d6878 <col:47> 'Args::Slot *' lvalue Var 0x55eac02d6700 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55eac02d6a28 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55eac02d6a10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55eac02d69f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55eac02d69c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|       |       `-ImplicitCastExpr 0x55eac02d69a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55eac02d6988 <col:20> 'String' lvalue Var 0x55eac02d6790 'str' 'String'
|       `-CompoundStmt 0x55eac02d9510 <col:61, line:753:9>
|         |-DeclStmt 0x55eac02d90b0 <line:751:13, col:63>
|         | `-VarDecl 0x55eac02d6a78 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55eac02d9080 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55eac02d8ff0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55eac02d9038 <col:47> 'T' lvalue ParmVar 0x55eac02b40f8 'variable' 'T &'
|         |     `-UnaryOperator 0x55eac02d9068 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55eac02d9058 <col:58> 'Args *' this
|         `-CallExpr 0x55eac02d94e0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55eac02d90d8 <col:13> '<bound member function type>' ->postparse 0x55eac02ccc98
|           | `-CXXThisExpr 0x55eac02d90c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55eac02d94a0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55eac02d9108 <col:23> 'T *' lvalue Var 0x55eac02d6a78 's' 'T *'
|           | `-CallExpr 0x55eac02d9460 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55eac02d92f0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55eac02d9338 <col:56> 'P' lvalue ParmVar 0x55eac02b4058 'parser' 'P'
|           |   |-DeclRefExpr 0x55eac02d9358 <col:64> 'String' lvalue Var 0x55eac02d6790 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55eac02d9408 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55eac02d9398 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|           |   | `-DeclRefExpr 0x55eac02d9378 <col:70> 'T *' lvalue Var 0x55eac02d6a78 's' 'T *'
|           |   `-UnaryOperator 0x55eac02d9448 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55eac02d9438 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55eac02d94c0 <col:81> 'Args::Slot *' lvalue Var 0x55eac02d6700 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55eac02b4938 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55eac02b4350 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55eac02b43c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55eac02b4448 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55eac02b4898 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55eac02b4510 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02b4590 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02b4608 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02b46a8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55eac02b4748 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55eac02da2f8 <col:98, line:762:5>
|     |-DeclStmt 0x55eac02d9600 <line:758:9, col:26>
|     | `-VarDecl 0x55eac02d9598 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55eac02d9820 <line:759:9, col:55>
|     | `-VarDecl 0x55eac02d9628 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55eac02d9808 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55eac02d97d8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55eac02d97c0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55eac02d97a0 <col:22, col:54> 'String' (CXXTemporary 0x55eac02d97a0)
|     |           `-CXXMemberCallExpr 0x55eac02d9730 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55eac02d96a0 <col:22> '<bound member function type>' ->find 0x55eac02cca88
|     |             | `-CXXThisExpr 0x55eac02d9690 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55eac02d9768 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55eac02d96d0 <col:27> 'const char *' lvalue ParmVar 0x55eac02b4510 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55eac02d9780 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55eac02d96f0 <col:36> 'int' lvalue ParmVar 0x55eac02b4590 'flags' 'int'
|     |             `-DeclRefExpr 0x55eac02d9710 <col:43> 'Args::Slot *' lvalue Var 0x55eac02d9598 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55eac02d9c40 <line:760:9, col:59>
|     | `-VarDecl 0x55eac02d9878 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55eac02d9c10 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55eac02d9b80 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55eac02d9bc8 <col:43> 'T' lvalue ParmVar 0x55eac02b46a8 'variable' 'T &'
|     |     `-UnaryOperator 0x55eac02d9bf8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55eac02d9be8 <col:54> 'Args *' this
|     `-CallExpr 0x55eac02da2c8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55eac02d9c68 <col:9> '<bound member function type>' ->postparse 0x55eac02ccc98
|       | `-CXXThisExpr 0x55eac02d9c58 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55eac02da288 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55eac02d9c98 <col:19> 'T *' lvalue Var 0x55eac02d9878 's' 'T *'
|       | `-ParenExpr 0x55eac02da268 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55eac02da238 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55eac02da220 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55eac02da208 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55eac02da1e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55eac02da1b8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|       |     |       `-ImplicitCastExpr 0x55eac02da1a0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55eac02d9cb8 <col:25> 'String' lvalue Var 0x55eac02d9628 'str' 'String'
|       |     |-CallExpr 0x55eac02da010 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55eac02d9ea0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55eac02d9ee8 <col:59> 'P' lvalue ParmVar 0x55eac02b4608 'parser' 'P'
|       |     | |-DeclRefExpr 0x55eac02d9f08 <col:67> 'String' lvalue Var 0x55eac02d9628 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55eac02d9fb8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55eac02d9f48 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|       |     | | `-DeclRefExpr 0x55eac02d9f28 <col:73> 'T *' lvalue Var 0x55eac02d9878 's' 'T *'
|       |     | `-UnaryOperator 0x55eac02d9ff8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55eac02d9fe8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55eac02da180 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55eac02da160 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55eac02da130 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55eac02da0e0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55eac02da070 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|       |         | | `-DeclRefExpr 0x55eac02da050 <col:87> 'T *' lvalue Var 0x55eac02d9878 's' 'T *'
|       |         | `-DeclRefExpr 0x55eac02da110 <col:91> 'const V' lvalue ParmVar 0x55eac02b4748 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55eac02da150 <col:98> 'bool' true
|       `-DeclRefExpr 0x55eac02da2a8 <col:106> 'Args::Slot *' lvalue Var 0x55eac02d9598 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55eac02b4fa8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55eac02b49b8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02b4a38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55eac02b4ab8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55eac02b4f08 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55eac02b4b80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02b4c00 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02b4c78 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02b4d18 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55eac02b4db8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55eac02db2d8 <col:60, line:773:5>
|     |-DeclStmt 0x55eac02da3a0 <line:767:9, col:26>
|     | `-VarDecl 0x55eac02da338 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55eac02db2a0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55eac02db2c0 <line:768:13, col:58>
|       | `-VarDecl 0x55eac02da3c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55eac02da5a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55eac02da578 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55eac02da560 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55eac02da540 <col:26, col:58> 'String' (CXXTemporary 0x55eac02da540)
|       |           `-CXXMemberCallExpr 0x55eac02da4d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55eac02da440 <col:26> '<bound member function type>' ->find 0x55eac02cca88
|       |             | `-CXXThisExpr 0x55eac02da430 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55eac02da508 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55eac02da470 <col:31> 'const char *' lvalue ParmVar 0x55eac02b4b80 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55eac02da520 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55eac02da490 <col:40> 'int' lvalue ParmVar 0x55eac02b4c00 'flags' 'int'
|       |             `-DeclRefExpr 0x55eac02da4b0 <col:47> 'Args::Slot *' lvalue Var 0x55eac02da338 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55eac02da660 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55eac02da648 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55eac02da628 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55eac02da5f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|       |       `-ImplicitCastExpr 0x55eac02da5e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55eac02da5c0 <col:20> 'String' lvalue Var 0x55eac02da3c8 'str' 'String'
|       `-CompoundStmt 0x55eac02db278 <col:61, line:772:9>
|         |-DeclStmt 0x55eac02da9a0 <line:769:13, col:66>
|         | `-VarDecl 0x55eac02da6b8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55eac02da970 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55eac02da8e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55eac02da928 <col:49> 'T1' lvalue ParmVar 0x55eac02b4d18 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55eac02da958 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55eac02da948 <col:61> 'Args *' this
|         |-DeclStmt 0x55eac02dad10 <line:770:13, col:66>
|         | `-VarDecl 0x55eac02daa28 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55eac02dace0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55eac02dac50 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55eac02dac98 <col:49> 'T2' lvalue ParmVar 0x55eac02b4db8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55eac02dacc8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55eac02dacb8 <col:61> 'Args *' this
|         `-CallExpr 0x55eac02db248 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55eac02dad38 <col:13> '<bound member function type>' ->postparse 0x55eac02ccc98
|           | `-CXXThisExpr 0x55eac02dad28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55eac02db208 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55eac02dada8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55eac02dad68 <col:23> 'T1 *' lvalue Var 0x55eac02da6b8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55eac02dad88 <col:29> 'T2 *' lvalue Var 0x55eac02daa28 's2' 'T2 *'
|           | `-CallExpr 0x55eac02db1c0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55eac02daf90 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55eac02dafd8 <col:63> 'P' lvalue ParmVar 0x55eac02b4c78 'parser' 'P'
|           |   |-DeclRefExpr 0x55eac02daff8 <col:71> 'String' lvalue Var 0x55eac02da3c8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55eac02db0a8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55eac02db038 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|           |   | `-DeclRefExpr 0x55eac02db018 <col:77> 'T1 *' lvalue Var 0x55eac02da6b8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55eac02db168 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55eac02db0f8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|           |   | `-DeclRefExpr 0x55eac02db0d8 <col:82> 'T2 *' lvalue Var 0x55eac02daa28 's2' 'T2 *'
|           |   `-UnaryOperator 0x55eac02db1a8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55eac02db198 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55eac02db228 <col:94> 'Args::Slot *' lvalue Var 0x55eac02da338 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55eac02b5398 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55eac02b5028 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55eac02b52f8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55eac02b50e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02b5160 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02b51d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55eac02db7f0 <col:67, line:780:5>
|     |-DeclStmt 0x55eac02db370 <line:777:9, col:26>
|     | `-VarDecl 0x55eac02db308 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55eac02db7b8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55eac02db7d8 <line:778:13, col:58>
|       | `-VarDecl 0x55eac02db398 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55eac02db578 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55eac02db548 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55eac02db530 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55eac02db510 <col:26, col:58> 'String' (CXXTemporary 0x55eac02db510)
|       |           `-CXXMemberCallExpr 0x55eac02db4a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55eac02db410 <col:26> '<bound member function type>' ->find 0x55eac02cca88
|       |             | `-CXXThisExpr 0x55eac02db400 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55eac02db4d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55eac02db440 <col:31> 'const char *' lvalue ParmVar 0x55eac02b50e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55eac02db4f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55eac02db460 <col:40> 'int' lvalue ParmVar 0x55eac02b5160 'flags' 'int'
|       |             `-DeclRefExpr 0x55eac02db480 <col:47> 'Args::Slot *' lvalue Var 0x55eac02db308 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55eac02db630 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55eac02db618 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55eac02db5f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55eac02db5c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|       |       `-ImplicitCastExpr 0x55eac02db5b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55eac02db590 <col:20> 'String' lvalue Var 0x55eac02db398 'str' 'String'
|       `-CallExpr 0x55eac02db788 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55eac02db658 <col:13> '<bound member function type>' ->postparse 0x55eac02ccc98
|         | `-CXXThisExpr 0x55eac02db648 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55eac02db738 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55eac02db6a8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55eac02db688 <col:23> 'P' lvalue ParmVar 0x55eac02b51d8 'parser' 'P'
|         | |-DeclRefExpr 0x55eac02db6f0 <col:36> 'String' lvalue Var 0x55eac02db398 'str' 'String'
|         | `-UnaryOperator 0x55eac02db720 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55eac02db710 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55eac02db768 <col:49> 'Args::Slot *' lvalue Var 0x55eac02db308 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55eac02b5738 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55eac02b5408 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55eac02b5698 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55eac02b54c0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02b5540 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02b55b8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55eac02dc160 <col:71, line:792:5>
|     |-DeclStmt 0x55eac02db888 <line:784:9, col:26>
|     | `-VarDecl 0x55eac02db820 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55eac02db958 <line:785:9, col:29>
|     | `-VarDecl 0x55eac02db8b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55eac02db940 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55eac02db920 <col:28> 'int' 1
|     |-WhileStmt 0x55eac02dc010 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55eac02dc030 <line:786:16, col:61>
|     | | `-VarDecl 0x55eac02db980 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55eac02dbb60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55eac02dbb30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55eac02dbb18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55eac02dbaf8 <col:29, col:61> 'String' (CXXTemporary 0x55eac02dbaf8)
|     | |           `-CXXMemberCallExpr 0x55eac02dba88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55eac02db9f8 <col:29> '<bound member function type>' ->find 0x55eac02cca88
|     | |             | `-CXXThisExpr 0x55eac02db9e8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55eac02dbac0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55eac02dba28 <col:34> 'const char *' lvalue ParmVar 0x55eac02b54c0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55eac02dbad8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55eac02dba48 <col:43> 'int' lvalue ParmVar 0x55eac02b5540 'flags' 'int'
|     | |             `-DeclRefExpr 0x55eac02dba68 <col:50> 'Args::Slot *' lvalue Var 0x55eac02db820 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55eac02dbc18 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55eac02dbc00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55eac02dbbe0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55eac02dbbb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|     | |       `-ImplicitCastExpr 0x55eac02dbb98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55eac02dbb78 <col:23> 'String' lvalue Var 0x55eac02db980 'str' 'String'
|     | `-CompoundStmt 0x55eac02dbfe8 <col:64, line:790:9>
|     |   |-CallExpr 0x55eac02dbd70 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55eac02dbc40 <col:13> '<bound member function type>' ->postparse 0x55eac02ccc98
|     |   | | `-CXXThisExpr 0x55eac02dbc30 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55eac02dbd20 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55eac02dbc90 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55eac02dbc70 <col:23> 'P' lvalue ParmVar 0x55eac02b55b8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55eac02dbcd8 <col:36> 'String' lvalue Var 0x55eac02db980 'str' 'String'
|     |   | | `-UnaryOperator 0x55eac02dbd08 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55eac02dbcf8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55eac02dbd50 <col:49> 'Args::Slot *' lvalue Var 0x55eac02db820 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55eac02dbf08 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55eac02dbda0 <col:13> 'int' lvalue Var 0x55eac02db8b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55eac02dbef0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55eac02dbed0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55eac02dbe38 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55eac02dbe18 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55eac02dbe00 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55eac02dbdc0 <col:28> 'int' lvalue Var 0x55eac02db8b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55eac02dbde0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55eac02dbeb8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55eac02dbe88 <col:49> 'bool' lvalue ->_read_status 0x55eac0292770
|     |   |         `-ImplicitCastExpr 0x55eac02dbe68 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55eac02dbe58 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55eac02dbfb8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55eac02dbf28 <col:13> 'int' lvalue ParmVar 0x55eac02b5540 'flags' 'int'
|     |     `-UnaryOperator 0x55eac02dbfa0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55eac02dbf88 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55eac02dbf68 <col:23> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55eac02dc140 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55eac02dc078 <col:9> 'bool' lvalue ->_read_status 0x55eac0292770
|       | `-ImplicitCastExpr 0x55eac02dc058 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55eac02dc048 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55eac02dc120 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55eac02dc100 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55eac02dc0e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55eac02dc0a8 <col:25> 'int' lvalue Var 0x55eac02db8b8 'read_status' 'int'
|           `-IntegerLiteral 0x55eac02dc0c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55eac02b5c18 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55eac02b57a8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02b5828 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02b5b78 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55eac02b58e8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02b5968 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02b59e0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02b5a88 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55eac02dd0f0 <col:84, line:805:5>
|     |-DeclStmt 0x55eac02dc208 <line:796:9, col:26>
|     | `-VarDecl 0x55eac02dc1a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55eac02dc2d8 <line:797:9, col:29>
|     | `-VarDecl 0x55eac02dc238 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55eac02dc2c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55eac02dc2a0 <col:28> 'int' 1
|     |-DeclStmt 0x55eac02dc610 <line:798:9, col:71>
|     | `-VarDecl 0x55eac02dc328 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55eac02dc5e0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55eac02dc550 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55eac02dc598 <col:55> 'T' lvalue ParmVar 0x55eac02b5a88 'variable' 'T &'
|     |     `-UnaryOperator 0x55eac02dc5c8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55eac02dc5b8 <col:66> 'Args *' this
|     |-WhileStmt 0x55eac02dcfa0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55eac02dcfc0 <line:799:16, col:61>
|     | | `-VarDecl 0x55eac02dc638 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55eac02dc818 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55eac02dc7e8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55eac02dc7d0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55eac02dc7b0 <col:29, col:61> 'String' (CXXTemporary 0x55eac02dc7b0)
|     | |           `-CXXMemberCallExpr 0x55eac02dc740 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55eac02dc6b0 <col:29> '<bound member function type>' ->find 0x55eac02cca88
|     | |             | `-CXXThisExpr 0x55eac02dc6a0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55eac02dc778 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55eac02dc6e0 <col:34> 'const char *' lvalue ParmVar 0x55eac02b58e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55eac02dc790 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55eac02dc700 <col:43> 'int' lvalue ParmVar 0x55eac02b5968 'flags' 'int'
|     | |             `-DeclRefExpr 0x55eac02dc720 <col:50> 'Args::Slot *' lvalue Var 0x55eac02dc1a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55eac02dc8d0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55eac02dc8b8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55eac02dc898 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55eac02dc868 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|     | |       `-ImplicitCastExpr 0x55eac02dc850 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55eac02dc830 <col:23> 'String' lvalue Var 0x55eac02dc638 'str' 'String'
|     | `-CompoundStmt 0x55eac02dcf78 <col:64, line:803:9>
|     |   |-CallExpr 0x55eac02dcd00 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55eac02dc8f8 <col:13> '<bound member function type>' ->postparse 0x55eac02ccc98
|     |   | | `-CXXThisExpr 0x55eac02dc8e8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55eac02dccc0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55eac02dc928 <col:23> 'T *' lvalue Var 0x55eac02dc328 's' 'T *'
|     |   | | `-CallExpr 0x55eac02dcc80 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55eac02dcb10 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55eac02dcb58 <col:56> 'P' lvalue ParmVar 0x55eac02b59e0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55eac02dcb78 <col:64> 'String' lvalue Var 0x55eac02dc638 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55eac02dcc28 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55eac02dcbb8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|     |   | |   | `-DeclRefExpr 0x55eac02dcb98 <col:70> 'T *' lvalue Var 0x55eac02dc328 's' 'T *'
|     |   | |   `-UnaryOperator 0x55eac02dcc68 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55eac02dcc58 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55eac02dcce0 <col:81> 'Args::Slot *' lvalue Var 0x55eac02dc1a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55eac02dce98 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55eac02dcd30 <col:13> 'int' lvalue Var 0x55eac02dc238 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55eac02dce80 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55eac02dce60 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55eac02dcdc8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55eac02dcda8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55eac02dcd90 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55eac02dcd50 <col:28> 'int' lvalue Var 0x55eac02dc238 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55eac02dcd70 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55eac02dce48 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55eac02dce18 <col:49> 'bool' lvalue ->_read_status 0x55eac0292770
|     |   |         `-ImplicitCastExpr 0x55eac02dcdf8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55eac02dcde8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55eac02dcf48 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55eac02dceb8 <col:13> 'int' lvalue ParmVar 0x55eac02b5968 'flags' 'int'
|     |     `-UnaryOperator 0x55eac02dcf30 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55eac02dcf18 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55eac02dcef8 <col:23> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55eac02dd0d0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55eac02dd008 <col:9> 'bool' lvalue ->_read_status 0x55eac0292770
|       | `-ImplicitCastExpr 0x55eac02dcfe8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55eac02dcfd8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55eac02dd0b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55eac02dd090 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55eac02dd078 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55eac02dd038 <col:25> 'int' lvalue Var 0x55eac02dc238 'read_status' 'int'
|           `-IntegerLiteral 0x55eac02dd058 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55eac02b61f8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55eac02b5c90 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55eac02b5d08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55eac02b6158 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55eac02b5dc8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55eac02b5e48 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55eac02b5ec0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55eac02b6010 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55eac02ddef8 <col:87, line:821:5>
|     |-DeclStmt 0x55eac02dd1a0 <line:809:9, col:26>
|     | `-VarDecl 0x55eac02dd138 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55eac02dd270 <line:810:9, col:29>
|     | `-VarDecl 0x55eac02dd1d0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55eac02dd258 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55eac02dd238 <col:28> 'int' 1
|     |-DeclStmt 0x55eac02dd4b8 <line:811:9, col:38>
|     | `-VarDecl 0x55eac02dd3a0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55eac02dd490 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55eac02dd418 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55eac02dd470 <col:29> 'Vector<T>' lvalue ParmVar 0x55eac02b6010 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55eac02ddda8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55eac02dddc8 <line:812:16, col:61>
|     | | `-VarDecl 0x55eac02dd4e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55eac02dd6c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55eac02dd690 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55eac02dd678 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55eac02dd658 <col:29, col:61> 'String' (CXXTemporary 0x55eac02dd658)
|     | |           `-CXXMemberCallExpr 0x55eac02dd5e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55eac02dd558 <col:29> '<bound member function type>' ->find 0x55eac02cca88
|     | |             | `-CXXThisExpr 0x55eac02dd548 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55eac02dd620 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55eac02dd588 <col:34> 'const char *' lvalue ParmVar 0x55eac02b5dc8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55eac02dd638 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55eac02dd5a8 <col:43> 'int' lvalue ParmVar 0x55eac02b5e48 'flags' 'int'
|     | |             `-DeclRefExpr 0x55eac02dd5c8 <col:50> 'Args::Slot *' lvalue Var 0x55eac02dd138 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55eac02dd778 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55eac02dd760 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55eac02dd740 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55eac02dd710 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55eabffc8c98
|     | |       `-ImplicitCastExpr 0x55eac02dd6f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55eac02dd6d8 <col:23> 'String' lvalue Var 0x55eac02dd4e0 'str' 'String'
|     | `-CompoundStmt 0x55eac02ddd70 <col:64, line:819:9>
|     |   |-DeclStmt 0x55eac02dd838 <line:813:13, col:23>
|     |   | `-VarDecl 0x55eac02dd7a0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55eac02dd818 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55eac02dd9b8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55eac02dd860 <col:13> '<bound member function type>' ->postparse 0x55eac02ccc98
|     |   | | `-CXXThisExpr 0x55eac02dd850 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55eac02dd960 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55eac02dd8b0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55eac02dd890 <col:23> 'P' lvalue ParmVar 0x55eac02b5ec0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55eac02dd8f8 <col:36> 'String' lvalue Var 0x55eac02dd4e0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55eac02dd918 <col:41> 'T' lvalue Var 0x55eac02dd7a0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55eac02dd948 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55eac02dd938 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55eac02dd998 <col:53> 'Args::Slot *' lvalue Var 0x55eac02dd138 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55eac02ddb10 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55eac02dda48 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55eac02dda18 <col:17> 'bool' lvalue ->_read_status 0x55eac0292770
|     |   | |   `-ImplicitCastExpr 0x55eac02dd9f8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55eac02dd9e8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55eac02ddae8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55eac02dda80 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55eac02dda60 <col:17> 'Vector<T> *' lvalue Var 0x55eac02dd3a0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55eac02ddac8 <col:30> 'T' lvalue Var 0x55eac02dd7a0 'sx' 'T'
|     |   |-BinaryOperator 0x55eac02ddc90 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55eac02ddb28 <col:13> 'int' lvalue Var 0x55eac02dd1d0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55eac02ddc78 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55eac02ddc58 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55eac02ddbc0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55eac02ddba0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55eac02ddb88 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55eac02ddb48 <col:28> 'int' lvalue Var 0x55eac02dd1d0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55eac02ddb68 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55eac02ddc40 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55eac02ddc10 <col:49> 'bool' lvalue ->_read_status 0x55eac0292770
|     |   |         `-ImplicitCastExpr 0x55eac02ddbf0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55eac02ddbe0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55eac02ddd40 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55eac02ddcb0 <col:13> 'int' lvalue ParmVar 0x55eac02b5e48 'flags' 'int'
|     |     `-UnaryOperator 0x55eac02ddd28 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55eac02ddd10 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55eac02ddcf0 <col:23> 'const int' lvalue Var 0x55eac029b968 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55eac02dded8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55eac02dde10 <col:9> 'bool' lvalue ->_read_status 0x55eac0292770
|       | `-ImplicitCastExpr 0x55eac02dddf0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55eac02ddde0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55eac02ddeb8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55eac02dde98 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55eac02dde80 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55eac02dde40 <col:25> 'int' lvalue Var 0x55eac02dd1d0 'read_status' 'int'
|           `-IntegerLiteral 0x55eac02dde60 <col:40> 'int' 1
|-AccessSpecDecl 0x55eac02b6270 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55eac02b6298 prev 0x55eac0299ca0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55eac02b6390 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55eac02b6480 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55eac02ddf30 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55eac02b6570 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55eac02ddf40 <col:25, line:830:9>
| |-CXXMethodDecl 0x55eac02b6670 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55eac02b6720 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55eac02b67c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55eac02b67c8
| | `-ParmVarDecl 0x55eac02b68d8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55eac02b7098 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55eac02b7098
|   `-ParmVarDecl 0x55eac02b71a8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55eac02b6948 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55eac02b6aa8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55eac02b6ca0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55eac02b6b50 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55eac02b6bc8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55eac02de120 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55eac02b6f58 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55eac02ddf90 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55eac02ddf50 <col:20> 'void *' lvalue ParmVar 0x55eac02b6b50 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55eac02b6fc0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55eac02de018 <col:32, col:45> 'char *' array Function 0x55eabfde7498 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55eac02de000 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55eac02ddfd0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55eac02b6bc8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55eac02b7020 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55eac02de0e0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55eac02de0a0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55eac02b6bc8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55eac02de1a0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55eac02b6da0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55eac02b6570 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55eac02de228 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55eac02de208 <line:840:13, col:22> 'void' array Function 0x55eabfde77f8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55eac02de1f0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55eac02de1c0 <col:22> 'char *' lvalue ->_slot 0x55eac02b6fc0
| |         `-CXXThisExpr 0x55eac02de1b0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55eac02b6ea0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55eac02b6670 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55eac02de418 <col:22, line:844:9>
| |   `-CallExpr 0x55eac02de380 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55eac02de368 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55eac02de348 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55eabff1e4f8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55eac02de3b8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55eac02de298 <col:20> 'void *' lvalue ->_ptr 0x55eac02b6f58
| |     |   `-CXXThisExpr 0x55eac02de288 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55eac02de3e8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55eac02de3d0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55eac02de2d8 <col:26> 'char *' lvalue ->_slot 0x55eac02b6fc0
| |     |     `-CXXThisExpr 0x55eac02de2c8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55eac02de400 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55eac02de318 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55eac02b7020
| |         `-CXXThisExpr 0x55eac02de308 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55eac02b6f58 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55eac02b6fc0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55eac02b7020 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55eac02b7218 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55eac02b7218
| | `-ParmVarDecl 0x55eac02b7328 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55eac02b73c8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55eac02b73c8
|   `-ParmVarDecl 0x55eac02b74d8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55eac02b7678 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55eac02b7548 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55eac02b75e8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55eac02b7910 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55eac02b7b08 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55eac02b79d8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55eac02b7c88 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55eac02de450 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55eac02de430 <col:20> 'T *' lvalue ParmVar 0x55eac02b79d8 'ptr' 'T *'
|   | `-CompoundStmt 0x55eac02de4a0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55eac02b7bd8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55eac02b6670 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55eac02de650 <col:22, line:857:9>
|   |   `-CallExpr 0x55eac02de620 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55eac02de4b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55eabffb1a38 0x55eabff5b318
|   |     |-CXXOperatorCallExpr 0x55eac02de5b0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55eac02de540 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55eac01b9a88 0x55eac01b96a8 0x55eac01b92d8 0x55eac01b8ef8 0x55eac01b8b10 0x55eac01b86a8
|   |     | `-MemberExpr 0x55eac02de510 <col:29> 'T *' lvalue ->_ptr 0x55eac02b7c88
|   |     |   `-CXXThisExpr 0x55eac02de500 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55eac02de5f0 <col:35> 'T' lvalue ->_slot 0x55eac02b7ce8
|   |       `-CXXThisExpr 0x55eac02de5e0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55eac02b7c88 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55eac02b7ce8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55eac02b7d50 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55eac02b7e50 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55eac02b7ea0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac02b7e30 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55eac02b7e10 <col:31> 'int' 48
|-FieldDecl 0x55eac02b7ec8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55eac02b7f28 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55eac02b7f88 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55eac02b80c0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55eac02cc330 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55eac02cc390 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55eac02cc440 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55eac02cc668 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55eac02cc570 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55eac02cc7b8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55eac02cc728 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55eac02cca88 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55eac02cc878 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55eac02cc8f8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55eac02cc9a0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55eac02ccc98 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55eac02ccb50 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55eac02ccbc8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55eac02ccd68 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55eac02cceb8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55eac02cce20 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55eac02cd248 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55eac02ccf78 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55eac02ccff8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55eac02cd0a0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55eac02cd158 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55eac02ced80 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55eac02cd320 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55eac02cd398 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55eac02cf098 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55eac02cee30 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55eac02ceff8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55eac02cef08 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac022da78 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac022db98 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x55eac022dc28 <col:25, col:31> col:25 public
|-TypedefDecl 0x55eac022dc60 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x55eabfc932d0 'void'
|-CXXConstructorDecl 0x55eac022dda8 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x55eac022dcd0 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x55eac022f030 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x55eac022e960 'flags_' 'int'
| | `-ImplicitCastExpr 0x55eac022f0d0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55eac022f090 <col:45> 'int' lvalue ParmVar 0x55eac022dcd0 'flags' 'int'
| `-CompoundStmt 0x55eac022f118 <col:52, col:53>
|-CXXMethodDecl 0x55eac022e068 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x55eac022de68 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55eac022df08 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x55eac022df80 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55eac022f050 <col:88> 'const ArgContext' lvalue Var 0x55eac022da10 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55eac022f2f8 <col:100, line:210:5>
|   `-ReturnStmt 0x55eac022f2e8 <line:209:9, col:46>
|     `-CallExpr 0x55eac022f290 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x55eac022f278 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eac022f230 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x55eac022ec28 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x55eac022f190 <col:22> 'const String' lvalue ParmVar 0x55eac022de68 'str' 'const String &'
|       |-DeclRefExpr 0x55eac022f1b0 <col:27> 'EtherAddress' lvalue ParmVar 0x55eac022df08 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55eac022f1d0 <col:34> 'const ArgContext' lvalue ParmVar 0x55eac022df80 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x55eac022f2d0 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x55eac022f200 <col:40> 'int' lvalue ->flags_ 0x55eac022e960
|           `-CXXThisExpr 0x55eac022f1f0 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55eac022e308 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x55eac022e130 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55eac022e1b0 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x55eac022e228 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55eac022f070 <col:89> 'const ArgContext' lvalue Var 0x55eac022da10 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55eac022f4d0 <col:101, line:213:5>
|   `-ReturnStmt 0x55eac022f4c0 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x55eac022f488 <col:9, col:66> 'bool'
|       |-MemberExpr 0x55eac022f458 <col:9> '<bound member function type>' ->parse 0x55eac022e068
|       | `-CXXThisExpr 0x55eac022f448 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55eac022f378 <col:15> 'const String' lvalue ParmVar 0x55eac022e130 'str' 'const String &'
|       |-UnaryOperator 0x55eac022f410 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55eac022f3e0 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55eac022f3c8 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55eac022f398 <col:54> 'unsigned char *' lvalue ParmVar 0x55eac022e1b0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55eac022f428 <col:62> 'const ArgContext' lvalue ParmVar 0x55eac022e228 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55eac022e5c8 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x55eac022e3d0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55eac022e448 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x55eac022e4e8 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x55eac022f6b8 <col:82, line:216:5>
|   `-ReturnStmt 0x55eac022f6a8 <line:215:9, col:53>
|     `-CallExpr 0x55eac022f650 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x55eac022f638 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eac022f5f0 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x55eac022ef58 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x55eac022f550 <col:29> 'const String' lvalue ParmVar 0x55eac022e3d0 'str' 'const String &'
|       |-DeclRefExpr 0x55eac022f570 <col:34> 'EtherAddress' lvalue ParmVar 0x55eac022e448 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55eac022f590 <col:41> 'Args' lvalue ParmVar 0x55eac022e4e8 'args' 'Args &'
|       `-ImplicitCastExpr 0x55eac022f690 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x55eac022f5c0 <col:47> 'int' lvalue ->flags_ 0x55eac022e960
|           `-CXXThisExpr 0x55eac022f5b0 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55eac022e868 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x55eac022e690 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55eac022e710 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x55eac022e788 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x55eac022f890 <col:83, line:219:5>
|   `-ReturnStmt 0x55eac022f880 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x55eac022f848 <col:9, col:73> 'bool'
|       |-MemberExpr 0x55eac022f818 <col:9> '<bound member function type>' ->direct_parse 0x55eac022e5c8
|       | `-CXXThisExpr 0x55eac022f808 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55eac022f738 <col:22> 'const String' lvalue ParmVar 0x55eac022e690 'str' 'const String &'
|       |-UnaryOperator 0x55eac022f7d0 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55eac022f7a0 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55eac022f788 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55eac022f758 <col:61> 'unsigned char *' lvalue ParmVar 0x55eac022e710 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55eac022f7e8 <col:69> 'Args' lvalue ParmVar 0x55eac022e788 'args' 'Args &'
|-AccessSpecDecl 0x55eac022e920 <line:220:3, col:10> col:3 private
|-FieldDecl 0x55eac022e960 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x55eac022ec28 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x55eac022e9c0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55eac022ea38 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x55eac022eab0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x55eac022eb30 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x55eac022ef58 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x55eac022ecf8 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x55eac022ed70 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x55eac022ede8 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x55eac022ee68 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x55eac03246c8 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x55eac03246c8
| `-ParmVarDecl 0x55eac03247d8 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x55eac0324878 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0324988 <col:7> col:7 used 'EtherAddressArg &&'
| |-CXXCtorInitializer Field 0x55eac022e960 'flags_' 'int'
| | `-ImplicitCastExpr 0x55eac0325208 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55eac03251c0 <col:7> 'int' xvalue .flags_ 0x55eac022e960
| |     `-CXXStaticCastExpr 0x55eac0325190 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
| |       `-DeclRefExpr 0x55eac0325160 <col:7> 'EtherAddressArg' lvalue ParmVar 0x55eac0324988 '' 'EtherAddressArg &&'
| `-CompoundStmt 0x55eac0325250 <col:7>
`-CXXDestructorDecl 0x55eac0324a50 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPortArg
         0 |   int ip_p
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac000e1c0 <../dummy_inc/click/ipaddress.hh:408:1, line:416:1> line:408:7 referenced class IPPortArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac000e2d8 <col:1, col:7> col:7 implicit referenced class IPPortArg
|-AccessSpecDecl 0x55eac000e368 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x55eac000e488 <line:409:5, line:412:5> line:409:5 used IPPortArg 'void (int)'
| |-ParmVarDecl 0x55eac000e3b8 <col:15, col:19> col:19 used p 'int'
| |-CXXCtorInitializer Field 0x55eac000e8b8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x55eac000e980 <line:410:9> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55eac000e940 <col:9> 'int' lvalue ParmVar 0x55eac000e3b8 'p' 'int'
| `-CompoundStmt 0x55eac000ef48 <col:12, line:412:5>
|   `-ParenExpr 0x55eac000ef28 <line:411:2, col:175> 'void'
|     `-ConditionalOperator 0x55eac000eef8 <col:3, col:174> 'void'
|       |-CXXStaticCastExpr 0x55eac000eb28 <col:3, col:45> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x55eac000eaf8 <col:23, col:42> 'bool' '&&'
|       |   |-BinaryOperator 0x55eac000ea40 <col:23, col:30> 'bool' '>'
|       |   | |-ImplicitCastExpr 0x55eac000ea28 <col:23> 'int' <LValueToRValue>
|       |   | | `-MemberExpr 0x55eac000e9d8 <col:23> 'int' lvalue ->ip_p 0x55eac000e8b8
|       |   | |   `-CXXThisExpr 0x55eac000e9c8 <col:23> 'IPPortArg *' implicit this
|       |   | `-IntegerLiteral 0x55eac000ea08 <col:30> 'int' 0
|       |   `-BinaryOperator 0x55eac000ead8 <col:35, col:42> 'bool' '<'
|       |     |-ImplicitCastExpr 0x55eac000eac0 <col:35> 'int' <LValueToRValue>
|       |     | `-MemberExpr 0x55eac000ea70 <col:35> 'int' lvalue ->ip_p 0x55eac000e8b8
|       |     |   `-CXXThisExpr 0x55eac000ea60 <col:35> 'IPPortArg *' implicit this
|       |     `-IntegerLiteral 0x55eac000eaa0 <col:42> 'int' 256
|       |-CXXFunctionalCastExpr 0x55eac000eb88 <col:49, col:56> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x55eac000eb68 <col:55> 'int' 0
|       `-CallExpr 0x55eac000ee58 <col:60, col:174> 'void'
|         |-ImplicitCastExpr 0x55eac000ee40 <col:60> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55eac000ee20 <col:60> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55eabfd302f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x55eac000ee98 <col:75> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55eac000ec78 <col:75> 'const char [23]' lvalue "ip_p > 0 && ip_p < 256"
|         |-ImplicitCastExpr 0x55eac000eeb0 <col:101> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55eac000ece8 <col:101> 'const char [32]' lvalue "../dummy_inc/click/ipaddress.hh"
|         |-ImplicitCastExpr 0x55eac000eec8 <col:136> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x55eac000ed20 <col:136> 'int' 411
|         `-ImplicitCastExpr 0x55eac000eee0 <col:141, col:155> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x55eac000ee08 <col:141, col:155> 'const char [26]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x55eac000edf0 <col:155> 'const char [26]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x55eac000edb8 <col:155> 'const char [26]' lvalue "IPPortArg::IPPortArg(int)"
|-CXXMethodDecl 0x55eac000e7e8 <line:413:5, line:414:46> line:413:10 parse 'bool (const String &, uint16_t &, const ArgContext &) const'
| |-ParmVarDecl 0x55eac000e548 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55eac000e618 <col:35, col:45> col:45 result 'uint16_t &'
| `-ParmVarDecl 0x55eac000e690 <line:414:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55eac000e920 <col:34> 'const ArgContext' lvalue Var 0x55eabfffa9e0 'blank_args' 'const ArgContext'
|-FieldDecl 0x55eac000e8b8 <line:415:5, col:9> col:9 referenced ip_p 'int'
|-CXXConstructorDecl 0x55eac03257f8 <line:408:7> col:7 implicit constexpr IPPortArg 'void (const IPPortArg &)' inline default trivial noexcept-unevaluated 0x55eac03257f8
| `-ParmVarDecl 0x55eac0325908 <col:7> col:7 'const IPPortArg &'
|-CXXConstructorDecl 0x55eac03259a8 <col:7> col:7 implicit used constexpr IPPortArg 'void (IPPortArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0325ab8 <col:7> col:7 used 'IPPortArg &&'
| |-CXXCtorInitializer Field 0x55eac000e8b8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x55eac0326240 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55eac0326210 <col:7> 'int' xvalue .ip_p 0x55eac000e8b8
| |     `-CXXStaticCastExpr 0x55eac03261e0 <col:7> 'IPPortArg' xvalue static_cast<class IPPortArg &&> <NoOp>
| |       `-DeclRefExpr 0x55eac03261b0 <col:7> 'IPPortArg' lvalue ParmVar 0x55eac0325ab8 '' 'IPPortArg &&'
| `-CompoundStmt 0x55eac0326288 <col:7>
`-CXXDestructorDecl 0x55eac0325b58 <col:7> col:7 implicit referenced ~IPPortArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPortArg = type { i32 }
  NonVirtualBaseLLVMType:%class.IPPortArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac01e5810 prev 0x55eac01bdcc0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55eac01e5948 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55eac01e59d8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55eac01e5a80 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55eac01e5b20 <col:20>
| `-OptimizeNoneAttr 0x55eac01e5b78 <col:30>
|-CXXMethodDecl 0x55eac01e5bc8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55eac01e5c68 <col:20>
| `-OptimizeNoneAttr 0x55eac01e5cc0 <col:30>
|-CXXMethodDecl 0x55eac01e5d10 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55eac01e5dd8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55eac01e5ea0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55eac01e5fb8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55eac01e6080 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55eac01e6120 <col:20>
| `-OptimizeNoneAttr 0x55eac01e6178 <col:30>
|-CXXMethodDecl 0x55eac01e61e8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55eac01e6288 <col:20>
| `-OptimizeNoneAttr 0x55eac01e62e0 <col:30>
|-CXXMethodDecl 0x55eac01e6388 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55eac01e6428 <col:20>
| `-OptimizeNoneAttr 0x55eac01e6480 <col:30>
|-CXXMethodDecl 0x55eac01e64d0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55eac01e65e8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55eac01e6708 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55eac01e6828 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55eac01e68f0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55eac01e6990 <col:62> "" ""
|-AccessSpecDecl 0x55eac01e6a00 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55eac01e6a60 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55eac01e7658 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55eac01e78d0 <col:29, col:31>
|-CXXMethodDecl 0x55eac01e6b28 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55eac01e6c68 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55eac01e6bd8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55eac01e6d60 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55eac01e78e0 <col:23, col:25>
|-CXXMethodDecl 0x55eac01e6f18 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55eac01e6e50 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55eac01e71e8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55eac01e6fd0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55eac01e7048 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55eac01e70c0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac01e7378 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55eac01e72b0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55eac01e7470 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55eac01e74d8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55eac01e74d8
  `-ParmVarDecl 0x55eac01e75e8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip6
         0 |   union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |       uint32_t ip6_un1_flow
         4 |       uint16_t ip6_un1_plen
         6 |       uint8_t ip6_un1_nxt
         7 |       uint8_t ip6_un1_hlim
         0 |     uint8_t ip6_un2_vfc
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |       unsigned int ip6_un3_fc
     0:4-7 |       unsigned int ip6_un3_v
         8 |   struct in6_addr ip6_src
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr ip6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabfed2988 <../dummy_inc/clicknet/ip6.h:18:2, line:27:2> line:18:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55eabfed2ab8 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
|-FieldDecl 0x55eabfed2b18 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
|-FieldDecl 0x55eabfed2b78 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
`-FieldDecl 0x55eabfed2bd8 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabfed2d60 <../dummy_inc/clicknet/ip6.h:30:2, line:38:2> line:30:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55eabfed2ed0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| `-ConstantExpr 0x55eabfed2eb0 <col:28> 'int' Int: 4
|   `-IntegerLiteral 0x55eabfed2e78 <col:28> 'int' 4
`-FieldDecl 0x55eabfed2f78 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
  `-ConstantExpr 0x55eabfed2f58 <col:27> 'int' Int: 4
    `-IntegerLiteral 0x55eabfed2f20 <col:27> 'int' 4

Layout: <CGRecordLayout
  LLVMType:%struct.anon.3 = type { i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.anon.3 = type { i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabfed2868 <../dummy_inc/clicknet/ip6.h:17:5, line:39:5> line:17:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55eabfed2988 <line:18:2, line:27:2> line:18:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55eabfed2ab8 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| |-FieldDecl 0x55eabfed2b18 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| |-FieldDecl 0x55eabfed2b78 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
| `-FieldDecl 0x55eabfed2bd8 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
|-FieldDecl 0x55eabfed2c98 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
|-FieldDecl 0x55eabfed2d10 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x55eabfed2d60 <line:30:2, line:38:2> line:30:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55eabfed2ed0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | `-ConstantExpr 0x55eabfed2eb0 <col:28> 'int' Int: 4
| |   `-IntegerLiteral 0x55eabfed2e78 <col:28> 'int' 4
| `-FieldDecl 0x55eabfed2f78 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
|   `-ConstantExpr 0x55eabfed2f58 <col:27> 'int' Int: 4
|     `-IntegerLiteral 0x55eabfed2f20 <col:27> 'int' 4
`-FieldDecl 0x55eabfed3038 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'

Layout: <CGRecordLayout
  LLVMType:%union.anon.2 = type { %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabfed26c0 <../dummy_inc/clicknet/ip6.h:16:1, line:42:1> line:16:8 struct click_ip6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55eabfed27d8 <col:1, col:8> col:8 implicit struct click_ip6
|-CXXRecordDecl 0x55eabfed2868 <line:17:5, line:39:5> line:17:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55eabfed2988 <line:18:2, line:27:2> line:18:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55eabfed2ab8 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| | |-FieldDecl 0x55eabfed2b18 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| | |-FieldDecl 0x55eabfed2b78 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
| | `-FieldDecl 0x55eabfed2bd8 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
| |-FieldDecl 0x55eabfed2c98 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
| |-FieldDecl 0x55eabfed2d10 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
| |-CXXRecordDecl 0x55eabfed2d60 <line:30:2, line:38:2> line:30:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55eabfed2ed0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | | `-ConstantExpr 0x55eabfed2eb0 <col:28> 'int' Int: 4
| | |   `-IntegerLiteral 0x55eabfed2e78 <col:28> 'int' 4
| | `-FieldDecl 0x55eabfed2f78 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
| |   `-ConstantExpr 0x55eabfed2f58 <col:27> 'int' Int: 4
| |     `-IntegerLiteral 0x55eabfed2f20 <col:27> 'int' 4
| `-FieldDecl 0x55eabfed3038 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
|-FieldDecl 0x55eabfed31e8 <line:17:5, line:39:7> col:7 referenced ip6_ctlun 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
|-FieldDecl 0x55eabfed3270 <line:40:5, col:21> col:21 referenced ip6_src 'struct in6_addr':'in6_addr'
`-FieldDecl 0x55eabfed32e0 <line:41:5, col:21> col:21 referenced ip6_dst 'struct in6_addr':'in6_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip6 = type { %union.anon.2, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_ip6 = type { %union.anon.2, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac017d930 prev 0x55eac01bdb60 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55eac017da28 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x55eac017dac8 <line:12:5, col:14> col:14 referenced uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55eac017db28 <line:13:5, col:14> col:14 referenced uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55eac017db88 <line:14:5, col:14> col:14 uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x55eac017dbe8 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac0190030 prev 0x55eac0189dd0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac0190128 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55eac01901c8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55eac0197d68 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55eac0198148 <col:11>
|-CXXConstructorDecl 0x55eac0197e40 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0197f28 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55eac0198890 <col:11>
|-CXXConstructorDecl 0x55eac0197fc8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac01980d8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55eac01a4e28 <col:11>
|-CXXDestructorDecl 0x55eac01993f8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55eabfe9b708 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eabfe9b818 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55eabfe9c0e0 <col:11>
|   `-ReturnStmt 0x55eabfe9c0d0 <col:11>
|     `-UnaryOperator 0x55eabfe9c0b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eabfe9c0a8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55eabfe9b888 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55eabfe9b888
  `-ParmVarDecl 0x55eabfe9b998 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac0188f88 prev 0x55eac0188c98 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac0189080 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55eac0189110 <col:19, col:25> col:19 public
|-TypedefDecl 0x55eac0189148 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55eabfde98d0 'int32_t' sugar
|   |-Typedef 0x55eabfcfc268 'int32_t'
|   `-TypedefType 0x55eabfcd53b0 '__int32_t' sugar
|     |-Typedef 0x55eabfcd4fc8 '__int32_t'
|     `-BuiltinType 0x55eabfc93370 'int'
|-TypedefDecl 0x55eac01891b0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55eabfde9a90 'int64_t' sugar
|   |-Typedef 0x55eabfcfc2d0 'int64_t'
|   `-TypedefType 0x55eabfcd54d0 '__int64_t' sugar
|     |-Typedef 0x55eabfcd50a8 '__int64_t'
|     `-BuiltinType 0x55eabfc93390 'long'
|-EnumDecl 0x55eac0189208 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55eac0189380 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55eac0189360 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55eac0189338 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55eac0189320 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55eac01892f0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55eac0189478 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55eac0189458 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55eac0189430 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55eac0189418 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55eac01893f0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55eac01893d0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55eac01894c8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55eac01895d0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55eac0189b20 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01895b0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55eac0189590 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55eac0189660 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55eac0189b38 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0189640 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55eac0189620 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55eac01896f0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55eac0189b50 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01896d0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55eac01896b0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55eac0189780 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55eac0189b68 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0189760 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55eac0189740 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55eac0189810 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55eac0189b80 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01897f0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55eac01897d0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55eac01898a0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55eac0189b98 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0189880 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55eac0189860 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55eac0189930 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55eac0189bb0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0189910 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55eac01898f0 <col:26> 'int' EnumConstant 0x55eac01895d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55eac0189a00 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55eac0189bc8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01899e0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55eac01899c0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55eac0189980 <col:27> 'int' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55eac01899a0 <col:44> 'int' EnumConstant 0x55eac01898a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55eac0189ad0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55eac0189be0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac0189ab0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55eac0189a90 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55eac0189a50 <col:27> 'int' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55eac0189a70 <col:44> 'int' EnumConstant 0x55eac0189780 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55eac0189bf8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55eac0189d00 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55eac0189d50 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac0189ce0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55eac0189cc0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55eac0189d78 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55eabfde9500 'uninitialized_type'
|   `-CXXRecord 0x55eabfde9468 'uninitialized_type'
|-CXXRecordDecl 0x55eac0189dd0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55eac0189ee0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55eac01960b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55eac0198158 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55eac0198278 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55eac0198230 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55eac01981c0 <col:9> '<bound member function type>' ->assign 0x55eac018e258
|     | `-CXXThisExpr 0x55eac01981b0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55eac01981f0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55eac0198260 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55eac0198210 <col:19> 'int' 0
|-CXXConstructorDecl 0x55eac018a128 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55eac0189fa0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55eac018a018 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55eac0197c00 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55eac0197be0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55eac01960b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55eac0198290 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55eac01983e0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55eac0198368 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55eac01982f8 <col:9> '<bound member function type>' ->assign 0x55eac018e258
|     | `-CXXThisExpr 0x55eac01982e8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55eac01983b0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55eac0198398 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55eac0198328 <col:16> 'long' lvalue ParmVar 0x55eac0189fa0 'sec' 'long'
|     `-ImplicitCastExpr 0x55eac01983c8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55eac0198348 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018a018 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55eac018a388 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55eac018a1f8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55eac018a270 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55eac0197c38 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55eac0197c18 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55eac01960b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55eac01983f8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55eac0198530 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55eac01984d0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55eac0198460 <col:9> '<bound member function type>' ->assign 0x55eac018e258
|     | `-CXXThisExpr 0x55eac0198450 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55eac0198500 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55eac0198490 <col:16> 'int' lvalue ParmVar 0x55eac018a1f8 'sec' 'int'
|     `-ImplicitCastExpr 0x55eac0198518 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55eac01984b0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018a270 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55eac018a5e8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55eac018a458 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55eac018a4d0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55eac0197c70 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55eac0197c50 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55eac01960b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55eac0198548 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55eac0198698 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55eac0198620 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55eac01985b0 <col:9> '<bound member function type>' ->assign 0x55eac018e258
|     | `-CXXThisExpr 0x55eac01985a0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55eac0198668 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55eac0198650 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55eac01985e0 <col:16> 'unsigned long' lvalue ParmVar 0x55eac018a458 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55eac0198680 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55eac0198600 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018a4d0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55eac018a848 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55eac018a6b8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55eac018a730 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55eac0197ca8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55eac0197c88 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55eac01960b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55eac01986b0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55eac0198800 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55eac0198788 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55eac0198718 <col:9> '<bound member function type>' ->assign 0x55eac018e258
|     | `-CXXThisExpr 0x55eac0198708 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55eac01987d0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55eac01987b8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55eac0198748 <col:16> 'unsigned int' lvalue ParmVar 0x55eac018a6b8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55eac01987e8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55eac0198768 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018a730 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55eac018a9a8 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55eac018a918 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55eac018ab48 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55eac018aa80 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55eac018ad78 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55eac018ac80 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55eac018af28 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55eac018ae68 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55eac01960b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55eac01988a0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55eac0198818 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55eac018ae68 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55eac0198900 <col:19, line:214:5>
|-CXXConstructorDecl 0x55eac018b0f8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55eac018b038 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55eac01960b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55eac0198910 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55eac01989c0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55eac0198998 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55eac0198968 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55eac018b038 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55eac018b2e8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55eac018b260 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55eac0188d30 'Timestamp'
|   | `-CXXRecord 0x55eac0188f88 'Timestamp'
|   `-ParenType 0x55eac018b200 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55eac018b1d0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55eac01892d0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55eac0189148 'seconds_type'
|         `-TypedefType 0x55eabfde98d0 'int32_t' sugar
|           |-Typedef 0x55eabfcfc268 'int32_t'
|           `-TypedefType 0x55eabfcd53b0 '__int32_t' sugar
|             |-Typedef 0x55eabfcd4fc8 '__int32_t'
|             `-BuiltinType 0x55eabfc93370 'int'
|-CXXConversionDecl 0x55eac018b428 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55eac018b4f8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55eac0198ac8 <col:37, line:231:5>
|   `-ReturnStmt 0x55eac0198ab8 <line:227:9, col:23>
|     `-BinaryOperator 0x55eac0198a98 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55eac0198a68 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55eac0198a18 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55eac01901c8
|       |   `-MemberExpr 0x55eac01989e8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55eac01960b8
|       |     `-CXXThisExpr 0x55eac01989d8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55eac0198a80 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55eac0198a48 <col:23> 'int' 0
|-CXXMethodDecl 0x55eac018b5b8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55eac018b678 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac018b738 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac018b7f8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac018b8b8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55eac018ba28 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55eac018b968 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55eac018bb70 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55eac018bae0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac018bc38 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55eac018bcd8 <col:54> "" ""
|-CXXMethodDecl 0x55eac018bd68 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55eac018be08 <col:54> "" ""
|-CXXMethodDecl 0x55eac018be98 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55eac018bf38 <col:54> "" ""
|-CXXMethodDecl 0x55eac018c038 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55eac018c108 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55eac018c238 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55eac018c330 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55eac018c468 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55eac0198ce0 <col:39, line:271:5>
|   `-ReturnStmt 0x55eac0198cd0 <line:267:9, col:61>
|     `-CallExpr 0x55eac0198c70 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55eac0198c58 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eac0198ae0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55eac01963e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55eac0198ca0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55eac0198b40 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55eac01901c8
|       |   `-MemberExpr 0x55eac0198b10 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55eac01960b8
|       |     `-CXXThisExpr 0x55eac0198b00 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55eac0198cb8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55eac0198be0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55eac0198bb0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55eac0198b70 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55eac0198bc8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55eac0198b90 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac01898a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55eac018c528 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55eac0198ea0 <col:39, line:279:5>
|   `-ReturnStmt 0x55eac0198e90 <line:275:9, col:61>
|     `-CallExpr 0x55eac0198e30 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55eac0198e18 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eac0198cf8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55eac01963e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55eac0198e60 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55eac0198d58 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55eac01901c8
|       |   `-MemberExpr 0x55eac0198d28 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55eac01960b8
|       |     `-CXXThisExpr 0x55eac0198d18 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55eac0198e78 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55eac0198df8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55eac0198dc8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55eac0198d88 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55eac0198de0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55eac0198da8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189780 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55eac018c5e8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55eac0199038 <col:39, line:287:5>
|   `-ReturnStmt 0x55eac0199028 <line:283:9, col:53>
|     `-BinaryOperator 0x55eac0199008 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55eac0198fd8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55eac0198ef8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55eac01901c8
|       |   `-MemberExpr 0x55eac0198ec8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55eac01960b8
|       |     `-CXXThisExpr 0x55eac0198eb8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55eac0198ff0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55eac0198fb8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55eac0198f98 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55eac0198f68 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55eac0198f28 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac01895d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55eac0198f80 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55eac0198f48 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55eac018c6d8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55eac01a5010 <col:40, line:293:5>
|   |-DeclStmt 0x55eac0199180 <line:291:9, col:48>
|   | `-VarDecl 0x55eac0199060 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55eac0199160 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55eac0199108 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55eac01990d8 <col:22> '<bound member function type>' ->subsec 0x55eac018b678
|   |     |   `-CXXThisExpr 0x55eac01990c8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55eac0199148 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55eac0199128 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189a00 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55eac01a5000 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55eac01a4fe8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55eac01a4fb8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55eac01a4fa0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55eac01a4f80 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55eac01a4f50 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55eac01a4ce8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55eac01a4cd0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55eac0199198 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55eac0199060 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55eac01a4ef0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55eac01a4ed8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55eac01a4ea8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55eac01a4d00 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55eac01a4c70 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55eac01a4c58 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55eac01a4c08 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55eac0188ed8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55eac01a4ba8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55eac01991c8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55eac01991b8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55eac01a4bf0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55eac01a4bd8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55eac0199688 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55eac01991f0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55eac0199280 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55eac0199250 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55eac0199210 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189a00 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55eac0199268 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55eac0199230 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55eac0199060 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55eac01a4f20 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55eac01a4cb8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55eac01a4ca8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55eac018c798 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55eac01a5568 <col:40, line:302:5>
|   |-DeclStmt 0x55eac01a5160 <line:297:9, col:48>
|   | `-VarDecl 0x55eac01a5040 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55eac01a5140 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55eac01a50e8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55eac01a50b8 <col:22> '<bound member function type>' ->subsec 0x55eac018b678
|   |     |   `-CXXThisExpr 0x55eac01a50a8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55eac01a5128 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55eac01a5108 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189ad0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55eac01a5558 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55eac01a5540 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55eac01a5510 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55eac01a54f8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55eac01a54d8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55eac01a54a8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55eac01a53d0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55eac01a53b8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55eac01a5178 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55eac01a5040 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55eac01a5448 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55eac01a5430 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55eac01a5400 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55eac01a53e8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55eac01a5358 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55eac01a5340 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55eac01a5320 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55eac0188ed8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55eac01a52c0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55eac01a51a8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55eac01a5198 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55eac01a5308 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55eac01a52f0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55eac01a5280 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55eac01a51d0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55eac01a5260 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55eac01a5230 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55eac01a51f0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189ad0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55eac01a5248 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55eac01a5210 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55eac01a5040 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55eac01a5478 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55eac01a53a0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55eac01a5390 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55eac018ceb0 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55eac01a55f0 <col:40, line:306:5>
|   `-ReturnStmt 0x55eac01a55e0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55eac01a55b0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55eac01a5598 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55eac01a5588 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55eac018d058 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55eac018cf60 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55eac018d228 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55eac018d130 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55eac018d318 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55eac018d488 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55eac018d3c8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55eac01a5738 <col:56, line:320:5>
|   `-ReturnStmt 0x55eac01a5728 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55eac01a5710 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55eac01a56e0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55eac01a56c8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55eac01a5688 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55eac01a5658 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55eac01a5618 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55eac018d3c8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55eac01a5670 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55eac01a5638 <col:31> 'int' 0
|-CXXMethodDecl 0x55eac018d6c8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55eac018d540 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55eac018d5b8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a5908 <col:72, line:326:5>
|   `-ReturnStmt 0x55eac01a58f8 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55eac01a58e0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55eac01a58b0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55eac01a5898 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55eac01a5858 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55eac01a5840 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55eac01a5760 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55eac018d540 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55eac01a5800 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55eac01a57e8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55eac01a5780 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55eac018f920 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55eac01a5828 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55eac01a57a0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018d5b8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac018d878 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55eac018d788 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55eac01a5fd0 <col:56, line:337:5>
|   |-DeclStmt 0x55eac01a5c08 <line:329:9, col:51>
|   | `-VarDecl 0x55eac01a5930 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55eac01a5bf0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55eac01a5bc0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55eac01a5ba8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55eac01a5b90 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55eac01a5b60 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55eac01a5b48 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55eac01a5b30 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55eac01a5a20 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55eac01a5dc0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55eac01a5c70 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55eac01901c8
|   | | `-MemberExpr 0x55eac01a5c40 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55eac01960b8
|   | |   `-DeclRefExpr 0x55eac01a5c20 <col:9> 'Timestamp' lvalue Var 0x55eac01a5930 't' 'Timestamp'
|   | `-BinaryOperator 0x55eac01a5da0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55eac01a5d70 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55eac01a5ca0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55eac018d788 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55eac01a5d88 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55eac01a5d50 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55eac01a5d30 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55eac01a5d00 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55eac01a5cc0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55eac01a5d18 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55eac01a5ce0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac01898a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55eac01a5fb8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55eac01a5f88 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55eac01a5f70 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55eac01a5f50 <col:16> 'Timestamp' lvalue Var 0x55eac01a5930 't' 'Timestamp'
|-CXXMethodDecl 0x55eac018da40 <line:341:5, line:343:5> line:341:29 used make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55eac018d930 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55eac018d9a8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a6188 <col:72, line:343:5>
|   `-ReturnStmt 0x55eac01a6178 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55eac01a6160 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55eac01a6130 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55eac01a6118 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55eac01a60d8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55eac01a60c0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55eac01a6008 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55eac018d930 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55eac01a6080 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55eac01a6068 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55eac01a6028 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55eac018fa68 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55eac01a60a8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55eac01a6048 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018d9a8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac018db90 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55eac018db00 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55eac01a65d0 <col:56, line:354:5>
|   |-DeclStmt 0x55eac01a6378 <line:346:9, col:51>
|   | `-VarDecl 0x55eac01a61b0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55eac01a6360 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55eac01a6330 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55eac01a6318 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55eac01a6300 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55eac01a62d0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55eac01a62b8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55eac01a62a0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55eac01a6270 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55eac01a6530 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55eac01a63e0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55eac01901c8
|   | | `-MemberExpr 0x55eac01a63b0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55eac01960b8
|   | |   `-DeclRefExpr 0x55eac01a6390 <col:9> 'Timestamp' lvalue Var 0x55eac01a61b0 't' 'Timestamp'
|   | `-BinaryOperator 0x55eac01a6510 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55eac01a64e0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55eac01a6410 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55eac018db00 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55eac01a64f8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55eac01a64c0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55eac01a64a0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55eac01a6470 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55eac01a6430 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55eac01a6488 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55eac01a6450 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189780 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55eac01a65b8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55eac01a6588 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55eac01a6570 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55eac01a6550 <col:16> 'Timestamp' lvalue Var 0x55eac01a61b0 't' 'Timestamp'
|-CXXMethodDecl 0x55eac018dd58 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55eac018dc48 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55eac018dcc0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a6788 <col:72, line:360:5>
|   `-ReturnStmt 0x55eac01a6778 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55eac01a6760 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55eac01a6730 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55eac01a6718 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55eac01a66d8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55eac01a66c0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55eac01a6608 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55eac018dc48 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55eac01a6680 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55eac01a6668 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55eac01a6628 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55eac018fbb0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55eac01a66a8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55eac01a6648 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018dcc0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac018dea8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55eac018de18 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55eac01a6bf8 <col:56, line:371:5>
|   |-DeclStmt 0x55eac01a6978 <line:363:9, col:51>
|   | `-VarDecl 0x55eac01a67b0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55eac01a6960 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55eac01a6930 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55eac01a6918 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55eac01a6900 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55eac01a68d0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55eac01a68b8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55eac01a68a0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55eac01a6870 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55eac01a6b58 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55eac01a69e0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55eac01901c8
|   | | `-MemberExpr 0x55eac01a69b0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55eac01960b8
|   | |   `-DeclRefExpr 0x55eac01a6990 <col:9> 'Timestamp' lvalue Var 0x55eac01a67b0 't' 'Timestamp'
|   | `-CallExpr 0x55eac01a6af8 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55eac01a6ae0 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55eac01a6a10 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55eac01963e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55eac01a6b28 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55eac01a6a30 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55eac018de18 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55eac01a6b40 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55eac01a6ac0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55eac01a6a90 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55eac01a6a50 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac01895d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55eac01a6aa8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55eac01a6a70 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55eac01a6be0 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55eac01a6bb0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55eac01a6b98 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55eac01a6b78 <col:16> 'Timestamp' lvalue Var 0x55eac01a67b0 't' 'Timestamp'
|-CXXMethodDecl 0x55eac018df98 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55eac01a6d38 <col:39, line:377:5>
|   `-ReturnStmt 0x55eac01a6d28 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55eac01a6d10 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55eac01a6ce0 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55eac01a6cc8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55eac01a6c88 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55eac01a6c30 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55eac01a6c70 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55eac01a6c50 <col:29> 'int' 1
|-CXXMethodDecl 0x55eac018e058 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55eac01a6e18 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55eac01a6dd0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55eac01a6d60 <col:9> '<bound member function type>' ->assign 0x55eac018e258
|     | `-CXXThisExpr 0x55eac01a6d50 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55eac01a6d90 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55eac01a6e00 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55eac01a6db0 <col:19> 'int' 0
|-CXXMethodDecl 0x55eac018e258 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55eac018e108 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55eac018e180 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55eac0197ce0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55eac0197cc0 <col:60> 'int' 0
| `-CompoundStmt 0x55eac01a7010 <col:63, line:395:5>
|   `-BinaryOperator 0x55eac01a6ff0 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55eac01a6e70 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55eac01901c8
|     | `-MemberExpr 0x55eac01a6e40 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55eac01960b8
|     |   `-CXXThisExpr 0x55eac01a6e30 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55eac01a6fd0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55eac01a6f60 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55eac01a6f00 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55eac01a6ee8 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55eac01a6ed0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55eac01a6ea0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55eac018e108 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55eac01a6f48 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55eac01a6f28 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55eac01a6fb8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55eac01a6fa0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55eac01a6f80 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018e180 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac018e428 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55eac018e318 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55eac018e390 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a7168 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55eac01a7120 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55eac01a7038 <col:9> '<bound member function type>' ->assign 0x55eac018e258
|     | `-CXXThisExpr 0x55eac01a7028 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55eac01a7150 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55eac01a7068 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55eac018e318 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55eac01a70e0 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55eac01a70c8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eac01a7088 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55eac018fa68 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55eac01a7108 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55eac01a70a8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018e390 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac018e5f8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55eac018e4e8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55eac018e560 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a72c0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55eac01a7278 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55eac01a7190 <col:9> '<bound member function type>' ->assign 0x55eac018e258
|     | `-CXXThisExpr 0x55eac01a7180 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55eac01a72a8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55eac01a71c0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55eac018e4e8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55eac01a7238 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55eac01a7220 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eac01a71e0 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55eac018fbb0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55eac01a7260 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55eac01a7200 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018e560 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac018e7c8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55eac018e6b8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55eac018e730 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55eac0197d18 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55eac0197cf8 <col:57> 'int' 0
| `-DeprecatedAttr 0x55eac018e878 <col:75> "" ""
|-CXXMethodDecl 0x55eac018ea08 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55eac018e8f8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55eac018e970 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55eac018eab8 <col:74> "" ""
|-CXXMethodDecl 0x55eac018ec48 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55eac018eb38 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55eac018ebb0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55eac018ecf8 <col:74> "" ""
|-CXXMethodDecl 0x55eac018ed88 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55eac018ee28 <col:42> "" ""
|-CXXMethodDecl 0x55eac018efd0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55eac018eeb0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55eac018ef30 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55eac018f0a0 <line:432:5, col:33> col:29 used now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55eac018f160 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55eac018f200 <col:20>
| `-OptimizeNoneAttr 0x55eac018f258 <col:30>
|-CXXMethodDecl 0x55eac018f2a0 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55eac018f360 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55eac018f420 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55eac018f4e0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55eac018f5a0 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55eac018f660 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55eac018f720 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55eac018f7e0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55eac018f920 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55eac018f890 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a7408 <col:58, line:512:5>
|   `-ReturnStmt 0x55eac01a73f8 <line:511:9, col:53>
|     `-BinaryOperator 0x55eac01a73d8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55eac01a73a8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55eac01a72d8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018f890 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55eac01a73c0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55eac01a7388 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55eac01a7368 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55eac01a7338 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55eac01a72f8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55eac01a7350 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55eac01a7318 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac01898a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55eac018fa68 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55eac018f9d8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a7550 <col:58, line:516:5>
|   `-ReturnStmt 0x55eac01a7540 <line:515:9, col:53>
|     `-BinaryOperator 0x55eac01a7520 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55eac01a74f0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55eac01a7420 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018f9d8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55eac01a7508 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55eac01a74d0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55eac01a74b0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55eac01a7480 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55eac01a7440 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55eac01a7498 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55eac01a7460 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189780 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55eac018fbb0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55eac018fb20 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a7698 <col:58, line:520:5>
|   `-ReturnStmt 0x55eac01a7688 <line:519:9, col:53>
|     `-BinaryOperator 0x55eac01a7668 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55eac01a7638 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55eac01a7568 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018fb20 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55eac01a7650 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55eac01a7618 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55eac01a75f8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55eac01a75c8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55eac01a7588 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac01895d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55eac01a75e0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55eac01a75a8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55eac018fcf8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55eac018fc68 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a77e0 <col:60, line:524:5>
|   `-ReturnStmt 0x55eac01a77d0 <line:523:9, col:55>
|     `-BinaryOperator 0x55eac01a77b0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55eac01a7780 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55eac01a76b0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018fc68 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55eac01a7798 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55eac01a7760 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55eac01a7740 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55eac01a7710 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55eac01a76d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55eac01a7728 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55eac01a76f0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac01898a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55eac018fe40 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55eac018fdb0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a7928 <col:60, line:528:5>
|   `-ReturnStmt 0x55eac01a7918 <line:527:9, col:55>
|     `-BinaryOperator 0x55eac01a78f8 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55eac01a78c8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55eac01a77f8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018fdb0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55eac01a78e0 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55eac01a78a8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55eac01a7888 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55eac01a7858 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55eac01a7818 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55eac01a7870 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55eac01a7838 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189780 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55eac018ff88 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55eac018fef8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a7a70 <col:60, line:532:5>
|   `-ReturnStmt 0x55eac01a7a60 <line:531:9, col:55>
|     `-BinaryOperator 0x55eac01a7a40 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55eac01a7a10 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55eac01a7940 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac018fef8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55eac01a7a28 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55eac01a79f0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55eac01a79d0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55eac01a79a0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55eac01a7960 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac01895d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55eac01a79b8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55eac01a7980 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55eac0189930 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55eac0190030 prev 0x55eac0189dd0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55eac0190128 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55eac01901c8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55eac0197d68 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55eac0198148 <col:11>
| |-CXXConstructorDecl 0x55eac0197e40 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55eac0197f28 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55eac0198890 <col:11>
| |-CXXConstructorDecl 0x55eac0197fc8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55eac01980d8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55eac01a4e28 <col:11>
| |-CXXDestructorDecl 0x55eac01993f8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55eabfe9b708 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55eabfe9b818 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55eabfe9c0e0 <col:11>
| |   `-ReturnStmt 0x55eabfe9c0d0 <col:11>
| |     `-UnaryOperator 0x55eabfe9c0b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55eabfe9c0a8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55eabfe9b888 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55eabfe9b888
|   `-ParmVarDecl 0x55eabfe9b998 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x55eac0190230 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55eac0190330 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55eac0190530 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0190310 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55eac01902f0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55eac01903c0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55eac0190548 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac01903a0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55eac0190380 <col:23> 'int' 1
| |-EnumConstantDecl 0x55eac0190450 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55eac0190560 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac0190430 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55eac0190410 <col:23> 'int' 2
| `-EnumConstantDecl 0x55eac01904e0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55eac0190578 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55eac01904c0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55eac01904a0 <col:27> 'int' 3
|-CXXMethodDecl 0x55eac01905b8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55eac0190680 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55eac0190888 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55eac0190730 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55eac01907b0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55eac0197d30 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55eac0190a98 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55eac0190948 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55eac01909c0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55eac0190b68 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55eac0190c28 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55eac0190d98 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55eac0190cd8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55eac0195da0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55eac0195e60 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55eac0195f20 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55eac0195fe0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55eac0196080 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55eac01960b8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55eac0196128 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55eac01a7a88 <col:27, line:684:5>
|-CXXMethodDecl 0x55eac01961e8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55eac01a7a98 <col:27, line:696:5>
|-CXXMethodDecl 0x55eac01963e8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55eac0196298 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55eac0196310 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a7c20 <col:66, line:700:5>
|   `-ReturnStmt 0x55eac01a7c10 <line:699:9, col:31>
|     `-CallExpr 0x55eac01a7bb0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55eac01a7b98 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eac01a7b48 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55eac0015ca8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55eac01a7be0 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55eac01a7b08 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55eac0196298 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55eac01a7bf8 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55eac01a7b28 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac0196310 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55eac0196758 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55eac01964a8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55eac0196520 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55eac0196598 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55eac0196610 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55eac01a7f70 <col:64, line:707:5>
|   |-DeclStmt 0x55eac01a7cb0 <line:704:9, col:24>
|   | `-VarDecl 0x55eac01a7c48 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55eac01a7ec0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55eac01a7cc8 <col:9> 'int32_t':'int' lvalue ParmVar 0x55eac0196520 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55eac01a7ea8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55eac01a7e40 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55eac01a7e28 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55eac01a7da8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55eac001bfb8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55eac01a7e78 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55eac01a7d48 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55eac0196598 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55eac01a7e90 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55eac01a7d68 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55eac0196610 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55eac01a7d88 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55eac01a7c48 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55eac01a7f50 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55eac01a7ee0 <col:9> 'int32_t':'int' lvalue ParmVar 0x55eac01964a8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55eac01a7f38 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55eac01a7f20 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55eac01a7f00 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55eac01a7c48 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55eac01969f8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55eac0196828 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55eac01968a0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55eac0196918 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55eac0196c98 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55eac0196ac0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55eac0196b38 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55eac0196bb0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55eac0196e28 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55eac0196d60 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55eac0197028 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55eac0196ee0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55eac0196f58 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55eac01972f8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55eac0197238 parent 0x55eabfc93278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55eac01970e8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55eac0197160 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55eac0197518 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55eac0197458 parent 0x55eabfc93278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55eac0197348 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55eac01973c0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55eac01976e0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55eac0197628 parent 0x55eabfc93278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55eac0197568 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55eac0197968 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55eac01978a8 parent 0x55eabfc93278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55eac0197758 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55eac01977d0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55eac0197b88 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55eac0197ac8 parent 0x55eabfc93278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55eac01979b8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55eac0197a30 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55eac01992a0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0199388 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55eac01960b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55eac01a4b38 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55eac01a4af0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55eac01960b8
| |     `-DeclRefExpr 0x55eac01a4ad0 <col:7> 'const Timestamp' lvalue ParmVar 0x55eac0199388 '' 'const Timestamp &'
| `-CompoundStmt 0x55eac01a4b98 <col:7>
|-CXXConstructorDecl 0x55eac0199508 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0199618 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55eac01960b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55eac01a4e38 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55eac01a4de0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55eac01960b8
| |     `-CXXStaticCastExpr 0x55eac01a4db0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55eac01a4d80 <col:7> 'Timestamp' lvalue ParmVar 0x55eac0199618 '' 'Timestamp &&'
| `-CompoundStmt 0x55eac01a4e98 <col:7>
|-CXXDestructorDecl 0x55eac01996c8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55eabfe9b560 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55eabfe9b668 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55eabfe9c158 <col:7>
|   |-CXXMemberCallExpr 0x55eabfe9c0f8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55eabfe9c038 <col:7> '<bound member function type>' .operator= 0x55eabfe9b708
|   | | `-MemberExpr 0x55eabfe9bf48 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55eac01960b8
|   | |   `-CXXThisExpr 0x55eabfe9bf38 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55eabfe9c008 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55eac01960b8
|   |   `-DeclRefExpr 0x55eabfe9bfe8 <col:7> 'const Timestamp' lvalue ParmVar 0x55eabfe9b668 '' 'const Timestamp &'
|   `-ReturnStmt 0x55eabfe9c148 <col:7>
|     `-UnaryOperator 0x55eabfe9c130 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55eabfe9c120 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55eabfe9ba08 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x55eabfe9ba08
  `-ParmVarDecl 0x55eabfe9bb18 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IP6Address>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IP6Address * _ptr
        24 |   class IP6Address _slot
        24 |     struct in6_addr _addr
        24 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |         uint8_t [16] __u6_addr8
        24 |         uint16_t [8] __u6_addr16
        24 |         uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eabfde9468 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eabfde9588 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x55eabfffe4c0 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55eabfffe5a0 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x55eabfffe5a0
| `-ParmVarDecl 0x55eac0001360 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x55eac00013f8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x55eac00013f8
| `-ParmVarDecl 0x55eac0001508 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x55eac01a5a50 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac02e89b0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac02e8ac8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55eac02e8b58 <col:16, col:22> col:16 public
|-EnumDecl 0x55eac02e8b80 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55eac02e8c80 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55eac02e8ed0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac02e8c60 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55eac02e8c40 <col:21> 'int' 0
| |-EnumConstantDecl 0x55eac02e8d10 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55eac02e8ee8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac02e8cf0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55eac02e8cd0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55eac02e8da0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55eac02e8f00 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac02e8d80 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55eac02e8d60 <col:24> 'int' 34
| |-EnumConstantDecl 0x55eac02e8e30 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55eac02e8f18 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55eac02e8e10 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55eac02e8df0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55eac02e8e80 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55eac02ea890 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55eac02ead38 <col:7>
|-CXXConstructorDecl 0x55eac02ea998 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55eac02ea998
| `-ParmVarDecl 0x55eac02eaaa8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55eac02eabb0 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac02eacc8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55eac03943d0 <col:7>
`-CXXDestructorDecl 0x55eac02ece48 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac02e8f48 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55eac02e90a8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55eac02e9138 <col:32, col:38> col:32 public
|-TypedefDecl 0x55eac02e9170 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55eabfde97f0 'uint32_t' sugar
|   |-Typedef 0x55eabfcfc408 'uint32_t'
|   `-TypedefType 0x55eabfcd5440 '__uint32_t' sugar
|     |-Typedef 0x55eabfcd5038 '__uint32_t'
|     `-BuiltinType 0x55eabfc93410 'unsigned int'
|-CXXConstructorDecl 0x55eac02e92b8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55eac02e91e0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55eac02ea798 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55eac02ead48 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55eac02ea050 'base' 'int'
| | `-ImplicitCastExpr 0x55eac02ea838 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55eac02ea7f8 <col:16> 'int' lvalue ParmVar 0x55eac02e91e0 'b' 'int'
| `-CompoundStmt 0x55eac02eadb8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55eac02e97b0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55eac02e9380 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55eac02e9400 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55eac02e9478 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55eac02e94f8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55eac02e95b8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55eac02e9638 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55eac02e9c08 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55eac02e9880 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55eac02e9b68 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55eac02e9928 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55eac02e99c8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55eac02e9a40 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55eac02ea7b8 <col:82> 'const ArgContext' lvalue Var 0x55eac02de678 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55eac02ebcf8 <col:94, line:1067:5>
| |   |-DeclStmt 0x55eac02eaf48 <line:1054:9, col:64>
| |   | `-VarDecl 0x55eac02eadd8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55eac02eaf00 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55eac02eb168 <line:1055:9, col:91>
| |   | `-VarDecl 0x55eac02eaf78 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55eac02eb140 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55eac02eb120 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55eac02eb0d0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55eac02eb0b0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55eac02eb058 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55eac02eb008 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55eac02eb038 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55eac02eb098 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55eac02eb078 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55eac02eb100 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55eac02eb2c8 <line:1056:9, col:27>
| |   | `-VarDecl 0x55eac02eb260 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55eac02eb720 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55eac02eb650 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55eac02eb5c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55eac023e228 0x55eac0182a10 0x55eac01b48d8 0x55eac0002b48 0x55eac0002820 0x55eabfff3b20 0x55eabfff37d0 0x55eabfff30c0 0x55eabffc45b0 0x55eabff51520
| |   | | |-CallExpr 0x55eac02eb500 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55eac02eb2f0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55eac02eb3a0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55eac02eb370 <col:19, col:23> '<bound member function type>' .begin 0x55eabffdf008
| |   | | | |   `-DeclRefExpr 0x55eac02eb350 <col:19> 'const String' lvalue ParmVar 0x55eac02e9928 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55eac02eb410 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55eac02eb3e0 <col:32, col:36> '<bound member function type>' .end 0x55eabffdf220
| |   | | | |   `-DeclRefExpr 0x55eac02eb3c0 <col:32> 'const String' lvalue ParmVar 0x55eac02e9928 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55eac02eb430 <col:43> 'const bool' lvalue Var 0x55eac02eadd8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55eac02eb498 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55eac02eb478 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55eac02eb4c0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55eac02eb260 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55eac02eb4e0 <col:73> 'const int' lvalue Var 0x55eac02eaf78 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55eac02eb5a0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55eac02eb570 <col:16, col:20> '<bound member function type>' .end 0x55eabffdf220
| |   | |     `-DeclRefExpr 0x55eac02eb550 <col:16> 'const String' lvalue ParmVar 0x55eac02e9928 'str' 'const String &'
| |   | `-BinaryOperator 0x55eac02eb700 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55eac02eb698 <col:13> 'int' lvalue ->status 0x55eac02ea0b8
| |   |   | `-CXXThisExpr 0x55eac02eb688 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55eac02eb6e8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55eac02eb6c8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8d10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55eac02eb970 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55eac02eb858 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55eac02eb840 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55eac02eb828 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55eac02eb748 <col:13> 'int' lvalue ->status 0x55eac02ea0b8
| |   | | |     `-CXXThisExpr 0x55eac02eb738 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55eac02eb808 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55eac02eb7d8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55eac02eb788 <col:23> 'int' lvalue ->status 0x55eac02ea0b8
| |   | |   |   `-CXXThisExpr 0x55eac02eb778 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55eac02eb7f0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55eac02eb7b8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8da0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55eac02eb950 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55eac02eb8f0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55eac02eb898 <col:13, col:18> '<bound member function type>' .error 0x55eac0291d80
| |   |   | | `-DeclRefExpr 0x55eac02eb878 <col:13> 'const ArgContext' lvalue ParmVar 0x55eac02e9a40 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55eac02eb918 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55eac02eb8c8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55eac02eb940 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55eac02eb930 <col:20> 'bool' false
| |   |-DeclStmt 0x55eac02ebb48 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55eac02ebaf0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55eac02eba80 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55eac02ebca8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55eac02ebb60 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55eabff85778
| |   | |-DeclRefExpr 0x55eac02ebba8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55eac02eb260 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55eac02ebc78 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55eac02ebbf0 <col:64> 'V' lvalue ParmVar 0x55eac02e99c8 'result' 'V &'
| |   `-ReturnStmt 0x55eac02ebce8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55eac02ebcd8 <col:16> 'bool' true
| |-CXXMethodDecl 0x55eac03ccfe8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55eac03ccdc0 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x55eac03cce98 <col:46, col:49> col:49 used result 'int &'
| | |-ParmVarDecl 0x55eac03ccf00 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x55eac03ced90 <col:94, line:1067:5>
| |   |-DeclStmt 0x55eac03cd7f8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55eac03cd618 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x55eac03cd788 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55eac03cd758 <col:36, col:55> 'const bool' lvalue Var 0x55eabff74dd8 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x55eac03cd9d8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55eac03cd810 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55eac03cd958 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x55eac03cd940 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x55eac03cd920 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x55eac03cd900 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x55eac03cd8e0 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x55eac03cd8a8 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x55eac03cd888 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x55eac02eb038 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x55eac03cd8c8 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x55eac02eb078 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x55eac02eb100 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55eac03cdb70 <line:1056:9, col:27>
| |   | `-VarDecl 0x55eac03cdb08 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x55eac03ce008 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x55eac03cdfb0 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x55eac03cde68 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x55eac03cde38 <col:13> '<bound member function type>' ->parse 0x55eac02e97b0
| |   | | | | `-CXXThisExpr 0x55eac03cde28 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x55eac03cdcc8 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55eac03cdc98 <col:19, col:23> '<bound member function type>' .begin 0x55eabffdf008
| |   | | | |   `-DeclRefExpr 0x55eac03cdc78 <col:19> 'const String' lvalue ParmVar 0x55eac03ccdc0 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55eac03cdd38 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55eac03cdd08 <col:32, col:36> '<bound member function type>' .end 0x55eabffdf220
| |   | | | |   `-DeclRefExpr 0x55eac03cdce8 <col:32> 'const String' lvalue ParmVar 0x55eac03ccdc0 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x55eac03cded8 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x55eac03cdeb8 <col:43> 'const bool' lvalue Var 0x55eac03cd618 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x55eac03cddc0 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x55eac03cdda8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x55eac03cdd88 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
| |   | | | |-ImplicitCastExpr 0x55eac03cdef0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x55eac03cdde8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55eac03cdb08 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x55eac03cdf28 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x55eac03cdf08 <col:73> 'const int' lvalue Var 0x55eac03cd810 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x55eac03cdf90 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55eac03cdf60 <col:16, col:20> '<bound member function type>' .end 0x55eabffdf220
| |   | |     `-DeclRefExpr 0x55eac03cdf40 <col:16> 'const String' lvalue ParmVar 0x55eac03ccdc0 'str' 'const String &'
| |   | `-BinaryOperator 0x55eac03cdfe8 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55eac02eb698 <col:13> 'int' lvalue ->status 0x55eac02ea0b8
| |   |   | `-CXXThisExpr 0x55eac02eb688 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55eac03cdfd0 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55eac02eb6c8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8d10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55eac03ce180 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55eac03ce0a0 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55eac03ce088 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55eac03ce070 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55eac02eb748 <col:13> 'int' lvalue ->status 0x55eac02ea0b8
| |   | | |     `-CXXThisExpr 0x55eac02eb738 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55eac03ce050 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55eac03ce020 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55eac02eb788 <col:23> 'int' lvalue ->status 0x55eac02ea0b8
| |   | |   |   `-CXXThisExpr 0x55eac02eb778 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55eac03ce038 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55eac02eb7b8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8da0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55eac03ce160 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55eac03ce110 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55eac03ce0e0 <col:13, col:18> '<bound member function type>' .error 0x55eac0291d80
| |   |   | | `-DeclRefExpr 0x55eac03ce0c0 <col:13> 'const ArgContext' lvalue ParmVar 0x55eac03ccf00 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55eac03ce138 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55eac02eb8c8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55eac03ce150 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55eac02eb930 <col:20> 'bool' false
| |   |-DeclStmt 0x55eac03ce6c8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55eac03ce670 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x55eac03ce620 'typename make_unsigned<int>::type' sugar
| |   |     `-TypedefType 0x55eac03ce600 'make_unsigned<int>::type' sugar
| |   |       |-Typedef 0x55eac03ce590 'type'
| |   |       `-ElaboratedType 0x55eac03ce540 'typename integer_traits<int>::unsigned_type' sugar
| |   |         `-TypedefType 0x55eac03ce520 'integer_traits<int>::unsigned_type' sugar
| |   |           |-Typedef 0x55eabff74f30 'unsigned_type'
| |   |           `-BuiltinType 0x55eabfc93410 'unsigned int'
| |   |-CallExpr 0x55eac03ced20 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x55eac03ced08 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x55eac03cec88 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55eac03ceb68 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55eabff85778 'extract_integer')
| |   | |-ImplicitCastExpr 0x55eac03ced68 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x55eac03ced50 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x55eac03ce728 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55eac03cdb08 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x55eac03ce7f8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
| |   |   `-DeclRefExpr 0x55eac03ce7a8 <col:64> 'int':'int' lvalue ParmVar 0x55eac03cce98 'result' 'int &'
| |   `-ReturnStmt 0x55eac03ced80 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55eac02ebcd8 <col:16> 'bool' true
| `-CXXMethodDecl 0x55eac03cfbd8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55eac03cf9b0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55eac03cfa88 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55eac03cfaf0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55eac03d14b8 <col:94, line:1067:5>
|     |-DeclStmt 0x55eac03d03e8 <line:1054:9, col:64>
|     | `-VarDecl 0x55eac03d0208 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55eac03d0378 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55eac03d0348 <col:36, col:55> 'const bool' lvalue Var 0x55eabff74080 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55eac03d05c8 <line:1055:9, col:91>
|     | `-VarDecl 0x55eac03d0400 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55eac03d0548 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55eac03d0530 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55eac03d0510 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55eac03d04f0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55eac03d04d0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55eac03d0498 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55eac03d0478 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55eac02eb038 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55eac03d04b8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55eac02eb078 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55eac02eb100 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55eac03d06e0 <line:1056:9, col:27>
|     | `-VarDecl 0x55eac03d0678 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55eac03d0b78 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55eac03d0b20 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55eac03d09d8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55eac03d09a8 <col:13> '<bound member function type>' ->parse 0x55eac02e97b0
|     | | | | `-CXXThisExpr 0x55eac03d0998 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55eac03d0838 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55eac03d0808 <col:19, col:23> '<bound member function type>' .begin 0x55eabffdf008
|     | | | |   `-DeclRefExpr 0x55eac03d07e8 <col:19> 'const String' lvalue ParmVar 0x55eac03cf9b0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55eac03d08a8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55eac03d0878 <col:32, col:36> '<bound member function type>' .end 0x55eabffdf220
|     | | | |   `-DeclRefExpr 0x55eac03d0858 <col:32> 'const String' lvalue ParmVar 0x55eac03cf9b0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55eac03d0a48 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55eac03d0a28 <col:43> 'const bool' lvalue Var 0x55eac03d0208 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55eac03d0930 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55eac03d0918 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55eac03d08f8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55eac03d0a60 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55eac03d0958 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55eac03d0678 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55eac03d0a98 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55eac03d0a78 <col:73> 'const int' lvalue Var 0x55eac03d0400 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55eac03d0b00 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55eac03d0ad0 <col:16, col:20> '<bound member function type>' .end 0x55eabffdf220
|     | |     `-DeclRefExpr 0x55eac03d0ab0 <col:16> 'const String' lvalue ParmVar 0x55eac03cf9b0 'str' 'const String &'
|     | `-BinaryOperator 0x55eac03d0b58 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55eac02eb698 <col:13> 'int' lvalue ->status 0x55eac02ea0b8
|     |   | `-CXXThisExpr 0x55eac02eb688 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55eac03d0b40 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55eac02eb6c8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8d10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55eac03d0cf0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55eac03d0c10 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55eac03d0bf8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55eac03d0be0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55eac02eb748 <col:13> 'int' lvalue ->status 0x55eac02ea0b8
|     | | |     `-CXXThisExpr 0x55eac02eb738 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55eac03d0bc0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55eac03d0b90 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55eac02eb788 <col:23> 'int' lvalue ->status 0x55eac02ea0b8
|     | |   |   `-CXXThisExpr 0x55eac02eb778 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55eac03d0ba8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55eac02eb7b8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8da0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55eac03d0cd0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55eac03d0c80 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55eac03d0c50 <col:13, col:18> '<bound member function type>' .error 0x55eac0291d80
|     |   | | `-DeclRefExpr 0x55eac03d0c30 <col:13> 'const ArgContext' lvalue ParmVar 0x55eac03cfaf0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55eac03d0ca8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55eac02eb8c8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55eac03d0cc0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55eac02eb930 <col:20> 'bool' false
|     |-DeclStmt 0x55eac03d1238 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55eac03d11e0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55eac03d1190 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55eac03d1170 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55eac03d1100 'type'
|     |       `-ElaboratedType 0x55eac03d10b0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55eac03d1090 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55eabff741d8 'unsigned_type'
|     |           `-BuiltinType 0x55eabfc93410 'unsigned int'
|     |-CallExpr 0x55eac03d1448 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55eac03d1430 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55eac03d1408 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55eac03ceb68 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55eabff85778 'extract_integer')
|     | |-ImplicitCastExpr 0x55eac03d1490 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55eac03d1478 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55eac03d1298 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55eac03d0678 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55eac03d1368 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55eac03d1318 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55eac03cfa88 'result' 'unsigned int &'
|     `-ReturnStmt 0x55eac03d14a8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55eac02ebcd8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55eac02e9fc8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55eac02e9c78 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55eac02e9f28 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55eac02e9d28 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55eac02e9dc8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55eac02e9e40 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55eac02ea7d8 <col:71> 'const ArgContext' lvalue Var 0x55eac02de678 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55eac02ec468 <col:83, line:1083:5>
| |   |-DeclStmt 0x55eac02ebdc0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55eac02ebd58 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55eac02ec440 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55eac02ec050 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55eac02ebed8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55eac02ebea0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55eac02ebde8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55eac02ebe40 <col:31> 'const String' lvalue ParmVar 0x55eac02e9d28 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55eac02ebe60 <col:36> 'V' lvalue Var 0x55eac02ebd58 'x' 'V'
| |     | |   `-DeclRefExpr 0x55eac02ebe80 <col:39> 'const ArgContext' lvalue ParmVar 0x55eac02e9e40 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55eac02ec030 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55eac02ec010 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55eac02ebff8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55eac02ebfe0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55eac02ebf00 <col:17> 'int' lvalue ->status 0x55eac02ea0b8
| |     |     |     `-CXXThisExpr 0x55eac02ebef0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55eac02ebfc0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55eac02ebf90 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55eac02ebf40 <col:27> 'int' lvalue ->status 0x55eac02ea0b8
| |     |       |   `-CXXThisExpr 0x55eac02ebf30 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55eac02ebfa8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55eac02ebf70 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8da0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55eac02ec080 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55eac02ec070 <col:20> 'bool' false
| |     `-IfStmt 0x55eac02ec418 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55eac02ec120 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55eac02ec0f0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55eac02ec0a0 <col:18> 'int' lvalue ->status 0x55eac02ea0b8
| |       | |   `-CXXThisExpr 0x55eac02ec090 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55eac02ec108 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55eac02ec0d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8da0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55eac02ec358 <col:42, line:1079:9>
| |       | |-CallExpr 0x55eac02ec300 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55eac02ec150 <line:1076:13> '<bound member function type>' ->range_error 0x55eac02ea6c8
| |       | | | `-CXXThisExpr 0x55eac02ec140 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55eac02ec180 <col:25> 'const ArgContext' lvalue ParmVar 0x55eac02e9e40 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55eac02ec260 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55eac02ec2d8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55eac02ec2b8 <col:43> 'V' lvalue Var 0x55eac02ebd58 'x' 'V'
| |       | `-ReturnStmt 0x55eac02ec348 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55eac02ec338 <col:20> 'bool' false
| |       `-CompoundStmt 0x55eac02ec3f8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55eac02ec3b8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55eac02ec378 <col:13> 'V' lvalue ParmVar 0x55eac02e9dc8 'result' 'V &'
| |         | `-DeclRefExpr 0x55eac02ec398 <col:22> 'V' lvalue Var 0x55eac02ebd58 'x' 'V'
| |         `-ReturnStmt 0x55eac02ec3e8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55eac02ec3d8 <col:20> 'bool' true
| |-CXXMethodDecl 0x55eac0354c88 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55eac0354a68 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x55eac0354b38 <col:35, col:38> col:38 used result 'int &'
| | |-ParmVarDecl 0x55eac0354ba0 <col:46, col:71> col:64 used args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55eac02ea7d8 <col:71> 'const ArgContext' lvalue Var 0x55eac02de678 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55eac03cd5f8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55eac03ccc30 <line:1071:9, col:12>
| |   | `-VarDecl 0x55eac03ccbc8 <col:9, col:11> col:11 used x 'int':'int'
| |   `-IfStmt 0x55eac03cd5d0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55eac03cd260 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x55eac03cd188 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x55eac03cd150 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x55eac03cd108 <col:14> '<bound member function type>' ->parse_saturating 0x55eac03ccfe8
| |     | |   | `-CXXThisExpr 0x55eac03cd0f8 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x55eac03ccca0 <col:31> 'const String' lvalue ParmVar 0x55eac0354a68 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55eac03cccc0 <col:36> 'int':'int' lvalue Var 0x55eac03ccbc8 'x' 'int':'int'
| |     | |   `-DeclRefExpr 0x55eac03ccce0 <col:39> 'const ArgContext' lvalue ParmVar 0x55eac0354ba0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55eac03cd240 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55eac03cd220 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55eac03cd208 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55eac03cd1f0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55eac02ebf00 <col:17> 'int' lvalue ->status 0x55eac02ea0b8
| |     |     |     `-CXXThisExpr 0x55eac02ebef0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55eac03cd1d0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55eac03cd1a0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55eac02ebf40 <col:27> 'int' lvalue ->status 0x55eac02ea0b8
| |     |       |   `-CXXThisExpr 0x55eac02ebf30 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55eac03cd1b8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55eac02ebf70 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8da0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55eac03cd280 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55eac02ec070 <col:20> 'bool' false
| |     `-IfStmt 0x55eac03cd5a8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55eac03cd2c0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55eac03cd290 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55eac02ec0a0 <col:18> 'int' lvalue ->status 0x55eac02ea0b8
| |       | |   `-CXXThisExpr 0x55eac02ec090 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55eac03cd2a8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55eac02ec0d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8da0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55eac03cd4e0 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x55eac03cd450 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x55eac02ec150 <line:1076:13> '<bound member function type>' ->range_error 0x55eac02ea6c8
| |       | | | `-CXXThisExpr 0x55eac02ec140 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55eac03cd2e0 <col:25> 'const ArgContext' lvalue ParmVar 0x55eac0354ba0 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x55eac03cd4b8 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x55eac03cd488 <col:31, col:50> 'const bool' lvalue Var 0x55eabff74dd8 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x55eac03cd428 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x55eac03cd410 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x55eac03cd3f8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x55eac03cd3d8 <col:43> 'int':'int' lvalue Var 0x55eac03ccbc8 'x' 'int':'int'
| |       | `-ReturnStmt 0x55eac03cd4d0 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55eac02ec338 <col:20> 'bool' false
| |       `-CompoundStmt 0x55eac03cd588 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55eac03cd558 <line:1080:13, col:22> 'int':'int' lvalue '='
| |         | |-DeclRefExpr 0x55eac03cd500 <col:13> 'int':'int' lvalue ParmVar 0x55eac0354b38 'result' 'int &'
| |         | `-ImplicitCastExpr 0x55eac03cd540 <col:22> 'int':'int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x55eac03cd520 <col:22> 'int':'int' lvalue Var 0x55eac03ccbc8 'x' 'int':'int'
| |         `-ReturnStmt 0x55eac03cd578 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55eac02ec3d8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55eac0355a48 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55eac0355820 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55eac03558f8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55eac0355960 <col:46, col:71> col:64 used args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55eac02ea7d8 <col:71> 'const ArgContext' lvalue Var 0x55eac02de678 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55eac03d01e8 <col:83, line:1083:5>
|     |-DeclStmt 0x55eac03cf8a0 <line:1071:9, col:12>
|     | `-VarDecl 0x55eac03cf838 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55eac03d01c0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55eac03cfe50 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55eac03cfd78 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55eac03cfd40 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55eac03cfcf8 <col:14> '<bound member function type>' ->parse_saturating 0x55eac03cfbd8
|       | |   | `-CXXThisExpr 0x55eac03cfce8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55eac03cf910 <col:31> 'const String' lvalue ParmVar 0x55eac0355820 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55eac03cf930 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55eac03cf838 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55eac03cf950 <col:39> 'const ArgContext' lvalue ParmVar 0x55eac0355960 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55eac03cfe30 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55eac03cfe10 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55eac03cfdf8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55eac03cfde0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55eac02ebf00 <col:17> 'int' lvalue ->status 0x55eac02ea0b8
|       |     |     `-CXXThisExpr 0x55eac02ebef0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55eac03cfdc0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55eac03cfd90 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55eac02ebf40 <col:27> 'int' lvalue ->status 0x55eac02ea0b8
|       |       |   `-CXXThisExpr 0x55eac02ebf30 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55eac03cfda8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55eac02ebf70 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8da0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55eac03cfe70 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55eac02ec070 <col:20> 'bool' false
|       `-IfStmt 0x55eac03d0198 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55eac03cfeb0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55eac03cfe80 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55eac02ec0a0 <col:18> 'int' lvalue ->status 0x55eac02ea0b8
|         | |   `-CXXThisExpr 0x55eac02ec090 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55eac03cfe98 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55eac02ec0d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55eac02e8da0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55eac03d00d0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55eac03d0040 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55eac02ec150 <line:1076:13> '<bound member function type>' ->range_error 0x55eac02ea6c8
|         | | | `-CXXThisExpr 0x55eac02ec140 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55eac03cfed0 <col:25> 'const ArgContext' lvalue ParmVar 0x55eac0355960 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55eac03d00a8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55eac03d0078 <col:31, col:50> 'const bool' lvalue Var 0x55eabff74080 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55eac03d0018 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55eac03d0000 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55eac03cffe8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55eac03cffc8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55eac03cf838 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55eac03d00c0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55eac02ec338 <col:20> 'bool' false
|         `-CompoundStmt 0x55eac03d0178 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55eac03d0148 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55eac03d00f0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55eac03558f8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55eac03d0130 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55eac03d0110 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55eac03cf838 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55eac03d0168 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55eac02ec3d8 <col:20> 'bool' true
|-FieldDecl 0x55eac02ea050 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55eac02ea0b8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55eac02ea108 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55eac02ea3c0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55eac02ea148 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55eac02ea1c8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55eac02ea240 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55eac02ea2c0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55eac02ea6c8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55eac02ea490 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55eac02ea508 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55eac02ea5a0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55eac02eccc8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55eac02eccc8
| `-ParmVarDecl 0x55eac02ecdd8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55eac02ecf58 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac02ed068 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55eac03943e0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55eac03943b0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55eac0394380 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55eac0394350 <col:7> 'IntArg' lvalue ParmVar 0x55eac02ed068 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55eac02ea050 'base' 'int'
| | `-ImplicitCastExpr 0x55eac03944d8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55eac03944a8 <col:7> 'int' xvalue .base 0x55eac02ea050
| |     `-CXXStaticCastExpr 0x55eac0394478 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55eac0394448 <col:7> 'IntArg' lvalue ParmVar 0x55eac02ed068 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55eac02ea0b8 'status' 'int'
| | `-ImplicitCastExpr 0x55eac03945a8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55eac0394578 <col:7> 'int' xvalue .status 0x55eac02ea0b8
| |     `-CXXStaticCastExpr 0x55eac0394548 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55eac0394518 <col:7> 'IntArg' lvalue ParmVar 0x55eac02ed068 '' 'IntArg &&'
| `-CompoundStmt 0x55eac0394600 <col:7>
`-CXXDestructorDecl 0x55eac0354810 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac02f6640 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac02f6758 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55eac02f67e8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55eac02f6a28 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55eac02f6820 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55eac02f68a0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55eac02f6918 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55eac02f6c40 <col:81> 'const ArgContext' lvalue Var 0x55eac02de678 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55eac02f6b80 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55eac02f6af0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55eac02f6d98 <col:35, line:1261:5>
|   `-ReturnStmt 0x55eac02f6d88 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55eac02f6d70 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55eac02f6d40 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55eac02f6d28 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55eac02f6d00 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55eac02f6ce0 <col:16, col:24> 'String' (CXXTemporary 0x55eac02f6ce0)
|               `-CXXConstructExpr 0x55eac02f6ca8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55eac02f6c90 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55eac02f6c70 <col:23> 'bool' lvalue ParmVar 0x55eac02f6af0 'x' 'bool'
|-CXXConstructorDecl 0x55eac0356618 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55eac0356718 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55eac0356718
| `-ParmVarDecl 0x55eac0356828 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x55eac03568c8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac03569d8 <col:7> col:7 'BoolArg &&'
| `-CompoundStmt 0x55eac03c78e0 <col:7>
`-CXXDestructorDecl 0x55eac0356a78 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55eac02f1260 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55eac02f14b8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55eac0393548 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55eac03939e0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55eac03939c0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55eac0393a50 <col:19>
|-CXXConstructorDecl 0x55eac0393648 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55eac0393648
| `-ParmVarDecl 0x55eac0393758 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55eac03937f8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac0393908 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55eac0394610 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55eac0394330 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55eac0394300 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55eac03942d0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55eac0393908 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55eac0394680 <col:19>
`-CXXDestructorDecl 0x55eac0393a90 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55eac02f1590 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55eac02f17e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55eac039c1c8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55eac039c660 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55eac039c640 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55eac039c6d0 <col:19>
|-CXXConstructorDecl 0x55eac039c2c8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55eac039c2c8
| `-ParmVarDecl 0x55eac039c3d8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55eac039c478 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac039c588 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55eac039cf70 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55eac039cf50 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55eac039cf20 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55eac039cef0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55eac039c588 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55eac039cfe0 <col:19>
`-CXXDestructorDecl 0x55eac039c710 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac017dc50 prev 0x55eac01fb110 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x55eac017f6b8 <line:148:18>
|-CXXRecordDecl 0x55eac017dd48 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x55eac017ddd8 <col:22, col:28> col:22 public
|-TypedefDecl 0x55eac017de10 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55eabfde9500 'uninitialized_type'
|   `-CXXRecord 0x55eabfde9468 'uninitialized_type'
|-CXXConstructorDecl 0x55eac017dea0 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x55eac017f9b8 <col:27, line:16:5>
|   `-BinaryOperator 0x55eac017f998 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55eac017f7a0 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55eac017f788 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55eac017f738 <col:2> 'uint16_t [3]' lvalue ->_data 0x55eac017f4b8
|     | |   `-CXXThisExpr 0x55eac017f728 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55eac017f768 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55eac017f980 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55eac017f960 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55eac017f838 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55eac017f820 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55eac017f7d0 <col:13> 'uint16_t [3]' lvalue ->_data 0x55eac017f4b8
|         | |   `-CXXThisExpr 0x55eac017f7c0 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55eac017f800 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55eac017f948 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55eac017f928 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55eac017f8d0 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55eac017f8b8 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55eac017f868 <col:24> 'uint16_t [3]' lvalue ->_data 0x55eac017f4b8
|             | |   `-CXXThisExpr 0x55eac017f858 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55eac017f898 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55eac017f910 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x55eac017f8f0 <col:35> 'int' 0
|-CXXConstructorDecl 0x55eac017dff0 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55eac017df60 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x55eac017fb80 <col:61, line:24:5>
|   `-CallExpr 0x55eac017fad0 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x55eac017fab8 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55eac017fa98 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55eabff1e4f8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55eac017fb20 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x55eac017fb08 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x55eac017fa28 <col:9> 'uint16_t [3]' lvalue ->_data 0x55eac017f4b8
|     |     `-CXXThisExpr 0x55eac017fa18 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x55eac017fb50 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55eac017fb38 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55eac017fa58 <col:16> 'const unsigned char *' lvalue ParmVar 0x55eac017df60 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x55eac017fb68 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x55eac017fa78 <col:22> 'int' 6
|-CXXConstructorDecl 0x55eac017e140 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55eac017e0b0 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55eac017fbf0 <col:59, line:29:5>
|   `-CStyleCastExpr 0x55eac017fbc8 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55eac017fb98 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55eac017e0b0 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55eac017e238 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x55eac0180338 <col:42, line:34:5>
|   `-ReturnStmt 0x55eac0180328 <line:33:2, col:28>
|     `-ExprWithCleanups 0x55eac0180310 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x55eac01802e0 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55eac0180118 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55eac0180090 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55eac017ff80 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x55eac017ff68 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x55eac017fc18 <col:22> 'int' 65535
|-CXXMethodDecl 0x55eac017e2f8 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x55eac017e398 <col:59> "" ""
|-TypedefDecl 0x55eac017e518 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x55eac017e490 'bool (EtherAddress::*)() const'
|   |-RecordType 0x55eac01fb1a0 'EtherAddress'
|   | `-CXXRecord 0x55eac017dc50 'EtherAddress'
|   `-ParenType 0x55eac017e430 'bool () const' sugar
|     `-FunctionProtoType 0x55eabfd3c220 'bool () const' const cdecl
|       `-BuiltinType 0x55eabfc932f0 'bool'
|-CXXConversionDecl 0x55eac017e658 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x55eac0180718 <col:51, line:43:5>
|   `-ReturnStmt 0x55eac0180708 <line:42:2, col:70>
|     `-ConditionalOperator 0x55eac01806d8 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x55eac0180600 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x55eac0180518 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x55eac01804d0 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x55eac01804b8 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55eac0180400 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55eac01803e8 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55eac0180360 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|       | | |     |   `-CXXThisExpr 0x55eac0180350 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55eac0180390 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55eac0180500 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x55eac01804e8 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55eac0180498 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55eac0180480 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55eac0180430 <col:21> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|       | |       |   `-CXXThisExpr 0x55eac0180420 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55eac0180460 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x55eac01805e8 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55eac01805d0 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55eac01805b0 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55eac0180598 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55eac0180548 <col:33> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|       |       |   `-CXXThisExpr 0x55eac0180538 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55eac0180578 <col:39> 'int' 2
|       |-UnaryOperator 0x55eac0180688 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55eac0180658 <col:45, col:59> 'bool () const' CXXMethod 0x55eac017e728 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x55eac01806c0 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55eac01806a0 <col:70> 'int' 0
|-CXXMethodDecl 0x55eac017e728 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x55eac01808d8 <col:34, line:51:5>
|   `-ReturnStmt 0x55eac01808c8 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x55eac01808b0 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55eac0180890 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55eac0180878 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55eac0180860 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55eac0180820 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55eac01807e0 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55eac01807b0 <col:9> '<bound member function type>' ->data 0x55eac017ebc0
|         |     |   `-CXXThisExpr 0x55eac01807a0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55eac0180800 <col:16> 'int' 0
|         `-IntegerLiteral 0x55eac0180840 <col:21> 'int' 1
|-CXXMethodDecl 0x55eac017e7e8 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x55eac0180a98 <col:34, line:59:5>
|   `-ReturnStmt 0x55eac0180a88 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x55eac0180a70 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55eac0180a50 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55eac0180a38 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55eac0180a20 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55eac01809e0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55eac01809a0 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55eac0180970 <col:9> '<bound member function type>' ->data 0x55eac017ebc0
|         |     |   `-CXXThisExpr 0x55eac0180960 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55eac01809c0 <col:16> 'int' 0
|         `-IntegerLiteral 0x55eac0180a00 <col:21> 'int' 2
|-CXXMethodDecl 0x55eac017e8a8 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x55eac0180d98 <col:38, line:66:5>
|   `-ReturnStmt 0x55eac0180d88 <line:65:2, col:43>
|     `-BinaryOperator 0x55eac0180d68 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x55eac0180d28 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x55eac0180c40 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x55eac0180bf8 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x55eac0180be0 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55eac0180b28 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55eac0180b10 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55eac0180ac0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|       | | |     |   `-CXXThisExpr 0x55eac0180ab0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55eac0180af0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55eac0180c28 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x55eac0180c10 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55eac0180bc0 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55eac0180ba8 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55eac0180b58 <col:20> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|       | |       |   `-CXXThisExpr 0x55eac0180b48 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55eac0180b88 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x55eac0180d10 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x55eac0180cf8 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55eac0180cd8 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55eac0180cc0 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55eac0180c70 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|       |       |   `-CXXThisExpr 0x55eac0180c60 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55eac0180ca0 <col:37> 'int' 2
|       `-IntegerLiteral 0x55eac0180d48 <col:43> 'int' 196605
|-CXXMethodDecl 0x55eac017ea28 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x55eac017e960 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x55eac0180ee8 <col:64, line:75:5>
|   `-ReturnStmt 0x55eac0180ed8 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x55eac0180eb8 <col:9, col:68> 'bool'
|       `-MemberExpr 0x55eac0180e88 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x55eac017e8a8
|         `-CXXReinterpretCastExpr 0x55eac0180df8 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x55eac0180de0 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55eac0180db0 <col:48> 'const unsigned char *' lvalue ParmVar 0x55eac017e960 'data' 'const unsigned char *'
|-CXXMethodDecl 0x55eac017eaf8 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x55eac0180fb0 <col:34, line:80:5>
|   `-ReturnStmt 0x55eac0180fa0 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x55eac0180f70 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55eac0180f58 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55eac0180f10 <col:43> 'uint16_t [3]' lvalue ->_data 0x55eac017f4b8
|           `-CXXThisExpr 0x55eac0180f00 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x55eac017ebc0 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x55eac0181078 <col:46, line:85:5>
|   `-ReturnStmt 0x55eac0181068 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x55eac0181038 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55eac0181020 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55eac0180fd8 <col:49> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|           `-CXXThisExpr 0x55eac0180fc8 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55eac017ed08 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x55eac01810f8 <col:42, line:91:5>
|   `-ReturnStmt 0x55eac01810e8 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x55eac01810d0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x55eac01810a0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|         `-CXXThisExpr 0x55eac0181090 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55eac017edf8 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x55eac0181508 <col:36, line:97:5>
|   `-ReturnStmt 0x55eac01814f8 <line:95:2, line:96:31>
|     `-BinaryOperator 0x55eac01814d8 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x55eac0181358 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x55eac0181338 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x55eac0181320 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x55eac0181308 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x55eac0181188 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x55eac0181170 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x55eac0181120 <col:10> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|       |   |     |   `-CXXThisExpr 0x55eac0181110 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x55eac0181150 <col:16> 'int' 2
|       |   `-ParenExpr 0x55eac01812e8 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x55eac01812c8 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x55eac0181280 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x55eac0181268 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x55eac0181250 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x55eac0181220 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x55eac0181208 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x55eac01811b8 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|       |       |       |   `-CXXThisExpr 0x55eac01811a8 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x55eac01811e8 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x55eac01812a8 <col:43> 'int' 16
|       `-ParenExpr 0x55eac01814b8 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x55eac0181498 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x55eac0181450 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x55eac0181438 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55eac0181420 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x55eac01813f0 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x55eac01813d8 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x55eac0181388 <col:18> 'uint16_t const[3]' lvalue ->_data 0x55eac017f4b8
|           |       |   `-CXXThisExpr 0x55eac0181378 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x55eac01813b8 <col:24> 'int' 0
|           `-IntegerLiteral 0x55eac0181478 <col:30> 'int' 9
|-CXXMethodDecl 0x55eac017eeb8 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x55eac0181618 <col:35, line:111:5>
|   `-ReturnStmt 0x55eac0181608 <line:110:2, col:22>
|     `-ExprWithCleanups 0x55eac01815f0 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x55eac01815c0 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55eac01815a8 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55eac0181588 <col:9, col:22> 'String' (CXXTemporary 0x55eac0181588)
|             `-CXXMemberCallExpr 0x55eac0181560 <col:9, col:22> 'String'
|               `-MemberExpr 0x55eac0181530 <col:9> '<bound member function type>' ->unparse_dash 0x55eac017f038
|                 `-CXXThisExpr 0x55eac0181520 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55eac017ef78 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x55eac017f038 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x55eac017f0f8 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55eac017f198 <col:44> "" ""
|-CXXConversionDecl 0x55eac017f238 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55eac017f2e0 <col:51> "" ""
|-TypedefDecl 0x55eac017f398 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x55eac017f360 'const EtherAddress &'
|   `-QualType 0x55eac01fb1a1 'const EtherAddress' const
|     `-RecordType 0x55eac01fb1a0 'EtherAddress'
|       `-CXXRecord 0x55eac017dc50 'EtherAddress'
|-AccessSpecDecl 0x55eac017f3f0 <line:140:2, col:9> col:2 private
|-FieldDecl 0x55eac017f4b8 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x55eac017f608 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x55eac017f518 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55eac01818c0 <col:30, line:146:5>
|   `-BinaryOperator 0x55eac01818a0 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55eac01816a8 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55eac0181690 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55eac0181640 <col:2> 'uint16_t [3]' lvalue ->_data 0x55eac017f4b8
|     | |   `-CXXThisExpr 0x55eac0181630 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55eac0181670 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55eac0181888 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55eac0181868 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55eac0181740 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55eac0181728 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55eac01816d8 <col:13> 'uint16_t [3]' lvalue ->_data 0x55eac017f4b8
|         | |   `-CXXThisExpr 0x55eac01816c8 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55eac0181708 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55eac0181850 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55eac0181830 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55eac01817d8 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55eac01817c0 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55eac0181770 <col:24> 'uint16_t [3]' lvalue ->_data 0x55eac017f4b8
|             | |   `-CXXThisExpr 0x55eac0181760 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55eac01817a0 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55eac0181818 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x55eac01817f8 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x55eac017f518 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55eac017fc38 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x55eac017fc38
| `-ParmVarDecl 0x55eac017fd48 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x55eac017fde8 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac017fef8 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x55eac017f4b8 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x55eac0180280 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x55eac0180208 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x55eac01801c0 <col:7> 'uint16_t [3]' xvalue ._data 0x55eac017f4b8
| |   |   `-CXXStaticCastExpr 0x55eac0180190 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x55eac0180160 <col:7> 'EtherAddress' lvalue ParmVar 0x55eac017fef8 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x55eac0180268 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55eac0180248 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x55eac0180230 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55eac0180208 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x55eac01801c0 <col:7> 'uint16_t [3]' xvalue ._data 0x55eac017f4b8
| |       |     `-CXXStaticCastExpr 0x55eac0180190 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x55eac0180160 <col:7> 'EtherAddress' lvalue ParmVar 0x55eac017fef8 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x55eac0180220 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55eac01802d0 <col:7>
`-CXXDestructorDecl 0x55eac017ffb0 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct IP6AddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IP6Address> (empty)
         0 |   struct IP6AddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55eac0249bf8 <../dummy_inc/click/ip6address.hh:373:1, line:383:1> line:373:8 referenced struct IP6AddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55eac0249d18 <col:1, col:8> col:8 implicit struct IP6AddressArg
|-CXXMethodDecl 0x55eac0249fc0 <line:374:5, line:375:43> line:374:24 basic_parse 'const char *(const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x55eac0249db8 <col:36, col:50> col:50 str 'const String &'
| |-ParmVarDecl 0x55eac0249e30 <col:55, col:67> col:67 result 'IP6Address &'
| `-ParmVarDecl 0x55eac0249ea8 <line:375:8, col:33> col:26 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55eac024a618 <col:33> 'const ArgContext' lvalue Var 0x55eac022da10 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55eac024a258 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x55eac024a088 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55eac024a100 <col:42, col:54> col:54 result 'IP6Address &'
| `-ParmVarDecl 0x55eac024a178 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55eac024a638 <col:34> 'const ArgContext' lvalue Var 0x55eac022da10 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55eac024a548 <line:378:5, line:381:5> line:378:17 parse 'bool (const String &, struct in6_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55eac024a320 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55eac024a3b0 <col:42, col:59> col:59 used result 'struct in6_addr &'
| |-ParmVarDecl 0x55eac024a428 <line:379:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55eac024a658 <col:34> 'const ArgContext' lvalue Var 0x55eac022da10 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55eac024a818 <col:46, line:381:5>
|   `-ReturnStmt 0x55eac024a808 <line:380:9, col:71>
|     `-CallExpr 0x55eac024a7d0 <col:16, col:71> 'bool'
|       |-ImplicitCastExpr 0x55eac024a7b8 <col:16> 'bool (*)(const String &, IP6Address &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55eac024a768 <col:16> 'bool (const String &, IP6Address &, const ArgContext &)' lvalue CXXMethod 0x55eac024a258 'parse' 'bool (const String &, IP6Address &, const ArgContext &)'
|       |-DeclRefExpr 0x55eac024a6c8 <col:22> 'const String' lvalue ParmVar 0x55eac024a320 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55eac024a718 <col:27, col:64> 'IP6Address' lvalue reinterpret_cast<class IP6Address &> <LValueBitCast>
|       | `-DeclRefExpr 0x55eac024a6e8 <col:58> 'struct in6_addr':'in6_addr' lvalue ParmVar 0x55eac024a3b0 'result' 'struct in6_addr &'
|       `-DeclRefExpr 0x55eac024a748 <col:67> 'const ArgContext' lvalue ParmVar 0x55eac024a428 'args' 'const ArgContext &'
|-CXXConstructorDecl 0x55eac03aecc8 <line:373:8> col:8 implicit constexpr IP6AddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55eac03aeda0 <col:8> col:8 implicit ~IP6AddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55eac03aeed8 <col:8> col:8 implicit constexpr IP6AddressArg 'void (const IP6AddressArg &)' inline default trivial noexcept-unevaluated 0x55eac03aeed8
| `-ParmVarDecl 0x55eac03aefe8 <col:8> col:8 'const IP6AddressArg &'
`-CXXConstructorDecl 0x55eac03af088 <col:8> col:8 implicit used constexpr IP6AddressArg 'void (IP6AddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55eac03af198 <col:8> col:8 'IP6AddressArg &&'
  `-CompoundStmt 0x55eac03afdf0 <col:8>

Layout: <CGRecordLayout
  LLVMType:%struct.IP6AddressArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.IP6AddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55eac024b9b0 <../dummy_inc/click/ip6address.hh:403:1, col:66> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IP6AddressArg'
|-TemplateArgument type 'IP6Address'
|-CXXRecordDecl 0x55eac024bc08 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55eac03aebd8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55eac03af208 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IP6Address> &)' inline default trivial noexcept-unevaluated 0x55eac03af208
| `-ParmVarDecl 0x55eac03af318 <col:19> col:19 'const DefaultArg<IP6Address> &'
|-CXXConstructorDecl 0x55eac03af3b8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IP6Address> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac03af4c8 <col:19> col:19 used 'DefaultArg<IP6Address> &&'
| |-CXXCtorInitializer 'IP6AddressArg'
| | `-CXXConstructExpr 0x55eac03afe00 <col:19> 'IP6AddressArg' 'void (IP6AddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55eac03afdd0 <col:19> 'IP6AddressArg' xvalue <UncheckedDerivedToBase (IP6AddressArg)>
| |     `-CXXStaticCastExpr 0x55eac03afda0 <col:19> 'DefaultArg<IP6Address>' xvalue static_cast<struct DefaultArg<class IP6Address> &&> <NoOp>
| |       `-DeclRefExpr 0x55eac03afd70 <col:19> 'DefaultArg<IP6Address>' lvalue ParmVar 0x55eac03af4c8 '' 'DefaultArg<IP6Address> &&'
| `-CompoundStmt 0x55eac03afe70 <col:19>
`-CXXDestructorDecl 0x55eac03af568 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.5 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.5 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55eac02f6dd8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55eac02f7038 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55eac03c6bf8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55eac03c6cf8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55eac03c6cf8
| `-ParmVarDecl 0x55eac03c6e08 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55eac03c6ea8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55eac03c6fb8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55eac03c78f0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55eac03c78c0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55eac03c7890 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55eac03c7860 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55eac03c6fb8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55eac03c7960 <col:19>
`-CXXDestructorDecl 0x55eac03c7058 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.6 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.6 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
