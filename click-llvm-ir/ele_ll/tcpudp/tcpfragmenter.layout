
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e264ec48 prev 0x5621e2646428 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5621e264ed40 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5621e264edd0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5621e264ee48 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5621e264ef08 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5621e264efd0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5621e264f148 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5621e264f080 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5621e264f1f0 <col:24>
| `-OptimizeNoneAttr 0x5621e264f248 <col:34>
|-CXXMethodDecl 0x5621e264f290 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5621e264f548 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5621e264f340 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5621e264f3b8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5621e264f438 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5621e264f600 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5621e264f638 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5621e264f6a0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5621e264f728 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5621e264fa48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5621e264f7e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5621e264f858 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5621e264f8d0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5621e264f950 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5621e264fb90 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5621e265c928 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5621e265c928
| `-ParmVarDecl 0x5621e265ca38 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5621e265cad8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5621e265cad8
| `-ParmVarDecl 0x5621e265cbe8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5621e2727dc0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e2641c70 prev 0x5621e26419f0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5621e2641d68 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5621e2641df8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5621e2641e58 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5621e2641f48 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5621e2642048 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5621e2642218 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5621e26420c8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5621e2642140 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5621e26423a8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5621e26422e0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5621e2642450 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5621e2642588 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5621e26424c0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5621e2642728 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5621e2642668 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5621e26428c8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5621e2642808 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5621e2642970 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5621e2642a70 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5621e2642b50 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2642a50 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5621e2642a30 <col:26> 'int' 1
| `-EnumConstantDecl 0x5621e2642b00 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5621e2642b68 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e2642ae0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5621e2642ac0 <col:44> 'int' 2
|-CXXMethodDecl 0x5621e2642cb0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5621e2642b98 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5621e2642c18 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5621e2642e08 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5621e2642d78 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5621e2643048 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5621e2642ec8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5621e2642f40 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5621e26430f8 <col:20>
| `-OptimizeNoneAttr 0x5621e2643150 <col:30>
|-CXXMethodDecl 0x5621e2643258 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5621e2643190 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5621e2643300 <col:20>
| `-OptimizeNoneAttr 0x5621e2643358 <col:30>
|-CXXMethodDecl 0x5621e26433a8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5621e2643470 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5621e2643588 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5621e2643610 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5621e2643698 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5621e2643720 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5621e26437a8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5621e2643838 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5621e26438f8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5621e2643980 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x5621e2643a08 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5621e2643a90 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5621e2643b60 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5621e2643be8 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5621e2643c78 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5621e2643d38 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5621e2643dc8 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5621e2643f18 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5621e2643e80 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5621e26440a0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5621e2643fd8 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5621e2644340 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5621e2644158 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5621e26441d8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5621e2644258 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5621e26443f8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5621e2644500 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5621e2644790 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e26444e0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5621e26444c0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5621e2644590 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5621e26447a8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2644570 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5621e2644550 <col:32> 'int' 20
| |-EnumConstantDecl 0x5621e2644620 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5621e26447c0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2644600 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5621e26445e0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5621e26446b0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5621e26447d8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2644690 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5621e2644670 <col:35> 'int' 100
| `-EnumConstantDecl 0x5621e2644740 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5621e26447f0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e2644720 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5621e2644700 <col:32> 'int' 2000
|-CXXMethodDecl 0x5621e2644830 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5621e2644c70 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5621e2644ae0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5621e2644b58 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5621e2644d40 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5621e2644ec0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5621e2644df0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5621e26450c8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5621e2644f78 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5621e2644ff0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5621e26451c8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5621e2645268 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5621e2645330 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5621e26453c0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5621e26455f0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e26453a0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5621e2645380 <col:36> 'int' EnumConstant 0x5621e2645330 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5621e2645410 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5621e2645460 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5621e26454b0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5621e2645500 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5621e2645550 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5621e26455a0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5621e26456d8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5621e2645618 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5621e26457a0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5621e2645860 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5621e2645920 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5621e26459e0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5621e2645af8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5621e2645bc0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5621e2645d40 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5621e2645c70 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5621e2645e68 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5621e2646068 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5621e2645f18 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5621e2645f98 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5621e2652978 <col:54, line:127:5>
|   |-ParenExpr 0x5621e2652828 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5621e26527f8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5621e26524e8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5621e26524c0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5621e26524a8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5621e2652490 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5621e2652460 <col:31> 'Router *' lvalue ->_router 0x5621e2650340
|   |   |         `-CXXThisExpr 0x5621e2652450 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5621e2652548 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e2652528 <col:48> 'int' 0
|   |   `-CallExpr 0x5621e2652758 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5621e2652740 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e2652720 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e2652798 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e26525b8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5621e26527b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e26525d8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5621e26527c8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e2652610 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5621e26527e0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e2652708 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e26526f0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e26526a8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5621e26528c0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5621e2652858 <col:9> 'Router *' lvalue ->_router 0x5621e2650340
|   | | `-CXXThisExpr 0x5621e2652848 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5621e26528a8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5621e2652888 <col:19> 'Router *' lvalue ParmVar 0x5621e2645f18 'r' 'Router *'
|   `-BinaryOperator 0x5621e2652958 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5621e26528f0 <col:9> 'int' lvalue ->_eindex 0x5621e26503a8
|     | `-CXXThisExpr 0x5621e26528e0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5621e2652940 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5621e2652920 <col:19> 'int' lvalue ParmVar 0x5621e2645f98 'eindex' 'int'
|-CXXMethodDecl 0x5621e26461f0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5621e2646128 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5621e26462c0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5621e2646388 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5621e2646428 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5621e2646678 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5621e26464f0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5621e2646570 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5621e2646728 <col:20>
| `-OptimizeNoneAttr 0x5621e2646780 <col:30>
|-CXXMethodDecl 0x5621e2646888 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5621e26467c0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5621e2646930 <col:20>
| `-OptimizeNoneAttr 0x5621e2646988 <col:30>
|-CXXMethodDecl 0x5621e2646a58 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5621e26469c8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5621e2646b00 <col:20>
| `-OptimizeNoneAttr 0x5621e2646b58 <col:30>
|-CXXMethodDecl 0x5621e2646ce8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5621e2646b90 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5621e2646c10 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5621e2646e78 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5621e2646db0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5621e2646fc8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5621e2646f38 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5621e2647118 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5621e2647088 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5621e2647268 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5621e26471d8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5621e2647528 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5621e2647320 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5621e26473a0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5621e2647448 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5621e2647600 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5621e26476c0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5621e2647990 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5621e2647840 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5621e26478b8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5621e2647ab8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5621e2647ca8 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5621e2647b88 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5621e2647c08 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5621e2647e90 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5621e2647d70 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5621e2647df0 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5621e2648208 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5621e2647f50 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5621e2647fc8 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5621e2648048 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5621e2651f60 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5621e2651f40 <col:106> 'int' 0
| `-ParmVarDecl 0x5621e26480c0 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5621e2651f98 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5621e2651f78 <col:126> 'int' 0
|-CXXMethodDecl 0x5621e2648588 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5621e26482d8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5621e2648350 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5621e26483d0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5621e2648448 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5621e2651fd0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5621e2651fb0 <col:114> 'int' 0
|-CXXMethodDecl 0x5621e2648918 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5621e2648660 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5621e26486d8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5621e2648758 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5621e2651fe8 <col:96> 'int' 0
| `-ParmVarDecl 0x5621e26487d0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5621e2652028 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5621e2652008 <col:116> 'int' 0
|-CXXMethodDecl 0x5621e2648c98 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5621e26489e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5621e2648a60 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5621e2648ae0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5621e2652060 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5621e2652040 <col:109> 'int' 0
| `-ParmVarDecl 0x5621e2648b58 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5621e2652098 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5621e2652078 <col:129> 'int' 0
|-CXXMethodDecl 0x5621e2649018 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5621e2648d68 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5621e2648de0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5621e2648e60 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5621e2648ed8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5621e26520d0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5621e26520b0 <col:117> 'int' 0
|-CXXMethodDecl 0x5621e26493a8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5621e26490f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e2649168 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5621e26491e8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5621e26520e8 <col:99> 'int' 0
| `-ParmVarDecl 0x5621e2649260 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5621e2652128 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5621e2652108 <col:119> 'int' 0
|-CXXMethodDecl 0x5621e26497c8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5621e2649478 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5621e26494f8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5621e2649570 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5621e26495f0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5621e2652160 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5621e2652140 <col:108> 'int' 0
| `-ParmVarDecl 0x5621e2649670 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5621e2652198 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5621e2652178 <col:141> 'int' 0
|-CXXMethodDecl 0x5621e2649be8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5621e26498a0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5621e2649920 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5621e2649998 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5621e2649a18 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5621e2649a98 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5621e26521b0 <col:121> 'int' 0
|-CXXMethodDecl 0x5621e264a018 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5621e2649cc8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5621e2649d48 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5621e2649dc0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5621e2649e40 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5621e26521d0 <col:98> 'int' 0
| `-ParmVarDecl 0x5621e2649ec0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5621e26521f0 <col:123> 'int' 0
|-CXXMethodDecl 0x5621e264a2e0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5621e264a0f0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5621e264a170 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5621e264a1f0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5621e2652210 <col:80> 'int' 0
|-EnumDecl 0x5621e264a398 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5621e264a4a0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5621e264a730 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e264a480 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5621e264a460 <col:42> 'int' 1
| |-EnumConstantDecl 0x5621e264a530 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5621e264a748 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e264a510 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5621e264a4f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5621e264a5c0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5621e264a760 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e264a5a0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5621e264a580 <col:44> 'int' 4
| |-EnumConstantDecl 0x5621e264a650 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5621e264a778 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e264a630 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5621e264a610 <col:36> 'int' 7
| `-EnumConstantDecl 0x5621e264a6e0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5621e264a790 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e264a6c0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5621e264a6a0 <col:34> 'int' 6
|-CXXMethodDecl 0x5621e264aa48 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5621e264a7b8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5621e264a858 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5621e264a8d8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5621e264a950 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5621e26522c8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5621e26522b0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5621e2652298 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5621e2652278 <col:98, col:105> 'String' (CXXTemporary 0x5621e2652278)
|           `-CXXTemporaryObjectExpr 0x5621e2652240 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5621e264ace8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5621e264ab18 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5621e264ab90 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5621e264ac08 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5621e2652378 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5621e2652360 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5621e2652348 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5621e2652328 <col:94, col:101> 'String' (CXXTemporary 0x5621e2652328)
| |         `-CXXTemporaryObjectExpr 0x5621e26522f0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5621e2652b60 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5621e2652ad8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5621e2652aa8 <col:9> '<bound member function type>' ->add_task_handlers 0x5621e264aa48
|     | `-CXXThisExpr 0x5621e2652a98 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5621e2652b18 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5621e2652a18 <col:27> 'Task *' lvalue ParmVar 0x5621e264ab18 'task' 'Task *'
|     |-ImplicitCastExpr 0x5621e2652b30 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5621e2652a38 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5621e264ab90 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5621e2652b48 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5621e2652a58 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5621e264a6e0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5621e2652a78 <col:62> 'const String' lvalue ParmVar 0x5621e264ac08 'prefix' 'const String &'
|-CXXMethodDecl 0x5621e264aef8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5621e264adb0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5621e264ae28 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5621e2652428 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5621e2652410 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5621e26523f8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5621e26523d8 <col:70, col:77> 'String' (CXXTemporary 0x5621e26523d8)
| |         `-CXXTemporaryObjectExpr 0x5621e26523a0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5621e2652d38 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5621e2652cb0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5621e2652c80 <col:9> '<bound member function type>' ->add_task_handlers 0x5621e264aa48
|     | `-CXXThisExpr 0x5621e2652c70 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5621e2652cf0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5621e2652bf0 <col:27> 'Task *' lvalue ParmVar 0x5621e264adb0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5621e2652d08 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5621e2652c10 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5621e2652d20 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5621e2652c30 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5621e264a6e0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5621e2652c50 <col:57> 'const String' lvalue ParmVar 0x5621e264ae28 'prefix' 'const String &'
|-CXXMethodDecl 0x5621e264b1d8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5621e264afc0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264b040 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264b0b8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5621e264b488 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5621e264b2a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264b328 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264b3a8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5621e264b778 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5621e264b558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264b5d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264b650 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5621e264ba28 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5621e264b848 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264b8c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264b948 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5621e264bcf8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5621e264baf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264bb98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264bc18 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5621e264bfa8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5621e264bdc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264be48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264bec0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5621e264c258 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5621e264c078 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264c0f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264c178 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5621e264c508 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5621e264c328 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264c3a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264c428 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5621e264c7e8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5621e264c5d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264c658 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264c700 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5621e264cac8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5621e264c8b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264c938 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264c9e0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5621e264cd30 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5621e264cb98 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5621e264cc18 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5621e264cc90 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5621e264cfd8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5621e264ce00 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5621e264ce80 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5621e264cef8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5621e264d288 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5621e264d0a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264d128 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264d1a8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5621e264d538 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5621e264d358 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264d3d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264d450 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5621e264d7e8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5621e264d608 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264d688 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264d700 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5621e264dab8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5621e264d8b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264d938 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5621e264d9d8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5621e264dde8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5621e264db88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5621e264dc08 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5621e264dc80 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5621e264dcf8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5621e2652440 <col:93> 'bool' false
|-CXXMethodDecl 0x5621e264dfd0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5621e264deb8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5621e264df38 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5621e264e1a8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5621e264e090 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5621e264e110 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5621e264e488 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5621e264e268 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5621e264e2e0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5621e264e360 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5621e264e3d8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5621e264e778 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5621e264e558 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5621e264e5d0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5621e264e650 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5621e264e6c8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5621e264e9b0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5621e264e850 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5621e264e8d0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5621e264eb98 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5621e264ea78 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5621e264eaf8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5621e264ec48 prev 0x5621e2646428 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5621e264ed40 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5621e264edd0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5621e264ee48 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5621e264ef08 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5621e264efd0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5621e264f148 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5621e264f080 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5621e264f1f0 <col:24>
| | `-OptimizeNoneAttr 0x5621e264f248 <col:34>
| |-CXXMethodDecl 0x5621e264f290 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5621e264f548 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5621e264f340 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5621e264f3b8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5621e264f438 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5621e264f600 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5621e264f638 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5621e264f6a0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5621e264f728 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5621e264fa48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5621e264f7e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5621e264f858 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5621e264f8d0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5621e264f950 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5621e264fb90 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5621e265c928 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5621e265c928
| | `-ParmVarDecl 0x5621e265ca38 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5621e265cad8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5621e265cad8
| | `-ParmVarDecl 0x5621e265cbe8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5621e2727dc0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5621e264fc08 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5621e264fca8 <col:38> "" ""
|-CXXMethodDecl 0x5621e264fd38 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5621e264fdd8 <col:44> "" ""
|-AccessSpecDecl 0x5621e264fe48 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5621e264fe70 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5621e264ff70 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5621e264ffc0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e264ff50 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5621e264ff30 <col:27> 'int' 4
|-FieldDecl 0x5621e2650078 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5621e2650228 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5621e26502e0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5621e2650340 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5621e26503a8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5621e26504f8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5621e2650438 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5621e26506a8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5621e26505b8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5621e2650888 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5621e2650768 <col:20> col:23 'int'
| `-ParmVarDecl 0x5621e26507e8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5621e2650b30 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5621e2650950 <col:23> col:26 'int'
| |-ParmVarDecl 0x5621e26509d0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5621e2650a48 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5621e2650be8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5621e2650cb0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5621e2650d00 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5621e2650d50 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5621e2650f30 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5621e2650de0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5621e2650e58 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5621e26511d8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5621e2650ff8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5621e2651078 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5621e26510f0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5621e26513f8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5621e26512a8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5621e2651328 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5621e2651730 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5621e26514b8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5621e2651538 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5621e26515b0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5621e2651630 <col:57> col:60 'int'
|-CXXMethodDecl 0x5621e2651918 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5621e2651800 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5621e2651880 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5621e2651a68 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5621e26519d8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5621e2651de8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5621e2651b28 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5621e2651ba8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5621e2651c20 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5621e2651ca0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5621e2651f00 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class TCPFragmenter
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint16_t _mtu
       110 |   int8_t _mtu_anno
       112 |   class atomic_uint32_t _fragments
       112 |     uint32_t _val
       116 |   class atomic_uint32_t _fragmented_count
       116 |     uint32_t _val
       120 |   class atomic_uint32_t _count
       120 |     uint32_t _val
           | [sizeof=128, dsize=124, align=8,
           |  nvsize=124, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e2407930 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5621e2407a48 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5621e2407ad8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5621e2407ba8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5621e2407c90 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5621e2407ea8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5621e2407d50 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e2408058 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5621e2407f60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5621e24081a0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5621e2408110 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5621e24082e8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5621e2408258 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e2408430 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5621e24083a0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e24084f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5621e2408640 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5621e24085b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5621e2408708 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5621e2408850 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5621e24087c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5621e24089c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5621e2408908 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e2408b10 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5621e2408a80 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e2408bd8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5621e2408d98 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5621e2408c88 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5621e2408d00 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e2408fe8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5621e2408e58 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5621e2408ed0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5621e2409098 <col:86> "" ""
|-CXXMethodDecl 0x5621e2409308 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5621e2409178 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5621e24091f0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e24094b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5621e24093c8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5621e2409668 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5621e2409570 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5621e2409938 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5621e2409720 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5621e2409798 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5621e2409810 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e2409c18 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5621e2409a00 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5621e2409a78 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5621e2409af0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5621e2409cd0 <col:115> "" ""
|-AccessSpecDecl 0x5621e2409d40 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5621e2409d78 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e240a228 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5621e240a228
| `-ParmVarDecl 0x5621e240a338 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5621e240a3d8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5621e240a3d8
| `-ParmVarDecl 0x5621e240a4e8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5621e2440de8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5621e262e710 <col:7>
|-CXXConstructorDecl 0x5621e2440ec0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5621e2440ec0
| `-ParmVarDecl 0x5621e2440fd8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5621e2441048 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5621e2441048
| `-ParmVarDecl 0x5621e2441158 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5621e2631100 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e265faa8 <../elements/tcpudp/tcpfragmenter.hh:34:1, line:57:1> line:34:7 class TCPFragmenter definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5621e265fc08 <col:1, col:7> col:7 implicit referenced class TCPFragmenter
|-AccessSpecDecl 0x5621e265fc98 <col:40, col:46> col:40 public
|-CXXConstructorDecl 0x5621e265fd20 <line:36:5, col:19> col:5 TCPFragmenter 'void ()'
|-CXXDestructorDecl 0x5621e265fe10 <line:37:5, col:20> col:5 ~TCPFragmenter 'void ()' noexcept-unevaluated 0x5621e265fe10
| `-Overrides: [ 0x5621e2641f48 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5621e265ff40 <line:39:5, col:62> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5621e26433a8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5621e2660d58 <col:36, col:62>
|   `-ReturnStmt 0x5621e2660d48 <col:38, col:45>
|     `-ImplicitCastExpr 0x5621e2660d30 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5621e2660d08 <col:45> 'const char [14]' lvalue "TCPFragmenter"
|-CXXMethodDecl 0x5621e2660008 <line:40:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5621e2643470 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5621e2660db8 <col:36, col:56>
|   `-ReturnStmt 0x5621e2660da8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5621e2660d90 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5621e2660d70 <col:45> 'const char []' lvalue Var 0x5621e2643720 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5621e26600d0 <line:41:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x5621e2643838 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5621e2660e18 <col:36, col:51>
|   `-ReturnStmt 0x5621e2660e08 <col:38, col:45>
|     `-ImplicitCastExpr 0x5621e2660df0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5621e2660dd0 <col:45> 'const char []' lvalue Var 0x5621e2643980 'PUSH' 'const char []'
|-CXXMethodDecl 0x5621e2660190 <line:42:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5621e26476c0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5621e2660e50 <col:39, col:54>
|   `-ReturnStmt 0x5621e2660e40 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x5621e2660e30 <col:48> 'bool' true
|-CXXMethodDecl 0x5621e2660460 <line:44:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5621e2644c70 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5621e2660310 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5621e2660388 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5621e2660530 <line:46:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5621e2644d40 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5621e26606f8 <line:48:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x5621e2642218 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5621e26605e8 <col:15> col:18 'int'
| `-ParmVarDecl 0x5621e2660660 <col:20, col:27> col:28 'Packet *'
|-AccessSpecDecl 0x5621e26607a8 <line:50:3, col:10> col:3 private
|-FieldDecl 0x5621e26607e0 <line:51:5, col:14> col:14 _mtu 'uint16_t':'unsigned short'
|-FieldDecl 0x5621e2660840 <line:52:5, col:12> col:12 _mtu_anno 'int8_t':'signed char'
|-FieldDecl 0x5621e26608a0 <line:54:3, col:19> col:19 referenced _fragments 'atomic_uint32_t'
|-FieldDecl 0x5621e2660900 <line:55:3, col:19> col:19 referenced _fragmented_count 'atomic_uint32_t'
|-FieldDecl 0x5621e2660960 <line:56:3, col:19> col:19 referenced _count 'atomic_uint32_t'
|-CXXConstructorDecl 0x5621e26609d8 <line:34:7> col:7 implicit TCPFragmenter 'void (const TCPFragmenter &)' inline default_delete noexcept-unevaluated 0x5621e26609d8
| `-ParmVarDecl 0x5621e2660ae8 <col:7> col:7 'const TCPFragmenter &'
`-CXXMethodDecl 0x5621e2660b88 <col:7> col:7 implicit operator= 'TCPFragmenter &(const TCPFragmenter &)' inline default_delete noexcept-unevaluated 0x5621e2660b88
  `-ParmVarDecl 0x5621e2660c98 <col:7> col:7 'const TCPFragmenter &'

Layout: <CGRecordLayout
  LLVMType:%class.TCPFragmenter = type { %class.Element.base, i16, i8, %class.atomic_uint32_t, %class.atomic_uint32_t, %class.atomic_uint32_t, [4 x i8] }
  NonVirtualBaseLLVMType:%class.TCPFragmenter.base = type { %class.Element.base, i16, i8, %class.atomic_uint32_t, %class.atomic_uint32_t, %class.atomic_uint32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e241b950 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5621e241ba68 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5621e241bb08 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5621e241bb68 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5621e241bbc8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5621e241bc78 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e241bf80 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5621e241c098 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5621e241c140 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5621e241c1a8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5621e241c238 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5621e24221c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5621e24225f8 <col:12>
|-CXXConstructorDecl 0x5621e24222c8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5621e24223d8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5621e241c140 'data' 'const char *'
| | `-ImplicitCastExpr 0x5621e2424b80 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5621e2424b50 <col:12> 'const char *const' lvalue .data 0x5621e241c140
| |     `-DeclRefExpr 0x5621e2424b30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e24223d8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5621e241c1a8 'length' 'int'
| | `-ImplicitCastExpr 0x5621e2424c10 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5621e2424be0 <col:12> 'const int' lvalue .length 0x5621e241c1a8
| |     `-DeclRefExpr 0x5621e2424bc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e24223d8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5621e241c238 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5621e2424ca0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5621e2424c70 <col:12> 'String::memo_t *const' lvalue .memo 0x5621e241c238
| |     `-DeclRefExpr 0x5621e2424c50 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e24223d8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5621e2424cf8 <col:12>
|-CXXConstructorDecl 0x5621e2422478 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5621e2422478
| `-ParmVarDecl 0x5621e2422588 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5621e2429b10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5621e2433518 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5621e2433628 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5621e2433b40 <col:12>
|   |-BinaryOperator 0x5621e2433958 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5621e2433910 <col:12> 'const char *' lvalue ->data 0x5621e241c140
|   | | `-CXXThisExpr 0x5621e2433900 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5621e2433940 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5621e24338d0 <col:12> 'const char *const' lvalue .data 0x5621e241c140
|   |     `-DeclRefExpr 0x5621e24338b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e2433628 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5621e2433a20 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5621e24339d8 <col:12> 'int' lvalue ->length 0x5621e241c1a8
|   | | `-CXXThisExpr 0x5621e24339c8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5621e2433a08 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5621e2433998 <col:12> 'const int' lvalue .length 0x5621e241c1a8
|   |     `-DeclRefExpr 0x5621e2433978 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e2433628 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5621e2433ae8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5621e2433aa0 <col:12> 'String::memo_t *' lvalue ->memo 0x5621e241c238
|   | | `-CXXThisExpr 0x5621e2433a90 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5621e2433ad0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5621e2433a60 <col:12> 'String::memo_t *const' lvalue .memo 0x5621e241c238
|   |     `-DeclRefExpr 0x5621e2433a40 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e2433628 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5621e2433b30 <col:12>
|     `-UnaryOperator 0x5621e2433b18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5621e2433b08 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5621e2433698 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5621e2433698
  `-ParmVarDecl 0x5621e24337a8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e2412658 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5621e2412778 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5621e2412808 <col:16, col:22> col:16 public
|-TypedefDecl 0x5621e2412848 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5621e20e1dc0 'const char *'
|   `-QualType 0x5621e20e1311 'const char' const
|     `-BuiltinType 0x5621e20e1310 'char'
|-TypedefDecl 0x5621e24128d0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5621e24128a0 'String::const_iterator' sugar
|   |-Typedef 0x5621e2412848 'const_iterator'
|   `-PointerType 0x5621e20e1dc0 'const char *'
|     `-QualType 0x5621e20e1311 'const char' const
|       `-BuiltinType 0x5621e20e1310 'char'
|-TypedefDecl 0x5621e2412a40 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5621e24129b0 'int (String::*)() const'
|   |-RecordType 0x5621e24126f0 'String'
|   | `-CXXRecord 0x5621e2412658 'String'
|   `-ParenType 0x5621e2412950 'int () const' sugar
|     `-FunctionProtoType 0x5621e23e8500 'int () const' const cdecl
|       `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e2412aa8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5621e22369c0 'int64_t' sugar
|   |-Typedef 0x5621e214a2d0 'int64_t'
|   `-TypedefType 0x5621e21234d0 '__int64_t' sugar
|     |-Typedef 0x5621e21230a8 '__int64_t'
|     `-BuiltinType 0x5621e20e1390 'long'
|-TypedefDecl 0x5621e2412b10 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5621e22368e0 'uint64_t' sugar
|   |-Typedef 0x5621e214a470 'uint64_t'
|   `-TypedefType 0x5621e2123560 '__uint64_t' sugar
|     |-Typedef 0x5621e2123118 '__uint64_t'
|     `-BuiltinType 0x5621e20e1430 'unsigned long'
|-TypedefDecl 0x5621e2412ba0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5621e2412b70 'String::intmax_t' sugar
|   |-Typedef 0x5621e2412aa8 'intmax_t'
|   `-TypedefType 0x5621e22369c0 'int64_t' sugar
|     |-Typedef 0x5621e214a2d0 'int64_t'
|     `-TypedefType 0x5621e21234d0 '__int64_t' sugar
|       |-Typedef 0x5621e21230a8 '__int64_t'
|       `-BuiltinType 0x5621e20e1390 'long'
|-TypedefDecl 0x5621e2412c30 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5621e2412c00 'String::uintmax_t' sugar
|   |-Typedef 0x5621e2412b10 'uintmax_t'
|   `-TypedefType 0x5621e22368e0 'uint64_t' sugar
|     |-Typedef 0x5621e214a470 'uint64_t'
|     `-TypedefType 0x5621e2123560 '__uint64_t' sugar
|       |-Typedef 0x5621e2123118 '__uint64_t'
|       `-BuiltinType 0x5621e20e1430 'unsigned long'
|-CXXConstructorDecl 0x5621e2412cf0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5621e2412e98 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5621e2412dd8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5621e2413048 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5621e2412f88 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5621e24131a0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5621e2413110 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5621e24133b8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5621e2413268 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5621e24132e8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5621e24135d8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5621e2413488 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5621e2413508 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5621e24137f8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5621e24136a8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5621e2413728 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5621e2413a18 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5621e24138c8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5621e2413948 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5621e2413ba8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5621e2413ae0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5621e2413d28 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5621e2413c68 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5621e2413eb8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5621e2413df0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5621e2414010 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5621e2413f80 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5621e2414168 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5621e24140d8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5621e24142c0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5621e2414230 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5621e2414448 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5621e2414388 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5621e24145d8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5621e2414510 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5621e2414768 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5621e24146a0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5621e24148f8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5621e2414830 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5621e24149f0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5621e2414b18 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5621e2414c98 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5621e2414bd0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5621e2414de8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5621e2414d58 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5621e2414e90 <col:63> "" ""
|-CXXMethodDecl 0x5621e2414fd8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5621e2414f18 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5621e24151e8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5621e2415098 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5621e2415118 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5621e2415408 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5621e24152b0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5621e2415330 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5621e24156e8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5621e24154c8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5621e2415548 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5621e241e2a0 <col:55> 'int' 10
| `-ParmVarDecl 0x5621e24155c0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5621e241e2c0 <col:76> 'bool' true
|-CXXMethodDecl 0x5621e24159c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5621e24157b0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5621e2415830 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5621e241e2d0 <col:56> 'int' 10
| `-ParmVarDecl 0x5621e24158a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5621e241e2f0 <col:77> 'bool' true
|-CXXMethodDecl 0x5621e2415f10 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5621e2415fd8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5621e24160a0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5621e2416140 <col:20>
| `-OptimizeNoneAttr 0x5621e2416198 <col:30>
|-CXXConversionDecl 0x5621e2416288 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5621e2416358 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5621e2416418 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5621e2416508 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5621e24165c8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5621e2416748 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5621e2416680 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5621e2416898 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5621e2416808 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5621e2416988 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5621e2416a48 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5621e2416c98 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5621e2416b00 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5621e2416b80 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5621e2416ef8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5621e2416d60 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5621e2416de0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5621e2416fc8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5621e24171d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5621e2417080 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5621e2417100 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5621e24173f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5621e24172a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5621e2417320 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5621e2417588 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5621e24174c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5621e2417678 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5621e24177e8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5621e2417728 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5621e24179f8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5621e24178a8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5621e2417928 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5621e2417c10 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5621e2417ab8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5621e2417b30 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5621e2417da0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5621e2417cd0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5621e2417fc0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5621e2417e60 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5621e2417ee0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5621e2418110 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5621e2418080 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5621e24182e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5621e24181d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5621e2418250 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5621e2418438 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5621e24183a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5621e2418650 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5621e24184f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5621e2418570 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5621e241e300 <col:39> 'int' 0
|-CXXMethodDecl 0x5621e2418870 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5621e2418710 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5621e2418790 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5621e241e320 <col:48> 'int' 0
|-CXXMethodDecl 0x5621e2418a50 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5621e2418930 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5621e24189b0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5621e2421d30 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5621e2418b20 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5621e2418be0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5621e2418ca0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5621e2418d60 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5621e2418e20 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5621e2418fc8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5621e2418ed0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5621e2419148 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5621e2419080 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5621e24192c8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5621e2419208 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5621e2419448 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5621e2419380 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5621e2419590 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5621e2419500 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5621e24196e0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5621e2419650 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5621e24198b8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5621e24197a0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5621e2419820 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5621e2419a98 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5621e2419980 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5621e2419a00 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5621e2419be8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5621e2419b58 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5621e2419df8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5621e2419ca8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5621e2419d28 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5621e241a3d8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5621e241a340 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5621e241a530 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5621e241a498 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5621e241a5d8 <col:57> "" ""
|-CXXMethodDecl 0x5621e241a6e8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5621e241a658 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5621e241a838 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5621e241a7a8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5621e241a9b8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5621e241a8f0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5621e241aa80 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5621e241ab40 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5621e241ac00 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5621e241aca0 <col:49> "" ""
|-CXXMethodDecl 0x5621e241ad30 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5621e241adf0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5621e241aee0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5621e241afa8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5621e241b068 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5621e241b128 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5621e241b220 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5621e241b2e8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5621e241b3b0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5621e241b588 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5621e241b468 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5621e241b4e8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5621e241b7b0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5621e241b650 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5621e241b6d0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5621e241b8c0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5621e241b928 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5621e241b950 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5621e241ba68 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5621e241bb08 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5621e241bb68 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5621e241bbc8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5621e241bc78 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5621e241bce0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5621e241bf18 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5621e241bf68 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e241bef8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5621e241be08 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5621e241bdb0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5621e241bdf0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5621e241bdd0 <col:32> 'int' 8
|-CXXRecordDecl 0x5621e241bf80 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5621e241c098 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5621e241c140 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5621e241c1a8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5621e241c238 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5621e24221c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5621e24225f8 <col:12>
| |-CXXConstructorDecl 0x5621e24222c8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5621e24223d8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5621e241c140 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5621e2424b80 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5621e2424b50 <col:12> 'const char *const' lvalue .data 0x5621e241c140
| | |     `-DeclRefExpr 0x5621e2424b30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e24223d8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5621e241c1a8 'length' 'int'
| | | `-ImplicitCastExpr 0x5621e2424c10 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5621e2424be0 <col:12> 'const int' lvalue .length 0x5621e241c1a8
| | |     `-DeclRefExpr 0x5621e2424bc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e24223d8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5621e241c238 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5621e2424ca0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5621e2424c70 <col:12> 'String::memo_t *const' lvalue .memo 0x5621e241c238
| | |     `-DeclRefExpr 0x5621e2424c50 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e24223d8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5621e2424cf8 <col:12>
| |-CXXConstructorDecl 0x5621e2422478 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5621e2422478
| | `-ParmVarDecl 0x5621e2422588 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5621e2429b10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5621e2433518 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5621e2433628 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5621e2433b40 <col:12>
| |   |-BinaryOperator 0x5621e2433958 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5621e2433910 <col:12> 'const char *' lvalue ->data 0x5621e241c140
| |   | | `-CXXThisExpr 0x5621e2433900 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5621e2433940 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5621e24338d0 <col:12> 'const char *const' lvalue .data 0x5621e241c140
| |   |     `-DeclRefExpr 0x5621e24338b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e2433628 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5621e2433a20 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5621e24339d8 <col:12> 'int' lvalue ->length 0x5621e241c1a8
| |   | | `-CXXThisExpr 0x5621e24339c8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5621e2433a08 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5621e2433998 <col:12> 'const int' lvalue .length 0x5621e241c1a8
| |   |     `-DeclRefExpr 0x5621e2433978 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e2433628 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5621e2433ae8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5621e2433aa0 <col:12> 'String::memo_t *' lvalue ->memo 0x5621e241c238
| |   | | `-CXXThisExpr 0x5621e2433a90 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5621e2433ad0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5621e2433a60 <col:12> 'String::memo_t *const' lvalue .memo 0x5621e241c238
| |   |     `-DeclRefExpr 0x5621e2433a40 <col:12> 'const String::rep_t' lvalue ParmVar 0x5621e2433628 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5621e2433b30 <col:12>
| |     `-UnaryOperator 0x5621e2433b18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5621e2433b08 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5621e2433698 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5621e2433698
|   `-ParmVarDecl 0x5621e24337a8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5621e241c2b0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5621e241c4f8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5621e241c318 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5621e241c398 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5621e241c410 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5621e2422180 <col:79, line:261:5>
|   |-BinaryOperator 0x5621e2421df8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5621e2421d90 <col:2, col:5> 'const char *' lvalue .data 0x5621e241c140
|   | | `-MemberExpr 0x5621e2421d60 <col:2> 'String::rep_t' lvalue ->_r 0x5621e241c2b0
|   | |   `-CXXThisExpr 0x5621e2421d50 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5621e2421de0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5621e2421dc0 <col:12> 'const char *' lvalue ParmVar 0x5621e241c318 'data' 'const char *'
|   |-BinaryOperator 0x5621e2421ec0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5621e2421e58 <col:2, col:5> 'int' lvalue .length 0x5621e241c1a8
|   | | `-MemberExpr 0x5621e2421e28 <col:2> 'String::rep_t' lvalue ->_r 0x5621e241c2b0
|   | |   `-CXXThisExpr 0x5621e2421e18 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5621e2421ea8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5621e2421e88 <col:14> 'int' lvalue ParmVar 0x5621e241c398 'length' 'int'
|   `-IfStmt 0x5621e2422168 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5621e2421fe0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5621e2421fc8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5621e2421fa8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5621e2421f88 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5621e2421f20 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5621e241c238
|     |       | `-MemberExpr 0x5621e2421ef0 <col:7> 'String::rep_t' lvalue ->_r 0x5621e241c2b0
|     |       |   `-CXXThisExpr 0x5621e2421ee0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5621e2421f70 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5621e2421f50 <col:17> 'String::memo_t *' lvalue ParmVar 0x5621e241c410 'memo' 'String::memo_t *'
|     `-CallExpr 0x5621e2422140 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5621e2422128 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5621e2422030 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5621e240d2b8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5621e2422098 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5621e241bb08
|         `-ImplicitCastExpr 0x5621e2422080 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5621e2422060 <col:27> 'String::memo_t *' lvalue ParmVar 0x5621e241c410 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5621e241c7a8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5621e241c5c8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5621e241c648 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5621e241c6c0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5621e241c2b0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5621e2422608 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5621e2422798 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5621e2422700 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5621e2422670 <col:2> '<bound member function type>' ->assign_memo 0x5621e241c4f8
|     | `-ImplicitCastExpr 0x5621e2422738 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5621e2422660 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5621e2422750 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5621e24226a0 <col:14> 'const char *' lvalue ParmVar 0x5621e241c5c8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5621e2422768 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5621e24226c0 <col:20> 'int' lvalue ParmVar 0x5621e241c648 'length' 'int'
|     `-ImplicitCastExpr 0x5621e2422780 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5621e24226e0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5621e241c6c0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5621e241c938 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5621e241c878 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5621e24229f0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5621e2422970 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5621e24227c0 <col:2> '<bound member function type>' ->assign_memo 0x5621e241c4f8
|     | `-CXXThisExpr 0x5621e24227b0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5621e24229a8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5621e2422840 <col:14, col:19> 'const char *' lvalue .data 0x5621e241c140
|     |   `-MemberExpr 0x5621e2422810 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5621e241c2b0
|     |     `-DeclRefExpr 0x5621e24227f0 <col:14> 'const String' lvalue ParmVar 0x5621e241c878 'x' 'const String &'
|     |-ImplicitCastExpr 0x5621e24229c0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5621e24228c0 <col:25, col:30> 'int' lvalue .length 0x5621e241c1a8
|     |   `-MemberExpr 0x5621e2422890 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5621e241c2b0
|     |     `-DeclRefExpr 0x5621e2422870 <col:25> 'const String' lvalue ParmVar 0x5621e241c878 'x' 'const String &'
|     `-ImplicitCastExpr 0x5621e24229d8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5621e2422940 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5621e241c238
|         `-MemberExpr 0x5621e2422910 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5621e241c2b0
|           `-DeclRefExpr 0x5621e24228f0 <col:38> 'const String' lvalue ParmVar 0x5621e241c878 'x' 'const String &'
|-CXXMethodDecl 0x5621e241ca00 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5621e24233b0 <col:31, line:278:5>
|   `-IfStmt 0x5621e2423398 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5621e2422a90 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5621e2422a78 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5621e2422a48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5621e241c238
|     |     `-MemberExpr 0x5621e2422a18 <col:6> 'String::rep_t' lvalue ->_r 0x5621e241c2b0
|     |       `-CXXThisExpr 0x5621e2422a08 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5621e2423370 <col:15, line:277:2>
|       |-ParenExpr 0x5621e2422f40 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5621e2422f10 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5621e2422ba0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5621e2422b88 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5621e2422b70 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5621e2422b30 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5621e241bb08
|       |   |       `-ImplicitCastExpr 0x5621e2422b18 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5621e2422ae8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5621e241c238
|       |   |           `-MemberExpr 0x5621e2422ab8 <col:27> 'String::rep_t' lvalue ->_r 0x5621e241c2b0
|       |   |             `-CXXThisExpr 0x5621e2422aa8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5621e2422c00 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5621e2422be0 <col:54> 'int' 0
|       |   `-CallExpr 0x5621e2422e70 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5621e2422e58 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5621e2422dd8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5621e2422eb0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5621e2422ce8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5621e2422ec8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5621e2422d18 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5621e2422ee0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5621e2422d50 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5621e2422ef8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5621e2422dc0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5621e2422da8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5621e2422d70 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5621e2423290 <line:274:6, line:275:22>
|       | |-CallExpr 0x5621e2423150 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5621e2423138 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5621e24230b0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5621e240e700 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5621e2423080 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5621e241bb08
|       | |   `-ImplicitCastExpr 0x5621e2423068 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5621e2423038 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5621e241c238
|       | |       `-MemberExpr 0x5621e2423008 <col:40> 'String::rep_t' lvalue ->_r 0x5621e241c2b0
|       | |         `-CXXThisExpr 0x5621e2422ff8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5621e2423250 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5621e2423238 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5621e2423178 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5621e241d6d8 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5621e2423278 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5621e24231d8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5621e241c238
|       |       `-MemberExpr 0x5621e24231a8 <col:15> 'String::rep_t' lvalue ->_r 0x5621e241c2b0
|       |         `-CXXThisExpr 0x5621e2423198 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5621e2423350 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5621e24232e8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5621e241c238
|         | `-MemberExpr 0x5621e24232b8 <col:6> 'String::rep_t' lvalue ->_r 0x5621e241c2b0
|         |   `-CXXThisExpr 0x5621e24232a8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5621e2423338 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5621e2423318 <col:16> 'int' 0
|-CXXMethodDecl 0x5621e241cc98 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5621e241cab8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5621e241cb38 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5621e241cbb0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5621e241cd70 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5621e241cfc0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5621e241ce28 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5621e241cea8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5621e241cf20 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5621e241d1a8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5621e241d090 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5621e241d110 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5621e241d2a8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5621e2423488 <col:41, line:286:5>
|   `-ReturnStmt 0x5621e2423478 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5621e2423448 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5621e2423410 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5621e24233f8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5621e24233d8 <col:46> 'int' 1
|-CXXMethodDecl 0x5621e241d548 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5621e241d360 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5621e241d3e0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5621e241d460 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5621e241d6d8 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5621e241d610 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5621e241d7a8 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5621e241d978 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5621e241d860 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5621e241d8e0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5621e241da38 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5621e241db00 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5621e241dc08 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5621e241dc80 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5621e241dcf8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5621e241dd60 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5621e241de60 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5621e241deb0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e241de40 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5621e241de20 <col:22> 'int' 14
|-CXXMethodDecl 0x5621e241e0c8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5621e241dee0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5621e241df60 <col:38> col:41 'int'
| `-ParmVarDecl 0x5621e241dfe0 <col:43> col:46 'int'
|-FriendDecl 0x5621e241e1d0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5621e241e260 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5621e268e070 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5621e268e248 prev 0x5621e268e070 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5621e268e2d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5621e268e300 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e268fc60 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5621e268fc10 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5621e268fbf0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5621e268e518 'type'
|     `-SubstTemplateTypeParmType 0x5621e268e4e0 'String' sugar
|       |-TemplateTypeParmType 0x5621e23d89c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23d8970 'T'
|       `-RecordType 0x5621e24126f0 'String'
|         `-CXXRecord 0x5621e2412658 'String'
|-TypedefDecl 0x5621e268fd18 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5621e268fce0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5621e268fcc0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5621e268fc60 'type'
|     `-ElaboratedType 0x5621e268fc10 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5621e268fbf0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5621e268e518 'type'
|         `-SubstTemplateTypeParmType 0x5621e268e4e0 'String' sugar
|           |-TemplateTypeParmType 0x5621e23d89c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5621e23d8970 'T'
|           `-RecordType 0x5621e24126f0 'String'
|             `-CXXRecord 0x5621e2412658 'String'
|-CXXMethodDecl 0x5621e268fe98 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5621e268fda8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5621e268ff88 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5621e2690078 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5621e2690078
|-CXXMethodDecl 0x5621e2690348 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5621e2690250 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5621e2690588 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5621e2690400 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5621e2690478 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5621e2690758 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5621e2690648 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5621e26906c0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5621e26908b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5621e2690988 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5621e2690bd8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5621e2690a48 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5621e2690ac0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5621e2690e38 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5621e2690ca8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5621e2690d20 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5621e2690ff8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5621e2690f08 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5621e26911b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5621e26910c0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5621e2691270 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5621e2691320 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5621e2691558 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5621e26913d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5621e2691448 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5621e26917f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5621e2691700 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5621e26918c0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5621e2691910 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5621e2691960 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5621e26448e0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5621e268cad8 prev 0x5621e26448e0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5621e268dfe0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5621e268df90 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5621e268df70 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5621e268de20 'type'
|     `-SubstTemplateTypeParmType 0x5621e268dcb0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5621e23ab950 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5621e23ab8f8 'F'
|       `-RecordType 0x5621e268d910 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5621e268d830 'typed_array_memory'
|-FieldDecl 0x5621e26919b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5621e2691a00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5621e2691a38 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5621e268cb70 'String' sugar
|   |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5621e23e5268 'T'
|   `-RecordType 0x5621e24126f0 'String'
|     `-CXXRecord 0x5621e2412658 'String'
|-TypedefDecl 0x5621e2691ac8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5621e2691a90 'String &'
|   `-SubstTemplateTypeParmType 0x5621e268cb70 'String' sugar
|     |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5621e23e5268 'T'
|     `-RecordType 0x5621e24126f0 'String'
|       `-CXXRecord 0x5621e2412658 'String'
|-TypedefDecl 0x5621e2691b58 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5621e2691b20 'const String &'
|   `-QualType 0x5621e268cb71 'const String' const
|     `-SubstTemplateTypeParmType 0x5621e268cb70 'String' sugar
|       |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23e5268 'T'
|       `-RecordType 0x5621e24126f0 'String'
|         `-CXXRecord 0x5621e2412658 'String'
|-TypedefDecl 0x5621e2691be8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5621e2691bb0 'String *'
|   `-SubstTemplateTypeParmType 0x5621e268cb70 'String' sugar
|     |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5621e23e5268 'T'
|     `-RecordType 0x5621e24126f0 'String'
|       `-CXXRecord 0x5621e2412658 'String'
|-TypedefDecl 0x5621e2691c78 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5621e2691c40 'const String *'
|   `-QualType 0x5621e268cb71 'const String' const
|     `-SubstTemplateTypeParmType 0x5621e268cb70 'String' sugar
|       |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23e5268 'T'
|       `-RecordType 0x5621e24126f0 'String'
|         `-CXXRecord 0x5621e2412658 'String'
|-TypedefDecl 0x5621e26928d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5621e2692880 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5621e2692860 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5621e2692798 'type'
|     `-LValueReferenceType 0x5621e2692760 'const String &'
|       `-QualType 0x5621e2692501 'const String' const
|         `-SubstTemplateTypeParmType 0x5621e2692500 'String' sugar
|           |-TemplateTypeParmType 0x5621e23b6c50 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5621e23b6bf8 'T'
|           `-RecordType 0x5621e24126f0 'String'
|             `-CXXRecord 0x5621e2412658 'String'
|-TypedefDecl 0x5621e2692938 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5621e2691b20 'const String &'
|   `-QualType 0x5621e268cb71 'const String' const
|     `-SubstTemplateTypeParmType 0x5621e268cb70 'String' sugar
|       |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23e5268 'T'
|       `-RecordType 0x5621e24126f0 'String'
|         `-CXXRecord 0x5621e2412658 'String'
|-TypedefDecl 0x5621e2692990 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26929f8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5621e2691bb0 'String *'
|   `-SubstTemplateTypeParmType 0x5621e268cb70 'String' sugar
|     |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5621e23e5268 'T'
|     `-RecordType 0x5621e24126f0 'String'
|       `-CXXRecord 0x5621e2412658 'String'
|-TypedefDecl 0x5621e2692a60 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5621e2691c40 'const String *'
|   `-QualType 0x5621e268cb71 'const String' const
|     `-SubstTemplateTypeParmType 0x5621e268cb70 'String' sugar
|       |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23e5268 'T'
|       `-RecordType 0x5621e24126f0 'String'
|         `-CXXRecord 0x5621e2412658 'String'
|-EnumDecl 0x5621e2692ab8 <line:134:5> col:5
| `-EnumConstantDecl 0x5621e2692bb0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5621e2692b90 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5621e23e6488 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5621e23e6460 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5621e23e6440 <col:40> 'int' 1
|-CXXConstructorDecl 0x5621e2692c38 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5621e2692ec8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5621e2692cf0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5621e2692d90 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5621e2693158 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5621e2693040 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5621e2693418 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5621e2693300 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5621e2693730 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5621e2693610 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5621e2693a40 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5621e2693920 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5621e2693d30 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5621e2693b78 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5621e2693bf0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5621e2693e58 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5621e2693f08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e2693f60 <col:30> Inherited
|-CXXMethodDecl 0x5621e2693fa8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5621e2694058 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e26940b0 <col:30> Inherited
|-CXXMethodDecl 0x5621e2694178 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5621e2694228 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e2694280 <col:30> Inherited
|-CXXMethodDecl 0x5621e26942c8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5621e2694378 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e26943d0 <col:30> Inherited
|-CXXMethodDecl 0x5621e2694418 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5621e26944c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e2694520 <col:30> Inherited
|-CXXMethodDecl 0x5621e2694568 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5621e2694618 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e2694670 <col:30> Inherited
|-CXXMethodDecl 0x5621e2694698 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5621e2694748 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5621e26947f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5621e26949b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5621e26948a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5621e2694920 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5621e2694b08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5621e2694a78 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e2694cb8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5621e2694bc0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5621e2694d70 <col:20>
| `-OptimizeNoneAttr 0x5621e2694dc8 <col:30>
|-CXXMethodDecl 0x5621e2694ee8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5621e2694df0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5621e2694fa0 <col:20>
| `-OptimizeNoneAttr 0x5621e2694ff8 <col:30>
|-CXXMethodDecl 0x5621e26950b0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5621e2695020 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e26951f8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5621e2695168 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e2695328 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5621e2695428 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5621e26954f8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5621e26955c8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5621e2695708 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5621e2695678 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e2695850 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5621e26957c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e2695998 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5621e2695908 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5621e2695a50 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5621e2695b50 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5621e2695ac0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5621e2695c08 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5621e2695cc8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5621e2695dc8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5621e2695f48 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5621e2695e88 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5621e2696708 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5621e2696000 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5621e2696668 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5621e2696568 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5621e26967e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5621e2696938 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5621e26968a8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5621e26969f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5621e2696c38 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5621e2696ab0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5621e2696b28 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5621e2696dc8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5621e2696d08 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5621e2696fd8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5621e2696e90 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5621e2696f08 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5621e2697098 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5621e26972f8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5621e2697200 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5621e26973c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5621e26973c8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e2715648 prev 0x5621e25c4138 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5621e2715740 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5621e27157d0 <col:22, col:28> col:22 public
|-EnumDecl 0x5621e27157f8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5621e2715918 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5621e27158f8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5621e27158e0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5621e27158c0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5621e27159c0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5621e27159a0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5621e2715988 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5621e2715968 <col:14> 'int' 1
| |-EnumConstantDecl 0x5621e2715a50 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5621e2715a30 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5621e2715a10 <col:17> 'int' 0
| |-EnumConstantDecl 0x5621e2715ae0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5621e2715ac0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5621e2715aa0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5621e2715b70 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5621e2715b50 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5621e2715b30 <col:16> 'int' 2
| |-EnumConstantDecl 0x5621e2715c00 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5621e2715be0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5621e2715bc0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5621e2715c90 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5621e2715c70 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5621e2715c50 <col:15> 'int' 4
| |-EnumConstantDecl 0x5621e2715d20 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5621e2715d00 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5621e2715ce0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5621e2715db0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5621e2715d90 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5621e2715d70 <col:12> 'int' 6
| `-EnumConstantDecl 0x5621e2715e40 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5621e2715e20 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5621e2715e00 <col:13> 'int' 7
|-VarDecl 0x5621e2715eb0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5621e2715f38 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5621e2715fc0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5621e2716048 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5621e27160d0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5621e2716158 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5621e27161e0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5621e2716268 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5621e27162f0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5621e2716378 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5621e2716400 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5621e2716500 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5621e271b7f8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5621e271bf88 <line:128:13> 'int' 0
| `-CompoundStmt 0x5621e271bff8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5621e27165f0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5621e271c008 <col:29, line:132:5>
|-CXXMethodDecl 0x5621e27167a8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5621e27166e0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5621e2716870 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5621e2716958 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5621e271c060 <col:44, line:161:5>
|   `-ReturnStmt 0x5621e271c050 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5621e271c038 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5621e271c018 <col:9> 'ErrorHandler *' lvalue Var 0x5621e271b858 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5621e2716a98 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5621e2716a08 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5621e2716b60 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5621e271c0c0 <col:43, line:173:5>
|   `-ReturnStmt 0x5621e271c0b0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5621e271c098 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5621e271c078 <col:9> 'ErrorHandler *' lvalue Var 0x5621e271b8d0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5621e2716c18 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5621e2716c98 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5621e2716da8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5621e2716d18 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5621e2716ef8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5621e2716e68 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5621e2717050 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5621e2716fb8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5621e27171a8 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5621e2717110 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5621e2717300 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5621e2717268 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5621e2717510 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5621e27173b8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5621e2717438 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5621e27176e8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5621e27175d0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5621e2717650 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5621e2717908 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5621e27177a8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5621e2717828 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5621e2717ae8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5621e27179c8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5621e2717a48 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5621e2717cc8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5621e2717ba8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5621e2717c28 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5621e2717e50 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5621e2717d88 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5621e2718020 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5621e2717f08 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5621e2717f80 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5621e271c318 <col:57, line:234:5>
|   `-ReturnStmt 0x5621e271c308 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5621e271c2f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5621e271c298 <col:9, col:41> 'int'
|         |-MemberExpr 0x5621e271c268 <col:9> '<bound member function type>' ->xmessage 0x5621e2717e50
|         | `-CXXThisExpr 0x5621e271c258 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5621e271c2d8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5621e271c2c0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5621e271c238 <col:18, col:40> 'String' (CXXTemporary 0x5621e271c238)
|               `-CallExpr 0x5621e271c200 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5621e271c1e8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5621e271c160 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5621e271a018 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5621e271c180 <col:31> 'const String' lvalue ParmVar 0x5621e2717f80 'str' 'const String &'
|                 `-DeclRefExpr 0x5621e271c1a0 <col:36> 'const String' lvalue ParmVar 0x5621e2717f08 'anno' 'const String &'
|-CXXMethodDecl 0x5621e2718300 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5621e27180e0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5621e2718160 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5621e27181d8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5621e271c5a8 <col:68, line:243:5>
|   `-ReturnStmt 0x5621e271c598 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5621e271c580 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5621e271c520 <col:9, col:41> 'int'
|         |-MemberExpr 0x5621e271c4f0 <col:9> '<bound member function type>' ->xmessage 0x5621e2718020
|         | `-CXXThisExpr 0x5621e271c4e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5621e271c3b8 <col:18> 'const String' lvalue ParmVar 0x5621e27180e0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5621e271c568 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5621e271c550 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5621e271c4c0 <col:24, col:40> 'String' (CXXTemporary 0x5621e271c4c0)
|               `-CXXMemberCallExpr 0x5621e271c458 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5621e271c3e8 <col:24> '<bound member function type>' ->vformat 0x5621e27194e0
|                 | `-CXXThisExpr 0x5621e271c3d8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5621e271c488 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5621e271c418 <col:32> 'const char *' lvalue ParmVar 0x5621e2718160 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5621e271c4a0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5621e271c438 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5621e27181d8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5621e27185a0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5621e27183c8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5621e2718440 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5621e27184b8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5621e271c8e8 <col:23, line:254:5>
|   `-ReturnStmt 0x5621e271c8d8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5621e271c8c0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5621e271c860 <col:9, col:71> 'int'
|         |-MemberExpr 0x5621e271c830 <col:9> '<bound member function type>' ->xmessage 0x5621e2718020
|         | `-CXXThisExpr 0x5621e271c820 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5621e271c8a8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5621e271c890 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5621e271c7e0 <col:18, col:65> 'String' (CXXTemporary 0x5621e271c7e0)
|         |     `-CallExpr 0x5621e271c778 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5621e271c760 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5621e271c648 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5621e271a018 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5621e271c668 <col:31> 'const String' lvalue ParmVar 0x5621e2718440 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5621e271c7c0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5621e271c7a8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5621e271c740 <col:37, col:64> 'String' (CXXTemporary 0x5621e271c740)
|         |             `-CallExpr 0x5621e271c710 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5621e271c6f8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5621e271c688 <col:37> 'String (const String &)' lvalue CXXMethod 0x5621e271a668 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5621e271c6a8 <col:56> 'const String' lvalue ParmVar 0x5621e27183c8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5621e271c800 <col:68> 'const String' lvalue ParmVar 0x5621e27184b8 'str' 'const String &'
|-CXXMethodDecl 0x5621e2718920 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5621e2718668 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5621e27186e0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5621e2718760 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5621e27187d8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5621e271cba0 <col:34, line:267:5>
|   `-ReturnStmt 0x5621e271cb90 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5621e271cb78 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5621e271cb10 <col:9, col:51> 'int'
|         |-MemberExpr 0x5621e271cae0 <col:9> '<bound member function type>' ->xmessage 0x5621e27185a0
|         | `-CXXThisExpr 0x5621e271cad0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5621e271c988 <col:18> 'const String' lvalue ParmVar 0x5621e2718668 'landmark' 'const String &'
|         |-DeclRefExpr 0x5621e271c9a8 <col:28> 'const String' lvalue ParmVar 0x5621e27186e0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5621e271cb60 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5621e271cb48 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5621e271cab0 <col:34, col:50> 'String' (CXXTemporary 0x5621e271cab0)
|               `-CXXMemberCallExpr 0x5621e271ca48 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5621e271c9d8 <col:34> '<bound member function type>' ->vformat 0x5621e27194e0
|                 | `-CXXThisExpr 0x5621e271c9c8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5621e271ca78 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5621e271ca08 <col:42> 'const char *' lvalue ParmVar 0x5621e2718760 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5621e271ca90 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5621e271ca28 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5621e27187d8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5621e2718a30 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5621e271cc20 <col:25, line:288:5>
|   `-ReturnStmt 0x5621e271cc10 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5621e271cbf8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5621e271cbc8 <col:9> 'const int' lvalue ->_nerrors 0x5621e271b7f8
|         `-CXXThisExpr 0x5621e271cbb8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5621e2718c40 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5621e2718ae8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5621e2718b68 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5621e2718f28 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5621e2718d08 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5621e2718d88 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5621e2718e00 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5621e27190c0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5621e2718ff8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5621e2719308 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5621e2719180 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5621e27191f8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5621e271ce80 <col:58, line:357:5>
|   `-ReturnStmt 0x5621e271ce70 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5621e271ce58 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5621e271ce28 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5621e271ce10 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5621e271cdf0 <col:9, col:29> 'String' (CXXTemporary 0x5621e271cdf0)
|             `-CallExpr 0x5621e271cd80 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5621e271cd68 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5621e271cce8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5621e2718f28 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5621e271cc88 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5621e271cdb8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5621e271cca8 <col:21> 'const char *' lvalue ParmVar 0x5621e2719180 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5621e271cdd0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5621e271ccc8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5621e27191f8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5621e27194e0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5621e27193d0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5621e2719448 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5621e2719638 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5621e27195a8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5621e2719780 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5621e27196f0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5621e2719a20 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5621e2719838 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5621e27198b8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5621e2719930 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5621e2719b80 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5621e2719af0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5621e271cf98 <col:37, line:441:5>
|   `-IfStmt 0x5621e271cf80 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5621e271cf08 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5621e271ced8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5621e271ce98 <col:6> 'int' lvalue ParmVar 0x5621e2719af0 'level' 'int'
|     | `-ImplicitCastExpr 0x5621e271cef0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5621e271ceb8 <col:15> 'ErrorHandler::Level' EnumConstant 0x5621e2715c00 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5621e271cf68 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5621e271cf38 <col:8> 'int' lvalue ->_nerrors 0x5621e271b7f8
|         `-CXXThisExpr 0x5621e271cf28 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5621e2719c48 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5621e271d030 <col:26, line:448:5>
|   `-BinaryOperator 0x5621e271d010 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5621e271cfc0 <col:2> 'int' lvalue ->_nerrors 0x5621e271b7f8
|     | `-CXXThisExpr 0x5621e271cfb0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5621e271cff0 <col:13> 'int' 0
|-CXXMethodDecl 0x5621e2719e10 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5621e2719d00 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5621e2719d78 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5621e271a018 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5621e2719ed0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5621e2719f48 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5621e271a2c8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5621e271a0d8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5621e271a158 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5621e271a1d8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5621e271a380 <col:59> 0 0
|-CXXMethodDecl 0x5621e271a518 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5621e271a3f8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5621e271a478 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5621e271d6a0 <col:70, line:534:5>
|   |-DeclStmt 0x5621e271d1a0 <line:528:2, col:20>
|   | |-VarDecl 0x5621e271d058 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5621e271d0c0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5621e271d0f8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5621e271d160 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5621e271d270 <line:529:2, col:23>
|   | `-VarDecl 0x5621e271d1d0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5621e271d258 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5621e271d238 <col:18> 'const char *' lvalue ParmVar 0x5621e271a3f8 'begin' 'const char *'
|   |-DoStmt 0x5621e271d638 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5621e271d568 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5621e271d550 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5621e271d530 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5621e271d288 <col:6> 'const char *' lvalue Var 0x5621e271d1d0 'x' 'const char *'
|   | |     `-CallExpr 0x5621e271d480 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5621e271d468 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5621e271d420 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5621e271bcd0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5621e271d4e8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5621e271d4d0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5621e271d340 <col:20, col:27> 'String' (CXXTemporary 0x5621e271d340)
|   | |       |     `-CXXTemporaryObjectExpr 0x5621e271d308 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5621e271d500 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5621e271d360 <col:30> 'const char *' lvalue Var 0x5621e271d1d0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5621e271d518 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5621e271d380 <col:33> 'const char *' lvalue ParmVar 0x5621e271a478 'end' 'const char *'
|   | |       |-UnaryOperator 0x5621e271d3c0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5621e271d3a0 <col:39> 'String' lvalue Var 0x5621e271d058 'name' 'String'
|   | |       |-UnaryOperator 0x5621e271d3f8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5621e271d3d8 <col:46> 'String' lvalue Var 0x5621e271d0f8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5621e271d410 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5621e271d620 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5621e271d608 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5621e271d5e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5621e271d5b8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|   |         `-ImplicitCastExpr 0x5621e271d5a0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5621e271d580 <col:11> 'String' lvalue Var 0x5621e271d058 'name' 'String'
|   `-ReturnStmt 0x5621e271d690 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5621e271d678 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5621e271d658 <col:9> 'const char *' lvalue Var 0x5621e271d1d0 'x' 'const char *'
|-CXXMethodDecl 0x5621e271a668 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5621e271a5d8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5621e271dca8 <col:55, line:550:5>
|   `-IfStmt 0x5621e271dc80 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5621e271d8e0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5621e271d8c8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5621e271d8b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5621e271d890 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5621e271d860 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|     | |       `-DeclRefExpr 0x5621e271d700 <col:6> 'const String' lvalue ParmVar 0x5621e271a5d8 'x' 'const String &'
|     | `-BinaryOperator 0x5621e271d840 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5621e271d810 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5621e271d7c0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5621e271d7a8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5621e271d760 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5621e242fe10 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5621e271d720 <col:11> 'const String' lvalue ParmVar 0x5621e271a5d8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5621e271d740 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5621e271d828 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5621e271d7f8 <col:19> 'char' 123
|     |-ReturnStmt 0x5621e271d950 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5621e271d920 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5621e271d900 <col:13> 'const String' lvalue ParmVar 0x5621e271a5d8 'x' 'const String &'
|     `-IfStmt 0x5621e271dc58 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5621e271d9e8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5621e271d9d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5621e271d9b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5621e271d980 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|       |       `-DeclRefExpr 0x5621e271d960 <col:11> 'const String' lvalue ParmVar 0x5621e271a5d8 'x' 'const String &'
|       |-ReturnStmt 0x5621e271db70 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5621e271db58 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5621e271db28 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5621e271db10 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5621e271daf0 <col:13, col:29> 'String' (CXXTemporary 0x5621e271daf0)
|       |         `-CallExpr 0x5621e271daa0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5621e271da88 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5621e271da00 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5621e2719e10 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5621e271dad0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5621e271da20 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5621e271da40 <col:28> 'const String' lvalue ParmVar 0x5621e271a5d8 'x' 'const String &'
|       `-ReturnStmt 0x5621e271dc48 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5621e271dc30 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5621e271dc00 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5621e271dbe8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5621e271dbc8 <col:13, col:20> 'String' (CXXTemporary 0x5621e271dbc8)
|                 `-CXXTemporaryObjectExpr 0x5621e271db90 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5621e271a840 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5621e271a730 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5621e271a7a8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5621e271bf78 <col:71> 'bool' false
|-CXXRecordDecl 0x5621e271a8f0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5621e271abe8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5621e271ab80 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5621e271ab20 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5621e271aae0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5621e24126f0 'String'
|       | `-CXXRecord 0x5621e2412658 'String'
|       |-BuiltinType 0x5621e20e1370 'int'
|       `-DecayedType 0x5621e25c5180 '__va_list_tag *' sugar
|         |-TypedefType 0x5621e25c5150 'va_list' sugar
|         | |-Typedef 0x5621e2329250 'va_list'
|         | `-TypedefType 0x5621e2329200 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5621e2323168 '__gnuc_va_list'
|         |   `-TypedefType 0x5621e23230d0 '__builtin_va_list' sugar
|         |     |-Typedef 0x5621e2122bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5621e2122b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5621e20e20c0 '__va_list_tag'
|         |         `-CXXRecord 0x5621e20e2028 '__va_list_tag'
|         `-PointerType 0x5621e232fae0 '__va_list_tag *'
|           `-RecordType 0x5621e20e20c0 '__va_list_tag'
|             `-CXXRecord 0x5621e20e2028 '__va_list_tag'
|-EnumDecl 0x5621e271ac40 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5621e271ad40 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5621e271b2a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e271ad20 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5621e271ad00 <col:16> 'int' 1
| |-EnumConstantDecl 0x5621e271add0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5621e271b2b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e271adb0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5621e271ad90 <col:21> 'int' 2
| |-EnumConstantDecl 0x5621e271ae60 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5621e271b2d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e271ae40 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5621e271ae20 <col:22> 'int' 4
| |-EnumConstantDecl 0x5621e271aef0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5621e271b2e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e271aed0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5621e271aeb0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5621e271af80 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5621e271b300 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e271af60 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5621e271af40 <col:22> 'int' 16
| |-EnumConstantDecl 0x5621e271b010 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5621e271b318 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e271aff0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5621e271afd0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5621e271b0a0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5621e271b330 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e271b080 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5621e271b060 <col:17> 'int' 64
| |-EnumConstantDecl 0x5621e271b130 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5621e271b348 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e271b110 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5621e271b0f0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5621e271b1c0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5621e271b360 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e271b1a0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5621e271b180 <col:16> 'int' 256
| `-EnumConstantDecl 0x5621e271b250 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5621e271b378 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e271b230 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5621e271b210 <col:12> 'int' 1024
|-CXXMethodDecl 0x5621e271b588 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5621e271b3a0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5621e271b440 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5621e271b710 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5621e271b648 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5621e271b7b8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5621e271b7f8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5621e271b858 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5621e271b8d0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5621e271bcd0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5621e271b948 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5621e271b9c8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5621e271ba48 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5621e271bac0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5621e271bb38 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5621e271bbb0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5621e271bdf8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5621e271bdf8
| `-ParmVarDecl 0x5621e271bf08 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5621e271e008 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5621e271e008
  `-ParmVarDecl 0x5621e271e118 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e25c41c8 prev 0x5621e2605e08 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5621e25c42c0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5621e25c4350 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5621e25c4488 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5621e25c4388 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5621e25c58b0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5621e25c5890 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5621e25c5428 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5621e25c5940 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5621e25c5900 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5621e25c4388 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5621e25c5490 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5621e25c59c0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5621e25c5980 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5621e25c54f0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5621e25c5a00 <col:54> 'bool' false
| `-CompoundStmt 0x5621e25c5b08 <col:61, line:38:5>
|   `-BinaryOperator 0x5621e25c5ae8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5621e25c5a80 <col:9> 'const Element *' lvalue ->_context 0x5621e25c53c8
|     | `-CXXThisExpr 0x5621e25c5a70 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5621e25c5ad0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5621e25c5ab0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5621e25c4698 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5621e25c4548 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5621e25c45c0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5621e25c58e8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5621e25c58c8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5621e25c53c8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5621e25c5b60 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5621e25c5b20 <col:20> 'const Element *' lvalue ParmVar 0x5621e25c4548 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5621e25c5428 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5621e25c5be0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5621e25c5ba0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5621e25c45c0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5621e25c5490 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5621e25c5c60 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5621e25c5c20 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5621e25c54f0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5621e25c5ca0 <col:73> 'bool' false
| `-CompoundStmt 0x5621e25c5d18 <col:80, line:46:5>
|-CXXMethodDecl 0x5621e25c47c8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5621e25c5d90 <col:36, line:51:5>
|   `-ReturnStmt 0x5621e25c5d80 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5621e25c5d68 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5621e25c5d38 <col:16> 'const Element *const' lvalue ->_context 0x5621e25c53c8
|         `-CXXThisExpr 0x5621e25c5d28 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5621e25c48b8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5621e25c5e10 <col:32, line:57:5>
|   `-ReturnStmt 0x5621e25c5e00 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5621e25c5de8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5621e25c5db8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5621e25c5428
|         `-CXXThisExpr 0x5621e25c5da8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5621e25c4978 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5621e25c4b00 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5621e25c4a30 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5621e25c4c50 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5621e25c4bc0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5621e25c4da0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5621e25c4d10 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5621e25c4fa8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5621e25c4e58 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5621e25c4ed0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5621e25c52d8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5621e25c5068 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5621e25c50e8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5621e25c51b0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5621e25c5390 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5621e25c53c8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5621e25c5428 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5621e25c5490 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5621e25c54f0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5621e25c5540 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5621e25c5540
| `-ParmVarDecl 0x5621e25c5658 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5621e25c56f8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5621e25c56f8
| `-ParmVarDecl 0x5621e25c5808 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5621e2728d38 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5621e26d2650 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5621e26d2828 prev 0x5621e26d2650 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5621e26d28b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5621e26d28e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26d44b0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5621e26d4460 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5621e26d2d90 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5621e26d2c90 'type'
|     `-TemplateSpecializationType 0x5621e26d2c20 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5621e26d2b00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5621e26d2ae0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5621e26d2ac0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5621e26d2c00 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5621e26d2b20 'char_array'
|-TypedefDecl 0x5621e26d4568 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5621e26d4530 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5621e26d4510 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5621e26d44b0 'type'
|     `-ElaboratedType 0x5621e26d4460 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5621e26d2d90 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5621e26d2c90 'type'
|         `-TemplateSpecializationType 0x5621e26d2c20 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5621e26d2b00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5621e26d2ae0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5621e26d2ac0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5621e26d2c00 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5621e26d2b20 'char_array'
|-CXXMethodDecl 0x5621e26d46e8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5621e26d45f8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5621e26d47d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5621e26d48b8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5621e26d4b88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5621e26d4a90 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5621e26d4dc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5621e26d4c40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5621e26d4cb8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5621e26d4f98 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5621e26d4e88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5621e26d4f00 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5621e26d50f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5621e26d51c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5621e26dcff0 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5621e26d5288 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5621e26d5300 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5621e26dd248 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5621e26dd0c0 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5621e26dd138 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5621e26dd408 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5621e26dd318 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5621e26dd5c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5621e26dd4d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5621e26dd680 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5621e26dd730 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5621e26dd968 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5621e26dd7e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5621e26dd858 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5621e26ddc08 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5621e26ddb10 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5621e26ddcd0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5621e26ddd20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5621e26ddd70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5621e26d1058 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5621e26d1268 prev 0x5621e26d1058 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5621e26d25c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5621e26d2570 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5621e26d2550 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5621e26d2400 'type'
|     `-SubstTemplateTypeParmType 0x5621e26d2220 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5621e23ab1d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23ab178 'T'
|       `-RecordType 0x5621e26d1d70 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5621e26d1c88 'sized_array_memory'
|-FieldDecl 0x5621e26dddc0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5621e26dde10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5621e26dde48 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5621e26d1300 'int' sugar
|   |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5621e23e5268 'T'
|   `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26dded8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5621e26ddea0 'int &'
|   `-SubstTemplateTypeParmType 0x5621e26d1300 'int' sugar
|     |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5621e23e5268 'T'
|     `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26ddf98 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5621e26ddf60 'const int &'
|   `-QualType 0x5621e26d1301 'const int' const
|     `-SubstTemplateTypeParmType 0x5621e26d1300 'int' sugar
|       |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23e5268 'T'
|       `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26de028 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5621e26ddff0 'int *'
|   `-SubstTemplateTypeParmType 0x5621e26d1300 'int' sugar
|     |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5621e23e5268 'T'
|     `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26de0b8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5621e26de080 'const int *'
|   `-QualType 0x5621e26d1301 'const int' const
|     `-SubstTemplateTypeParmType 0x5621e26d1300 'int' sugar
|       |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23e5268 'T'
|       `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26deca0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5621e26dec50 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5621e26dec30 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5621e26debc0 'type'
|     `-SubstTemplateTypeParmType 0x5621e26de980 'int' sugar
|       |-TemplateTypeParmType 0x5621e23b7380 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23b7330 'T'
|       `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26ded08 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5621e26ddf60 'const int &'
|   `-QualType 0x5621e26d1301 'const int' const
|     `-SubstTemplateTypeParmType 0x5621e26d1300 'int' sugar
|       |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23e5268 'T'
|       `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26ded60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26dedc8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5621e26ddff0 'int *'
|   `-SubstTemplateTypeParmType 0x5621e26d1300 'int' sugar
|     |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5621e23e5268 'T'
|     `-BuiltinType 0x5621e20e1370 'int'
|-TypedefDecl 0x5621e26dee30 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5621e26de080 'const int *'
|   `-QualType 0x5621e26d1301 'const int' const
|     `-SubstTemplateTypeParmType 0x5621e26d1300 'int' sugar
|       |-TemplateTypeParmType 0x5621e23e52c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5621e23e5268 'T'
|       `-BuiltinType 0x5621e20e1370 'int'
|-EnumDecl 0x5621e26dee88 <line:134:5> col:5
| `-EnumConstantDecl 0x5621e26def80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5621e26def60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5621e23e6488 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5621e23e6460 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5621e23e6440 <col:40> 'int' 1
|-CXXConstructorDecl 0x5621e26df008 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5621e26df258 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5621e26df0c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5621e26df160 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5621e26df518 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5621e26df400 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5621e26df7d8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5621e26df6c0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5621e26dfb20 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5621e26dfa00 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5621e26dfe30 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5621e26dfd10 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5621e26e0120 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5621e26dff68 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5621e26dffe0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5621e26e0248 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5621e26e0328 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e26e0380 <col:30> Inherited
|-CXXMethodDecl 0x5621e26e03c8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5621e26e0478 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e26e04d0 <col:30> Inherited
|-CXXMethodDecl 0x5621e26e0598 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5621e26e0648 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e26e06a0 <col:30> Inherited
|-CXXMethodDecl 0x5621e26e06e8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5621e26e0798 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e26e07f0 <col:30> Inherited
|-CXXMethodDecl 0x5621e26e0838 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5621e26e08e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e26e0940 <col:30> Inherited
|-CXXMethodDecl 0x5621e26e0988 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5621e26e0a38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5621e26e0a90 <col:30> Inherited
|-CXXMethodDecl 0x5621e26e0ab8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5621e26e0b68 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5621e26e0c18 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5621e26e0dd8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5621e26e0cc8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5621e26e0d40 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5621e26e0f28 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5621e26e0e98 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e26e10d8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5621e26e0fe0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5621e26e1190 <col:20>
| `-OptimizeNoneAttr 0x5621e26e11e8 <col:30>
|-CXXMethodDecl 0x5621e26e1308 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5621e26e1210 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5621e26e13c0 <col:20>
| `-OptimizeNoneAttr 0x5621e26e1418 <col:30>
|-CXXMethodDecl 0x5621e26e14d0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5621e26e1440 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e26e1618 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5621e26e1588 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e26e1748 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5621e26e1878 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5621e26e1948 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5621e26e1a18 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5621e26e1b58 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5621e26e1ac8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e26e1ca0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5621e26e1c10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5621e26e1de8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5621e26e1d58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5621e26e1ea0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5621e26e1fa0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5621e26e1f10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5621e26e2058 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5621e26e2118 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5621e26e2218 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5621e26e2398 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5621e26e22d8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5621e26e2b58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5621e26e2450 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5621e26e2ab8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5621e26e29b8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5621e26e2c38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5621e26e2d88 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5621e26e2cf8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5621e26e2e40 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5621e26e3088 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5621e26e2f00 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5621e26e2f78 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5621e26e3248 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5621e26e3158 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5621e26e3498 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5621e26e3310 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5621e26e3388 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5621e26e3558 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5621e26e37b8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5621e26e36c0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5621e26e3888 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e26cf1c8 prev 0x5621e26b2b98 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5621e26cf2c0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5621e26cf3b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5621e26f5560 <col:16, line:828:9>
|-CXXDestructorDecl 0x5621e26cf4a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5621e26f5570 <col:25, line:830:9>
|-CXXMethodDecl 0x5621e26cf5a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5621e26cf650 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5621e26cf6f8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5621e26cf6f8
| `-ParmVarDecl 0x5621e26cf808 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5621e26cffc8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5621e26cffc8
  `-ParmVarDecl 0x5621e26d00d8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e26b29a8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5621e26b2b08 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5621e26b2b98 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5621e26b2c50 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5621e26b2d58 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5621e26b2c88 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5621e26e4e48 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5621e26e4e28 <col:31> 'int' 0
|-CXXConstructorDecl 0x5621e26b3078 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5621e26b2ef0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5621e26b2f68 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5621e26e4e80 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5621e26e4e60 <col:59> 'int' 0
|-CXXConstructorDecl 0x5621e26b3250 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5621e26b3140 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5621e26b31b8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5621e26e4eb8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5621e26e4e98 <col:55> 'int' 0
|-CXXConstructorDecl 0x5621e26b3608 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5621e26b33f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5621e26b3468 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5621e26b34e0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5621e26e4ef0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5621e26e4ed0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5621e26b37c8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5621e26b3708 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5621e26b38c0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5621e26b3aa8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5621e26b39b0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5621e26b3b98 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5621e26e6b98 <col:24, line:291:5>
|   `-ReturnStmt 0x5621e26e6b88 <line:290:9, col:79>
|     `-BinaryOperator 0x5621e26e6b68 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5621e26e6a40 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5621e26e6998 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5621e26e6978 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5621e26e4f78 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5621e26e4f60 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5621e26e4f48 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5621e26e4f18 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5621e26d0ff0
|       | |   |       `-CXXThisExpr 0x5621e26e4f08 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5621e26e6960 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5621e26e6948 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5621e26e6910 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5621e26e68e0 <col:28, col:35> '<bound member function type>' ->size 0x5621e2694698
|       | |           `-ImplicitCastExpr 0x5621e26e6930 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5621e26e4fd0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5621e26e4fa0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5621e26d0ff0
|       | |                 `-CXXThisExpr 0x5621e26e4f90 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5621e26e6a28 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5621e26e6a10 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5621e26e69f8 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5621e26e69c8 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5621e26e39d0
|       |         `-CXXThisExpr 0x5621e26e69b8 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5621e26e6b48 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5621e26e6b30 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5621e26e6b18 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5621e26e6ad8 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5621e26e6ac0 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5621e26e6a70 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5621e26e3a80
|         |     |   `-CXXThisExpr 0x5621e26e6a60 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5621e26e6aa0 <col:73> 'int' 0
|         `-IntegerLiteral 0x5621e26e6af8 <col:79> 'int' 0
|-CXXMethodDecl 0x5621e26b3c58 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5621e26e6d70 <col:32, line:296:5>
|   `-ReturnStmt 0x5621e26e6d60 <line:295:9, col:49>
|     `-BinaryOperator 0x5621e26e6d40 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5621e26e6c20 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5621e26e6c08 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5621e26e6bf0 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5621e26e6bc0 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5621e26e39d0
|       |       `-CXXThisExpr 0x5621e26e6bb0 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5621e26e6d20 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5621e26e6d08 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5621e26e6cf0 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5621e26e6cb0 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5621e26e6c98 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5621e26e6c48 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5621e26e3a80
|         |     |   `-CXXThisExpr 0x5621e26e6c38 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5621e26e6c78 <col:43> 'int' 0
|         `-IntegerLiteral 0x5621e26e6cd0 <col:49> 'int' 0
|-CXXMethodDecl 0x5621e26b3d48 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5621e26e6f80 <col:19, line:306:5>
|   |-IfStmt 0x5621e26e6ea0 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5621e26e6de0 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5621e26e6dc8 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5621e26e6d98 <col:13> 'Vector<String> *' lvalue ->_conf 0x5621e26d0ff0
|   | |     `-CXXThisExpr 0x5621e26e6d88 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5621e26e6e80 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5621e26e6e50 <col:13, col:20> '<bound member function type>' ->clear 0x5621e2697098
|   |     `-ImplicitCastExpr 0x5621e26e6e38 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5621e26e6e08 <col:13> 'Vector<String> *' lvalue ->_conf 0x5621e26d0ff0
|   |         `-CXXThisExpr 0x5621e26e6df8 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5621e26e6f28 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5621e26e6ef8 <col:9, col:16> '<bound member function type>' .clear 0x5621e26e3558
|   |   `-MemberExpr 0x5621e26e6ec8 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5621e26e3970
|   |     `-CXXThisExpr 0x5621e26e6eb8 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5621e26e6f70 <line:305:9, col:17>
|     `-UnaryOperator 0x5621e26e6f58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5621e26e6f48 <col:17> 'Args *' this
|-CXXMethodDecl 0x5621e26b3fc8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5621e26b3ed0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5621e26b4148 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5621e26b4080 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5621e26b44c8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5621e26b41f0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5621e26b4428 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5621e26b4298 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5621e26b4310 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5621e26e72a0 <col:67, line:327:5>
|     |-WhileStmt 0x5621e26e7250 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5621e26e7068 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5621e26e6fe8 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5621e25fe2f8 0x5621e244db08 0x5621e244ac00 0x5621e2441740 0x5621e24413f0 0x5621e2440ce0 0x5621e2410b30 0x5621e239eab0
|     | | |-DeclRefExpr 0x5621e26e6fa8 <col:16> 'Iter' lvalue ParmVar 0x5621e26b4298 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5621e26e6fc8 <col:25> 'Iter' lvalue ParmVar 0x5621e26b4310 'end' 'Iter'
|     | `-CompoundStmt 0x5621e26e7230 <col:30, line:325:9>
|     |   |-CallExpr 0x5621e26e71d0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5621e26e70b0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5621e26e71a0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5621e26e7130 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|     |   |   `-DeclRefExpr 0x5621e26e7110 <col:24> 'Iter' lvalue ParmVar 0x5621e26b4298 'begin' 'Iter'
|     |   `-UnaryOperator 0x5621e26e7218 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5621e26e71f8 <col:15> 'Iter' lvalue ParmVar 0x5621e26b4298 'begin' 'Iter'
|     `-ReturnStmt 0x5621e26e7290 <line:326:9, col:17>
|       `-UnaryOperator 0x5621e26e7278 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26e7268 <col:17> 'Args *' this
|-CXXMethodDecl 0x5621e26b45d0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5621e26b4540 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5621e26b4718 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5621e26b4688 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5621e26b47e0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5621e26e7380 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5621e26e7320 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5621e26e72d0 <col:9> '<bound member function type>' ->reset_from 0x5621e26e3df8
|   | | `-CXXThisExpr 0x5621e26e72c0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5621e26e7300 <col:20> 'int' 0
|   `-ReturnStmt 0x5621e26e7370 <line:352:9, col:17>
|     `-UnaryOperator 0x5621e26e7358 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5621e26e7348 <col:17> 'Args *' this
|-VarDecl 0x5621e26b4898 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5621e26b4900 <col:38> 'int' 1
|-VarDecl 0x5621e26b4990 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5621e26b49f8 <col:39> 'int' 2
|-VarDecl 0x5621e26b4a88 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5621e26b4af0 <col:39> 'int' 4
|-VarDecl 0x5621e26b4b80 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5621e26b4be8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5621e26b4f68 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5621e26b4c60 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5621e26b4ec8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5621e26b4d10 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5621e26b4db8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x5621e26e74d8 <col:43, line:371:5>
| |   `-ReturnStmt 0x5621e26e74c8 <line:370:9, col:34>
| |     `-CallExpr 0x5621e26e7490 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5621e26e73b0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5621e26e7430 <col:21> 'const char *' lvalue ParmVar 0x5621e26b4d10 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5621e26e7450 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5621e26e7470 <col:33> 'T' lvalue ParmVar 0x5621e26b4db8 'x' 'T &'
| `-CXXMethodDecl 0x5621e27291c8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned short &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5621e2728fe0 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x5621e27290b8 <col:37, col:40> col:40 x 'unsigned short &'
|-FunctionTemplateDecl 0x5621e26b5298 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5621e26b4fd0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5621e26b51f8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5621e26b5080 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b5128 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e7628 <col:45, line:375:5>
|     `-ReturnStmt 0x5621e26e7618 <line:374:9, col:42>
|       `-CallExpr 0x5621e26e75e0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e7500 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e7580 <col:21> 'const char *' lvalue ParmVar 0x5621e26b5080 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e75a0 <col:30> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int'
|         `-DeclRefExpr 0x5621e26e75c0 <col:41> 'T' lvalue ParmVar 0x5621e26b5128 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26b55c8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5621e26b5300 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5621e26b5528 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5621e26b53b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b5458 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e7778 <col:45, line:379:5>
|     `-ReturnStmt 0x5621e26e7768 <line:378:9, col:43>
|       `-CallExpr 0x5621e26e7730 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e7650 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e76d0 <col:21> 'const char *' lvalue ParmVar 0x5621e26b53b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e76f0 <col:30> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int'
|         `-DeclRefExpr 0x5621e26e7710 <col:42> 'T' lvalue ParmVar 0x5621e26b5458 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26b58f8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5621e26b5630 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5621e26b5858 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5621e26b56e0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b5788 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e7978 <col:46, line:383:5>
|     `-ReturnStmt 0x5621e26e7968 <line:382:9, col:55>
|       `-CallExpr 0x5621e26e7930 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e77a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e7820 <col:21> 'const char *' lvalue ParmVar 0x5621e26b56e0 'keyword' 'const char *'
|         |-BinaryOperator 0x5621e26e78f0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5621e26e78a0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5621e26e7880 <col:30> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5621e26e78d8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5621e26e78b8 <col:42> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5621e26e7910 <col:54> 'T' lvalue ParmVar 0x5621e26b5788 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26b5cf8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5621e26b5960 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5621e26b5c58 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5621e26b5a10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b5a90 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26b5b38 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e7ab8 <col:54, line:388:5>
|     |-CallExpr 0x5621e26e7a40 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5621e26e7990 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5621e26e79d0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5621e26e79e0 <col:30> 'const char *' lvalue ParmVar 0x5621e26b5a10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5621e26e7a00 <col:39> 'int' lvalue ParmVar 0x5621e26b5a90 'flags' 'int'
|     | `-DeclRefExpr 0x5621e26e7a20 <col:46> 'T' lvalue ParmVar 0x5621e26b5b38 'x' 'T &'
|     `-ReturnStmt 0x5621e26e7aa8 <line:387:9, col:17>
|       `-UnaryOperator 0x5621e26e7a90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26e7a80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26b61a8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5621e26b5d68 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5621e26b5de8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5621e26b6108 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5621e26b5ea8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b5f48 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5621e26b5fe8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5621e26e7c28 <col:74, line:403:5>
|     `-ReturnStmt 0x5621e26e7c18 <line:402:9, col:56>
|       `-CallExpr 0x5621e26e7bd8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e7ae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e7b58 <col:28> 'const char *' lvalue ParmVar 0x5621e26b5ea8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5621e26e7b78 <col:37> 'int' 0
|         |-DeclRefExpr 0x5621e26e7b98 <col:40> 'T' lvalue ParmVar 0x5621e26b5f48 'x' 'T &'
|         `-DeclRefExpr 0x5621e26e7bb8 <col:43> 'const V' lvalue ParmVar 0x5621e26b5fe8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5621e26b6618 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5621e26b6218 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5621e26b6298 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5621e26b6578 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5621e26b6358 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b63f8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5621e26b6498 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5621e26e7d90 <col:76, line:407:5>
|     `-ReturnStmt 0x5621e26e7d80 <line:406:9, col:65>
|       `-CallExpr 0x5621e26e7d40 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e7c50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e7cc0 <col:28> 'const char *' lvalue ParmVar 0x5621e26b6358 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e7ce0 <col:37> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int'
|         |-DeclRefExpr 0x5621e26e7d00 <col:49> 'T' lvalue ParmVar 0x5621e26b63f8 'x' 'T &'
|         `-DeclRefExpr 0x5621e26e7d20 <col:52> 'const V' lvalue ParmVar 0x5621e26b6498 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5621e26b6b68 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5621e26b6688 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5621e26b6708 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5621e26b6ac8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5621e26b67c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b6848 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26b68e8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5621e26b6988 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5621e26e7ef8 <col:85, line:412:5>
|     |-CallExpr 0x5621e26e7e78 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5621e26e7da8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5621e26e7de8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5621e26e7df8 <col:37> 'const char *' lvalue ParmVar 0x5621e26b67c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5621e26e7e18 <col:46> 'int' lvalue ParmVar 0x5621e26b6848 'flags' 'int'
|     | |-DeclRefExpr 0x5621e26e7e38 <col:53> 'T' lvalue ParmVar 0x5621e26b68e8 'x' 'T &'
|     | `-DeclRefExpr 0x5621e26e7e58 <col:56> 'const V' lvalue ParmVar 0x5621e26b6988 'default_value' 'const V &'
|     `-ReturnStmt 0x5621e26e7ee8 <line:411:9, col:17>
|       `-UnaryOperator 0x5621e26e7ed0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26e7ec0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26b6ff8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5621e26b6be0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b6c58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5621e26b6f58 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5621e26b6d18 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5621e26b6d90 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x5621e26b6e38 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x5621e26e8078 <col:53, line:425:5>
| |   `-ReturnStmt 0x5621e26e8068 <line:424:9, col:42>
| |     `-CallExpr 0x5621e26e8028 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5621e26e7f28 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5621e26e7fa8 <col:21> 'const char *' lvalue ParmVar 0x5621e26b6d18 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5621e26e7fc8 <col:30> 'int' 0
| |       |-DeclRefExpr 0x5621e26e7fe8 <col:33> 'P' lvalue ParmVar 0x5621e26b6d90 'parser' 'P'
| |       `-DeclRefExpr 0x5621e26e8008 <col:41> 'T' lvalue ParmVar 0x5621e26b6e38 'x' 'T &'
| `-CXXMethodDecl 0x5621e2729c78 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5621e27299e8 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x5621e2729a88 <col:37, col:39> col:39 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x5621e2729b58 <col:47, col:50> col:50 x 'int &'
|-FunctionTemplateDecl 0x5621e26b7448 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5621e26b7068 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b70e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26b73a8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5621e26b71a8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b7220 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26b72c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e81f0 <col:55, line:429:5>
|     `-ReturnStmt 0x5621e26e81e0 <line:428:9, col:50>
|       `-CallExpr 0x5621e26e81a0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e80a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e8120 <col:21> 'const char *' lvalue ParmVar 0x5621e26b71a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e8140 <col:30> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int'
|         |-DeclRefExpr 0x5621e26e8160 <col:41> 'P' lvalue ParmVar 0x5621e26b7220 'parser' 'P'
|         `-DeclRefExpr 0x5621e26e8180 <col:49> 'T' lvalue ParmVar 0x5621e26b72c8 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26b7898 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5621e26b74b8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b7538 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26b77f8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5621e26b75f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b7670 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26b7718 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e8368 <col:55, line:433:5>
|     `-ReturnStmt 0x5621e26e8358 <line:432:9, col:51>
|       `-CallExpr 0x5621e26e8318 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e8218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e8298 <col:21> 'const char *' lvalue ParmVar 0x5621e26b75f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e82b8 <col:30> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int'
|         |-DeclRefExpr 0x5621e26e82d8 <col:42> 'P' lvalue ParmVar 0x5621e26b7670 'parser' 'P'
|         `-DeclRefExpr 0x5621e26e82f8 <col:50> 'T' lvalue ParmVar 0x5621e26b7718 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26b7ce8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5621e26b7908 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b7988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26b7c48 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5621e26b7a48 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b7ac0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26b7b68 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e8590 <col:56, line:437:5>
|     `-ReturnStmt 0x5621e26e8580 <line:436:9, col:63>
|       `-CallExpr 0x5621e26e8540 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e8390 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e8410 <col:21> 'const char *' lvalue ParmVar 0x5621e26b7a48 'keyword' 'const char *'
|         |-BinaryOperator 0x5621e26e84e0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5621e26e8490 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5621e26e8470 <col:30> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5621e26e84c8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5621e26e84a8 <col:42> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5621e26e8500 <col:54> 'P' lvalue ParmVar 0x5621e26b7ac0 'parser' 'P'
|         `-DeclRefExpr 0x5621e26e8520 <col:62> 'T' lvalue ParmVar 0x5621e26b7b68 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26b8218 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5621e26b7d58 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b7dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26b8178 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5621e26b7e98 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b7f18 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26b7f90 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26b8038 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e86f8 <col:64, line:442:5>
|     |-CallExpr 0x5621e26e8678 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5621e26e85a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5621e26e85e8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5621e26e85f8 <col:30> 'const char *' lvalue ParmVar 0x5621e26b7e98 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5621e26e8618 <col:39> 'int' lvalue ParmVar 0x5621e26b7f18 'flags' 'int'
|     | |-DeclRefExpr 0x5621e26e8638 <col:46> 'P' lvalue ParmVar 0x5621e26b7f90 'parser' 'P'
|     | `-DeclRefExpr 0x5621e26e8658 <col:54> 'T' lvalue ParmVar 0x5621e26b8038 'x' 'T &'
|     `-ReturnStmt 0x5621e26e86e8 <line:441:9, col:17>
|       `-UnaryOperator 0x5621e26e86d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26e86c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26b8818 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5621e26b8290 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b8308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5621e26b8388 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5621e26b8778 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5621e26b8450 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b84c8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26b8568 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5621e26b8638 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5621e26e8890 <col:84, line:458:5>
|     `-ReturnStmt 0x5621e26e8880 <line:457:9, col:64>
|       `-CallExpr 0x5621e26e8838 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e8728 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e8798 <col:28> 'const char *' lvalue ParmVar 0x5621e26b8450 'keyword' 'const char *'
|         |-IntegerLiteral 0x5621e26e87b8 <col:37> 'int' 0
|         |-DeclRefExpr 0x5621e26e87d8 <col:40> 'P' lvalue ParmVar 0x5621e26b84c8 'parser' 'P'
|         |-DeclRefExpr 0x5621e26e87f8 <col:48> 'T' lvalue ParmVar 0x5621e26b8568 'x' 'T &'
|         `-DeclRefExpr 0x5621e26e8818 <col:51> 'const V' lvalue ParmVar 0x5621e26b8638 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5621e26b8d98 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5621e26b8890 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b8908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5621e26b8988 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5621e26b8cf8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5621e26b8a50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b8ac8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26b8b68 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5621e26b8c08 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5621e26e8a20 <col:86, line:462:5>
|     `-ReturnStmt 0x5621e26e8a10 <line:461:9, col:73>
|       `-CallExpr 0x5621e26e89c8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e88b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e8928 <col:28> 'const char *' lvalue ParmVar 0x5621e26b8a50 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e8948 <col:37> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int'
|         |-DeclRefExpr 0x5621e26e8968 <col:49> 'P' lvalue ParmVar 0x5621e26b8ac8 'parser' 'P'
|         |-DeclRefExpr 0x5621e26e8988 <col:57> 'T' lvalue ParmVar 0x5621e26b8b68 'x' 'T &'
|         `-DeclRefExpr 0x5621e26e89a8 <col:60> 'const V' lvalue ParmVar 0x5621e26b8c08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5621e26b93f8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5621e26b8e10 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b8e88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5621e26b8f08 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5621e26b9358 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5621e26b8fd0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b9050 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26b90c8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26b9168 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5621e26b9208 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5621e26e8bb0 <col:95, line:467:5>
|     |-CallExpr 0x5621e26e8b28 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5621e26e8a38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5621e26e8a78 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5621e26e8a88 <col:37> 'const char *' lvalue ParmVar 0x5621e26b8fd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5621e26e8aa8 <col:46> 'int' lvalue ParmVar 0x5621e26b9050 'flags' 'int'
|     | |-DeclRefExpr 0x5621e26e8ac8 <col:53> 'P' lvalue ParmVar 0x5621e26b90c8 'parser' 'P'
|     | |-DeclRefExpr 0x5621e26e8ae8 <col:61> 'T' lvalue ParmVar 0x5621e26b9168 'x' 'T &'
|     | `-DeclRefExpr 0x5621e26e8b08 <col:64> 'const V' lvalue ParmVar 0x5621e26b9208 'default_value' 'const V &'
|     `-ReturnStmt 0x5621e26e8ba0 <line:466:9, col:17>
|       `-UnaryOperator 0x5621e26e8b88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26e8b78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26b99d8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5621e26b9478 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b94f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5621e26b9578 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5621e26b9938 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5621e26b9640 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b96b8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26b9758 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5621e26b97f8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5621e26e8d58 <col:63, line:481:5>
|     `-ReturnStmt 0x5621e26e8d48 <line:480:9, col:47>
|       `-CallExpr 0x5621e26e8d00 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e8be0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e8c60 <col:21> 'const char *' lvalue ParmVar 0x5621e26b9640 'keyword' 'const char *'
|         |-IntegerLiteral 0x5621e26e8c80 <col:30> 'int' 0
|         |-DeclRefExpr 0x5621e26e8ca0 <col:33> 'P' lvalue ParmVar 0x5621e26b96b8 'parser' 'P'
|         |-DeclRefExpr 0x5621e26e8cc0 <col:41> 'T1' lvalue ParmVar 0x5621e26b9758 'x1' 'T1 &'
|         `-DeclRefExpr 0x5621e26e8ce0 <col:45> 'T2' lvalue ParmVar 0x5621e26b97f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5621e26b9f58 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5621e26b9a50 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26b9ac8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5621e26b9b48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5621e26b9eb8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5621e26b9c10 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26b9c88 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26b9d28 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5621e26b9dc8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5621e26e8ef8 <col:65, line:485:5>
|     `-ReturnStmt 0x5621e26e8ee8 <line:484:9, col:55>
|       `-CallExpr 0x5621e26e8ea0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e8d80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e8e00 <col:21> 'const char *' lvalue ParmVar 0x5621e26b9c10 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e8e20 <col:30> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int'
|         |-DeclRefExpr 0x5621e26e8e40 <col:41> 'P' lvalue ParmVar 0x5621e26b9c88 'parser' 'P'
|         |-DeclRefExpr 0x5621e26e8e60 <col:49> 'T1' lvalue ParmVar 0x5621e26b9d28 'x1' 'T1 &'
|         `-DeclRefExpr 0x5621e26e8e80 <col:53> 'T2' lvalue ParmVar 0x5621e26b9dc8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5621e26be208 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5621e26b9fd0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26ba048 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5621e26bddf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5621e26be168 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5621e26bdec0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26bdf38 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26bdfd8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5621e26be078 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5621e26e9098 <col:65, line:489:5>
|     `-ReturnStmt 0x5621e26e9088 <line:488:9, col:56>
|       `-CallExpr 0x5621e26e9040 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e8f20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e8fa0 <col:21> 'const char *' lvalue ParmVar 0x5621e26bdec0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e8fc0 <col:30> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int'
|         |-DeclRefExpr 0x5621e26e8fe0 <col:42> 'P' lvalue ParmVar 0x5621e26bdf38 'parser' 'P'
|         |-DeclRefExpr 0x5621e26e9000 <col:50> 'T1' lvalue ParmVar 0x5621e26bdfd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5621e26e9020 <col:54> 'T2' lvalue ParmVar 0x5621e26be078 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5621e26be788 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5621e26be280 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26be2f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5621e26be378 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5621e26be6e8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5621e26be440 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26be4b8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26be558 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5621e26be5f8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5621e26e92e8 <col:66, line:493:5>
|     `-ReturnStmt 0x5621e26e92d8 <line:492:9, col:68>
|       `-CallExpr 0x5621e26e9290 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e90c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e9140 <col:21> 'const char *' lvalue ParmVar 0x5621e26be440 'keyword' 'const char *'
|         |-BinaryOperator 0x5621e26e9210 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5621e26e91c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5621e26e91a0 <col:30> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5621e26e91f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5621e26e91d8 <col:42> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5621e26e9230 <col:54> 'P' lvalue ParmVar 0x5621e26be4b8 'parser' 'P'
|         |-DeclRefExpr 0x5621e26e9250 <col:62> 'T1' lvalue ParmVar 0x5621e26be558 'x1' 'T1 &'
|         `-DeclRefExpr 0x5621e26e9270 <col:66> 'T2' lvalue ParmVar 0x5621e26be5f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5621e26bede8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5621e26be800 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26be878 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5621e26be8f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5621e26bed48 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5621e26be9c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26bea40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26beab8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26beb58 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5621e26bebf8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5621e26e9478 <col:74, line:498:5>
|     |-CallExpr 0x5621e26e93f0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5621e26e9300 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5621e26e9340 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5621e26e9350 <col:30> 'const char *' lvalue ParmVar 0x5621e26be9c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5621e26e9370 <col:39> 'int' lvalue ParmVar 0x5621e26bea40 'flags' 'int'
|     | |-DeclRefExpr 0x5621e26e9390 <col:46> 'P' lvalue ParmVar 0x5621e26beab8 'parser' 'P'
|     | |-DeclRefExpr 0x5621e26e93b0 <col:54> 'T1' lvalue ParmVar 0x5621e26beb58 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5621e26e93d0 <col:58> 'T2' lvalue ParmVar 0x5621e26bebf8 'x2' 'T2 &'
|     `-ReturnStmt 0x5621e26e9468 <line:497:9, col:17>
|       `-UnaryOperator 0x5621e26e9450 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26e9440 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26bf148 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5621e26bee68 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5621e26bf0a8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5621e26bef20 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26bef98 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5621e26e95c0 <col:52, line:509:5>
|     `-ReturnStmt 0x5621e26e95b0 <line:508:9, col:44>
|       `-CallExpr 0x5621e26e9578 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e94a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e9518 <col:26> 'const char *' lvalue ParmVar 0x5621e26bef20 'keyword' 'const char *'
|         |-IntegerLiteral 0x5621e26e9538 <col:35> 'int' 0
|         `-DeclRefExpr 0x5621e26e9558 <col:38> 'P' lvalue ParmVar 0x5621e26bef98 'parser' 'P'
|-FunctionTemplateDecl 0x5621e26bf448 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5621e26bf1b0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5621e26bf3a8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5621e26bf260 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26bf2d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5621e26e9700 <col:54, line:513:5>
|     `-ReturnStmt 0x5621e26e96f0 <line:512:9, col:52>
|       `-CallExpr 0x5621e26e96b8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e95e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e9658 <col:26> 'const char *' lvalue ParmVar 0x5621e26bf260 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e9678 <col:35> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int'
|         `-DeclRefExpr 0x5621e26e9698 <col:46> 'P' lvalue ParmVar 0x5621e26bf2d8 'parser' 'P'
|-FunctionTemplateDecl 0x5621e26bf748 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5621e26bf4b0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5621e26bf6a8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5621e26bf560 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26bf5d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5621e26e9840 <col:54, line:517:5>
|     `-ReturnStmt 0x5621e26e9830 <line:516:9, col:53>
|       `-CallExpr 0x5621e26e97f8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e9728 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e9798 <col:26> 'const char *' lvalue ParmVar 0x5621e26bf560 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e97b8 <col:35> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int'
|         `-DeclRefExpr 0x5621e26e97d8 <col:47> 'P' lvalue ParmVar 0x5621e26bf5d8 'parser' 'P'
|-FunctionTemplateDecl 0x5621e26bfa48 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5621e26bf7b0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5621e26bf9a8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5621e26bf860 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26bf8d8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5621e26e9a30 <col:55, line:521:5>
|     `-ReturnStmt 0x5621e26e9a20 <line:520:9, col:65>
|       `-CallExpr 0x5621e26e99e8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e9868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e98d8 <col:26> 'const char *' lvalue ParmVar 0x5621e26bf860 'keyword' 'const char *'
|         |-BinaryOperator 0x5621e26e99a8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5621e26e9958 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5621e26e9938 <col:35> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5621e26e9990 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5621e26e9970 <col:47> 'const int' lvalue Var 0x5621e26b4990 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5621e26e99c8 <col:59> 'P' lvalue ParmVar 0x5621e26bf8d8 'parser' 'P'
|-FunctionTemplateDecl 0x5621e26bfe18 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5621e26bfab0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5621e26bfd78 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5621e26bfb60 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26bfbe0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26bfc58 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5621e26e9b70 <col:63, line:526:5>
|     |-CallExpr 0x5621e26e9af8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5621e26e9a48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5621e26e9a88 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5621e26e9a98 <col:35> 'const char *' lvalue ParmVar 0x5621e26bfb60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5621e26e9ab8 <col:44> 'int' lvalue ParmVar 0x5621e26bfbe0 'flags' 'int'
|     | `-DeclRefExpr 0x5621e26e9ad8 <col:51> 'P' lvalue ParmVar 0x5621e26bfc58 'parser' 'P'
|     `-ReturnStmt 0x5621e26e9b60 <line:525:9, col:17>
|       `-UnaryOperator 0x5621e26e9b48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26e9b38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26c0268 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5621e26bfe88 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26bff08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c01c8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5621e26bffc8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c0040 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c00e8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e9cc8 <col:58, line:541:5>
|     `-ReturnStmt 0x5621e26e9cb8 <line:540:9, col:39>
|       `-CallExpr 0x5621e26e9c80 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e9ba0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e9c20 <col:21> 'const char *' lvalue ParmVar 0x5621e26bffc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e9c40 <col:30> 'P' lvalue ParmVar 0x5621e26c0040 'parser' 'P'
|         `-DeclRefExpr 0x5621e26e9c60 <col:38> 'T' lvalue ParmVar 0x5621e26c00e8 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26c06b8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5621e26c02d8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c0358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c0618 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5621e26c0418 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c0490 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c0538 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e9e00 <col:60, line:545:5>
|     `-ReturnStmt 0x5621e26e9df0 <line:544:9, col:41>
|       `-CallExpr 0x5621e26e9db8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e9cf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e9d58 <col:23> 'const char *' lvalue ParmVar 0x5621e26c0418 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e9d78 <col:32> 'P' lvalue ParmVar 0x5621e26c0490 'parser' 'P'
|         `-DeclRefExpr 0x5621e26e9d98 <col:40> 'T' lvalue ParmVar 0x5621e26c0538 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26c0b08 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5621e26c0728 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c07a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c0a68 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5621e26c0868 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c08e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c0988 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5621e26e9f38 <col:60, line:549:5>
|     `-ReturnStmt 0x5621e26e9f28 <line:548:9, col:41>
|       `-CallExpr 0x5621e26e9ef0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e9e28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e9e90 <col:23> 'const char *' lvalue ParmVar 0x5621e26c0868 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e9eb0 <col:32> 'P' lvalue ParmVar 0x5621e26c08e0 'parser' 'P'
|         `-DeclRefExpr 0x5621e26e9ed0 <col:40> 'T' lvalue ParmVar 0x5621e26c0988 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26c0f58 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5621e26c0b78 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c0bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c0eb8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5621e26c0cb8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c0d30 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c0dd8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5621e26ea070 <col:61, line:553:5>
|     `-ReturnStmt 0x5621e26ea060 <line:552:9, col:42>
|       `-CallExpr 0x5621e26ea028 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26e9f60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26e9fc8 <col:24> 'const char *' lvalue ParmVar 0x5621e26c0cb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26e9fe8 <col:33> 'P' lvalue ParmVar 0x5621e26c0d30 'parser' 'P'
|         `-DeclRefExpr 0x5621e26ea008 <col:41> 'T' lvalue ParmVar 0x5621e26c0dd8 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26c1438 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5621e26c0fc8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c1048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c1398 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5621e26c1108 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c1188 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26c1200 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c12a8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5621e26ea1e8 <col:69, line:557:5>
|     `-ReturnStmt 0x5621e26ea1d8 <line:556:9, col:46>
|       `-CallExpr 0x5621e26ea198 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26ea098 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26ea118 <col:21> 'const char *' lvalue ParmVar 0x5621e26c1108 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26ea138 <col:30> 'int' lvalue ParmVar 0x5621e26c1188 'flags' 'int'
|         |-DeclRefExpr 0x5621e26ea158 <col:37> 'P' lvalue ParmVar 0x5621e26c1200 'parser' 'P'
|         `-DeclRefExpr 0x5621e26ea178 <col:45> 'T' lvalue ParmVar 0x5621e26c12a8 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26c1748 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5621e26c14b0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5621e26c16a8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5621e26c1560 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c15d8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5621e26ea328 <col:56, line:571:5>
|     `-ReturnStmt 0x5621e26ea318 <line:570:9, col:48>
|       `-CallExpr 0x5621e26ea2e0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26ea210 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26ea280 <col:30> 'const char *' lvalue ParmVar 0x5621e26c1560 'keyword' 'const char *'
|         |-IntegerLiteral 0x5621e26ea2a0 <col:39> 'int' 0
|         `-DeclRefExpr 0x5621e26ea2c0 <col:42> 'P' lvalue ParmVar 0x5621e26c15d8 'parser' 'P'
|-FunctionTemplateDecl 0x5621e26c1ad8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5621e26c17b0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5621e26c1a38 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5621e26c1860 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c18e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26c1958 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5621e26ea4f8 <col:67, line:576:5>
|     |-CallExpr 0x5621e26ea480 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5621e26ea340 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5621e26ea380 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5621e26ea390 <col:39> 'const char *' lvalue ParmVar 0x5621e26c1860 'keyword' 'const char *'
|     | |-BinaryOperator 0x5621e26ea440 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5621e26ea3f0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5621e26ea3b0 <col:48> 'int' lvalue ParmVar 0x5621e26c18e0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5621e26ea428 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5621e26ea408 <col:56> 'const int' lvalue Var 0x5621e26b4b80 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5621e26ea460 <col:68> 'P' lvalue ParmVar 0x5621e26c1958 'parser' 'P'
|     `-ReturnStmt 0x5621e26ea4e8 <line:575:9, col:17>
|       `-UnaryOperator 0x5621e26ea4d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26ea4c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26c1f28 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5621e26c1b48 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c1bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c1e88 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5621e26c1c88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c1d00 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c1da8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5621e26ea668 <col:62, line:592:5>
|     `-ReturnStmt 0x5621e26ea658 <line:591:9, col:51>
|       `-CallExpr 0x5621e26ea618 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26ea528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26ea598 <col:30> 'const char *' lvalue ParmVar 0x5621e26c1c88 'keyword' 'const char *'
|         |-IntegerLiteral 0x5621e26ea5b8 <col:39> 'int' 0
|         |-DeclRefExpr 0x5621e26ea5d8 <col:42> 'P' lvalue ParmVar 0x5621e26c1d00 'parser' 'P'
|         `-DeclRefExpr 0x5621e26ea5f8 <col:50> 'T' lvalue ParmVar 0x5621e26c1da8 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26c2408 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5621e26c1f98 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c2018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c2368 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5621e26c20d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c2158 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26c21d0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c2278 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5621e26ea860 <col:73, line:597:5>
|     |-CallExpr 0x5621e26ea7e0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5621e26ea680 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5621e26ea6c0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5621e26ea6d0 <col:39> 'const char *' lvalue ParmVar 0x5621e26c20d8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5621e26ea780 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5621e26ea730 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5621e26ea6f0 <col:48> 'int' lvalue ParmVar 0x5621e26c2158 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5621e26ea768 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5621e26ea748 <col:56> 'const int' lvalue Var 0x5621e26b4b80 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5621e26ea7a0 <col:68> 'P' lvalue ParmVar 0x5621e26c21d0 'parser' 'P'
|     | `-DeclRefExpr 0x5621e26ea7c0 <col:76> 'T' lvalue ParmVar 0x5621e26c2278 'x' 'T &'
|     `-ReturnStmt 0x5621e26ea850 <line:596:9, col:17>
|       `-UnaryOperator 0x5621e26ea838 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26ea828 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26c29b8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5621e26c2480 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c24f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c2918 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5621e26c25b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c2630 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c27f0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5621e26ea9d0 <col:65, line:614:5>
|     `-ReturnStmt 0x5621e26ea9c0 <line:613:9, col:46>
|       `-CallExpr 0x5621e26ea980 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26ea890 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26ea900 <col:25> 'const char *' lvalue ParmVar 0x5621e26c25b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5621e26ea920 <col:34> 'int' 0
|         |-DeclRefExpr 0x5621e26ea940 <col:37> 'P' lvalue ParmVar 0x5621e26c2630 'parser' 'P'
|         `-DeclRefExpr 0x5621e26ea960 <col:45> 'Vector<T>' lvalue ParmVar 0x5621e26c27f0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5621e26c2de8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5621e26c2a28 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5621e26c2d48 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5621e26c2ae0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c2c30 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5621e26eabf0 <col:55, line:618:5>
|     `-ReturnStmt 0x5621e26eabe0 <line:617:9, col:55>
|       `-CallExpr 0x5621e26eaba0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26ea9f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26eaa68 <col:25> 'const char *' lvalue ParmVar 0x5621e26c2ae0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5621e26eaa88 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5621e26eab60 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5621e26eab80 <col:54> 'Vector<T>' lvalue ParmVar 0x5621e26c2c30 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5621e26c33b8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5621e26c2e50 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c2ec8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c3318 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5621e26c2f88 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c3008 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26c3080 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c31d0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5621e26eade8 <col:76, line:623:5>
|     |-CallExpr 0x5621e26ead68 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5621e26eac08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5621e26eac48 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5621e26eac58 <col:34> 'const char *' lvalue ParmVar 0x5621e26c2f88 'keyword' 'const char *'
|     | |-BinaryOperator 0x5621e26ead08 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5621e26eacb8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5621e26eac78 <col:43> 'int' lvalue ParmVar 0x5621e26c3008 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5621e26eacf0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5621e26eacd0 <col:51> 'const int' lvalue Var 0x5621e26b4b80 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5621e26ead28 <col:63> 'P' lvalue ParmVar 0x5621e26c3080 'parser' 'P'
|     | `-DeclRefExpr 0x5621e26ead48 <col:71> 'Vector<T>' lvalue ParmVar 0x5621e26c31d0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5621e26eadd8 <line:622:9, col:17>
|       `-UnaryOperator 0x5621e26eadc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26eadb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26c38f8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5621e26c3430 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c34a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c3858 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5621e26c3568 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c35e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26c3730 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5621e26eb050 <col:66, line:627:5>
|     `-ReturnStmt 0x5621e26eb040 <line:626:9, col:59>
|       `-CallExpr 0x5621e26eb000 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5621e26eae18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5621e26eae88 <col:25> 'const char *' lvalue ParmVar 0x5621e26c3568 'keyword' 'const char *'
|         |-DeclRefExpr 0x5621e26eaea8 <col:34> 'int' lvalue ParmVar 0x5621e26c35e8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5621e26eafc0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5621e26eafe0 <col:58> 'Vector<T>' lvalue ParmVar 0x5621e26c3730 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5621e26c3988 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5621e26eb0d0 <col:25, line:633:5>
|   `-ReturnStmt 0x5621e26eb0c0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5621e26eb0a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5621e26eb078 <col:16> 'const bool' lvalue ->_status 0x5621e26d0e58
|         `-CXXThisExpr 0x5621e26eb068 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5621e26c3b08 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5621e26c3a40 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5621e26eb1b8 <col:27, line:639:5>
|   |-BinaryOperator 0x5621e26eb160 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5621e26eb0e8 <col:9> 'bool' lvalue ParmVar 0x5621e26c3a40 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5621e26eb148 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5621e26eb118 <col:13> 'bool' lvalue ->_status 0x5621e26d0e58
|   |     `-CXXThisExpr 0x5621e26eb108 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5621e26eb1a8 <line:638:9, col:17>
|     `-UnaryOperator 0x5621e26eb190 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5621e26eb180 <col:17> 'Args *' this
|-CXXMethodDecl 0x5621e26c3c88 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5621e26c3bc8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5621e26eb2a8 <col:39, line:644:5>
|   |-BinaryOperator 0x5621e26eb250 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5621e26eb1d8 <col:9> 'bool' lvalue ParmVar 0x5621e26c3bc8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5621e26eb238 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5621e26eb208 <col:13> 'const bool' lvalue ->_status 0x5621e26d0e58
|   |     `-CXXThisExpr 0x5621e26eb1f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5621e26eb298 <line:643:9, col:17>
|     `-UnaryOperator 0x5621e26eb280 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5621e26eb270 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5621e26c3d50 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5621e26eb350 <col:30, line:651:5>
|   `-ReturnStmt 0x5621e26eb340 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5621e26eb328 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5621e26eb2f8 <col:16> 'bool' lvalue ->_read_status 0x5621e25c54f0
|         `-ImplicitCastExpr 0x5621e26eb2d8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5621e26eb2c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5621e26c3e98 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5621e26c3e08 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5621e26eb458 <col:32, line:658:5>
|   |-BinaryOperator 0x5621e26eb400 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5621e26eb368 <col:9> 'bool' lvalue ParmVar 0x5621e26c3e08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5621e26eb3e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5621e26eb3b8 <col:13> 'bool' lvalue ->_read_status 0x5621e25c54f0
|   |     `-ImplicitCastExpr 0x5621e26eb398 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5621e26eb388 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5621e26eb448 <line:657:9, col:17>
|     `-UnaryOperator 0x5621e26eb430 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5621e26eb420 <col:17> 'Args *' this
|-CXXMethodDecl 0x5621e26c3fe8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5621e26c3f58 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5621e26eb568 <col:44, line:663:5>
|   |-BinaryOperator 0x5621e26eb510 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5621e26eb478 <col:9> 'bool' lvalue ParmVar 0x5621e26c3f58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5621e26eb4f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5621e26eb4c8 <col:13> 'bool' lvalue ->_read_status 0x5621e25c54f0
|   |     `-ImplicitCastExpr 0x5621e26eb4a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5621e26eb498 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5621e26eb558 <line:662:9, col:17>
|     `-UnaryOperator 0x5621e26eb540 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5621e26eb530 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5621e26c40b0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5621e26c4178 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5621e26c4240 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5621e26c4308 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5621e26c4618 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5621e26c43a8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5621e26c4578 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5621e26c4488 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5621e26eb920 <col:19, line:706:5>
|     `-IfStmt 0x5621e26eb8f8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5621e26eb668 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5621e26eb828 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5621e26eb7f8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5621e26eb7b8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5621e26eb6c0 <col:42> '<bound member function type>' ->simple_slot 0x5621e26e4ab0
|       |     | `-CXXThisExpr 0x5621e26eb6b0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5621e26eb758 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5621e26eb710 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5621e244f818
|       |     | `-DeclRefExpr 0x5621e26eb6f0 <col:55> 'T' lvalue ParmVar 0x5621e26c4488 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5621e26eb798 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5621e26eb8e8 <line:705:13, col:34>
|         `-CallExpr 0x5621e26eb8c0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5621e26eb848 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5621e26eb8a0 <col:33> 'T' lvalue ParmVar 0x5621e26c4488 'x' 'T &'
|-FunctionTemplateDecl 0x5621e26c48e8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5621e26c4678 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5621e26c4848 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5621e26c4758 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5621e26ebd00 <col:31, line:717:5>
|     |-DeclStmt 0x5621e26eba60 <line:713:9, col:23>
|     | `-VarDecl 0x5621e26eb948 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5621e26eba38 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5621e26eb9c0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5621e26eba18 <col:21> 'T' lvalue ParmVar 0x5621e26c4758 'x' 'T &'
|     |-IfStmt 0x5621e26ebcb0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5621e26ebb58 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5621e26ebc90 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5621e26ebc30 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5621e26ebbc0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|     |   | `-DeclRefExpr 0x5621e26ebba0 <col:14> 'T *' lvalue Var 0x5621e26eb948 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5621e26ebc70 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5621e26ebce8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5621e26ebcc8 <col:16> 'T *' lvalue Var 0x5621e26eb948 's' 'T *'
|-FunctionTemplateDecl 0x5621e26c4cf8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5621e26c4948 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5621e26c49c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5621e26c4c58 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5621e26c4aa8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5621e26c4b48 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5621e26ec010 <col:37, line:726:5>
|     |-IfStmt 0x5621e26ebfa0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5621e26ebfc0 <line:723:13, col:26>
|     | | `-VarDecl 0x5621e26ebd68 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5621e26ebe58 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5621e26ebde0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5621e26ebe38 <col:25> 'T' lvalue ParmVar 0x5621e26c4aa8 'x' 'T &'
|     | |-DeclRefExpr 0x5621e26ebe80 <col:16> 'T *' lvalue Var 0x5621e26ebd68 's' 'T *'
|     | `-BinaryOperator 0x5621e26ebf80 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5621e26ebf30 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5621e26ebec0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|     |   | `-DeclRefExpr 0x5621e26ebea0 <col:14> 'T *' lvalue Var 0x5621e26ebd68 's' 'T *'
|     |   `-DeclRefExpr 0x5621e26ebf60 <col:18> 'const V' lvalue ParmVar 0x5621e26c4b48 'value' 'const V &'
|     `-ReturnStmt 0x5621e26ec000 <line:725:9, col:17>
|       `-UnaryOperator 0x5621e26ebfe8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5621e26ebfd8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5621e26c50f8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5621e26c4d60 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5621e26c5058 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5621e26c4e10 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c4e90 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26c4f38 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5621e26ece30 <col:65, line:737:5>
|     |-DeclStmt 0x5621e26ec0a8 <line:732:9, col:26>
|     | `-VarDecl 0x5621e26ec040 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5621e26ecdf8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5621e26ece18 <line:733:13, col:58>
|       | `-VarDecl 0x5621e26ec0d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5621e26ec2b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5621e26ec280 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5621e26ec268 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5621e26ec248 <col:26, col:58> 'String' (CXXTemporary 0x5621e26ec248)
|       |           `-CXXMemberCallExpr 0x5621e26ec1d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5621e26ec148 <col:26> '<bound member function type>' ->find 0x5621e26e40c8
|       |             | `-CXXThisExpr 0x5621e26ec138 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5621e26ec210 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5621e26ec178 <col:31> 'const char *' lvalue ParmVar 0x5621e26c4e10 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5621e26ec228 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5621e26ec198 <col:40> 'int' lvalue ParmVar 0x5621e26c4e90 'flags' 'int'
|       |             `-DeclRefExpr 0x5621e26ec1b8 <col:47> 'Args::Slot *' lvalue Var 0x5621e26ec040 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5621e26ec368 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5621e26ec350 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5621e26ec330 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5621e26ec300 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|       |       `-ImplicitCastExpr 0x5621e26ec2e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5621e26ec2c8 <col:20> 'String' lvalue Var 0x5621e26ec0d0 'str' 'String'
|       `-CompoundStmt 0x5621e26ecdd8 <col:61, line:736:9>
|         |-DeclStmt 0x5621e26ec820 <line:734:13, col:76>
|         | `-VarDecl 0x5621e26ec3b8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5621e26ec7f0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5621e26ec760 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5621e26ec7a8 <col:60> 'T' lvalue ParmVar 0x5621e26c4f38 'variable' 'T &'
|         |     `-UnaryOperator 0x5621e26ec7d8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5621e26ec7c8 <col:71> 'Args *' this
|         `-CallExpr 0x5621e26ecda8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5621e26ec848 <col:13> '<bound member function type>' ->postparse 0x5621e26e42d8
|           | `-CXXThisExpr 0x5621e26ec838 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5621e26ecd68 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5621e26ec878 <col:23> 'T *' lvalue Var 0x5621e26ec3b8 's' 'T *'
|           | `-CallExpr 0x5621e26ecd28 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5621e26ecb00 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5621e26ecc00 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5621e26ecc20 <col:86> 'String' lvalue Var 0x5621e26ec0d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5621e26eccd0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5621e26ecc60 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|           |   | `-DeclRefExpr 0x5621e26ecc40 <col:92> 'T *' lvalue Var 0x5621e26ec3b8 's' 'T *'
|           |   `-UnaryOperator 0x5621e26ecd10 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5621e26ecd00 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5621e26ecd88 <col:103> 'Args::Slot *' lvalue Var 0x5621e26ec040 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5621e26c5648 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5621e26c5168 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5621e26c51e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5621e26c55a8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5621e26c52a8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c5328 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26c53c8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5621e26c5468 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5621e26edcd0 <col:88, line:745:5>
|     |-DeclStmt 0x5621e26ecec8 <line:741:9, col:26>
|     | `-VarDecl 0x5621e26ece60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5621e26ed0e8 <line:742:9, col:55>
|     | `-VarDecl 0x5621e26ecef0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5621e26ed0d0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5621e26ed0a0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5621e26ed088 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5621e26ed068 <col:22, col:54> 'String' (CXXTemporary 0x5621e26ed068)
|     |           `-CXXMemberCallExpr 0x5621e26ecff8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5621e26ecf68 <col:22> '<bound member function type>' ->find 0x5621e26e40c8
|     |             | `-CXXThisExpr 0x5621e26ecf58 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5621e26ed030 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5621e26ecf98 <col:27> 'const char *' lvalue ParmVar 0x5621e26c52a8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5621e26ed048 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5621e26ecfb8 <col:36> 'int' lvalue ParmVar 0x5621e26c5328 'flags' 'int'
|     |             `-DeclRefExpr 0x5621e26ecfd8 <col:43> 'Args::Slot *' lvalue Var 0x5621e26ece60 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5621e26ed4c0 <line:743:9, col:72>
|     | `-VarDecl 0x5621e26ed138 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5621e26ed490 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5621e26ed400 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5621e26ed448 <col:56> 'T' lvalue ParmVar 0x5621e26c53c8 'variable' 'T &'
|     |     `-UnaryOperator 0x5621e26ed478 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5621e26ed468 <col:67> 'Args *' this
|     `-CallExpr 0x5621e26edca0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5621e26ed4e8 <col:9> '<bound member function type>' ->postparse 0x5621e26e42d8
|       | `-CXXThisExpr 0x5621e26ed4d8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5621e26edc60 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5621e26ed518 <col:19> 'T *' lvalue Var 0x5621e26ed138 's' 'T *'
|       | `-ParenExpr 0x5621e26edc40 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5621e26edc10 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5621e26edbf8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5621e26edbe0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5621e26edbc0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5621e26edb90 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|       |     |       `-ImplicitCastExpr 0x5621e26edb78 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5621e26ed538 <col:25> 'String' lvalue Var 0x5621e26ecef0 'str' 'String'
|       |     |-CallExpr 0x5621e26ed9e8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5621e26ed7c0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5621e26ed8c0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5621e26ed8e0 <col:89> 'String' lvalue Var 0x5621e26ecef0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5621e26ed990 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5621e26ed920 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|       |     | | `-DeclRefExpr 0x5621e26ed900 <col:95> 'T *' lvalue Var 0x5621e26ed138 's' 'T *'
|       |     | `-UnaryOperator 0x5621e26ed9d0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5621e26ed9c0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5621e26edb58 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5621e26edb38 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5621e26edb08 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5621e26edab8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5621e26eda48 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|       |         | | `-DeclRefExpr 0x5621e26eda28 <col:109> 'T *' lvalue Var 0x5621e26ed138 's' 'T *'
|       |         | `-DeclRefExpr 0x5621e26edae8 <col:113> 'const V' lvalue ParmVar 0x5621e26c5468 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5621e26edb28 <col:120> 'bool' true
|       `-DeclRefExpr 0x5621e26edc80 <col:128> 'Args::Slot *' lvalue Var 0x5621e26ece60 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5621e26c5b78 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5621e26c56c0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26c5738 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26c5ad8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5621e26c57f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26c5878 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26c58f0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26c5998 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5621e26f0ba0 <col:75, line:754:5>
|     |-DeclStmt 0x5621e26edd78 <line:749:9, col:26>
|     | `-VarDecl 0x5621e26edd10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5621e26ee890 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5621e26ee8b0 <line:750:13, col:58>
|       | `-VarDecl 0x5621e26edda0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5621e26edf80 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5621e26edf50 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5621e26edf38 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5621e26edf18 <col:26, col:58> 'String' (CXXTemporary 0x5621e26edf18)
|       |           `-CXXMemberCallExpr 0x5621e26edea8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5621e26ede18 <col:26> '<bound member function type>' ->find 0x5621e26e40c8
|       |             | `-CXXThisExpr 0x5621e26ede08 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5621e26edee0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5621e26ede48 <col:31> 'const char *' lvalue ParmVar 0x5621e26c57f8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5621e26edef8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5621e26ede68 <col:40> 'int' lvalue ParmVar 0x5621e26c5878 'flags' 'int'
|       |             `-DeclRefExpr 0x5621e26ede88 <col:47> 'Args::Slot *' lvalue Var 0x5621e26edd10 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5621e26ee038 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5621e26ee020 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5621e26ee000 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5621e26edfd0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|       |       `-ImplicitCastExpr 0x5621e26edfb8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5621e26edf98 <col:20> 'String' lvalue Var 0x5621e26edda0 'str' 'String'
|       `-CompoundStmt 0x5621e26ee870 <col:61, line:753:9>
|         |-DeclStmt 0x5621e26ee410 <line:751:13, col:63>
|         | `-VarDecl 0x5621e26ee088 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5621e26ee3e0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5621e26ee350 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5621e26ee398 <col:47> 'T' lvalue ParmVar 0x5621e26c5998 'variable' 'T &'
|         |     `-UnaryOperator 0x5621e26ee3c8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5621e26ee3b8 <col:58> 'Args *' this
|         `-CallExpr 0x5621e26ee840 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5621e26ee438 <col:13> '<bound member function type>' ->postparse 0x5621e26e42d8
|           | `-CXXThisExpr 0x5621e26ee428 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5621e26ee800 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5621e26ee468 <col:23> 'T *' lvalue Var 0x5621e26ee088 's' 'T *'
|           | `-CallExpr 0x5621e26ee7c0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5621e26ee650 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5621e26ee698 <col:56> 'P' lvalue ParmVar 0x5621e26c58f0 'parser' 'P'
|           |   |-DeclRefExpr 0x5621e26ee6b8 <col:64> 'String' lvalue Var 0x5621e26edda0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5621e26ee768 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5621e26ee6f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|           |   | `-DeclRefExpr 0x5621e26ee6d8 <col:70> 'T *' lvalue Var 0x5621e26ee088 's' 'T *'
|           |   `-UnaryOperator 0x5621e26ee7a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5621e26ee798 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5621e26ee820 <col:81> 'Args::Slot *' lvalue Var 0x5621e26edd10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5621e26cd868 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5621e26c5bf0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5621e26c5c68 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5621e26c5ce8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5621e26cd7c8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5621e26cd440 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26cd4c0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26cd538 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26cd5d8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5621e26cd678 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5621e26f1928 <col:98, line:762:5>
|     |-DeclStmt 0x5621e26f0c38 <line:758:9, col:26>
|     | `-VarDecl 0x5621e26f0bd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5621e26f0e58 <line:759:9, col:55>
|     | `-VarDecl 0x5621e26f0c60 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5621e26f0e40 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5621e26f0e10 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5621e26f0df8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5621e26f0dd8 <col:22, col:54> 'String' (CXXTemporary 0x5621e26f0dd8)
|     |           `-CXXMemberCallExpr 0x5621e26f0d68 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5621e26f0cd8 <col:22> '<bound member function type>' ->find 0x5621e26e40c8
|     |             | `-CXXThisExpr 0x5621e26f0cc8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5621e26f0da0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5621e26f0d08 <col:27> 'const char *' lvalue ParmVar 0x5621e26cd440 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5621e26f0db8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5621e26f0d28 <col:36> 'int' lvalue ParmVar 0x5621e26cd4c0 'flags' 'int'
|     |             `-DeclRefExpr 0x5621e26f0d48 <col:43> 'Args::Slot *' lvalue Var 0x5621e26f0bd0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5621e26f1270 <line:760:9, col:59>
|     | `-VarDecl 0x5621e26f0ea8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5621e26f1240 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5621e26f11b0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5621e26f11f8 <col:43> 'T' lvalue ParmVar 0x5621e26cd5d8 'variable' 'T &'
|     |     `-UnaryOperator 0x5621e26f1228 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5621e26f1218 <col:54> 'Args *' this
|     `-CallExpr 0x5621e26f18f8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5621e26f1298 <col:9> '<bound member function type>' ->postparse 0x5621e26e42d8
|       | `-CXXThisExpr 0x5621e26f1288 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5621e26f18b8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5621e26f12c8 <col:19> 'T *' lvalue Var 0x5621e26f0ea8 's' 'T *'
|       | `-ParenExpr 0x5621e26f1898 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5621e26f1868 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5621e26f1850 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5621e26f1838 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5621e26f1818 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5621e26f17e8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|       |     |       `-ImplicitCastExpr 0x5621e26f17d0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5621e26f12e8 <col:25> 'String' lvalue Var 0x5621e26f0c60 'str' 'String'
|       |     |-CallExpr 0x5621e26f1640 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5621e26f14d0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5621e26f1518 <col:59> 'P' lvalue ParmVar 0x5621e26cd538 'parser' 'P'
|       |     | |-DeclRefExpr 0x5621e26f1538 <col:67> 'String' lvalue Var 0x5621e26f0c60 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5621e26f15e8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5621e26f1578 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|       |     | | `-DeclRefExpr 0x5621e26f1558 <col:73> 'T *' lvalue Var 0x5621e26f0ea8 's' 'T *'
|       |     | `-UnaryOperator 0x5621e26f1628 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5621e26f1618 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5621e26f17b0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5621e26f1790 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5621e26f1760 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5621e26f1710 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5621e26f16a0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|       |         | | `-DeclRefExpr 0x5621e26f1680 <col:87> 'T *' lvalue Var 0x5621e26f0ea8 's' 'T *'
|       |         | `-DeclRefExpr 0x5621e26f1740 <col:91> 'const V' lvalue ParmVar 0x5621e26cd678 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5621e26f1780 <col:98> 'bool' true
|       `-DeclRefExpr 0x5621e26f18d8 <col:106> 'Args::Slot *' lvalue Var 0x5621e26f0bd0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5621e26cded8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5621e26cd8e8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26cd968 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5621e26cd9e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5621e26cde38 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5621e26cdab0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26cdb30 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26cdba8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26cdc48 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5621e26cdce8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5621e26f2908 <col:60, line:773:5>
|     |-DeclStmt 0x5621e26f19d0 <line:767:9, col:26>
|     | `-VarDecl 0x5621e26f1968 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5621e26f28d0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5621e26f28f0 <line:768:13, col:58>
|       | `-VarDecl 0x5621e26f19f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5621e26f1bd8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5621e26f1ba8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5621e26f1b90 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5621e26f1b70 <col:26, col:58> 'String' (CXXTemporary 0x5621e26f1b70)
|       |           `-CXXMemberCallExpr 0x5621e26f1b00 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5621e26f1a70 <col:26> '<bound member function type>' ->find 0x5621e26e40c8
|       |             | `-CXXThisExpr 0x5621e26f1a60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5621e26f1b38 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5621e26f1aa0 <col:31> 'const char *' lvalue ParmVar 0x5621e26cdab0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5621e26f1b50 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5621e26f1ac0 <col:40> 'int' lvalue ParmVar 0x5621e26cdb30 'flags' 'int'
|       |             `-DeclRefExpr 0x5621e26f1ae0 <col:47> 'Args::Slot *' lvalue Var 0x5621e26f1968 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5621e26f1c90 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5621e26f1c78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5621e26f1c58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5621e26f1c28 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|       |       `-ImplicitCastExpr 0x5621e26f1c10 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5621e26f1bf0 <col:20> 'String' lvalue Var 0x5621e26f19f8 'str' 'String'
|       `-CompoundStmt 0x5621e26f28a8 <col:61, line:772:9>
|         |-DeclStmt 0x5621e26f1fd0 <line:769:13, col:66>
|         | `-VarDecl 0x5621e26f1ce8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5621e26f1fa0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5621e26f1f10 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5621e26f1f58 <col:49> 'T1' lvalue ParmVar 0x5621e26cdc48 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5621e26f1f88 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5621e26f1f78 <col:61> 'Args *' this
|         |-DeclStmt 0x5621e26f2340 <line:770:13, col:66>
|         | `-VarDecl 0x5621e26f2058 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5621e26f2310 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5621e26f2280 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5621e26f22c8 <col:49> 'T2' lvalue ParmVar 0x5621e26cdce8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5621e26f22f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5621e26f22e8 <col:61> 'Args *' this
|         `-CallExpr 0x5621e26f2878 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5621e26f2368 <col:13> '<bound member function type>' ->postparse 0x5621e26e42d8
|           | `-CXXThisExpr 0x5621e26f2358 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5621e26f2838 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5621e26f23d8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5621e26f2398 <col:23> 'T1 *' lvalue Var 0x5621e26f1ce8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5621e26f23b8 <col:29> 'T2 *' lvalue Var 0x5621e26f2058 's2' 'T2 *'
|           | `-CallExpr 0x5621e26f27f0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5621e26f25c0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5621e26f2608 <col:63> 'P' lvalue ParmVar 0x5621e26cdba8 'parser' 'P'
|           |   |-DeclRefExpr 0x5621e26f2628 <col:71> 'String' lvalue Var 0x5621e26f19f8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5621e26f26d8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5621e26f2668 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|           |   | `-DeclRefExpr 0x5621e26f2648 <col:77> 'T1 *' lvalue Var 0x5621e26f1ce8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5621e26f2798 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5621e26f2728 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|           |   | `-DeclRefExpr 0x5621e26f2708 <col:82> 'T2 *' lvalue Var 0x5621e26f2058 's2' 'T2 *'
|           |   `-UnaryOperator 0x5621e26f27d8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5621e26f27c8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5621e26f2858 <col:94> 'Args::Slot *' lvalue Var 0x5621e26f1968 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5621e26ce2c8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5621e26cdf58 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5621e26ce228 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5621e26ce010 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26ce090 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26ce108 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5621e26f2e20 <col:67, line:780:5>
|     |-DeclStmt 0x5621e26f29a0 <line:777:9, col:26>
|     | `-VarDecl 0x5621e26f2938 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5621e26f2de8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5621e26f2e08 <line:778:13, col:58>
|       | `-VarDecl 0x5621e26f29c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5621e26f2ba8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5621e26f2b78 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5621e26f2b60 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5621e26f2b40 <col:26, col:58> 'String' (CXXTemporary 0x5621e26f2b40)
|       |           `-CXXMemberCallExpr 0x5621e26f2ad0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5621e26f2a40 <col:26> '<bound member function type>' ->find 0x5621e26e40c8
|       |             | `-CXXThisExpr 0x5621e26f2a30 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5621e26f2b08 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5621e26f2a70 <col:31> 'const char *' lvalue ParmVar 0x5621e26ce010 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5621e26f2b20 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5621e26f2a90 <col:40> 'int' lvalue ParmVar 0x5621e26ce090 'flags' 'int'
|       |             `-DeclRefExpr 0x5621e26f2ab0 <col:47> 'Args::Slot *' lvalue Var 0x5621e26f2938 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5621e26f2c60 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5621e26f2c48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5621e26f2c28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5621e26f2bf8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|       |       `-ImplicitCastExpr 0x5621e26f2be0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5621e26f2bc0 <col:20> 'String' lvalue Var 0x5621e26f29c8 'str' 'String'
|       `-CallExpr 0x5621e26f2db8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5621e26f2c88 <col:13> '<bound member function type>' ->postparse 0x5621e26e42d8
|         | `-CXXThisExpr 0x5621e26f2c78 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5621e26f2d68 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5621e26f2cd8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5621e26f2cb8 <col:23> 'P' lvalue ParmVar 0x5621e26ce108 'parser' 'P'
|         | |-DeclRefExpr 0x5621e26f2d20 <col:36> 'String' lvalue Var 0x5621e26f29c8 'str' 'String'
|         | `-UnaryOperator 0x5621e26f2d50 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5621e26f2d40 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5621e26f2d98 <col:49> 'Args::Slot *' lvalue Var 0x5621e26f2938 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5621e26ce668 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5621e26ce338 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5621e26ce5c8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5621e26ce3f0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26ce470 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26ce4e8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5621e26f3790 <col:71, line:792:5>
|     |-DeclStmt 0x5621e26f2eb8 <line:784:9, col:26>
|     | `-VarDecl 0x5621e26f2e50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5621e26f2f88 <line:785:9, col:29>
|     | `-VarDecl 0x5621e26f2ee8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5621e26f2f70 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5621e26f2f50 <col:28> 'int' 1
|     |-WhileStmt 0x5621e26f3640 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5621e26f3660 <line:786:16, col:61>
|     | | `-VarDecl 0x5621e26f2fb0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5621e26f3190 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5621e26f3160 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5621e26f3148 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5621e26f3128 <col:29, col:61> 'String' (CXXTemporary 0x5621e26f3128)
|     | |           `-CXXMemberCallExpr 0x5621e26f30b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5621e26f3028 <col:29> '<bound member function type>' ->find 0x5621e26e40c8
|     | |             | `-CXXThisExpr 0x5621e26f3018 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5621e26f30f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5621e26f3058 <col:34> 'const char *' lvalue ParmVar 0x5621e26ce3f0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5621e26f3108 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5621e26f3078 <col:43> 'int' lvalue ParmVar 0x5621e26ce470 'flags' 'int'
|     | |             `-DeclRefExpr 0x5621e26f3098 <col:50> 'Args::Slot *' lvalue Var 0x5621e26f2e50 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5621e26f3248 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5621e26f3230 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5621e26f3210 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5621e26f31e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|     | |       `-ImplicitCastExpr 0x5621e26f31c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5621e26f31a8 <col:23> 'String' lvalue Var 0x5621e26f2fb0 'str' 'String'
|     | `-CompoundStmt 0x5621e26f3618 <col:64, line:790:9>
|     |   |-CallExpr 0x5621e26f33a0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5621e26f3270 <col:13> '<bound member function type>' ->postparse 0x5621e26e42d8
|     |   | | `-CXXThisExpr 0x5621e26f3260 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5621e26f3350 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5621e26f32c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5621e26f32a0 <col:23> 'P' lvalue ParmVar 0x5621e26ce4e8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5621e26f3308 <col:36> 'String' lvalue Var 0x5621e26f2fb0 'str' 'String'
|     |   | | `-UnaryOperator 0x5621e26f3338 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5621e26f3328 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5621e26f3380 <col:49> 'Args::Slot *' lvalue Var 0x5621e26f2e50 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5621e26f3538 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5621e26f33d0 <col:13> 'int' lvalue Var 0x5621e26f2ee8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5621e26f3520 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5621e26f3500 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5621e26f3468 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5621e26f3448 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5621e26f3430 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5621e26f33f0 <col:28> 'int' lvalue Var 0x5621e26f2ee8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5621e26f3410 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5621e26f34e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5621e26f34b8 <col:49> 'bool' lvalue ->_read_status 0x5621e25c54f0
|     |   |         `-ImplicitCastExpr 0x5621e26f3498 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5621e26f3488 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5621e26f35e8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5621e26f3558 <col:13> 'int' lvalue ParmVar 0x5621e26ce470 'flags' 'int'
|     |     `-UnaryOperator 0x5621e26f35d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5621e26f35b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5621e26f3598 <col:23> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5621e26f3770 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5621e26f36a8 <col:9> 'bool' lvalue ->_read_status 0x5621e25c54f0
|       | `-ImplicitCastExpr 0x5621e26f3688 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5621e26f3678 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5621e26f3750 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5621e26f3730 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5621e26f3718 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5621e26f36d8 <col:25> 'int' lvalue Var 0x5621e26f2ee8 'read_status' 'int'
|           `-IntegerLiteral 0x5621e26f36f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5621e26ceb48 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5621e26ce6d8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26ce758 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26ceaa8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5621e26ce818 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26ce898 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26ce910 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26ce9b8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5621e26f4720 <col:84, line:805:5>
|     |-DeclStmt 0x5621e26f3838 <line:796:9, col:26>
|     | `-VarDecl 0x5621e26f37d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5621e26f3908 <line:797:9, col:29>
|     | `-VarDecl 0x5621e26f3868 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5621e26f38f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5621e26f38d0 <col:28> 'int' 1
|     |-DeclStmt 0x5621e26f3c40 <line:798:9, col:71>
|     | `-VarDecl 0x5621e26f3958 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5621e26f3c10 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5621e26f3b80 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5621e26f3bc8 <col:55> 'T' lvalue ParmVar 0x5621e26ce9b8 'variable' 'T &'
|     |     `-UnaryOperator 0x5621e26f3bf8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5621e26f3be8 <col:66> 'Args *' this
|     |-WhileStmt 0x5621e26f45d0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5621e26f45f0 <line:799:16, col:61>
|     | | `-VarDecl 0x5621e26f3c68 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5621e26f3e48 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5621e26f3e18 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5621e26f3e00 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5621e26f3de0 <col:29, col:61> 'String' (CXXTemporary 0x5621e26f3de0)
|     | |           `-CXXMemberCallExpr 0x5621e26f3d70 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5621e26f3ce0 <col:29> '<bound member function type>' ->find 0x5621e26e40c8
|     | |             | `-CXXThisExpr 0x5621e26f3cd0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5621e26f3da8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5621e26f3d10 <col:34> 'const char *' lvalue ParmVar 0x5621e26ce818 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5621e26f3dc0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5621e26f3d30 <col:43> 'int' lvalue ParmVar 0x5621e26ce898 'flags' 'int'
|     | |             `-DeclRefExpr 0x5621e26f3d50 <col:50> 'Args::Slot *' lvalue Var 0x5621e26f37d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5621e26f3f00 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5621e26f3ee8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5621e26f3ec8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5621e26f3e98 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|     | |       `-ImplicitCastExpr 0x5621e26f3e80 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5621e26f3e60 <col:23> 'String' lvalue Var 0x5621e26f3c68 'str' 'String'
|     | `-CompoundStmt 0x5621e26f45a8 <col:64, line:803:9>
|     |   |-CallExpr 0x5621e26f4330 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5621e26f3f28 <col:13> '<bound member function type>' ->postparse 0x5621e26e42d8
|     |   | | `-CXXThisExpr 0x5621e26f3f18 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5621e26f42f0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5621e26f3f58 <col:23> 'T *' lvalue Var 0x5621e26f3958 's' 'T *'
|     |   | | `-CallExpr 0x5621e26f42b0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5621e26f4140 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5621e26f4188 <col:56> 'P' lvalue ParmVar 0x5621e26ce910 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5621e26f41a8 <col:64> 'String' lvalue Var 0x5621e26f3c68 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5621e26f4258 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5621e26f41e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|     |   | |   | `-DeclRefExpr 0x5621e26f41c8 <col:70> 'T *' lvalue Var 0x5621e26f3958 's' 'T *'
|     |   | |   `-UnaryOperator 0x5621e26f4298 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5621e26f4288 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5621e26f4310 <col:81> 'Args::Slot *' lvalue Var 0x5621e26f37d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5621e26f44c8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5621e26f4360 <col:13> 'int' lvalue Var 0x5621e26f3868 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5621e26f44b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5621e26f4490 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5621e26f43f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5621e26f43d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5621e26f43c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5621e26f4380 <col:28> 'int' lvalue Var 0x5621e26f3868 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5621e26f43a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5621e26f4478 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5621e26f4448 <col:49> 'bool' lvalue ->_read_status 0x5621e25c54f0
|     |   |         `-ImplicitCastExpr 0x5621e26f4428 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5621e26f4418 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5621e26f4578 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5621e26f44e8 <col:13> 'int' lvalue ParmVar 0x5621e26ce898 'flags' 'int'
|     |     `-UnaryOperator 0x5621e26f4560 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5621e26f4548 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5621e26f4528 <col:23> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5621e26f4700 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5621e26f4638 <col:9> 'bool' lvalue ->_read_status 0x5621e25c54f0
|       | `-ImplicitCastExpr 0x5621e26f4618 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5621e26f4608 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5621e26f46e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5621e26f46c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5621e26f46a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5621e26f4668 <col:25> 'int' lvalue Var 0x5621e26f3868 'read_status' 'int'
|           `-IntegerLiteral 0x5621e26f4688 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5621e26cf128 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5621e26cebc0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5621e26cec38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5621e26cf088 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5621e26cecf8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5621e26ced78 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5621e26cedf0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5621e26cef40 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5621e26f5528 <col:87, line:821:5>
|     |-DeclStmt 0x5621e26f47d0 <line:809:9, col:26>
|     | `-VarDecl 0x5621e26f4768 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5621e26f48a0 <line:810:9, col:29>
|     | `-VarDecl 0x5621e26f4800 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5621e26f4888 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5621e26f4868 <col:28> 'int' 1
|     |-DeclStmt 0x5621e26f4ae8 <line:811:9, col:38>
|     | `-VarDecl 0x5621e26f49d0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5621e26f4ac0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5621e26f4a48 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5621e26f4aa0 <col:29> 'Vector<T>' lvalue ParmVar 0x5621e26cef40 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5621e26f53d8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5621e26f53f8 <line:812:16, col:61>
|     | | `-VarDecl 0x5621e26f4b10 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5621e26f4cf0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5621e26f4cc0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5621e26f4ca8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5621e26f4c88 <col:29, col:61> 'String' (CXXTemporary 0x5621e26f4c88)
|     | |           `-CXXMemberCallExpr 0x5621e26f4c18 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5621e26f4b88 <col:29> '<bound member function type>' ->find 0x5621e26e40c8
|     | |             | `-CXXThisExpr 0x5621e26f4b78 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5621e26f4c50 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5621e26f4bb8 <col:34> 'const char *' lvalue ParmVar 0x5621e26cecf8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5621e26f4c68 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5621e26f4bd8 <col:43> 'int' lvalue ParmVar 0x5621e26ced78 'flags' 'int'
|     | |             `-DeclRefExpr 0x5621e26f4bf8 <col:50> 'Args::Slot *' lvalue Var 0x5621e26f4768 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5621e26f4da8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5621e26f4d90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5621e26f4d70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5621e26f4d40 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5621e2416288
|     | |       `-ImplicitCastExpr 0x5621e26f4d28 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5621e26f4d08 <col:23> 'String' lvalue Var 0x5621e26f4b10 'str' 'String'
|     | `-CompoundStmt 0x5621e26f53a0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5621e26f4e68 <line:813:13, col:23>
|     |   | `-VarDecl 0x5621e26f4dd0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5621e26f4e48 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5621e26f4fe8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5621e26f4e90 <col:13> '<bound member function type>' ->postparse 0x5621e26e42d8
|     |   | | `-CXXThisExpr 0x5621e26f4e80 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5621e26f4f90 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5621e26f4ee0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5621e26f4ec0 <col:23> 'P' lvalue ParmVar 0x5621e26cedf0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5621e26f4f28 <col:36> 'String' lvalue Var 0x5621e26f4b10 'str' 'String'
|     |   | | |-DeclRefExpr 0x5621e26f4f48 <col:41> 'T' lvalue Var 0x5621e26f4dd0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5621e26f4f78 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5621e26f4f68 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5621e26f4fc8 <col:53> 'Args::Slot *' lvalue Var 0x5621e26f4768 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5621e26f5140 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5621e26f5078 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5621e26f5048 <col:17> 'bool' lvalue ->_read_status 0x5621e25c54f0
|     |   | |   `-ImplicitCastExpr 0x5621e26f5028 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5621e26f5018 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5621e26f5118 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5621e26f50b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5621e26f5090 <col:17> 'Vector<T> *' lvalue Var 0x5621e26f49d0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5621e26f50f8 <col:30> 'T' lvalue Var 0x5621e26f4dd0 'sx' 'T'
|     |   |-BinaryOperator 0x5621e26f52c0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5621e26f5158 <col:13> 'int' lvalue Var 0x5621e26f4800 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5621e26f52a8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5621e26f5288 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5621e26f51f0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5621e26f51d0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5621e26f51b8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5621e26f5178 <col:28> 'int' lvalue Var 0x5621e26f4800 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5621e26f5198 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5621e26f5270 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5621e26f5240 <col:49> 'bool' lvalue ->_read_status 0x5621e25c54f0
|     |   |         `-ImplicitCastExpr 0x5621e26f5220 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5621e26f5210 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5621e26f5370 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5621e26f52e0 <col:13> 'int' lvalue ParmVar 0x5621e26ced78 'flags' 'int'
|     |     `-UnaryOperator 0x5621e26f5358 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5621e26f5340 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5621e26f5320 <col:23> 'const int' lvalue Var 0x5621e26b4898 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5621e26f5508 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5621e26f5440 <col:9> 'bool' lvalue ->_read_status 0x5621e25c54f0
|       | `-ImplicitCastExpr 0x5621e26f5420 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5621e26f5410 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5621e26f54e8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5621e26f54c8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5621e26f54b0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5621e26f5470 <col:25> 'int' lvalue Var 0x5621e26f4800 'read_status' 'int'
|           `-IntegerLiteral 0x5621e26f5490 <col:40> 'int' 1
|-AccessSpecDecl 0x5621e26cf1a0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5621e26cf1c8 prev 0x5621e26b2b98 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5621e26cf2c0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5621e26cf3b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5621e26f5560 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5621e26cf4a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5621e26f5570 <col:25, line:830:9>
| |-CXXMethodDecl 0x5621e26cf5a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5621e26cf650 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5621e26cf6f8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5621e26cf6f8
| | `-ParmVarDecl 0x5621e26cf808 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5621e26cffc8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5621e26cffc8
|   `-ParmVarDecl 0x5621e26d00d8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5621e26cf878 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5621e26cf9d8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5621e26cfbd0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5621e26cfa80 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5621e26cfaf8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5621e26f5750 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5621e26cfe88 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5621e26f55c0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5621e26f5580 <col:20> 'void *' lvalue ParmVar 0x5621e26cfa80 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5621e26cfef0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5621e26f5648 <col:32, col:45> 'char *' array Function 0x5621e2234368 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5621e26f5630 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5621e26f5600 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5621e26cfaf8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5621e26cff50 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5621e26f5710 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5621e26f56d0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5621e26cfaf8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5621e26f57d0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5621e26cfcd0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5621e26cf4a0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5621e26f5858 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5621e26f5838 <line:840:13, col:22> 'void' array Function 0x5621e22346c8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5621e26f5820 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5621e26f57f0 <col:22> 'char *' lvalue ->_slot 0x5621e26cfef0
| |         `-CXXThisExpr 0x5621e26f57e0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5621e26cfdd0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5621e26cf5a0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5621e26f5a48 <col:22, line:844:9>
| |   `-CallExpr 0x5621e26f59b0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5621e26f5998 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5621e26f5978 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5621e2367328 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5621e26f59e8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5621e26f58c8 <col:20> 'void *' lvalue ->_ptr 0x5621e26cfe88
| |     |   `-CXXThisExpr 0x5621e26f58b8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5621e26f5a18 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5621e26f5a00 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5621e26f5908 <col:26> 'char *' lvalue ->_slot 0x5621e26cfef0
| |     |     `-CXXThisExpr 0x5621e26f58f8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5621e26f5a30 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5621e26f5948 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5621e26cff50
| |         `-CXXThisExpr 0x5621e26f5938 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5621e26cfe88 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5621e26cfef0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5621e26cff50 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5621e26d0148 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5621e26d0148
| | `-ParmVarDecl 0x5621e26d0258 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5621e26d02f8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5621e26d02f8
|   `-ParmVarDecl 0x5621e26d0408 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5621e26d05a8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5621e26d0478 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5621e26d0518 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5621e26d0840 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5621e26d0a38 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5621e26d0908 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5621e26d0bb8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5621e26f5a80 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5621e26f5a60 <col:20> 'T *' lvalue ParmVar 0x5621e26d0908 'ptr' 'T *'
|   | `-CompoundStmt 0x5621e26f5ad0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5621e26d0b08 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5621e26cf5a0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5621e26f5c80 <col:22, line:857:9>
|   |   `-CallExpr 0x5621e26f5c50 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5621e26f5ae0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5621e23fec38 0x5621e23a7d68
|   |     |-CXXOperatorCallExpr 0x5621e26f5be0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5621e26f5b70 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5621e2603408 0x5621e2603028 0x5621e2602c58 0x5621e2602878 0x5621e2602498 0x5621e26020c8
|   |     | `-MemberExpr 0x5621e26f5b40 <col:29> 'T *' lvalue ->_ptr 0x5621e26d0bb8
|   |     |   `-CXXThisExpr 0x5621e26f5b30 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5621e26f5c20 <col:35> 'T' lvalue ->_slot 0x5621e26d0c18
|   |       `-CXXThisExpr 0x5621e26f5c10 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5621e26d0bb8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5621e26d0c18 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5621e26d0c80 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5621e26d0d80 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5621e26d0dd0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e26d0d60 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5621e26d0d40 <col:31> 'int' 48
|-FieldDecl 0x5621e26d0df8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5621e26d0e58 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5621e26d0eb8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5621e26d0ff0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5621e26e3970 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5621e26e39d0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5621e26e3a80 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5621e26e3ca8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5621e26e3bb0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5621e26e3df8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5621e26e3d68 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5621e26e40c8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5621e26e3eb8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5621e26e3f38 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5621e26e3fe0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5621e26e42d8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5621e26e4190 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5621e26e4208 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5621e26e43a8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5621e26e44f8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5621e26e4460 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5621e26e4888 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5621e26e45b8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5621e26e4638 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5621e26e46e0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5621e26e4798 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5621e26e4ab0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5621e26e4960 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5621e26e49d8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5621e26e4dc8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5621e26e4b60 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5621e26e4d28 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5621e26e4c38 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e270f7a0 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5621e270f8b8 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x5621e270f948 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5621e270fa58 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x5621e270f988 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x5621e270fda8 'size' 'int'
| | `-ImplicitCastExpr 0x5621e270fe70 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5621e270fe30 <col:16> 'int' lvalue ParmVar 0x5621e270f988 's' 'int'
| `-CompoundStmt 0x5621e270feb8 <col:19, line:1297:5>
|-CXXMethodDecl 0x5621e270fcb0 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x5621e270fb18 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5621e270fb98 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x5621e270fc10 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5621e270fe10 <col:73> 'const ArgContext' lvalue Var 0x5621e26f5ca8 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x5621e270fd68 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x5621e270fda8 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x5621e2729458 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x5621e2729458
| `-ParmVarDecl 0x5621e2729568 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x5621e2729608 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5621e2729718 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x5621e270fda8 'size' 'int'
| | `-ImplicitCastExpr 0x5621e2729f28 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5621e2729ee0 <col:7> 'int' xvalue .size 0x5621e270fda8
| |     `-CXXStaticCastExpr 0x5621e2729eb0 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x5621e2729e80 <col:7> 'AnnoArg' lvalue ParmVar 0x5621e2729718 '' 'AnnoArg &&'
| `-CompoundStmt 0x5621e2729f70 <col:7>
`-CXXDestructorDecl 0x5621e27297b8 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e261c288 prev 0x5621e260e040 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5621e261c380 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5621e261c470 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5621e261c598 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5621e261c718 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5621e261c898 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5621e261ca18 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5621e262e878 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5621e262f168 <col:11>
|-CXXDestructorDecl 0x5621e262e950 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5621e262eb00 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5621e262eb00
| `-ParmVarDecl 0x5621e262ec18 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5621e262ecb8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5621e262ecb8
| `-ParmVarDecl 0x5621e262edc8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5621e2631af8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5621e2631c08 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5621e2631e88 <col:11>
|   `-ReturnStmt 0x5621e2631e78 <col:11>
|     `-UnaryOperator 0x5621e2631e60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5621e2631e50 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5621e2631c78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5621e2631c78
  `-ParmVarDecl 0x5621e2631d88 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e261ca80 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5621e261cb98 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5621e261cc38 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5621e261cca0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5621e261cd08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5621e261cd70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5621e261cdd0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5621e261ce90 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5621e261cef0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5621e261cf50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5621e262e788 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5621e261cc38 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5621e262f178 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5621e262f1d0 <col:12>
|-CXXConstructorDecl 0x5621e262ee38 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5621e262ee38
| `-ParmVarDecl 0x5621e262ef48 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5621e262efe8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5621e262efe8
| `-ParmVarDecl 0x5621e262f0f8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5621e26311e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e26076b0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5621e26077c8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5621e2607858 <col:16, col:22> col:16 public
|-EnumDecl 0x5621e2607880 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5621e2607980 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5621e2607a60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2607960 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5621e2607940 <col:21> 'int' 28
| `-EnumConstantDecl 0x5621e2607a10 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5621e2607a78 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e26079f0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5621e26079d0 <col:22> 'int' 64
|-CXXMethodDecl 0x5621e2607e40 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5621e2607aa0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5621e2607b20 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5621e2607b98 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5621e2607c10 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5621e2607f00 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5621e2608108 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5621e2607f78 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5621e2607ff0 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5621e26081b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5621e2608318 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5621e2608228 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5621e26083c0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5621e26086f0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5621e2608680 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5621e2608620 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5621e26085e0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5621e20e12d0 'void'
|       |-PointerType 0x5621e23195d0 'unsigned char *'
|       | `-BuiltinType 0x5621e20e13d0 'unsigned char'
|       |-TypedefType 0x5621e21863b0 'size_t' sugar
|       | |-Typedef 0x5621e2151b20 'size_t'
|       | `-BuiltinType 0x5621e20e1430 'unsigned long'
|       `-PointerType 0x5621e20e1ad0 'void *'
|         `-BuiltinType 0x5621e20e12d0 'void'
|-CXXMethodDecl 0x5621e2608b68 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5621e2608760 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5621e26087d8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5621e2608870 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5621e26088f0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5621e2627720 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5621e2627708 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5621e26276d0 <col:58> 'int' 0
| |-ParmVarDecl 0x5621e2608970 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5621e2627748 <col:76> 'int' 0
| |-ParmVarDecl 0x5621e26089f0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5621e2627768 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5621e2608c38 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5621e2608cb8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5621e2608d78 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5621e2608e18 <col:20>
| `-OptimizeNoneAttr 0x5621e2608e70 <col:30>
|-CXXMethodDecl 0x5621e2608ee8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5621e2608f88 <col:20>
| `-OptimizeNoneAttr 0x5621e2608fe0 <col:30>
|-CXXMethodDecl 0x5621e2609058 <line:76:5, col:55> col:13 used clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5621e26090f8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5621e26091a8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5621e2609248 <col:20>
| |-OptimizeNoneAttr 0x5621e26092a0 <col:30>
| `-WarnUnusedResultAttr 0x5621e26092c8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5621e2609320 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5621e26093c0 <col:20>
| `-OptimizeNoneAttr 0x5621e2609418 <col:30>
|-CXXMethodDecl 0x5621e2609468 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5621e2609508 <col:20>
| `-OptimizeNoneAttr 0x5621e2609560 <col:30>
|-CXXMethodDecl 0x5621e26095a8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5621e2609648 <col:20>
| `-OptimizeNoneAttr 0x5621e26096a0 <col:30>
|-CXXMethodDecl 0x5621e26096e8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5621e26097a8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5621e2609870 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5621e2609938 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5621e26099f8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5621e2609b18 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5621e2627830 <col:54, line:99:5>
|   `-ReturnStmt 0x5621e2627820 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5621e2627808 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5621e26277d8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5621e261d288
|         `-CXXThisExpr 0x5621e26277c8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5621e2609cb8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5621e2609bc8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5621e26278e0 <col:67, line:103:5>
|   `-BinaryOperator 0x5621e26278c0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5621e2627858 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5621e261d288
|     | `-CXXThisExpr 0x5621e2627848 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5621e26278a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5621e2627888 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5621e2609bc8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5621e2609db0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5621e2627960 <col:33, line:107:5>
|   `-ReturnStmt 0x5621e2627950 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5621e2627938 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5621e2627908 <col:16> 'void *' lvalue ->_destructor_argument 0x5621e261d2f0
|         `-CXXThisExpr 0x5621e26278f8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5621e2609e70 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5621e2627f90 <col:25, line:113:5>
|   |-ParenExpr 0x5621e2627cd8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5621e2627ca8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5621e2627a18 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5621e26279f0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5621e26279b8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5621e2627988 <col:24> '<bound member function type>' ->shared 0x5621e2608ee8
|   |   |       `-ImplicitCastExpr 0x5621e26279d8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5621e2627978 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5621e2627a78 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e2627a58 <col:42> 'int' 0
|   |   `-CallExpr 0x5621e2627c08 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5621e2627bf0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e2627bd0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e2627c48 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e2627ae8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5621e2627c60 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e2627b10 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e2627c78 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e2627b48 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5621e2627c90 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e2627bb8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e2627ba0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e2627b68 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5621e2627ed8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5621e2627d08 <col:2> 'unsigned char *' lvalue ->_head 0x5621e261d090
|   | | `-CXXThisExpr 0x5621e2627cf8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5621e2627ec0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5621e2627ea0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5621e2627d48 <col:10> 'unsigned char *' lvalue ->_data 0x5621e261d0f8
|   |     | `-CXXThisExpr 0x5621e2627d38 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5621e2627e88 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5621e2627e68 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5621e2627d88 <col:18> 'unsigned char *' lvalue ->_tail 0x5621e261d160
|   |         | `-CXXThisExpr 0x5621e2627d78 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5621e2627e50 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5621e2627e30 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5621e2627dc8 <col:26> 'unsigned char *' lvalue ->_end 0x5621e261d1c8
|   |             | `-CXXThisExpr 0x5621e2627db8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5621e2627e18 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5621e2627df8 <col:33> 'int' 0
|   `-BinaryOperator 0x5621e2627f70 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5621e2627f08 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5621e261d288
|     | `-CXXThisExpr 0x5621e2627ef8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5621e2627f58 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5621e2627f38 <col:16> 'int' 0
|-CXXMethodDecl 0x5621e2609fb0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5621e2609f20 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5621e260a058 <col:20>
| |-OptimizeNoneAttr 0x5621e260a0b0 <col:30>
| `-WarnUnusedResultAttr 0x5621e260a0d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5621e260a1a8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5621e260a118 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5621e260a250 <col:20>
| |-OptimizeNoneAttr 0x5621e260a2a8 <col:30>
| `-WarnUnusedResultAttr 0x5621e260a2d0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5621e260a408 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5621e260a310 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5621e260a4b0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5621e260a5b0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5621e260a520 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5621e260a658 <col:20>
| `-OptimizeNoneAttr 0x5621e260a6b0 <col:30>
|-CXXMethodDecl 0x5621e260a778 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5621e260a6e8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5621e260a820 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5621e260a920 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5621e260a890 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5621e260a9c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5621e260aac8 <line:245:5, col:62> col:45 used take 'void (uint32_t)'
| |-ParmVarDecl 0x5621e260aa38 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5621e260ab70 <col:20>
| `-OptimizeNoneAttr 0x5621e260abc8 <col:30>
|-CXXMethodDecl 0x5621e260ad58 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5621e260ac08 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5621e260ac80 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5621e2627788 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5621e260ae08 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5621e260b008 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5621e260ae80 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5621e260aef8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e260b218 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5621e260b0c8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5621e260b140 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e260b428 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5621e260b2d8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5621e260b358 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5621e2627798 <col:39> 'int' 0
|-CXXMethodDecl 0x5621e260b4f8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5621e260b5c0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5621e260b688 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5621e260b748 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5621e260b810 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5621e260b958 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5621e260b8c8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5621e260bb28 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5621e260ba18 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5621e260ba90 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e260bbf8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5621e260bcb8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5621e260bd58 <col:20>
| `-OptimizeNoneAttr 0x5621e260bdb0 <col:30>
|-CXXMethodDecl 0x5621e260be50 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5621e260bef0 <col:20>
| `-OptimizeNoneAttr 0x5621e260bf48 <col:30>
|-CXXMethodDecl 0x5621e260bf98 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5621e260c058 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5621e260c120 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5621e260c1c0 <col:20>
| `-OptimizeNoneAttr 0x5621e260c218 <col:30>
|-CXXMethodDecl 0x5621e260c368 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5621e260c258 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5621e260c2d0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e260c4b8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5621e260c428 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e260c580 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5621e260c640 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5621e260c6e0 <col:20>
| `-OptimizeNoneAttr 0x5621e260c738 <col:30>
|-CXXMethodDecl 0x5621e260c788 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5621e260c828 <col:20>
| `-OptimizeNoneAttr 0x5621e260c880 <col:30>
|-CXXMethodDecl 0x5621e260c8d0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5621e260c998 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5621e260ca38 <col:20>
| `-OptimizeNoneAttr 0x5621e260ca90 <col:30>
|-CXXMethodDecl 0x5621e260cad8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5621e260cbf8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5621e260cd68 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5621e260cca8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5621e260ce58 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5621e260cef8 <col:20>
| `-OptimizeNoneAttr 0x5621e260cf50 <col:30>
|-CXXMethodDecl 0x5621e260cfa0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5621e260d060 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5621e260d298 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5621e260d110 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5621e260d188 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5621e260d348 <col:20>
| `-OptimizeNoneAttr 0x5621e260d3a0 <col:30>
|-CXXMethodDecl 0x5621e260d448 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5621e260d4e8 <col:20>
| `-OptimizeNoneAttr 0x5621e260d540 <col:30>
|-CXXMethodDecl 0x5621e260d590 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5621e260d630 <col:20>
| `-OptimizeNoneAttr 0x5621e260d688 <col:30>
|-CXXMethodDecl 0x5621e260d6d0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5621e260d770 <col:20>
| `-OptimizeNoneAttr 0x5621e260d7c8 <col:30>
|-CXXMethodDecl 0x5621e260d8c8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5621e260d800 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5621e260d970 <col:20>
| `-OptimizeNoneAttr 0x5621e260d9c8 <col:30>
|-CXXMethodDecl 0x5621e260db88 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5621e260da00 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5621e260da78 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5621e260dc38 <col:20>
| `-OptimizeNoneAttr 0x5621e260dc90 <col:30>
|-CXXMethodDecl 0x5621e260dd38 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5621e260de58 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5621e260df78 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5621e260e018 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5621e260e040 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5621e260e168 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5621e260e208 <col:20>
| `-OptimizeNoneAttr 0x5621e260e260 <col:30>
|-CXXMethodDecl 0x5621e260e308 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5621e260e3a8 <col:20>
| `-OptimizeNoneAttr 0x5621e260e400 <col:30>
|-AccessSpecDecl 0x5621e260e428 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5621e260e450 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5621e260e550 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5621e260e5a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e260e530 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5621e260e510 <col:14> 'int' 48
|-CXXMethodDecl 0x5621e260e608 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5621e260e6a8 <col:20>
| `-OptimizeNoneAttr 0x5621e260e700 <col:30>
|-CXXMethodDecl 0x5621e260e778 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5621e260e818 <col:20>
| `-OptimizeNoneAttr 0x5621e260e870 <col:30>
|-CXXMethodDecl 0x5621e260e938 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5621e260e8a8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5621e260ead8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5621e260ec78 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5621e260eb88 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5621e260ed20 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5621e260ee20 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5621e260f1d0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e260ee00 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5621e260ede0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5621e260eeb0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5621e260f1e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e260ee90 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5621e260ee70 <col:14> 'int' 1
| |-EnumConstantDecl 0x5621e260ef40 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5621e260f200 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e260ef20 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5621e260ef00 <col:14> 'int' 2
| |-EnumConstantDecl 0x5621e260efd0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5621e260f218 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e260efb0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5621e260ef90 <col:14> 'int' 3
| |-EnumConstantDecl 0x5621e260f060 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5621e260f230 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e260f040 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5621e260f020 <col:13> 'int' 4
| |-EnumConstantDecl 0x5621e260f0f0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5621e260f248 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e260f0d0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5621e260f0b0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5621e260f180 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5621e260f260 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e260f160 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5621e260f140 <col:14> 'int' 6
|-CXXMethodDecl 0x5621e260f2c8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5621e260f368 <col:20>
| `-OptimizeNoneAttr 0x5621e260f3c0 <col:30>
|-CXXMethodDecl 0x5621e260f4b8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5621e260f3f8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5621e260f560 <col:20>
| `-OptimizeNoneAttr 0x5621e260f5b8 <col:30>
|-CXXMethodDecl 0x5621e260f628 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5621e260f750 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5621e260f8c8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5621e260f800 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5621e260f990 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5621e260fa58 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5621e260fb98 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5621e260fb08 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5621e260fc40 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5621e260fd40 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5621e260ff60 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e260fd20 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5621e260fd00 <col:23> 'int' 0
| |-EnumConstantDecl 0x5621e260fdd0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5621e260ff78 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e260fdb0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5621e260fd90 <col:45> 'int' 4
| |-EnumConstantDecl 0x5621e260fe80 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5621e260ff90 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e260fe60 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5621e260fe20 <col:24> 'int' 0
| `-EnumConstantDecl 0x5621e260ff10 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5621e260ffa8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e260fef0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5621e260fed0 <col:47> 'int' 16
|-CXXMethodDecl 0x5621e2610008 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5621e2610178 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5621e26100b8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5621e2610220 <col:20>
| `-OptimizeNoneAttr 0x5621e2610278 <col:30>
|-CXXMethodDecl 0x5621e26102c8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5621e26280b0 <col:18, col:36>
|   `-ReturnStmt 0x5621e26280a0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5621e2628088 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5621e2628068 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5621e2628038 <col:27> '<bound member function type>' ->xanno 0x5621e260e308
|           `-CXXThisExpr 0x5621e2628028 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5621e26103c0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5621e26281c0 <col:30, col:48>
|   `-ReturnStmt 0x5621e26281b0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5621e2628198 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5621e2628178 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5621e2628148 <col:39> '<bound member function type>' ->xanno 0x5621e260e168
|           `-CXXThisExpr 0x5621e2628138 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5621e26104a8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5621e2628358 <col:24, col:50>
|   `-ReturnStmt 0x5621e2628348 <col:26, col:47>
|     `-UnaryOperator 0x5621e2628330 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5621e2628310 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5621e26282f8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5621e26282a8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5621e261c598
|         |   `-CXXMemberCallExpr 0x5621e2628288 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5621e2628258 <col:34> '<bound member function type>' ->xanno 0x5621e260e308
|         |       `-CXXThisExpr 0x5621e2628248 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5621e26282d8 <col:46> 'int' 0
|-CXXMethodDecl 0x5621e2610598 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5621e2628528 <col:36, col:62>
|   `-ReturnStmt 0x5621e2628518 <col:38, col:59>
|     `-UnaryOperator 0x5621e2628500 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5621e26284e0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5621e26284c8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5621e2628440 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5621e261c598
|         |   `-CXXMemberCallExpr 0x5621e2628420 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5621e26283f0 <col:46> '<bound member function type>' ->xanno 0x5621e260e168
|         |       `-CXXThisExpr 0x5621e26283e0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5621e2628470 <col:58> 'int' 0
|-CXXMethodDecl 0x5621e26106b8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5621e26286c0 <col:26, col:53>
|   `-ReturnStmt 0x5621e26286b0 <col:28, col:50>
|     `-UnaryOperator 0x5621e2628698 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5621e2628678 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5621e2628660 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5621e2628610 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5621e261c898
|         |   `-CXXMemberCallExpr 0x5621e26285f0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5621e26285c0 <col:36> '<bound member function type>' ->xanno 0x5621e260e308
|         |       `-CXXThisExpr 0x5621e26285b0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5621e2628640 <col:49> 'int' 0
|-CXXMethodDecl 0x5621e26107d8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5621e2628898 <col:38, col:65>
|   `-ReturnStmt 0x5621e2628888 <col:40, col:62>
|     `-UnaryOperator 0x5621e2628870 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5621e2628850 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5621e2628838 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5621e26287a8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5621e261c898
|         |   `-CXXMemberCallExpr 0x5621e2628788 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5621e2628758 <col:48> '<bound member function type>' ->xanno 0x5621e260e168
|         |       `-CXXThisExpr 0x5621e2628748 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5621e26287d8 <col:61> 'int' 0
|-CXXMethodDecl 0x5621e2610988 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5621e2610890 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5621e2628f68 <col:34, line:463:5>
|   |-ParenExpr 0x5621e2628db0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5621e2628d80 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5621e26289e8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e26289b8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e2628908 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e26288f0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e26288b0 <col:23> 'int' lvalue ParmVar 0x5621e2610890 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e26288d0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e2628998 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e2628968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e2628928 <col:33> 'int' lvalue ParmVar 0x5621e2610890 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5621e2628980 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5621e2628948 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5621e2628a48 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e2628a28 <col:56> 'int' 0
|   |   `-CallExpr 0x5621e2628ce0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5621e2628cc8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e2628ca8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e2628d20 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e2628b38 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5621e2628d38 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e2628b68 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e2628d50 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e2628ba0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5621e2628d68 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e2628c90 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e2628c78 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e2628c38 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5621e2628f58 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5621e2628f40 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5621e2628f20 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5621e2628ef0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5621e2628ea0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5621e261c598
|         |   `-CXXMemberCallExpr 0x5621e2628e80 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5621e2628e50 <col:9> '<bound member function type>' ->xanno 0x5621e260e168
|         |       `-CXXThisExpr 0x5621e2628e40 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5621e2628f08 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5621e2628ed0 <col:21> 'int' lvalue ParmVar 0x5621e2610890 'i' 'int'
|-CXXMethodDecl 0x5621e2610bd8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5621e2610a48 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5621e2610ac0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5621e26295f8 <col:40, line:472:5>
|   |-ParenExpr 0x5621e2629410 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5621e26293e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5621e26290c0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e2629090 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e2628fe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e2628fc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e2628f88 <col:23> 'int' lvalue ParmVar 0x5621e2610a48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e2628fa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e2629070 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e2629040 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e2629000 <col:33> 'int' lvalue ParmVar 0x5621e2610a48 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5621e2629058 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5621e2629020 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5621e2629120 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e2629100 <col:56> 'int' 0
|   |   `-CallExpr 0x5621e2629340 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5621e2629328 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e2629308 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e2629380 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e2629190 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5621e2629398 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e26291c0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e26293b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e26291f8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5621e26293c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e26292f0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e26292d8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e2629298 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5621e26295d8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5621e2629580 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5621e2629550 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5621e2629500 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5621e261c598
|     | |   `-CXXMemberCallExpr 0x5621e26294e0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5621e26294b0 <col:2> '<bound member function type>' ->xanno 0x5621e260e308
|     | |       `-CXXThisExpr 0x5621e26294a0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5621e2629568 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5621e2629530 <col:14> 'int' lvalue ParmVar 0x5621e2610a48 'i' 'int'
|     `-ImplicitCastExpr 0x5621e26295c0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5621e26295a0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5621e2610ac0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5621e2610d98 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5621e2610ca0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5621e2629d78 <col:36, line:485:5>
|   |-ParenExpr 0x5621e2629ae0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5621e2629ab0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5621e2629790 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e2629760 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e2629670 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e2629658 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e2629618 <col:23> 'int' lvalue ParmVar 0x5621e2610ca0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e2629638 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e2629740 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e2629728 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e2629690 <col:33> 'int' lvalue ParmVar 0x5621e2610ca0 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e2629708 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e26296f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e26296b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5621e26296d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5621e26297f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e26297d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5621e2629a10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5621e26299f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e26299d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e2629a50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e2629860 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5621e2629a68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e2629898 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e2629a80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e26298d0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5621e2629a98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e26299c0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e26299a8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e2629968 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5621e2629d68 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5621e2629d50 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5621e2629d38 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5621e2629d08 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5621e2629ca8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5621e2629c78 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5621e2629bf0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5621e261c470
|             |   `-CXXMemberCallExpr 0x5621e2629bd0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5621e2629ba0 <col:61> '<bound member function type>' ->xanno 0x5621e260e168
|             |       `-CXXThisExpr 0x5621e2629b90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5621e2629c90 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5621e2629c20 <col:74> 'int' lvalue ParmVar 0x5621e2610ca0 'i' 'int'
|-CXXMethodDecl 0x5621e2610fe8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5621e2610e58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5621e2610ed0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5621e262a4c8 <col:42, line:500:5>
|   |-ParenExpr 0x5621e262a260 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5621e262a230 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5621e2629f10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e2629ee0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e2629df0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e2629dd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e2629d98 <col:23> 'int' lvalue ParmVar 0x5621e2610e58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e2629db8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e2629ec0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e2629ea8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e2629e10 <col:33> 'int' lvalue ParmVar 0x5621e2610e58 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e2629e88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e2629e70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e2629e30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5621e2629e50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5621e2629f70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e2629f50 <col:60> 'int' 0
|   |   `-CallExpr 0x5621e262a190 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5621e262a178 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262a158 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262a1d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e2629fe0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5621e262a1e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262a018 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262a200 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262a050 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5621e262a218 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262a140 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262a128 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262a0e8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5621e262a4a8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5621e262a458 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5621e262a428 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5621e262a3d0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5621e262a3a0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5621e262a350 <col:48, col:57> 'char [48]' lvalue ->c 0x5621e261c470
|     |     |   `-CXXMemberCallExpr 0x5621e262a330 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5621e262a300 <col:48> '<bound member function type>' ->xanno 0x5621e260e308
|     |     |       `-CXXThisExpr 0x5621e262a2f0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5621e262a3b8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5621e262a380 <col:61> 'int' lvalue ParmVar 0x5621e2610e58 'i' 'int'
|     `-ImplicitCastExpr 0x5621e262a490 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5621e262a470 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5621e2610ed0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5621e26111a8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5621e26110b0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5621e262ac38 <col:35, line:513:5>
|   |-ParenExpr 0x5621e262a938 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5621e262a908 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5621e262a660 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e262a630 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e262a540 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e262a528 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e262a4e8 <col:23> 'int' lvalue ParmVar 0x5621e26110b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e262a508 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e262a610 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e262a5f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e262a560 <col:33> 'int' lvalue ParmVar 0x5621e26110b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e262a5d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e262a5c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e262a580 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5621e262a5a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5621e262a6c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e262a6a0 <col:60> 'int' 0
|   |   `-CallExpr 0x5621e262a868 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5621e262a850 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262a830 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262a8a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262a730 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5621e262a8c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262a768 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262a8d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262a7a0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5621e262a8f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262a818 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262a800 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262a7c0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5621e262ac28 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5621e262ac10 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5621e262abf8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5621e262abc8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5621e262ab40 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5621e262ab10 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5621e262aab0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5621e261c470
|             |   `-CXXMemberCallExpr 0x5621e262aa90 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5621e262aa60 <col:60> '<bound member function type>' ->xanno 0x5621e260e168
|             |       `-CXXThisExpr 0x5621e262aa50 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5621e262ab28 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5621e262aaf0 <col:73> 'int' lvalue ParmVar 0x5621e26110b0 'i' 'int'
|-CXXMethodDecl 0x5621e26113f8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5621e2611268 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5621e26112e0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5621e262b348 <col:41, line:528:5>
|   |-ParenExpr 0x5621e262b0e0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5621e262b0b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5621e262add0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e262ada0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e262acb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e262ac98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e262ac58 <col:23> 'int' lvalue ParmVar 0x5621e2611268 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e262ac78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e262ad80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e262ad68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e262acd0 <col:33> 'int' lvalue ParmVar 0x5621e2611268 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e262ad48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e262ad30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e262acf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5621e262ad10 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5621e262ae30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e262ae10 <col:60> 'int' 0
|   |   `-CallExpr 0x5621e262b010 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5621e262aff8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262afd8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262b050 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262aea0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5621e262b068 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262aed8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262b080 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262af10 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5621e262b098 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262afc0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262afa8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262af68 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5621e262b328 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5621e262b2d8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5621e262b2a8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5621e262b250 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5621e262b220 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5621e262b1d0 <col:47, col:56> 'char [48]' lvalue ->c 0x5621e261c470
|     |     |   `-CXXMemberCallExpr 0x5621e262b1b0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5621e262b180 <col:47> '<bound member function type>' ->xanno 0x5621e260e308
|     |     |       `-CXXThisExpr 0x5621e262b170 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5621e262b238 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5621e262b200 <col:60> 'int' lvalue ParmVar 0x5621e2611268 'i' 'int'
|     `-ImplicitCastExpr 0x5621e262b310 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5621e262b2f0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5621e26112e0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5621e26115b8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5621e26114c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5621e262ba18 <col:36, line:541:5>
|   |-ParenExpr 0x5621e262b7b8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5621e262b788 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5621e262b4e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e262b4b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e262b3c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e262b3a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e262b368 <col:23> 'int' lvalue ParmVar 0x5621e26114c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e262b388 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e262b490 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e262b478 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e262b3e0 <col:33> 'int' lvalue ParmVar 0x5621e26114c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e262b458 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e262b440 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e262b400 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5621e262b420 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5621e262b540 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e262b520 <col:60> 'int' 0
|   |   `-CallExpr 0x5621e262b6e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5621e262b6d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262b6b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262b728 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262b5b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5621e262b740 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262b5e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262b758 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262b620 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5621e262b770 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262b698 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262b680 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262b640 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5621e262ba08 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5621e262b9f0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5621e262b9d8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5621e262b9a8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5621e262b950 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5621e262b920 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5621e262b8d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5621e261c470
|             |   `-CXXMemberCallExpr 0x5621e262b8b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5621e262b880 <col:61> '<bound member function type>' ->xanno 0x5621e260e168
|             |       `-CXXThisExpr 0x5621e262b870 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5621e262b938 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5621e262b900 <col:74> 'int' lvalue ParmVar 0x5621e26114c0 'i' 'int'
|-CXXMethodDecl 0x5621e2611788 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5621e2611678 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5621e26116f0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5621e2611838 <col:20>
| `-OptimizeNoneAttr 0x5621e2611890 <col:30>
|-CXXMethodDecl 0x5621e26119c8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5621e26118d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5621e262c0e8 <col:35, line:562:5>
|   |-ParenExpr 0x5621e262be88 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5621e262be58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5621e262bbb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e262bb80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e262ba90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e262ba78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e262ba38 <col:23> 'int' lvalue ParmVar 0x5621e26118d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e262ba58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e262bb60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e262bb48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e262bab0 <col:33> 'int' lvalue ParmVar 0x5621e26118d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e262bb28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e262bb10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e262bad0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5621e262baf0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5621e262bc10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e262bbf0 <col:60> 'int' 0
|   |   `-CallExpr 0x5621e262bdb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5621e262bda0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262bd80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262bdf8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262bc80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5621e262be10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262bcb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262be28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262bcf0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5621e262be40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262bd68 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262bd50 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262bd10 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5621e262c0d8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5621e262c0c0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5621e262c0a8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5621e262c078 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5621e262c020 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5621e262bff0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5621e262bfa0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5621e261c470
|             |   `-CXXMemberCallExpr 0x5621e262bf80 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5621e262bf50 <col:60> '<bound member function type>' ->xanno 0x5621e260e168
|             |       `-CXXThisExpr 0x5621e262bf40 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5621e262c008 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5621e262bfd0 <col:73> 'int' lvalue ParmVar 0x5621e26118d0 'i' 'int'
|-CXXMethodDecl 0x5621e2611bd8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5621e2611a88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5621e2611b00 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5621e262c7c8 <col:41, line:577:5>
|   |-ParenExpr 0x5621e262c558 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5621e262c528 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5621e262c280 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e262c250 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e262c160 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e262c148 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e262c108 <col:23> 'int' lvalue ParmVar 0x5621e2611a88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e262c128 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e262c230 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e262c218 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e262c180 <col:33> 'int' lvalue ParmVar 0x5621e2611a88 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e262c1f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e262c1e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e262c1a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5621e262c1c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5621e262c2e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e262c2c0 <col:60> 'int' 0
|   |   `-CallExpr 0x5621e262c488 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5621e262c470 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262c450 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262c4c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262c350 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5621e262c4e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262c388 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262c4f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262c3c0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5621e262c510 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262c438 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262c420 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262c3e0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5621e262c7a8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5621e262c758 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5621e262c728 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5621e262c6c8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5621e262c698 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5621e262c648 <col:47, col:56> 'char [48]' lvalue ->c 0x5621e261c470
|     |     |   `-CXXMemberCallExpr 0x5621e262c628 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5621e262c5f8 <col:47> '<bound member function type>' ->xanno 0x5621e260e308
|     |     |       `-CXXThisExpr 0x5621e262c5e8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5621e262c6b0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5621e262c678 <col:60> 'int' lvalue ParmVar 0x5621e2611a88 'i' 'int'
|     `-ImplicitCastExpr 0x5621e262c790 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5621e262c770 <col:65> 'int32_t':'int' lvalue ParmVar 0x5621e2611b00 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5621e2611d98 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5621e2611ca0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5621e262cef8 <col:36, line:591:5>
|   |-ParenExpr 0x5621e262cc38 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5621e262cc08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5621e262c960 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e262c930 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e262c840 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e262c828 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e262c7e8 <col:23> 'int' lvalue ParmVar 0x5621e2611ca0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e262c808 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e262c910 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e262c8f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e262c860 <col:33> 'int' lvalue ParmVar 0x5621e2611ca0 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e262c8d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e262c8c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e262c880 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5621e262c8a0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5621e262c9c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e262c9a0 <col:60> 'int' 0
|   |   `-CallExpr 0x5621e262cb68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5621e262cb50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262cb30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262cba8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262ca30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5621e262cbc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262ca68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262cbd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262caa0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5621e262cbf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262cb18 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262cb00 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262cac0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5621e262cee8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5621e262ced0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5621e262ceb8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5621e262ce88 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5621e262ce00 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5621e262cdd0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5621e262cd80 <col:61, col:70> 'char const[48]' lvalue ->c 0x5621e261c470
|             |   `-CXXMemberCallExpr 0x5621e262cd60 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5621e262cd30 <col:61> '<bound member function type>' ->xanno 0x5621e260e168
|             |       `-CXXThisExpr 0x5621e262cd20 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5621e262cde8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5621e262cdb0 <col:74> 'int' lvalue ParmVar 0x5621e2611ca0 'i' 'int'
|-CXXMethodDecl 0x5621e2611fe8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5621e2611e58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5621e2611ed0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5621e262d5d8 <col:42, line:606:5>
|   |-ParenExpr 0x5621e262d368 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5621e262d338 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5621e262d090 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e262d060 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e262cf70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e262cf58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e262cf18 <col:23> 'int' lvalue ParmVar 0x5621e2611e58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e262cf38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e262d040 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5621e262d028 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e262cf90 <col:33> 'int' lvalue ParmVar 0x5621e2611e58 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e262d008 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e262cff0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e262cfb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5621e262cfd0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5621e262d0f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e262d0d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5621e262d298 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5621e262d280 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262d260 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262d2d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262d160 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5621e262d2f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262d198 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262d308 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262d1d0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5621e262d320 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262d248 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262d230 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262d1f0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5621e262d5b8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5621e262d568 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5621e262d538 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5621e262d4d8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5621e262d4a8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5621e262d458 <col:48, col:57> 'char [48]' lvalue ->c 0x5621e261c470
|     |     |   `-CXXMemberCallExpr 0x5621e262d438 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5621e262d408 <col:48> '<bound member function type>' ->xanno 0x5621e260e308
|     |     |       `-CXXThisExpr 0x5621e262d3f8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5621e262d4c0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5621e262d488 <col:61> 'int' lvalue ParmVar 0x5621e2611e58 'i' 'int'
|     `-ImplicitCastExpr 0x5621e262d5a0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5621e262d580 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5621e2611ed0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5621e2612180 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5621e26120b0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5621e262de48 <col:33, line:620:5>
|   |-ParenExpr 0x5621e262dbc0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5621e262db90 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5621e262d7e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e262d7b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e262d650 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e262d638 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e262d5f8 <col:23> 'int' lvalue ParmVar 0x5621e26120b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e262d618 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e262d790 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5621e262d778 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e262d670 <col:33> 'int' lvalue ParmVar 0x5621e26120b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e262d758 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e262d740 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e262d690 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5621e262d718 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5621e262d700 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5621e262d6c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5621e262d840 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e262d820 <col:79> 'int' 0
|   |   `-CallExpr 0x5621e262daf0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5621e262dad8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262dab8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262db30 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262d928 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5621e262db48 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262d970 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262db60 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262d9a8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5621e262db78 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262daa0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262da88 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262da48 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5621e262de38 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5621e262de20 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5621e262de08 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5621e262ddd8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5621e262dd50 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5621e262dd20 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5621e262dcd0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5621e261c470
|             |   `-CXXMemberCallExpr 0x5621e262dcb0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5621e262dc80 <col:67> '<bound member function type>' ->xanno 0x5621e260e168
|             |       `-CXXThisExpr 0x5621e262dc70 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5621e262dd38 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5621e262dd00 <col:80> 'int' lvalue ParmVar 0x5621e26120b0 'i' 'int'
|-CXXMethodDecl 0x5621e2612398 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5621e2612240 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5621e26122c0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5621e262e670 <col:45, line:635:5>
|   |-ParenExpr 0x5621e262e3b8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5621e262e388 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5621e262e050 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5621e262e020 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5621e262dec0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5621e262dea8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5621e262de68 <col:23> 'int' lvalue ParmVar 0x5621e2612240 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5621e262de88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5621e262e000 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5621e262dfe8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5621e262dee0 <col:33> 'int' lvalue ParmVar 0x5621e2612240 'i' 'int'
|   |   |     `-BinaryOperator 0x5621e262dfc8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5621e262dfb0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5621e262df00 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5621e260e550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5621e262df88 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5621e262df70 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5621e262df38 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5621e262e0b0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5621e262e090 <col:79> 'int' 0
|   |   `-CallExpr 0x5621e262e2e8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5621e262e2d0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5621e262e2b0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5621e217d1c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5621e262e328 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262e120 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5621e262e340 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5621e262e168 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5621e262e358 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5621e262e1a0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5621e262e370 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5621e262e298 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5621e262e280 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5621e262e238 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5621e262e650 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5621e262e5b8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5621e262e588 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5621e262e528 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5621e262e4f8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5621e262e4a8 <col:54, col:63> 'char [48]' lvalue ->c 0x5621e261c470
|     |     |   `-CXXMemberCallExpr 0x5621e262e488 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5621e262e458 <col:54> '<bound member function type>' ->xanno 0x5621e260e308
|     |     |       `-CXXThisExpr 0x5621e262e448 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5621e262e510 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5621e262e4d8 <col:67> 'int' lvalue ParmVar 0x5621e2612240 'i' 'int'
|     `-CXXConstCastExpr 0x5621e262e620 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5621e262e608 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5621e262e5d0 <col:91> 'const void *' lvalue ParmVar 0x5621e26122c0 'x' 'const void *'
|-CXXMethodDecl 0x5621e2612468 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5621e262e6f8 <col:34, line:640:5>
|   `-ReturnStmt 0x5621e262e6e8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5621e262e6d0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5621e262e6a0 <col:16> 'Packet *' lvalue ->_data_packet 0x5621e261d028
|         `-CXXThisExpr 0x5621e262e690 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5621e26125a8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5621e2612518 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5621e26277b8 <col:46> 'bool' true
|-CXXMethodDecl 0x5621e2612728 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5621e2612660 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5621e26127d0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5621e2612f80 <line:660:22> "" ""
| |-EnumConstantDecl 0x5621e26128d0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e2612ff0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e26128b0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5621e2612890 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5621e2607980 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5621e2612960 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e2613008 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2612940 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5621e2612920 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5621e2607a10 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5621e26129f0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e2613020 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e26129d0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5621e26129b0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5621e2612a80 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e2613038 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2612a60 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5621e2612a40 <col:19> 'int' 16
| |-EnumConstantDecl 0x5621e2612b10 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e2613050 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2612af0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5621e2612ad0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5621e2612ba0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e2613068 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2612b80 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5621e2612b60 <col:19> 'int' 32
| |-EnumConstantDecl 0x5621e2612c30 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e2613080 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2612c10 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5621e2612bf0 <col:19> 'int' EnumConstant 0x5621e2612a80 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5621e2612cc0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e2613098 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2612ca0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5621e2612c80 <col:19> 'int' EnumConstant 0x5621e2612ba0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5621e2612d90 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e26130b0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2612d70 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5621e2612d50 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5621e2612d10 <col:23> 'int' EnumConstant 0x5621e2612cc0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5621e2612d30 <col:40> 'int' 2
| |-EnumConstantDecl 0x5621e2612e60 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5621e26130c8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2612e40 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5621e2612e20 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5621e2612de0 <col:23> 'int' EnumConstant 0x5621e2612cc0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5621e2612e00 <col:40> 'int' 4
| `-EnumConstantDecl 0x5621e2612f30 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5621e26130e0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5621e2612f10 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5621e2612ef0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5621e2612eb0 <col:23> 'int' EnumConstant 0x5621e2612cc0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5621e2612ed0 <col:40> 'int' 8
|-CXXMethodDecl 0x5621e2613120 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5621e26131c0 <col:68> "" ""
|-CXXMethodDecl 0x5621e2613258 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5621e26132f8 <col:45> "" ""
|-CXXMethodDecl 0x5621e2613390 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5621e2613430 <col:57> "" ""
|-CXXMethodDecl 0x5621e26134c8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5621e2613568 <col:45> "" ""
|-CXXMethodDecl 0x5621e2613600 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5621e26136a0 <col:57> "" ""
|-CXXMethodDecl 0x5621e2613730 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5621e26137d0 <col:51> "" ""
|-CXXMethodDecl 0x5621e2613860 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5621e2613900 <col:63> "" ""
|-CXXMethodDecl 0x5621e2613990 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5621e2613a30 <col:53> "" ""
|-CXXMethodDecl 0x5621e2613ac0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5621e2613b60 <col:65> "" ""
|-CXXMethodDecl 0x5621e2613c78 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5621e2613be8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5621e2613d20 <col:61> "" ""
|-CXXMethodDecl 0x5621e2619838 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5621e2613da8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5621e26197a0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5621e26198e8 <col:67> "" ""
|-CXXMethodDecl 0x5621e2619a00 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5621e2619970 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5621e2619aa8 <col:63> "" ""
|-CXXMethodDecl 0x5621e2619c40 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5621e2619b30 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5621e2619ba8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5621e2619cf0 <col:69> "" ""
|-CXXMethodDecl 0x5621e2619e08 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5621e2619d78 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5621e2619eb0 <col:63> "" ""
|-CXXMethodDecl 0x5621e261a048 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5621e2619f38 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5621e2619fb0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5621e261a0f8 <col:69> "" ""
|-CXXMethodDecl 0x5621e261a210 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5621e261a180 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5621e261a2b8 <col:62> "" ""
|-CXXMethodDecl 0x5621e261a450 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5621e261a340 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5621e261a3b8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5621e261a500 <col:68> "" ""
|-CXXMethodDecl 0x5621e261a618 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5621e261a588 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5621e261a6c0 <col:63> "" ""
|-CXXMethodDecl 0x5621e261a858 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5621e261a748 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5621e261a7c0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5621e261a908 <col:69> "" ""
|-CXXMethodDecl 0x5621e261a998 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5621e261aa38 <col:64> "" ""
|-CXXMethodDecl 0x5621e261aac8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5621e261ab68 <col:52> "" ""
|-CXXMethodDecl 0x5621e261abf8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5621e261ac98 <col:67> "" ""
|-CXXMethodDecl 0x5621e261ad28 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5621e261adc8 <col:55> "" ""
|-CXXMethodDecl 0x5621e261aee0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5621e261ae50 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5621e261af88 <col:58> "" ""
|-CXXMethodDecl 0x5621e261b120 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5621e261b010 <col:33> col:36 'int'
| |-ParmVarDecl 0x5621e261b088 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5621e261b1d0 <col:62> "" ""
|-CXXMethodDecl 0x5621e261b2e8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5621e261b258 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5621e261b390 <col:58> "" ""
|-CXXMethodDecl 0x5621e261b528 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5621e261b418 <col:33> col:36 'int'
| |-ParmVarDecl 0x5621e261b490 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5621e261b5d8 <col:62> "" ""
|-CXXMethodDecl 0x5621e261b6f0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5621e261b660 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5621e261b798 <col:60> "" ""
|-CXXMethodDecl 0x5621e261b930 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5621e261b820 <col:34> col:37 'int'
| |-ParmVarDecl 0x5621e261b898 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5621e261b9e0 <col:64> "" ""
|-CXXMethodDecl 0x5621e261baf8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5621e261ba68 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5621e261bba0 <col:58> "" ""
|-CXXMethodDecl 0x5621e261bd38 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5621e261bc28 <col:33> col:36 'int'
| |-ParmVarDecl 0x5621e261bca0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5621e261bde8 <col:62> "" ""
|-CXXMethodDecl 0x5621e261bf00 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5621e261be70 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5621e261bfa8 <col:59> "" ""
|-CXXMethodDecl 0x5621e261c140 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5621e261c030 <col:33> col:36 'int'
| |-ParmVarDecl 0x5621e261c0a8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5621e261c1f0 <col:63> "" ""
|-AccessSpecDecl 0x5621e261c260 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5621e261c288 prev 0x5621e260e040 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5621e261c380 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5621e261c470 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5621e261c598 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5621e261c718 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5621e261c898 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5621e261ca18 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5621e262e878 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5621e262f168 <col:11>
| |-CXXDestructorDecl 0x5621e262e950 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5621e262eb00 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5621e262eb00
| | `-ParmVarDecl 0x5621e262ec18 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5621e262ecb8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5621e262ecb8
| | `-ParmVarDecl 0x5621e262edc8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5621e2631af8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5621e2631c08 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5621e2631e88 <col:11>
| |   `-ReturnStmt 0x5621e2631e78 <col:11>
| |     `-UnaryOperator 0x5621e2631e60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5621e2631e50 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5621e2631c78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5621e2631c78
|   `-ParmVarDecl 0x5621e2631d88 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5621e261ca80 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5621e261cb98 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5621e261cc38 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5621e261cca0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5621e261cd08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5621e261cd70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5621e261cdd0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5621e261ce90 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5621e261cef0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5621e261cf50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5621e262e788 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5621e261cc38 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5621e262f178 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5621e262f1d0 <col:12>
| |-CXXConstructorDecl 0x5621e262ee38 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5621e262ee38
| | `-ParmVarDecl 0x5621e262ef48 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5621e262efe8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5621e262efe8
| | `-ParmVarDecl 0x5621e262f0f8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5621e26311e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5621e261cfc8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5621e261d028 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5621e261d090 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5621e261d0f8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5621e261d160 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5621e261d1c8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5621e261d228 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5621e261d288 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5621e261d2f0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5621e261d378 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5621e261cfc8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5621e262e720 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5621e261d228 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5621e262f1e0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5621e262f240 <col:21, line:755:5>
|-CXXConstructorDecl 0x5621e261d518 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5621e261d458 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5621e261d610 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5621e2626b38 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5621e261d700 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5621e2626e08 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5621e2626bf0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5621e2626c68 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5621e2626ce0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e2627028 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5621e2626ed8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5621e2626f50 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5621e26272f8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5621e26270e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5621e2627160 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5621e26271d8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5621e2627450 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5621e26273c0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e2627598 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5621e2627508 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5621e2627690 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e2307ea8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5621e2307fc8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5621e2308090 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5621e2449120 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5621e244e288 <col:8>
|-CXXConstructorDecl 0x5621e2449228 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5621e2449228
| `-ParmVarDecl 0x5621e2449338 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5621e24493d8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5621e24494e8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5621e2308090 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5621e244e4a0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5621e244e470 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5621e2308090
| |     `-CXXStaticCastExpr 0x5621e244e440 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5621e244e410 <col:8> 'in_addr' lvalue ParmVar 0x5621e24494e8 '' 'in_addr &&'
| `-CompoundStmt 0x5621e244e4e8 <col:8>
`-CXXDestructorDecl 0x5621e244e720 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e231f5f0 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5621e231f708 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5621e231f7f0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5621e231f7d0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5621e231f798 <col:22> 'int' 4
|-FieldDecl 0x5621e231f898 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x5621e231f878 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5621e231f840 <col:21> 'int' 4
|-FieldDecl 0x5621e231f8f8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5621e231f958 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5621e231f9b8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5621e231fa18 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5621e231fa78 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5621e231fad8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5621e231fb38 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5621e231fba8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5621e231fc18 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e2322a18 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5621e2322b38 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x5621e2322bd8 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5621e2322c38 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5621e2322cc0 <line:27:5, col:15> col:15 referenced th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5621e2322d20 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5621e2322dc8 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x5621e2322da8 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x5621e2322d70 <col:26> 'int' 4
|-FieldDecl 0x5621e2322e70 <line:31:5, col:23> col:14 referenced th_off 'unsigned int'
| `-ConstantExpr 0x5621e2322e50 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x5621e2322e18 <col:23> 'int' 4
|-FieldDecl 0x5621e2322ed0 <line:39:5, col:13> col:13 referenced th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x5621e2322f30 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x5621e2322f90 <line:49:5, col:14> col:14 referenced th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x5621e2322ff0 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e262f250 prev 0x5621e2607600 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5621e262f388 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5621e262f418 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5621e262f4c0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x5621e262f560 <col:20>
| `-OptimizeNoneAttr 0x5621e262f5b8 <col:30>
|-CXXMethodDecl 0x5621e262f608 <line:781:5, col:66> col:55 used end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5621e262f6a8 <col:20>
| `-OptimizeNoneAttr 0x5621e262f700 <col:30>
|-CXXMethodDecl 0x5621e262f750 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5621e262f818 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5621e262f8e0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5621e262f9f8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5621e262fac0 <line:786:5, col:72> col:55 used network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5621e262fb60 <col:20>
| `-OptimizeNoneAttr 0x5621e262fbb8 <col:30>
|-CXXMethodDecl 0x5621e262fc28 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5621e262fcc8 <col:20>
| `-OptimizeNoneAttr 0x5621e262fd20 <col:30>
|-CXXMethodDecl 0x5621e262fdc8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5621e262fe68 <col:20>
| `-OptimizeNoneAttr 0x5621e262fec0 <col:30>
|-CXXMethodDecl 0x5621e262ff10 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5621e2630028 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5621e2630148 <line:791:5, col:36> col:23 used tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5621e2630268 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5621e2630330 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5621e26303d0 <col:62> "" ""
|-AccessSpecDecl 0x5621e2630440 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5621e26304a0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5621e2631098 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5621e26312c0 <col:29, col:31>
|-CXXMethodDecl 0x5621e2630568 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5621e26306a8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5621e2630618 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5621e26307a0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5621e26312d0 <col:23, col:25>
|-CXXMethodDecl 0x5621e2630958 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5621e2630890 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5621e2630c28 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5621e2630a10 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5621e2630a88 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5621e2630b00 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5621e2630db8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5621e2630cf0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5621e2630eb0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5621e2630f18 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5621e2630f18
  `-ParmVarDecl 0x5621e2631028 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e26fff30 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5621e2700048 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5621e27000d8 <col:16, col:22> col:16 public
|-EnumDecl 0x5621e2700100 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5621e2700200 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5621e2700450 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e27001e0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5621e27001c0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5621e2700290 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5621e2700468 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2700270 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5621e2700250 <col:24> 'int' 22
| |-EnumConstantDecl 0x5621e2700320 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5621e2700480 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2700300 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5621e27002e0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5621e27003b0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5621e2700498 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5621e2700390 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5621e2700370 <col:25> 'int' 95
| `-EnumConstantDecl 0x5621e2700400 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5621e2701e10 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5621e2702248 <col:7>
|-CXXConstructorDecl 0x5621e2701f18 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5621e2701f18
| `-ParmVarDecl 0x5621e2702028 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5621e27020c8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5621e27021d8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5621e2783180 <col:7>
`-CXXDestructorDecl 0x5621e2704368 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5621e27004c8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5621e2700628 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5621e27006b8 <col:32, col:38> col:32 public
|-TypedefDecl 0x5621e27006f0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5621e2236720 'uint32_t' sugar
|   |-Typedef 0x5621e214a408 'uint32_t'
|   `-TypedefType 0x5621e2123440 '__uint32_t' sugar
|     |-Typedef 0x5621e2123038 '__uint32_t'
|     `-BuiltinType 0x5621e20e1410 'unsigned int'
|-CXXConstructorDecl 0x5621e2700838 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5621e2700760 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5621e2701d18 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5621e2702258 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5621e27015d0 'base' 'int'
| | `-ImplicitCastExpr 0x5621e2701db8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5621e2701d78 <col:16> 'int' lvalue ParmVar 0x5621e2700760 'b' 'int'
| `-CompoundStmt 0x5621e27022c8 <col:19, line:1046:5>
|-CXXMethodDecl 0x5621e2700d30 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5621e2700900 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5621e2700980 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5621e27009f8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5621e2700a78 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5621e2700b38 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5621e2700bb8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5621e2701188 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5621e2700e00 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5621e27010e8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5621e2700ea8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5621e2700f48 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5621e2700fc0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5621e2701d38 <col:82> 'const ArgContext' lvalue Var 0x5621e26f5ca8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5621e2703218 <col:94, line:1067:5>
| |   |-DeclStmt 0x5621e2702458 <line:1054:9, col:64>
| |   | `-VarDecl 0x5621e27022e8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5621e2702410 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5621e2702678 <line:1055:9, col:91>
| |   | `-VarDecl 0x5621e2702488 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5621e2702650 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5621e2702630 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5621e27025e0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5621e27025c0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5621e2702568 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5621e2702518 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5621e2702548 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5621e27025a8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5621e2702588 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5621e2702610 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5621e27027f8 <line:1056:9, col:27>
| |   | `-VarDecl 0x5621e2702790 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5621e2702c40 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5621e2702b70 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5621e2702af0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5621e25fe2f8 0x5621e244db08 0x5621e244ac00 0x5621e2441740 0x5621e24413f0 0x5621e2440ce0 0x5621e2410b30 0x5621e239eab0
| |   | | |-CallExpr 0x5621e2702a30 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5621e2702820 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5621e27028d0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5621e27028a0 <col:19, col:23> '<bound member function type>' .begin 0x5621e242f228
| |   | | | |   `-DeclRefExpr 0x5621e2702880 <col:19> 'const String' lvalue ParmVar 0x5621e2700ea8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5621e2702940 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5621e2702910 <col:32, col:36> '<bound member function type>' .end 0x5621e242f440
| |   | | | |   `-DeclRefExpr 0x5621e27028f0 <col:32> 'const String' lvalue ParmVar 0x5621e2700ea8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5621e2702960 <col:43> 'const bool' lvalue Var 0x5621e27022e8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5621e27029c8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5621e27029a8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5621e27029f0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5621e2702790 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5621e2702a10 <col:73> 'const int' lvalue Var 0x5621e2702488 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5621e2702ad0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5621e2702aa0 <col:16, col:20> '<bound member function type>' .end 0x5621e242f440
| |   | |     `-DeclRefExpr 0x5621e2702a80 <col:16> 'const String' lvalue ParmVar 0x5621e2700ea8 'str' 'const String &'
| |   | `-BinaryOperator 0x5621e2702c20 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5621e2702bb8 <col:13> 'int' lvalue ->status 0x5621e2701638
| |   |   | `-CXXThisExpr 0x5621e2702ba8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5621e2702c08 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5621e2702be8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5621e2700290 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5621e2702e90 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5621e2702d78 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5621e2702d60 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5621e2702d48 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5621e2702c68 <col:13> 'int' lvalue ->status 0x5621e2701638
| |   | | |     `-CXXThisExpr 0x5621e2702c58 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5621e2702d28 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5621e2702cf8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5621e2702ca8 <col:23> 'int' lvalue ->status 0x5621e2701638
| |   | |   |   `-CXXThisExpr 0x5621e2702c98 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5621e2702d10 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5621e2702cd8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5621e2700320 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5621e2702e70 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5621e2702e10 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5621e2702db8 <col:13, col:18> '<bound member function type>' .error 0x5621e25c4b00
| |   |   | | `-DeclRefExpr 0x5621e2702d98 <col:13> 'const ArgContext' lvalue ParmVar 0x5621e2700fc0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5621e2702e38 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5621e2702de8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5621e2702e60 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5621e2702e50 <col:20> 'bool' false
| |   |-DeclStmt 0x5621e2703068 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5621e2703010 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5621e2702fa0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5621e27031c8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5621e2703080 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5621e23d2728
| |   | |-DeclRefExpr 0x5621e27030c8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5621e2702790 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5621e2703198 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5621e2703110 <col:64> 'V' lvalue ParmVar 0x5621e2700f48 'result' 'V &'
| |   `-ReturnStmt 0x5621e2703208 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5621e27031f8 <col:16> 'bool' true
| `-CXXMethodDecl 0x5621e2786cf8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5621e2786ad0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5621e2786ba8 <col:46, col:49> col:49 used result 'unsigned short &'
|   |-ParmVarDecl 0x5621e2786c10 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5621e278fbb0 <col:94, line:1067:5>
|     |-DeclStmt 0x5621e278e628 <line:1054:9, col:64>
|     | `-VarDecl 0x5621e278e448 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5621e278e5b8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5621e278e588 <col:36, col:55> 'const bool' lvalue Var 0x5621e23bec00 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5621e278e808 <line:1055:9, col:91>
|     | `-VarDecl 0x5621e278e640 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5621e278e788 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5621e278e770 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5621e278e750 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5621e278e730 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5621e278e710 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5621e278e6d8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5621e278e6b8 <col:36, col:44> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5621e2702548 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5621e278e6f8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5621e2702588 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5621e2702610 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5621e278e9a0 <line:1056:9, col:27>
|     | `-VarDecl 0x5621e278e938 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5621e278ee28 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5621e278edd0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5621e278ec88 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5621e278ec58 <col:13> '<bound member function type>' ->parse 0x5621e2700d30
|     | | | | `-CXXThisExpr 0x5621e278ec48 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5621e278eae8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5621e278eab8 <col:19, col:23> '<bound member function type>' .begin 0x5621e242f228
|     | | | |   `-DeclRefExpr 0x5621e278ea98 <col:19> 'const String' lvalue ParmVar 0x5621e2786ad0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5621e278eb58 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5621e278eb28 <col:32, col:36> '<bound member function type>' .end 0x5621e242f440
|     | | | |   `-DeclRefExpr 0x5621e278eb08 <col:32> 'const String' lvalue ParmVar 0x5621e2786ad0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5621e278ecf8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5621e278ecd8 <col:43> 'const bool' lvalue Var 0x5621e278e448 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5621e278ebe0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5621e278ebc8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5621e278eba8 <col:58, col:66> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     | | | |-ImplicitCastExpr 0x5621e278ed10 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5621e278ec08 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5621e278e938 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5621e278ed48 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5621e278ed28 <col:73> 'const int' lvalue Var 0x5621e278e640 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5621e278edb0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5621e278ed80 <col:16, col:20> '<bound member function type>' .end 0x5621e242f440
|     | |     `-DeclRefExpr 0x5621e278ed60 <col:16> 'const String' lvalue ParmVar 0x5621e2786ad0 'str' 'const String &'
|     | `-BinaryOperator 0x5621e278ee08 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5621e2702bb8 <col:13> 'int' lvalue ->status 0x5621e2701638
|     |   | `-CXXThisExpr 0x5621e2702ba8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5621e278edf0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5621e2702be8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5621e2700290 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5621e278efa0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5621e278eec0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5621e278eea8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5621e278ee90 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5621e2702c68 <col:13> 'int' lvalue ->status 0x5621e2701638
|     | | |     `-CXXThisExpr 0x5621e2702c58 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5621e278ee70 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5621e278ee40 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5621e2702ca8 <col:23> 'int' lvalue ->status 0x5621e2701638
|     | |   |   `-CXXThisExpr 0x5621e2702c98 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5621e278ee58 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5621e2702cd8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5621e2700320 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5621e278ef80 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5621e278ef30 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5621e278ef00 <col:13, col:18> '<bound member function type>' .error 0x5621e25c4b00
|     |   | | `-DeclRefExpr 0x5621e278eee0 <col:13> 'const ArgContext' lvalue ParmVar 0x5621e2786c10 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5621e278ef58 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5621e2702de8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5621e278ef70 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5621e2702e50 <col:20> 'bool' false
|     |-DeclStmt 0x5621e278f4e8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5621e278f490 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned short>::type':'unsigned short'
|     |   `-ElaboratedType 0x5621e278f440 'typename make_unsigned<unsigned short>::type' sugar
|     |     `-TypedefType 0x5621e278f420 'make_unsigned<unsigned short>::type' sugar
|     |       |-Typedef 0x5621e278f3b0 'type'
|     |       `-ElaboratedType 0x5621e278f360 'typename integer_traits<unsigned short>::unsigned_type' sugar
|     |         `-TypedefType 0x5621e278f340 'integer_traits<unsigned short>::unsigned_type' sugar
|     |           |-Typedef 0x5621e23bed58 'unsigned_type'
|     |           `-BuiltinType 0x5621e20e13f0 'unsigned short'
|     |-CallExpr 0x5621e278fb40 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5621e278fb28 <col:9> 'void (*)(const unsigned int *, unsigned short &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5621e278faa8 <col:9> 'void (const unsigned int *, unsigned short &)' lvalue Function 0x5621e278f988 'extract_integer' 'void (const unsigned int *, unsigned short &)' (FunctionTemplate 0x5621e23d2728 'extract_integer')
|     | |-ImplicitCastExpr 0x5621e278fb88 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5621e278fb70 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5621e278f548 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5621e278e938 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5621e278f618 <col:28, col:70> 'unsigned_v_type':'unsigned short' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5621e278f5c8 <col:64> 'unsigned short':'unsigned short' lvalue ParmVar 0x5621e2786ba8 'result' 'unsigned short &'
|     `-ReturnStmt 0x5621e278fba0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5621e27031f8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5621e2701548 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5621e27011f8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5621e27014a8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5621e27012a8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5621e2701348 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5621e27013c0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5621e2701d58 <col:71> 'const ArgContext' lvalue Var 0x5621e26f5ca8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5621e2703988 <col:83, line:1083:5>
| |   |-DeclStmt 0x5621e27032e0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5621e2703278 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5621e2703960 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5621e2703570 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5621e27033f8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5621e27033c0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5621e2703308 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5621e2703360 <col:31> 'const String' lvalue ParmVar 0x5621e27012a8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5621e2703380 <col:36> 'V' lvalue Var 0x5621e2703278 'x' 'V'
| |     | |   `-DeclRefExpr 0x5621e27033a0 <col:39> 'const ArgContext' lvalue ParmVar 0x5621e27013c0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5621e2703550 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5621e2703530 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5621e2703518 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5621e2703500 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5621e2703420 <col:17> 'int' lvalue ->status 0x5621e2701638
| |     |     |     `-CXXThisExpr 0x5621e2703410 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5621e27034e0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5621e27034b0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5621e2703460 <col:27> 'int' lvalue ->status 0x5621e2701638
| |     |       |   `-CXXThisExpr 0x5621e2703450 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5621e27034c8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5621e2703490 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5621e2700320 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5621e27035a0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5621e2703590 <col:20> 'bool' false
| |     `-IfStmt 0x5621e2703938 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5621e2703640 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5621e2703610 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5621e27035c0 <col:18> 'int' lvalue ->status 0x5621e2701638
| |       | |   `-CXXThisExpr 0x5621e27035b0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5621e2703628 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5621e27035f0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5621e2700320 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5621e2703878 <col:42, line:1079:9>
| |       | |-CallExpr 0x5621e2703820 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5621e2703670 <line:1076:13> '<bound member function type>' ->range_error 0x5621e2701c48
| |       | | | `-CXXThisExpr 0x5621e2703660 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5621e27036a0 <col:25> 'const ArgContext' lvalue ParmVar 0x5621e27013c0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5621e2703780 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5621e27037f8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5621e27037d8 <col:43> 'V' lvalue Var 0x5621e2703278 'x' 'V'
| |       | `-ReturnStmt 0x5621e2703868 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5621e2703858 <col:20> 'bool' false
| |       `-CompoundStmt 0x5621e2703918 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5621e27038d8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5621e2703898 <col:13> 'V' lvalue ParmVar 0x5621e2701348 'result' 'V &'
| |         | `-DeclRefExpr 0x5621e27038b8 <col:22> 'V' lvalue Var 0x5621e2703278 'x' 'V'
| |         `-ReturnStmt 0x5621e2703908 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5621e27038f8 <col:20> 'bool' true
| `-CXXMethodDecl 0x5621e27866b8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5621e2786450 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5621e2786528 <col:35, col:38> col:38 used result 'unsigned short &'
|   |-ParmVarDecl 0x5621e2786590 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5621e278e428 <col:83, line:1083:5>
|     |-DeclStmt 0x5621e2786940 <line:1071:9, col:12>
|     | `-VarDecl 0x5621e27868d8 <col:9, col:11> col:11 used x 'unsigned short':'unsigned short'
|     `-IfStmt 0x5621e278e400 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5621e2786f70 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5621e2786e98 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5621e2786e60 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5621e2786e18 <col:14> '<bound member function type>' ->parse_saturating 0x5621e2786cf8
|       | |   | `-CXXThisExpr 0x5621e2786e08 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5621e27869b0 <col:31> 'const String' lvalue ParmVar 0x5621e2786450 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5621e27869d0 <col:36> 'unsigned short':'unsigned short' lvalue Var 0x5621e27868d8 'x' 'unsigned short':'unsigned short'
|       | |   `-DeclRefExpr 0x5621e27869f0 <col:39> 'const ArgContext' lvalue ParmVar 0x5621e2786590 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5621e2786f50 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5621e2786f30 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5621e2786f18 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5621e2786f00 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5621e2703420 <col:17> 'int' lvalue ->status 0x5621e2701638
|       |     |     `-CXXThisExpr 0x5621e2703410 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5621e2786ee0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5621e2786eb0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5621e2703460 <col:27> 'int' lvalue ->status 0x5621e2701638
|       |       |   `-CXXThisExpr 0x5621e2703450 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5621e2786ec8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5621e2703490 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5621e2700320 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5621e2786f90 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5621e2703590 <col:20> 'bool' false
|       `-IfStmt 0x5621e278e3d8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5621e2786fd0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5621e2786fa0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5621e27035c0 <col:18> 'int' lvalue ->status 0x5621e2701638
|         | |   `-CXXThisExpr 0x5621e27035b0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5621e2786fb8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5621e27035f0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5621e2700320 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5621e278e310 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5621e278e280 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5621e2703670 <line:1076:13> '<bound member function type>' ->range_error 0x5621e2701c48
|         | | | `-CXXThisExpr 0x5621e2703660 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5621e2786ff0 <col:25> 'const ArgContext' lvalue ParmVar 0x5621e2786590 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5621e278e2e8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5621e278e2b8 <col:31, col:50> 'const bool' lvalue Var 0x5621e23bec00 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5621e278e258 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5621e278e240 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5621e278e228 <col:43> 'unsigned short':'unsigned short' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5621e278e208 <col:43> 'unsigned short':'unsigned short' lvalue Var 0x5621e27868d8 'x' 'unsigned short':'unsigned short'
|         | `-ReturnStmt 0x5621e278e300 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5621e2703858 <col:20> 'bool' false
|         `-CompoundStmt 0x5621e278e3b8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5621e278e388 <line:1080:13, col:22> 'unsigned short':'unsigned short' lvalue '='
|           | |-DeclRefExpr 0x5621e278e330 <col:13> 'unsigned short':'unsigned short' lvalue ParmVar 0x5621e2786528 'result' 'unsigned short &'
|           | `-ImplicitCastExpr 0x5621e278e370 <col:22> 'unsigned short':'unsigned short' <LValueToRValue>
|           |   `-DeclRefExpr 0x5621e278e350 <col:22> 'unsigned short':'unsigned short' lvalue Var 0x5621e27868d8 'x' 'unsigned short':'unsigned short'
|           `-ReturnStmt 0x5621e278e3a8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5621e27038f8 <col:20> 'bool' true
|-FieldDecl 0x5621e27015d0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5621e2701638 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5621e2701688 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5621e2701940 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5621e27016c8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5621e2701748 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5621e27017c0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5621e2701840 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5621e2701c48 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5621e2701a10 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5621e2701a88 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5621e2701b20 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5621e27041e8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5621e27041e8
| `-ParmVarDecl 0x5621e27042f8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5621e2704478 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5621e2704588 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5621e2783190 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5621e2783160 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5621e2783130 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5621e2783100 <col:7> 'IntArg' lvalue ParmVar 0x5621e2704588 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5621e27015d0 'base' 'int'
| | `-ImplicitCastExpr 0x5621e2783288 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5621e2783258 <col:7> 'int' xvalue .base 0x5621e27015d0
| |     `-CXXStaticCastExpr 0x5621e2783228 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5621e27831f8 <col:7> 'IntArg' lvalue ParmVar 0x5621e2704588 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5621e2701638 'status' 'int'
| | `-ImplicitCastExpr 0x5621e2783358 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5621e2783328 <col:7> 'int' xvalue .status 0x5621e2701638
| |     `-CXXStaticCastExpr 0x5621e27832f8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5621e27832c8 <col:7> 'IntArg' lvalue ParmVar 0x5621e2704588 '' 'IntArg &&'
| `-CompoundStmt 0x5621e27833b0 <col:7>
`-CXXDestructorDecl 0x5621e27822f0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5621e2708120 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x5621e2708378 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5621e2782218 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5621e2782790 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5621e2782770 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5621e2782800 <col:19>
|-CXXConstructorDecl 0x5621e27823f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x5621e27823f8
| `-ParmVarDecl 0x5621e2782508 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x5621e27825a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5621e27826b8 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5621e27833c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5621e27830e0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5621e27830b0 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x5621e2783080 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x5621e27826b8 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x5621e2783430 <col:19>
`-CXXDestructorDecl 0x5621e2782840 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
