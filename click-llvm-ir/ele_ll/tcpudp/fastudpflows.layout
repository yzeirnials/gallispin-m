
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b70ec708 prev 0x55d6b70e3ea8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b70ec800 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55d6b70ec890 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55d6b70ec908 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55d6b70ec9c8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55d6b70eca90 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55d6b70ecc08 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55d6b70ecb40 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55d6b70eccb0 <col:24>
| `-OptimizeNoneAttr 0x55d6b70ecd08 <col:34>
|-CXXMethodDecl 0x55d6b70ecd50 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55d6b70ed008 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55d6b70ece00 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d6b70ece78 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55d6b70ecef8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55d6b70ed0c0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55d6b70ed0f8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55d6b70ed160 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55d6b70ed1e8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55d6b70ed508 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55d6b70ed2a0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d6b70ed318 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55d6b70ed390 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55d6b70ed410 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55d6b70ed620 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55d6b70f4f98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d6b70f4f98
| `-ParmVarDecl 0x55d6b70f50a8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55d6b70f5148 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d6b70f5148
| `-ParmVarDecl 0x55d6b70f5258 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55d6b71dd3e8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b70df720 prev 0x55d6b70df4a0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6b70df818 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55d6b70df8a8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55d6b70df908 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55d6b70df9f8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55d6b70dfaf8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55d6b70dfcc8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55d6b70dfb78 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55d6b70dfbf0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55d6b70dfe58 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55d6b70dfd90 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55d6b70dff00 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70e0038 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55d6b70dff70 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55d6b70e01d8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55d6b70e0118 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55d6b70e0378 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55d6b70e02b8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55d6b70e0420 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55d6b70e0520 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55d6b70e0600 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e0500 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55d6b70e04e0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55d6b70e05b0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55d6b70e0618 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70e0590 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55d6b70e0570 <col:44> 'int' 2
|-CXXMethodDecl 0x55d6b70e0760 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55d6b70e0648 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55d6b70e06c8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55d6b70e08b8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55d6b70e0828 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55d6b70e0af8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55d6b70e0978 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55d6b70e09f0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55d6b70e0ba8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70e0c00 <col:30>
|-CXXMethodDecl 0x55d6b70e0d08 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55d6b70e0c40 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55d6b70e0db0 <col:20>
| `-OptimizeNoneAttr 0x55d6b70e0e08 <col:30>
|-CXXMethodDecl 0x55d6b70e0e58 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55d6b70e0f20 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55d6b70e1038 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55d6b70e10c0 <line:56:5, col:33> col:23 used PORTS_0_1 'const char []' static
|-VarDecl 0x55d6b70e1148 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55d6b70e11d0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55d6b70e1258 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55d6b70e12e8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55d6b70e13a8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55d6b70e1430 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55d6b70e14b8 <line:64:5, col:28> col:23 used PULL 'const char []' static
|-VarDecl 0x55d6b70e1540 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55d6b70e15c8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55d6b70e1650 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55d6b70e16e0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55d6b70e17a0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55d6b70e1830 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55d6b70e1980 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55d6b70e18e8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55d6b70e1b10 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55d6b70e1a40 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55d6b70e1dc0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55d6b70e1bc8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55d6b70e1c48 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55d6b70e1cc8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55d6b70e1e78 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55d6b70e1f80 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d6b70e2210 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e1f60 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6b70e1f40 <col:33> 'int' 0
| |-EnumConstantDecl 0x55d6b70e2010 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d6b70e2228 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e1ff0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55d6b70e1fd0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55d6b70e20a0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d6b70e2240 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e2080 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55d6b70e2060 <col:38> 'int' 90
| |-EnumConstantDecl 0x55d6b70e2130 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d6b70e2258 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e2110 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55d6b70e20f0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55d6b70e21c0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55d6b70e2270 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70e21a0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55d6b70e2180 <col:32> 'int' 2000
|-CXXMethodDecl 0x55d6b70e22b0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55d6b70e26f0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d6b70e2560 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55d6b70e25d8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70e27c0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55d6b70e2940 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55d6b70e2870 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70e2b48 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d6b70e29f8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55d6b70e2a70 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70e2c48 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55d6b70e2ce8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55d6b70e2db0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6b70e2e40 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55d6b70e3070 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e2e20 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55d6b70e2e00 <col:36> 'int' EnumConstant 0x55d6b70e2db0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6b70e2e90 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6b70e2ee0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6b70e2f30 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6b70e2f80 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6b70e2fd0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55d6b70e3020 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55d6b70e3158 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55d6b70e3098 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55d6b70e3220 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55d6b70e32e0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55d6b70e33a0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55d6b70e3460 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55d6b70e3578 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55d6b70e3640 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55d6b70e37c0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55d6b70e36f0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55d6b70e38e8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55d6b70e3ae8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55d6b70e3998 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55d6b70e3a18 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55d6b70f1438 <col:54, line:127:5>
|   |-ParenExpr 0x55d6b70f12e8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55d6b70f12b8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70f0fa8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d6b70f0f80 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55d6b70f0f68 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55d6b70f0f50 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55d6b70f0f20 <col:31> 'Router *' lvalue ->_router 0x55d6b70eee00
|   |   |         `-CXXThisExpr 0x55d6b70f0f10 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d6b70f1008 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70f0fe8 <col:48> 'int' 0
|   |   `-CallExpr 0x55d6b70f1218 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70f1200 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70f11e0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70f1258 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70f1078 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55d6b70f1270 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70f1098 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55d6b70f1288 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70f10d0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55d6b70f12a0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70f11c8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70f11b0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70f1168 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55d6b70f1380 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55d6b70f1318 <col:9> 'Router *' lvalue ->_router 0x55d6b70eee00
|   | | `-CXXThisExpr 0x55d6b70f1308 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55d6b70f1368 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d6b70f1348 <col:19> 'Router *' lvalue ParmVar 0x55d6b70e3998 'r' 'Router *'
|   `-BinaryOperator 0x55d6b70f1418 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55d6b70f13b0 <col:9> 'int' lvalue ->_eindex 0x55d6b70eee68
|     | `-CXXThisExpr 0x55d6b70f13a0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55d6b70f1400 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b70f13e0 <col:19> 'int' lvalue ParmVar 0x55d6b70e3a18 'eindex' 'int'
|-CXXMethodDecl 0x55d6b70e3c70 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55d6b70e3ba8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55d6b70e3d40 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55d6b70e3e08 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55d6b70e3ea8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55d6b70e40f8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55d6b70e3f70 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55d6b70e3ff0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55d6b70e41a8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70e4200 <col:30>
|-CXXMethodDecl 0x55d6b70e4308 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d6b70e4240 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55d6b70e43b0 <col:20>
| `-OptimizeNoneAttr 0x55d6b70e4408 <col:30>
|-CXXMethodDecl 0x55d6b70e44d8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d6b70e4448 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55d6b70e4580 <col:20>
| `-OptimizeNoneAttr 0x55d6b70e45d8 <col:30>
|-CXXMethodDecl 0x55d6b70e4768 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55d6b70e4610 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55d6b70e4690 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55d6b70e48f8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d6b70e4830 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d6b70e4a48 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d6b70e49b8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d6b70e4b98 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d6b70e4b08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d6b70e4ce8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d6b70e4c58 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d6b70e4fa8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55d6b70e4da0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55d6b70e4e20 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55d6b70e4ec8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55d6b70e5080 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55d6b70e5140 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55d6b70e5410 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d6b70e52c0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55d6b70e5338 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70e5538 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55d6b70e5710 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55d6b70e55f0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55d6b70e5670 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55d6b70e58f8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55d6b70e57d8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55d6b70e5858 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55d6b70e5c68 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d6b70e59b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d6b70e5a30 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d6b70e5ab0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d6b70f0a20 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6b70f0a00 <col:106> 'int' 0
| `-ParmVarDecl 0x55d6b70e5b28 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6b70f0a58 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6b70f0a38 <col:126> 'int' 0
|-CXXMethodDecl 0x55d6b70e6008 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d6b70e5d38 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d6b70e5dd0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d6b70e5e50 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55d6b70e5ec8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6b70f0a90 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6b70f0a70 <col:114> 'int' 0
|-CXXMethodDecl 0x55d6b70e6398 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d6b70e60e0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55d6b70e6158 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d6b70e61d8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55d6b70f0aa8 <col:96> 'int' 0
| `-ParmVarDecl 0x55d6b70e6250 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6b70f0ae8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6b70f0ac8 <col:116> 'int' 0
|-CXXMethodDecl 0x55d6b70e6718 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d6b70e6468 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d6b70e64e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b70e6560 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d6b70f0b20 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6b70f0b00 <col:109> 'int' 0
| `-ParmVarDecl 0x55d6b70e65d8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6b70f0b58 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6b70f0b38 <col:129> 'int' 0
|-CXXMethodDecl 0x55d6b70e6a98 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d6b70e67e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d6b70e6860 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b70e68e0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55d6b70e6958 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6b70f0b90 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6b70f0b70 <col:117> 'int' 0
|-CXXMethodDecl 0x55d6b70e6e28 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d6b70e6b70 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70e6be8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b70e6c68 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55d6b70f0ba8 <col:99> 'int' 0
| `-ParmVarDecl 0x55d6b70e6ce0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6b70f0be8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6b70f0bc8 <col:119> 'int' 0
|-CXXMethodDecl 0x55d6b70e7248 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55d6b70e6ef8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d6b70e6f78 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d6b70e6ff0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b70e7070 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d6b70f0c20 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6b70f0c00 <col:108> 'int' 0
| `-ParmVarDecl 0x55d6b70e70f0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55d6b70f0c58 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55d6b70f0c38 <col:141> 'int' 0
|-CXXMethodDecl 0x55d6b70e7668 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d6b70e7320 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d6b70e73a0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d6b70e7418 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b70e7498 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55d6b70e7518 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d6b70f0c70 <col:121> 'int' 0
|-CXXMethodDecl 0x55d6b70e7a98 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d6b70e7748 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55d6b70e77c8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55d6b70e7840 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b70e78c0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55d6b70f0c90 <col:98> 'int' 0
| `-ParmVarDecl 0x55d6b70e7940 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d6b70f0cb0 <col:123> 'int' 0
|-CXXMethodDecl 0x55d6b70e7d60 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55d6b70e7b70 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d6b70e7bf0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55d6b70e7c70 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55d6b70f0cd0 <col:80> 'int' 0
|-EnumDecl 0x55d6b70e7e18 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55d6b70e7f20 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d6b70e81b0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e7f00 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55d6b70e7ee0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55d6b70e7fb0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d6b70e81c8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e7f90 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55d6b70e7f70 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d6b70e8040 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d6b70e81e0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e8020 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55d6b70e8000 <col:44> 'int' 4
| |-EnumConstantDecl 0x55d6b70e80d0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d6b70e81f8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70e80b0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55d6b70e8090 <col:36> 'int' 7
| `-EnumConstantDecl 0x55d6b70e8160 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55d6b70e8210 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70e8140 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55d6b70e8120 <col:34> 'int' 6
|-CXXMethodDecl 0x55d6b70e84c8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55d6b70e8238 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55d6b70e82d8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d6b70e8358 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55d6b70e83d0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55d6b70f0d88 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55d6b70f0d70 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55d6b70f0d58 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55d6b70f0d38 <col:98, col:105> 'String' (CXXTemporary 0x55d6b70f0d38)
|           `-CXXTemporaryObjectExpr 0x55d6b70f0d00 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55d6b70e8768 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55d6b70e8598 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d6b70e8610 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d6b70e8688 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d6b70f0e38 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d6b70f0e20 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d6b70f0e08 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d6b70f0de8 <col:94, col:101> 'String' (CXXTemporary 0x55d6b70f0de8)
| |         `-CXXTemporaryObjectExpr 0x55d6b70f0db0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55d6b70f1620 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55d6b70f1598 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55d6b70f1568 <col:9> '<bound member function type>' ->add_task_handlers 0x55d6b70e84c8
|     | `-CXXThisExpr 0x55d6b70f1558 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d6b70f15d8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6b70f14d8 <col:27> 'Task *' lvalue ParmVar 0x55d6b70e8598 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d6b70f15f0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6b70f14f8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55d6b70e8610 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55d6b70f1608 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d6b70f1518 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d6b70e8160 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d6b70f1538 <col:62> 'const String' lvalue ParmVar 0x55d6b70e8688 'prefix' 'const String &'
|-CXXMethodDecl 0x55d6b70e8978 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55d6b70e8830 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d6b70e88a8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d6b70f0ee8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d6b70f0ed0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d6b70f0eb8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d6b70f0e98 <col:70, col:77> 'String' (CXXTemporary 0x55d6b70f0e98)
| |         `-CXXTemporaryObjectExpr 0x55d6b70f0e60 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55d6b70f17f8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55d6b70f1770 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55d6b70f1740 <col:9> '<bound member function type>' ->add_task_handlers 0x55d6b70e84c8
|     | `-CXXThisExpr 0x55d6b70f1730 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d6b70f17b0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6b70f16b0 <col:27> 'Task *' lvalue ParmVar 0x55d6b70e8830 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d6b70f17c8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55d6b70f16d0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55d6b70f17e0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d6b70f16f0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d6b70e8160 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d6b70f1710 <col:57> 'const String' lvalue ParmVar 0x55d6b70e88a8 'prefix' 'const String &'
|-CXXMethodDecl 0x55d6b70e8c58 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55d6b70e8a40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70e8ac0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70e8b38 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55d6b70e8f08 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55d6b70e8d28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70e8da8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70e8e28 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55d6b70e91f8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d6b70e8fd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70e9058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70e90d0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55d6b70e94a8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55d6b70e92c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70e9348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70e93c8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55d6b70e9758 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55d6b70e9578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70e95f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70e9678 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55d6b70e9a08 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55d6b70e9828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70e98a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70e9920 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55d6b70e9cb8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55d6b70e9ad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70e9b58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70e9bd8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55d6b70e9fc8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55d6b70e9de0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70e9e60 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70e9ee0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55d6b70ea2a8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55d6b70ea098 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70ea118 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70ea1c0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55d6b70ea588 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55d6b70ea378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70ea3f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70ea4a0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55d6b70ea7f0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d6b70ea658 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d6b70ea6d8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d6b70ea750 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55d6b70eaa98 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55d6b70ea8c0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d6b70ea940 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d6b70ea9b8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55d6b70ead48 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55d6b70eab68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70eabe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70eac68 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55d6b70eaff8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55d6b70eae18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70eae98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70eaf10 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55d6b70eb2a8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55d6b70eb0c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70eb148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70eb1c0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55d6b70eb578 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55d6b70eb378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70eb3f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6b70eb498 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55d6b70eb8a8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55d6b70eb648 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6b70eb6c8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55d6b70eb740 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55d6b70eb7b8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6b70f0f00 <col:93> 'bool' false
|-CXXMethodDecl 0x55d6b70eba90 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d6b70eb978 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55d6b70eb9f8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55d6b70ebc68 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d6b70ebb50 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55d6b70ebbd0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55d6b70ebf48 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d6b70ebd28 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55d6b70ebda0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55d6b70ebe20 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55d6b70ebe98 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70ec238 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d6b70ec018 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55d6b70ec090 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55d6b70ec110 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55d6b70ec188 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70ec470 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55d6b70ec310 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55d6b70ec390 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55d6b70ec658 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55d6b70ec538 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55d6b70ec5b8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55d6b70ec708 prev 0x55d6b70e3ea8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d6b70ec800 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55d6b70ec890 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55d6b70ec908 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55d6b70ec9c8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55d6b70eca90 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55d6b70ecc08 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55d6b70ecb40 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55d6b70eccb0 <col:24>
| | `-OptimizeNoneAttr 0x55d6b70ecd08 <col:34>
| |-CXXMethodDecl 0x55d6b70ecd50 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55d6b70ed008 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55d6b70ece00 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d6b70ece78 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55d6b70ecef8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55d6b70ed0c0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55d6b70ed0f8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55d6b70ed160 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55d6b70ed1e8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55d6b70ed508 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55d6b70ed2a0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d6b70ed318 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55d6b70ed390 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55d6b70ed410 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55d6b70ed620 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55d6b70f4f98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d6b70f4f98
| | `-ParmVarDecl 0x55d6b70f50a8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55d6b70f5148 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d6b70f5148
| | `-ParmVarDecl 0x55d6b70f5258 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55d6b71dd3e8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d6b70ed698 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55d6b70ed738 <col:38> "" ""
|-CXXMethodDecl 0x55d6b70ed7c8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55d6b70ed868 <col:44> "" ""
|-AccessSpecDecl 0x55d6b70ed8d8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55d6b70ed900 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55d6b70eda00 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55d6b70eda50 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70ed9e0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55d6b70ed9c0 <col:27> 'int' 4
|-FieldDecl 0x55d6b70edb08 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55d6b70edcb8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55d6b70edd70 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55d6b70eee00 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55d6b70eee68 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55d6b70eefb8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55d6b70eeef8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55d6b70ef168 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55d6b70ef078 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55d6b70ef348 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55d6b70ef228 <col:20> col:23 'int'
| `-ParmVarDecl 0x55d6b70ef2a8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55d6b70ef5f0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b70ef410 <col:23> col:26 'int'
| |-ParmVarDecl 0x55d6b70ef490 <col:28> col:31 'int'
| `-ParmVarDecl 0x55d6b70ef508 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55d6b70ef6a8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55d6b70ef770 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55d6b70ef7c0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55d6b70ef810 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55d6b70ef9f0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55d6b70ef8a0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55d6b70ef918 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70efc98 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55d6b70efab8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55d6b70efb38 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55d6b70efbb0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70efeb8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55d6b70efd68 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55d6b70efde8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55d6b70f01f0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55d6b70eff78 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55d6b70efff8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55d6b70f0070 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55d6b70f00f0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55d6b70f03d8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d6b70f02c0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55d6b70f0340 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55d6b70f0528 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55d6b70f0498 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55d6b70f08a8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55d6b70f05e8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55d6b70f0668 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55d6b70f06e0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55d6b70f0760 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55d6b70f09c0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class GapRate
         0 |   unsigned int _ugap
         4 |   int _sec_count
         8 |   class Timestamp::seconds_type _tv_sec
        12 |   unsigned int _rate
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class FastUDPFlows
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _rate_limited
       112 |   unsigned int _len
       116 |   struct click_ether _ethh
       116 |     uint8_t [6] ether_dhost
       122 |     uint8_t [6] ether_shost
       128 |     uint16_t ether_type
       132 |   struct in_addr _sipaddr
       132 |     in_addr_t s_addr
       136 |   struct in_addr _dipaddr
       136 |     in_addr_t s_addr
       140 |   unsigned int _nflows
       144 |   unsigned int _last_flow
       148 |   unsigned int _flowsize
       152 |   _Bool _cksum
       156 |   click_jiffies_t _first
       160 |   click_jiffies_t _last
       168 |   struct FastUDPFlows::flow_t * _flows
       176 |   class GapRate _rate
       176 |     unsigned int _ugap
       180 |     int _sec_count
       184 |     class Timestamp::seconds_type _tv_sec
       188 |     unsigned int _rate
       192 |   unsigned int _count
       196 |   unsigned int _limit
       200 |   _Bool _active
           | [sizeof=208, dsize=201, align=8,
           |  nvsize=201, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b70fd1b0 prev 0x55d6b70a6170 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x55d6b70fd578 <line:21:18>
|-CXXRecordDecl 0x55d6b70fd2a8 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x55d6b70fd418 <line:18:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x55d6b70fd4c8 <line:19:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x55d6b70fd528 <line:20:5, col:14> col:14 ether_type 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55d6b71dce38 <line:17:8> col:8 implicit used click_ether 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6b71dd268 <col:8>
|-CXXConstructorDecl 0x55d6b71dcf38 <col:8> col:8 implicit constexpr click_ether 'void (const click_ether &)' inline default trivial noexcept-unevaluated 0x55d6b71dcf38
| `-ParmVarDecl 0x55d6b71dd048 <col:8> col:8 'const click_ether &'
`-CXXConstructorDecl 0x55d6b71dd0e8 <col:8> col:8 implicit constexpr click_ether 'void (click_ether &&)' inline default trivial noexcept-unevaluated 0x55d6b71dd0e8
  `-ParmVarDecl 0x55d6b71dd1f8 <col:8> col:8 'click_ether &&'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b6da4928 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b6da4a48 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55d6b6da4b10 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55d6b6ee4d70 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6b6ee9c68 <col:8>
|-CXXConstructorDecl 0x55d6b6ee4e78 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55d6b6ee4e78
| `-ParmVarDecl 0x55d6b6ee4f88 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55d6b6ee5028 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b6ee5138 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55d6b6da4b10 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d6b6ee9e80 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55d6b6ee9e50 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55d6b6da4b10
| |     `-CXXStaticCastExpr 0x55d6b6ee9e20 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55d6b6ee9df0 <col:8> 'in_addr' lvalue ParmVar 0x55d6b6ee5138 '' 'in_addr &&'
| `-CompoundStmt 0x55d6b6ee9ec8 <col:8>
`-CXXDestructorDecl 0x55d6b6eea100 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct FastUDPFlows::flow_t
         0 |   class Packet * packet
         8 |   unsigned int flow_count
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b6ea3688 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b6ea37a8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55d6b6ea3838 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55d6b6ea3908 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55d6b6ea39f0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b6ea3c08 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d6b6ea3ab0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b6ea3db8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d6b6ea3cc0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d6b6ea3f00 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d6b6ea3e70 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d6b6ea4048 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d6b6ea3fb8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b6ea4190 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d6b6ea4100 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b6ea4258 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55d6b6ea43a0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55d6b6ea4310 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d6b6ea4468 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55d6b6ea45b0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55d6b6ea4520 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d6b6ea4728 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d6b6ea4668 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b6ea4870 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d6b6ea47e0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b6ea4938 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55d6b6ea4af8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d6b6ea49e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d6b6ea4a60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b6ea4d48 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d6b6ea4bb8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6b6ea4c30 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6b6ea4df8 <col:86> "" ""
|-CXXMethodDecl 0x55d6b6ea5068 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55d6b6ea4ed8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55d6b6ea4f50 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b6ea5218 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d6b6ea5128 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d6b6ea53c8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d6b6ea52d0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d6b6ea5698 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d6b6ea5480 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d6b6ea54f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d6b6ea5570 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b6ea5978 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d6b6ea5760 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d6b6ea57d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6b6ea5850 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6b6ea5a30 <col:115> "" ""
|-AccessSpecDecl 0x55d6b6ea5aa0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55d6b6ea5ad8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b6ea5f88 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d6b6ea5f88
| `-ParmVarDecl 0x55d6b6ea6098 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55d6b6ea6138 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d6b6ea6138
| `-ParmVarDecl 0x55d6b6ea6248 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55d6b6edbb08 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6b70c9210 <col:7>
|-CXXConstructorDecl 0x55d6b6edbbe0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d6b6edbbe0
| `-ParmVarDecl 0x55d6b6edbcf8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55d6b6edbd68 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d6b6edbd68
| `-ParmVarDecl 0x55d6b6edbe78 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55d6b70cbc10 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b70b7db8 prev 0x55d6b70acfc0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b70b7eb0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55d6b70b7fa0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55d6b70b80c8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55d6b70b8248 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55d6b70b83c8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55d6b70b8548 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55d6b70c9378 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6b70c9be8 <col:11>
|-CXXDestructorDecl 0x55d6b70c9450 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d6b70c9588 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d6b70c9588
| `-ParmVarDecl 0x55d6b70c9698 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55d6b70c9738 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d6b70c9738
| `-ParmVarDecl 0x55d6b70c9848 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55d6b70cc608 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b70cc718 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55d6b70cc998 <col:11>
|   `-ReturnStmt 0x55d6b70cc988 <col:11>
|     `-UnaryOperator 0x55d6b70cc970 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b70cc960 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55d6b70cc788 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d6b70cc788
  `-ParmVarDecl 0x55d6b70cc898 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b70b85b0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b70b86c8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55d6b70b8768 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55d6b70b87d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55d6b70b8838 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55d6b70b88a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55d6b70b8900 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55d6b70b89c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55d6b70b8a20 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55d6b70b8a80 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55d6b70c9288 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55d6b70b8768 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55d6b70c9bf8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55d6b70c9c50 <col:12>
|-CXXConstructorDecl 0x55d6b70c98b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d6b70c98b8
| `-ParmVarDecl 0x55d6b70c99c8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55d6b70c9a68 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d6b70c9a68
| `-ParmVarDecl 0x55d6b70c9b78 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55d6b70cbcf0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b70a66d0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6b70a67e8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55d6b70a6878 <col:16, col:22> col:16 public
|-EnumDecl 0x55d6b70a68a0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55d6b70a69a0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55d6b70a6a80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70a6980 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55d6b70a6960 <col:21> 'int' 28
| `-EnumConstantDecl 0x55d6b70a6a30 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55d6b70a6a98 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70a6a10 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55d6b70a69f0 <col:22> 'int' 64
|-CXXMethodDecl 0x55d6b70a6dd8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55d6b70a6ac0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6b70a6b40 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55d6b70a6bb8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6b70a6c30 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6b70a6e98 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a7098 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55d6b70a6f10 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55d6b70a6f88 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6b70a7148 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a72a8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55d6b70a71b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6b70a7350 <col:72> warn_unused_result ""
|-TypedefDecl 0x55d6b70a76b0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55d6b70a7640 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55d6b70a75e0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55d6b70a75a0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55d6b6b7d2d0 'void'
|       |-PointerType 0x55d6b6db6050 'unsigned char *'
|       | `-BuiltinType 0x55d6b6b7d3d0 'unsigned char'
|       |-TypedefType 0x55d6b6c22e90 'size_t' sugar
|       | |-Typedef 0x55d6b6bedb20 'size_t'
|       | `-BuiltinType 0x55d6b6b7d430 'unsigned long'
|       `-PointerType 0x55d6b6b7dad0 'void *'
|         `-BuiltinType 0x55d6b6b7d2d0 'void'
|-CXXMethodDecl 0x55d6b70a7b28 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55d6b70a7720 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55d6b70a7798 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6b70a7830 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55d6b70a78b0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55d6b70c2220 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55d6b70c2208 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55d6b70c21d0 <col:58> 'int' 0
| |-ParmVarDecl 0x55d6b70a7930 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55d6b70c2248 <col:76> 'int' 0
| |-ParmVarDecl 0x55d6b70a79b0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55d6b70c2268 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55d6b70a7bf8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a7c78 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55d6b70a7d38 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55d6b70a7dd8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70a7e30 <col:30>
|-CXXMethodDecl 0x55d6b70a7ea8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55d6b70a7f48 <col:20>
| `-OptimizeNoneAttr 0x55d6b70a7fa0 <col:30>
|-CXXMethodDecl 0x55d6b70a8018 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55d6b70a80b8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a8168 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55d6b70a8208 <col:20>
| |-OptimizeNoneAttr 0x55d6b70a8260 <col:30>
| `-WarnUnusedResultAttr 0x55d6b70a8288 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a82e0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d6b70a8380 <col:20>
| `-OptimizeNoneAttr 0x55d6b70a83d8 <col:30>
|-CXXMethodDecl 0x55d6b70a8428 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d6b70a84c8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70a8520 <col:30>
|-CXXMethodDecl 0x55d6b70a8568 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55d6b70a8608 <col:20>
| `-OptimizeNoneAttr 0x55d6b70a8660 <col:30>
|-CXXMethodDecl 0x55d6b70a86a8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b70a8768 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b70a8830 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d6b70a88f8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d6b70a89b8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b70a8ad8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55d6b70c2330 <col:54, line:99:5>
|   `-ReturnStmt 0x55d6b70c2320 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55d6b70c2308 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55d6b70c22d8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d6b70b8db8
|         `-CXXThisExpr 0x55d6b70c22c8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d6b70a8c78 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55d6b70a8b88 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55d6b70c23e0 <col:67, line:103:5>
|   `-BinaryOperator 0x55d6b70c23c0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d6b70c2358 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d6b70b8db8
|     | `-CXXThisExpr 0x55d6b70c2348 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d6b70c23a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b70c2388 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55d6b70a8b88 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55d6b70a8d70 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55d6b70c2460 <col:33, line:107:5>
|   `-ReturnStmt 0x55d6b70c2450 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55d6b70c2438 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55d6b70c2408 <col:16> 'void *' lvalue ->_destructor_argument 0x55d6b70b8e20
|         `-CXXThisExpr 0x55d6b70c23f8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d6b70a8e30 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55d6b70c2a90 <col:25, line:113:5>
|   |-ParenExpr 0x55d6b70c27d8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55d6b70c27a8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c2518 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d6b70c24f0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55d6b70c24b8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55d6b70c2488 <col:24> '<bound member function type>' ->shared 0x55d6b70a7ea8
|   |   |       `-ImplicitCastExpr 0x55d6b70c24d8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55d6b70c2478 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d6b70c2578 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c2558 <col:42> 'int' 0
|   |   `-CallExpr 0x55d6b70c2708 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c26f0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c26d0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c2748 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c25e8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55d6b70c2760 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c2610 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c2778 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c2648 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55d6b70c2790 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c26b8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c26a0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c2668 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55d6b70c29d8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55d6b70c2808 <col:2> 'unsigned char *' lvalue ->_head 0x55d6b70b8bc0
|   | | `-CXXThisExpr 0x55d6b70c27f8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55d6b70c29c0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55d6b70c29a0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55d6b70c2848 <col:10> 'unsigned char *' lvalue ->_data 0x55d6b70b8c28
|   |     | `-CXXThisExpr 0x55d6b70c2838 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55d6b70c2988 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55d6b70c2968 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55d6b70c2888 <col:18> 'unsigned char *' lvalue ->_tail 0x55d6b70b8c90
|   |         | `-CXXThisExpr 0x55d6b70c2878 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55d6b70c2950 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55d6b70c2930 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55d6b70c28c8 <col:26> 'unsigned char *' lvalue ->_end 0x55d6b70b8cf8
|   |             | `-CXXThisExpr 0x55d6b70c28b8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55d6b70c2918 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55d6b70c28f8 <col:33> 'int' 0
|   `-BinaryOperator 0x55d6b70c2a70 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d6b70c2a08 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d6b70b8db8
|     | `-CXXThisExpr 0x55d6b70c29f8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d6b70c2a58 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55d6b70c2a38 <col:16> 'int' 0
|-CXXMethodDecl 0x55d6b70a8f70 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d6b70a8ee0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6b70a9018 <col:20>
| |-OptimizeNoneAttr 0x55d6b70a9070 <col:30>
| `-WarnUnusedResultAttr 0x55d6b70a9098 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a9168 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d6b70a90d8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6b70a9210 <col:20>
| |-OptimizeNoneAttr 0x55d6b70a9268 <col:30>
| `-WarnUnusedResultAttr 0x55d6b70a9290 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a93c8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d6b70a92d0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6b70a9470 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a9570 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55d6b70a94e0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6b70a9618 <col:20>
| `-OptimizeNoneAttr 0x55d6b70a9670 <col:30>
|-CXXMethodDecl 0x55d6b70a9738 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d6b70a96a8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6b70a97e0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a98e0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d6b70a9850 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6b70a9988 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a9a88 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55d6b70a99f8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6b70a9b30 <col:20>
| `-OptimizeNoneAttr 0x55d6b70a9b88 <col:30>
|-CXXMethodDecl 0x55d6b70a9d18 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55d6b70a9bc8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55d6b70a9c40 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55d6b70c2288 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55d6b70a9dc8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55d6b70a9fc8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d6b70a9e40 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55d6b70a9eb8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b70aa1d8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d6b70aa088 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d6b70aa100 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b70aa3e8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55d6b70aa298 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55d6b70aa318 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55d6b70c2298 <col:39> 'int' 0
|-CXXMethodDecl 0x55d6b70aa4b8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55d6b70aa580 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d6b70aa648 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d6b70aa708 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b70aa7d0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55d6b70aa918 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55d6b70aa888 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55d6b70aaae8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d6b70aa9d8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55d6b70aaa50 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b70aabb8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55d6b70aac78 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55d6b70aad18 <col:20>
| `-OptimizeNoneAttr 0x55d6b70aad70 <col:30>
|-CXXMethodDecl 0x55d6b70aadc0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d6b70aae60 <col:20>
| `-OptimizeNoneAttr 0x55d6b70aaeb8 <col:30>
|-CXXMethodDecl 0x55d6b70aaf08 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d6b70aafc8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b70ab090 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55d6b70ab130 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ab188 <col:30>
|-CXXMethodDecl 0x55d6b70ab2d8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d6b70ab1c8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55d6b70ab240 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b70ab428 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55d6b70ab398 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b70ab500 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55d6b70ab5c0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55d6b70ab660 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ab6b8 <col:30>
|-CXXMethodDecl 0x55d6b70ab708 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d6b70ab7a8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ab800 <col:30>
|-CXXMethodDecl 0x55d6b70ab850 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d6b70ab918 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55d6b70ab9b8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70aba10 <col:30>
|-CXXMethodDecl 0x55d6b70aba58 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55d6b70abb78 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55d6b70abce8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55d6b70abc28 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55d6b70abdd8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55d6b70abe78 <col:20>
| `-OptimizeNoneAttr 0x55d6b70abed0 <col:30>
|-CXXMethodDecl 0x55d6b70abf20 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d6b70abfe0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b70ac218 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55d6b70ac090 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55d6b70ac108 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6b70ac2c8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ac320 <col:30>
|-CXXMethodDecl 0x55d6b70ac3c8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55d6b70ac468 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ac4c0 <col:30>
|-CXXMethodDecl 0x55d6b70ac510 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55d6b70ac5b0 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ac608 <col:30>
|-CXXMethodDecl 0x55d6b70ac650 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55d6b70ac6f0 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ac748 <col:30>
|-CXXMethodDecl 0x55d6b70ac848 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55d6b70ac780 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55d6b70ac8f0 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ac948 <col:30>
|-CXXMethodDecl 0x55d6b70acb08 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55d6b70ac980 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55d6b70ac9f8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6b70acbb8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70acc10 <col:30>
|-CXXMethodDecl 0x55d6b70accb8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55d6b70acdd8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55d6b70acef8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55d6b70acf98 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55d6b70acfc0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55d6b70ad0e8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55d6b70ad188 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ad1e0 <col:30>
|-CXXMethodDecl 0x55d6b70ad288 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55d6b70ad328 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ad380 <col:30>
|-AccessSpecDecl 0x55d6b70ad3a8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55d6b70ad3d0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55d6b70ad4d0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55d6b70ad520 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70ad4b0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55d6b70ad490 <col:14> 'int' 48
|-CXXMethodDecl 0x55d6b70ad588 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55d6b70ad628 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ad680 <col:30>
|-CXXMethodDecl 0x55d6b70ad6f8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55d6b70ad798 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ad7f0 <col:30>
|-CXXMethodDecl 0x55d6b70ad8b8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55d6b70ad828 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55d6b70ada58 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55d6b70adbf8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55d6b70adb08 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55d6b70adca0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55d6b70adda0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6b70ae150 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70add80 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6b70add60 <col:9> 'int' 0
| |-EnumConstantDecl 0x55d6b70ade30 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6b70ae168 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70ade10 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55d6b70addf0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55d6b70adec0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6b70ae180 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70adea0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55d6b70ade80 <col:14> 'int' 2
| |-EnumConstantDecl 0x55d6b70adf50 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6b70ae198 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70adf30 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55d6b70adf10 <col:14> 'int' 3
| |-EnumConstantDecl 0x55d6b70adfe0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6b70ae1b0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70adfc0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55d6b70adfa0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55d6b70ae070 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6b70ae1c8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70ae050 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55d6b70ae030 <col:13> 'int' 5
| `-EnumConstantDecl 0x55d6b70ae100 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55d6b70ae1e0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70ae0e0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55d6b70ae0c0 <col:14> 'int' 6
|-CXXMethodDecl 0x55d6b70ae248 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55d6b70ae2e8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ae340 <col:30>
|-CXXMethodDecl 0x55d6b70ae438 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55d6b70ae378 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55d6b70ae4e0 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ae538 <col:30>
|-CXXMethodDecl 0x55d6b70ae5a8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55d6b70ae6d0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55d6b70ae848 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55d6b70ae780 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55d6b70ae910 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55d6b70ae9d8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55d6b70aeb18 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55d6b70aea88 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55d6b70aebc0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55d6b70aecc0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d6b70aeec0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70aeca0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6b70aec80 <col:23> 'int' 0
| |-EnumConstantDecl 0x55d6b70aed50 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d6b70aeed8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70aed30 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55d6b70aed10 <col:45> 'int' 4
| |-EnumConstantDecl 0x55d6b70aede0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d6b70aeef0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70aedc0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6b70aeda0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55d6b70aee70 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55d6b70aef08 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70aee50 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55d6b70aee30 <col:47> 'int' 16
|-CXXMethodDecl 0x55d6b70aef68 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55d6b70af0d8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55d6b70af018 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55d6b70af180 <col:20>
| `-OptimizeNoneAttr 0x55d6b70af1d8 <col:30>
|-CXXMethodDecl 0x55d6b70af228 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55d6b70c2bb0 <col:18, col:36>
|   `-ReturnStmt 0x55d6b70c2ba0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55d6b70c2b88 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d6b70c2b68 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55d6b70c2b38 <col:27> '<bound member function type>' ->xanno 0x55d6b70ad288
|           `-CXXThisExpr 0x55d6b70c2b28 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55d6b70af320 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55d6b70c2cc0 <col:30, col:48>
|   `-ReturnStmt 0x55d6b70c2cb0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55d6b70c2c98 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d6b70c2c78 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55d6b70c2c48 <col:39> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|           `-CXXThisExpr 0x55d6b70c2c38 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d6b70af408 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55d6b70c2e58 <col:24, col:50>
|   `-ReturnStmt 0x55d6b70c2e48 <col:26, col:47>
|     `-UnaryOperator 0x55d6b70c2e30 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d6b70c2e10 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d6b70c2df8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6b70c2da8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55d6b70b80c8
|         |   `-CXXMemberCallExpr 0x55d6b70c2d88 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d6b70c2d58 <col:34> '<bound member function type>' ->xanno 0x55d6b70ad288
|         |       `-CXXThisExpr 0x55d6b70c2d48 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d6b70c2dd8 <col:46> 'int' 0
|-CXXMethodDecl 0x55d6b70af510 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55d6b70c3028 <col:36, col:62>
|   `-ReturnStmt 0x55d6b70c3018 <col:38, col:59>
|     `-UnaryOperator 0x55d6b70c3000 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d6b70c2fe0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d6b70c2fc8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6b70c2f40 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55d6b70b80c8
|         |   `-CXXMemberCallExpr 0x55d6b70c2f20 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d6b70c2ef0 <col:46> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|         |       `-CXXThisExpr 0x55d6b70c2ee0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d6b70c2f70 <col:58> 'int' 0
|-CXXMethodDecl 0x55d6b70af628 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55d6b70c31c0 <col:26, col:53>
|   `-ReturnStmt 0x55d6b70c31b0 <col:28, col:50>
|     `-UnaryOperator 0x55d6b70c3198 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d6b70c3178 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d6b70c3160 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6b70c3110 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55d6b70b83c8
|         |   `-CXXMemberCallExpr 0x55d6b70c30f0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d6b70c30c0 <col:36> '<bound member function type>' ->xanno 0x55d6b70ad288
|         |       `-CXXThisExpr 0x55d6b70c30b0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d6b70c3140 <col:49> 'int' 0
|-CXXMethodDecl 0x55d6b70af748 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55d6b70c3398 <col:38, col:65>
|   `-ReturnStmt 0x55d6b70c3388 <col:40, col:62>
|     `-UnaryOperator 0x55d6b70c3370 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d6b70c3350 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d6b70c3338 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6b70c32a8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55d6b70b83c8
|         |   `-CXXMemberCallExpr 0x55d6b70c3288 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d6b70c3258 <col:48> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|         |       `-CXXThisExpr 0x55d6b70c3248 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d6b70c32d8 <col:61> 'int' 0
|-CXXMethodDecl 0x55d6b70af8f8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55d6b70af800 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55d6b70c3a68 <col:34, line:463:5>
|   |-ParenExpr 0x55d6b70c38b0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d6b70c3880 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c34e8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c34b8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c3408 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c33f0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c33b0 <col:23> 'int' lvalue ParmVar 0x55d6b70af800 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c33d0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c3498 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c3468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c3428 <col:33> 'int' lvalue ParmVar 0x55d6b70af800 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d6b70c3480 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d6b70c3448 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d6b70c3548 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c3528 <col:56> 'int' 0
|   |   `-CallExpr 0x55d6b70c37e0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c37c8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c37a8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c3820 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c3638 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d6b70c3838 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c3668 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c3850 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c36a0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55d6b70c3868 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c3790 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c3778 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c3738 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55d6b70c3a58 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55d6b70c3a40 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55d6b70c3a20 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d6b70c39f0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6b70c39a0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55d6b70b80c8
|         |   `-CXXMemberCallExpr 0x55d6b70c3980 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d6b70c3950 <col:9> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|         |       `-CXXThisExpr 0x55d6b70c3940 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55d6b70c3a08 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55d6b70c39d0 <col:21> 'int' lvalue ParmVar 0x55d6b70af800 'i' 'int'
|-CXXMethodDecl 0x55d6b70afb48 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55d6b70af9b8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55d6b70afa30 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55d6b70c40f8 <col:40, line:472:5>
|   |-ParenExpr 0x55d6b70c3f10 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d6b70c3ee0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c3bc0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c3b90 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c3ae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c3ac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c3a88 <col:23> 'int' lvalue ParmVar 0x55d6b70af9b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c3aa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c3b70 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c3b40 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c3b00 <col:33> 'int' lvalue ParmVar 0x55d6b70af9b8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d6b70c3b58 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d6b70c3b20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d6b70c3c20 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c3c00 <col:56> 'int' 0
|   |   `-CallExpr 0x55d6b70c3e40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c3e28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c3e08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c3e80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c3c90 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d6b70c3e98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c3cc0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c3eb0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c3cf8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55d6b70c3ec8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c3df0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c3dd8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c3d98 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55d6b70c40d8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55d6b70c4080 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55d6b70c4050 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55d6b70c4000 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55d6b70b80c8
|     | |   `-CXXMemberCallExpr 0x55d6b70c3fe0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55d6b70c3fb0 <col:2> '<bound member function type>' ->xanno 0x55d6b70ad288
|     | |       `-CXXThisExpr 0x55d6b70c3fa0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55d6b70c4068 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d6b70c4030 <col:14> 'int' lvalue ParmVar 0x55d6b70af9b8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6b70c40c0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b70c40a0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55d6b70afa30 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55d6b70afd08 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55d6b70afc10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d6b70c4878 <col:36, line:485:5>
|   |-ParenExpr 0x55d6b70c45e0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6b70c45b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c4290 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c4260 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c4170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c4158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c4118 <col:23> 'int' lvalue ParmVar 0x55d6b70afc10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c4138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c4240 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c4228 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c4190 <col:33> 'int' lvalue ParmVar 0x55d6b70afc10 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c4208 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c41f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c41b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6b70c41d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d6b70c42f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c42d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6b70c4510 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c44f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c44d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c4550 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c4360 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d6b70c4568 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c4398 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c4580 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c43d0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55d6b70c4598 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c44c0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c44a8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c4468 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55d6b70c4868 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55d6b70c4850 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55d6b70c4838 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6b70c4808 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55d6b70c47a8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6b70c4778 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6b70c46f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d6b70b7fa0
|             |   `-CXXMemberCallExpr 0x55d6b70c46d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6b70c46a0 <col:61> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|             |       `-CXXThisExpr 0x55d6b70c4690 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6b70c4790 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6b70c4720 <col:74> 'int' lvalue ParmVar 0x55d6b70afc10 'i' 'int'
|-CXXMethodDecl 0x55d6b70aff58 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55d6b70afdc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6b70afe40 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d6b70c4fc8 <col:42, line:500:5>
|   |-ParenExpr 0x55d6b70c4d60 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6b70c4d30 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c4a10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c49e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c48f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c48d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c4898 <col:23> 'int' lvalue ParmVar 0x55d6b70afdc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c48b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c49c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c49a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c4910 <col:33> 'int' lvalue ParmVar 0x55d6b70afdc8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c4988 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c4970 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c4930 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6b70c4950 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d6b70c4a70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c4a50 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6b70c4c90 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c4c78 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c4c58 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c4cd0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c4ae0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d6b70c4ce8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c4b18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c4d00 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c4b50 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55d6b70c4d18 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c4c40 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c4c28 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c4be8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55d6b70c4fa8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55d6b70c4f58 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6b70c4f28 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6b70c4ed0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6b70c4ea0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6b70c4e50 <col:48, col:57> 'char [48]' lvalue ->c 0x55d6b70b7fa0
|     |     |   `-CXXMemberCallExpr 0x55d6b70c4e30 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6b70c4e00 <col:48> '<bound member function type>' ->xanno 0x55d6b70ad288
|     |     |       `-CXXThisExpr 0x55d6b70c4df0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6b70c4eb8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6b70c4e80 <col:61> 'int' lvalue ParmVar 0x55d6b70afdc8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6b70c4f90 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b70c4f70 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d6b70afe40 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55d6b70b0118 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55d6b70b0020 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d6b70c5728 <col:35, line:513:5>
|   |-ParenExpr 0x55d6b70c5438 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6b70c5408 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c5160 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c5130 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c5040 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c5028 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c4fe8 <col:23> 'int' lvalue ParmVar 0x55d6b70b0020 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c5008 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c5110 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c50f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c5060 <col:33> 'int' lvalue ParmVar 0x55d6b70b0020 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c50d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c50c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c5080 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6b70c50a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d6b70c51c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c51a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6b70c5368 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c5350 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c5330 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c53a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c5230 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d6b70c53c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c5268 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c53d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c52a0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55d6b70c53f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c5318 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c5300 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c52c0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55d6b70c5718 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55d6b70c5700 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55d6b70c56e8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6b70c56b8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55d6b70c5630 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6b70c5600 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6b70c55b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d6b70b7fa0
|             |   `-CXXMemberCallExpr 0x55d6b70c5590 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6b70c5560 <col:60> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|             |       `-CXXThisExpr 0x55d6b70c5550 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6b70c5618 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6b70c55e0 <col:73> 'int' lvalue ParmVar 0x55d6b70b0020 'i' 'int'
|-CXXMethodDecl 0x55d6b70b0368 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55d6b70b01d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6b70b0250 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55d6b70c5e48 <col:41, line:528:5>
|   |-ParenExpr 0x55d6b70c5bd0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6b70c5ba0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c58c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c5890 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c57a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c5788 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c5748 <col:23> 'int' lvalue ParmVar 0x55d6b70b01d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c5768 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c5870 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c5858 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c57c0 <col:33> 'int' lvalue ParmVar 0x55d6b70b01d8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c5838 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c5820 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c57e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6b70c5800 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d6b70c5920 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c5900 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6b70c5b00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c5ae8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c5ac8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c5b40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c5990 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d6b70c5b58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c59c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c5b70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c5a00 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55d6b70c5b88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c5ab0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c5a98 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c5a58 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55d6b70c5e28 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55d6b70c5dd8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6b70c5da8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6b70c5d50 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6b70c5d10 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6b70c5cc0 <col:47, col:56> 'char [48]' lvalue ->c 0x55d6b70b7fa0
|     |     |   `-CXXMemberCallExpr 0x55d6b70c5ca0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6b70c5c70 <col:47> '<bound member function type>' ->xanno 0x55d6b70ad288
|     |     |       `-CXXThisExpr 0x55d6b70c5c60 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6b70c5d28 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6b70c5cf0 <col:60> 'int' lvalue ParmVar 0x55d6b70b01d8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6b70c5e10 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b70c5df0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55d6b70b0250 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55d6b70b0528 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55d6b70b0430 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d6b70c6518 <col:36, line:541:5>
|   |-ParenExpr 0x55d6b70c62b8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6b70c6288 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c5fe0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c5fb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c5ec0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c5ea8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c5e68 <col:23> 'int' lvalue ParmVar 0x55d6b70b0430 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c5e88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c5f90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c5f78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c5ee0 <col:33> 'int' lvalue ParmVar 0x55d6b70b0430 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c5f58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c5f40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c5f00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6b70c5f20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d6b70c6040 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c6020 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6b70c61e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c61d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c61b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c6228 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c60b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d6b70c6240 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c60e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c6258 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c6120 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55d6b70c6270 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c6198 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c6180 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c6140 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55d6b70c6508 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55d6b70c64f0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55d6b70c64d8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6b70c64a8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55d6b70c6450 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6b70c6420 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6b70c63d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d6b70b7fa0
|             |   `-CXXMemberCallExpr 0x55d6b70c63b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6b70c6380 <col:61> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|             |       `-CXXThisExpr 0x55d6b70c6370 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6b70c6438 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6b70c6400 <col:74> 'int' lvalue ParmVar 0x55d6b70b0430 'i' 'int'
|-CXXMethodDecl 0x55d6b70b06f8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55d6b70b05e8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55d6b70b0660 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6b70b07a8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70b0800 <col:30>
|-CXXMethodDecl 0x55d6b70b0938 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55d6b70b0840 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d6b70c6be8 <col:35, line:562:5>
|   |-ParenExpr 0x55d6b70c6988 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6b70c6958 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c66b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c6680 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c6590 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c6578 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c6538 <col:23> 'int' lvalue ParmVar 0x55d6b70b0840 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c6558 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c6660 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c6648 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c65b0 <col:33> 'int' lvalue ParmVar 0x55d6b70b0840 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c6628 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c6610 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c65d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6b70c65f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d6b70c6710 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c66f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6b70c68b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c68a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c6880 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c68f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c6780 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d6b70c6910 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c67b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c6928 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c67f0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55d6b70c6940 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c6868 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c6850 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c6810 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55d6b70c6bd8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55d6b70c6bc0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55d6b70c6ba8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6b70c6b78 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55d6b70c6b20 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6b70c6af0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6b70c6aa0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d6b70b7fa0
|             |   `-CXXMemberCallExpr 0x55d6b70c6a80 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6b70c6a50 <col:60> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|             |       `-CXXThisExpr 0x55d6b70c6a40 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6b70c6b08 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6b70c6ad0 <col:73> 'int' lvalue ParmVar 0x55d6b70b0840 'i' 'int'
|-CXXMethodDecl 0x55d6b70b0b48 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55d6b70b09f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6b70b0a70 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55d6b70c72c8 <col:41, line:577:5>
|   |-ParenExpr 0x55d6b70c7058 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6b70c7028 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c6d80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c6d50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c6c60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c6c48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c6c08 <col:23> 'int' lvalue ParmVar 0x55d6b70b09f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c6c28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c6d30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c6d18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c6c80 <col:33> 'int' lvalue ParmVar 0x55d6b70b09f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c6cf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c6ce0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c6ca0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6b70c6cc0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d6b70c6de0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c6dc0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6b70c6f88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c6f70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c6f50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c6fc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c6e50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d6b70c6fe0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c6e88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c6ff8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c6ec0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55d6b70c7010 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c6f38 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c6f20 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c6ee0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55d6b70c72a8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55d6b70c7258 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6b70c7228 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6b70c71c8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6b70c7198 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6b70c7148 <col:47, col:56> 'char [48]' lvalue ->c 0x55d6b70b7fa0
|     |     |   `-CXXMemberCallExpr 0x55d6b70c7128 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6b70c70f8 <col:47> '<bound member function type>' ->xanno 0x55d6b70ad288
|     |     |       `-CXXThisExpr 0x55d6b70c70e8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6b70c71b0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6b70c7178 <col:60> 'int' lvalue ParmVar 0x55d6b70b09f8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6b70c7290 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b70c7270 <col:65> 'int32_t':'int' lvalue ParmVar 0x55d6b70b0a70 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55d6b70b0d08 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55d6b70b0c10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d6b70c79f8 <col:36, line:591:5>
|   |-ParenExpr 0x55d6b70c7738 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6b70c7708 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c7460 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c7430 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c7340 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c7328 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c72e8 <col:23> 'int' lvalue ParmVar 0x55d6b70b0c10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c7308 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c7410 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c73f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c7360 <col:33> 'int' lvalue ParmVar 0x55d6b70b0c10 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c73d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c73c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c7380 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6b70c73a0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d6b70c74c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c74a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6b70c7668 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c7650 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c7630 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c76a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c7530 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d6b70c76c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c7568 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c76d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c75a0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55d6b70c76f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c7618 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c7600 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c75c0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55d6b70c79e8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55d6b70c79d0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55d6b70c79b8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6b70c7988 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55d6b70c7900 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6b70c78d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6b70c7880 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d6b70b7fa0
|             |   `-CXXMemberCallExpr 0x55d6b70c7860 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6b70c7830 <col:61> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|             |       `-CXXThisExpr 0x55d6b70c7820 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6b70c78e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6b70c78b0 <col:74> 'int' lvalue ParmVar 0x55d6b70b0c10 'i' 'int'
|-CXXMethodDecl 0x55d6b70b0f58 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55d6b70b0dc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6b70b0e40 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55d6b70c80d8 <col:42, line:606:5>
|   |-ParenExpr 0x55d6b70c7e68 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6b70c7e38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c7b90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c7b60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c7a70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c7a58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c7a18 <col:23> 'int' lvalue ParmVar 0x55d6b70b0dc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c7a38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c7b40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6b70c7b28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c7a90 <col:33> 'int' lvalue ParmVar 0x55d6b70b0dc8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c7b08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c7af0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c7ab0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6b70c7ad0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d6b70c7bf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c7bd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6b70c7d98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c7d80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c7d60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c7dd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c7c60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d6b70c7df0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c7c98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c7e08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c7cd0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55d6b70c7e20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c7d48 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c7d30 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c7cf0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55d6b70c80b8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55d6b70c8068 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6b70c8038 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6b70c7fd8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6b70c7fa8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6b70c7f58 <col:48, col:57> 'char [48]' lvalue ->c 0x55d6b70b7fa0
|     |     |   `-CXXMemberCallExpr 0x55d6b70c7f38 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6b70c7f08 <col:48> '<bound member function type>' ->xanno 0x55d6b70ad288
|     |     |       `-CXXThisExpr 0x55d6b70c7ef8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6b70c7fc0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6b70c7f88 <col:61> 'int' lvalue ParmVar 0x55d6b70b0dc8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6b70c80a0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b70c8080 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55d6b70b0e40 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55d6b70b10f0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55d6b70b1020 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55d6b70c8948 <col:33, line:620:5>
|   |-ParenExpr 0x55d6b70c86c0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d6b70c8690 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c82e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c82b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c8150 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c8138 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c80f8 <col:23> 'int' lvalue ParmVar 0x55d6b70b1020 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c8118 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c8290 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d6b70c8278 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c8170 <col:33> 'int' lvalue ParmVar 0x55d6b70b1020 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c8258 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c8240 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c8190 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d6b70c8218 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d6b70c8200 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d6b70c81c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d6b70c8340 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c8320 <col:79> 'int' 0
|   |   `-CallExpr 0x55d6b70c85f0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c85d8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c85b8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c8630 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c8428 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d6b70c8648 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c8470 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c8660 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c84a8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55d6b70c8678 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c85a0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c8588 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c8548 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55d6b70c8938 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55d6b70c8920 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55d6b70c8908 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6b70c88d8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55d6b70c8850 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6b70c8820 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6b70c87d0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55d6b70b7fa0
|             |   `-CXXMemberCallExpr 0x55d6b70c87b0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6b70c8780 <col:67> '<bound member function type>' ->xanno 0x55d6b70ad0e8
|             |       `-CXXThisExpr 0x55d6b70c8770 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6b70c8838 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6b70c8800 <col:80> 'int' lvalue ParmVar 0x55d6b70b1020 'i' 'int'
|-CXXMethodDecl 0x55d6b70b1308 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55d6b70b11b0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6b70b1230 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55d6b70c9170 <col:45, line:635:5>
|   |-ParenExpr 0x55d6b70c8eb8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d6b70c8e88 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d6b70c8b50 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6b70c8b20 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6b70c89c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6b70c89a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6b70c8968 <col:23> 'int' lvalue ParmVar 0x55d6b70b11b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6b70c8988 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6b70c8b00 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d6b70c8ae8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6b70c89e0 <col:33> 'int' lvalue ParmVar 0x55d6b70b11b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6b70c8ac8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6b70c8ab0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6b70c8a00 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6b70ad4d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d6b70c8a88 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d6b70c8a70 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d6b70c8a38 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d6b70c8bb0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6b70c8b90 <col:79> 'int' 0
|   |   `-CallExpr 0x55d6b70c8de8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d6b70c8dd0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70c8db0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6b70c8e28 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c8c20 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d6b70c8e40 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6b70c8c68 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6b70c8e58 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6b70c8ca0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55d6b70c8e70 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6b70c8d98 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6b70c8d80 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6b70c8d38 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55d6b70c9150 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55d6b70c90b8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6b70c9088 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6b70c9028 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6b70c8ff8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6b70c8fa8 <col:54, col:63> 'char [48]' lvalue ->c 0x55d6b70b7fa0
|     |     |   `-CXXMemberCallExpr 0x55d6b70c8f88 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6b70c8f58 <col:54> '<bound member function type>' ->xanno 0x55d6b70ad288
|     |     |       `-CXXThisExpr 0x55d6b70c8f48 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6b70c9010 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6b70c8fd8 <col:67> 'int' lvalue ParmVar 0x55d6b70b11b0 'i' 'int'
|     `-CXXConstCastExpr 0x55d6b70c9120 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55d6b70c9108 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55d6b70c90d0 <col:91> 'const void *' lvalue ParmVar 0x55d6b70b1230 'x' 'const void *'
|-CXXMethodDecl 0x55d6b70b13d8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55d6b70c91f8 <col:34, line:640:5>
|   `-ReturnStmt 0x55d6b70c91e8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55d6b70c91d0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55d6b70c91a0 <col:16> 'Packet *' lvalue ->_data_packet 0x55d6b70b8b58
|         `-CXXThisExpr 0x55d6b70c9190 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d6b70b1518 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55d6b70b1488 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6b70c22b8 <col:46> 'bool' true
|-CXXMethodDecl 0x55d6b70b1698 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55d6b70b15d0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55d6b70b1740 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55d6b70b1ef0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55d6b70b1840 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b1f60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b1820 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55d6b70b1800 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d6b70a69a0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d6b70b18d0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b1f78 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b18b0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55d6b70b1890 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d6b70a6a30 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d6b70b1960 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b1f90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b1940 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6b70b1920 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d6b70b19f0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b1fa8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b19d0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55d6b70b19b0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55d6b70b1a80 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b1fc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b1a60 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55d6b70b1a40 <col:21> 'int' 16
| |-EnumConstantDecl 0x55d6b70b1b10 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b1fd8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b1af0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55d6b70b1ad0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55d6b70b1ba0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b1ff0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b1b80 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55d6b70b1b60 <col:19> 'int' EnumConstant 0x55d6b70b19f0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d6b70b1c30 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b2008 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b1c10 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55d6b70b1bf0 <col:19> 'int' EnumConstant 0x55d6b70b1b10 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d6b70b1d00 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b2020 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b1ce0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55d6b70b1cc0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d6b70b1c80 <col:23> 'int' EnumConstant 0x55d6b70b1c30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d6b70b1ca0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d6b70b1dd0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6b70b2038 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70b1db0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55d6b70b1d90 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d6b70b1d50 <col:23> 'int' EnumConstant 0x55d6b70b1c30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d6b70b1d70 <col:40> 'int' 4
| `-EnumConstantDecl 0x55d6b70b1ea0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55d6b70b2050 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70b1e80 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55d6b70b1e60 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55d6b70b1e20 <col:23> 'int' EnumConstant 0x55d6b70b1c30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55d6b70b1e40 <col:40> 'int' 8
|-CXXMethodDecl 0x55d6b70b2090 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55d6b70b2130 <col:68> "" ""
|-CXXMethodDecl 0x55d6b70b21c8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55d6b70b2268 <col:45> "" ""
|-CXXMethodDecl 0x55d6b70b2300 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d6b70b23a0 <col:57> "" ""
|-CXXMethodDecl 0x55d6b70b2438 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55d6b70b24d8 <col:45> "" ""
|-CXXMethodDecl 0x55d6b70b2570 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d6b70b2610 <col:57> "" ""
|-CXXMethodDecl 0x55d6b70b26a0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d6b70b2740 <col:51> "" ""
|-CXXMethodDecl 0x55d6b70b27d0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d6b70b2870 <col:63> "" ""
|-CXXMethodDecl 0x55d6b70b2900 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d6b70b29a0 <col:53> "" ""
|-CXXMethodDecl 0x55d6b70b2a30 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d6b70b2ad0 <col:65> "" ""
|-CXXMethodDecl 0x55d6b70b2be8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b2b58 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55d6b70b2c90 <col:61> "" ""
|-CXXMethodDecl 0x55d6b70b2e28 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d6b70b2d18 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55d6b70b2d90 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d6b70b2ed8 <col:67> "" ""
|-CXXMethodDecl 0x55d6b70b2ff0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b2f60 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d6b70b3098 <col:63> "" ""
|-CXXMethodDecl 0x55d6b70b3230 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d6b70b3120 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d6b70b3198 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d6b70b32e0 <col:69> "" ""
|-CXXMethodDecl 0x55d6b70b33f8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b3368 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d6b70b34a0 <col:63> "" ""
|-CXXMethodDecl 0x55d6b70b5b78 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d6b70b5a68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d6b70b5ae0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6b70b5c28 <col:69> "" ""
|-CXXMethodDecl 0x55d6b70b5d40 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b5cb0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55d6b70b5de8 <col:62> "" ""
|-CXXMethodDecl 0x55d6b70b5f80 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d6b70b5e70 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d6b70b5ee8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55d6b70b6030 <col:68> "" ""
|-CXXMethodDecl 0x55d6b70b6148 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b60b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d6b70b61f0 <col:63> "" ""
|-CXXMethodDecl 0x55d6b70b6388 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55d6b70b6278 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d6b70b62f0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55d6b70b6438 <col:69> "" ""
|-CXXMethodDecl 0x55d6b70b64c8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d6b70b6568 <col:64> "" ""
|-CXXMethodDecl 0x55d6b70b65f8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d6b70b6698 <col:52> "" ""
|-CXXMethodDecl 0x55d6b70b6728 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d6b70b67c8 <col:67> "" ""
|-CXXMethodDecl 0x55d6b70b6858 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d6b70b68f8 <col:55> "" ""
|-CXXMethodDecl 0x55d6b70b6a10 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b6980 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d6b70b6ab8 <col:58> "" ""
|-CXXMethodDecl 0x55d6b70b6c50 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d6b70b6b40 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d6b70b6bb8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d6b70b6d00 <col:62> "" ""
|-CXXMethodDecl 0x55d6b70b6e18 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b6d88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d6b70b6ec0 <col:58> "" ""
|-CXXMethodDecl 0x55d6b70b7058 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55d6b70b6f48 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d6b70b6fc0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55d6b70b7108 <col:62> "" ""
|-CXXMethodDecl 0x55d6b70b7220 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b7190 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55d6b70b72c8 <col:60> "" ""
|-CXXMethodDecl 0x55d6b70b7460 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d6b70b7350 <col:34> col:37 'int'
| |-ParmVarDecl 0x55d6b70b73c8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d6b70b7510 <col:64> "" ""
|-CXXMethodDecl 0x55d6b70b7628 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b7598 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d6b70b76d0 <col:58> "" ""
|-CXXMethodDecl 0x55d6b70b7868 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d6b70b7758 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d6b70b77d0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55d6b70b7918 <col:62> "" ""
|-CXXMethodDecl 0x55d6b70b7a30 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d6b70b79a0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55d6b70b7ad8 <col:59> "" ""
|-CXXMethodDecl 0x55d6b70b7c70 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d6b70b7b60 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d6b70b7bd8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6b70b7d20 <col:63> "" ""
|-AccessSpecDecl 0x55d6b70b7d90 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55d6b70b7db8 prev 0x55d6b70acfc0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d6b70b7eb0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55d6b70b7fa0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55d6b70b80c8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55d6b70b8248 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55d6b70b83c8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55d6b70b8548 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55d6b70c9378 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d6b70c9be8 <col:11>
| |-CXXDestructorDecl 0x55d6b70c9450 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55d6b70c9588 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d6b70c9588
| | `-ParmVarDecl 0x55d6b70c9698 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55d6b70c9738 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d6b70c9738
| | `-ParmVarDecl 0x55d6b70c9848 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55d6b70cc608 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d6b70cc718 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55d6b70cc998 <col:11>
| |   `-ReturnStmt 0x55d6b70cc988 <col:11>
| |     `-UnaryOperator 0x55d6b70cc970 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d6b70cc960 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55d6b70cc788 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d6b70cc788
|   `-ParmVarDecl 0x55d6b70cc898 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55d6b70b85b0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d6b70b86c8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55d6b70b8768 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55d6b70b87d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55d6b70b8838 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55d6b70b88a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55d6b70b8900 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55d6b70b89c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55d6b70b8a20 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55d6b70b8a80 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55d6b70c9288 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55d6b70b8768 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55d6b70c9bf8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55d6b70c9c50 <col:12>
| |-CXXConstructorDecl 0x55d6b70c98b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d6b70c98b8
| | `-ParmVarDecl 0x55d6b70c99c8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55d6b70c9a68 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d6b70c9a68
| | `-ParmVarDecl 0x55d6b70c9b78 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55d6b70cbcf0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55d6b70b8af8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55d6b70b8b58 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55d6b70b8bc0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55d6b70b8c28 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55d6b70b8c90 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55d6b70b8cf8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55d6b70b8d58 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55d6b70b8db8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55d6b70b8e20 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55d6b70b8ea8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55d6b70b8af8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55d6b70c9220 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55d6b70b8d58 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55d6b70c9c60 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55d6b70c9cc0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55d6b70b9048 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55d6b70b8f88 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55d6b70b9140 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55d6b70b9328 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55d6b70b9230 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55d6b70b95f8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55d6b70b93e0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6b70b9458 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d6b70b94d0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b70b9818 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55d6b70b96c8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55d6b70b9740 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55d6b70c1df8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55d6b70b98d8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55d6b70b9950 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55d6b70b99c8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55d6b70c1f50 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d6b70c1ec0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b70c2098 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d6b70c2008 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55d6b70c2190 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b7060c58 <../elements/tcpudp/fastudpflows.hh:73:3, line:76:3> line:73:10 referenced struct flow_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d6b7060d78 <col:3, col:10> col:10 implicit struct flow_t
|-FieldDecl 0x55d6b7060e18 <line:74:7, col:15> col:15 packet 'Packet *'
`-FieldDecl 0x55d6b7060e80 <line:75:7, col:16> col:16 flow_count 'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%"struct.FastUDPFlows::flow_t" = type { %class.Packet*, i32 }
  NonVirtualBaseLLVMType:%"struct.FastUDPFlows::flow_t" = type { %class.Packet*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b70f8198 <../dummy_inc/click/gaprate.hh:45:1, line:124:1> line:45:7 referenced class GapRate definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d6b70f82b8 <col:1, col:7> col:7 implicit referenced class GapRate
|-AccessSpecDecl 0x55d6b70f8348 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55d6b70f83d0 <line:48:5, col:20> col:12 used GapRate 'void ()' inline
|-CXXConstructorDecl 0x55d6b70f8520 <line:52:5, col:30> col:12 GapRate 'void (unsigned int)' inline
| `-ParmVarDecl 0x55d6b70f8490 <col:20, col:29> col:29 r 'unsigned int'
|-CXXMethodDecl 0x55d6b70f8620 <line:55:5, col:28> col:21 rate 'unsigned int () const' inline
|-CXXMethodDecl 0x55d6b70f8768 <line:62:5, col:36> col:17 set_rate 'void (unsigned int)' inline
| `-ParmVarDecl 0x55d6b70f86d8 <col:26, col:35> col:35 r 'unsigned int'
|-CXXMethodDecl 0x55d6b70f8978 <line:70:5, col:49> col:10 set_rate 'void (unsigned int, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b70f8828 <col:19, col:28> col:28 r 'unsigned int'
| `-ParmVarDecl 0x55d6b70f88a0 <col:31, col:45> col:45 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70f8af8 <line:78:5, col:48> col:17 need_update 'bool (const Timestamp &)' inline
| `-ParmVarDecl 0x55d6b70f8a38 <col:29, col:46> col:46 ts 'const Timestamp &'
|-CXXMethodDecl 0x55d6b70f8bc0 <line:88:5, col:31> col:22 expiry 'Timestamp () const' inline
|-CXXMethodDecl 0x55d6b70f8c80 <line:93:5, col:24> col:17 update 'void ()' inline
|-CXXMethodDecl 0x55d6b70f8dc8 <line:100:5, col:38> col:17 update_with 'void (int)' inline
| `-ParmVarDecl 0x55d6b70f8d38 <col:29, col:33> col:33 delta 'int'
|-CXXMethodDecl 0x55d6b70f8e90 <line:106:5, col:23> col:17 used reset 'void ()' inline
|-EnumDecl 0x55d6b70f8f30 <line:109:5, col:28> col:5
| `-EnumConstantDecl 0x55d6b70f9030 <col:12, col:25> col:12 referenced UGAP_SHIFT 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)'
|   `-ImplicitCastExpr 0x55d6b70f9080 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70f9010 <col:25> 'int' Int: 12
|       `-IntegerLiteral 0x55d6b70f8ff0 <col:25> 'int' 12
|-EnumDecl 0x55d6b70f9098 <line:110:5, col:46> col:5
| `-EnumConstantDecl 0x55d6b70f91f8 <col:12, col:35> col:12 referenced MAX_RATE 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:110:5)'
|   `-ConstantExpr 0x55d6b70f91d8 <col:23, col:35> 'unsigned int' Int: 4096000000
|     `-BinaryOperator 0x55d6b70f91b8 <col:23, col:35> 'unsigned int' '<<'
|       |-IntegerLiteral 0x55d6b70f9160 <col:23> 'unsigned int' 1000000
|       `-ImplicitCastExpr 0x55d6b70f91a0 <col:35> 'int' <IntegralCast>
|         `-DeclRefExpr 0x55d6b70f9180 <col:35> 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)' EnumConstant 0x55d6b70f9030 'UGAP_SHIFT' 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)'
|-AccessSpecDecl 0x55d6b70f9248 <line:112:3, col:10> col:3 private
|-FieldDecl 0x55d6b70f9288 <line:114:5, col:14> col:14 referenced _ugap 'unsigned int'
|-FieldDecl 0x55d6b70f92f0 <line:115:5, col:9> col:9 referenced _sec_count 'int'
|-FieldDecl 0x55d6b70f93a0 <line:116:5, col:29> col:29 referenced _tv_sec 'Timestamp::seconds_type':'int'
|-FieldDecl 0x55d6b70f9408 <line:117:5, col:14> col:14 referenced _rate 'unsigned int'
|-CXXMethodDecl 0x55d6b70f9500 <line:122:5, col:46> col:17 used initialize_rate 'void (unsigned int)' inline
| `-ParmVarDecl 0x55d6b70f9470 <col:33, col:42> col:42 rate 'unsigned int'
|-CXXConstructorDecl 0x55d6b70fa668 <line:45:7> col:7 implicit constexpr GapRate 'void (const GapRate &)' inline default trivial noexcept-unevaluated 0x55d6b70fa668
| `-ParmVarDecl 0x55d6b70fa778 <col:7> col:7 'const GapRate &'
`-CXXConstructorDecl 0x55d6b70fa818 <col:7> col:7 implicit constexpr GapRate 'void (GapRate &&)' inline default trivial noexcept-unevaluated 0x55d6b70fa818
  `-ParmVarDecl 0x55d6b70fa928 <col:7> col:7 'GapRate &&'

Layout: <CGRecordLayout
  LLVMType:%class.GapRate = type { i32, i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.GapRate = type { i32, i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b7060610 <../elements/tcpudp/fastudpflows.hh:59:1, line:118:1> line:59:7 class FastUDPFlows definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55d6b7060768 <col:1, col:7> col:7 implicit referenced class FastUDPFlows
|-FieldDecl 0x55d6b7060808 <line:61:3, col:8> col:8 referenced _rate_limited 'bool'
|-FieldDecl 0x55d6b7060870 <line:62:3, col:12> col:12 referenced _len 'unsigned int'
|-FieldDecl 0x55d6b70608d0 <line:63:3, col:15> col:15 _ethh 'click_ether'
|-FieldDecl 0x55d6b7060940 <line:64:3, col:18> col:18 _sipaddr 'struct in_addr':'in_addr'
|-FieldDecl 0x55d6b70609b0 <line:65:3, col:18> col:18 _dipaddr 'struct in_addr':'in_addr'
|-FieldDecl 0x55d6b7060a18 <line:66:3, col:16> col:16 _nflows 'unsigned int'
|-FieldDecl 0x55d6b7060a80 <line:67:3, col:16> col:16 _last_flow 'unsigned int'
|-FieldDecl 0x55d6b7060ae8 <line:68:3, col:16> col:16 _flowsize 'unsigned int'
|-FieldDecl 0x55d6b7060b48 <line:69:3, col:8> col:8 _cksum 'bool'
|-FieldDecl 0x55d6b7060ba8 <line:70:3, col:19> col:19 referenced _first 'click_jiffies_t':'unsigned int'
|-FieldDecl 0x55d6b7060c08 <line:71:3, col:19> col:19 referenced _last 'click_jiffies_t':'unsigned int'
|-CXXRecordDecl 0x55d6b7060c58 <line:73:3, line:76:3> line:73:10 referenced struct flow_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55d6b7060d78 <col:3, col:10> col:10 implicit struct flow_t
| |-FieldDecl 0x55d6b7060e18 <line:74:7, col:15> col:15 packet 'Packet *'
| `-FieldDecl 0x55d6b7060e80 <line:75:7, col:16> col:16 flow_count 'unsigned int'
|-FieldDecl 0x55d6b7060f28 <line:77:3, col:11> col:11 _flows 'FastUDPFlows::flow_t *'
|-CXXMethodDecl 0x55d6b7061050 <line:78:3, col:24> col:8 change_ports 'void (int)'
| `-ParmVarDecl 0x55d6b7060f90 <col:21> col:24 'int'
|-CXXMethodDecl 0x55d6b7061118 <line:79:3, col:22> col:11 get_packet 'Packet *()'
|-CXXMethodDecl 0x55d6b7061260 <line:81:3, line:87:3> line:81:8 set_length 'void (unsigned int)'
| |-ParmVarDecl 0x55d6b70611d0 <col:19, col:28> col:28 used len 'unsigned int'
| `-CompoundStmt 0x55d6b7062f58 <col:33, line:87:3>
|   |-IfStmt 0x55d6b7062ea8 <line:82:7, line:85:7>
|   | |-BinaryOperator 0x55d6b7062c48 <line:82:11, col:17> 'bool' '<'
|   | | |-ImplicitCastExpr 0x55d6b7062c18 <col:11> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55d6b7062bd8 <col:11> 'unsigned int' lvalue ParmVar 0x55d6b70611d0 'len' 'unsigned int'
|   | | `-ImplicitCastExpr 0x55d6b7062c30 <col:17> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x55d6b7062bf8 <col:17> 'int' 60
|   | `-CompoundStmt 0x55d6b7062e88 <col:21, line:85:7>
|   |   |-CallExpr 0x55d6b7062dd0 <line:83:11, col:72> 'void'
|   |   | |-ImplicitCastExpr 0x55d6b7062db8 <col:11> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x55d6b7062d70 <col:11> 'void (const char *, ...)' lvalue Function 0x55d6b6e33510 'click_chatter' 'void (const char *, ...)'
|   |   | `-ImplicitCastExpr 0x55d6b7062df8 <col:25> 'const char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55d6b7062d28 <col:25> 'const char [46]' lvalue "warning: packet length < 60, defaulting to 60"
|   |   `-BinaryOperator 0x55d6b7062e68 <line:84:11, col:17> 'unsigned int' lvalue '='
|   |     |-DeclRefExpr 0x55d6b7062e10 <col:11> 'unsigned int' lvalue ParmVar 0x55d6b70611d0 'len' 'unsigned int'
|   |     `-ImplicitCastExpr 0x55d6b7062e50 <col:17> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x55d6b7062e30 <col:17> 'int' 60
|   `-BinaryOperator 0x55d6b7062f38 <line:86:7, col:14> 'unsigned int' lvalue '='
|     |-MemberExpr 0x55d6b7062ed0 <col:7> 'unsigned int' lvalue ->_len 0x55d6b7060870
|     | `-CXXThisExpr 0x55d6b7062ec0 <col:7> 'FastUDPFlows *' implicit this
|     `-ImplicitCastExpr 0x55d6b7062f20 <col:14> 'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b7062f00 <col:14> 'unsigned int' lvalue ParmVar 0x55d6b70611d0 'len' 'unsigned int'
|-AccessSpecDecl 0x55d6b7061308 <line:89:2, col:8> col:2 public
|-VarDecl 0x55d6b7061348 <line:91:3, col:36> col:25 NO_LIMIT 'const unsigned int' static cinit
| `-IntegerLiteral 0x55d6b70613b0 <col:36> 'unsigned int' 4294967295
|-FieldDecl 0x55d6b7061438 <line:93:3, col:11> col:11 _rate 'GapRate'
|-FieldDecl 0x55d6b70614a0 <line:94:3, col:12> col:12 referenced _count 'unsigned int'
|-FieldDecl 0x55d6b7061508 <line:95:3, col:12> col:12 _limit 'unsigned int'
|-FieldDecl 0x55d6b7061568 <line:96:3, col:8> col:8 _active 'bool'
|-CXXConstructorDecl 0x55d6b70615f0 <line:98:3, col:16> col:3 FastUDPFlows 'void ()'
|-CXXDestructorDecl 0x55d6b70616e0 <line:99:3, col:17> col:3 ~FastUDPFlows 'void ()' noexcept-unevaluated 0x55d6b70616e0
| `-Overrides: [ 0x55d6b70df9f8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55d6b7061810 <line:101:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55d6b70e0e58 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55d6b7062fc8 <col:34, col:59>
|   `-ReturnStmt 0x55d6b7062fb8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55d6b7062fa0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55d6b7062f78 <col:43> 'const char [13]' lvalue "FastUDPFlows"
|-CXXMethodDecl 0x55d6b70618d8 <line:102:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55d6b70e0f20 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55d6b7063028 <col:34, col:54>
|   `-ReturnStmt 0x55d6b7063018 <col:36, col:43>
|     `-ImplicitCastExpr 0x55d6b7063000 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55d6b7062fe0 <col:43> 'const char []' lvalue Var 0x55d6b70e10c0 'PORTS_0_1' 'const char []'
|-CXXMethodDecl 0x55d6b70619a0 <line:103:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55d6b70e12e8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55d6b7063088 <col:34, col:49>
|   `-ReturnStmt 0x55d6b7063078 <col:36, col:43>
|     `-ImplicitCastExpr 0x55d6b7063060 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55d6b7063040 <col:43> 'const char []' lvalue Var 0x55d6b70e14b8 'PULL' 'const char []'
|-CXXMethodDecl 0x55d6b7061c70 <line:105:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55d6b70e26f0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55d6b7061b20 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55d6b7061b98 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b7061dc8 <line:106:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55d6b70e2940 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55d6b7061d30 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b7061f10 <line:107:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x55d6b70e3158 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x55d6b7061e80 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x55d6b7062060 <line:108:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x55d6b70dfe58 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55d6b7061fd0 <col:16> col:19 'int'
|-CXXMethodDecl 0x55d6b7062128 <line:110:3, col:22> col:8 cleanup_flows 'void ()'
|-CXXMethodDecl 0x55d6b70623f8 <line:111:3, col:91> col:14 length_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d6b70621d8 <col:36, col:50> col:50 s 'const String &'
| |-ParmVarDecl 0x55d6b7062250 <col:53, col:62> col:62 e 'Element *'
| |-ParmVarDecl 0x55d6b70622d0 <col:65, col:70> col:71 'void *'
| `-ParmVarDecl 0x55d6b7062348 <col:73, col:87> col:87 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b70624d8 <line:113:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55d6b70e27c0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55d6b7062598 <line:114:3, col:14> col:8 reset 'void ()'
|-CXXMethodDecl 0x55d6b7062660 <line:115:3, col:37> col:12 count 'unsigned int ()'
| `-CompoundStmt 0x55d6b7063108 <col:20, col:37>
|   `-ReturnStmt 0x55d6b70630f8 <col:22, col:29>
|     `-ImplicitCastExpr 0x55d6b70630e0 <col:29> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55d6b70630b0 <col:29> 'unsigned int' lvalue ->_count 0x55d6b70614a0
|         `-CXXThisExpr 0x55d6b70630a0 <col:29> 'FastUDPFlows *' implicit this
|-CXXMethodDecl 0x55d6b7062720 <line:116:3, col:44> col:19 first 'click_jiffies_t ()'
| `-CompoundStmt 0x55d6b7063188 <col:27, col:44>
|   `-ReturnStmt 0x55d6b7063178 <col:29, col:36>
|     `-ImplicitCastExpr 0x55d6b7063160 <col:36> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55d6b7063130 <col:36> 'click_jiffies_t':'unsigned int' lvalue ->_first 0x55d6b7060ba8
|         `-CXXThisExpr 0x55d6b7063120 <col:36> 'FastUDPFlows *' implicit this
|-CXXMethodDecl 0x55d6b70627e0 <line:117:3, col:42> col:19 last 'click_jiffies_t ()'
| `-CompoundStmt 0x55d6b7063208 <col:26, col:42>
|   `-ReturnStmt 0x55d6b70631f8 <col:28, col:35>
|     `-ImplicitCastExpr 0x55d6b70631e0 <col:35> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55d6b70631b0 <col:35> 'click_jiffies_t':'unsigned int' lvalue ->_last 0x55d6b7060c08
|         `-CXXThisExpr 0x55d6b70631a0 <col:35> 'FastUDPFlows *' implicit this
|-CXXConstructorDecl 0x55d6b70628a8 <line:59:7> col:7 implicit FastUDPFlows 'void (const FastUDPFlows &)' inline default_delete noexcept-unevaluated 0x55d6b70628a8
| `-ParmVarDecl 0x55d6b70629b8 <col:7> col:7 'const FastUDPFlows &'
`-CXXMethodDecl 0x55d6b7062a58 <col:7> col:7 implicit operator= 'FastUDPFlows &(const FastUDPFlows &)' inline default_delete noexcept-unevaluated 0x55d6b7062a58
  `-ParmVarDecl 0x55d6b7062b68 <col:7> col:7 'const FastUDPFlows &'

Layout: <CGRecordLayout
  LLVMType:%class.FastUDPFlows = type <{ %class.Element.base, i8, [3 x i8], i32, %struct.click_ether, [2 x i8], %struct.in_addr, %struct.in_addr, i32, i32, i32, i8, [3 x i8], i32, i32, [4 x i8], %"struct.FastUDPFlows::flow_t"*, %class.GapRate, i32, i32, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.FastUDPFlows.base = type <{ %class.Element.base, i8, [3 x i8], i32, %struct.click_ether, [2 x i8], %struct.in_addr, %struct.in_addr, i32, i32, i32, i8, [3 x i8], i32, i32, [4 x i8], %"struct.FastUDPFlows::flow_t"*, %class.GapRate, i32, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b6eb7f10 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d6b6eb8028 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55d6b6eb80c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55d6b6eb8128 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55d6b6eb8188 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55d6b6eb8238 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b6eb8540 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b6eb8658 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55d6b6eb8700 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55d6b6eb8768 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55d6b6eb87f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55d6b6ebad90 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6b6ebd3d8 <col:12>
|-CXXConstructorDecl 0x55d6b6ebae98 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b6ebafa8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d6b6eb8700 'data' 'const char *'
| | `-ImplicitCastExpr 0x55d6b6ebf960 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55d6b6ebf930 <col:12> 'const char *const' lvalue .data 0x55d6b6eb8700
| |     `-DeclRefExpr 0x55d6b6ebf910 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ebafa8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d6b6eb8768 'length' 'int'
| | `-ImplicitCastExpr 0x55d6b6ebf9f0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d6b6ebf9c0 <col:12> 'const int' lvalue .length 0x55d6b6eb8768
| |     `-DeclRefExpr 0x55d6b6ebf9a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ebafa8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d6b6eb87f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55d6b6ebfa80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55d6b6ebfa50 <col:12> 'String::memo_t *const' lvalue .memo 0x55d6b6eb87f8
| |     `-DeclRefExpr 0x55d6b6ebfa30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ebafa8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55d6b6ebfad8 <col:12>
|-CXXConstructorDecl 0x55d6b6ebd258 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6b6ebd258
| `-ParmVarDecl 0x55d6b6ebd368 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55d6b6ec4820 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d6b6ece228 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b6ece338 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55d6b6ece850 <col:12>
|   |-BinaryOperator 0x55d6b6ece668 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d6b6ece620 <col:12> 'const char *' lvalue ->data 0x55d6b6eb8700
|   | | `-CXXThisExpr 0x55d6b6ece610 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d6b6ece650 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55d6b6ece5e0 <col:12> 'const char *const' lvalue .data 0x55d6b6eb8700
|   |     `-DeclRefExpr 0x55d6b6ece5c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ece338 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d6b6ece730 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55d6b6ece6e8 <col:12> 'int' lvalue ->length 0x55d6b6eb8768
|   | | `-CXXThisExpr 0x55d6b6ece6d8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d6b6ece718 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55d6b6ece6a8 <col:12> 'const int' lvalue .length 0x55d6b6eb8768
|   |     `-DeclRefExpr 0x55d6b6ece688 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ece338 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d6b6ece7f8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55d6b6ece7b0 <col:12> 'String::memo_t *' lvalue ->memo 0x55d6b6eb87f8
|   | | `-CXXThisExpr 0x55d6b6ece7a0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d6b6ece7e0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55d6b6ece770 <col:12> 'String::memo_t *const' lvalue .memo 0x55d6b6eb87f8
|   |     `-DeclRefExpr 0x55d6b6ece750 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ece338 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55d6b6ece840 <col:12>
|     `-UnaryOperator 0x55d6b6ece828 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b6ece818 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55d6b6ece3a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6b6ece3a8
  `-ParmVarDecl 0x55d6b6ece4b8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b6eae380 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6b6eae498 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55d6b6eae528 <col:16, col:22> col:16 public
|-TypedefDecl 0x55d6b6eae568 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55d6b6b7ddc0 'const char *'
|   `-QualType 0x55d6b6b7d311 'const char' const
|     `-BuiltinType 0x55d6b6b7d310 'char'
|-TypedefDecl 0x55d6b6eae5f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55d6b6eae5c0 'String::const_iterator' sugar
|   |-Typedef 0x55d6b6eae568 'const_iterator'
|   `-PointerType 0x55d6b6b7ddc0 'const char *'
|     `-QualType 0x55d6b6b7d311 'const char' const
|       `-BuiltinType 0x55d6b6b7d310 'char'
|-TypedefDecl 0x55d6b6eae760 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55d6b6eae6d0 'int (String::*)() const'
|   |-RecordType 0x55d6b6eae410 'String'
|   | `-CXXRecord 0x55d6b6eae380 'String'
|   `-ParenType 0x55d6b6eae670 'int () const' sugar
|     `-FunctionProtoType 0x55d6b6e841b0 'int () const' const cdecl
|       `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b6eae7c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55d6b6cd3440 'int64_t' sugar
|   |-Typedef 0x55d6b6be62d0 'int64_t'
|   `-TypedefType 0x55d6b6bbf4d0 '__int64_t' sugar
|     |-Typedef 0x55d6b6bbf0a8 '__int64_t'
|     `-BuiltinType 0x55d6b6b7d390 'long'
|-TypedefDecl 0x55d6b6eae830 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55d6b6cd3360 'uint64_t' sugar
|   |-Typedef 0x55d6b6be6470 'uint64_t'
|   `-TypedefType 0x55d6b6bbf560 '__uint64_t' sugar
|     |-Typedef 0x55d6b6bbf118 '__uint64_t'
|     `-BuiltinType 0x55d6b6b7d430 'unsigned long'
|-TypedefDecl 0x55d6b6eae8c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55d6b6eae890 'String::intmax_t' sugar
|   |-Typedef 0x55d6b6eae7c8 'intmax_t'
|   `-TypedefType 0x55d6b6cd3440 'int64_t' sugar
|     |-Typedef 0x55d6b6be62d0 'int64_t'
|     `-TypedefType 0x55d6b6bbf4d0 '__int64_t' sugar
|       |-Typedef 0x55d6b6bbf0a8 '__int64_t'
|       `-BuiltinType 0x55d6b6b7d390 'long'
|-TypedefDecl 0x55d6b6eae950 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55d6b6eae920 'String::uintmax_t' sugar
|   |-Typedef 0x55d6b6eae830 'uintmax_t'
|   `-TypedefType 0x55d6b6cd3360 'uint64_t' sugar
|     |-Typedef 0x55d6b6be6470 'uint64_t'
|     `-TypedefType 0x55d6b6bbf560 '__uint64_t' sugar
|       |-Typedef 0x55d6b6bbf118 '__uint64_t'
|       `-BuiltinType 0x55d6b6b7d430 'unsigned long'
|-CXXConstructorDecl 0x55d6b6eaea10 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55d6b6eaebb8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55d6b6eaeaf8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55d6b6eaed68 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55d6b6eaeca8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55d6b6eaeec0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55d6b6eaee30 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55d6b6eaf0d8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d6b6eaef88 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55d6b6eaf008 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55d6b6eaf2f8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55d6b6eaf1a8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55d6b6eaf228 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55d6b6eaf518 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d6b6eaf3c8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55d6b6eaf448 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55d6b6eaf738 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55d6b6eaf5e8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55d6b6eaf668 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55d6b6eaf8c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55d6b6eaf800 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55d6b6eafa48 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55d6b6eaf988 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55d6b6eafbd8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55d6b6eafb10 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55d6b6eafd30 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55d6b6eafca0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55d6b6eafe88 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55d6b6eafdf8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55d6b6eaffe0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55d6b6eaff50 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55d6b6eb0168 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55d6b6eb00a8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55d6b6eb02f8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55d6b6eb0230 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55d6b6eb0488 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55d6b6eb03c0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55d6b6eb0618 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55d6b6eb0550 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55d6b6eb0710 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55d6b6eb0838 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55d6b6eb09b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55d6b6eb08f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55d6b6eb0b08 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55d6b6eb0a78 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55d6b6eb0bb0 <col:63> "" ""
|-CXXMethodDecl 0x55d6b6eb0cf8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55d6b6eb0c38 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55d6b6eb0f08 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55d6b6eb0db8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55d6b6eb0e38 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55d6b6eb1128 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55d6b6eb0fd0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55d6b6eb1050 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55d6b6eb1408 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55d6b6eb11e8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55d6b6eb1268 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55d6b6eba860 <col:55> 'int' 10
| `-ParmVarDecl 0x55d6b6eb12e0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6b6eba880 <col:76> 'bool' true
|-CXXMethodDecl 0x55d6b6eb16e8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55d6b6eb14d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55d6b6eb1550 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55d6b6eba890 <col:56> 'int' 10
| `-ParmVarDecl 0x55d6b6eb15c8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6b6eba8b0 <col:77> 'bool' true
|-CXXMethodDecl 0x55d6b6eb17f0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55d6b6eb18b8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55d6b6eb1980 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55d6b6eb1a20 <col:20>
| `-OptimizeNoneAttr 0x55d6b6eb1a78 <col:30>
|-CXXConversionDecl 0x55d6b6eb1b68 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55d6b6eb1c38 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55d6b6eb1cf8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55d6b6eb1de8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d6b6eb1ea8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d6b6eb3088 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55d6b6eb2fc0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55d6b6eb31d8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55d6b6eb3148 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55d6b6eb32c8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55d6b6eb3388 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55d6b6eb35d8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55d6b6eb3440 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55d6b6eb34c0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55d6b6eb3838 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55d6b6eb36a0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55d6b6eb3720 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55d6b6eb3908 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b6eb3b18 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55d6b6eb39c0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55d6b6eb3a40 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55d6b6eb3d38 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55d6b6eb3be0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55d6b6eb3c60 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55d6b6eb3ec8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55d6b6eb3e00 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55d6b6eb3fb8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55d6b6eb4128 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d6b6eb4068 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d6b6eb4338 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55d6b6eb41e8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d6b6eb4268 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d6b6eb4550 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55d6b6eb43f8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55d6b6eb4470 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55d6b6eb46e0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55d6b6eb4610 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d6b6eb4900 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55d6b6eb47a0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55d6b6eb4820 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d6b6eb4a50 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d6b6eb49c0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55d6b6eb4c28 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d6b6eb4b10 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d6b6eb4b90 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55d6b6eb4d78 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55d6b6eb4ce8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55d6b6eb4f90 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55d6b6eb4e30 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55d6b6eb4eb0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55d6b6eba8c0 <col:39> 'int' 0
|-CXXMethodDecl 0x55d6b6eb51b0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55d6b6eb5050 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55d6b6eb50d0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55d6b6eba8e0 <col:48> 'int' 0
|-CXXMethodDecl 0x55d6b6eb5390 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55d6b6eb5270 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55d6b6eb52f0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55d6b6eba900 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55d6b6eb5460 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55d6b6eb5520 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55d6b6eb55e0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55d6b6eb56a0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55d6b6eb5760 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55d6b6eb5908 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d6b6eb5810 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55d6b6eb5a88 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55d6b6eb59c0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55d6b6eb5c08 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d6b6eb5b48 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55d6b6eb5d88 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55d6b6eb5cc0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55d6b6eb5ed0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55d6b6eb5e40 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d6b6eb6020 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55d6b6eb5f90 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55d6b6eb61f8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d6b6eb60e0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d6b6eb6160 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d6b6eb63d8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d6b6eb62c0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55d6b6eb6340 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55d6b6eb6528 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55d6b6eb6498 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55d6b6eb6738 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55d6b6eb65e8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55d6b6eb6668 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55d6b6eb6898 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55d6b6eb6800 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d6b6eb69f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55d6b6eb6958 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55d6b6eb6a98 <col:57> "" ""
|-CXXMethodDecl 0x55d6b6eb6ba8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d6b6eb6b18 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55d6b6eb6cf8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d6b6eb6c68 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55d6b6eb6e78 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55d6b6eb6db0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55d6b6eb7040 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55d6b6eb7100 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55d6b6eb71c0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55d6b6eb7260 <col:49> "" ""
|-CXXMethodDecl 0x55d6b6eb72f0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55d6b6eb73b0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55d6b6eb74a0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55d6b6eb7568 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55d6b6eb7628 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55d6b6eb76e8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55d6b6eb77e0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55d6b6eb78a8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55d6b6eb7970 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55d6b6eb7b48 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55d6b6eb7a28 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55d6b6eb7aa8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55d6b6eb7d70 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55d6b6eb7c10 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55d6b6eb7c90 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55d6b6eb7e80 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55d6b6eb7ee8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55d6b6eb7f10 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55d6b6eb8028 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55d6b6eb80c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55d6b6eb8128 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55d6b6eb8188 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55d6b6eb8238 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55d6b6eb82a0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55d6b6eb84d8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55d6b6eb8528 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b6eb84b8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55d6b6eb83c8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55d6b6eb8370 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55d6b6eb83b0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55d6b6eb8390 <col:32> 'int' 8
|-CXXRecordDecl 0x55d6b6eb8540 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d6b6eb8658 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55d6b6eb8700 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55d6b6eb8768 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55d6b6eb87f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55d6b6ebad90 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d6b6ebd3d8 <col:12>
| |-CXXConstructorDecl 0x55d6b6ebae98 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d6b6ebafa8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d6b6eb8700 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55d6b6ebf960 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55d6b6ebf930 <col:12> 'const char *const' lvalue .data 0x55d6b6eb8700
| | |     `-DeclRefExpr 0x55d6b6ebf910 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ebafa8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d6b6eb8768 'length' 'int'
| | | `-ImplicitCastExpr 0x55d6b6ebf9f0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55d6b6ebf9c0 <col:12> 'const int' lvalue .length 0x55d6b6eb8768
| | |     `-DeclRefExpr 0x55d6b6ebf9a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ebafa8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d6b6eb87f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55d6b6ebfa80 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55d6b6ebfa50 <col:12> 'String::memo_t *const' lvalue .memo 0x55d6b6eb87f8
| | |     `-DeclRefExpr 0x55d6b6ebfa30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ebafa8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55d6b6ebfad8 <col:12>
| |-CXXConstructorDecl 0x55d6b6ebd258 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6b6ebd258
| | `-ParmVarDecl 0x55d6b6ebd368 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55d6b6ec4820 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55d6b6ece228 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d6b6ece338 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55d6b6ece850 <col:12>
| |   |-BinaryOperator 0x55d6b6ece668 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55d6b6ece620 <col:12> 'const char *' lvalue ->data 0x55d6b6eb8700
| |   | | `-CXXThisExpr 0x55d6b6ece610 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d6b6ece650 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d6b6ece5e0 <col:12> 'const char *const' lvalue .data 0x55d6b6eb8700
| |   |     `-DeclRefExpr 0x55d6b6ece5c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ece338 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d6b6ece730 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55d6b6ece6e8 <col:12> 'int' lvalue ->length 0x55d6b6eb8768
| |   | | `-CXXThisExpr 0x55d6b6ece6d8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d6b6ece718 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55d6b6ece6a8 <col:12> 'const int' lvalue .length 0x55d6b6eb8768
| |   |     `-DeclRefExpr 0x55d6b6ece688 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ece338 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d6b6ece7f8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55d6b6ece7b0 <col:12> 'String::memo_t *' lvalue ->memo 0x55d6b6eb87f8
| |   | | `-CXXThisExpr 0x55d6b6ece7a0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d6b6ece7e0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d6b6ece770 <col:12> 'String::memo_t *const' lvalue .memo 0x55d6b6eb87f8
| |   |     `-DeclRefExpr 0x55d6b6ece750 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6b6ece338 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55d6b6ece840 <col:12>
| |     `-UnaryOperator 0x55d6b6ece828 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d6b6ece818 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55d6b6ece3a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6b6ece3a8
|   `-ParmVarDecl 0x55d6b6ece4b8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55d6b6eb8870 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55d6b6eb8ab8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55d6b6eb88d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55d6b6eb8958 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55d6b6eb89d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55d6b6ebad50 <col:79, line:261:5>
|   |-BinaryOperator 0x55d6b6eba9c8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d6b6eba960 <col:2, col:5> 'const char *' lvalue .data 0x55d6b6eb8700
|   | | `-MemberExpr 0x55d6b6eba930 <col:2> 'String::rep_t' lvalue ->_r 0x55d6b6eb8870
|   | |   `-CXXThisExpr 0x55d6b6eba920 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d6b6eba9b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d6b6eba990 <col:12> 'const char *' lvalue ParmVar 0x55d6b6eb88d8 'data' 'const char *'
|   |-BinaryOperator 0x55d6b6ebaa90 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55d6b6ebaa28 <col:2, col:5> 'int' lvalue .length 0x55d6b6eb8768
|   | | `-MemberExpr 0x55d6b6eba9f8 <col:2> 'String::rep_t' lvalue ->_r 0x55d6b6eb8870
|   | |   `-CXXThisExpr 0x55d6b6eba9e8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d6b6ebaa78 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d6b6ebaa58 <col:14> 'int' lvalue ParmVar 0x55d6b6eb8958 'length' 'int'
|   `-IfStmt 0x55d6b6ebad38 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55d6b6ebabb0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d6b6ebab98 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55d6b6ebab78 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55d6b6ebab58 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55d6b6ebaaf0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55d6b6eb87f8
|     |       | `-MemberExpr 0x55d6b6ebaac0 <col:7> 'String::rep_t' lvalue ->_r 0x55d6b6eb8870
|     |       |   `-CXXThisExpr 0x55d6b6ebaab0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55d6b6ebab40 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d6b6ebab20 <col:17> 'String::memo_t *' lvalue ParmVar 0x55d6b6eb89d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55d6b6ebad10 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55d6b6ebacf8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6b6ebac00 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55d6b6ea6ff8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55d6b6ebac68 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d6b6eb80c8
|         `-ImplicitCastExpr 0x55d6b6ebac50 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55d6b6ebac30 <col:27> 'String::memo_t *' lvalue ParmVar 0x55d6b6eb89d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55d6b6eb8d68 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55d6b6eb8b88 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55d6b6eb8c08 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55d6b6eb8c80 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55d6b6eb8870 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55d6b6ebd3e8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d6b6ebd578 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55d6b6ebd4e0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55d6b6ebd450 <col:2> '<bound member function type>' ->assign_memo 0x55d6b6eb8ab8
|     | `-ImplicitCastExpr 0x55d6b6ebd518 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55d6b6ebd440 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55d6b6ebd530 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6b6ebd480 <col:14> 'const char *' lvalue ParmVar 0x55d6b6eb8b88 'data' 'const char *'
|     |-ImplicitCastExpr 0x55d6b6ebd548 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6b6ebd4a0 <col:20> 'int' lvalue ParmVar 0x55d6b6eb8c08 'length' 'int'
|     `-ImplicitCastExpr 0x55d6b6ebd560 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b6ebd4c0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55d6b6eb8c80 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55d6b6eb8ef8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55d6b6eb8e38 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55d6b6ebd7d0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55d6b6ebd750 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55d6b6ebd5a0 <col:2> '<bound member function type>' ->assign_memo 0x55d6b6eb8ab8
|     | `-CXXThisExpr 0x55d6b6ebd590 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55d6b6ebd788 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55d6b6ebd620 <col:14, col:19> 'const char *' lvalue .data 0x55d6b6eb8700
|     |   `-MemberExpr 0x55d6b6ebd5f0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55d6b6eb8870
|     |     `-DeclRefExpr 0x55d6b6ebd5d0 <col:14> 'const String' lvalue ParmVar 0x55d6b6eb8e38 'x' 'const String &'
|     |-ImplicitCastExpr 0x55d6b6ebd7a0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55d6b6ebd6a0 <col:25, col:30> 'int' lvalue .length 0x55d6b6eb8768
|     |   `-MemberExpr 0x55d6b6ebd670 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55d6b6eb8870
|     |     `-DeclRefExpr 0x55d6b6ebd650 <col:25> 'const String' lvalue ParmVar 0x55d6b6eb8e38 'x' 'const String &'
|     `-ImplicitCastExpr 0x55d6b6ebd7b8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55d6b6ebd720 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55d6b6eb87f8
|         `-MemberExpr 0x55d6b6ebd6f0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55d6b6eb8870
|           `-DeclRefExpr 0x55d6b6ebd6d0 <col:38> 'const String' lvalue ParmVar 0x55d6b6eb8e38 'x' 'const String &'
|-CXXMethodDecl 0x55d6b6eb8fc0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55d6b6ebe190 <col:31, line:278:5>
|   `-IfStmt 0x55d6b6ebe178 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55d6b6ebd870 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d6b6ebd858 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55d6b6ebd828 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d6b6eb87f8
|     |     `-MemberExpr 0x55d6b6ebd7f8 <col:6> 'String::rep_t' lvalue ->_r 0x55d6b6eb8870
|     |       `-CXXThisExpr 0x55d6b6ebd7e8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55d6b6ebe150 <col:15, line:277:2>
|       |-ParenExpr 0x55d6b6ebdd20 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55d6b6ebdcf0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55d6b6ebd980 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55d6b6ebd968 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55d6b6ebd950 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55d6b6ebd910 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d6b6eb80c8
|       |   |       `-ImplicitCastExpr 0x55d6b6ebd8f8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55d6b6ebd8c8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55d6b6eb87f8
|       |   |           `-MemberExpr 0x55d6b6ebd898 <col:27> 'String::rep_t' lvalue ->_r 0x55d6b6eb8870
|       |   |             `-CXXThisExpr 0x55d6b6ebd888 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55d6b6ebd9e0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55d6b6ebd9c0 <col:54> 'int' 0
|       |   `-CallExpr 0x55d6b6ebdc50 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55d6b6ebdc38 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55d6b6ebdbb8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6b6c19ca0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55d6b6ebdc90 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d6b6ebdac8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55d6b6ebdca8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d6b6ebdaf8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55d6b6ebdcc0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55d6b6ebdb30 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55d6b6ebdcd8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55d6b6ebdba0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55d6b6ebdb88 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55d6b6ebdb50 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55d6b6ebe070 <line:274:6, line:275:22>
|       | |-CallExpr 0x55d6b6ebdf30 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55d6b6ebdf18 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55d6b6ebde90 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55d6b6eaa460 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55d6b6ebde60 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d6b6eb80c8
|       | |   `-ImplicitCastExpr 0x55d6b6ebde48 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55d6b6ebde18 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55d6b6eb87f8
|       | |       `-MemberExpr 0x55d6b6ebdde8 <col:40> 'String::rep_t' lvalue ->_r 0x55d6b6eb8870
|       | |         `-CXXThisExpr 0x55d6b6ebddd8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55d6b6ebe030 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55d6b6ebe018 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55d6b6ebdf58 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55d6b6eb9c98 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55d6b6ebe058 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55d6b6ebdfb8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55d6b6eb87f8
|       |       `-MemberExpr 0x55d6b6ebdf88 <col:15> 'String::rep_t' lvalue ->_r 0x55d6b6eb8870
|       |         `-CXXThisExpr 0x55d6b6ebdf78 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55d6b6ebe130 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55d6b6ebe0c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d6b6eb87f8
|         | `-MemberExpr 0x55d6b6ebe098 <col:6> 'String::rep_t' lvalue ->_r 0x55d6b6eb8870
|         |   `-CXXThisExpr 0x55d6b6ebe088 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55d6b6ebe118 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55d6b6ebe0f8 <col:16> 'int' 0
|-CXXMethodDecl 0x55d6b6eb9258 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55d6b6eb9078 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d6b6eb90f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d6b6eb9170 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55d6b6eb9330 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55d6b6eb9580 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55d6b6eb93e8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d6b6eb9468 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d6b6eb94e0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d6b6eb9768 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55d6b6eb9650 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55d6b6eb96d0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55d6b6eb9868 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55d6b6ebe268 <col:41, line:286:5>
|   `-ReturnStmt 0x55d6b6ebe258 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55d6b6ebe228 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55d6b6ebe1f0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55d6b6ebe1d8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55d6b6ebe1b8 <col:46> 'int' 1
|-CXXMethodDecl 0x55d6b6eb9b08 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55d6b6eb9920 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55d6b6eb99a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55d6b6eb9a20 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55d6b6eb9c98 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55d6b6eb9bd0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d6b6eb9d68 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55d6b6eb9f38 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d6b6eb9e20 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d6b6eb9ea0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55d6b6eb9ff8 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55d6b6eba0c0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55d6b6eba1c8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55d6b6eba240 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55d6b6eba2b8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55d6b6eba320 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55d6b6eba420 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55d6b6eba470 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b6eba400 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55d6b6eba3e0 <col:22> 'int' 14
|-CXXMethodDecl 0x55d6b6eba688 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55d6b6eba4a0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55d6b6eba520 <col:38> col:41 'int'
| `-ParmVarDecl 0x55d6b6eba5a0 <col:43> col:46 'int'
|-FriendDecl 0x55d6b6eba790 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55d6b6eba820 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6b6f7cac0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55d6b6f7cc98 prev 0x55d6b6f7cac0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d6b6f7cd28 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d6b6f7cd50 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b713e7e0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55d6b713e790 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55d6b713e770 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55d6b6f7cf68 'type'
|     `-SubstTemplateTypeParmType 0x55d6b6f7cf30 'String' sugar
|       |-TemplateTypeParmType 0x55d6b6e73790 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e73740 'T'
|       `-RecordType 0x55d6b6eae410 'String'
|         `-CXXRecord 0x55d6b6eae380 'String'
|-TypedefDecl 0x55d6b713e898 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55d6b713e860 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55d6b713e840 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d6b713e7e0 'type'
|     `-ElaboratedType 0x55d6b713e790 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55d6b713e770 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55d6b6f7cf68 'type'
|         `-SubstTemplateTypeParmType 0x55d6b6f7cf30 'String' sugar
|           |-TemplateTypeParmType 0x55d6b6e73790 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d6b6e73740 'T'
|           `-RecordType 0x55d6b6eae410 'String'
|             `-CXXRecord 0x55d6b6eae380 'String'
|-CXXMethodDecl 0x55d6b713ea18 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55d6b713e928 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55d6b713eb08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d6b713ebe8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55d6b713ebe8
|-CXXMethodDecl 0x55d6b713eeb8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d6b713edc0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55d6b713f0f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d6b713ef70 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6b713efe8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6b713f2c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d6b713f1b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6b713f230 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6b713f428 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d6b713f4f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d6b713f748 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d6b713f5b8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d6b713f630 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6b713f9a8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55d6b713f818 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d6b713f890 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6b713fb68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d6b713fa78 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6b713fd28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d6b713fc30 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6b713fde0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d6b713fe90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d6b71400c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d6b713ff40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6b713ffb8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6b7140368 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d6b7140270 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55d6b7140430 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55d6b7140480 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d6b71404d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6b70e2360 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55d6b6f7b528 prev 0x55d6b70e2360 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d6b6f7ca30 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55d6b6f7c9e0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55d6b6f7c9c0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d6b6f7c870 'type'
|     `-SubstTemplateTypeParmType 0x55d6b6f7c700 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55d6b6e47c20 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55d6b6e47bc8 'F'
|       `-RecordType 0x55d6b6f7c360 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55d6b6f7c280 'typed_array_memory'
|-FieldDecl 0x55d6b7140520 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55d6b7140570 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d6b71405a8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55d6b6f7b5c0 'String' sugar
|   |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|   `-RecordType 0x55d6b6eae410 'String'
|     `-CXXRecord 0x55d6b6eae380 'String'
|-TypedefDecl 0x55d6b7140638 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55d6b7140600 'String &'
|   `-SubstTemplateTypeParmType 0x55d6b6f7b5c0 'String' sugar
|     |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|     `-RecordType 0x55d6b6eae410 'String'
|       `-CXXRecord 0x55d6b6eae380 'String'
|-TypedefDecl 0x55d6b71406c8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55d6b7140690 'const String &'
|   `-QualType 0x55d6b6f7b5c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d6b6f7b5c0 'String' sugar
|       |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|       `-RecordType 0x55d6b6eae410 'String'
|         `-CXXRecord 0x55d6b6eae380 'String'
|-TypedefDecl 0x55d6b7140758 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55d6b7140720 'String *'
|   `-SubstTemplateTypeParmType 0x55d6b6f7b5c0 'String' sugar
|     |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|     `-RecordType 0x55d6b6eae410 'String'
|       `-CXXRecord 0x55d6b6eae380 'String'
|-TypedefDecl 0x55d6b71407e8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55d6b71407b0 'const String *'
|   `-QualType 0x55d6b6f7b5c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d6b6f7b5c0 'String' sugar
|       |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|       `-RecordType 0x55d6b6eae410 'String'
|         `-CXXRecord 0x55d6b6eae380 'String'
|-TypedefDecl 0x55d6b7141440 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55d6b71413f0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55d6b71413d0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55d6b7141308 'type'
|     `-LValueReferenceType 0x55d6b71412d0 'const String &'
|       `-QualType 0x55d6b7141071 'const String' const
|         `-SubstTemplateTypeParmType 0x55d6b7141070 'String' sugar
|           |-TemplateTypeParmType 0x55d6b6e52c90 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d6b6e52c38 'T'
|           `-RecordType 0x55d6b6eae410 'String'
|             `-CXXRecord 0x55d6b6eae380 'String'
|-TypedefDecl 0x55d6b71414a8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55d6b7140690 'const String &'
|   `-QualType 0x55d6b6f7b5c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d6b6f7b5c0 'String' sugar
|       |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|       `-RecordType 0x55d6b6eae410 'String'
|         `-CXXRecord 0x55d6b6eae380 'String'
|-TypedefDecl 0x55d6b7141500 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b7141568 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55d6b7140720 'String *'
|   `-SubstTemplateTypeParmType 0x55d6b6f7b5c0 'String' sugar
|     |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|     `-RecordType 0x55d6b6eae410 'String'
|       `-CXXRecord 0x55d6b6eae380 'String'
|-TypedefDecl 0x55d6b71415d0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55d6b71407b0 'const String *'
|   `-QualType 0x55d6b6f7b5c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d6b6f7b5c0 'String' sugar
|       |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|       `-RecordType 0x55d6b6eae410 'String'
|         `-CXXRecord 0x55d6b6eae380 'String'
|-EnumDecl 0x55d6b7141628 <line:134:5> col:5
| `-EnumConstantDecl 0x55d6b7141720 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d6b7141700 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d6b6e82138 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d6b6e82110 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d6b6e820f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d6b71417a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d6b7141a38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6b7141860 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6b7141900 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55d6b7141cc8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55d6b7141bb0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55d6b7141f88 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55d6b7141e70 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d6b71422a0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55d6b7142180 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55d6b71425b0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55d6b7142490 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d6b71428a0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6b71426e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6b7142760 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d6b71429c8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d6b7142a78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7142ad0 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7142b18 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d6b7142bc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7142c20 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7142ce8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d6b7142d98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7142df0 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7142e38 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d6b7142ee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7142f40 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7142f88 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d6b7143038 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7143090 <col:30> Inherited
|-CXXMethodDecl 0x55d6b71430d8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d6b7143188 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b71431e0 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7143208 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d6b71432b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d6b7143368 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d6b7143528 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6b7143418 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6b7143490 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d6b7143678 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d6b71435e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b7143828 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55d6b7143730 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d6b71438e0 <col:20>
| `-OptimizeNoneAttr 0x55d6b7143938 <col:30>
|-CXXMethodDecl 0x55d6b7143a58 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55d6b7143960 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d6b7143b10 <col:20>
| `-OptimizeNoneAttr 0x55d6b7143b68 <col:30>
|-CXXMethodDecl 0x55d6b7143c20 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d6b7143b90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b7143d68 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d6b7143cd8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b7143e98 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55d6b7143f98 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55d6b7144068 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55d6b7144138 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55d6b7144278 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d6b71441e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b71443c0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d6b7144330 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b7144508 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d6b7144478 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d6b71445c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d6b71446c0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d6b7144630 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d6b7144778 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d6b7144838 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55d6b7144938 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55d6b7144ab8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d6b71449f8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55d6b7145278 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d6b7144b70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55d6b71451d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55d6b71450d8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55d6b7145358 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d6b71454a8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d6b7145418 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d6b7145560 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d6b71457a8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6b7145620 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d6b7145698 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d6b7145938 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55d6b7145878 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d6b7145b48 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55d6b7145a00 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d6b7145a78 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d6b7145c08 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d6b7145e68 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55d6b7145d70 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55d6b7145f38 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55d6b7145f38

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b71c6d20 prev 0x55d6b7150ae8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6b71c6e18 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55d6b71c6ea8 <col:22, col:28> col:22 public
|-EnumDecl 0x55d6b71c6ed0 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55d6b71c6fe8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6b71c6fc8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55d6b71c6fb0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55d6b71c6f90 <col:14> 'int' 999
| |-EnumConstantDecl 0x55d6b71c7090 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6b71c7070 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55d6b71c7058 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55d6b71c7038 <col:14> 'int' 1
| |-EnumConstantDecl 0x55d6b71c7120 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6b71c7100 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55d6b71c70e0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55d6b71c71b0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6b71c7190 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55d6b71c7170 <col:13> 'int' 1
| |-EnumConstantDecl 0x55d6b71c7240 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6b71c7220 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55d6b71c7200 <col:16> 'int' 2
| |-EnumConstantDecl 0x55d6b71c72d0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6b71c72b0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55d6b71c7290 <col:13> 'int' 3
| |-EnumConstantDecl 0x55d6b71c7360 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6b71c7340 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55d6b71c7320 <col:15> 'int' 4
| |-EnumConstantDecl 0x55d6b71c73f0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6b71c73d0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55d6b71c73b0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55d6b71c7480 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6b71c7460 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55d6b71c7440 <col:12> 'int' 6
| `-EnumConstantDecl 0x55d6b71c7510 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55d6b71c74f0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55d6b71c74d0 <col:13> 'int' 7
|-VarDecl 0x55d6b71c7580 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55d6b71c7608 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55d6b71c7690 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55d6b71c7718 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55d6b71c77a0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55d6b71c7828 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55d6b71c78b0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55d6b71c7938 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55d6b71c79c0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55d6b71c7a48 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55d6b71c7ad0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55d6b71c7bd0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55d6b71ccf28 '_nerrors' 'int'
| | `-IntegerLiteral 0x55d6b71cd6b8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55d6b71cd728 <col:16, line:129:5>
|-CXXDestructorDecl 0x55d6b71c7cc0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55d6b71cd738 <col:29, line:132:5>
|-CXXMethodDecl 0x55d6b71c7e78 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55d6b71c7db0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b71c7f40 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55d6b71c8028 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55d6b71cd790 <col:44, line:161:5>
|   `-ReturnStmt 0x55d6b71cd780 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55d6b71cd768 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b71cd748 <col:9> 'ErrorHandler *' lvalue Var 0x55d6b71ccf88 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b71c8168 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55d6b71c80d8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6b71c8230 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55d6b71cd7f0 <col:43, line:173:5>
|   `-ReturnStmt 0x55d6b71cd7e0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55d6b71cd7c8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b71cd7a8 <col:9> 'ErrorHandler *' lvalue Var 0x55d6b71cd000 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55d6b71c82e8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55d6b71c8368 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55d6b71c8478 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55d6b71c83e8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c85c8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55d6b71c8538 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c8720 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55d6b71c8688 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c8878 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55d6b71c87e0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c89d0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55d6b71c8938 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c8be0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6b71c8a88 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55d6b71c8b08 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c8db8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6b71c8ca0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55d6b71c8d20 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c8fd8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6b71c8e78 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55d6b71c8ef8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c91b8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6b71c9098 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55d6b71c9118 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c9398 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6b71c9278 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55d6b71c92f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71c9520 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55d6b71c9458 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55d6b71c96f0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55d6b71c95d8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55d6b71c9650 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55d6b71cda48 <col:57, line:234:5>
|   `-ReturnStmt 0x55d6b71cda38 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55d6b71cda20 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55d6b71cd9c8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55d6b71cd998 <col:9> '<bound member function type>' ->xmessage 0x55d6b71c9520
|         | `-CXXThisExpr 0x55d6b71cd988 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55d6b71cda08 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d6b71cd9f0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d6b71cd968 <col:18, col:40> 'String' (CXXTemporary 0x55d6b71cd968)
|               `-CallExpr 0x55d6b71cd930 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55d6b71cd918 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55d6b71cd890 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55d6b71cb6e8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55d6b71cd8b0 <col:31> 'const String' lvalue ParmVar 0x55d6b71c9650 'str' 'const String &'
|                 `-DeclRefExpr 0x55d6b71cd8d0 <col:36> 'const String' lvalue ParmVar 0x55d6b71c95d8 'anno' 'const String &'
|-CXXMethodDecl 0x55d6b71c99d0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55d6b71c97b0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55d6b71c9830 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55d6b71c98a8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d6b71cdcd8 <col:68, line:243:5>
|   `-ReturnStmt 0x55d6b71cdcc8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55d6b71cdcb0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55d6b71cdc50 <col:9, col:41> 'int'
|         |-MemberExpr 0x55d6b71cdc20 <col:9> '<bound member function type>' ->xmessage 0x55d6b71c96f0
|         | `-CXXThisExpr 0x55d6b71cdc10 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55d6b71cdae8 <col:18> 'const String' lvalue ParmVar 0x55d6b71c97b0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55d6b71cdc98 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d6b71cdc80 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d6b71cdbf0 <col:24, col:40> 'String' (CXXTemporary 0x55d6b71cdbf0)
|               `-CXXMemberCallExpr 0x55d6b71cdb88 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55d6b71cdb18 <col:24> '<bound member function type>' ->vformat 0x55d6b71cabb0
|                 | `-CXXThisExpr 0x55d6b71cdb08 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55d6b71cdbb8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55d6b71cdb48 <col:32> 'const char *' lvalue ParmVar 0x55d6b71c9830 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55d6b71cdbd0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55d6b71cdb68 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d6b71c98a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6b71c9c70 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55d6b71c9a98 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55d6b71c9b10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55d6b71c9b88 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55d6b71ce018 <col:23, line:254:5>
|   `-ReturnStmt 0x55d6b71ce008 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55d6b71cdff0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55d6b71cdf90 <col:9, col:71> 'int'
|         |-MemberExpr 0x55d6b71cdf60 <col:9> '<bound member function type>' ->xmessage 0x55d6b71c96f0
|         | `-CXXThisExpr 0x55d6b71cdf50 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55d6b71cdfd8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55d6b71cdfc0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55d6b71cdf10 <col:18, col:65> 'String' (CXXTemporary 0x55d6b71cdf10)
|         |     `-CallExpr 0x55d6b71cdea8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55d6b71cde90 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55d6b71cdd78 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55d6b71cb6e8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55d6b71cdd98 <col:31> 'const String' lvalue ParmVar 0x55d6b71c9b10 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55d6b71cdef0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55d6b71cded8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55d6b71cde70 <col:37, col:64> 'String' (CXXTemporary 0x55d6b71cde70)
|         |             `-CallExpr 0x55d6b71cde40 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55d6b71cde28 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55d6b71cddb8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55d6b71cbda8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55d6b71cddd8 <col:56> 'const String' lvalue ParmVar 0x55d6b71c9a98 'landmark' 'const String &'
|         `-DeclRefExpr 0x55d6b71cdf30 <col:68> 'const String' lvalue ParmVar 0x55d6b71c9b88 'str' 'const String &'
|-CXXMethodDecl 0x55d6b71c9ff0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55d6b71c9d38 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55d6b71c9db0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55d6b71c9e30 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55d6b71c9ea8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d6b71ce2d0 <col:34, line:267:5>
|   `-ReturnStmt 0x55d6b71ce2c0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55d6b71ce2a8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55d6b71ce240 <col:9, col:51> 'int'
|         |-MemberExpr 0x55d6b71ce210 <col:9> '<bound member function type>' ->xmessage 0x55d6b71c9c70
|         | `-CXXThisExpr 0x55d6b71ce200 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55d6b71ce0b8 <col:18> 'const String' lvalue ParmVar 0x55d6b71c9d38 'landmark' 'const String &'
|         |-DeclRefExpr 0x55d6b71ce0d8 <col:28> 'const String' lvalue ParmVar 0x55d6b71c9db0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55d6b71ce290 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d6b71ce278 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d6b71ce1e0 <col:34, col:50> 'String' (CXXTemporary 0x55d6b71ce1e0)
|               `-CXXMemberCallExpr 0x55d6b71ce178 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55d6b71ce108 <col:34> '<bound member function type>' ->vformat 0x55d6b71cabb0
|                 | `-CXXThisExpr 0x55d6b71ce0f8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55d6b71ce1a8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55d6b71ce138 <col:42> 'const char *' lvalue ParmVar 0x55d6b71c9e30 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55d6b71ce1c0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55d6b71ce158 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d6b71c9ea8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6b71ca100 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55d6b71ce350 <col:25, line:288:5>
|   `-ReturnStmt 0x55d6b71ce340 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55d6b71ce328 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55d6b71ce2f8 <col:9> 'const int' lvalue ->_nerrors 0x55d6b71ccf28
|         `-CXXThisExpr 0x55d6b71ce2e8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55d6b71ca310 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55d6b71ca1b8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55d6b71ca238 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71ca5f8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55d6b71ca3d8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55d6b71ca458 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55d6b71ca4d0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6b71ca790 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55d6b71ca6c8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71ca9d8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55d6b71ca850 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55d6b71ca8c8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d6b71ce5b0 <col:58, line:357:5>
|   `-ReturnStmt 0x55d6b71ce5a0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55d6b71ce588 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55d6b71ce558 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55d6b71ce540 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55d6b71ce520 <col:9, col:29> 'String' (CXXTemporary 0x55d6b71ce520)
|             `-CallExpr 0x55d6b71ce4b0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55d6b71ce498 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d6b71ce418 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55d6b71ca5f8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55d6b71ce3b8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55d6b71ce4e8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55d6b71ce3d8 <col:21> 'const char *' lvalue ParmVar 0x55d6b71ca850 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55d6b71ce500 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55d6b71ce3f8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d6b71ca8c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6b71cabb0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55d6b71caaa0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55d6b71cab18 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6b71cad08 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55d6b71cac78 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55d6b71cae50 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55d6b71cadc0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55d6b71cb0f0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55d6b71caf08 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55d6b71caf88 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55d6b71cb000 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55d6b71cb250 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55d6b71cb1c0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55d6b71ce6c8 <col:37, line:441:5>
|   `-IfStmt 0x55d6b71ce6b0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55d6b71ce638 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55d6b71ce608 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55d6b71ce5c8 <col:6> 'int' lvalue ParmVar 0x55d6b71cb1c0 'level' 'int'
|     | `-ImplicitCastExpr 0x55d6b71ce620 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55d6b71ce5e8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55d6b71c72d0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55d6b71ce698 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55d6b71ce668 <col:8> 'int' lvalue ->_nerrors 0x55d6b71ccf28
|         `-CXXThisExpr 0x55d6b71ce658 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55d6b71cb318 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55d6b71ce760 <col:26, line:448:5>
|   `-BinaryOperator 0x55d6b71ce740 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55d6b71ce6f0 <col:2> 'int' lvalue ->_nerrors 0x55d6b71ccf28
|     | `-CXXThisExpr 0x55d6b71ce6e0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55d6b71ce720 <col:13> 'int' 0
|-CXXMethodDecl 0x55d6b71cb4e0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55d6b71cb3d0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55d6b71cb448 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55d6b71cb6e8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55d6b71cb5a0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55d6b71cb618 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55d6b71cba08 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55d6b71cb7a8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55d6b71cb890 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55d6b71cb910 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55d6b71cbac0 <col:59> 0 0
|-CXXMethodDecl 0x55d6b71cbc58 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55d6b71cbb38 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55d6b71cbbb8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55d6b71cedd0 <col:70, line:534:5>
|   |-DeclStmt 0x55d6b71ce8d0 <line:528:2, col:20>
|   | |-VarDecl 0x55d6b71ce788 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55d6b71ce7f0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55d6b71ce828 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55d6b71ce890 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55d6b71ce9a0 <line:529:2, col:23>
|   | `-VarDecl 0x55d6b71ce900 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55d6b71ce988 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55d6b71ce968 <col:18> 'const char *' lvalue ParmVar 0x55d6b71cbb38 'begin' 'const char *'
|   |-DoStmt 0x55d6b71ced68 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55d6b71cec98 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55d6b71cec80 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55d6b71cec60 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55d6b71ce9b8 <col:6> 'const char *' lvalue Var 0x55d6b71ce900 'x' 'const char *'
|   | |     `-CallExpr 0x55d6b71cebb0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55d6b71ceb98 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55d6b71ceb50 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55d6b71cd400 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55d6b71cec18 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55d6b71cec00 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55d6b71cea70 <col:20, col:27> 'String' (CXXTemporary 0x55d6b71cea70)
|   | |       |     `-CXXTemporaryObjectExpr 0x55d6b71cea38 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55d6b71cec30 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55d6b71cea90 <col:30> 'const char *' lvalue Var 0x55d6b71ce900 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55d6b71cec48 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55d6b71ceab0 <col:33> 'const char *' lvalue ParmVar 0x55d6b71cbbb8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55d6b71ceaf0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55d6b71cead0 <col:39> 'String' lvalue Var 0x55d6b71ce788 'name' 'String'
|   | |       |-UnaryOperator 0x55d6b71ceb28 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55d6b71ceb08 <col:46> 'String' lvalue Var 0x55d6b71ce828 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55d6b71ceb40 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55d6b71ced50 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55d6b71ced38 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55d6b71ced18 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55d6b71cece8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|   |         `-ImplicitCastExpr 0x55d6b71cecd0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55d6b71cecb0 <col:11> 'String' lvalue Var 0x55d6b71ce788 'name' 'String'
|   `-ReturnStmt 0x55d6b71cedc0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55d6b71ceda8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b71ced88 <col:9> 'const char *' lvalue Var 0x55d6b71ce900 'x' 'const char *'
|-CXXMethodDecl 0x55d6b71cbda8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55d6b71cbd18 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55d6b71cf3d8 <col:55, line:550:5>
|   `-IfStmt 0x55d6b71cf3b0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55d6b71cf010 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55d6b71ceff8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d6b71cefe0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d6b71cefc0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d6b71cef90 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|     | |       `-DeclRefExpr 0x55d6b71cee30 <col:6> 'const String' lvalue ParmVar 0x55d6b71cbd18 'x' 'const String &'
|     | `-BinaryOperator 0x55d6b71cef70 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55d6b71cef40 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55d6b71ceef0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55d6b71ceed8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55d6b71cee90 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55d6b6ecab20 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55d6b71cee50 <col:11> 'const String' lvalue ParmVar 0x55d6b71cbd18 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55d6b71cee70 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55d6b71cef58 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55d6b71cef28 <col:19> 'char' 123
|     |-ReturnStmt 0x55d6b71cf080 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55d6b71cf050 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55d6b71cf030 <col:13> 'const String' lvalue ParmVar 0x55d6b71cbd18 'x' 'const String &'
|     `-IfStmt 0x55d6b71cf388 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55d6b71cf118 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6b71cf100 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6b71cf0e0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6b71cf0b0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|       |       `-DeclRefExpr 0x55d6b71cf090 <col:11> 'const String' lvalue ParmVar 0x55d6b71cbd18 'x' 'const String &'
|       |-ReturnStmt 0x55d6b71cf2a0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55d6b71cf288 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55d6b71cf258 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55d6b71cf240 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55d6b71cf220 <col:13, col:29> 'String' (CXXTemporary 0x55d6b71cf220)
|       |         `-CallExpr 0x55d6b71cf1d0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55d6b71cf1b8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55d6b71cf130 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55d6b71cb4e0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55d6b71cf200 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55d6b71cf150 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55d6b71cf170 <col:28> 'const String' lvalue ParmVar 0x55d6b71cbd18 'x' 'const String &'
|       `-ReturnStmt 0x55d6b71cf378 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55d6b71cf360 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55d6b71cf330 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55d6b71cf318 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55d6b71cf2f8 <col:13, col:20> 'String' (CXXTemporary 0x55d6b71cf2f8)
|                 `-CXXTemporaryObjectExpr 0x55d6b71cf2c0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55d6b71cbf70 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55d6b71cbe60 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55d6b71cbed8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6b71cd6a8 <col:71> 'bool' false
|-CXXRecordDecl 0x55d6b71cc020 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55d6b71cc318 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55d6b71cc2b0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55d6b71cc250 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55d6b71cc210 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55d6b6eae410 'String'
|       | `-CXXRecord 0x55d6b6eae380 'String'
|       |-BuiltinType 0x55d6b6b7d370 'int'
|       `-DecayedType 0x55d6b7151b30 '__va_list_tag *' sugar
|         |-TypedefType 0x55d6b7151b00 'va_list' sugar
|         | |-Typedef 0x55d6b6dc45d0 'va_list'
|         | `-TypedefType 0x55d6b6dc4580 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55d6b6dbf538 '__gnuc_va_list'
|         |   `-TypedefType 0x55d6b6dbf4a0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55d6b6bbebd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55d6b6bbeb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55d6b6b7e0c0 '__va_list_tag'
|         |         `-CXXRecord 0x55d6b6b7e028 '__va_list_tag'
|         `-PointerType 0x55d6b6dcbee0 '__va_list_tag *'
|           `-RecordType 0x55d6b6b7e0c0 '__va_list_tag'
|             `-CXXRecord 0x55d6b6b7e028 '__va_list_tag'
|-EnumDecl 0x55d6b71cc370 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55d6b71cc470 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6b71cc9d0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71cc450 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55d6b71cc430 <col:16> 'int' 1
| |-EnumConstantDecl 0x55d6b71cc500 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6b71cc9e8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71cc4e0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55d6b71cc4c0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55d6b71cc590 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6b71cca00 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71cc570 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55d6b71cc550 <col:22> 'int' 4
| |-EnumConstantDecl 0x55d6b71cc620 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6b71cca18 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71cc600 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55d6b71cc5e0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55d6b71cc6b0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6b71cca30 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71cc690 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55d6b71cc670 <col:22> 'int' 16
| |-EnumConstantDecl 0x55d6b71cc740 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6b71cca48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71cc720 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55d6b71cc700 <col:19> 'int' 32
| |-EnumConstantDecl 0x55d6b71cc7d0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6b71cca60 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71cc7b0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55d6b71cc790 <col:17> 'int' 64
| |-EnumConstantDecl 0x55d6b71cc860 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6b71cca78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71cc840 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55d6b71cc820 <col:14> 'int' 128
| |-EnumConstantDecl 0x55d6b71cc8f0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6b71cca90 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71cc8d0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55d6b71cc8b0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55d6b71cc980 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55d6b71ccaa8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b71cc960 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55d6b71cc940 <col:12> 'int' 1024
|-CXXMethodDecl 0x55d6b71cccb8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55d6b71ccad0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55d6b71ccb70 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55d6b71cce40 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55d6b71ccd78 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55d6b71ccee8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55d6b71ccf28 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55d6b71ccf88 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55d6b71cd000 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55d6b71cd400 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55d6b71cd078 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55d6b71cd0f8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55d6b71cd178 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55d6b71cd1f0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55d6b71cd268 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55d6b71cd2e0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55d6b71cd528 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55d6b71cd528
| `-ParmVarDecl 0x55d6b71cd638 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55d6b71cf738 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55d6b71cf738
  `-ParmVarDecl 0x55d6b71cf848 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b7150b78 prev 0x55d6b70a4e08 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b7150c70 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55d6b7150d00 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55d6b7150e38 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55d6b7150d38 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d6b7152260 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6b7152240 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d6b7151dd8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d6b71522f0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6b71522b0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55d6b7150d38 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d6b7151e40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d6b7152370 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6b7152330 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d6b7151ea0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d6b71523b0 <col:54> 'bool' false
| `-CompoundStmt 0x55d6b71524b8 <col:61, line:38:5>
|   `-BinaryOperator 0x55d6b7152498 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55d6b7152430 <col:9> 'const Element *' lvalue ->_context 0x55d6b7151d78
|     | `-CXXThisExpr 0x55d6b7152420 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55d6b7152480 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55d6b7152460 <col:20> 'int' 0
|-CXXConstructorDecl 0x55d6b7151048 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b7150ef8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55d6b7150f70 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d6b7152298 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6b7152278 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55d6b7151d78 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55d6b7152510 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6b71524d0 <col:20> 'const Element *' lvalue ParmVar 0x55d6b7150ef8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55d6b7151dd8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d6b7152590 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6b7152550 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55d6b7150f70 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d6b7151e40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d6b7152610 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6b71525d0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55d6b7151ea0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d6b7152650 <col:73> 'bool' false
| `-CompoundStmt 0x55d6b71526c8 <col:80, line:46:5>
|-CXXMethodDecl 0x55d6b7151178 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55d6b7152740 <col:36, line:51:5>
|   `-ReturnStmt 0x55d6b7152730 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55d6b7152718 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55d6b71526e8 <col:16> 'const Element *const' lvalue ->_context 0x55d6b7151d78
|         `-CXXThisExpr 0x55d6b71526d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d6b7151268 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55d6b71527c0 <col:32, line:57:5>
|   `-ReturnStmt 0x55d6b71527b0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55d6b7152798 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55d6b7152768 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55d6b7151dd8
|         `-CXXThisExpr 0x55d6b7152758 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d6b7151328 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55d6b71514b0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d6b71513e0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55d6b7151600 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d6b7151570 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d6b7151750 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d6b71516c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d6b7151958 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55d6b7151808 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55d6b7151880 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55d6b7151c88 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55d6b7151a18 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55d6b7151a98 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55d6b7151b60 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55d6b7151d40 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55d6b7151d78 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55d6b7151dd8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55d6b7151e40 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55d6b7151ea0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55d6b7151ef0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d6b7151ef0
| `-ParmVarDecl 0x55d6b7152008 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55d6b71520a8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d6b71520a8
| `-ParmVarDecl 0x55d6b71521b8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55d6b71deb40 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6b7179af0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55d6b7179cc8 prev 0x55d6b7179af0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d6b7179d58 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d6b7179d80 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b717b950 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55d6b717b900 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55d6b717a230 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55d6b717a130 'type'
|     `-TemplateSpecializationType 0x55d6b717a0c0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55d6b7179fa0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55d6b7179f80 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55d6b7179f60 <col:24> 'unsigned long' 4
|       `-RecordType 0x55d6b717a0a0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55d6b7179fc0 'char_array'
|-TypedefDecl 0x55d6b717ba08 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55d6b717b9d0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55d6b717b9b0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55d6b717b950 'type'
|     `-ElaboratedType 0x55d6b717b900 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55d6b717a230 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55d6b717a130 'type'
|         `-TemplateSpecializationType 0x55d6b717a0c0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55d6b7179fa0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55d6b7179f80 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55d6b7179f60 <col:24> 'unsigned long' 4
|           `-RecordType 0x55d6b717a0a0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55d6b7179fc0 'char_array'
|-CXXMethodDecl 0x55d6b717bb88 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55d6b717ba98 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55d6b717bc78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d6b7185120 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55d6b71853e8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d6b71852f0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55d6b7185628 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d6b71854a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6b7185518 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6b71857f8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d6b71856e8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6b7185760 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6b7185958 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d6b7185a28 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d6b7185c78 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d6b7185ae8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d6b7185b60 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6b7185ed8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55d6b7185d48 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d6b7185dc0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6b7186098 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d6b7185fa8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6b7186258 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d6b7186160 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6b7186310 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d6b71863c0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d6b71865f8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d6b7186470 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6b71864e8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6b7186898 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d6b71867a0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55d6b7186960 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55d6b71869b0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d6b7186a00 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6b71784f8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55d6b7178708 prev 0x55d6b71784f8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d6b7179a60 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55d6b7179a10 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55d6b71799f0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55d6b71798a0 'type'
|     `-SubstTemplateTypeParmType 0x55d6b71796c0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55d6b6e474a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e47448 'T'
|       `-RecordType 0x55d6b7179210 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55d6b7179128 'sized_array_memory'
|-FieldDecl 0x55d6b7186a50 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55d6b7186aa0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d6b7186ad8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55d6b71787a0 'int' sugar
|   |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|   `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b7186b68 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55d6b7186b30 'int &'
|   `-SubstTemplateTypeParmType 0x55d6b71787a0 'int' sugar
|     |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|     `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b7186c28 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55d6b7186bf0 'const int &'
|   `-QualType 0x55d6b71787a1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d6b71787a0 'int' sugar
|       |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|       `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b7186cb8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55d6b7186c80 'int *'
|   `-SubstTemplateTypeParmType 0x55d6b71787a0 'int' sugar
|     |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|     `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b7186d48 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55d6b7186d10 'const int *'
|   `-QualType 0x55d6b71787a1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d6b71787a0 'int' sugar
|       |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|       `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b7187930 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55d6b71878e0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55d6b71878c0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55d6b7187850 'type'
|     `-SubstTemplateTypeParmType 0x55d6b7187610 'int' sugar
|       |-TemplateTypeParmType 0x55d6b6e533c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e53370 'T'
|       `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b7187998 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55d6b7186bf0 'const int &'
|   `-QualType 0x55d6b71787a1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d6b71787a0 'int' sugar
|       |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|       `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b71879f0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b7187a58 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55d6b7186c80 'int *'
|   `-SubstTemplateTypeParmType 0x55d6b71787a0 'int' sugar
|     |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|     `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b7187ac0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55d6b7186d10 'const int *'
|   `-QualType 0x55d6b71787a1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d6b71787a0 'int' sugar
|       |-TemplateTypeParmType 0x55d6b6e80f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6b6e80f18 'T'
|       `-BuiltinType 0x55d6b6b7d370 'int'
|-EnumDecl 0x55d6b7187b18 <line:134:5> col:5
| `-EnumConstantDecl 0x55d6b7187c10 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d6b7187bf0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d6b6e82138 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d6b6e82110 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d6b6e820f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d6b7187c98 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d6b7187ee8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6b7187d50 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6b7187df0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55d6b71881a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55d6b7188090 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55d6b7188468 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55d6b7188350 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d6b71887b0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55d6b7188690 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55d6b7188ac0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55d6b71889a0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d6b7188db0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6b7188bf8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6b7188c70 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d6b7188ed8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d6b7188fb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7189010 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7189058 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d6b7189108 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7189160 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7189228 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d6b71892d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7189330 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7189378 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d6b7189428 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7189480 <col:30> Inherited
|-CXXMethodDecl 0x55d6b71894c8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d6b7189578 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b71895d0 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7189618 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d6b71896c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6b7189720 <col:30> Inherited
|-CXXMethodDecl 0x55d6b7189748 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d6b71897f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d6b71898a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d6b7189a68 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6b7189958 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6b71899d0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d6b7189bb8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d6b7189b28 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b7189d68 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55d6b7189c70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d6b7189e20 <col:20>
| `-OptimizeNoneAttr 0x55d6b7189e78 <col:30>
|-CXXMethodDecl 0x55d6b7189f98 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55d6b7189ea0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d6b718a050 <col:20>
| `-OptimizeNoneAttr 0x55d6b718a0a8 <col:30>
|-CXXMethodDecl 0x55d6b718a160 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d6b718a0d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b718a2a8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d6b718a218 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b718a3d8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55d6b718a508 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55d6b718a5d8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55d6b718a6a8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55d6b718a7e8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d6b718a758 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b718a930 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d6b718a8a0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6b718aa78 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d6b718a9e8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d6b718ab30 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d6b718ac30 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d6b718aba0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d6b718ace8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d6b718ada8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55d6b718aea8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55d6b718b028 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d6b718af68 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55d6b718b7e8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d6b718b0e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55d6b718b748 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55d6b718b648 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55d6b718b8c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d6b718ba18 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d6b718b988 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d6b718bad0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d6b718bd18 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6b718bb90 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d6b718bc08 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d6b718bed8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55d6b718bde8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d6b718c128 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55d6b718bfa0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d6b718c018 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d6b718c1e8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d6b718c448 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55d6b718c350 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55d6b718c518 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b7176668 prev 0x55d6b7159bc8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6b7176760 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55d6b7176850 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55d6b719e140 <col:16, line:828:9>
|-CXXDestructorDecl 0x55d6b7176940 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55d6b719e150 <col:25, line:830:9>
|-CXXMethodDecl 0x55d6b7176a40 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55d6b7176af0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55d6b7176b98 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d6b7176b98
| `-ParmVarDecl 0x55d6b7176ca8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55d6b7177468 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d6b7177468
  `-ParmVarDecl 0x55d6b7177578 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b71599d8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55d6b7159b38 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55d6b7159bc8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55d6b7159c80 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55d6b7159d88 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55d6b7159cb8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d6b718f3f8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d6b718f3d8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d6b715a0a8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b7159f20 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55d6b7159f98 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d6b718f430 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d6b718f410 <col:59> 'int' 0
|-CXXConstructorDecl 0x55d6b715a280 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b715a170 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55d6b715a1e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d6b718f468 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d6b718f448 <col:55> 'int' 0
|-CXXConstructorDecl 0x55d6b715a638 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6b715a420 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55d6b715a498 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55d6b715a510 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d6b718f4a0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d6b718f480 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d6b715a7f8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55d6b715a738 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55d6b715a8f0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55d6b715aad8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55d6b715a9e0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55d6b715abc8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55d6b718f850 <col:24, line:291:5>
|   `-ReturnStmt 0x55d6b718f840 <line:290:9, col:79>
|     `-BinaryOperator 0x55d6b718f820 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55d6b718f6f8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55d6b718f650 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55d6b718f630 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55d6b718f528 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55d6b718f510 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55d6b718f4f8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55d6b718f4c8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55d6b7178490
|       | |   |       `-CXXThisExpr 0x55d6b718f4b8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55d6b718f618 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55d6b718f600 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55d6b718f5c8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55d6b718f598 <col:28, col:35> '<bound member function type>' ->size 0x55d6b7143208
|       | |           `-ImplicitCastExpr 0x55d6b718f5e8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55d6b718f580 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55d6b718f550 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55d6b7178490
|       | |                 `-CXXThisExpr 0x55d6b718f540 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55d6b718f6e0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55d6b718f6c8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55d6b718f6b0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55d6b718f680 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55d6b718c660
|       |         `-CXXThisExpr 0x55d6b718f670 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55d6b718f800 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55d6b718f7e8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d6b718f7d0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d6b718f790 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d6b718f778 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d6b718f728 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d6b718c710
|         |     |   `-CXXThisExpr 0x55d6b718f718 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d6b718f758 <col:73> 'int' 0
|         `-IntegerLiteral 0x55d6b718f7b0 <col:79> 'int' 0
|-CXXMethodDecl 0x55d6b715ac88 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55d6b718fa28 <col:32, line:296:5>
|   `-ReturnStmt 0x55d6b718fa18 <line:295:9, col:49>
|     `-BinaryOperator 0x55d6b718f9f8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55d6b718f8d8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55d6b718f8c0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55d6b718f8a8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55d6b718f878 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55d6b718c660
|       |       `-CXXThisExpr 0x55d6b718f868 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55d6b718f9d8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55d6b718f9c0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d6b718f9a8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d6b718f968 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d6b718f950 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d6b718f900 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d6b718c710
|         |     |   `-CXXThisExpr 0x55d6b718f8f0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d6b718f930 <col:43> 'int' 0
|         `-IntegerLiteral 0x55d6b718f988 <col:49> 'int' 0
|-CXXMethodDecl 0x55d6b715ad78 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55d6b718fc38 <col:19, line:306:5>
|   |-IfStmt 0x55d6b718fb58 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55d6b718fa98 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55d6b718fa80 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55d6b718fa50 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d6b7178490
|   | |     `-CXXThisExpr 0x55d6b718fa40 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55d6b718fb38 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55d6b718fb08 <col:13, col:20> '<bound member function type>' ->clear 0x55d6b7145c08
|   |     `-ImplicitCastExpr 0x55d6b718faf0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55d6b718fac0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d6b7178490
|   |         `-CXXThisExpr 0x55d6b718fab0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55d6b718fbe0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55d6b718fbb0 <col:9, col:16> '<bound member function type>' .clear 0x55d6b718c1e8
|   |   `-MemberExpr 0x55d6b718fb80 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55d6b718c600
|   |     `-CXXThisExpr 0x55d6b718fb70 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55d6b718fc28 <line:305:9, col:17>
|     `-UnaryOperator 0x55d6b718fc10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b718fc00 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d6b715aff8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55d6b715af00 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55d6b715b178 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55d6b715b0b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55d6b715b4f8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55d6b715b220 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55d6b715b458 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55d6b715b2c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55d6b715b340 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55d6b718ff58 <col:67, line:327:5>
|     |-WhileStmt 0x55d6b718ff08 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55d6b718fd20 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55d6b718fca0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55d6b709d2d8 0x55d6b6ee6b78 0x55d6b6ee6850 0x55d6b6edc460 0x55d6b6edc110 0x55d6b6edba00 0x55d6b6eac890 0x55d6b6e3a540
|     | | |-DeclRefExpr 0x55d6b718fc60 <col:16> 'Iter' lvalue ParmVar 0x55d6b715b2c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55d6b718fc80 <col:25> 'Iter' lvalue ParmVar 0x55d6b715b340 'end' 'Iter'
|     | `-CompoundStmt 0x55d6b718fee8 <col:30, line:325:9>
|     |   |-CallExpr 0x55d6b718fe88 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55d6b718fd68 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55d6b718fe58 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55d6b718fde8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|     |   |   `-DeclRefExpr 0x55d6b718fdc8 <col:24> 'Iter' lvalue ParmVar 0x55d6b715b2c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55d6b718fed0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55d6b718feb0 <col:15> 'Iter' lvalue ParmVar 0x55d6b715b2c8 'begin' 'Iter'
|     `-ReturnStmt 0x55d6b718ff48 <line:326:9, col:17>
|       `-UnaryOperator 0x55d6b718ff30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b718ff20 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d6b715b600 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55d6b715b570 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55d6b715b748 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55d6b715b6b8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55d6b715b810 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55d6b7190038 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55d6b718ffd8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55d6b718ff88 <col:9> '<bound member function type>' ->reset_from 0x55d6b718ca88
|   | | `-CXXThisExpr 0x55d6b718ff78 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55d6b718ffb8 <col:20> 'int' 0
|   `-ReturnStmt 0x55d6b7190028 <line:352:9, col:17>
|     `-UnaryOperator 0x55d6b7190010 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b7190000 <col:17> 'Args *' this
|-VarDecl 0x55d6b715b8c8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d6b715b930 <col:38> 'int' 1
|-VarDecl 0x55d6b715b9c0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d6b715ba28 <col:39> 'int' 2
|-VarDecl 0x55d6b715bab8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d6b715bb20 <col:39> 'int' 4
|-VarDecl 0x55d6b715bbb0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d6b715bc18 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55d6b715bf98 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55d6b715bc90 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6b715bef8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d6b715bd40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715bde8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7190190 <col:43, line:371:5>
|     `-ReturnStmt 0x55d6b7190180 <line:370:9, col:34>
|       `-CallExpr 0x55d6b7190148 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7190068 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b71900e8 <col:21> 'const char *' lvalue ParmVar 0x55d6b715bd40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b7190108 <col:30> 'int' 0
|         `-DeclRefExpr 0x55d6b7190128 <col:33> 'T' lvalue ParmVar 0x55d6b715bde8 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b715c2c8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55d6b715c000 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6b715c228 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d6b715c0b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715c158 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55d6b71902e0 <col:45, line:375:5>
|     `-ReturnStmt 0x55d6b71902d0 <line:374:9, col:42>
|       `-CallExpr 0x55d6b7190298 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b71901b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7190238 <col:21> 'const char *' lvalue ParmVar 0x55d6b715c0b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7190258 <col:30> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d6b7190278 <col:41> 'T' lvalue ParmVar 0x55d6b715c158 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b715c5f8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55d6b715c330 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55d6b715c558 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55d6b715c3e0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55d6b715c488 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55d6b7190430 <col:45, line:379:5>
| |   `-ReturnStmt 0x55d6b7190420 <line:378:9, col:43>
| |     `-CallExpr 0x55d6b71903e8 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55d6b7190308 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55d6b7190388 <col:21> 'const char *' lvalue ParmVar 0x55d6b715c3e0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55d6b71903a8 <col:30> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int'
| |       `-DeclRefExpr 0x55d6b71903c8 <col:42> 'T' lvalue ParmVar 0x55d6b715c488 'x' 'T &'
| `-CXXMethodDecl 0x55d6b71eeaa8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55d6b71ee8c8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55d6b71ee998 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x55d6b715c928 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55d6b715c660 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55d6b715c888 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55d6b715c710 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55d6b715c7b8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55d6b7190630 <col:46, line:383:5>
| |   `-ReturnStmt 0x55d6b7190620 <line:382:9, col:55>
| |     `-CallExpr 0x55d6b71905e8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55d6b7190458 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55d6b71904d8 <col:21> 'const char *' lvalue ParmVar 0x55d6b715c710 'keyword' 'const char *'
| |       |-BinaryOperator 0x55d6b71905a8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55d6b7190558 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55d6b7190538 <col:30> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55d6b7190590 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55d6b7190570 <col:42> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55d6b71905c8 <col:54> 'T' lvalue ParmVar 0x55d6b715c7b8 'x' 'T &'
| |-CXXMethodDecl 0x55d6b71df028 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x55d6b71dee48 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x55d6b71def18 <col:40, col:43> col:43 x 'unsigned int &'
| |-CXXMethodDecl 0x55d6b71ecbb8 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55d6b71ec9d0 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x55d6b71ecaa8 <col:40, col:43> col:43 x 'int &'
| `-CXXMethodDecl 0x55d6b71ede38 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, in_addr &)'
|   |-TemplateArgument type 'in_addr'
|   |-ParmVarDecl 0x55d6b71edc50 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55d6b71edd28 <col:40, col:43> col:43 x 'in_addr &'
|-FunctionTemplateDecl 0x55d6b715cd28 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55d6b715c990 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6b715cc88 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55d6b715ca40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715cac0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b715cb68 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7190770 <col:54, line:388:5>
|     |-CallExpr 0x55d6b71906f8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b7190648 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d6b7190688 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d6b7190698 <col:30> 'const char *' lvalue ParmVar 0x55d6b715ca40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6b71906b8 <col:39> 'int' lvalue ParmVar 0x55d6b715cac0 'flags' 'int'
|     | `-DeclRefExpr 0x55d6b71906d8 <col:46> 'T' lvalue ParmVar 0x55d6b715cb68 'x' 'T &'
|     `-ReturnStmt 0x55d6b7190760 <line:387:9, col:17>
|       `-UnaryOperator 0x55d6b7190748 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b7190738 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b715d1d8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55d6b715cd98 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6b715ce18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6b715d138 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d6b715ced8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715cf78 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55d6b715d018 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6b71908e0 <col:74, line:403:5>
|     `-ReturnStmt 0x55d6b71908d0 <line:402:9, col:56>
|       `-CallExpr 0x55d6b7190890 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b71907a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7190810 <col:28> 'const char *' lvalue ParmVar 0x55d6b715ced8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b7190830 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d6b7190850 <col:40> 'T' lvalue ParmVar 0x55d6b715cf78 'x' 'T &'
|         `-DeclRefExpr 0x55d6b7190870 <col:43> 'const V' lvalue ParmVar 0x55d6b715d018 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d6b715d648 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d6b715d248 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6b715d2c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6b715d5a8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d6b715d388 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715d428 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55d6b715d4c8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6b7190a48 <col:76, line:407:5>
|     `-ReturnStmt 0x55d6b7190a38 <line:406:9, col:65>
|       `-CallExpr 0x55d6b71909f8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7190908 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7190978 <col:28> 'const char *' lvalue ParmVar 0x55d6b715d388 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7190998 <col:37> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int'
|         |-DeclRefExpr 0x55d6b71909b8 <col:49> 'T' lvalue ParmVar 0x55d6b715d428 'x' 'T &'
|         `-DeclRefExpr 0x55d6b71909d8 <col:52> 'const V' lvalue ParmVar 0x55d6b715d4c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d6b715db98 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55d6b715d6b8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6b715d738 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6b715daf8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d6b715d7f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715d878 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b715d918 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55d6b715d9b8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6b7190bb0 <col:85, line:412:5>
|     |-CallExpr 0x55d6b7190b30 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b7190a60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d6b7190aa0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d6b7190ab0 <col:37> 'const char *' lvalue ParmVar 0x55d6b715d7f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6b7190ad0 <col:46> 'int' lvalue ParmVar 0x55d6b715d878 'flags' 'int'
|     | |-DeclRefExpr 0x55d6b7190af0 <col:53> 'T' lvalue ParmVar 0x55d6b715d918 'x' 'T &'
|     | `-DeclRefExpr 0x55d6b7190b10 <col:56> 'const V' lvalue ParmVar 0x55d6b715d9b8 'default_value' 'const V &'
|     `-ReturnStmt 0x55d6b7190ba0 <line:411:9, col:17>
|       `-UnaryOperator 0x55d6b7190b88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b7190b78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b715e028 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55d6b715dc10 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b715dc88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b715df88 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6b715dd48 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715ddc0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b715de68 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7190d30 <col:53, line:425:5>
|     `-ReturnStmt 0x55d6b7190d20 <line:424:9, col:42>
|       `-CallExpr 0x55d6b7190ce0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7190be0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7190c60 <col:21> 'const char *' lvalue ParmVar 0x55d6b715dd48 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b7190c80 <col:30> 'int' 0
|         |-DeclRefExpr 0x55d6b7190ca0 <col:33> 'P' lvalue ParmVar 0x55d6b715ddc0 'parser' 'P'
|         `-DeclRefExpr 0x55d6b7190cc0 <col:41> 'T' lvalue ParmVar 0x55d6b715de68 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b715e478 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55d6b715e098 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b715e118 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b715e3d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6b715e1d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715e250 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b715e2f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7190ea8 <col:55, line:429:5>
|     `-ReturnStmt 0x55d6b7190e98 <line:428:9, col:50>
|       `-CallExpr 0x55d6b7190e58 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7190d58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7190dd8 <col:21> 'const char *' lvalue ParmVar 0x55d6b715e1d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7190df8 <col:30> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d6b7190e18 <col:41> 'P' lvalue ParmVar 0x55d6b715e250 'parser' 'P'
|         `-DeclRefExpr 0x55d6b7190e38 <col:49> 'T' lvalue ParmVar 0x55d6b715e2f8 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b715e8c8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55d6b715e4e8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b715e568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b715e828 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6b715e628 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715e6a0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b715e748 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7191020 <col:55, line:433:5>
|     `-ReturnStmt 0x55d6b7191010 <line:432:9, col:51>
|       `-CallExpr 0x55d6b7190fd0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7190ed0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7190f50 <col:21> 'const char *' lvalue ParmVar 0x55d6b715e628 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7190f70 <col:30> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int'
|         |-DeclRefExpr 0x55d6b7190f90 <col:42> 'P' lvalue ParmVar 0x55d6b715e6a0 'parser' 'P'
|         `-DeclRefExpr 0x55d6b7190fb0 <col:50> 'T' lvalue ParmVar 0x55d6b715e748 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b715ed18 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55d6b715e938 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b715e9b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55d6b715ec78 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55d6b715ea78 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55d6b715eaf0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55d6b715eb98 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55d6b7191248 <col:56, line:437:5>
| |   `-ReturnStmt 0x55d6b7191238 <line:436:9, col:63>
| |     `-CallExpr 0x55d6b71911f8 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55d6b7191048 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55d6b71910c8 <col:21> 'const char *' lvalue ParmVar 0x55d6b715ea78 'keyword' 'const char *'
| |       |-BinaryOperator 0x55d6b7191198 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55d6b7191148 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55d6b7191128 <col:30> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55d6b7191180 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55d6b7191160 <col:42> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55d6b71911b8 <col:54> 'P' lvalue ParmVar 0x55d6b715eaf0 'parser' 'P'
| |       `-DeclRefExpr 0x55d6b71911d8 <col:62> 'T' lvalue ParmVar 0x55d6b715eb98 'x' 'T &'
| `-CXXMethodDecl 0x55d6b71ed818 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, EtherAddressArg, unsigned char &[6])'
|   |-TemplateArgument type 'EtherAddressArg'
|   |-TemplateArgument type 'unsigned char [6]'
|   |-ParmVarDecl 0x55d6b71ed558 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55d6b71ed5f8 <col:40, col:42> col:42 parser 'EtherAddressArg':'EtherAddressArg'
|   `-ParmVarDecl 0x55d6b71ed6f8 <col:50, col:53> col:53 x 'unsigned char &[6]'
|-FunctionTemplateDecl 0x55d6b715f248 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55d6b715ed88 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b715ee08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b715f1a8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6b715eec8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715ef48 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b715efc0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b715f068 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55d6b71913b0 <col:64, line:442:5>
|     |-CallExpr 0x55d6b7191330 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b7191260 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d6b71912a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d6b71912b0 <col:30> 'const char *' lvalue ParmVar 0x55d6b715eec8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6b71912d0 <col:39> 'int' lvalue ParmVar 0x55d6b715ef48 'flags' 'int'
|     | |-DeclRefExpr 0x55d6b71912f0 <col:46> 'P' lvalue ParmVar 0x55d6b715efc0 'parser' 'P'
|     | `-DeclRefExpr 0x55d6b7191310 <col:54> 'T' lvalue ParmVar 0x55d6b715f068 'x' 'T &'
|     `-ReturnStmt 0x55d6b71913a0 <line:441:9, col:17>
|       `-UnaryOperator 0x55d6b7191388 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b7191378 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b715f848 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55d6b715f2c0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b715f338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d6b715f3b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d6b715f7a8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d6b715f480 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715f4f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b715f598 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55d6b715f668 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6b7191548 <col:84, line:458:5>
|     `-ReturnStmt 0x55d6b7191538 <line:457:9, col:64>
|       `-CallExpr 0x55d6b71914f0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b71913e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7191450 <col:28> 'const char *' lvalue ParmVar 0x55d6b715f480 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b7191470 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d6b7191490 <col:40> 'P' lvalue ParmVar 0x55d6b715f4f8 'parser' 'P'
|         |-DeclRefExpr 0x55d6b71914b0 <col:48> 'T' lvalue ParmVar 0x55d6b715f598 'x' 'T &'
|         `-DeclRefExpr 0x55d6b71914d0 <col:51> 'const V' lvalue ParmVar 0x55d6b715f668 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d6b715fdc8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d6b715f8c0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b715f938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d6b715f9b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d6b715fd28 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d6b715fa80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b715faf8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b715fb98 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55d6b715fc38 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6b71916d8 <col:86, line:462:5>
|     `-ReturnStmt 0x55d6b71916c8 <line:461:9, col:73>
|       `-CallExpr 0x55d6b7191680 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7191570 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b71915e0 <col:28> 'const char *' lvalue ParmVar 0x55d6b715fa80 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7191600 <col:37> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int'
|         |-DeclRefExpr 0x55d6b7191620 <col:49> 'P' lvalue ParmVar 0x55d6b715faf8 'parser' 'P'
|         |-DeclRefExpr 0x55d6b7191640 <col:57> 'T' lvalue ParmVar 0x55d6b715fb98 'x' 'T &'
|         `-DeclRefExpr 0x55d6b7191660 <col:60> 'const V' lvalue ParmVar 0x55d6b715fc38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d6b7160428 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55d6b715fe40 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b715feb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d6b715ff38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d6b7160388 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d6b7160000 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7160080 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b71600f8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7160198 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55d6b7160238 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6b7191868 <col:95, line:467:5>
|     |-CallExpr 0x55d6b71917e0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b71916f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d6b7191730 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d6b7191740 <col:37> 'const char *' lvalue ParmVar 0x55d6b7160000 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6b7191760 <col:46> 'int' lvalue ParmVar 0x55d6b7160080 'flags' 'int'
|     | |-DeclRefExpr 0x55d6b7191780 <col:53> 'P' lvalue ParmVar 0x55d6b71600f8 'parser' 'P'
|     | |-DeclRefExpr 0x55d6b71917a0 <col:61> 'T' lvalue ParmVar 0x55d6b7160198 'x' 'T &'
|     | `-DeclRefExpr 0x55d6b71917c0 <col:64> 'const V' lvalue ParmVar 0x55d6b7160238 'default_value' 'const V &'
|     `-ReturnStmt 0x55d6b7191858 <line:466:9, col:17>
|       `-UnaryOperator 0x55d6b7191840 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b7191830 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b7164e98 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55d6b71604a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7160528 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6b7164a38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6b7164df8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6b7164b00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7164b78 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7164c18 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6b7164cb8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6b7191a10 <col:63, line:481:5>
|     `-ReturnStmt 0x55d6b7191a00 <line:480:9, col:47>
|       `-CallExpr 0x55d6b71919b8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7191898 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7191918 <col:21> 'const char *' lvalue ParmVar 0x55d6b7164b00 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b7191938 <col:30> 'int' 0
|         |-DeclRefExpr 0x55d6b7191958 <col:33> 'P' lvalue ParmVar 0x55d6b7164b78 'parser' 'P'
|         |-DeclRefExpr 0x55d6b7191978 <col:41> 'T1' lvalue ParmVar 0x55d6b7164c18 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d6b7191998 <col:45> 'T2' lvalue ParmVar 0x55d6b7164cb8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d6b7165418 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55d6b7164f10 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7164f88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6b7165008 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6b7165378 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6b71650d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7165148 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b71651e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6b7165288 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6b7191bb0 <col:65, line:485:5>
|     `-ReturnStmt 0x55d6b7191ba0 <line:484:9, col:55>
|       `-CallExpr 0x55d6b7191b58 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7191a38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7191ab8 <col:21> 'const char *' lvalue ParmVar 0x55d6b71650d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7191ad8 <col:30> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d6b7191af8 <col:41> 'P' lvalue ParmVar 0x55d6b7165148 'parser' 'P'
|         |-DeclRefExpr 0x55d6b7191b18 <col:49> 'T1' lvalue ParmVar 0x55d6b71651e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d6b7191b38 <col:53> 'T2' lvalue ParmVar 0x55d6b7165288 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d6b7165998 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55d6b7165490 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7165508 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6b7165588 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6b71658f8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6b7165650 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b71656c8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7165768 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6b7165808 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6b7191d50 <col:65, line:489:5>
|     `-ReturnStmt 0x55d6b7191d40 <line:488:9, col:56>
|       `-CallExpr 0x55d6b7191cf8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7191bd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7191c58 <col:21> 'const char *' lvalue ParmVar 0x55d6b7165650 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7191c78 <col:30> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int'
|         |-DeclRefExpr 0x55d6b7191c98 <col:42> 'P' lvalue ParmVar 0x55d6b71656c8 'parser' 'P'
|         |-DeclRefExpr 0x55d6b7191cb8 <col:50> 'T1' lvalue ParmVar 0x55d6b7165768 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d6b7191cd8 <col:54> 'T2' lvalue ParmVar 0x55d6b7165808 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d6b7165f18 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55d6b7165a10 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7165a88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6b7165b08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6b7165e78 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6b7165bd0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7165c48 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7165ce8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6b7165d88 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6b7191fa0 <col:66, line:493:5>
|     `-ReturnStmt 0x55d6b7191f90 <line:492:9, col:68>
|       `-CallExpr 0x55d6b7191f48 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7191d78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7191df8 <col:21> 'const char *' lvalue ParmVar 0x55d6b7165bd0 'keyword' 'const char *'
|         |-BinaryOperator 0x55d6b7191ec8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d6b7191e78 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d6b7191e58 <col:30> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d6b7191eb0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d6b7191e90 <col:42> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55d6b7191ee8 <col:54> 'P' lvalue ParmVar 0x55d6b7165c48 'parser' 'P'
|         |-DeclRefExpr 0x55d6b7191f08 <col:62> 'T1' lvalue ParmVar 0x55d6b7165ce8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d6b7191f28 <col:66> 'T2' lvalue ParmVar 0x55d6b7165d88 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d6b7166578 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55d6b7165f90 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7166008 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6b7166088 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6b71664d8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6b7166150 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b71661d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b7166248 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b71662e8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6b7166388 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6b7192130 <col:74, line:498:5>
|     |-CallExpr 0x55d6b71920a8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b7191fb8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d6b7191ff8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d6b7192008 <col:30> 'const char *' lvalue ParmVar 0x55d6b7166150 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6b7192028 <col:39> 'int' lvalue ParmVar 0x55d6b71661d0 'flags' 'int'
|     | |-DeclRefExpr 0x55d6b7192048 <col:46> 'P' lvalue ParmVar 0x55d6b7166248 'parser' 'P'
|     | |-DeclRefExpr 0x55d6b7192068 <col:54> 'T1' lvalue ParmVar 0x55d6b71662e8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55d6b7192088 <col:58> 'T2' lvalue ParmVar 0x55d6b7166388 'x2' 'T2 &'
|     `-ReturnStmt 0x55d6b7192120 <line:497:9, col:17>
|       `-UnaryOperator 0x55d6b7192108 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b71920f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b71668d8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55d6b71665f8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6b7166838 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6b71666b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7166728 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55d6b7192278 <col:52, line:509:5>
|     `-ReturnStmt 0x55d6b7192268 <line:508:9, col:44>
|       `-CallExpr 0x55d6b7192230 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7192160 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b71921d0 <col:26> 'const char *' lvalue ParmVar 0x55d6b71666b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b71921f0 <col:35> 'int' 0
|         `-DeclRefExpr 0x55d6b7192210 <col:38> 'P' lvalue ParmVar 0x55d6b7166728 'parser' 'P'
|-FunctionTemplateDecl 0x55d6b7166bd8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55d6b7166940 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6b7166b38 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6b71669f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7166a68 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d6b71923b8 <col:54, line:513:5>
|     `-ReturnStmt 0x55d6b71923a8 <line:512:9, col:52>
|       `-CallExpr 0x55d6b7192370 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b71922a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7192310 <col:26> 'const char *' lvalue ParmVar 0x55d6b71669f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7192330 <col:35> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d6b7192350 <col:46> 'P' lvalue ParmVar 0x55d6b7166a68 'parser' 'P'
|-FunctionTemplateDecl 0x55d6b7166ed8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55d6b7166c40 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6b7166e38 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6b7166cf0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7166d68 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d6b71924f8 <col:54, line:517:5>
|     `-ReturnStmt 0x55d6b71924e8 <line:516:9, col:53>
|       `-CallExpr 0x55d6b71924b0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b71923e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7192450 <col:26> 'const char *' lvalue ParmVar 0x55d6b7166cf0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7192470 <col:35> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int'
|         `-DeclRefExpr 0x55d6b7192490 <col:47> 'P' lvalue ParmVar 0x55d6b7166d68 'parser' 'P'
|-FunctionTemplateDecl 0x55d6b71671d8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d6b7166f40 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6b7167138 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6b7166ff0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7167068 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55d6b71926e8 <col:55, line:521:5>
|     `-ReturnStmt 0x55d6b71926d8 <line:520:9, col:65>
|       `-CallExpr 0x55d6b71926a0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7192520 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7192590 <col:26> 'const char *' lvalue ParmVar 0x55d6b7166ff0 'keyword' 'const char *'
|         |-BinaryOperator 0x55d6b7192660 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55d6b7192610 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d6b71925f0 <col:35> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d6b7192648 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d6b7192628 <col:47> 'const int' lvalue Var 0x55d6b715b9c0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55d6b7192680 <col:59> 'P' lvalue ParmVar 0x55d6b7167068 'parser' 'P'
|-FunctionTemplateDecl 0x55d6b71675a8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55d6b7167240 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6b7167508 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d6b71672f0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7167370 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b71673e8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55d6b7192828 <col:63, line:526:5>
|     |-CallExpr 0x55d6b71927b0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b7192700 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55d6b7192740 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55d6b7192750 <col:35> 'const char *' lvalue ParmVar 0x55d6b71672f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6b7192770 <col:44> 'int' lvalue ParmVar 0x55d6b7167370 'flags' 'int'
|     | `-DeclRefExpr 0x55d6b7192790 <col:51> 'P' lvalue ParmVar 0x55d6b71673e8 'parser' 'P'
|     `-ReturnStmt 0x55d6b7192818 <line:525:9, col:17>
|       `-UnaryOperator 0x55d6b7192800 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b71927f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b71679f8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55d6b7167618 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7167698 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b7167958 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6b7167758 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b71677d0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7167878 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7192980 <col:58, line:541:5>
|     `-ReturnStmt 0x55d6b7192970 <line:540:9, col:39>
|       `-CallExpr 0x55d6b7192938 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7192858 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b71928d8 <col:21> 'const char *' lvalue ParmVar 0x55d6b7167758 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b71928f8 <col:30> 'P' lvalue ParmVar 0x55d6b71677d0 'parser' 'P'
|         `-DeclRefExpr 0x55d6b7192918 <col:38> 'T' lvalue ParmVar 0x55d6b7167878 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b7167e48 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55d6b7167a68 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7167ae8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b7167da8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6b7167ba8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7167c20 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7167cc8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7192ab8 <col:60, line:545:5>
|     `-ReturnStmt 0x55d6b7192aa8 <line:544:9, col:41>
|       `-CallExpr 0x55d6b7192a70 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b71929a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7192a10 <col:23> 'const char *' lvalue ParmVar 0x55d6b7167ba8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7192a30 <col:32> 'P' lvalue ParmVar 0x55d6b7167c20 'parser' 'P'
|         `-DeclRefExpr 0x55d6b7192a50 <col:40> 'T' lvalue ParmVar 0x55d6b7167cc8 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b7168298 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55d6b7167eb8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7167f38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b71681f8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6b7167ff8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7168070 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7168118 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7192bf0 <col:60, line:549:5>
|     `-ReturnStmt 0x55d6b7192be0 <line:548:9, col:41>
|       `-CallExpr 0x55d6b7192ba8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7192ae0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7192b48 <col:23> 'const char *' lvalue ParmVar 0x55d6b7167ff8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7192b68 <col:32> 'P' lvalue ParmVar 0x55d6b7168070 'parser' 'P'
|         `-DeclRefExpr 0x55d6b7192b88 <col:40> 'T' lvalue ParmVar 0x55d6b7168118 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b71686e8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d6b7168308 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7168388 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b7168648 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6b7168448 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b71684c0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7168568 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7192d28 <col:61, line:553:5>
|     `-ReturnStmt 0x55d6b7192d18 <line:552:9, col:42>
|       `-CallExpr 0x55d6b7192ce0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7192c18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7192c80 <col:24> 'const char *' lvalue ParmVar 0x55d6b7168448 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7192ca0 <col:33> 'P' lvalue ParmVar 0x55d6b71684c0 'parser' 'P'
|         `-DeclRefExpr 0x55d6b7192cc0 <col:41> 'T' lvalue ParmVar 0x55d6b7168568 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b7168bc8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55d6b7168758 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b71687d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b7168b28 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6b7168898 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7168918 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b7168990 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7168a38 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7192ea0 <col:69, line:557:5>
|     `-ReturnStmt 0x55d6b7192e90 <line:556:9, col:46>
|       `-CallExpr 0x55d6b7192e50 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7192d50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7192dd0 <col:21> 'const char *' lvalue ParmVar 0x55d6b7168898 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7192df0 <col:30> 'int' lvalue ParmVar 0x55d6b7168918 'flags' 'int'
|         |-DeclRefExpr 0x55d6b7192e10 <col:37> 'P' lvalue ParmVar 0x55d6b7168990 'parser' 'P'
|         `-DeclRefExpr 0x55d6b7192e30 <col:45> 'T' lvalue ParmVar 0x55d6b7168a38 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b7168ed8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55d6b7168c40 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6b7168e38 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6b7168cf0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7168d68 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55d6b7192fe0 <col:56, line:571:5>
|     `-ReturnStmt 0x55d6b7192fd0 <line:570:9, col:48>
|       `-CallExpr 0x55d6b7192f98 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7192ec8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7192f38 <col:30> 'const char *' lvalue ParmVar 0x55d6b7168cf0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b7192f58 <col:39> 'int' 0
|         `-DeclRefExpr 0x55d6b7192f78 <col:42> 'P' lvalue ParmVar 0x55d6b7168d68 'parser' 'P'
|-FunctionTemplateDecl 0x55d6b7169268 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55d6b7168f40 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6b71691c8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d6b7168ff0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7169070 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b71690e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d6b71931b0 <col:67, line:576:5>
|     |-CallExpr 0x55d6b7193138 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b7192ff8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d6b7193038 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d6b7193048 <col:39> 'const char *' lvalue ParmVar 0x55d6b7168ff0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d6b71930f8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d6b71930a8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d6b7193068 <col:48> 'int' lvalue ParmVar 0x55d6b7169070 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d6b71930e0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d6b71930c0 <col:56> 'const int' lvalue Var 0x55d6b715bbb0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55d6b7193118 <col:68> 'P' lvalue ParmVar 0x55d6b71690e8 'parser' 'P'
|     `-ReturnStmt 0x55d6b71931a0 <line:575:9, col:17>
|       `-UnaryOperator 0x55d6b7193188 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b7193178 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b71696b8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55d6b71692d8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7169358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b7169618 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6b7169418 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7169490 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7169538 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7193320 <col:62, line:592:5>
|     `-ReturnStmt 0x55d6b7193310 <line:591:9, col:51>
|       `-CallExpr 0x55d6b71932d0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b71931e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7193250 <col:30> 'const char *' lvalue ParmVar 0x55d6b7169418 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b7193270 <col:39> 'int' 0
|         |-DeclRefExpr 0x55d6b7193290 <col:42> 'P' lvalue ParmVar 0x55d6b7169490 'parser' 'P'
|         `-DeclRefExpr 0x55d6b71932b0 <col:50> 'T' lvalue ParmVar 0x55d6b7169538 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b7169b98 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55d6b7169728 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b71697a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b7169af8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6b7169868 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b71698e8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b7169960 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7169a08 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55d6b7193518 <col:73, line:597:5>
|     |-CallExpr 0x55d6b7193498 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b7193338 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d6b7193378 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d6b7193388 <col:39> 'const char *' lvalue ParmVar 0x55d6b7169868 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d6b7193438 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d6b71933e8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d6b71933a8 <col:48> 'int' lvalue ParmVar 0x55d6b71698e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d6b7193420 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d6b7193400 <col:56> 'const int' lvalue Var 0x55d6b715bbb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d6b7193458 <col:68> 'P' lvalue ParmVar 0x55d6b7169960 'parser' 'P'
|     | `-DeclRefExpr 0x55d6b7193478 <col:76> 'T' lvalue ParmVar 0x55d6b7169a08 'x' 'T &'
|     `-ReturnStmt 0x55d6b7193508 <line:596:9, col:17>
|       `-UnaryOperator 0x55d6b71934f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b71934e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b716a148 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55d6b7169c10 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7169c88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b716a0a8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d6b7169d48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7169dc0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7169f80 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d6b7193688 <col:65, line:614:5>
|     `-ReturnStmt 0x55d6b7193678 <line:613:9, col:46>
|       `-CallExpr 0x55d6b7193638 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7193548 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b71935b8 <col:25> 'const char *' lvalue ParmVar 0x55d6b7169d48 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b71935d8 <col:34> 'int' 0
|         |-DeclRefExpr 0x55d6b71935f8 <col:37> 'P' lvalue ParmVar 0x55d6b7169dc0 'parser' 'P'
|         `-DeclRefExpr 0x55d6b7193618 <col:45> 'Vector<T>' lvalue ParmVar 0x55d6b7169f80 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d6b716a578 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55d6b716a1b8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6b716a4d8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55d6b716a270 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b716a3c0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d6b71938a0 <col:55, line:618:5>
|     `-ReturnStmt 0x55d6b7193890 <line:617:9, col:55>
|       `-CallExpr 0x55d6b7193850 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b71936b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7193720 <col:25> 'const char *' lvalue ParmVar 0x55d6b716a270 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6b7193740 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55d6b7193810 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d6b7193830 <col:54> 'Vector<T>' lvalue ParmVar 0x55d6b716a3c0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d6b716ab48 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55d6b716a5e0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b716a658 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b716aaa8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d6b716a718 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b716a798 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b716a810 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b716a960 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d6b7193a98 <col:76, line:623:5>
|     |-CallExpr 0x55d6b7193a18 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b71938b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55d6b71938f8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55d6b7193908 <col:34> 'const char *' lvalue ParmVar 0x55d6b716a718 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d6b71939b8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d6b7193968 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d6b7193928 <col:43> 'int' lvalue ParmVar 0x55d6b716a798 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d6b71939a0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d6b7193980 <col:51> 'const int' lvalue Var 0x55d6b715bbb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d6b71939d8 <col:63> 'P' lvalue ParmVar 0x55d6b716a810 'parser' 'P'
|     | `-DeclRefExpr 0x55d6b71939f8 <col:71> 'Vector<T>' lvalue ParmVar 0x55d6b716a960 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55d6b7193a88 <line:622:9, col:17>
|       `-UnaryOperator 0x55d6b7193a70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b7193a60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b716b088 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55d6b716abc0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b716ac38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b716afe8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55d6b716acf8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b716ad78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b716aec0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d6b7193d00 <col:66, line:627:5>
|     `-ReturnStmt 0x55d6b7193cf0 <line:626:9, col:59>
|       `-CallExpr 0x55d6b7193cb0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6b7193ac8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6b7193b38 <col:25> 'const char *' lvalue ParmVar 0x55d6b716acf8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6b7193b58 <col:34> 'int' lvalue ParmVar 0x55d6b716ad78 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55d6b7193c70 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d6b7193c90 <col:58> 'Vector<T>' lvalue ParmVar 0x55d6b716aec0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55d6b716b118 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55d6b7193d80 <col:25, line:633:5>
|   `-ReturnStmt 0x55d6b7193d70 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55d6b7193d58 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d6b7193d28 <col:16> 'const bool' lvalue ->_status 0x55d6b71782f8
|         `-CXXThisExpr 0x55d6b7193d18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d6b716b298 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55d6b716b1d0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55d6b7193e68 <col:27, line:639:5>
|   |-BinaryOperator 0x55d6b7193e10 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d6b7193d98 <col:9> 'bool' lvalue ParmVar 0x55d6b716b1d0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d6b7193df8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d6b7193dc8 <col:13> 'bool' lvalue ->_status 0x55d6b71782f8
|   |     `-CXXThisExpr 0x55d6b7193db8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d6b7193e58 <line:638:9, col:17>
|     `-UnaryOperator 0x55d6b7193e40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b7193e30 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d6b716b418 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d6b716b358 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55d6b7193f58 <col:39, line:644:5>
|   |-BinaryOperator 0x55d6b7193f00 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d6b7193e88 <col:9> 'bool' lvalue ParmVar 0x55d6b716b358 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d6b7193ee8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d6b7193eb8 <col:13> 'const bool' lvalue ->_status 0x55d6b71782f8
|   |     `-CXXThisExpr 0x55d6b7193ea8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d6b7193f48 <line:643:9, col:17>
|     `-UnaryOperator 0x55d6b7193f30 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b7193f20 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d6b716b4e0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55d6b7194000 <col:30, line:651:5>
|   `-ReturnStmt 0x55d6b7193ff0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55d6b7193fd8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d6b7193fa8 <col:16> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|         `-ImplicitCastExpr 0x55d6b7193f88 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55d6b7193f78 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d6b716b628 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55d6b716b598 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55d6b7194108 <col:32, line:658:5>
|   |-BinaryOperator 0x55d6b71940b0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d6b7194018 <col:9> 'bool' lvalue ParmVar 0x55d6b716b598 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d6b7194098 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d6b7194068 <col:13> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|   |     `-ImplicitCastExpr 0x55d6b7194048 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d6b7194038 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d6b71940f8 <line:657:9, col:17>
|     `-UnaryOperator 0x55d6b71940e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b71940d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d6b716b778 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d6b716b6e8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55d6b7194218 <col:44, line:663:5>
|   |-BinaryOperator 0x55d6b71941c0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d6b7194128 <col:9> 'bool' lvalue ParmVar 0x55d6b716b6e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d6b71941a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d6b7194178 <col:13> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|   |     `-ImplicitCastExpr 0x55d6b7194158 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d6b7194148 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d6b7194208 <line:662:9, col:17>
|     `-UnaryOperator 0x55d6b71941f0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b71941e0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d6b716b840 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55d6b716b908 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55d6b716b9d0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55d6b716ba98 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55d6b716bda8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55d6b716bb38 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6b716bd08 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55d6b716bc18 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55d6b71945d0 <col:19, line:706:5>
|     `-IfStmt 0x55d6b71945a8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55d6b7194318 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55d6b71944d8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55d6b71944a8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55d6b7194468 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55d6b7194370 <col:42> '<bound member function type>' ->simple_slot 0x55d6b718f060
|       |     | `-CXXThisExpr 0x55d6b7194360 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55d6b7194408 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55d6b71943c0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55d6b6eeb1f8
|       |     | `-DeclRefExpr 0x55d6b71943a0 <col:55> 'T' lvalue ParmVar 0x55d6b716bc18 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55d6b7194448 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55d6b7194598 <line:705:13, col:34>
|         `-CallExpr 0x55d6b7194570 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55d6b71944f8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55d6b7194550 <col:33> 'T' lvalue ParmVar 0x55d6b716bc18 'x' 'T &'
|-FunctionTemplateDecl 0x55d6b716c078 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55d6b716be08 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6b716bfd8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55d6b716bee8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55d6b71949b0 <col:31, line:717:5>
|     |-DeclStmt 0x55d6b7194710 <line:713:9, col:23>
|     | `-VarDecl 0x55d6b71945f8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55d6b71946e8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d6b7194670 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d6b71946c8 <col:21> 'T' lvalue ParmVar 0x55d6b716bee8 'x' 'T &'
|     |-IfStmt 0x55d6b7194960 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55d6b7194808 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55d6b7194940 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d6b71948e0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d6b7194870 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|     |   | `-DeclRefExpr 0x55d6b7194850 <col:14> 'T *' lvalue Var 0x55d6b71945f8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55d6b7194920 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55d6b7194998 <line:716:9, col:16>
|       `-DeclRefExpr 0x55d6b7194978 <col:16> 'T *' lvalue Var 0x55d6b71945f8 's' 'T *'
|-FunctionTemplateDecl 0x55d6b716c488 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55d6b716c0d8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6b716c158 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6b716c3e8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55d6b716c238 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55d6b716c2d8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55d6b7194cc0 <col:37, line:726:5>
|     |-IfStmt 0x55d6b7194c50 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55d6b7194c70 <line:723:13, col:26>
|     | | `-VarDecl 0x55d6b7194a18 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55d6b7194b08 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55d6b7194a90 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55d6b7194ae8 <col:25> 'T' lvalue ParmVar 0x55d6b716c238 'x' 'T &'
|     | |-DeclRefExpr 0x55d6b7194b30 <col:16> 'T *' lvalue Var 0x55d6b7194a18 's' 'T *'
|     | `-BinaryOperator 0x55d6b7194c30 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d6b7194be0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d6b7194b70 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|     |   | `-DeclRefExpr 0x55d6b7194b50 <col:14> 'T *' lvalue Var 0x55d6b7194a18 's' 'T *'
|     |   `-DeclRefExpr 0x55d6b7194c10 <col:18> 'const V' lvalue ParmVar 0x55d6b716c2d8 'value' 'const V &'
|     `-ReturnStmt 0x55d6b7194cb0 <line:725:9, col:17>
|       `-UnaryOperator 0x55d6b7194c98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b7194c88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6b716c888 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55d6b716c4f0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6b716c7e8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55d6b716c5a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b716c620 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b716c6c8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55d6b7195ae0 <col:65, line:737:5>
|     |-DeclStmt 0x55d6b7194d58 <line:732:9, col:26>
|     | `-VarDecl 0x55d6b7194cf0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d6b7195aa8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55d6b7195ac8 <line:733:13, col:58>
|       | `-VarDecl 0x55d6b7194d80 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d6b7194f60 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d6b7194f30 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d6b7194f18 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d6b7194ef8 <col:26, col:58> 'String' (CXXTemporary 0x55d6b7194ef8)
|       |           `-CXXMemberCallExpr 0x55d6b7194e88 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d6b7194df8 <col:26> '<bound member function type>' ->find 0x55d6b718cd58
|       |             | `-CXXThisExpr 0x55d6b7194de8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d6b7194ec0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6b7194e28 <col:31> 'const char *' lvalue ParmVar 0x55d6b716c5a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d6b7194ed8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6b7194e48 <col:40> 'int' lvalue ParmVar 0x55d6b716c620 'flags' 'int'
|       |             `-DeclRefExpr 0x55d6b7194e68 <col:47> 'Args::Slot *' lvalue Var 0x55d6b7194cf0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d6b7195018 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6b7195000 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6b7194fe0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6b7194fb0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|       |       `-ImplicitCastExpr 0x55d6b7194f98 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d6b7194f78 <col:20> 'String' lvalue Var 0x55d6b7194d80 'str' 'String'
|       `-CompoundStmt 0x55d6b7195a88 <col:61, line:736:9>
|         |-DeclStmt 0x55d6b71954d0 <line:734:13, col:76>
|         | `-VarDecl 0x55d6b7195068 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d6b71954a0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d6b7195410 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d6b7195458 <col:60> 'T' lvalue ParmVar 0x55d6b716c6c8 'variable' 'T &'
|         |     `-UnaryOperator 0x55d6b7195488 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d6b7195478 <col:71> 'Args *' this
|         `-CallExpr 0x55d6b7195a58 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55d6b71954f8 <col:13> '<bound member function type>' ->postparse 0x55d6b718cf68
|           | `-CXXThisExpr 0x55d6b71954e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d6b7195a18 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d6b7195528 <col:23> 'T *' lvalue Var 0x55d6b7195068 's' 'T *'
|           | `-CallExpr 0x55d6b71959d8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d6b71957b0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55d6b71958b0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55d6b71958d0 <col:86> 'String' lvalue Var 0x55d6b7194d80 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d6b7195980 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d6b7195910 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|           |   | `-DeclRefExpr 0x55d6b71958f0 <col:92> 'T *' lvalue Var 0x55d6b7195068 's' 'T *'
|           |   `-UnaryOperator 0x55d6b71959c0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d6b71959b0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55d6b7195a38 <col:103> 'Args::Slot *' lvalue Var 0x55d6b7194cf0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6b7174178 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d6b716c8f8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6b716c978 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6b71740d8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d6b7173dd0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7173e50 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b7173ef8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55d6b7173f98 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55d6b7196980 <col:88, line:745:5>
|     |-DeclStmt 0x55d6b7195b78 <line:741:9, col:26>
|     | `-VarDecl 0x55d6b7195b10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6b7195d98 <line:742:9, col:55>
|     | `-VarDecl 0x55d6b7195ba0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d6b7195d80 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d6b7195d50 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d6b7195d38 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d6b7195d18 <col:22, col:54> 'String' (CXXTemporary 0x55d6b7195d18)
|     |           `-CXXMemberCallExpr 0x55d6b7195ca8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d6b7195c18 <col:22> '<bound member function type>' ->find 0x55d6b718cd58
|     |             | `-CXXThisExpr 0x55d6b7195c08 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d6b7195ce0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d6b7195c48 <col:27> 'const char *' lvalue ParmVar 0x55d6b7173dd0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d6b7195cf8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d6b7195c68 <col:36> 'int' lvalue ParmVar 0x55d6b7173e50 'flags' 'int'
|     |             `-DeclRefExpr 0x55d6b7195c88 <col:43> 'Args::Slot *' lvalue Var 0x55d6b7195b10 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d6b7196170 <line:743:9, col:72>
|     | `-VarDecl 0x55d6b7195de8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d6b7196140 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d6b71960b0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d6b71960f8 <col:56> 'T' lvalue ParmVar 0x55d6b7173ef8 'variable' 'T &'
|     |     `-UnaryOperator 0x55d6b7196128 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d6b7196118 <col:67> 'Args *' this
|     `-CallExpr 0x55d6b7196950 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55d6b7196198 <col:9> '<bound member function type>' ->postparse 0x55d6b718cf68
|       | `-CXXThisExpr 0x55d6b7196188 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d6b7196910 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d6b71961c8 <col:19> 'T *' lvalue Var 0x55d6b7195de8 's' 'T *'
|       | `-ParenExpr 0x55d6b71968f0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55d6b71968c0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d6b71968a8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d6b7196890 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d6b7196870 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d6b7196840 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|       |     |       `-ImplicitCastExpr 0x55d6b7196828 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d6b71961e8 <col:25> 'String' lvalue Var 0x55d6b7195ba0 'str' 'String'
|       |     |-CallExpr 0x55d6b7196698 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d6b7196470 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55d6b7196570 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55d6b7196590 <col:89> 'String' lvalue Var 0x55d6b7195ba0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d6b7196640 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d6b71965d0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|       |     | | `-DeclRefExpr 0x55d6b71965b0 <col:95> 'T *' lvalue Var 0x55d6b7195de8 's' 'T *'
|       |     | `-UnaryOperator 0x55d6b7196680 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d6b7196670 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55d6b7196808 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55d6b71967e8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d6b71967b8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d6b7196768 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d6b71966f8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|       |         | | `-DeclRefExpr 0x55d6b71966d8 <col:109> 'T *' lvalue Var 0x55d6b7195de8 's' 'T *'
|       |         | `-DeclRefExpr 0x55d6b7196798 <col:113> 'const V' lvalue ParmVar 0x55d6b7173f98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d6b71967d8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55d6b7196930 <col:128> 'Args::Slot *' lvalue Var 0x55d6b7195b10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6b71746a8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55d6b71741f0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7174268 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b7174608 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6b7174328 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b71743a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b7174420 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b71744c8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55d6b7199778 <col:75, line:754:5>
|     |-DeclStmt 0x55d6b7198c28 <line:749:9, col:26>
|     | `-VarDecl 0x55d6b7198bc0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d6b7199740 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55d6b7199760 <line:750:13, col:58>
|       | `-VarDecl 0x55d6b7198c50 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d6b7198e30 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d6b7198e00 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d6b7198de8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d6b7198dc8 <col:26, col:58> 'String' (CXXTemporary 0x55d6b7198dc8)
|       |           `-CXXMemberCallExpr 0x55d6b7198d58 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d6b7198cc8 <col:26> '<bound member function type>' ->find 0x55d6b718cd58
|       |             | `-CXXThisExpr 0x55d6b7198cb8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d6b7198d90 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6b7198cf8 <col:31> 'const char *' lvalue ParmVar 0x55d6b7174328 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d6b7198da8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6b7198d18 <col:40> 'int' lvalue ParmVar 0x55d6b71743a8 'flags' 'int'
|       |             `-DeclRefExpr 0x55d6b7198d38 <col:47> 'Args::Slot *' lvalue Var 0x55d6b7198bc0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d6b7198ee8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6b7198ed0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6b7198eb0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6b7198e80 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|       |       `-ImplicitCastExpr 0x55d6b7198e68 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d6b7198e48 <col:20> 'String' lvalue Var 0x55d6b7198c50 'str' 'String'
|       `-CompoundStmt 0x55d6b7199720 <col:61, line:753:9>
|         |-DeclStmt 0x55d6b71992c0 <line:751:13, col:63>
|         | `-VarDecl 0x55d6b7198f38 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d6b7199290 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d6b7199200 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d6b7199248 <col:47> 'T' lvalue ParmVar 0x55d6b71744c8 'variable' 'T &'
|         |     `-UnaryOperator 0x55d6b7199278 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d6b7199268 <col:58> 'Args *' this
|         `-CallExpr 0x55d6b71996f0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55d6b71992e8 <col:13> '<bound member function type>' ->postparse 0x55d6b718cf68
|           | `-CXXThisExpr 0x55d6b71992d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d6b71996b0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d6b7199318 <col:23> 'T *' lvalue Var 0x55d6b7198f38 's' 'T *'
|           | `-CallExpr 0x55d6b7199670 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d6b7199500 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d6b7199548 <col:56> 'P' lvalue ParmVar 0x55d6b7174420 'parser' 'P'
|           |   |-DeclRefExpr 0x55d6b7199568 <col:64> 'String' lvalue Var 0x55d6b7198c50 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d6b7199618 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d6b71995a8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|           |   | `-DeclRefExpr 0x55d6b7199588 <col:70> 'T *' lvalue Var 0x55d6b7198f38 's' 'T *'
|           |   `-UnaryOperator 0x55d6b7199658 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d6b7199648 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55d6b71996d0 <col:81> 'Args::Slot *' lvalue Var 0x55d6b7198bc0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6b7174d08 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d6b7174720 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6b7174798 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55d6b7174818 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d6b7174c68 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d6b71748e0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7174960 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b71749d8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7174a78 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55d6b7174b18 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55d6b719a508 <col:98, line:762:5>
|     |-DeclStmt 0x55d6b7199810 <line:758:9, col:26>
|     | `-VarDecl 0x55d6b71997a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6b7199a30 <line:759:9, col:55>
|     | `-VarDecl 0x55d6b7199838 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d6b7199a18 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d6b71999e8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d6b71999d0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d6b71999b0 <col:22, col:54> 'String' (CXXTemporary 0x55d6b71999b0)
|     |           `-CXXMemberCallExpr 0x55d6b7199940 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d6b71998b0 <col:22> '<bound member function type>' ->find 0x55d6b718cd58
|     |             | `-CXXThisExpr 0x55d6b71998a0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d6b7199978 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d6b71998e0 <col:27> 'const char *' lvalue ParmVar 0x55d6b71748e0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d6b7199990 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d6b7199900 <col:36> 'int' lvalue ParmVar 0x55d6b7174960 'flags' 'int'
|     |             `-DeclRefExpr 0x55d6b7199920 <col:43> 'Args::Slot *' lvalue Var 0x55d6b71997a8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d6b7199e50 <line:760:9, col:59>
|     | `-VarDecl 0x55d6b7199a88 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d6b7199e20 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d6b7199d90 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d6b7199dd8 <col:43> 'T' lvalue ParmVar 0x55d6b7174a78 'variable' 'T &'
|     |     `-UnaryOperator 0x55d6b7199e08 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d6b7199df8 <col:54> 'Args *' this
|     `-CallExpr 0x55d6b719a4d8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55d6b7199e78 <col:9> '<bound member function type>' ->postparse 0x55d6b718cf68
|       | `-CXXThisExpr 0x55d6b7199e68 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d6b719a498 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d6b7199ea8 <col:19> 'T *' lvalue Var 0x55d6b7199a88 's' 'T *'
|       | `-ParenExpr 0x55d6b719a478 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55d6b719a448 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d6b719a430 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d6b719a418 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d6b719a3f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d6b719a3c8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|       |     |       `-ImplicitCastExpr 0x55d6b719a3b0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d6b7199ec8 <col:25> 'String' lvalue Var 0x55d6b7199838 'str' 'String'
|       |     |-CallExpr 0x55d6b719a220 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d6b719a0b0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55d6b719a0f8 <col:59> 'P' lvalue ParmVar 0x55d6b71749d8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55d6b719a118 <col:67> 'String' lvalue Var 0x55d6b7199838 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d6b719a1c8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d6b719a158 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|       |     | | `-DeclRefExpr 0x55d6b719a138 <col:73> 'T *' lvalue Var 0x55d6b7199a88 's' 'T *'
|       |     | `-UnaryOperator 0x55d6b719a208 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d6b719a1f8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55d6b719a390 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55d6b719a370 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d6b719a340 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d6b719a2f0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d6b719a280 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|       |         | | `-DeclRefExpr 0x55d6b719a260 <col:87> 'T *' lvalue Var 0x55d6b7199a88 's' 'T *'
|       |         | `-DeclRefExpr 0x55d6b719a320 <col:91> 'const V' lvalue ParmVar 0x55d6b7174b18 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d6b719a360 <col:98> 'bool' true
|       `-DeclRefExpr 0x55d6b719a4b8 <col:106> 'Args::Slot *' lvalue Var 0x55d6b71997a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6b7175378 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55d6b7174d88 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7174e08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6b7174e88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6b71752d8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6b7174f50 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7174fd0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b7175048 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b71750e8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55d6b7175188 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55d6b719b4e8 <col:60, line:773:5>
|     |-DeclStmt 0x55d6b719a5b0 <line:767:9, col:26>
|     | `-VarDecl 0x55d6b719a548 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d6b719b4b0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55d6b719b4d0 <line:768:13, col:58>
|       | `-VarDecl 0x55d6b719a5d8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d6b719a7b8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d6b719a788 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d6b719a770 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d6b719a750 <col:26, col:58> 'String' (CXXTemporary 0x55d6b719a750)
|       |           `-CXXMemberCallExpr 0x55d6b719a6e0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d6b719a650 <col:26> '<bound member function type>' ->find 0x55d6b718cd58
|       |             | `-CXXThisExpr 0x55d6b719a640 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d6b719a718 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6b719a680 <col:31> 'const char *' lvalue ParmVar 0x55d6b7174f50 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d6b719a730 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6b719a6a0 <col:40> 'int' lvalue ParmVar 0x55d6b7174fd0 'flags' 'int'
|       |             `-DeclRefExpr 0x55d6b719a6c0 <col:47> 'Args::Slot *' lvalue Var 0x55d6b719a548 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d6b719a870 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6b719a858 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6b719a838 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6b719a808 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|       |       `-ImplicitCastExpr 0x55d6b719a7f0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d6b719a7d0 <col:20> 'String' lvalue Var 0x55d6b719a5d8 'str' 'String'
|       `-CompoundStmt 0x55d6b719b488 <col:61, line:772:9>
|         |-DeclStmt 0x55d6b719abb0 <line:769:13, col:66>
|         | `-VarDecl 0x55d6b719a8c8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55d6b719ab80 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d6b719aaf0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d6b719ab38 <col:49> 'T1' lvalue ParmVar 0x55d6b71750e8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55d6b719ab68 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d6b719ab58 <col:61> 'Args *' this
|         |-DeclStmt 0x55d6b719af20 <line:770:13, col:66>
|         | `-VarDecl 0x55d6b719ac38 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55d6b719aef0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d6b719ae60 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d6b719aea8 <col:49> 'T2' lvalue ParmVar 0x55d6b7175188 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55d6b719aed8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d6b719aec8 <col:61> 'Args *' this
|         `-CallExpr 0x55d6b719b458 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55d6b719af48 <col:13> '<bound member function type>' ->postparse 0x55d6b718cf68
|           | `-CXXThisExpr 0x55d6b719af38 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d6b719b418 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55d6b719afb8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55d6b719af78 <col:23> 'T1 *' lvalue Var 0x55d6b719a8c8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55d6b719af98 <col:29> 'T2 *' lvalue Var 0x55d6b719ac38 's2' 'T2 *'
|           | `-CallExpr 0x55d6b719b3d0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d6b719b1a0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d6b719b1e8 <col:63> 'P' lvalue ParmVar 0x55d6b7175048 'parser' 'P'
|           |   |-DeclRefExpr 0x55d6b719b208 <col:71> 'String' lvalue Var 0x55d6b719a5d8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d6b719b2b8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d6b719b248 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|           |   | `-DeclRefExpr 0x55d6b719b228 <col:77> 'T1 *' lvalue Var 0x55d6b719a8c8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55d6b719b378 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d6b719b308 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|           |   | `-DeclRefExpr 0x55d6b719b2e8 <col:82> 'T2 *' lvalue Var 0x55d6b719ac38 's2' 'T2 *'
|           |   `-UnaryOperator 0x55d6b719b3b8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d6b719b3a8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55d6b719b438 <col:94> 'Args::Slot *' lvalue Var 0x55d6b719a548 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6b7175768 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55d6b71753f8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6b71756c8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d6b71754b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7175530 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b71755a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d6b719ba00 <col:67, line:780:5>
|     |-DeclStmt 0x55d6b719b580 <line:777:9, col:26>
|     | `-VarDecl 0x55d6b719b518 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d6b719b9c8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55d6b719b9e8 <line:778:13, col:58>
|       | `-VarDecl 0x55d6b719b5a8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d6b719b788 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d6b719b758 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d6b719b740 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d6b719b720 <col:26, col:58> 'String' (CXXTemporary 0x55d6b719b720)
|       |           `-CXXMemberCallExpr 0x55d6b719b6b0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d6b719b620 <col:26> '<bound member function type>' ->find 0x55d6b718cd58
|       |             | `-CXXThisExpr 0x55d6b719b610 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d6b719b6e8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6b719b650 <col:31> 'const char *' lvalue ParmVar 0x55d6b71754b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d6b719b700 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6b719b670 <col:40> 'int' lvalue ParmVar 0x55d6b7175530 'flags' 'int'
|       |             `-DeclRefExpr 0x55d6b719b690 <col:47> 'Args::Slot *' lvalue Var 0x55d6b719b518 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d6b719b840 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6b719b828 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6b719b808 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6b719b7d8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|       |       `-ImplicitCastExpr 0x55d6b719b7c0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d6b719b7a0 <col:20> 'String' lvalue Var 0x55d6b719b5a8 'str' 'String'
|       `-CallExpr 0x55d6b719b998 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55d6b719b868 <col:13> '<bound member function type>' ->postparse 0x55d6b718cf68
|         | `-CXXThisExpr 0x55d6b719b858 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55d6b719b948 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55d6b719b8b8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55d6b719b898 <col:23> 'P' lvalue ParmVar 0x55d6b71755a8 'parser' 'P'
|         | |-DeclRefExpr 0x55d6b719b900 <col:36> 'String' lvalue Var 0x55d6b719b5a8 'str' 'String'
|         | `-UnaryOperator 0x55d6b719b930 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55d6b719b920 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55d6b719b978 <col:49> 'Args::Slot *' lvalue Var 0x55d6b719b518 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6b7175b08 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d6b71757d8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6b7175a68 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d6b7175890 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7175910 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b7175988 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55d6b719c370 <col:71, line:792:5>
|     |-DeclStmt 0x55d6b719ba98 <line:784:9, col:26>
|     | `-VarDecl 0x55d6b719ba30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6b719bb68 <line:785:9, col:29>
|     | `-VarDecl 0x55d6b719bac8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d6b719bb50 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d6b719bb30 <col:28> 'int' 1
|     |-WhileStmt 0x55d6b719c220 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55d6b719c240 <line:786:16, col:61>
|     | | `-VarDecl 0x55d6b719bb90 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d6b719bd70 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d6b719bd40 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d6b719bd28 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d6b719bd08 <col:29, col:61> 'String' (CXXTemporary 0x55d6b719bd08)
|     | |           `-CXXMemberCallExpr 0x55d6b719bc98 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d6b719bc08 <col:29> '<bound member function type>' ->find 0x55d6b718cd58
|     | |             | `-CXXThisExpr 0x55d6b719bbf8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d6b719bcd0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6b719bc38 <col:34> 'const char *' lvalue ParmVar 0x55d6b7175890 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d6b719bce8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6b719bc58 <col:43> 'int' lvalue ParmVar 0x55d6b7175910 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d6b719bc78 <col:50> 'Args::Slot *' lvalue Var 0x55d6b719ba30 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d6b719be28 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d6b719be10 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d6b719bdf0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d6b719bdc0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|     | |       `-ImplicitCastExpr 0x55d6b719bda8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d6b719bd88 <col:23> 'String' lvalue Var 0x55d6b719bb90 'str' 'String'
|     | `-CompoundStmt 0x55d6b719c1f8 <col:64, line:790:9>
|     |   |-CallExpr 0x55d6b719bf80 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55d6b719be50 <col:13> '<bound member function type>' ->postparse 0x55d6b718cf68
|     |   | | `-CXXThisExpr 0x55d6b719be40 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d6b719bf30 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d6b719bea0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d6b719be80 <col:23> 'P' lvalue ParmVar 0x55d6b7175988 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d6b719bee8 <col:36> 'String' lvalue Var 0x55d6b719bb90 'str' 'String'
|     |   | | `-UnaryOperator 0x55d6b719bf18 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d6b719bf08 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55d6b719bf60 <col:49> 'Args::Slot *' lvalue Var 0x55d6b719ba30 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d6b719c118 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d6b719bfb0 <col:13> 'int' lvalue Var 0x55d6b719bac8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d6b719c100 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d6b719c0e0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d6b719c048 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d6b719c028 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d6b719c010 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d6b719bfd0 <col:28> 'int' lvalue Var 0x55d6b719bac8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d6b719bff0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d6b719c0c8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d6b719c098 <col:49> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|     |   |         `-ImplicitCastExpr 0x55d6b719c078 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d6b719c068 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d6b719c1c8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d6b719c138 <col:13> 'int' lvalue ParmVar 0x55d6b7175910 'flags' 'int'
|     |     `-UnaryOperator 0x55d6b719c1b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d6b719c198 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d6b719c178 <col:23> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d6b719c350 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d6b719c288 <col:9> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|       | `-ImplicitCastExpr 0x55d6b719c268 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d6b719c258 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d6b719c330 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d6b719c310 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d6b719c2f8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d6b719c2b8 <col:25> 'int' lvalue Var 0x55d6b719bac8 'read_status' 'int'
|           `-IntegerLiteral 0x55d6b719c2d8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d6b7175fe8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d6b7175b78 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b7175bf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b7175f48 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6b7175cb8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7175d38 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b7175db0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b7175e58 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55d6b719d300 <col:84, line:805:5>
|     |-DeclStmt 0x55d6b719c418 <line:796:9, col:26>
|     | `-VarDecl 0x55d6b719c3b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6b719c4e8 <line:797:9, col:29>
|     | `-VarDecl 0x55d6b719c448 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d6b719c4d0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d6b719c4b0 <col:28> 'int' 1
|     |-DeclStmt 0x55d6b719c820 <line:798:9, col:71>
|     | `-VarDecl 0x55d6b719c538 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d6b719c7f0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d6b719c760 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55d6b719c7a8 <col:55> 'T' lvalue ParmVar 0x55d6b7175e58 'variable' 'T &'
|     |     `-UnaryOperator 0x55d6b719c7d8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d6b719c7c8 <col:66> 'Args *' this
|     |-WhileStmt 0x55d6b719d1b0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55d6b719d1d0 <line:799:16, col:61>
|     | | `-VarDecl 0x55d6b719c848 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d6b719ca28 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d6b719c9f8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d6b719c9e0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d6b719c9c0 <col:29, col:61> 'String' (CXXTemporary 0x55d6b719c9c0)
|     | |           `-CXXMemberCallExpr 0x55d6b719c950 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d6b719c8c0 <col:29> '<bound member function type>' ->find 0x55d6b718cd58
|     | |             | `-CXXThisExpr 0x55d6b719c8b0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d6b719c988 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6b719c8f0 <col:34> 'const char *' lvalue ParmVar 0x55d6b7175cb8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d6b719c9a0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6b719c910 <col:43> 'int' lvalue ParmVar 0x55d6b7175d38 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d6b719c930 <col:50> 'Args::Slot *' lvalue Var 0x55d6b719c3b0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d6b719cae0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d6b719cac8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d6b719caa8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d6b719ca78 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|     | |       `-ImplicitCastExpr 0x55d6b719ca60 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d6b719ca40 <col:23> 'String' lvalue Var 0x55d6b719c848 'str' 'String'
|     | `-CompoundStmt 0x55d6b719d188 <col:64, line:803:9>
|     |   |-CallExpr 0x55d6b719cf10 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55d6b719cb08 <col:13> '<bound member function type>' ->postparse 0x55d6b718cf68
|     |   | | `-CXXThisExpr 0x55d6b719caf8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55d6b719ced0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55d6b719cb38 <col:23> 'T *' lvalue Var 0x55d6b719c538 's' 'T *'
|     |   | | `-CallExpr 0x55d6b719ce90 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55d6b719cd20 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55d6b719cd68 <col:56> 'P' lvalue ParmVar 0x55d6b7175db0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55d6b719cd88 <col:64> 'String' lvalue Var 0x55d6b719c848 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55d6b719ce38 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55d6b719cdc8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|     |   | |   | `-DeclRefExpr 0x55d6b719cda8 <col:70> 'T *' lvalue Var 0x55d6b719c538 's' 'T *'
|     |   | |   `-UnaryOperator 0x55d6b719ce78 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55d6b719ce68 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55d6b719cef0 <col:81> 'Args::Slot *' lvalue Var 0x55d6b719c3b0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d6b719d0a8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d6b719cf40 <col:13> 'int' lvalue Var 0x55d6b719c448 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d6b719d090 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d6b719d070 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d6b719cfd8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d6b719cfb8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d6b719cfa0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d6b719cf60 <col:28> 'int' lvalue Var 0x55d6b719c448 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d6b719cf80 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d6b719d058 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d6b719d028 <col:49> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|     |   |         `-ImplicitCastExpr 0x55d6b719d008 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d6b719cff8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d6b719d158 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d6b719d0c8 <col:13> 'int' lvalue ParmVar 0x55d6b7175d38 'flags' 'int'
|     |     `-UnaryOperator 0x55d6b719d140 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d6b719d128 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d6b719d108 <col:23> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d6b719d2e0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d6b719d218 <col:9> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|       | `-ImplicitCastExpr 0x55d6b719d1f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d6b719d1e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d6b719d2c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d6b719d2a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d6b719d288 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d6b719d248 <col:25> 'int' lvalue Var 0x55d6b719c448 'read_status' 'int'
|           `-IntegerLiteral 0x55d6b719d268 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d6b71765c8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55d6b7176060 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6b71760d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6b7176528 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d6b7176198 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6b7176218 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55d6b7176290 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55d6b71763e0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55d6b719e108 <col:87, line:821:5>
|     |-DeclStmt 0x55d6b719d3b0 <line:809:9, col:26>
|     | `-VarDecl 0x55d6b719d348 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6b719d480 <line:810:9, col:29>
|     | `-VarDecl 0x55d6b719d3e0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d6b719d468 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d6b719d448 <col:28> 'int' 1
|     |-DeclStmt 0x55d6b719d6c8 <line:811:9, col:38>
|     | `-VarDecl 0x55d6b719d5b0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55d6b719d6a0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d6b719d628 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d6b719d680 <col:29> 'Vector<T>' lvalue ParmVar 0x55d6b71763e0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55d6b719dfb8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55d6b719dfd8 <line:812:16, col:61>
|     | | `-VarDecl 0x55d6b719d6f0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d6b719d8d0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d6b719d8a0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d6b719d888 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d6b719d868 <col:29, col:61> 'String' (CXXTemporary 0x55d6b719d868)
|     | |           `-CXXMemberCallExpr 0x55d6b719d7f8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d6b719d768 <col:29> '<bound member function type>' ->find 0x55d6b718cd58
|     | |             | `-CXXThisExpr 0x55d6b719d758 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d6b719d830 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6b719d798 <col:34> 'const char *' lvalue ParmVar 0x55d6b7176198 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d6b719d848 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6b719d7b8 <col:43> 'int' lvalue ParmVar 0x55d6b7176218 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d6b719d7d8 <col:50> 'Args::Slot *' lvalue Var 0x55d6b719d348 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d6b719d988 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d6b719d970 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d6b719d950 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d6b719d920 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d6b6eb1b68
|     | |       `-ImplicitCastExpr 0x55d6b719d908 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d6b719d8e8 <col:23> 'String' lvalue Var 0x55d6b719d6f0 'str' 'String'
|     | `-CompoundStmt 0x55d6b719df80 <col:64, line:819:9>
|     |   |-DeclStmt 0x55d6b719da48 <line:813:13, col:23>
|     |   | `-VarDecl 0x55d6b719d9b0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55d6b719da28 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55d6b719dbc8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55d6b719da70 <col:13> '<bound member function type>' ->postparse 0x55d6b718cf68
|     |   | | `-CXXThisExpr 0x55d6b719da60 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d6b719db70 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d6b719dac0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d6b719daa0 <col:23> 'P' lvalue ParmVar 0x55d6b7176290 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d6b719db08 <col:36> 'String' lvalue Var 0x55d6b719d6f0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55d6b719db28 <col:41> 'T' lvalue Var 0x55d6b719d9b0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55d6b719db58 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d6b719db48 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55d6b719dba8 <col:53> 'Args::Slot *' lvalue Var 0x55d6b719d348 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55d6b719dd20 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55d6b719dc58 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55d6b719dc28 <col:17> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|     |   | |   `-ImplicitCastExpr 0x55d6b719dc08 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55d6b719dbf8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55d6b719dcf8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55d6b719dc90 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55d6b719dc70 <col:17> 'Vector<T> *' lvalue Var 0x55d6b719d5b0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55d6b719dcd8 <col:30> 'T' lvalue Var 0x55d6b719d9b0 'sx' 'T'
|     |   |-BinaryOperator 0x55d6b719dea0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d6b719dd38 <col:13> 'int' lvalue Var 0x55d6b719d3e0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d6b719de88 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d6b719de68 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d6b719ddd0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d6b719ddb0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d6b719dd98 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d6b719dd58 <col:28> 'int' lvalue Var 0x55d6b719d3e0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d6b719dd78 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d6b719de50 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d6b719de20 <col:49> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|     |   |         `-ImplicitCastExpr 0x55d6b719de00 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d6b719ddf0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d6b719df50 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d6b719dec0 <col:13> 'int' lvalue ParmVar 0x55d6b7176218 'flags' 'int'
|     |     `-UnaryOperator 0x55d6b719df38 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d6b719df20 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d6b719df00 <col:23> 'const int' lvalue Var 0x55d6b715b8c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d6b719e0e8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d6b719e020 <col:9> 'bool' lvalue ->_read_status 0x55d6b7151ea0
|       | `-ImplicitCastExpr 0x55d6b719e000 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d6b719dff0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d6b719e0c8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d6b719e0a8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d6b719e090 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d6b719e050 <col:25> 'int' lvalue Var 0x55d6b719d3e0 'read_status' 'int'
|           `-IntegerLiteral 0x55d6b719e070 <col:40> 'int' 1
|-AccessSpecDecl 0x55d6b7176640 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55d6b7176668 prev 0x55d6b7159bc8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55d6b7176760 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55d6b7176850 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55d6b719e140 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55d6b7176940 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55d6b719e150 <col:25, line:830:9>
| |-CXXMethodDecl 0x55d6b7176a40 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55d6b7176af0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55d6b7176b98 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d6b7176b98
| | `-ParmVarDecl 0x55d6b7176ca8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55d6b7177468 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d6b7177468
|   `-ParmVarDecl 0x55d6b7177578 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55d6b7176d18 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55d6b7176e78 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55d6b7177070 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55d6b7176f20 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55d6b7176f98 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55d6b719e330 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55d6b7177328 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55d6b719e1a0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d6b719e160 <col:20> 'void *' lvalue ParmVar 0x55d6b7176f20 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55d6b7177390 '_slot' 'char *'
| | | `-CXXNewExpr 0x55d6b719e228 <col:32, col:45> 'char *' array Function 0x55d6b6cd0e48 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55d6b719e210 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55d6b719e1e0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55d6b7176f98 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55d6b71773f0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55d6b719e2f0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d6b719e2b0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55d6b7176f98 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55d6b719e3b0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55d6b7177170 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55d6b7176940 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55d6b719e438 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55d6b719e418 <line:840:13, col:22> 'void' array Function 0x55d6b6cd11a8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55d6b719e400 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55d6b719e3d0 <col:22> 'char *' lvalue ->_slot 0x55d6b7177390
| |         `-CXXThisExpr 0x55d6b719e3c0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55d6b7177270 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55d6b7176a40 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55d6b719e628 <col:22, line:844:9>
| |   `-CallExpr 0x55d6b719e590 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55d6b719e578 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55d6b719e558 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55d6b6e03238 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55d6b719e5c8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55d6b719e4a8 <col:20> 'void *' lvalue ->_ptr 0x55d6b7177328
| |     |   `-CXXThisExpr 0x55d6b719e498 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55d6b719e5f8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55d6b719e5e0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55d6b719e4e8 <col:26> 'char *' lvalue ->_slot 0x55d6b7177390
| |     |     `-CXXThisExpr 0x55d6b719e4d8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55d6b719e610 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55d6b719e528 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55d6b71773f0
| |         `-CXXThisExpr 0x55d6b719e518 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55d6b7177328 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55d6b7177390 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55d6b71773f0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55d6b71775e8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d6b71775e8
| | `-ParmVarDecl 0x55d6b71776f8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55d6b7177798 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d6b7177798
|   `-ParmVarDecl 0x55d6b71778a8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55d6b7177a48 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55d6b7177918 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55d6b71779b8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55d6b7177ce0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55d6b7177ed8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55d6b7177da8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55d6b7178058 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55d6b719e660 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55d6b719e640 <col:20> 'T *' lvalue ParmVar 0x55d6b7177da8 'ptr' 'T *'
|   | `-CompoundStmt 0x55d6b719e6b0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55d6b7177fa8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55d6b7176a40 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55d6b719e860 <col:22, line:857:9>
|   |   `-CallExpr 0x55d6b719e830 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55d6b719e6c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55d6b6e9a948 0x55d6b6e437f8
|   |     |-CXXOperatorCallExpr 0x55d6b719e7c0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55d6b719e750 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6b70a2458 0x55d6b70a2078 0x55d6b70a1ca8 0x55d6b70a18c8 0x55d6b70a14e8 0x55d6b70a1118
|   |     | `-MemberExpr 0x55d6b719e720 <col:29> 'T *' lvalue ->_ptr 0x55d6b7178058
|   |     |   `-CXXThisExpr 0x55d6b719e710 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55d6b719e800 <col:35> 'T' lvalue ->_slot 0x55d6b71780b8
|   |       `-CXXThisExpr 0x55d6b719e7f0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55d6b7178058 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55d6b71780b8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55d6b7178120 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55d6b7178220 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55d6b7178270 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b7178200 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55d6b71781e0 <col:31> 'int' 48
|-FieldDecl 0x55d6b7178298 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55d6b71782f8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55d6b7178358 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55d6b7178490 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55d6b718c600 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55d6b718c660 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55d6b718c710 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55d6b718c938 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55d6b718c840 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55d6b718ca88 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55d6b718c9f8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55d6b718cd58 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55d6b718cb48 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55d6b718cbc8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55d6b718cc70 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55d6b718cf68 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55d6b718ce20 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55d6b718ce98 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55d6b718d038 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55d6b718eaa8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55d6b718ea10 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55d6b718ee38 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55d6b718eb68 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55d6b718ebe8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55d6b718ec90 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55d6b718ed48 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55d6b718f060 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55d6b718ef10 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55d6b718ef88 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55d6b718f378 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55d6b718f110 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55d6b718f2d8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55d6b718f1e8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b71c48c0 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b71c49d8 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x55d6b71c4a68 <col:25, col:31> col:25 public
|-TypedefDecl 0x55d6b71c4aa0 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x55d6b6b7d2d0 'void'
|-CXXConstructorDecl 0x55d6b71c4be8 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x55d6b71c4b10 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x55d6b71c5e50 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x55d6b71c5780 'flags_' 'int'
| | `-ImplicitCastExpr 0x55d6b71c5ef0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6b71c5eb0 <col:45> 'int' lvalue ParmVar 0x55d6b71c4b10 'flags' 'int'
| `-CompoundStmt 0x55d6b71c5f38 <col:52, col:53>
|-CXXMethodDecl 0x55d6b71c4ea8 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x55d6b71c4ca8 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55d6b71c4d48 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x55d6b71c4dc0 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55d6b71c5e70 <col:88> 'const ArgContext' lvalue Var 0x55d6b71c4858 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55d6b71c6118 <col:100, line:210:5>
|   `-ReturnStmt 0x55d6b71c6108 <line:209:9, col:46>
|     `-CallExpr 0x55d6b71c60b0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x55d6b71c6098 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6b71c6050 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x55d6b71c5a48 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x55d6b71c5fb0 <col:22> 'const String' lvalue ParmVar 0x55d6b71c4ca8 'str' 'const String &'
|       |-DeclRefExpr 0x55d6b71c5fd0 <col:27> 'EtherAddress' lvalue ParmVar 0x55d6b71c4d48 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55d6b71c5ff0 <col:34> 'const ArgContext' lvalue ParmVar 0x55d6b71c4dc0 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x55d6b71c60f0 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x55d6b71c6020 <col:40> 'int' lvalue ->flags_ 0x55d6b71c5780
|           `-CXXThisExpr 0x55d6b71c6010 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55d6b71c5148 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x55d6b71c4f70 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55d6b71c4ff0 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x55d6b71c5068 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55d6b71c5e90 <col:89> 'const ArgContext' lvalue Var 0x55d6b71c4858 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55d6b71c62f0 <col:101, line:213:5>
|   `-ReturnStmt 0x55d6b71c62e0 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x55d6b71c62a8 <col:9, col:66> 'bool'
|       |-MemberExpr 0x55d6b71c6278 <col:9> '<bound member function type>' ->parse 0x55d6b71c4ea8
|       | `-CXXThisExpr 0x55d6b71c6268 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55d6b71c6198 <col:15> 'const String' lvalue ParmVar 0x55d6b71c4f70 'str' 'const String &'
|       |-UnaryOperator 0x55d6b71c6230 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55d6b71c6200 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55d6b71c61e8 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55d6b71c61b8 <col:54> 'unsigned char *' lvalue ParmVar 0x55d6b71c4ff0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55d6b71c6248 <col:62> 'const ArgContext' lvalue ParmVar 0x55d6b71c5068 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55d6b71c53e8 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x55d6b71c5210 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55d6b71c5288 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x55d6b71c5300 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x55d6b71c64d8 <col:82, line:216:5>
|   `-ReturnStmt 0x55d6b71c64c8 <line:215:9, col:53>
|     `-CallExpr 0x55d6b71c6470 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x55d6b71c6458 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6b71c6410 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x55d6b71c5d78 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x55d6b71c6370 <col:29> 'const String' lvalue ParmVar 0x55d6b71c5210 'str' 'const String &'
|       |-DeclRefExpr 0x55d6b71c6390 <col:34> 'EtherAddress' lvalue ParmVar 0x55d6b71c5288 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55d6b71c63b0 <col:41> 'Args' lvalue ParmVar 0x55d6b71c5300 'args' 'Args &'
|       `-ImplicitCastExpr 0x55d6b71c64b0 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x55d6b71c63e0 <col:47> 'int' lvalue ->flags_ 0x55d6b71c5780
|           `-CXXThisExpr 0x55d6b71c63d0 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55d6b71c5688 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x55d6b71c54b0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55d6b71c5530 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x55d6b71c55a8 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x55d6b71c66b0 <col:83, line:219:5>
|   `-ReturnStmt 0x55d6b71c66a0 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x55d6b71c6668 <col:9, col:73> 'bool'
|       |-MemberExpr 0x55d6b71c6638 <col:9> '<bound member function type>' ->direct_parse 0x55d6b71c53e8
|       | `-CXXThisExpr 0x55d6b71c6628 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55d6b71c6558 <col:22> 'const String' lvalue ParmVar 0x55d6b71c54b0 'str' 'const String &'
|       |-UnaryOperator 0x55d6b71c65f0 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55d6b71c65c0 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55d6b71c65a8 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55d6b71c6578 <col:61> 'unsigned char *' lvalue ParmVar 0x55d6b71c5530 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55d6b71c6608 <col:69> 'Args' lvalue ParmVar 0x55d6b71c55a8 'args' 'Args &'
|-AccessSpecDecl 0x55d6b71c5740 <line:220:3, col:10> col:3 private
|-FieldDecl 0x55d6b71c5780 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x55d6b71c5a48 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x55d6b71c57e0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55d6b71c5858 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x55d6b71c58d0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x55d6b71c5950 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x55d6b71c5d78 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x55d6b71c5b18 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x55d6b71c5b90 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x55d6b71c5c08 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x55d6b71c5c88 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x55d6b71ecf88 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x55d6b71ecf88
| `-ParmVarDecl 0x55d6b71ed098 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x55d6b71ed138 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b71ed248 <col:7> col:7 used 'EtherAddressArg &&'
| |-CXXCtorInitializer Field 0x55d6b71c5780 'flags_' 'int'
| | `-ImplicitCastExpr 0x55d6b71edac8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d6b71eda80 <col:7> 'int' xvalue .flags_ 0x55d6b71c5780
| |     `-CXXStaticCastExpr 0x55d6b71eda50 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
| |       `-DeclRefExpr 0x55d6b71eda20 <col:7> 'EtherAddressArg' lvalue ParmVar 0x55d6b71ed248 '' 'EtherAddressArg &&'
| `-CompoundStmt 0x55d6b71edb10 <col:7>
`-CXXDestructorDecl 0x55d6b71ed310 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b70c9d60 prev 0x55d6b70a6620 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55d6b70c9e98 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55d6b70c9f28 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55d6b70c9fd0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55d6b70ca070 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ca0c8 <col:30>
|-CXXMethodDecl 0x55d6b70ca118 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55d6b70ca1b8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ca210 <col:30>
|-CXXMethodDecl 0x55d6b70ca260 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55d6b70ca328 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55d6b70ca3f0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55d6b70ca508 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55d6b70ca5d0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55d6b70ca670 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ca6c8 <col:30>
|-CXXMethodDecl 0x55d6b70ca738 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55d6b70ca7d8 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ca830 <col:30>
|-CXXMethodDecl 0x55d6b70ca8d8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55d6b70ca978 <col:20>
| `-OptimizeNoneAttr 0x55d6b70ca9d0 <col:30>
|-CXXMethodDecl 0x55d6b70caa20 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55d6b70cab38 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55d6b70cac58 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55d6b70cad78 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55d6b70cae40 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55d6b70caee0 <col:62> "" ""
|-AccessSpecDecl 0x55d6b70caf50 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55d6b70cafb0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55d6b70cbba8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55d6b70cbdd0 <col:29, col:31>
|-CXXMethodDecl 0x55d6b70cb078 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55d6b70cb1b8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55d6b70cb128 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55d6b70cb2b0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55d6b70cbde0 <col:23, col:25>
|-CXXMethodDecl 0x55d6b70cb468 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55d6b70cb3a0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55d6b70cb738 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55d6b70cb520 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6b70cb598 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d6b70cb610 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b70cb8c8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55d6b70cb800 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55d6b70cb9c0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55d6b70cba28 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55d6b70cba28
  `-ParmVarDecl 0x55d6b70cbb38 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b6dbc070 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d6b6dbc188 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55d6b6dbc270 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55d6b6dbc250 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55d6b6dbc218 <col:22> 'int' 4
|-FieldDecl 0x55d6b6dbc318 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55d6b6dbc2f8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55d6b6dbc2c0 <col:21> 'int' 4
|-FieldDecl 0x55d6b6dbc378 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55d6b6dbc3d8 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55d6b6dbc438 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55d6b6dbc498 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55d6b6dbc4f8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55d6b6dbc558 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55d6b6dbc5b8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55d6b6dbc628 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55d6b6dbc698 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b70602f0 prev 0x55d6b70a64c0 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d6b70603e8 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x55d6b7060488 <line:12:5, col:14> col:14 referenced uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55d6b70604e8 <line:13:5, col:14> col:14 referenced uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55d6b7060548 <line:14:5, col:14> col:14 uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x55d6b70605a8 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b6ee0a20 prev 0x55d6b6e48808 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b6ee0b18 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55d6b6ee0ba8 <col:19, col:25> col:19 public
|-TypedefDecl 0x55d6b6ee0be0 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55d6b6cd2eb0 'uninitialized_type'
|   `-CXXRecord 0x55d6b6cd2e18 'uninitialized_type'
|-CXXConstructorDecl 0x55d6b6ee0ca0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55d6b6ee4380 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d6b6ee4428 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d6b6ee43e8 <col:10> 'int' 0
| `-CompoundStmt 0x55d6b6ee4470 <col:13, line:22:5>
|-CXXConstructorDecl 0x55d6b6ee0df0 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55d6b6ee0d60 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55d6b6ee4380 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d6b6ee44c0 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6b6ee4480 <col:10> 'unsigned int' lvalue ParmVar 0x55d6b6ee0d60 'x' 'unsigned int'
| `-CompoundStmt 0x55d6b6ee4508 <col:13, line:27:5>
|-CXXConstructorDecl 0x55d6b6ee0f48 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55d6b6ee0eb8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55d6b6ee4380 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d6b6ee4570 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55d6b6ee4558 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55d6b6ee4518 <col:10> 'int' lvalue ParmVar 0x55d6b6ee0eb8 'x' 'int'
| `-CompoundStmt 0x55d6b6ee45b8 <col:13, line:31:5>
|-CXXConstructorDecl 0x55d6b6ee10a0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55d6b6ee1010 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55d6b6ee4380 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d6b6ee4620 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55d6b6ee4608 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55d6b6ee45c8 <col:10> 'unsigned long' lvalue ParmVar 0x55d6b6ee1010 'x' 'unsigned long'
| `-CompoundStmt 0x55d6b6ee4668 <col:13, line:35:5>
|-CXXConstructorDecl 0x55d6b6ee11f8 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55d6b6ee1168 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55d6b6ee4380 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d6b6ee46d0 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55d6b6ee46b8 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55d6b6ee4678 <col:10> 'long' lvalue ParmVar 0x55d6b6ee1168 'x' 'long'
| `-CompoundStmt 0x55d6b6ee4718 <col:13, line:39:5>
|-CXXConstructorDecl 0x55d6b6ee13b8 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55d6b6ee12c8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55d6b6ee4380 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d6b6ee4798 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55d6b6ee4748 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55d6b6da4b10
| |     `-DeclRefExpr 0x55d6b6ee4728 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55d6b6ee12c8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55d6b6ee47e0 <col:20, line:44:5>
|-CXXConstructorDecl 0x55d6b6ee1548 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55d6b6ee1480 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55d6b6ee4948 <col:51, line:56:5>
|   `-BinaryOperator 0x55d6b6ee4928 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55d6b6ee4800 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55d6b6ee4380
|     | `-CXXThisExpr 0x55d6b6ee47f0 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55d6b6ee4910 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55d6b6ee48f8 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55d6b6ee48d8 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55d6b6ee48a8 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55d6b6ee4890 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55d6b6ee4830 <col:47> 'const unsigned char *' lvalue ParmVar 0x55d6b6ee1480 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55d6b6ee1698 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55d6b6ee1608 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55d6b6ee1848 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55d6b6ee1788 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55d6b6ee49b8 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55d6b6ee4990 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55d6b6ee4960 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55d6b6ee1788 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55d6b6ee19d8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55d6b6ee1910 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55d6b6ee1ac8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55d6b6ee5978 <col:46, line:83:5>
|   `-ReturnStmt 0x55d6b6ee5968 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55d6b6ee5950 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55d6b6ee5920 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d6b6ee57d8 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55d6b6ee56c0 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55d6b6ee55a8 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55d6b6ee49e0 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55d6b6ee1bb8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55d6b6ee5a28 <col:31, line:88:5>
|   `-ReturnStmt 0x55d6b6ee5a18 <line:87:2, col:10>
|     `-UnaryOperator 0x55d6b6ee5a00 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55d6b6ee59e8 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55d6b6ee59d0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55d6b6ee59a0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d6b6ee4380
|             `-CXXThisExpr 0x55d6b6ee5990 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55d6b6ee1c78 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55d6b6ee5aa8 <col:34, line:93:5>
|   `-ReturnStmt 0x55d6b6ee5a98 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55d6b6ee5a80 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55d6b6ee5a50 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d6b6ee4380
|         `-CXXThisExpr 0x55d6b6ee5a40 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55d6b6ee1d48 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55d6b6ee5b28 <col:38, line:101:5>
|   `-ReturnStmt 0x55d6b6ee5b18 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55d6b6ee5b00 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55d6b6ee5ad0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d6b6ee4380
|         `-CXXThisExpr 0x55d6b6ee5ac0 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55d6b6ee1e18 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55d6b6ee5df8 <col:38, line:108:5>
|   `-ReturnStmt 0x55d6b6ee5de8 <line:107:2, col:58>
|     `-BinaryOperator 0x55d6b6ee5dc8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55d6b6ee5ce0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55d6b6ee5cc0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55d6b6ee5ca8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55d6b6ee5b50 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d6b6ee4380
|       |   |   `-CXXThisExpr 0x55d6b6ee5b40 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55d6b6ee5c80 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55d6b6ee5c68 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55d6b6ee5be8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d6b6db0008 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55d6b6ee5bc8 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55d6b6ee5da0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55d6b6ee5d88 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55d6b6ee5d68 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d6b6db0008 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55d6b6ee5d48 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55d6b6ee1ed8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55d6b6ee6068 <col:39, line:112:5>
|   `-ReturnStmt 0x55d6b6ee6058 <line:111:2, col:56>
|     `-BinaryOperator 0x55d6b6ee6038 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55d6b6ee5f50 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55d6b6ee5f30 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55d6b6ee5f18 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55d6b6ee5e20 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d6b6ee4380
|       |   |   `-CXXThisExpr 0x55d6b6ee5e10 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55d6b6ee5ef0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55d6b6ee5ed8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55d6b6ee5eb8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d6b6db0008 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55d6b6ee5e98 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55d6b6ee6010 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55d6b6ee5ff8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55d6b6ee5fd8 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d6b6db0008 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55d6b6ee5fb8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55d6b6ee2008 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55d6b6ee2110 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55d6b6ee3180 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55d6b6ee3270 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d6b6ee3330 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b6ee33f8 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55d6b6ee35f8 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55d6b6ee34a8 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55d6b6ee3520 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55d6b6ee3778 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55d6b6ee36b8 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55d6b6ee38c0 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55d6b6ee3830 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55d6b6ee3a68 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55d6b6ee3978 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55d6b6ee3bb0 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55d6b6ee3b20 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55d6b6ee3cf8 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55d6b6ee3c68 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55d6b6ee3dc0 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55d6b6ee3e80 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55d6b6ee3ff8 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55d6b6ee3f30 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55d6b6ee40c0 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55d6b6ee41a8 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55d6b6ee4250 <col:51> "" ""
|-TypedefDecl 0x55d6b6ee42f0 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55d6b6e488a0 'IPAddress'
|   `-CXXRecord 0x55d6b6ee0a20 'IPAddress'
|-AccessSpecDecl 0x55d6b6ee4348 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55d6b6ee4380 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d6b6ee4a28 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55d6b6ee4a28
| `-ParmVarDecl 0x55d6b6ee4b38 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55d6b6ee4bd8 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b6ee4ce8 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55d6b6ee4380 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d6b6ee58c8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55d6b6ee5880 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55d6b6ee4380
| |     `-CXXStaticCastExpr 0x55d6b6ee5850 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55d6b6ee5820 <col:7> 'IPAddress' lvalue ParmVar 0x55d6b6ee4ce8 '' 'IPAddress &&'
| `-CompoundStmt 0x55d6b6ee5910 <col:7>
`-CXXDestructorDecl 0x55d6b6ee55d8 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b7078050 prev 0x55d6b706ee90 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b7078148 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55d6b70781e8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55d6b707efb0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6b707f398 <col:11>
|-CXXConstructorDecl 0x55d6b707f090 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b707f178 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55d6b707fae0 <col:11>
|-CXXConstructorDecl 0x55d6b707f218 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b707f328 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55d6b7081338 <col:11>
|-CXXDestructorDecl 0x55d6b7080648 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d6b6d870a8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b6d871b8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55d6b6d87a80 <col:11>
|   `-ReturnStmt 0x55d6b6d87a70 <col:11>
|     `-UnaryOperator 0x55d6b6d87a58 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b6d87a48 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55d6b6d87228 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6b6d87228
  `-ParmVarDecl 0x55d6b6d87338 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b706e048 prev 0x55d6b706dd58 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b706e140 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55d6b706e1d0 <col:19, col:25> col:19 public
|-TypedefDecl 0x55d6b706e208 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55d6b6cd3280 'int32_t' sugar
|   |-Typedef 0x55d6b6be6268 'int32_t'
|   `-TypedefType 0x55d6b6bbf3b0 '__int32_t' sugar
|     |-Typedef 0x55d6b6bbefc8 '__int32_t'
|     `-BuiltinType 0x55d6b6b7d370 'int'
|-TypedefDecl 0x55d6b706e270 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55d6b6cd3440 'int64_t' sugar
|   |-Typedef 0x55d6b6be62d0 'int64_t'
|   `-TypedefType 0x55d6b6bbf4d0 '__int64_t' sugar
|     |-Typedef 0x55d6b6bbf0a8 '__int64_t'
|     `-BuiltinType 0x55d6b6b7d390 'long'
|-EnumDecl 0x55d6b706e2c8 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55d6b706e440 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55d6b706e420 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55d6b706e3f8 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55d6b706e3e0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55d6b706e3b0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55d6b706e538 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55d6b706e518 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55d6b706e4f0 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55d6b706e4d8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55d6b706e4b0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55d6b706e490 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55d6b706e588 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55d6b706e690 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d6b706ebe0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b706e670 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55d6b706e650 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55d6b706e720 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d6b706ebf8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b706e700 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55d6b706e6e0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55d6b706e7b0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d6b706ec10 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b706e790 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55d6b706e770 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55d6b706e840 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d6b706ec28 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b706e820 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55d6b706e800 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55d6b706e8d0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d6b706ec40 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b706e8b0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55d6b706e890 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55d6b706e960 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d6b706ec58 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b706e940 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55d6b706e920 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55d6b706e9f0 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d6b706ec70 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b706e9d0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55d6b706e9b0 <col:26> 'int' EnumConstant 0x55d6b706e690 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55d6b706eac0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d6b706ec88 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b706eaa0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55d6b706ea80 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55d6b706ea40 <col:27> 'int' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55d6b706ea60 <col:44> 'int' EnumConstant 0x55d6b706e960 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55d6b706eb90 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55d6b706eca0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b706eb70 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55d6b706eb50 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55d6b706eb10 <col:27> 'int' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55d6b706eb30 <col:44> 'int' EnumConstant 0x55d6b706e840 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55d6b706ecb8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55d6b706edc0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55d6b706ee10 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b706eda0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55d6b706ed80 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55d6b706ee38 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55d6b6cd2eb0 'uninitialized_type'
|   `-CXXRecord 0x55d6b6cd2e18 'uninitialized_type'
|-CXXRecordDecl 0x55d6b706ee90 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55d6b706efa0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55d6b7079198 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d6b707f3a8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d6b707f4c8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55d6b707f480 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55d6b707f410 <col:9> '<bound member function type>' ->assign 0x55d6b7073be8
|     | `-CXXThisExpr 0x55d6b707f400 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55d6b707f440 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55d6b707f4b0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55d6b707f460 <col:19> 'int' 0
|-CXXConstructorDecl 0x55d6b706f1e8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55d6b706f060 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55d6b706f0d8 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d6b707ace0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d6b707acc0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55d6b7079198 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d6b707f4e0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d6b707f630 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55d6b707f5b8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55d6b707f548 <col:9> '<bound member function type>' ->assign 0x55d6b7073be8
|     | `-CXXThisExpr 0x55d6b707f538 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d6b707f600 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55d6b707f5e8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d6b707f578 <col:16> 'long' lvalue ParmVar 0x55d6b706f060 'sec' 'long'
|     `-ImplicitCastExpr 0x55d6b707f618 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b707f598 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b706f0d8 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d6b706f448 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d6b706f2b8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55d6b706f330 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d6b707ad18 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d6b707acf8 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55d6b7079198 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d6b707f648 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d6b707f780 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55d6b707f720 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55d6b707f6b0 <col:9> '<bound member function type>' ->assign 0x55d6b7073be8
|     | `-CXXThisExpr 0x55d6b707f6a0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d6b707f750 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6b707f6e0 <col:16> 'int' lvalue ParmVar 0x55d6b706f2b8 'sec' 'int'
|     `-ImplicitCastExpr 0x55d6b707f768 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b707f700 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b706f330 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d6b706f6a8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55d6b706f518 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55d6b706f590 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d6b707ad50 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d6b707ad30 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55d6b7079198 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d6b707f798 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d6b707f8e8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55d6b707f870 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55d6b707f800 <col:9> '<bound member function type>' ->assign 0x55d6b7073be8
|     | `-CXXThisExpr 0x55d6b707f7f0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d6b707f8b8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55d6b707f8a0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d6b707f830 <col:16> 'unsigned long' lvalue ParmVar 0x55d6b706f518 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55d6b707f8d0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b707f850 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b706f590 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d6b7070840 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55d6b706f778 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55d6b706f7f0 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d6b707ad88 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d6b707ad68 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55d6b7079198 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d6b707f900 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d6b707fa50 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55d6b707f9d8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55d6b707f968 <col:9> '<bound member function type>' ->assign 0x55d6b7073be8
|     | `-CXXThisExpr 0x55d6b707f958 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d6b707fa20 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55d6b707fa08 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d6b707f998 <col:16> 'unsigned int' lvalue ParmVar 0x55d6b706f778 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55d6b707fa38 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55d6b707f9b8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b706f7f0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d6b70709a0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55d6b7070910 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55d6b7070b38 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55d6b7070a78 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55d6b7070d68 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55d6b7070c70 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55d6b7070f18 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55d6b7070e58 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55d6b7079198 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d6b707faf0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55d6b707fa68 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55d6b7070e58 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55d6b707fb50 <col:19, line:214:5>
|-CXXConstructorDecl 0x55d6b70710e8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55d6b7071028 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55d6b7079198 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d6b707fb60 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d6b707fc10 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55d6b707fbe8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55d6b707fbb8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55d6b7071028 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55d6b70712d8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55d6b7071250 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55d6b706ddf0 'Timestamp'
|   | `-CXXRecord 0x55d6b706e048 'Timestamp'
|   `-ParenType 0x55d6b70711f0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55d6b70711c0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55d6b706e390 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55d6b706e208 'seconds_type'
|         `-TypedefType 0x55d6b6cd3280 'int32_t' sugar
|           |-Typedef 0x55d6b6be6268 'int32_t'
|           `-TypedefType 0x55d6b6bbf3b0 '__int32_t' sugar
|             |-Typedef 0x55d6b6bbefc8 '__int32_t'
|             `-BuiltinType 0x55d6b6b7d370 'int'
|-CXXConversionDecl 0x55d6b7071418 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55d6b70714e8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55d6b707fd18 <col:37, line:231:5>
|   `-ReturnStmt 0x55d6b707fd08 <line:227:9, col:23>
|     `-BinaryOperator 0x55d6b707fce8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55d6b707fcb8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55d6b707fc68 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55d6b70781e8
|       |   `-MemberExpr 0x55d6b707fc38 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55d6b7079198
|       |     `-CXXThisExpr 0x55d6b707fc28 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55d6b707fcd0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55d6b707fc98 <col:23> 'int' 0
|-CXXMethodDecl 0x55d6b70715a8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55d6b7071668 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b7071728 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b70717e8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b70718a8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6b7071a18 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55d6b7071958 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55d6b7071b60 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55d6b7071ad0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b7071c28 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55d6b7071cc8 <col:54> "" ""
|-CXXMethodDecl 0x55d6b7071d58 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55d6b7071df8 <col:54> "" ""
|-CXXMethodDecl 0x55d6b7071e88 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55d6b7071f28 <col:54> "" ""
|-CXXMethodDecl 0x55d6b7072028 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55d6b70720f8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55d6b7072228 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55d6b7072320 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55d6b7072458 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55d6b707ff30 <col:39, line:271:5>
|   `-ReturnStmt 0x55d6b707ff20 <line:267:9, col:61>
|     `-CallExpr 0x55d6b707fec0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55d6b707fea8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6b707fd30 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55d6b70794c8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55d6b707fef0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55d6b707fd90 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55d6b70781e8
|       |   `-MemberExpr 0x55d6b707fd60 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55d6b7079198
|       |     `-CXXThisExpr 0x55d6b707fd50 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55d6b707ff08 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55d6b707fe30 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55d6b707fe00 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55d6b707fdc0 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55d6b707fe18 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55d6b707fde0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e960 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d6b7072518 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55d6b70800f0 <col:39, line:279:5>
|   `-ReturnStmt 0x55d6b70800e0 <line:275:9, col:61>
|     `-CallExpr 0x55d6b7080080 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55d6b7080068 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6b707ff48 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55d6b70794c8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55d6b70800b0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55d6b707ffa8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55d6b70781e8
|       |   `-MemberExpr 0x55d6b707ff78 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55d6b7079198
|       |     `-CXXThisExpr 0x55d6b707ff68 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55d6b70800c8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55d6b7080048 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55d6b7080018 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55d6b707ffd8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55d6b7080030 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55d6b707fff8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e840 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d6b70725d8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55d6b7080288 <col:39, line:287:5>
|   `-ReturnStmt 0x55d6b7080278 <line:283:9, col:53>
|     `-BinaryOperator 0x55d6b7080258 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55d6b7080228 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55d6b7080148 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55d6b70781e8
|       |   `-MemberExpr 0x55d6b7080118 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55d6b7079198
|       |     `-CXXThisExpr 0x55d6b7080108 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55d6b7080240 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55d6b7080208 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55d6b70801e8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55d6b70801b8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d6b7080178 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e690 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d6b70801d0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d6b7080198 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d6b70726c8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55d6b7081520 <col:40, line:293:5>
|   |-DeclStmt 0x55d6b70803d0 <line:291:9, col:48>
|   | `-VarDecl 0x55d6b70802b0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55d6b70803b0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55d6b7080358 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55d6b7080328 <col:22> '<bound member function type>' ->subsec 0x55d6b7071668
|   |     |   `-CXXThisExpr 0x55d6b7080318 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55d6b7080398 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55d6b7080378 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706eac0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d6b7081510 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55d6b70814f8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55d6b70814c8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d6b70814b0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55d6b7081490 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55d6b7081460 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55d6b70811f8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55d6b70811e0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55d6b70803e8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55d6b70802b0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55d6b7081400 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55d6b70813e8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55d6b70813b8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55d6b7081210 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55d6b7081180 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55d6b7081168 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55d6b7081118 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55d6b706df98 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55d6b70810b8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55d6b7080418 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55d6b7080408 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55d6b7081100 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55d6b70810e8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55d6b70808d8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55d6b7080440 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55d6b70804d0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55d6b70804a0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55d6b7080460 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706eac0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55d6b70804b8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55d6b7080480 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55d6b70802b0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55d6b7081430 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55d6b70811c8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55d6b70811b8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55d6b7072788 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55d6b7081a78 <col:40, line:302:5>
|   |-DeclStmt 0x55d6b7081670 <line:297:9, col:48>
|   | `-VarDecl 0x55d6b7081550 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55d6b7081650 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55d6b70815f8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55d6b70815c8 <col:22> '<bound member function type>' ->subsec 0x55d6b7071668
|   |     |   `-CXXThisExpr 0x55d6b70815b8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55d6b7081638 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55d6b7081618 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706eb90 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d6b7081a68 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55d6b7081a50 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55d6b7081a20 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d6b7081a08 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55d6b70819e8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55d6b70819b8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55d6b70818e0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55d6b70818c8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55d6b7081688 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55d6b7081550 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55d6b7081958 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55d6b7081940 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55d6b7081910 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55d6b70818f8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55d6b7081868 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55d6b7081850 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55d6b7081830 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55d6b706df98 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55d6b70817d0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55d6b70816b8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55d6b70816a8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55d6b7081818 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55d6b7081800 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55d6b7081790 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55d6b70816e0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55d6b7081770 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55d6b7081740 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55d6b7081700 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706eb90 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55d6b7081758 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55d6b7081720 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55d6b7081550 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55d6b7081988 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55d6b70818b0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55d6b70818a0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55d6b7072848 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55d6b7081b00 <col:40, line:306:5>
|   `-ReturnStmt 0x55d6b7081af0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55d6b7081ac0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55d6b7081aa8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6b7081a98 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55d6b70729e8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55d6b70728f8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55d6b7072bb8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55d6b7072ac0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55d6b7072ca8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55d6b7072e18 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55d6b7072d58 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55d6b7081c48 <col:56, line:320:5>
|   `-ReturnStmt 0x55d6b7081c38 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55d6b7081c20 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55d6b7081bf0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d6b7081bd8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d6b7081b98 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55d6b7081b68 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55d6b7081b28 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d6b7072d58 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55d6b7081b80 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55d6b7081b48 <col:31> 'int' 0
|-CXXMethodDecl 0x55d6b7073058 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d6b7072ed0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d6b7072f48 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b7081e18 <col:72, line:326:5>
|   `-ReturnStmt 0x55d6b7081e08 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55d6b7081df0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55d6b7081dc0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d6b7081da8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d6b7081d68 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55d6b7081d50 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55d6b7081c70 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d6b7072ed0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55d6b7081d10 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55d6b7081cf8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d6b7081c90 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d6b7077940 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55d6b7081d38 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55d6b7081cb0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7072f48 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b7073208 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55d6b7073118 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55d6b70824e0 <col:56, line:337:5>
|   |-DeclStmt 0x55d6b7082118 <line:329:9, col:51>
|   | `-VarDecl 0x55d6b7081e40 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55d6b7082100 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55d6b70820d0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55d6b70820b8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55d6b70820a0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55d6b7082070 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55d6b7082058 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55d6b7082040 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55d6b7081f30 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55d6b70822d0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55d6b7082180 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55d6b70781e8
|   | | `-MemberExpr 0x55d6b7082150 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55d6b7079198
|   | |   `-DeclRefExpr 0x55d6b7082130 <col:9> 'Timestamp' lvalue Var 0x55d6b7081e40 't' 'Timestamp'
|   | `-BinaryOperator 0x55d6b70822b0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55d6b7082280 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55d6b70821b0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d6b7073118 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55d6b7082298 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55d6b7082260 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55d6b7082240 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55d6b7082210 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55d6b70821d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55d6b7082228 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55d6b70821f0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e960 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d6b70824c8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55d6b7082498 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55d6b7082480 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55d6b7082460 <col:16> 'Timestamp' lvalue Var 0x55d6b7081e40 't' 'Timestamp'
|-CXXMethodDecl 0x55d6b70733d0 <line:341:5, line:343:5> line:341:29 used make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d6b70732c0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d6b7073338 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b7082698 <col:72, line:343:5>
|   `-ReturnStmt 0x55d6b7082688 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55d6b7082670 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55d6b7082640 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d6b7082628 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d6b70825e8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55d6b70825d0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55d6b7082518 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d6b70732c0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55d6b7082590 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55d6b7082578 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d6b7082538 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d6b7077a88 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55d6b70825b8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55d6b7082558 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7073338 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b7073520 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55d6b7073490 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55d6b7082ae0 <col:56, line:354:5>
|   |-DeclStmt 0x55d6b7082888 <line:346:9, col:51>
|   | `-VarDecl 0x55d6b70826c0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55d6b7082870 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55d6b7082840 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55d6b7082828 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55d6b7082810 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55d6b70827e0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55d6b70827c8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55d6b70827b0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55d6b7082780 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55d6b7082a40 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55d6b70828f0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55d6b70781e8
|   | | `-MemberExpr 0x55d6b70828c0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55d6b7079198
|   | |   `-DeclRefExpr 0x55d6b70828a0 <col:9> 'Timestamp' lvalue Var 0x55d6b70826c0 't' 'Timestamp'
|   | `-BinaryOperator 0x55d6b7082a20 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55d6b70829f0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55d6b7082920 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d6b7073490 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55d6b7082a08 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55d6b70829d0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55d6b70829b0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55d6b7082980 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55d6b7082940 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55d6b7082998 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55d6b7082960 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e840 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d6b7082ac8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55d6b7082a98 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55d6b7082a80 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55d6b7082a60 <col:16> 'Timestamp' lvalue Var 0x55d6b70826c0 't' 'Timestamp'
|-CXXMethodDecl 0x55d6b70736e8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d6b70735d8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d6b7073650 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b7082c98 <col:72, line:360:5>
|   `-ReturnStmt 0x55d6b7082c88 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55d6b7082c70 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55d6b7082c40 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d6b7082c28 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d6b7082be8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55d6b7082bd0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55d6b7082b18 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d6b70735d8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55d6b7082b90 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55d6b7082b78 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d6b7082b38 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d6b7077bd0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55d6b7082bb8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55d6b7082b58 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7073650 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b7073838 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55d6b70737a8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55d6b708f608 <col:56, line:371:5>
|   |-DeclStmt 0x55d6b7082e88 <line:363:9, col:51>
|   | `-VarDecl 0x55d6b7082cc0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55d6b7082e70 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55d6b7082e40 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55d6b7082e28 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55d6b7082e10 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55d6b7082de0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55d6b7082dc8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55d6b7082db0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55d6b7082d80 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55d6b708f568 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55d6b7082ef0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55d6b70781e8
|   | | `-MemberExpr 0x55d6b7082ec0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55d6b7079198
|   | |   `-DeclRefExpr 0x55d6b7082ea0 <col:9> 'Timestamp' lvalue Var 0x55d6b7082cc0 't' 'Timestamp'
|   | `-CallExpr 0x55d6b708f508 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55d6b708f4f0 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55d6b7082f20 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55d6b70794c8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55d6b708f538 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55d6b7082f40 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d6b70737a8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55d6b708f550 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55d6b708f4d0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55d6b708f4a0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55d6b7082f60 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e690 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55d6b708f4b8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55d6b7082f80 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d6b708f5f0 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55d6b708f5c0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55d6b708f5a8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55d6b708f588 <col:16> 'Timestamp' lvalue Var 0x55d6b7082cc0 't' 'Timestamp'
|-CXXMethodDecl 0x55d6b7073928 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55d6b708f748 <col:39, line:377:5>
|   `-ReturnStmt 0x55d6b708f738 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55d6b708f720 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55d6b708f6f0 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d6b708f6d8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d6b708f698 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55d6b708f640 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55d6b708f680 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55d6b708f660 <col:29> 'int' 1
|-CXXMethodDecl 0x55d6b70739e8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55d6b708f828 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55d6b708f7e0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55d6b708f770 <col:9> '<bound member function type>' ->assign 0x55d6b7073be8
|     | `-CXXThisExpr 0x55d6b708f760 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55d6b708f7a0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55d6b708f810 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55d6b708f7c0 <col:19> 'int' 0
|-CXXMethodDecl 0x55d6b7073be8 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d6b7073a98 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d6b7073b10 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d6b707adc0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d6b707ada0 <col:60> 'int' 0
| `-CompoundStmt 0x55d6b708fa20 <col:63, line:395:5>
|   `-BinaryOperator 0x55d6b708fa00 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55d6b708f880 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55d6b70781e8
|     | `-MemberExpr 0x55d6b708f850 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55d6b7079198
|     |   `-CXXThisExpr 0x55d6b708f840 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55d6b708f9e0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55d6b708f970 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55d6b708f910 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55d6b708f8f8 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55d6b708f8e0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55d6b708f8b0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d6b7073a98 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55d6b708f958 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55d6b708f938 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55d6b708f9c8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55d6b708f9b0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55d6b708f990 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7073b10 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b7073db8 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d6b7073ca8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d6b7073d20 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b708fb78 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55d6b708fb30 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55d6b708fa48 <col:9> '<bound member function type>' ->assign 0x55d6b7073be8
|     | `-CXXThisExpr 0x55d6b708fa38 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d6b708fb60 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6b708fa78 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d6b7073ca8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55d6b708faf0 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55d6b708fad8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6b708fa98 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d6b7077a88 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55d6b708fb18 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55d6b708fab8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7073d20 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b7073f88 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d6b7073e78 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d6b7073ef0 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b708fcd0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55d6b708fc88 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55d6b708fba0 <col:9> '<bound member function type>' ->assign 0x55d6b7073be8
|     | `-CXXThisExpr 0x55d6b708fb90 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d6b708fcb8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6b708fbd0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d6b7073e78 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55d6b708fc48 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55d6b708fc30 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6b708fbf0 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d6b7077bd0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55d6b708fc70 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55d6b708fc10 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7073ef0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b7074158 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d6b7074048 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d6b70740c0 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d6b707adf8 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d6b707add8 <col:57> 'int' 0
| `-DeprecatedAttr 0x55d6b7074208 <col:75> "" ""
|-CXXMethodDecl 0x55d6b7074398 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d6b7074288 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d6b7074300 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6b7074448 <col:74> "" ""
|-CXXMethodDecl 0x55d6b70745d8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d6b70744c8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d6b7074540 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6b7074688 <col:74> "" ""
|-CXXMethodDecl 0x55d6b7074718 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55d6b70747b8 <col:42> "" ""
|-CXXMethodDecl 0x55d6b7076ff0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55d6b7076ed0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55d6b7076f50 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55d6b70770c0 <line:432:5, col:33> col:29 used now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d6b7077180 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55d6b7077220 <col:20>
| `-OptimizeNoneAttr 0x55d6b7077278 <col:30>
|-CXXMethodDecl 0x55d6b70772c0 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d6b7077380 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55d6b7077440 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d6b7077500 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55d6b70775c0 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d6b7077680 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55d6b7077740 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55d6b7077800 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55d6b7077940 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d6b70778b0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b708fe18 <col:58, line:512:5>
|   `-ReturnStmt 0x55d6b708fe08 <line:511:9, col:53>
|     `-BinaryOperator 0x55d6b708fde8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55d6b708fdb8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d6b708fce8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b70778b0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d6b708fdd0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d6b708fd98 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55d6b708fd78 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55d6b708fd48 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d6b708fd08 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d6b708fd60 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d6b708fd28 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e960 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d6b7077a88 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d6b70779f8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b708ff60 <col:58, line:516:5>
|   `-ReturnStmt 0x55d6b708ff50 <line:515:9, col:53>
|     `-BinaryOperator 0x55d6b708ff30 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55d6b708ff00 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d6b708fe30 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b70779f8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d6b708ff18 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d6b708fee0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55d6b708fec0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55d6b708fe90 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d6b708fe50 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d6b708fea8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d6b708fe70 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e840 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d6b7077bd0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d6b7077b40 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b70900a8 <col:58, line:520:5>
|   `-ReturnStmt 0x55d6b7090098 <line:519:9, col:53>
|     `-BinaryOperator 0x55d6b7090078 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55d6b7090048 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d6b708ff78 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7077b40 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d6b7090060 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d6b7090028 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55d6b7090008 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55d6b708ffd8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d6b708ff98 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e690 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d6b708fff0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d6b708ffb8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d6b7077d18 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d6b7077c88 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b70901f0 <col:60, line:524:5>
|   `-ReturnStmt 0x55d6b70901e0 <line:523:9, col:55>
|     `-BinaryOperator 0x55d6b70901c0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55d6b7090190 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d6b70900c0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7077c88 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d6b70901a8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d6b7090170 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55d6b7090150 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55d6b7090120 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d6b70900e0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d6b7090138 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d6b7090100 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e960 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d6b7077e60 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d6b7077dd0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b7090338 <col:60, line:528:5>
|   `-ReturnStmt 0x55d6b7090328 <line:527:9, col:55>
|     `-BinaryOperator 0x55d6b7090308 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55d6b70902d8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d6b7090208 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7077dd0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d6b70902f0 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d6b70902b8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55d6b7090298 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55d6b7090268 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d6b7090228 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d6b7090280 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d6b7090248 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e840 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d6b7077fa8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d6b7077f18 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b7090480 <col:60, line:532:5>
|   `-ReturnStmt 0x55d6b7090470 <line:531:9, col:55>
|     `-BinaryOperator 0x55d6b7090450 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55d6b7090420 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d6b7090350 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b7077f18 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d6b7090438 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d6b7090400 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55d6b70903e0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55d6b70903b0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d6b7090370 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e690 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d6b70903c8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d6b7090390 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d6b706e9f0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55d6b7078050 prev 0x55d6b706ee90 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d6b7078148 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55d6b70781e8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55d6b707efb0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d6b707f398 <col:11>
| |-CXXConstructorDecl 0x55d6b707f090 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d6b707f178 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55d6b707fae0 <col:11>
| |-CXXConstructorDecl 0x55d6b707f218 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d6b707f328 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55d6b7081338 <col:11>
| |-CXXDestructorDecl 0x55d6b7080648 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55d6b6d870a8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d6b6d871b8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55d6b6d87a80 <col:11>
| |   `-ReturnStmt 0x55d6b6d87a70 <col:11>
| |     `-UnaryOperator 0x55d6b6d87a58 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d6b6d87a48 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55d6b6d87228 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6b6d87228
|   `-ParmVarDecl 0x55d6b6d87338 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x55d6b7078250 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55d6b7078350 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55d6b7078550 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b7078330 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6b7078310 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d6b70783e0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55d6b7078568 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b70783c0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55d6b70783a0 <col:23> 'int' 1
| |-EnumConstantDecl 0x55d6b7078470 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55d6b7078580 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b7078450 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55d6b7078430 <col:23> 'int' 2
| `-EnumConstantDecl 0x55d6b7078500 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55d6b7078598 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6b70784e0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55d6b70784c0 <col:27> 'int' 3
|-CXXMethodDecl 0x55d6b70785d8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55d6b70786a0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55d6b70788a8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55d6b7078750 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55d6b70787d0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55d6b707ae10 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55d6b7078ab8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55d6b7078968 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55d6b70789e0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55d6b7078b88 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55d6b7078c48 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55d6b7078db8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55d6b7078cf8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55d6b7078e80 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d6b7078f40 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55d6b7079000 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d6b70790c0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55d6b7079160 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55d6b7079198 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55d6b7079208 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55d6b7090498 <col:27, line:684:5>
|-CXXMethodDecl 0x55d6b70792c8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55d6b70904a8 <col:27, line:696:5>
|-CXXMethodDecl 0x55d6b70794c8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d6b7079378 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55d6b70793f0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b7090630 <col:66, line:700:5>
|   `-ReturnStmt 0x55d6b7090620 <line:699:9, col:31>
|     `-CallExpr 0x55d6b70905c0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55d6b70905a8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6b7090558 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55d6b6efb658 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55d6b70905f0 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55d6b7090518 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d6b7079378 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55d6b7090608 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55d6b7090538 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b70793f0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6b7079838 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d6b7079588 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55d6b7079600 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55d6b7079678 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55d6b70796f0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d6b7090980 <col:64, line:707:5>
|   |-DeclStmt 0x55d6b70906c0 <line:704:9, col:24>
|   | `-VarDecl 0x55d6b7090658 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55d6b70908d0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55d6b70906d8 <col:9> 'int32_t':'int' lvalue ParmVar 0x55d6b7079600 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55d6b70908b8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55d6b7090850 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55d6b7090838 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6b70907b8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55d6b6f00928 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55d6b7090888 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55d6b7090758 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d6b7079678 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55d6b70908a0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55d6b7090778 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d6b70796f0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55d6b7090798 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55d6b7090658 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55d6b7090960 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55d6b70908f0 <col:9> 'int32_t':'int' lvalue ParmVar 0x55d6b7079588 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55d6b7090948 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55d6b7090930 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55d6b7090910 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55d6b7090658 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55d6b7079ad8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55d6b7079908 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55d6b7079980 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55d6b70799f8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55d6b7079d78 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55d6b7079ba0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55d6b7079c18 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55d6b7079c90 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55d6b7079f08 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55d6b7079e40 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55d6b707a108 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55d6b7079fc0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55d6b707a038 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55d6b707a3d8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55d6b707a318 parent 0x55d6b6b7d278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55d6b707a1c8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55d6b707a240 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55d6b707a5f8 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55d6b707a538 parent 0x55d6b6b7d278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55d6b707a428 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55d6b707a4a0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55d6b707a7c0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55d6b707a708 parent 0x55d6b6b7d278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55d6b707a648 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55d6b707aa48 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55d6b707a988 parent 0x55d6b6b7d278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55d6b707a838 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55d6b707a8b0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55d6b707ac68 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55d6b707aba8 parent 0x55d6b6b7d278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55d6b707aa98 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55d6b707ab10 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55d6b70804f0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b70805d8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55d6b7079198 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d6b7081048 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55d6b7081000 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55d6b7079198
| |     `-DeclRefExpr 0x55d6b7080fe0 <col:7> 'const Timestamp' lvalue ParmVar 0x55d6b70805d8 '' 'const Timestamp &'
| `-CompoundStmt 0x55d6b70810a8 <col:7>
|-CXXConstructorDecl 0x55d6b7080758 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b7080868 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55d6b7079198 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d6b7081348 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55d6b70812f0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55d6b7079198
| |     `-CXXStaticCastExpr 0x55d6b70812c0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55d6b7081290 <col:7> 'Timestamp' lvalue ParmVar 0x55d6b7080868 '' 'Timestamp &&'
| `-CompoundStmt 0x55d6b70813a8 <col:7>
|-CXXDestructorDecl 0x55d6b7080918 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d6b6d86ef8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b6d87008 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55d6b6d87af8 <col:7>
|   |-CXXMemberCallExpr 0x55d6b6d87a98 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55d6b6d879d8 <col:7> '<bound member function type>' .operator= 0x55d6b6d870a8
|   | | `-MemberExpr 0x55d6b6d878e8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55d6b7079198
|   | |   `-CXXThisExpr 0x55d6b6d878d8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55d6b6d879a8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55d6b7079198
|   |   `-DeclRefExpr 0x55d6b6d87988 <col:7> 'const Timestamp' lvalue ParmVar 0x55d6b6d87008 '' 'const Timestamp &'
|   `-ReturnStmt 0x55d6b6d87ae8 <col:7>
|     `-UnaryOperator 0x55d6b6d87ad0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6b6d87ac0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55d6b6d873a8 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x55d6b6d873a8
  `-ParmVarDecl 0x55d6b6d874b8 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b71a9c30 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b71a9d48 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55d6b71a9dd8 <col:16, col:22> col:16 public
|-EnumDecl 0x55d6b71a9e00 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55d6b71a9f00 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d6b71aa150 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71a9ee0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6b71a9ec0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d6b71a9f90 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d6b71aa168 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71a9f70 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55d6b71a9f50 <col:24> 'int' 22
| |-EnumConstantDecl 0x55d6b71aa020 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d6b71aa180 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71aa000 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55d6b71a9fe0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55d6b71aa0b0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d6b71aa198 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6b71aa090 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55d6b71aa070 <col:25> 'int' 95
| `-EnumConstantDecl 0x55d6b71aa100 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55d6b71abb40 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6b71abf78 <col:7>
|-CXXConstructorDecl 0x55d6b71abc48 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55d6b71abc48
| `-ParmVarDecl 0x55d6b71abd58 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55d6b71abdf8 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55d6b71abdf8
| `-ParmVarDecl 0x55d6b71abf08 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55d6b71ae078 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b71aa1c8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55d6b71aa328 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55d6b71aa3b8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55d6b71aa3f0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55d6b6cd31a0 'uint32_t' sugar
|   |-Typedef 0x55d6b6be6408 'uint32_t'
|   `-TypedefType 0x55d6b6bbf440 '__uint32_t' sugar
|     |-Typedef 0x55d6b6bbf038 '__uint32_t'
|     `-BuiltinType 0x55d6b6b7d410 'unsigned int'
|-CXXConstructorDecl 0x55d6b71aa538 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55d6b71aa460 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55d6b71aba48 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55d6b71abf88 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55d6b71ab2d0 'base' 'int'
| | `-ImplicitCastExpr 0x55d6b71abae8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6b71abaa8 <col:16> 'int' lvalue ParmVar 0x55d6b71aa460 'b' 'int'
| `-CompoundStmt 0x55d6b71abff8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55d6b71aaa30 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55d6b71aa600 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55d6b71aa680 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55d6b71aa6f8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55d6b71aa778 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55d6b71aa838 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55d6b71aa8b8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55d6b71aae88 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55d6b71aab00 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55d6b71aade8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55d6b71aaba8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55d6b71aac48 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55d6b71aacc0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55d6b71aba68 <col:82> 'const ArgContext' lvalue Var 0x55d6b719e888 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55d6b71acf28 <col:94, line:1067:5>
|     |-DeclStmt 0x55d6b71ac188 <line:1054:9, col:64>
|     | `-VarDecl 0x55d6b71ac018 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55d6b71ac140 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55d6b71ac3a8 <line:1055:9, col:91>
|     | `-VarDecl 0x55d6b71ac1b8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55d6b71ac380 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55d6b71ac360 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55d6b71ac310 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55d6b71ac2f0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55d6b71ac298 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55d6b71ac248 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55d6b71ac278 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55d6b71ac2d8 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55d6b71ac2b8 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55d6b71ac340 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55d6b71ac508 <line:1056:9, col:27>
|     | `-VarDecl 0x55d6b71ac4a0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55d6b71ac950 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55d6b71ac880 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55d6b71ac800 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55d6b709d2d8 0x55d6b6ee6b78 0x55d6b6ee6850 0x55d6b6edc460 0x55d6b6edc110 0x55d6b6edba00 0x55d6b6eac890 0x55d6b6e3a540
|     | | |-CallExpr 0x55d6b71ac740 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55d6b71ac530 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55d6b71ac5e0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55d6b71ac5b0 <col:19, col:23> '<bound member function type>' .begin 0x55d6b6ec9f38
|     | | | |   `-DeclRefExpr 0x55d6b71ac590 <col:19> 'const String' lvalue ParmVar 0x55d6b71aaba8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55d6b71ac650 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55d6b71ac620 <col:32, col:36> '<bound member function type>' .end 0x55d6b6eca150
|     | | | |   `-DeclRefExpr 0x55d6b71ac600 <col:32> 'const String' lvalue ParmVar 0x55d6b71aaba8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55d6b71ac670 <col:43> 'const bool' lvalue Var 0x55d6b71ac018 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55d6b71ac6d8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55d6b71ac6b8 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55d6b71ac700 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55d6b71ac4a0 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55d6b71ac720 <col:73> 'const int' lvalue Var 0x55d6b71ac1b8 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55d6b71ac7e0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55d6b71ac7b0 <col:16, col:20> '<bound member function type>' .end 0x55d6b6eca150
|     | |     `-DeclRefExpr 0x55d6b71ac790 <col:16> 'const String' lvalue ParmVar 0x55d6b71aaba8 'str' 'const String &'
|     | `-BinaryOperator 0x55d6b71ac930 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55d6b71ac8c8 <col:13> 'int' lvalue ->status 0x55d6b71ab338
|     |   | `-CXXThisExpr 0x55d6b71ac8b8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55d6b71ac918 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55d6b71ac8f8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6b71a9f90 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55d6b71acba0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55d6b71aca88 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55d6b71aca70 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55d6b71aca58 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55d6b71ac978 <col:13> 'int' lvalue ->status 0x55d6b71ab338
|     | | |     `-CXXThisExpr 0x55d6b71ac968 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55d6b71aca38 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55d6b71aca08 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55d6b71ac9b8 <col:23> 'int' lvalue ->status 0x55d6b71ab338
|     | |   |   `-CXXThisExpr 0x55d6b71ac9a8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55d6b71aca20 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55d6b71ac9e8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6b71aa020 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55d6b71acb80 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55d6b71acb20 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55d6b71acac8 <col:13, col:18> '<bound member function type>' .error 0x55d6b71514b0
|     |   | | `-DeclRefExpr 0x55d6b71acaa8 <col:13> 'const ArgContext' lvalue ParmVar 0x55d6b71aacc0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55d6b71acb48 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55d6b71acaf8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55d6b71acb70 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55d6b71acb60 <col:20> 'bool' false
|     |-DeclStmt 0x55d6b71acd78 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55d6b71acd20 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55d6b71accb0 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55d6b71aced8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6b71acd90 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55d6b6e6e348
|     | |-DeclRefExpr 0x55d6b71acdd8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55d6b71ac4a0 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55d6b71acea8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55d6b71ace20 <col:64> 'V' lvalue ParmVar 0x55d6b71aac48 'result' 'V &'
|     `-ReturnStmt 0x55d6b71acf18 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55d6b71acf08 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55d6b71ab248 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55d6b71aaef8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55d6b71ab1a8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55d6b71aafa8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55d6b71ab048 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55d6b71ab0c0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55d6b71aba88 <col:71> 'const ArgContext' lvalue Var 0x55d6b719e888 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55d6b71ad698 <col:83, line:1083:5>
| |   |-DeclStmt 0x55d6b71acff0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55d6b71acf88 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55d6b71ad670 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55d6b71ad280 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55d6b71ad108 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55d6b71ad0d0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55d6b71ad018 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55d6b71ad070 <col:31> 'const String' lvalue ParmVar 0x55d6b71aafa8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55d6b71ad090 <col:36> 'V' lvalue Var 0x55d6b71acf88 'x' 'V'
| |     | |   `-DeclRefExpr 0x55d6b71ad0b0 <col:39> 'const ArgContext' lvalue ParmVar 0x55d6b71ab0c0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55d6b71ad260 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55d6b71ad240 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55d6b71ad228 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55d6b71ad210 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55d6b71ad130 <col:17> 'int' lvalue ->status 0x55d6b71ab338
| |     |     |     `-CXXThisExpr 0x55d6b71ad120 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55d6b71ad1f0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55d6b71ad1c0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55d6b71ad170 <col:27> 'int' lvalue ->status 0x55d6b71ab338
| |     |       |   `-CXXThisExpr 0x55d6b71ad160 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55d6b71ad1d8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55d6b71ad1a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6b71aa020 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55d6b71ad2b0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55d6b71ad2a0 <col:20> 'bool' false
| |     `-IfStmt 0x55d6b71ad648 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55d6b71ad350 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55d6b71ad320 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55d6b71ad2d0 <col:18> 'int' lvalue ->status 0x55d6b71ab338
| |       | |   `-CXXThisExpr 0x55d6b71ad2c0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55d6b71ad338 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55d6b71ad300 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6b71aa020 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55d6b71ad588 <col:42, line:1079:9>
| |       | |-CallExpr 0x55d6b71ad530 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55d6b71ad380 <line:1076:13> '<bound member function type>' ->range_error 0x55d6b71ab978
| |       | | | `-CXXThisExpr 0x55d6b71ad370 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55d6b71ad3b0 <col:25> 'const ArgContext' lvalue ParmVar 0x55d6b71ab0c0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55d6b71ad490 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55d6b71ad508 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55d6b71ad4e8 <col:43> 'V' lvalue Var 0x55d6b71acf88 'x' 'V'
| |       | `-ReturnStmt 0x55d6b71ad578 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55d6b71ad568 <col:20> 'bool' false
| |       `-CompoundStmt 0x55d6b71ad628 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55d6b71ad5e8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55d6b71ad5a8 <col:13> 'V' lvalue ParmVar 0x55d6b71ab048 'result' 'V &'
| |         | `-DeclRefExpr 0x55d6b71ad5c8 <col:22> 'V' lvalue Var 0x55d6b71acf88 'x' 'V'
| |         `-ReturnStmt 0x55d6b71ad618 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55d6b71ad608 <col:20> 'bool' true
| |-CXXMethodDecl 0x55d6b7220238 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55d6b7220018 <col:16, col:30> col:30 str 'const String &'
| | |-ParmVarDecl 0x55d6b72200e8 <col:35, col:38> col:38 result 'int &'
| | `-ParmVarDecl 0x55d6b7220150 <col:46, col:71> col:64 args 'const ArgContext &' cinit
| |   `-DeclRefExpr 0x55d6b71aba88 <col:71> 'const ArgContext' lvalue Var 0x55d6b719e888 'blank_args' 'const ArgContext'
| `-CXXMethodDecl 0x55d6b7220ff8 <col:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55d6b7220dd0 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x55d6b7220ea8 <col:35, col:38> col:38 result 'unsigned int &'
|   `-ParmVarDecl 0x55d6b7220f10 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x55d6b71aba88 <col:71> 'const ArgContext' lvalue Var 0x55d6b719e888 'blank_args' 'const ArgContext'
|-FieldDecl 0x55d6b71ab2d0 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55d6b71ab338 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55d6b71ab388 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55d6b71ab640 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55d6b71ab3c8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55d6b71ab448 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55d6b71ab4c0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55d6b71ab540 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55d6b71ab978 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55d6b71ab710 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55d6b71ab788 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55d6b71ab850 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55d6b71adef8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55d6b71adef8
| `-ParmVarDecl 0x55d6b71ae008 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55d6b71ae188 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55d6b71ae188
| `-ParmVarDecl 0x55d6b71ae298 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55d6b721fdc0 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<struct in_addr>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   struct in_addr * _ptr
        24 |   struct in_addr _slot
        24 |     in_addr_t s_addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b6cd2e18 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b6cd2f38 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x55d6b6ee51c0 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d6b6ee52a0 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x55d6b6ee52a0
| `-ParmVarDecl 0x55d6b6ee5388 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x55d6b6ee5428 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x55d6b6ee5428
| `-ParmVarDecl 0x55d6b6ee5538 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x55d6b7081f60 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b71b7880 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b71b7998 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55d6b71b7a28 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55d6b71b7c68 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55d6b71b7a60 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55d6b71b7ae0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55d6b71b7b58 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55d6b71b7e80 <col:81> 'const ArgContext' lvalue Var 0x55d6b719e888 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55d6b71b7dc0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55d6b71b7d30 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55d6b71b7fd8 <col:35, line:1261:5>
|   `-ReturnStmt 0x55d6b71b7fc8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55d6b71b7fb0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55d6b71b7f80 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55d6b71b7f68 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55d6b71b7f40 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55d6b71b7f20 <col:16, col:24> 'String' (CXXTemporary 0x55d6b71b7f20)
|               `-CXXConstructExpr 0x55d6b71b7ee8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55d6b71b7ed0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55d6b71b7eb0 <col:23> 'bool' lvalue ParmVar 0x55d6b71b7d30 'x' 'bool'
|-CXXConstructorDecl 0x55d6b7240188 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d6b7240288 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55d6b7240288
| `-ParmVarDecl 0x55d6b7240398 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x55d6b7240438 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b7240548 <col:7> col:7 'BoolArg &&'
| `-CompoundStmt 0x55d6b7294430 <col:7>
`-CXXDestructorDecl 0x55d6b72405e8 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6b71b2490 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55d6b71b26e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55d6b725e778 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d6b725ec10 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55d6b725ebf0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55d6b725ec80 <col:19>
|-CXXConstructorDecl 0x55d6b725e878 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55d6b725e878
| `-ParmVarDecl 0x55d6b725e988 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55d6b725ea28 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b725eb38 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d6b725f840 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d6b725f560 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55d6b725f530 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55d6b725f500 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55d6b725eb38 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55d6b725f8b0 <col:19>
`-CXXDestructorDecl 0x55d6b725ecc0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6b71b27c0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55d6b71b2a18 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55d6b7267398 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d6b7267830 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55d6b7267810 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55d6b72678a0 <col:19>
|-CXXConstructorDecl 0x55d6b7267498 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55d6b7267498
| `-ParmVarDecl 0x55d6b72675a8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55d6b7267648 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b7267758 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d6b727d410 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d6b727d3f0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55d6b727d3c0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55d6b727d390 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55d6b7267758 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55d6b727d480 <col:19>
`-CXXDestructorDecl 0x55d6b727cbb0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b71bf348 prev 0x55d6b71209e0 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x55d6b71c0db8 <line:148:18>
|-CXXRecordDecl 0x55d6b71bf440 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x55d6b71bf4d0 <col:22, col:28> col:22 public
|-TypedefDecl 0x55d6b71bf508 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55d6b6cd2eb0 'uninitialized_type'
|   `-CXXRecord 0x55d6b6cd2e18 'uninitialized_type'
|-CXXConstructorDecl 0x55d6b71bf598 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x55d6b71c10b8 <col:27, line:16:5>
|   `-BinaryOperator 0x55d6b71c1098 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55d6b71c0ea0 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55d6b71c0e88 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55d6b71c0e38 <col:2> 'uint16_t [3]' lvalue ->_data 0x55d6b71c0bb8
|     | |   `-CXXThisExpr 0x55d6b71c0e28 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55d6b71c0e68 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55d6b71c1080 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55d6b71c1060 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55d6b71c0f38 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55d6b71c0f20 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55d6b71c0ed0 <col:13> 'uint16_t [3]' lvalue ->_data 0x55d6b71c0bb8
|         | |   `-CXXThisExpr 0x55d6b71c0ec0 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55d6b71c0f00 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55d6b71c1048 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55d6b71c1028 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55d6b71c0fd0 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55d6b71c0fb8 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55d6b71c0f68 <col:24> 'uint16_t [3]' lvalue ->_data 0x55d6b71c0bb8
|             | |   `-CXXThisExpr 0x55d6b71c0f58 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55d6b71c0f98 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55d6b71c1010 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x55d6b71c0ff0 <col:35> 'int' 0
|-CXXConstructorDecl 0x55d6b71bf6e8 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55d6b71bf658 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x55d6b71c1280 <col:61, line:24:5>
|   `-CallExpr 0x55d6b71c11d0 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x55d6b71c11b8 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55d6b71c1198 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55d6b6e03238 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55d6b71c1220 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x55d6b71c1208 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x55d6b71c1128 <col:9> 'uint16_t [3]' lvalue ->_data 0x55d6b71c0bb8
|     |     `-CXXThisExpr 0x55d6b71c1118 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x55d6b71c1250 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55d6b71c1238 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d6b71c1158 <col:16> 'const unsigned char *' lvalue ParmVar 0x55d6b71bf658 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x55d6b71c1268 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x55d6b71c1178 <col:22> 'int' 6
|-CXXConstructorDecl 0x55d6b71bf838 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55d6b71bf7a8 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55d6b71c12f0 <col:59, line:29:5>
|   `-CStyleCastExpr 0x55d6b71c12c8 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55d6b71c1298 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55d6b71bf7a8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55d6b71bf938 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x55d6b71c1a38 <col:42, line:34:5>
|   `-ReturnStmt 0x55d6b71c1a28 <line:33:2, col:28>
|     `-ExprWithCleanups 0x55d6b71c1a10 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x55d6b71c19e0 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d6b71c1818 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55d6b71c1790 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55d6b71c1680 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x55d6b71c1668 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x55d6b71c1318 <col:22> 'int' 65535
|-CXXMethodDecl 0x55d6b71bf9f8 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x55d6b71bfa98 <col:59> "" ""
|-TypedefDecl 0x55d6b71bfc18 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x55d6b71bfb90 'bool (EtherAddress::*)() const'
|   |-RecordType 0x55d6b70df700 'EtherAddress'
|   | `-CXXRecord 0x55d6b71bf348 'EtherAddress'
|   `-ParenType 0x55d6b71bfb30 'bool () const' sugar
|     `-FunctionProtoType 0x55d6b6c25bd0 'bool () const' const cdecl
|       `-BuiltinType 0x55d6b6b7d2f0 'bool'
|-CXXConversionDecl 0x55d6b71bfd58 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x55d6b71c1e18 <col:51, line:43:5>
|   `-ReturnStmt 0x55d6b71c1e08 <line:42:2, col:70>
|     `-ConditionalOperator 0x55d6b71c1dd8 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x55d6b71c1d00 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x55d6b71c1c18 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x55d6b71c1bd0 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x55d6b71c1bb8 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55d6b71c1b00 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55d6b71c1ae8 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55d6b71c1a60 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|       | | |     |   `-CXXThisExpr 0x55d6b71c1a50 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55d6b71c1a90 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55d6b71c1c00 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x55d6b71c1be8 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55d6b71c1b98 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55d6b71c1b80 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55d6b71c1b30 <col:21> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|       | |       |   `-CXXThisExpr 0x55d6b71c1b20 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55d6b71c1b60 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x55d6b71c1ce8 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55d6b71c1cd0 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55d6b71c1cb0 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55d6b71c1c98 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55d6b71c1c48 <col:33> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|       |       |   `-CXXThisExpr 0x55d6b71c1c38 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55d6b71c1c78 <col:39> 'int' 2
|       |-UnaryOperator 0x55d6b71c1d88 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55d6b71c1d58 <col:45, col:59> 'bool () const' CXXMethod 0x55d6b71bfe28 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x55d6b71c1dc0 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55d6b71c1da0 <col:70> 'int' 0
|-CXXMethodDecl 0x55d6b71bfe28 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x55d6b71c1fd8 <col:34, line:51:5>
|   `-ReturnStmt 0x55d6b71c1fc8 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x55d6b71c1fb0 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55d6b71c1f90 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55d6b71c1f78 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d6b71c1f60 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d6b71c1f20 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55d6b71c1ee0 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55d6b71c1eb0 <col:9> '<bound member function type>' ->data 0x55d6b71c02c0
|         |     |   `-CXXThisExpr 0x55d6b71c1ea0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55d6b71c1f00 <col:16> 'int' 0
|         `-IntegerLiteral 0x55d6b71c1f40 <col:21> 'int' 1
|-CXXMethodDecl 0x55d6b71bfee8 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x55d6b71c2198 <col:34, line:59:5>
|   `-ReturnStmt 0x55d6b71c2188 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x55d6b71c2170 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55d6b71c2150 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55d6b71c2138 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d6b71c2120 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d6b71c20e0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55d6b71c20a0 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55d6b71c2070 <col:9> '<bound member function type>' ->data 0x55d6b71c02c0
|         |     |   `-CXXThisExpr 0x55d6b71c2060 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55d6b71c20c0 <col:16> 'int' 0
|         `-IntegerLiteral 0x55d6b71c2100 <col:21> 'int' 2
|-CXXMethodDecl 0x55d6b71bffa8 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x55d6b71c2498 <col:38, line:66:5>
|   `-ReturnStmt 0x55d6b71c2488 <line:65:2, col:43>
|     `-BinaryOperator 0x55d6b71c2468 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x55d6b71c2428 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x55d6b71c2340 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x55d6b71c22f8 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x55d6b71c22e0 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55d6b71c2228 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55d6b71c2210 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55d6b71c21c0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|       | | |     |   `-CXXThisExpr 0x55d6b71c21b0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55d6b71c21f0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55d6b71c2328 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x55d6b71c2310 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55d6b71c22c0 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55d6b71c22a8 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55d6b71c2258 <col:20> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|       | |       |   `-CXXThisExpr 0x55d6b71c2248 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55d6b71c2288 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x55d6b71c2410 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x55d6b71c23f8 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55d6b71c23d8 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55d6b71c23c0 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55d6b71c2370 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|       |       |   `-CXXThisExpr 0x55d6b71c2360 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55d6b71c23a0 <col:37> 'int' 2
|       `-IntegerLiteral 0x55d6b71c2448 <col:43> 'int' 196605
|-CXXMethodDecl 0x55d6b71c0128 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x55d6b71c0060 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x55d6b71c25e8 <col:64, line:75:5>
|   `-ReturnStmt 0x55d6b71c25d8 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x55d6b71c25b8 <col:9, col:68> 'bool'
|       `-MemberExpr 0x55d6b71c2588 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x55d6b71bffa8
|         `-CXXReinterpretCastExpr 0x55d6b71c24f8 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x55d6b71c24e0 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55d6b71c24b0 <col:48> 'const unsigned char *' lvalue ParmVar 0x55d6b71c0060 'data' 'const unsigned char *'
|-CXXMethodDecl 0x55d6b71c01f8 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x55d6b71c26b0 <col:34, line:80:5>
|   `-ReturnStmt 0x55d6b71c26a0 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x55d6b71c2670 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55d6b71c2658 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55d6b71c2610 <col:43> 'uint16_t [3]' lvalue ->_data 0x55d6b71c0bb8
|           `-CXXThisExpr 0x55d6b71c2600 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x55d6b71c02c0 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x55d6b71c2778 <col:46, line:85:5>
|   `-ReturnStmt 0x55d6b71c2768 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x55d6b71c2738 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55d6b71c2720 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55d6b71c26d8 <col:49> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|           `-CXXThisExpr 0x55d6b71c26c8 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55d6b71c0408 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x55d6b71c27f8 <col:42, line:91:5>
|   `-ReturnStmt 0x55d6b71c27e8 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x55d6b71c27d0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x55d6b71c27a0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|         `-CXXThisExpr 0x55d6b71c2790 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55d6b71c04f8 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x55d6b71c2c08 <col:36, line:97:5>
|   `-ReturnStmt 0x55d6b71c2bf8 <line:95:2, line:96:31>
|     `-BinaryOperator 0x55d6b71c2bd8 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x55d6b71c2a58 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x55d6b71c2a38 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x55d6b71c2a20 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x55d6b71c2a08 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x55d6b71c2888 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x55d6b71c2870 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x55d6b71c2820 <col:10> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|       |   |     |   `-CXXThisExpr 0x55d6b71c2810 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x55d6b71c2850 <col:16> 'int' 2
|       |   `-ParenExpr 0x55d6b71c29e8 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x55d6b71c29c8 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x55d6b71c2980 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x55d6b71c2968 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x55d6b71c2950 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x55d6b71c2920 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x55d6b71c2908 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x55d6b71c28b8 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|       |       |       |   `-CXXThisExpr 0x55d6b71c28a8 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x55d6b71c28e8 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x55d6b71c29a8 <col:43> 'int' 16
|       `-ParenExpr 0x55d6b71c2bb8 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x55d6b71c2b98 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x55d6b71c2b50 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x55d6b71c2b38 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55d6b71c2b20 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x55d6b71c2af0 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x55d6b71c2ad8 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x55d6b71c2a88 <col:18> 'uint16_t const[3]' lvalue ->_data 0x55d6b71c0bb8
|           |       |   `-CXXThisExpr 0x55d6b71c2a78 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x55d6b71c2ab8 <col:24> 'int' 0
|           `-IntegerLiteral 0x55d6b71c2b78 <col:30> 'int' 9
|-CXXMethodDecl 0x55d6b71c05b8 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x55d6b71c2d18 <col:35, line:111:5>
|   `-ReturnStmt 0x55d6b71c2d08 <line:110:2, col:22>
|     `-ExprWithCleanups 0x55d6b71c2cf0 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x55d6b71c2cc0 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55d6b71c2ca8 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55d6b71c2c88 <col:9, col:22> 'String' (CXXTemporary 0x55d6b71c2c88)
|             `-CXXMemberCallExpr 0x55d6b71c2c60 <col:9, col:22> 'String'
|               `-MemberExpr 0x55d6b71c2c30 <col:9> '<bound member function type>' ->unparse_dash 0x55d6b71c0738
|                 `-CXXThisExpr 0x55d6b71c2c20 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55d6b71c0678 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x55d6b71c0738 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x55d6b71c07f8 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55d6b71c0898 <col:44> "" ""
|-CXXConversionDecl 0x55d6b71c0938 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55d6b71c09e0 <col:51> "" ""
|-TypedefDecl 0x55d6b71c0a98 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x55d6b71c0a60 'const EtherAddress &'
|   `-QualType 0x55d6b70df701 'const EtherAddress' const
|     `-RecordType 0x55d6b70df700 'EtherAddress'
|       `-CXXRecord 0x55d6b71bf348 'EtherAddress'
|-AccessSpecDecl 0x55d6b71c0af0 <line:140:2, col:9> col:2 private
|-FieldDecl 0x55d6b71c0bb8 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x55d6b71c0d08 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x55d6b71c0c18 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d6b71c2fc0 <col:30, line:146:5>
|   `-BinaryOperator 0x55d6b71c2fa0 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55d6b71c2da8 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55d6b71c2d90 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55d6b71c2d40 <col:2> 'uint16_t [3]' lvalue ->_data 0x55d6b71c0bb8
|     | |   `-CXXThisExpr 0x55d6b71c2d30 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55d6b71c2d70 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55d6b71c2f88 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55d6b71c2f68 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55d6b71c2e40 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55d6b71c2e28 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55d6b71c2dd8 <col:13> 'uint16_t [3]' lvalue ->_data 0x55d6b71c0bb8
|         | |   `-CXXThisExpr 0x55d6b71c2dc8 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55d6b71c2e08 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55d6b71c2f50 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55d6b71c2f30 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55d6b71c2ed8 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55d6b71c2ec0 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55d6b71c2e70 <col:24> 'uint16_t [3]' lvalue ->_data 0x55d6b71c0bb8
|             | |   `-CXXThisExpr 0x55d6b71c2e60 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55d6b71c2ea0 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55d6b71c2f18 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x55d6b71c2ef8 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d6b71c0c18 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55d6b71c1338 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x55d6b71c1338
| `-ParmVarDecl 0x55d6b71c1448 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x55d6b71c14e8 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b71c15f8 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x55d6b71c0bb8 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x55d6b71c1980 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x55d6b71c1908 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x55d6b71c18c0 <col:7> 'uint16_t [3]' xvalue ._data 0x55d6b71c0bb8
| |   |   `-CXXStaticCastExpr 0x55d6b71c1890 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x55d6b71c1860 <col:7> 'EtherAddress' lvalue ParmVar 0x55d6b71c15f8 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x55d6b71c1968 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55d6b71c1948 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x55d6b71c1930 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55d6b71c1908 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x55d6b71c18c0 <col:7> 'uint16_t [3]' xvalue ._data 0x55d6b71c0bb8
| |       |     `-CXXStaticCastExpr 0x55d6b71c1890 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x55d6b71c1860 <col:7> 'EtherAddress' lvalue ParmVar 0x55d6b71c15f8 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x55d6b71c1920 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55d6b71c19d0 <col:7>
`-CXXDestructorDecl 0x55d6b71c16b0 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<struct in_addr> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6b6eecf60 prev 0x55d6b6ee07e8 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6b6eed058 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x55d6b6eed0e8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x55d6b6eed510 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x55d6b6eed128 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x55d6b6eed1a8 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x55d6b6eed2e0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x55d6b6eed390 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x55d6b6eed7d8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x55d6b6eed5e0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55d6b6eed658 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x55d6b6eed6f8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55d6b6ef20f8 <col:34> 'const ArgContext' lvalue Var 0x55d6b6ee0780 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55d6b6ef1b48 <line:372:5, line:375:5> line:372:17 used parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55d6b6eed8a0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55d6b6eed990 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x55d6b6eeda08 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55d6b6ef2118 <col:34> 'const ArgContext' lvalue Var 0x55d6b6ee0780 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55d6b6ef22f8 <col:46, line:375:5>
|   `-ReturnStmt 0x55d6b6ef22e8 <line:374:2, col:63>
|     `-CallExpr 0x55d6b6ef22b0 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x55d6b6ef2298 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6b6ef2250 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x55d6b6eed7d8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x55d6b6ef21b0 <col:15> 'const String' lvalue ParmVar 0x55d6b6eed8a0 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55d6b6ef2200 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55d6b6ef21d0 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55d6b6eed990 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x55d6b6ef2230 <col:59> 'const ArgContext' lvalue ParmVar 0x55d6b6eeda08 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55d6b6ef2028 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x55d6b6ef1c10 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55d6b6ef1e90 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x55d6b6ef1f08 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55d6b6ef2138 <col:34> 'const ArgContext' lvalue Var 0x55d6b6ee0780 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x55d6b728ab98 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55d6b728ac70 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d6b728ada8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x55d6b728ada8
| `-ParmVarDecl 0x55d6b728aeb8 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x55d6b728af58 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55d6b728b068 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x55d6b728bcc0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6b6ef3468 <../dummy_inc/click/ipaddress.hh:399:1, col:69> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'in_addr'
|-CXXRecordDecl 0x55d6b6ef36c8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55d6b728aaa8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d6b728b0d8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<struct in_addr> &)' inline default trivial noexcept-unevaluated 0x55d6b728b0d8
| `-ParmVarDecl 0x55d6b728b1e8 <col:19> col:19 'const DefaultArg<struct in_addr> &'
|-CXXConstructorDecl 0x55d6b728b288 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<struct in_addr> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b728b398 <col:19> col:19 used 'DefaultArg<struct in_addr> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55d6b728bcd0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d6b728bca0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55d6b728bc70 <col:19> 'DefaultArg<struct in_addr>' xvalue static_cast<struct DefaultArg<struct in_addr> &&> <NoOp>
| |       `-DeclRefExpr 0x55d6b728bc40 <col:19> 'DefaultArg<struct in_addr>' lvalue ParmVar 0x55d6b728b398 '' 'DefaultArg<struct in_addr> &&'
| `-CompoundStmt 0x55d6b728bd40 <col:19>
`-CXXDestructorDecl 0x55d6b728b438 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6b71b8018 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55d6b71b8278 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55d6b7293748 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d6b7293848 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55d6b7293848
| `-ParmVarDecl 0x55d6b7293958 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55d6b72939f8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6b7293b08 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55d6b7294440 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d6b7294410 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55d6b72943e0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55d6b72943b0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55d6b7293b08 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55d6b72944b0 <col:19>
`-CXXDestructorDecl 0x55d6b7293ba8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
